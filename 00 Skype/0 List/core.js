(window.webpackJsonp = window.webpackJsonp || []).push([[2], [, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Browser = 1] = "Browser",
        e[e.ReactNative = 2] = "ReactNative",
        e[e.Electron = 3] = "Electron",
        e[e.Arc = 4] = "Arc",
        e[e.FireOS = 5] = "FireOS"
    }(t.AppShellType || (t.AppShellType = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.iPad = 1] = "iPad",
        e[e.iPhone = 2] = "iPhone",
        e[e.iPodTouch = 3] = "iPodTouch"
    }(t.IOSModel || (t.IOSModel = {})),
    function(e) {
        e.Off = "Off",
        e.Blur = "Blur",
        e.BackgroundImage = "BackgroundImage"
    }(t.BackgroundEffect || (t.BackgroundEffect = {})),
    t.BackgroundCategories = ["myBackgrounds", "featured", "new", "holidays", "fun", "professional", "colors", "textures", "nature", "movies", "cultural", "skypebackgroundimage"],
    function(e) {
        e[e.Opened = 1] = "Opened",
        e[e.Foregrounded = 2] = "Foregrounded",
        e[e.QuickAction = 3] = "QuickAction",
        e[e.URI = 4] = "URI",
        e[e.PushNotification = 5] = "PushNotification",
        e[e.ChatNotification = 6] = "ChatNotification",
        e[e.CallNotification = 7] = "CallNotification"
    }(t.AppEntryPoint || (t.AppEntryPoint = {})),
    function(e) {
        e[e.SMS = 0] = "SMS",
        e[e.Email = 1] = "Email",
        e[e.ShareUrl = 2] = "ShareUrl",
        e[e.SearchPublicDirectory = 3] = "SearchPublicDirectory",
        e[e.Cancelled = 4] = "Cancelled"
    }(t.ContactInviteType || (t.ContactInviteType = {})),
    function(e) {
        e[e.ContextMenu = 0] = "ContextMenu",
        e[e.KeyboardShortcut = 1] = "KeyboardShortcut",
        e[e.ProfilePanel = 2] = "ProfilePanel"
    }(t.ArchiveConversationOrigin || (t.ArchiveConversationOrigin = {})),
    function(e) {
        e[e.ConversationUpdate = 0] = "ConversationUpdate",
        e[e.ContextMenu = 1] = "ContextMenu",
        e[e.NavigateToConversationFromProfile = 2] = "NavigateToConversationFromProfile",
        e[e.NavigateToConversationFromSearch = 3] = "NavigateToConversationFromSearch",
        e[e.ProfilePanel = 4] = "ProfilePanel",
        e[e.UndoPill = 5] = "UndoPill",
        e[e.Unknown = 6] = "Unknown"
    }(t.UnarchiveConversationOrigin || (t.UnarchiveConversationOrigin = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.RecentsPlusButton = 1] = "RecentsPlusButton",
        e[e.AddressBookSearchResult = 2] = "AddressBookSearchResult",
        e[e.NoSearchResults = 3] = "NoSearchResults",
        e[e.ShareProfile = 4] = "ShareProfile",
        e[e.CallPanelSearch = 5] = "CallPanelSearch",
        e[e.CallCard = 6] = "CallCard",
        e[e.PeoplePanelLink = 7] = "PeoplePanelLink",
        e[e.InviteSharePanel = 8] = "InviteSharePanel",
        e[e.SearchItem = 9] = "SearchItem",
        e[e.ConversationHeader = 10] = "ConversationHeader",
        e[e.PublicDirectory = 11] = "PublicDirectory",
        e[e.ConnectWithPeople = 12] = "ConnectWithPeople",
        e[e.PstnChatWindow = 13] = "PstnChatWindow",
        e[e.CallFailurePrompt = 14] = "CallFailurePrompt",
        e[e.SmsFailurePrompt = 15] = "SmsFailurePrompt"
    }(t.ContactInviteOrigin || (t.ContactInviteOrigin = {})),
    function(e) {
        e[e.Capture = 1] = "Capture",
        e[e.DragDrop = 2] = "DragDrop",
        e[e.DragDropFromConversationToRecentLists = 3] = "DragDropFromConversationToRecentLists",
        e[e.FilePicker = 4] = "FilePicker",
        e[e.MediaPicker = 5] = "MediaPicker",
        e[e.QuickCapture = 6] = "QuickCapture",
        e[e.ShareWith = 7] = "ShareWith",
        e[e.MessageComposer = 8] = "MessageComposer",
        e[e.AudioMessageComposer = 9] = "AudioMessageComposer",
        e[e.Screenshot = 10] = "Screenshot",
        e[e.Logs = 11] = "Logs",
        e[e.Gallery = 12] = "Gallery",
        e[e.ShareToSkype = 13] = "ShareToSkype",
        e[e.FeedbackString = 14] = "FeedbackString",
        e[e.CancelFailedPost = 15] = "CancelFailedPost",
        e[e.SlashCommand = 16] = "SlashCommand",
        e[e.MessagePanel = 17] = "MessagePanel",
        e[e.CallReactionPressed = 18] = "CallReactionPressed",
        e[e.CallStage = 19] = "CallStage",
        e[e.ReactionsMessageComposer = 20] = "ReactionsMessageComposer",
        e[e.MessageOptionsDelete = 21] = "MessageOptionsDelete",
        e[e.SwiftReply = 22] = "SwiftReply",
        e[e.SharePreview = 23] = "SharePreview",
        e[e.LocationPicker = 24] = "LocationPicker",
        e[e.MojiSearch = 25] = "MojiSearch",
        e[e.SwiftCardPicker = 26] = "SwiftCardPicker",
        e[e.PartListMessage = 27] = "PartListMessage",
        e[e.CallEmoticonReaction = 28] = "CallEmoticonReaction",
        e[e.P2PCallNotification = 29] = "P2PCallNotification",
        e[e.ReplyFromNotification = 30] = "ReplyFromNotification",
        e[e.InviteFakeMessage = 31] = "InviteFakeMessage",
        e[e.EphemeralMessage = 32] = "EphemeralMessage",
        e[e.CortanaLoginSuccess = 33] = "CortanaLoginSuccess",
        e[e.ShareSwiftMessage = 34] = "ShareSwiftMessage",
        e[e.ForwardSwift = 35] = "ForwardSwift",
        e[e.ShareUrl = 36] = "ShareUrl",
        e[e.SwiftImBack = 37] = "SwiftImBack",
        e[e.UnansweredCallPanel = 38] = "UnansweredCallPanel",
        e[e.DeepLink = 39] = "DeepLink",
        e[e.CallMoments = 40] = "CallMoments",
        e[e.StartChattingCard = 41] = "StartChattingCard",
        e[e.CapturePreview = 42] = "CapturePreview",
        e[e.CallRecording = 43] = "CallRecording",
        e[e.StickerSearch = 44] = "StickerSearch",
        e[e.GifSearch = 45] = "GifSearch",
        e[e.SnapshotNotification = 46] = "SnapshotNotification",
        e[e.ScheduledCall = 47] = "ScheduledCall",
        e[e.CellularSmsMessageFromNative = 48] = "CellularSmsMessageFromNative",
        e[e.CellularSmsMessageFromMessagePanel = 49] = "CellularSmsMessageFromMessagePanel",
        e[e.CellularSmsMessageFromNativeDelete = 50] = "CellularSmsMessageFromNativeDelete",
        e[e.EngagementShareableContent = 51] = "EngagementShareableContent",
        e[e.Poll = 52] = "Poll",
        e[e.ScheduledCallFakeMessage = 53] = "ScheduledCallFakeMessage",
        e[e.MediaPreview = 54] = "MediaPreview",
        e[e.DeclineAndMessageMenu = 55] = "DeclineAndMessageMenu",
        e[e.Bookmarks = 56] = "Bookmarks",
        e[e.ForwardAlbum = 57] = "ForwardAlbum",
        e[e.DirectShare = 58] = "DirectShare",
        e[e.StreamItemCommand = 59] = "StreamItemCommand",
        e[e.Clipboard = 60] = "Clipboard"
    }(t.PostSource || (t.PostSource = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.AMSFailure = 1] = "AMSFailure",
        e[e.ChatServiceFailure = 2] = "ChatServiceFailure",
        e[e.Offline = 3] = "Offline",
        e[e.CacheFailure = 4] = "CacheFailure"
    }(t.MessagingFailureReason || (t.MessagingFailureReason = {})),
    function(e) {
        e[e.AMSCreate = 0] = "AMSCreate",
        e[e.AMSUploadThumbnail = 1] = "AMSUploadThumbnail",
        e[e.AMSUploadContent = 2] = "AMSUploadContent",
        e[e.AMSForward = 3] = "AMSForward",
        e[e.AMSGetStatus = 4] = "AMSGetStatus",
        e[e.ChatService = 5] = "ChatService",
        e[e.Azure = 6] = "Azure",
        e[e.URLPreview = 7] = "URLPreview",
        e[e.CreateConversation = 8] = "CreateConversation",
        e[e.ChatServiceUpdateProperties = 9] = "ChatServiceUpdateProperties"
    }(t.PostingTransferSource || (t.PostingTransferSource = {})),
    function(e) {
        e[e.AmsDownload = 0] = "AmsDownload",
        e[e.AMSGetStatus = 1] = "AMSGetStatus"
    }(t.DownloadTransferSource || (t.DownloadTransferSource = {})),
    function(e) {
        e[e.LongPoll = 0] = "LongPoll",
        e[e.ChatSync = 1] = "ChatSync",
        e[e.PushNotification = 2] = "PushNotification",
        e[e.LocalChange = 3] = "LocalChange"
    }(t.MessageOrigin || (t.MessageOrigin = {})),
    function(e) {
        e[e.LongPoll = 0] = "LongPoll"
    }(t.ChatEventOrigin || (t.ChatEventOrigin = {})),
    function(e) {
        e[e.ShareCardFromPage = 0] = "ShareCardFromPage",
        e[e.ShareUrlFromPage = 1] = "ShareUrlFromPage",
        e[e.ShareCardFromBrowser = 2] = "ShareCardFromBrowser",
        e[e.ShareUrlFromBrowser = 3] = "ShareUrlFromBrowser",
        e[e.ShareCurrentUrlFromBrowser = 4] = "ShareCurrentUrlFromBrowser",
        e[e.ShareCardFromAddin = 5] = "ShareCardFromAddin",
        e[e.ShareUrlFromAddin = 6] = "ShareUrlFromAddin"
    }(t.BrowserShareAction || (t.BrowserShareAction = {})),
    function(e) {
        e[e.FindPanelCategory = 0] = "FindPanelCategory",
        e[e.FindPanelSearch = 1] = "FindPanelSearch",
        e[e.Url = 2] = "Url"
    }(t.BingEntryPoint || (t.BingEntryPoint = {})),
    function(e) {
        e[e.BingConsentDialog = 0] = "BingConsentDialog",
        e[e.BingSettings = 1] = "BingSettings"
    }(t.BingPermissionsEntryPoint || (t.BingPermissionsEntryPoint = {})),
    function(e) {
        e[e.CortanaSettings = 0] = "CortanaSettings",
        e[e.Recents = 1] = "Recents",
        e[e.SearchResult = 2] = "SearchResult",
        e[e.MediaBar = 3] = "MediaBar",
        e[e.OptInUriAction = 4] = "OptInUriAction",
        e[e.ContactAdded = 5] = "ContactAdded",
        e[e.WelcomeMessagePersonalizationToggle = 6] = "WelcomeMessagePersonalizationToggle",
        e[e.WelcomeMessageFromFirstRun = 7] = "WelcomeMessageFromFirstRun"
    }(t.CortanaEntryPoint || (t.CortanaEntryPoint = {})),
    function(e) {
        e[e.AnswerCardClicked = 0] = "AnswerCardClicked",
        e[e.MessageReceived = 1] = "MessageReceived",
        e[e.MessageRendered = 2] = "MessageRendered",
        e[e.MessageSent = 3] = "MessageSent",
        e[e.ShareAnswerCard = 4] = "ShareAnswerCard",
        e[e.SuggestedCardShared = 5] = "SuggestedCardShared",
        e[e.SuggestionClicked = 6] = "SuggestionClicked",
        e[e.SuggestionsRendered = 7] = "SuggestionsRendered",
        e[e.NegativeFeedbackClicked = 8] = "NegativeFeedbackClicked",
        e[e.SuggestionCardShared = 9] = "SuggestionCardShared",
        e[e.ReminderActionClicked = 10] = "ReminderActionClicked",
        e[e.EnableSuggestions = 11] = "EnableSuggestions",
        e[e.DisableSuggestions = 12] = "DisableSuggestions",
        e[e.EnablePersonalization = 13] = "EnablePersonalization",
        e[e.DisablePersonalization = 14] = "DisablePersonalization"
    }(t.CortanaActionType || (t.CortanaActionType = {})),
    function(e) {
        e[e.ContactAdded = 0] = "ContactAdded",
        e[e.WelcomeMessagePersonalizationToggle = 1] = "WelcomeMessagePersonalizationToggle",
        e[e.WelcomeMessageFromFirstRun = 2] = "WelcomeMessageFromFirstRun",
        e[e.AgeGated = 3] = "AgeGated",
        e[e.ConsentDeferred = 4] = "ConsentDeferred",
        e[e.ConsentGranted = 5] = "ConsentGranted",
        e[e.InAppAuthCompleted = 6] = "InAppAuthCompleted",
        e[e.OptedIn = 7] = "OptedIn",
        e[e.OptedOut = 8] = "OptedOut",
        e[e.SilentAuthCompleted = 9] = "SilentAuthCompleted",
        e[e.OptInMismatch = 10] = "OptInMismatch",
        e[e.OptedOutByServer = 11] = "OptedOutByServer",
        e[e.InterruptHitInSkypeAuth = 12] = "InterruptHitInSkypeAuth",
        e[e.InterruptHitInBotAuth = 13] = "InterruptHitInBotAuth",
        e[e.BotAuthCompleted = 14] = "BotAuthCompleted"
    }(t.CortanaAuthStep || (t.CortanaAuthStep = {})),
    function(e) {
        e[e.Conversation = 0] = "Conversation",
        e[e.SuggestionsConsent = 1] = "SuggestionsConsent",
        e[e.OptInUriAction = 2] = "OptInUriAction",
        e[e.NotebookLink = 3] = "NotebookLink",
        e[e.BrowserRedirect = 4] = "BrowserRedirect",
        e[e.AutoRefresh = 5] = "AutoRefresh",
        e[e.OptOutClient = 6] = "OptOutClient",
        e[e.CortanaMessage = 7] = "CortanaMessage"
    }(t.CortanaAuthOrigin || (t.CortanaAuthOrigin = {})),
    function(e) {
        e[e.ConsentDeferred = 0] = "ConsentDeferred",
        e[e.ConsentGranted = 1] = "ConsentGranted"
    }(t.SuggestionsAuthStep || (t.SuggestionsAuthStep = {})),
    function(e) {
        e[e.ZeroInput = 0] = "ZeroInput",
        e[e.ShortQuery = 1] = "ShortQuery",
        e[e.LongQuery = 2] = "LongQuery"
    }(t.SearchType || (t.SearchType = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Few = 1] = "Few"
    }(t.ContactsLevel || (t.ContactsLevel = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.RecentsListSearchButton = 1] = "RecentsListSearchButton",
        e[e.ContactsPanel = 2] = "ContactsPanel",
        e[e.ElectronMenu = 3] = "ElectronMenu",
        e[e.QuickCallPanel = 4] = "QuickCallPanel",
        e[e.KeyboardShortcut = 5] = "KeyboardShortcut",
        e[e.SuperComposer = 6] = "SuperComposer",
        e[e.LandingScreen = 7] = "LandingScreen"
    }(t.SearchPanelInitiator || (t.SearchPanelInitiator = {})),
    function(e) {
        e[e.AddContact = 0] = "AddContact",
        e[e.AddingPeopleToGroup = 1] = "AddingPeopleToGroup",
        e[e.ActiveNowPanel = 2] = "ActiveNowPanel",
        e[e.ContactsPanel = 3] = "ContactsPanel",
        e[e.ContactsPanelV2 = 4] = "ContactsPanelV2",
        e[e.DiscoverPanel = 5] = "DiscoverPanel",
        e[e.FindBots = 6] = "FindBots",
        e[e.MoreContactsPanel = 7] = "MoreContactsPanel",
        e[e.NewChat = 8] = "NewChat",
        e[e.NewGroup = 9] = "NewGroup",
        e[e.NewPrivateChat = 10] = "NewPrivateChat",
        e[e.PSTNDialerPanel = 11] = "PSTNDialerPanel",
        e[e.QuickCallPanel = 12] = "QuickCallPanel",
        e[e.SearchPanel = 13] = "SearchPanel",
        e[e.ShareWithPanel = 14] = "ShareWithPanel",
        e[e.SuperComposer = 15] = "SuperComposer",
        e[e.NewCellularSmsConversation = 16] = "NewCellularSmsConversation",
        e[e.QuickCallPanelModal = 17] = "QuickCallPanelModal"
    }(t.SearchResultsListOrigin || (t.SearchResultsListOrigin = {})),
    function(e) {
        e[e.ClickPlusMenu = 0] = "ClickPlusMenu",
        e[e.NavigateToBotStore = 1] = "NavigateToBotStore",
        e[e.CloseBotStore = 2] = "CloseBotStore",
        e[e.ViewBotProfile = 3] = "ViewBotProfile",
        e[e.CloseBotProfile = 4] = "CloseBotProfile",
        e[e.ClickChatWithBot = 5] = "ClickChatWithBot",
        e[e.ClickShareBot = 6] = "ClickShareBot",
        e[e.SearchBotInRecents = 7] = "SearchBotInRecents",
        e[e.ClickMoreForCategory = 8] = "ClickMoreForCategory",
        e[e.MessageBot = 9] = "MessageBot",
        e[e.BlockBot = 10] = "BlockBot",
        e[e.DeleteBot = 11] = "DeleteBot",
        e[e.AutoAddBot = 12] = "AutoAddBot"
    }(t.BotsInteraction || (t.BotsInteraction = {})),
    function(e) {
        e[e.BotsDetailsPanel = 0] = "BotsDetailsPanel",
        e[e.GetStarted = 1] = "GetStarted",
        e[e.AddBotToContacts = 2] = "AddBotToContacts",
        e[e.SendMessage = 3] = "SendMessage"
    }(t.BotsOriginatingPanel || (t.BotsOriginatingPanel = {})),
    function(e) {
        e[e.AddressBook = 0] = "AddressBook",
        e[e.AddressBookWithAlphaHeaders = 1] = "AddressBookWithAlphaHeaders",
        e[e.AllPeople = 2] = "AllPeople",
        e[e.AllPeopleWithoutAddressBook = 3] = "AllPeopleWithoutAddressBook",
        e[e.Bots = 4] = "Bots",
        e[e.ContactsPrivacyNoticeBanner = 5] = "ContactsPrivacyNoticeBanner",
        e[e.FavoriteContacts = 6] = "FavoriteContacts",
        e[e.GroupChats = 7] = "GroupChats",
        e[e.InviteLink = 8] = "InviteLink",
        e[e.SyncAddressBookBanner = 9] = "SyncAddressBookBanner",
        e[e.SyncAddressBookLink = 10] = "SyncAddressBookLink",
        e[e.Messages = 11] = "Messages",
        e[e.PublicDirectory = 12] = "PublicDirectory",
        e[e.UpcomingCalls = 13] = "UpcomingCalls",
        e[e.RecentCalls = 14] = "RecentCalls",
        e[e.RecentCallsExtended = 15] = "RecentCallsExtended",
        e[e.SuggestedFrequentConversations = 16] = "SuggestedFrequentConversations",
        e[e.SuggestedRecentConversations = 17] = "SuggestedRecentConversations",
        e[e.SuggestedRecentConversationsWithEstablishedPrivateConversations = 18] = "SuggestedRecentConversationsWithEstablishedPrivateConversations",
        e[e.CombinedContacts = 19] = "CombinedContacts",
        e[e.CombinedContactsWithoutAlphaHeaders = 20] = "CombinedContactsWithoutAlphaHeaders",
        e[e.CombinedContactsWithoutAddressBookOrAlphaHeaders = 21] = "CombinedContactsWithoutAddressBookOrAlphaHeaders",
        e[e.CombinedContactsWithoutAddressBook = 22] = "CombinedContactsWithoutAddressBook",
        e[e.SkypeContacts = 23] = "SkypeContacts",
        e[e.RecommendedPeople = 24] = "RecommendedPeople",
        e[e.PstnDialpad = 25] = "PstnDialpad",
        e[e.PhoneNumberVerificationLink = 26] = "PhoneNumberVerificationLink",
        e[e.ActiveNow = 27] = "ActiveNow",
        e[e.ShareGroup = 28] = "ShareGroup",
        e[e.AddContactLink = 29] = "AddContactLink",
        e[e.SearchFeedbackLink = 30] = "SearchFeedbackLink",
        e[e.AllPeopleWithPhoneNumbers = 31] = "AllPeopleWithPhoneNumbers",
        e[e.GroupMember = 32] = "GroupMember",
        e[e.ConnectWithPeople = 33] = "ConnectWithPeople"
    }(t.SearchResultsListGroup || (t.SearchResultsListGroup = {})),
    function(e) {
        e[e.Home = 0] = "Home",
        e[e.Conversation = 1] = "Conversation"
    }(t.CaptureNavFrom || (t.CaptureNavFrom = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.PlusButton = 1] = "PlusButton",
        e[e.Recents = 2] = "Recents",
        e[e.Search = 3] = "Search",
        e[e.PeoplePanel = 4] = "PeoplePanel",
        e[e.AppStart = 5] = "AppStart",
        e[e.BotDetails = 6] = "BotDetails",
        e[e.Call = 7] = "Call",
        e[e.CallComplete = 8] = "CallComplete",
        e[e.Gallery = 9] = "Gallery",
        e[e.GroupProfile = 10] = "GroupProfile",
        e[e.UserProfile = 11] = "UserProfile",
        e[e.AlertsPanel = 12] = "AlertsPanel",
        e[e.InAppNotification = 13] = "InAppNotification",
        e[e.SystemNotification = 14] = "SystemNotification",
        e[e.DeepLink = 15] = "DeepLink",
        e[e.ShareToSkype = 16] = "ShareToSkype",
        e[e.CompositeNavRedirectToRecentConv = 17] = "CompositeNavRedirectToRecentConv",
        e[e.CompositeNavCloseShareWithPanel = 18] = "CompositeNavCloseShareWithPanel",
        e[e.CompositeNavCloseLocationPicker = 19] = "CompositeNavCloseLocationPicker",
        e[e.CompositeNavCloseLocationViewer = 20] = "CompositeNavCloseLocationViewer",
        e[e.NavToDefaultConv = 21] = "NavToDefaultConv",
        e[e.CapturePanel = 22] = "CapturePanel",
        e[e.DesktopCloseCapturePanel = 23] = "DesktopCloseCapturePanel",
        e[e.DesktopCloseCapturePreviewPanel = 24] = "DesktopCloseCapturePreviewPanel",
        e[e.LinkForNewGroupWithBot = 25] = "LinkForNewGroupWithBot",
        e[e.LinkForNewGroupWithUser = 26] = "LinkForNewGroupWithUser",
        e[e.LinkForNewGroupWithUserAndBot = 27] = "LinkForNewGroupWithUserAndBot",
        e[e.Announcement = 28] = "Announcement",
        e[e.MediaPicker = 29] = "MediaPicker",
        e[e.QuoteLink = 30] = "QuoteLink",
        e[e.SwiftCardLink = 31] = "SwiftCardLink",
        e[e.FeedbackMechanism = 32] = "FeedbackMechanism",
        e[e.SlashCommand = 33] = "SlashCommand",
        e[e.NavToCortana = 34] = "NavToCortana",
        e[e.HeaderButtonNewGroupWithUser = 35] = "HeaderButtonNewGroupWithUser",
        e[e.KeyboardShortcutNewGroupWithUser = 36] = "KeyboardShortcutNewGroupWithUser",
        e[e.PopCards = 37] = "PopCards",
        e[e.AppMenu = 38] = "AppMenu",
        e[e.EngagementNotice = 39] = "EngagementNotice",
        e[e.PSTNDialer = 40] = "PSTNDialer",
        e[e.SmsControl = 41] = "SmsControl",
        e[e.SMSNumberSwitch = 42] = "SMSNumberSwitch",
        e[e.CallOrInvitePrompt = 43] = "CallOrInvitePrompt",
        e[e.NewPrivateConversation = 44] = "NewPrivateConversation",
        e[e.SwiftForwardComplete = 45] = "SwiftForwardComplete",
        e[e.Campaign = 46] = "Campaign",
        e[e.InviteLink = 47] = "InviteLink",
        e[e.ElectronUri = 48] = "ElectronUri",
        e[e.OnUrlChange = 49] = "OnUrlChange",
        e[e.LinkerUtil = 50] = "LinkerUtil",
        e[e.InitialUrl = 51] = "InitialUrl",
        e[e.NewChat = 52] = "NewChat",
        e[e.NewGroup = 53] = "NewGroup",
        e[e.NewModeratedGroup = 54] = "NewModeratedGroup",
        e[e.UserProfileNewGroupWithUser = 55] = "UserProfileNewGroupWithUser",
        e[e.BotProfileNewGroupWithBot = 56] = "BotProfileNewGroupWithBot",
        e[e.NewGroupWithUserAndBot = 57] = "NewGroupWithUserAndBot",
        e[e.KeyboardShortcutAddPeopleToGroup = 58] = "KeyboardShortcutAddPeopleToGroup",
        e[e.HeaderButtonAddUserToGroup = 59] = "HeaderButtonAddUserToGroup",
        e[e.NewPrivateChat = 60] = "NewPrivateChat",
        e[e.SuperComposer = 61] = "SuperComposer",
        e[e.InviteMorePeopleAfterJoinButton = 62] = "InviteMorePeopleAfterJoinButton",
        e[e.MediaBar = 63] = "MediaBar",
        e[e.MessageComposer = 64] = "MessageComposer",
        e[e.HomeScreen = 65] = "HomeScreen",
        e[e.TabSwitcher = 66] = "TabSwitcher",
        e[e.KeyboardShortcut = 67] = "KeyboardShortcut",
        e[e.SystemNotificationMissedCall = 68] = "SystemNotificationMissedCall",
        e[e.SystemNotificationMissedP2PCall = 69] = "SystemNotificationMissedP2PCall",
        e[e.SystemNotificationChatReply = 70] = "SystemNotificationChatReply",
        e[e.SystemNotificationScheduledCall = 71] = "SystemNotificationScheduledCall",
        e[e.GoLiveNotification = 72] = "GoLiveNotification",
        e[e.NativeContactIntent = 73] = "NativeContactIntent",
        e[e.SharedContactCard = 74] = "SharedContactCard",
        e[e.NewSms = 75] = "NewSms",
        e[e.ArchivedConversations = 76] = "ArchivedConversations",
        e[e.UpcomingCallsPanel = 77] = "UpcomingCallsPanel",
        e[e.PeopleRecommendationsDiscoverPanel = 78] = "PeopleRecommendationsDiscoverPanel",
        e[e.PeopleRecommendationsUserCard = 79] = "PeopleRecommendationsUserCard",
        e[e.CallParticipantActionMenu = 80] = "CallParticipantActionMenu",
        e[e.KeyboardShortcutRecents = 81] = "KeyboardShortcutRecents",
        e[e.PresenceChangeNotification = 82] = "PresenceChangeNotification",
        e[e.BookmarkMessage = 83] = "BookmarkMessage",
        e[e.DragDropFromConversationToRecentLists = 84] = "DragDropFromConversationToRecentLists",
        e[e.CreateMeetNowConversation = 85] = "CreateMeetNowConversation",
        e[e.MeetNowChat = 86] = "MeetNowChat",
        e[e.MeetNowCall = 87] = "MeetNowCall",
        e[e.MeetNowJoinFlow = 88] = "MeetNowJoinFlow",
        e[e.OverflowMenu = 89] = "OverflowMenu",
        e[e.MeetNowJoinLobby = 90] = "MeetNowJoinLobby",
        e[e.MeetNowCreatorPanel = 91] = "MeetNowCreatorPanel"
    }(t.NavigationConversationOrigin || (t.NavigationConversationOrigin = {})),
    function(e) {
        e[e.PreAnimation = 0] = "PreAnimation",
        e[e.Animation = 1] = "Animation",
        e[e.Rendered = 2] = "Rendered"
    }(t.NavigationConversationTelemetryMetric || (t.NavigationConversationTelemetryMetric = {})),
    function(e) {
        e[e.Invalid = 0] = "Invalid",
        e[e.Accepted = 1] = "Accepted",
        e[e.AcceptPendingSender = 2] = "AcceptPendingSender",
        e[e.AcceptPendingRecipient = 3] = "AcceptPendingRecipient"
    }(t.ConversationStatus || (t.ConversationStatus = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.PhotoOnly = 1] = "PhotoOnly",
        e[e.VideoOnly = 2] = "VideoOnly"
    }(t.CaptureMode || (t.CaptureMode = {})),
    function(e) {
        e[e.Quote = 0] = "Quote",
        e[e.Mention = 1] = "Mention",
        e[e.Reaction = 2] = "Reaction",
        e[e.Onboarding = 3] = "Onboarding",
        e[e.Engagement = 4] = "Engagement",
        e[e.CoachMarks = 5] = "CoachMarks",
        e[e.Notice = 6] = "Notice",
        e[e.Unknown = 7] = "Unknown",
        e[e.ScheduledCall = 8] = "ScheduledCall"
    }(t.AlertTypeForTelemetry || (t.AlertTypeForTelemetry = {})),
    function(e) {
        e[e.PostStaticServices = 0] = "PostStaticServices",
        e[e.PostImage = 1] = "PostImage",
        e[e.GetService = 2] = "GetService"
    }(t.SprinklesSteps || (t.SprinklesSteps = {})),
    function(e) {
        e[e.My = 0] = "My",
        e[e.User = 1] = "User",
        e[e.Bot = 2] = "Bot",
        e[e.Group = 3] = "Group"
    }(t.ProfileType || (t.ProfileType = {})),
    function(e) {
        e[e.Wasted = -1] = "Wasted",
        e[e.AlreadyRunning = 0] = "AlreadyRunning",
        e[e.FollowedByNonWarmPush = 1] = "FollowedByNonWarmPush",
        e[e.FollowedByForegrounding = 10] = "FollowedByForegrounding",
        e[e.FollowedByCall = 100] = "FollowedByCall"
    }(t.WarmCallNotificationDisposition || (t.WarmCallNotificationDisposition = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.ChatServiceV1 = 1] = "ChatServiceV1",
        e[e.MessagingApi = 2] = "MessagingApi"
    }(t.ChatServiceConnectionType || (t.ChatServiceConnectionType = {})),
    function(e) {
        e[e.AuthActionLink = 0] = "AuthActionLink",
        e[e.AudioVideoSettings = 1] = "AudioVideoSettings",
        e[e.EngagementNotice = 2] = "EngagementNotice",
        e[e.LinkNode = 3] = "LinkNode",
        e[e.BotSettings = 4] = "BotSettings",
        e[e.ConsentModal = 5] = "ConsentModal",
        e[e.FindPanel = 6] = "FindPanel",
        e[e.SuggestionsLearnMore = 7] = "SuggestionsLearnMore",
        e[e.CortanaSettingsDescription = 8] = "CortanaSettingsDescription",
        e[e.MoneyItemPicker = 9] = "MoneyItemPicker",
        e[e.MoneySettings = 10] = "MoneySettings",
        e[e.NotebookLink = 11] = "NotebookLink",
        e[e.DeepLinkRequest = 12] = "DeepLinkRequest",
        e[e.SyncAddressBookDialogPrivacyStatement = 13] = "SyncAddressBookDialogPrivacyStatement",
        e[e.PopCard = 14] = "PopCard",
        e[e.SwiftActionView = 15] = "SwiftActionView",
        e[e.SwiftQuickReplyView = 16] = "SwiftQuickReplyView",
        e[e.Moji = 17] = "Moji",
        e[e.MoneyNode = 18] = "MoneyNode",
        e[e.LinkerUtil = 19] = "LinkerUtil",
        e[e.TPUMRequest = 20] = "TPUMRequest",
        e[e.SprinklesEffectsDescription = 21] = "SprinklesEffectsDescription",
        e[e.CloseAccount = 22] = "CloseAccount",
        e[e.LocationNode = 23] = "LocationNode",
        e[e.AdaptiveCard = 24] = "AdaptiveCard",
        e[e.ConnectorProfile = 25] = "ConnectorProfile",
        e[e.CreditExpiration = 26] = "CreditExpiration",
        e[e.SuggestionsConsentLearnMore = 27] = "SuggestionsConsentLearnMore",
        e[e.JoinLink = 28] = "JoinLink",
        e[e.MoneyRequestNode = 29] = "MoneyRequestNode",
        e[e.ReadReceiptsSettingsDescription = 30] = "ReadReceiptsSettingsDescription",
        e[e.SearchSuggestionsSettings = 31] = "SearchSuggestionsSettings",
        e[e.AddinMenu = 32] = "AddinMenu",
        e[e.Plugins = 33] = "Plugins",
        e[e.NetworkConnectionAlert = 34] = "NetworkConnectionAlert",
        e[e.FileSharingLimits = 35] = "FileSharingLimits",
        e[e.PrivacyProfile = 36] = "PrivacyProfile",
        e[e.PeopleYouMayKnowNoticeDialog = 37] = "PeopleYouMayKnowNoticeDialog",
        e[e.SubscriptionDataSection = 38] = "SubscriptionDataSection",
        e[e.MeControl = 39] = "MeControl",
        e[e.WebLauncher = 40] = "WebLauncher",
        e[e.MeProfile = 41] = "MeProfile",
        e[e.HotkeysSettingsDescription = 42] = "HotkeysSettingsDescription",
        e[e.UserProfileOnboarding = 43] = "UserProfileOnboarding"
    }(t.BrowserOrigin || (t.BrowserOrigin = {})),
    function(e) {
        e[e.CdnTokenFetching = 0] = "CdnTokenFetching",
        e[e.CdnCookieSetting = 1] = "CdnCookieSetting"
    }(t.SkypeCdnTokenFailureOrigin || (t.SkypeCdnTokenFailureOrigin = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.SplashScreen = 1] = "SplashScreen",
        e[e.NoSkypeIdFound = 2] = "NoSkypeIdFound",
        e[e.SkypeIdDbError = 3] = "SkypeIdDbError",
        e[e.NoMSARefreshTokenFound = 4] = "NoMSARefreshTokenFound",
        e[e.NoMSAAccessTokenFound = 5] = "NoMSAAccessTokenFound",
        e[e.MSARefreshInvalidGrant = 6] = "MSARefreshInvalidGrant",
        e[e.SkypeTokenSilentLoginInvalidGrant = 7] = "SkypeTokenSilentLoginInvalidGrant",
        e[e.SkypeTokenSilentLoginFailed = 8] = "SkypeTokenSilentLoginFailed",
        e[e.QuickSignOnActive = 9] = "QuickSignOnActive",
        e[e.SingleSignOnActive = 10] = "SingleSignOnActive",
        e[e.GuestJoinUnavailable = 11] = "GuestJoinUnavailable",
        e[e.BackgroundSignIn = 12] = "BackgroundSignIn"
    }(t.RedirectToLoginReason || (t.RedirectToLoginReason = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.DatabaseError = 1] = "DatabaseError",
        e[e.UrlRequested = 2] = "UrlRequested",
        e[e.CommandLineRequested = 3] = "CommandLineRequested",
        e[e.UnauthorizedMurphyUser = 4] = "UnauthorizedMurphyUser",
        e[e.LoginRestarted = 5] = "LoginRestarted",
        e[e.SkypeIdMismatch = 6] = "SkypeIdMismatch",
        e[e.DesktopMenu = 7] = "DesktopMenu",
        e[e.Settings = 8] = "Settings",
        e[e.CloseAccount = 9] = "CloseAccount",
        e[e.LandingPageSwitchAccount = 10] = "LandingPageSwitchAccount",
        e[e.GuestUpsellSignIn = 11] = "GuestUpsellSignIn",
        e[e.GuestSessionEnded = 12] = "GuestSessionEnded",
        e[e.MeControl = 13] = "MeControl",
        e[e.CompositeNavigationFooter = 14] = "CompositeNavigationFooter",
        e[e.Onboarding = 15] = "Onboarding"
    }(t.LogoutReason || (t.LogoutReason = {})),
    function(e) {
        e[e.FailedToSave = 0] = "FailedToSave",
        e[e.FailedToRead = 1] = "FailedToRead"
    }(t.KeychainFailureType || (t.KeychainFailureType = {})),
    function(e) {
        e[e.MSARefresh = 0] = "MSARefresh",
        e[e.Skype = 1] = "Skype"
    }(t.KeychainTokenType || (t.KeychainTokenType = {})),
    function(e) {
        e[e.DeletedMessage = 0] = "DeletedMessage",
        e[e.EditedMessage = 1] = "EditedMessage",
        e[e.MutatedMessage = 2] = "MutatedMessage",
        e[e.CallMessage = 3] = "CallMessage",
        e[e.MyMessage = 4] = "MyMessage",
        e[e.ChatNotificationsDisabled = 5] = "ChatNotificationsDisabled",
        e[e.InAppNotificationsDisabled = 6] = "InAppNotificationsDisabled",
        e[e.CameFromSyncOrLocal = 7] = "CameFromSyncOrLocal",
        e[e.RecentlyNotified = 8] = "RecentlyNotified",
        e[e.Filtered = 9] = "Filtered",
        e[e.FromBlockedUser = 10] = "FromBlockedUser",
        e[e.MandatoryElectronUpdate = 11] = "MandatoryElectronUpdate",
        e[e.EngagementNotificationSuppressed = 12] = "EngagementNotificationSuppressed",
        e[e.IsForegroundedInConversation = 13] = "IsForegroundedInConversation",
        e[e.SystemMessagePermissionsUnknown = 14] = "SystemMessagePermissionsUnknown",
        e[e.SystemMessagePermissionsDenied = 15] = "SystemMessagePermissionsDenied",
        e[e.SystemMessageFailure = 16] = "SystemMessageFailure",
        e[e.NotifiedInApp = 17] = "NotifiedInApp",
        e[e.NotifiedSystemMessage = 18] = "NotifiedSystemMessage",
        e[e.ThreadActivitySuppressed = 19] = "ThreadActivitySuppressed",
        e[e.DoNotDisturbEnabled = 20] = "DoNotDisturbEnabled",
        e[e.CortanaAuthSuppressed = 21] = "CortanaAuthSuppressed",
        e[e.CortanaDisabled = 22] = "CortanaDisabled",
        e[e.SiblingConversationInTabActive = 23] = "SiblingConversationInTabActive",
        e[e.LastReactionUserNotFound = 24] = "LastReactionUserNotFound",
        e[e.ChatNotificationsDisabledTemporarily = 25] = "ChatNotificationsDisabledTemporarily",
        e[e.ScheduledCallInvitationUnknown = 26] = "ScheduledCallInvitationUnknown",
        e[e.DoNotDisturbCallNotificationEnabled = 27] = "DoNotDisturbCallNotificationEnabled",
        e[e.ScheduleCallNotificationsDisabled = 28] = "ScheduleCallNotificationsDisabled",
        e[e.InAppScheduleCallNotificationsDisabled = 29] = "InAppScheduleCallNotificationsDisabled",
        e[e.UnknownConversation = 30] = "UnknownConversation",
        e[e.TranslationSettingsSuppressed = 31] = "TranslationSettingsSuppressed",
        e[e.OriginalForTranslatedConversationSuppressed = 32] = "OriginalForTranslatedConversationSuppressed"
    }(t.MessageProcessResult || (t.MessageProcessResult = {})),
    function(e) {
        e[e.DoNotDisturbEnabled = 0] = "DoNotDisturbEnabled",
        e[e.FromBlockedUser = 1] = "FromBlockedUser",
        e[e.IsForegroundedInConversation = 2] = "IsForegroundedInConversation",
        e[e.MandatoryElectronUpdate = 3] = "MandatoryElectronUpdate",
        e[e.NotifiedSystemMessage = 4] = "NotifiedSystemMessage",
        e[e.NotifyOnPresenceDisabled = 5] = "NotifyOnPresenceDisabled",
        e[e.SiblingConversationInTabActive = 6] = "SiblingConversationInTabActive",
        e[e.SystemMessageFailure = 7] = "SystemMessageFailure",
        e[e.SystemMessagePermissionsDenied = 8] = "SystemMessagePermissionsDenied",
        e[e.SystemMessagePermissionsUnknown = 9] = "SystemMessagePermissionsUnknown",
        e[e.UnknownConversation = 10] = "UnknownConversation"
    }(t.PresenceChangeNotificationResult || (t.PresenceChangeNotificationResult = {})),
    function(e) {
        e[e.OpenNotificationPanel = 0] = "OpenNotificationPanel",
        e[e.OpenAppSettings = 1] = "OpenAppSettings",
        e[e.OpenHelpInABrowser = 2] = "OpenHelpInABrowser",
        e[e.OpenDialpad = 3] = "OpenDialpad",
        e[e.StartNewConversation = 4] = "StartNewConversation",
        e[e.NewGroup = 5] = "NewGroup",
        e[e.OpenContactsPanel = 6] = "OpenContactsPanel",
        e[e.SendFeedback = 7] = "SendFeedback",
        e[e.OpenThemePicker = 8] = "OpenThemePicker",
        e[e.NavigateToRecents = 9] = "NavigateToRecents",
        e[e.NavigateToHistory = 10] = "NavigateToHistory",
        e[e.ShowConversationProfile = 11] = "ShowConversationProfile",
        e[e.AddPeopleToConversation = 12] = "AddPeopleToConversation",
        e[e.SendFile = 13] = "SendFile",
        e[e.StartVideoCall = 14] = "StartVideoCall",
        e[e.StartAudioCall = 15] = "StartAudioCall",
        e[e.ToggleGallery = 16] = "ToggleGallery",
        e[e.MarkAsUnread = 17] = "MarkAsUnread",
        e[e.ToggleLeftPanel = 18] = "ToggleLeftPanel",
        e[e.HangupOrRejectCall = 19] = "HangupOrRejectCall",
        e[e.ToggleMicrophone = 20] = "ToggleMicrophone",
        e[e.ToggleCamera = 21] = "ToggleCamera",
        e[e.AcceptIncomingCall = 22] = "AcceptIncomingCall",
        e[e.AddPeopleToCall = 23] = "AddPeopleToCall",
        e[e.Search = 24] = "Search",
        e[e.SearchInConversation = 25] = "SearchInConversation",
        e[e.ToggleTheme = 26] = "ToggleTheme",
        e[e.EditMessage = 27] = "EditMessage",
        e[e.EnableMultipleSelectMessages = 28] = "EnableMultipleSelectMessages",
        e[e.TakeCallSnapshot = 29] = "TakeCallSnapshot",
        e[e.ArchiveConversation = 30] = "ArchiveConversation",
        e[e.OpenMainWindow = 31] = "OpenMainWindow",
        e[e.Refresh = 32] = "Refresh",
        e[e.ZoomIn = 33] = "ZoomIn",
        e[e.ZoomOut = 34] = "ZoomOut",
        e[e.ResetZoom = 35] = "ResetZoom",
        e[e.OpenKeyboardShortcuts = 36] = "OpenKeyboardShortcuts",
        e[e.FocusMessageComposer = 37] = "FocusMessageComposer",
        e[e.AnnounceMuteStatus = 38] = "AnnounceMuteStatus",
        e[e.AnnounceSelfVideoOnOffStatus = 39] = "AnnounceSelfVideoOnOffStatus",
        e[e.NavigateToPreviousConversation = 40] = "NavigateToPreviousConversation",
        e[e.NavigateToNextConversation = 41] = "NavigateToNextConversation",
        e[e.ResizeVideoPreview = 42] = "ResizeVideoPreview",
        e[e.FocusScreenSharingToolbar = 43] = "FocusScreenSharingToolbar",
        e[e.CloseSplitViewConversation = 44] = "CloseSplitViewConversation",
        e[e.Quit = 45] = "Quit",
        e[e.CallDebugPanel = 46] = "CallDebugPanel"
    }(t.KeyboardShortcut || (t.KeyboardShortcut = {})),
    function(e) {
        e[e.Unknown = 1] = "Unknown",
        e[e.LandingPage = 2] = "LandingPage",
        e[e.NotificationsPanel = 3] = "NotificationsPanel",
        e[e.TabletOnboardingWizard = 4] = "TabletOnboardingWizard",
        e[e.TabletInviteLink = 5] = "TabletInviteLink"
    }(t.CoachMarkOrigin || (t.CoachMarkOrigin = {})),
    function(e) {
        e[e.LiveLogin = 0] = "LiveLogin",
        e[e.WAM = 1] = "WAM",
        e[e.Guest = 3] = "Guest"
    }(t.LoginMethods || (t.LoginMethods = {})),
    function(e) {
        e[e.MSA = 0] = "MSA"
    }(t.InteractiveWAMLoginKeys || (t.InteractiveWAMLoginKeys = {})),
    function(e) {
        e[e.SigninName = 0] = "SigninName",
        e[e.LogoutToken = 1] = "LogoutToken",
        e[e.FirstTimeSignIn = 2] = "FirstTimeSignIn",
        e[e.ForgottenAccounts = 3] = "ForgottenAccounts",
        e[e.LoginMethod = 4] = "LoginMethod",
        e[e.VerboseDBFlag = 5] = "VerboseDBFlag",
        e[e.NukeSdkDbFlag = 6] = "NukeSdkDbFlag",
        e[e.GuestLogoutInformation = 7] = "GuestLogoutInformation",
        e[e.CampaignReferrer = 8] = "CampaignReferrer",
        e[e.UserCacheEnabled = 9] = "UserCacheEnabled",
        e[e.SignInReminderLastShownTimeKey = 10] = "SignInReminderLastShownTimeKey",
        e[e.SignOutReminderLastShownTimeKey = 11] = "SignOutReminderLastShownTimeKey",
        e[e.AppUpdateStatus = 12] = "AppUpdateStatus",
        e[e.StartupUrl = 13] = "StartupUrl"
    }(t.StorageItemKeys || (t.StorageItemKeys = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.FileUpload = 1] = "FileUpload",
        e[e.Camera = 2] = "Camera",
        e[e.CameraRoll = 3] = "CameraRoll",
        e[e.DragAndDrop = 4] = "DragAndDrop"
    }(t.AvatarDataSource || (t.AvatarDataSource = {})),
    function(e) {
        e[e.AddOrUpdate = 0] = "AddOrUpdate",
        e[e.Remove = 1] = "Remove"
    }(t.AvatarChangeType || (t.AvatarChangeType = {})),
    function(e) {
        e[e.TakePhoto = 0] = "TakePhoto",
        e[e.UploadPhoto = 1] = "UploadPhoto",
        e[e.ViewPhoto = 2] = "ViewPhoto",
        e[e.RemovePhoto = 3] = "RemovePhoto",
        e[e.Cancel = 4] = "Cancel"
    }(t.AvatarMenuButtons || (t.AvatarMenuButtons = {})),
    function(e) {
        e[e.UNKNOWN = 0] = "UNKNOWN",
        e[e.YES = 1] = "YES",
        e[e.NO = 2] = "NO"
    }(t.FxSceneDeviceSupported || (t.FxSceneDeviceSupported = {})),
    function(e) {
        e[e.UserProfile = 0] = "UserProfile",
        e[e.NewActionButton = 1] = "NewActionButton",
        e[e.ConversationEnd = 2] = "ConversationEnd",
        e[e.InvitationExpire = 3] = "InvitationExpire",
        e[e.DeviceSwitch = 4] = "DeviceSwitch"
    }(t.E2EEInviteOrigin || (t.E2EEInviteOrigin = {})),
    function(e) {
        e[e.Invitation = 0] = "Invitation",
        e[e.DeviceSwitch = 1] = "DeviceSwitch"
    }(t.E2EEAcceptOrigin || (t.E2EEAcceptOrigin = {})),
    function(e) {
        e[e.DecryptionFailed = 0] = "DecryptionFailed",
        e[e.ConversationEnding = 1] = "ConversationEnding",
        e[e.DeviceSwitchDeclining = 2] = "DeviceSwitchDeclining",
        e[e.InvitationDeclining = 3] = "InvitationDeclining",
        e[e.IdentityLost = 4] = "IdentityLost",
        e[e.EncryptionFailed = 5] = "EncryptionFailed"
    }(t.E2EERejectionReason || (t.E2EERejectionReason = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.AddressBookContactListItem = 1] = "AddressBookContactListItem",
        e[e.AddressBookHelper = 2] = "AddressBookHelper",
        e[e.BotProfileContent = 3] = "BotProfileContent",
        e[e.CallCard = 4] = "CallCard",
        e[e.CallControls = 5] = "CallControls",
        e[e.CallingOptionsHelper = 6] = "CallingOptionsHelper",
        e[e.CallManager = 7] = "CallManager",
        e[e.CallOrInvitePrompt = 8] = "CallOrInvitePrompt",
        e[e.CallsTabCallIcon = 9] = "CallsTabCallIcon",
        e[e.CallsTabQuickCallPanel = 10] = "CallsTabQuickCallPanel",
        e[e.CommandInvokerService = 11] = "CommandInvokerService",
        e[e.ContactsPanel = 12] = "ContactsPanel",
        e[e.ConversationHeader = 13] = "ConversationHeader",
        e[e.DeepLink = 14] = "DeepLink",
        e[e.DesktopCallNotification = 15] = "DesktopCallNotification",
        e[e.DesktopContentPanel = 16] = "DesktopContentPanel",
        e[e.GoLive = 17] = "GoLive",
        e[e.GroupProfile = 18] = "GroupProfile",
        e[e.IncomingRing = 19] = "IncomingRing",
        e[e.JoinCall = 20] = "JoinCall",
        e[e.InviteLink = 21] = "InviteLink",
        e[e.LocalNotificationAction = 22] = "LocalNotificationAction",
        e[e.PhoneInviteListItem = 23] = "PhoneInviteListItem",
        e[e.Profile = 24] = "Profile",
        e[e.PstnDialpad = 25] = "PstnDialpad",
        e[e.PstnDialpadSearchResult = 26] = "PstnDialpadSearchResult",
        e[e.PstnDialpadPasted = 27] = "PstnDialpadPasted",
        e[e.PstnDialpadTyped = 28] = "PstnDialpadTyped",
        e[e.PstnDialpadPrefilled = 29] = "PstnDialpadPrefilled",
        e[e.PstnDialpadSaveContact = 30] = "PstnDialpadSaveContact",
        e[e.QuickCallPanelCall = 31] = "QuickCallPanelCall",
        e[e.QuickCallPanelNewCall = 32] = "QuickCallPanelNewCall",
        e[e.SearchItem = 33] = "SearchItem",
        e[e.SearchPanel = 34] = "SearchPanel",
        e[e.SettingsTestCall = 35] = "SettingsTestCall",
        e[e.SkypeUserListItem = 36] = "SkypeUserListItem",
        e[e.StartEmergencyCall = 37] = "StartEmergencyCall",
        e[e.StartNewGroupCallAndConv = 38] = "StartNewGroupCallAndConv",
        e[e.UserProfileContent = 39] = "UserProfileContent",
        e[e.ConversationListItem = 40] = "ConversationListItem",
        e[e.GoLiveSlashCommand = 41] = "GoLiveSlashCommand",
        e[e.CallMonitor = 42] = "CallMonitor",
        e[e.PipView = 43] = "PipView",
        e[e.NativeContactIntent = 44] = "NativeContactIntent",
        e[e.UnansweredCallPanel = 45] = "UnansweredCallPanel",
        e[e.UpcomingCallsPanel = 46] = "UpcomingCallsPanel",
        e[e.UWPSplitedViewEscalation = 47] = "UWPSplitedViewEscalation",
        e[e.MeetNow = 48] = "MeetNow"
    }(t.NavigationCallOrigin || (t.NavigationCallOrigin = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.CallSharedPhoto = 1] = "CallSharedPhoto",
        e[e.CallCard = 2] = "CallCard",
        e[e.Gallery = 3] = "Gallery",
        e[e.MessageStream = 4] = "MessageStream"
    }(t.NavigationMediaViewerOrigin || (t.NavigationMediaViewerOrigin = {})),
    function(e) {
        e[e.UserCard = 0] = "UserCard",
        e[e.LandingScreen = 1] = "LandingScreen",
        e[e.UserProfileOnboarding = 2] = "UserProfileOnboarding"
    }(t.AvatarUpdateLocation || (t.AvatarUpdateLocation = {})),
    function(e) {
        e[e.UserCard = 0] = "UserCard",
        e[e.LandingScreen = 1] = "LandingScreen",
        e[e.UserProfileOnboarding = 2] = "UserProfileOnboarding"
    }(t.NameUpdateLocation || (t.NameUpdateLocation = {})),
    function(e) {
        e[e.UserCard = 0] = "UserCard",
        e[e.LandingScreen = 1] = "LandingScreen",
        e[e.MeControl = 2] = "MeControl"
    }(t.MoodMessageUpdateLocation || (t.MoodMessageUpdateLocation = {})),
    function(e) {
        e[e.UserCard = 0] = "UserCard",
        e[e.LocalAddressBook = 1] = "LocalAddressBook",
        e[e.AddPSTNContact = 2] = "AddPSTNContact"
    }(t.ContactNickNameUpdateOrigin || (t.ContactNickNameUpdateOrigin = {})),
    function(e) {
        e[e.QuickCallPanel = 0] = "QuickCallPanel",
        e[e.QuickCallPanelAddToCall = 1] = "QuickCallPanelAddToCall",
        e[e.QuickCallPanelNewCall = 2] = "QuickCallPanelNewCall",
        e[e.QuickCallPanelFab = 3] = "QuickCallPanelFab",
        e[e.CallFailedInvalidNumber = 4] = "CallFailedInvalidNumber",
        e[e.DesktopNavigation = 5] = "DesktopNavigation",
        e[e.DesktopNavigationSearchBox = 6] = "DesktopNavigationSearchBox",
        e[e.RootCompositeNavigationView = 7] = "RootCompositeNavigationView",
        e[e.CreditExpiration = 8] = "CreditExpiration",
        e[e.DeepLink = 9] = "DeepLink",
        e[e.BrowseIntent = 10] = "BrowseIntent",
        e[e.CallIntent = 11] = "CallIntent",
        e[e.MobileHubHeader = 12] = "MobileHubHeader",
        e[e.NativeContactIntent = 13] = "NativeContactIntent",
        e[e.SavePhoneNumber = 14] = "SavePhoneNumber",
        e[e.LandingPage = 15] = "LandingPage",
        e[e.CallOrInviteMenu = 16] = "CallOrInviteMenu"
    }(t.DialerNavigationSource || (t.DialerNavigationSource = {})),
    function(e) {
        e.S4LSearch = "S4LSearch"
    }(t.VSOTag || (t.VSOTag = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.KeyboardShortcut = 1] = "KeyboardShortcut",
        e[e.OverflowMenu = 2] = "OverflowMenu",
        e[e.Ribbon = 3] = "Ribbon",
        e[e.RosterView = 4] = "RosterView",
        e[e.GoLiveInformationView = 5] = "GoLiveInformationView",
        e[e.CallControls = 6] = "CallControls"
    }(t.NavigationAddToCallOrigin || (t.NavigationAddToCallOrigin = {})),
    function(e) {
        e[e.UserCard = 0] = "UserCard",
        e[e.ShareProfile = 1] = "ShareProfile",
        e[e.ProfilePicturePanel = 2] = "ProfilePicturePanel",
        e[e.LandingScreen = 3] = "LandingScreen",
        e[e.ConversationInfoPanel = 4] = "ConversationInfoPanel",
        e[e.GroupProfileHeader = 5] = "GroupProfileHeader",
        e[e.MeControl = 6] = "MeControl",
        e[e.Onboarding = 7] = "Onboarding",
        e[e.MeProfile = 8] = "MeProfile",
        e[e.UserProfileOnboarding = 9] = "UserProfileOnboarding"
    }(t.AvatarPickerOrigin || (t.AvatarPickerOrigin = {})),
    function(e) {
        e[e.AddToContact = 0] = "AddToContact",
        e[e.AppSettings = 1] = "AppSettings",
        e[e.AvatarClick = 2] = "AvatarClick",
        e[e.BotChatSettingsPanel = 3] = "BotChatSettingsPanel",
        e[e.DeepLink = 4] = "DeepLink",
        e[e.GroupChatSettingsPanel = 5] = "GroupChatSettingsPanel",
        e[e.MeControl = 6] = "MeControl",
        e[e.Menu = 7] = "Menu",
        e[e.Unknown = 8] = "Unknown"
    }(t.ProfileOpenOrigin || (t.ProfileOpenOrigin = {})),
    function(e) {
        e[e.AvatarPicker = 0] = "AvatarPicker",
        e[e.ProfilePicturePanel = 1] = "ProfilePicturePanel"
    }(t.AvatarPolicyChangeOrigin || (t.AvatarPolicyChangeOrigin = {})),
    function(e) {
        e[e.NetworkError = 0] = "NetworkError",
        e[e.NoError = 1] = "NoError",
        e[e.SizeLimitReached = 2] = "SizeLimitReached",
        e[e.UnsupportedImageType = 3] = "UnsupportedImageType",
        e[e.ResizeReencodeError = 4] = "ResizeReencodeError",
        e[e.HttpError = 5] = "HttpError"
    }(t.AvatarChangeError || (t.AvatarChangeError = {})),
    function(e) {
        e[e.Profile = 0] = "Profile",
        e[e.DesktopOverflowMenu = 1] = "DesktopOverflowMenu",
        e[e.Mobile = 2] = "Mobile",
        e[e.Shortcut = 3] = "Shortcut",
        e[e.MeControl = 4] = "MeControl"
    }(t.SettingsOrigin || (t.SettingsOrigin = {})),
    function(e) {
        e[e.ActiveNowPanel = 0] = "ActiveNowPanel",
        e[e.AddContactSearch = 1] = "AddContactSearch",
        e[e.BotChatSettings = 2] = "BotChatSettings",
        e[e.BotChatUtils = 3] = "BotChatUtils",
        e[e.BotProfile = 4] = "BotProfile",
        e[e.CallNavigation = 5] = "CallNavigation",
        e[e.ChatSync = 6] = "ChatSync",
        e[e.ContactsPanelSearch = 7] = "ContactsPanelSearch",
        e[e.ContactsPanelV2Search = 8] = "ContactsPanelV2Search",
        e[e.ContactsStore = 9] = "ContactsStore",
        e[e.ContactSwiftCard = 10] = "ContactSwiftCard",
        e[e.ConvListItem = 11] = "ConvListItem",
        e[e.Cortana = 12] = "Cortana",
        e[e.CreateChatScenario = 13] = "CreateChatScenario",
        e[e.DiscoverPeopleSearch = 14] = "DiscoverPeopleSearch",
        e[e.FeedbackBot = 15] = "FeedbackBot",
        e[e.GroupProfile = 16] = "GroupProfile",
        e[e.InviteSuggestion = 17] = "InviteSuggestion",
        e[e.InviteSuggestionBot = 18] = "InviteSuggestionBot",
        e[e.Navigation = 19] = "Navigation",
        e[e.NotContactSwiftCard = 20] = "NotContactSwiftCard",
        e[e.OutgoingCall = 21] = "OutgoingCall",
        e[e.SearchPanel = 22] = "SearchPanel",
        e[e.SlashCommand = 23] = "SlashCommand",
        e[e.SmsMessageButton = 24] = "SmsMessageButton",
        e[e.TranslatedChat = 25] = "TranslatedChat",
        e[e.UrlConverter = 26] = "UrlConverter",
        e[e.UserProfile = 27] = "UserProfile",
        e[e.UserProfileSms = 28] = "UserProfileSms",
        e[e.UserRecommendation = 29] = "UserRecommendation",
        e[e.UserProfileTranslated = 30] = "UserProfileTranslated",
        e[e.SmsButton = 31] = "SmsButton",
        e[e.CallParticipantActionMenu = 32] = "CallParticipantActionMenu"
    }(t.ConversationFakedOrigin || (t.ConversationFakedOrigin = {})),
    function(e) {
        e[e.Redstone1 = 14393] = "Redstone1",
        e[e.Redstone2 = 15063] = "Redstone2",
        e[e.Redstone3 = 16299] = "Redstone3",
        e[e.Redstone4 = 17134] = "Redstone4",
        e[e.Redstone5WithCameraPermissionFix = 17677] = "Redstone5WithCameraPermissionFix",
        e[e.Redstone5 = 17763] = "Redstone5"
    }(t.RSVersion || (t.RSVersion = {}));
    var n = i(104);
    t.LogTraceArea = n.LogTraceArea;
    var o = i(157);
    t.PlatformType = o.PlatformType,
    function(e) {
        e[e.Success = 0] = "Success",
        e[e.Fail = 1] = "Fail",
        e[e.Cancel = 2] = "Cancel"
    }(t.ReencodeState || (t.ReencodeState = {})),
    function(e) {
        e[e.MessageActionMenu = 0] = "MessageActionMenu",
        e[e.InAppBrowserActionMenu = 1] = "InAppBrowserActionMenu",
        e[e.LocationActionMenu = 2] = "LocationActionMenu",
        e[e.DocumentActionMenu = 3] = "DocumentActionMenu",
        e[e.CapturePhotoOrVideo = 4] = "CapturePhotoOrVideo",
        e[e.BotActionMenu = 5] = "BotActionMenu",
        e[e.AddInMenu = 6] = "AddInMenu",
        e[e.MultiSelect = 7] = "MultiSelect",
        e[e.External = 8] = "External",
        e[e.UserProfile = 9] = "UserProfile",
        e[e.MessageComposer = 10] = "MessageComposer"
    }(t.SharePanelEntryOrigin || (t.SharePanelEntryOrigin = {})),
    function(e) {
        e[e.MissedCall = 0] = "MissedCall",
        e[e.GoLive = 1] = "GoLive",
        e[e.Photo = 2] = "Photo",
        e[e.Video = 3] = "Video",
        e[e.File = 4] = "File",
        e[e.Text = 5] = "Text",
        e[e.Mention = 6] = "Mention",
        e[e.Quote = 7] = "Quote",
        e[e.Reaction = 8] = "Reaction",
        e[e.Sticker = 9] = "Sticker",
        e[e.Moji = 10] = "Moji",
        e[e.Location = 11] = "Location",
        e[e.ScheduledCallInvite = 12] = "ScheduledCallInvite",
        e[e.Poll = 13] = "Poll",
        e[e.CallbackReminder = 14] = "CallbackReminder",
        e[e.PresenceChangeNotification = 15] = "PresenceChangeNotification",
        e[e.MediaAlbum = 16] = "MediaAlbum"
    }(t.NotificationTypeAppLaunched || (t.NotificationTypeAppLaunched = {})),
    function(e) {
        e[e.Allowed = 1] = "Allowed",
        e[e.Blocked = 2] = "Blocked",
        e[e.NotContact = 3] = "NotContact"
    }(t.PersonAllowed || (t.PersonAllowed = {})),
    function(e) {
        e[e.PictureViewer = 1] = "PictureViewer",
        e[e.VideoViewer = 2] = "VideoViewer",
        e[e.Prefetch = 3] = "Prefetch",
        e[e.AutoDownload = 4] = "AutoDownload"
    }(t.MediaDownloadIntent || (t.MediaDownloadIntent = {})),
    function(e) {
        e[e.NoNetwork = 1] = "NoNetwork",
        e[e.CaptivePortal = 2] = "CaptivePortal"
    }(t.ConnectivityAlertType || (t.ConnectivityAlertType = {})),
    function(e) {
        e.TransactionStarted = "transaction_started",
        e.CreateOrder = "create_order",
        e.PaymentStatusChanged = "payment_status_changed",
        e.PaymentApplicationUsernameMismatch = "payment_application_username_mismatch",
        e.FailureProductDetailsEmpty = "failure_product_details_empty",
        e.IosOrderCreateFailed = "ios_order_create_failed",
        e.IosTransactionProcessingFailure = "IOS_transaction_processing_failure",
        e.ProcessingIosOrderCompleted = "processing_ios_order_completed",
        e.ProcessingIosOrderFailed = "processing_ios_order_failed",
        e.CancellingIosOrderCompleted = "cancelling_ios_order_completed",
        e.CancellingIosOrderFailed = "cancelling_ios_order_failed",
        e.TransactionFinished = "transaction_finished",
        e.IosOrderCreated = "ios_order_created",
        e.FinishTransactionFailed = "finish_transaction_failed",
        e.StratusIosOrderAlreadyCreated = "ios_order_already_created",
        e.StratusIosOrderRenewed = "ios_order_renewed",
        e.StratusIosOrderAlreadyRenewed = "ios_order_already_renewed",
        e.StratusIosOrderRefunded = "ios_order_refunded",
        e.StratusIosOrderAlreadyRefunded = "ios_order_already_refunded",
        e.StratusIosOrderCancelled = "ios_order_cancelled",
        e.StratusIosReceiptProcessed = "ios_receipt_processed",
        e.StratusIosInvalidSkypeNumberService = "ios_invalid_skype_number_service",
        e.PurchaseIntentionGetEmpty = "purchase_intention_get_empty",
        e.PurchaseIntentionPostFailed = "purchase_intention_post_failed",
        e.PurchaseIntentionDeleteFailed = "purchase_intention_delete_failed",
        e.SkypeOrderCreated = "skype_order_created",
        e.SkypeOrderCreateFailed = "skype_order_create_failed",
        e.MisconfiguredProduct = "misconfigured_product",
        e.ProductFetchFailed = "product_fetch_failed",
        e.CreditOfferFetchFailed = "offers_credit_fetch_failed",
        e.SubscriptionsOfferFetchFailed = "offers_subscriptions_fetch_failed",
        e.BillingInformationFetchFailed = "offers_billing_information_fetch_failed",
        e.OffersProcessingFailed = "offers_processing_failed",
        e.RecommendationApiSuccess = "recommendation_api_success",
        e.PromotionFetchFailed = "promotions_fetch_failed",
        e.ProductFetchCountMismatch = "product_fetch_count_mismatch",
        e.CurrencyConversionFailed = "currency_conversion_failed",
        e.CallingDestinationsFailed = "calling_destinations_failed",
        e.OfferHrefNotFound = "offer_href_not_found",
        e.ProductCheckFailed = "product_check_failed",
        e.PurchaseOptionFetchFailed = "purchase_option_fetch_failed",
        e.ProductMapCountMismatch = "product_map_count_mismatch",
        e.ProductMapCount = "product_map_count",
        e.ProductNotMapped = "product_not_mapped",
        e.WebflowRedirect = "webflow_redirect",
        e.BuyClick = "buy_click",
        e.DialogPopup = "dialog_popup",
        e.DialogPopupContinue = "dialog_popup_continue",
        e.DialogPopupCancelClick = "dialog_popup_cancel_click",
        e.OrderStatus = "order_status",
        e.PaymentInstrumentFailed = "payment_instrument_failed",
        e.PaymentInstrumentFixClick = "payment_instrument_fix_click"
    }(t.PaymentFlowStep || (t.PaymentFlowStep = {})),
    function(e) {
        e[e.Subscriptions = 0] = "Subscriptions"
    }(t.BalanceStatePanelSection || (t.BalanceStatePanelSection = {})),
    function(e) {
        e.SwiftCard = "SwiftCard",
        e.AudioNode = "AudioNode"
    }(t.AudioPlayerOrigin || (t.AudioPlayerOrigin = {})),
    function(e) {
        e[e.Requested = 0] = "Requested",
        e[e.Accepted = 1] = "Accepted",
        e[e.Declined = 2] = "Declined",
        e[e.Cancelled = 3] = "Cancelled",
        e[e.Disabled = 4] = "Disabled"
    }(t.TranslationAction || (t.TranslationAction = {})),
    function(e) {
        e[e.Startup = 0] = "Startup",
        e[e.PermissionUpdate = 1] = "PermissionUpdate",
        e[e.BingConsentUpdate = 2] = "BingConsentUpdate",
        e[e.Bing = 3] = "Bing",
        e[e.Cortana = 4] = "Cortana",
        e[e.LocationPicker = 5] = "LocationPicker",
        e[e.SlashCommand = 6] = "SlashCommand"
    }(t.LocationUpdateReason || (t.LocationUpdateReason = {})),
    function(e) {
        e[e.UsersStore = 0] = "UsersStore",
        e[e.ABCHStore = 1] = "ABCHStore"
    }(t.MyProfileFetchOrigin || (t.MyProfileFetchOrigin = {}))
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(33);
    const n = i(1)
      , o = (i(157),
    i(104))
      , s = i(7)
      , r = i(18)
      , a = i(420);
    var l = i(104);
    t.devErrorEvent = l.devErrorEvent,
    t.devWarningEvent = l.devWarningEvent,
    t.output = l.output,
    t.getLogHistory = function() {
        return o.getLogHistory()
    }
    ;
    var c = i(104);
    function d(e) {
        a.addEvent(e)
    }
    t.debug = c.debug,
    t.error = c.error,
    t.log = c.log,
    t.warn = c.warn,
    t.track = d,
    t.flush = function() {
        let e = s.Resolved();
        return a.isInitialized() && (e = a.flush()),
        e
    }
    ;
    const u = e=>{
        d(e)
    }
    ;
    t.throttleTrack = function(e) {
        return n.throttle(u, e)
    }
    ,
    t.setLocalTracingMasks = function(e) {
        o.setLocalTracingMasks(e)
    }
    ,
    t.setEcsOptions = function(e, t) {
        o.setEcsOptions(e, t)
    }
    ,
    t.setShouldFindPotentialPii = function(e) {
        o.setShouldFindPotentialPii(e)
    }
    ,
    t.piiTrustMeThisIsSafe = function(e) {
        return o.piiTrustMeThisIsSafe(e)
    }
    ,
    t.isTraceEnabled = function(e) {
        return o.isTraceEnabled(e)
    }
    ,
    o.setEnableDebug(()=>r.isDebug());
    console.log = function(...e) {
        o.log(o.LogTraceArea.GenericUnsafe, ...e)
    }
    ,
    console.warn = function(...e) {
        o.warn(o.LogTraceArea.GenericUnsafe, ...e)
    }
    ,
    console.debug = function(...e) {
        o.debug(()=>e)
    }
    ,
    console.error = function(...e) {
        o.error(o.LogTraceArea.GenericUnsafe, ...e)
    }
    ,
    o.updateLogLevels()
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2081)
      , o = i(1)
      , s = i(2088)
      , r = i(7)
      , a = i(175)
      , l = i(19)
      , c = i(18)
      , d = i(2106)
      , u = new n.default({
        normalizeLocale: a.normalizeLocale,
        getLocaleInfoFromLocale: function(e) {
            let t = n.default.fallbackLocale(e, Object.keys(g), "en-US");
            if ("en-US" === t)
                return r.Resolved({
                    newLocale: t,
                    localizedStringTable: d
                });
            if (t in h)
                return r.Resolved({
                    newLocale: t,
                    localizedStringTable: h[t]
                });
            const i = g[t];
            return s.default.readAssetFile("resources/strings/" + i).catch(()=>s.default.readAssetFile("strings/" + i)).then(e=>{
                const i = l.parseJsonErrorable(e);
                return o.isError(i) ? r.Rejected(i) : (p(t, i),
                {
                    newLocale: t,
                    localizedStringTable: i
                })
            }
            )
        },
        defaultStringTable: d
    })
      , g = {
        "ar-SA": "LocalizedStrings_ar.json",
        "bg-BG": "LocalizedStrings_bg.json",
        "ca-ES": "LocalizedStrings_ca.json",
        "cs-CZ": "LocalizedStrings_cs.json",
        "da-DK": "LocalizedStrings_da.json",
        "de-DE": "LocalizedStrings_de.json",
        "el-GR": "LocalizedStrings_el.json",
        "en-GB": "LocalizedStrings_en-GB.json",
        "en-US": "LocalizedStrings_en.json",
        "es-ES": "LocalizedStrings_es.json",
        "es-MX": "LocalizedStrings_es-MX.json",
        "et-EE": "LocalizedStrings_et.json",
        "fi-FI": "LocalizedStrings_fi.json",
        "fr-CA": "LocalizedStrings_fr-CA.json",
        "fr-FR": "LocalizedStrings_fr.json",
        "he-IL": "LocalizedStrings_he.json",
        "hi-IN": "LocalizedStrings_hi.json",
        "hr-HR": "LocalizedStrings_hr.json",
        "hu-HU": "LocalizedStrings_hu.json",
        "id-ID": "LocalizedStrings_id.json",
        "it-IT": "LocalizedStrings_it.json",
        "ja-JP": "LocalizedStrings_ja.json",
        "ko-KR": "LocalizedStrings_ko.json",
        "lt-LT": "LocalizedStrings_lt.json",
        "lv-LV": "LocalizedStrings_lv.json",
        "ms-MY": "LocalizedStrings_ms.json",
        "nb-NO": "LocalizedStrings_nb.json",
        "nl-NL": "LocalizedStrings_nl.json",
        "pl-PL": "LocalizedStrings_pl.json",
        "pt-BR": "LocalizedStrings_pt-BR.json",
        "pt-PT": "LocalizedStrings_pt.json",
        "qps-ploc": "LocalizedStrings_qps-ploc.json",
        "qps-ploca": "LocalizedStrings_qps-ploca.json",
        "qps-plocm": "LocalizedStrings_qps-plocm.json",
        "ro-RO": "LocalizedStrings_ro.json",
        "ru-RU": "LocalizedStrings_ru.json",
        "sk-SK": "LocalizedStrings_sk.json",
        "sl-SI": "LocalizedStrings_sl.json",
        "sr-Latn-RS": "LocalizedStrings_sr-Latn.json",
        "sv-SE": "LocalizedStrings_sv.json",
        "th-TH": "LocalizedStrings_th.json",
        "tr-TR": "LocalizedStrings_tr.json",
        "uk-UA": "LocalizedStrings_uk.json",
        "vi-VN": "LocalizedStrings_vi.json",
        "zh-CN": "LocalizedStrings_zh-CN.json",
        "zh-TW": "LocalizedStrings_zh-TW.json"
    };
    let h = {
        en: d,
        "en-US": d
    };
    function p(e, t) {
        h[e] = t
    }
    function m(e) {
        const t = e.substr(0, 2);
        switch (t) {
        case "es":
        case "gl":
        case "eu":
            return "es";
        case "he":
        case "iw":
            return "he";
        case "ar":
        case "bg":
        case "ca":
        case "cs":
        case "da":
        case "de":
        case "el":
        case "en":
        case "et":
        case "fi":
        case "fr":
        case "hi":
        case "hr":
        case "hu":
        case "id":
        case "it":
        case "ja":
        case "ko":
        case "lt":
        case "lv":
        case "ms":
        case "nb":
        case "nl":
        case "pl":
        case "pt":
        case "qp":
        case "ro":
        case "ru":
        case "sk":
        case "sl":
        case "sr":
        case "sv":
        case "th":
        case "tr":
        case "uk":
        case "vi":
            return t;
        default:
            return ""
        }
    }
    function S(e, t) {
        return "auto-auto" === u.getLocale() ? e + "^" + JSON.stringify(t) : u.getString(e, t)
    }
    function C(e) {
        let t;
        return e ? (t = e.toLowerCase().trim(),
        0 === t.indexOf("he") || 0 === t.indexOf("ar")) : (t = u.getLanguageFromLocale().toLowerCase().trim(),
        "he" === t || "ar" === t)
    }
    t.cacheLanguage = p,
    t.getResetLanguageOptionString = function() {
        const e = m(u.getLocale())
          , t = m(c.getSystemLanguage())
          , i = u.getString("SettingsLanguages.ResetLanguageOption");
        return t && t === e || !t && "en" === e ? i : t ? `${i} - ${u.getString("ResetLanguageOption." + t)}` : `${i} - ${d.SettingsLanguages.ResetLanguageOption}`
    }
    ,
    t.clearStringCache = u.clearStringCache,
    t.getLanguageFromLocale = u.getLanguageFromLocale,
    t.getLocale = u.getLocale,
    t.languageChangedEvent = u.languageChangedEvent,
    t.localeChangedEvent = u.localeChangedEvent,
    t.resetLocaleToSystem = u.resetLocaleToSystem,
    t.setSystemLocale = u.setSystemLocale,
    t.tests_getRawString = u.tests_getRawString,
    t.setLocale = function(e) {
        return u.setLocale(e, C(e))
    }
    ,
    t.getStringUnsafe = S,
    t.getString = function(e, t) {
        return S(e, t)
    }
    ,
    t.getParts = function(e, t, i) {
        return "auto-auto" === u.getLocale() ? [e + "^" + JSON.stringify(t)] : u.getParts(e, t, i)
    }
    ,
    t.isLocaleSupported = function(e) {
        return -1 !== o.indexOf(Object.keys(g), e)
    }
    ,
    t.isEnglishLanguage = function() {
        return "en" === u.getLanguageFromLocale().toLowerCase().trim()
    }
    ,
    t.isRTLLanguage = C
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1320)
      , s = i(1)
      , r = i(939)
      , a = i(13)
      , l = i(7)
      , c = i(2078)
      , d = i(137)
      , u = i(1328)
      , g = i(419)
      , h = i(188)
      , p = i(2)
      , m = i(4)
      , S = i(2107)
      , C = i(209)
      , y = i(180)
      , f = i(18)
      , _ = i(35);
    let b = class extends a.StoreBase {
        isMurphyUser() {
            return this.getS4LFeatures().Murphy
        }
        useCachedEcsConfig(e) {
            this.isUserEcsConfig() && e && e.configType === o.Models.EcsConfigType.Default || (this._cachedEcsConfig = e,
            this._updateMergedConfig())
        }
        internal_setOverrides(e) {
            this._internalOverrides = e,
            void 0 !== this._cachedEcsConfig && this._updateMergedConfig()
        }
        _updateMergedConfig() {
            const e = this._cachedEcsConfig && this._cachedEcsConfig.config
              , t = this._getEcsFallbacks();
            let i = e ? u.mergeConfigs(t, e) : t;
            void 0 !== this._internalOverrides && (i = u.mergeConfigs(i, this._internalOverrides)),
            this._mergedEcsConfig = i,
            this._mergedConfigSettings = void 0,
            this.trigger()
        }
        getMergedEcsConfig() {
            return this._getMergedEcsConfig()
        }
        _getMergedEcsConfig() {
            return this._mergedEcsConfig || (this._mergedEcsConfig = this._getEcsFallbacks()),
            this._mergedEcsConfig
        }
        _getMergedConfigSettings() {
            if (!this._mergedConfigSettings) {
                const e = this._getConfigDefaults();
                this._mergedConfigSettings = u.mergeConfigs(e, this._getS4LConfigFeatures())
            }
            return this._mergedConfigSettings
        }
        _getEcsFallbacks() {
            return {
                Ads: this._getAdsDefaults(),
                ConfigIDs: this._getConfigIdDefaults(),
                AsyncMediaClient: this._getAsyncMediaDefaults(),
                ConsumerEntitlement: this._getS4LEntitlementDefaults(),
                Headers: this._getHeadersDefault(),
                Join: this._getJoinDefaults(),
                MDN_TRAP: {},
                PeopleSearch: this._getPeopleSearchDefault(),
                PeopleRecommendation: this._getPeopleRecommendationDefault(),
                SkypeAudioLibrary: this._getSkypeAudioLibraryDefaults(),
                SkypePersonalization: this._getPesDefaults(),
                SkypeTelemetry: this.getTelemetryDefaults(),
                S4L_Telemetry: this._getS4LTelemetryDefaults(),
                S4L: this._getS4LDefaults(),
                S4L_Cortana: this._getS4LCortanaDefaults(),
                S4L_Caap: this._getS4LCaapDefaults(),
                S4L_Config: this._getS4LConfigDefaults(),
                S4L_Integrations: this._getS4LIntegrationsDefaults(),
                S4L_Messaging: S.default,
                S4L_Contacts: this._getS4LContactsDefaults(),
                S4L_Search: this._getS4LSearchDefaults(),
                S4L_Commerce: this._getS4LCommerceDefaults(),
                S4L_NativePlatforms: this._getNativePlatformsDefaults(),
                S4L_CMC: c.default,
                SkypeRootTools: this._getSkypeRootToolsDefaults(),
                DebugabilitySquad: this._getDebugabilitySquadDefaults(),
                SkypeRealTimeMedia: this._getSkypeRealTimeMediaDefaults(),
                Skype_SRM: this._getSRMDefaults(),
                S4L_Onboarding: this._getOnboardingDefaults(),
                S4L_Engagement: this._getEngagementDefaults(),
                S4L_SISU: this._getS4LSisuDefaults(),
                S4L_UI: this._getS4LUiDefaults(),
                S4L_Stratus: this._getS4LStratusDefaults(),
                SkypeEngagement: this._getSkypeEngagementDefaults(),
                OEM_Operator_Squad: this._getOEMConfigDefaults(),
                S4L_Feedback: this._getS4LFeedbackDefaults(),
                TrouterJScriptClient: this._getTrouterJScriptClientDefaults()
            }
        }
        _getConfigIdDefaults() {
            return {
                Ads: "",
                AsyncMediaClient: "",
                ConsumerEntitlement: "",
                Headers: "",
                Join: "",
                PeopleSearch: "",
                PeopleRecommendation: "",
                SkypePersonalization: "",
                SkypeTelemetry: "",
                S4L_Telemetry: "",
                S4L: "",
                S4L_Cortana: "",
                S4L_Caap: "",
                S4L_Config: "",
                S4L_Integrations: "",
                S4L_Messaging: "",
                S4L_UI: "",
                S4L_Contacts: "",
                S4L_Search: "",
                S4L_Commerce: "",
                S4L_NativePlatforms: "",
                S4L_CMC: "",
                SkypeRootTools: "",
                DebugabilitySquad: "",
                SkypeRealTimeMedia: "",
                Skype_SRM: "",
                S4L_Onboarding: "",
                S4L_SISU: "",
                S4L_Stratus: "",
                S4L_Engagement: "",
                SkypeEngagement: "",
                S4L_Feedback: "",
                TrouterJScriptClient: ""
            }
        }
        getSkypeAudioLibraryFeatures() {
            return this._getMergedEcsConfig().SkypeAudioLibrary
        }
        getS4LFeatures() {
            return this._getMergedEcsConfig().S4L
        }
        _getS4LConfigFeatures() {
            return this._getMergedEcsConfig().S4L_Config
        }
        getS4LCortanaFeatures() {
            return this._getMergedEcsConfig().S4L_Cortana
        }
        getS4LCaapFeatures() {
            return this._getMergedEcsConfig().S4L_Caap
        }
        getS4LIntegrationsFeatures() {
            return this._getMergedEcsConfig().S4L_Integrations
        }
        getS4LMessagingFeatures() {
            return this._getMergedEcsConfig().S4L_Messaging
        }
        getS4LMessagingFeaturesNoSubscription() {
            return this._getMergedEcsConfig().S4L_Messaging
        }
        getS4LMessagingConfigIds() {
            return s.split(this._getMergedEcsConfig().ConfigIDs.S4L_Messaging, ",")
        }
        getS4LUiConfigIds() {
            return s.split(this._getMergedEcsConfig().ConfigIDs.S4L_UI, ",")
        }
        getS4LMessagingExperimentalConfigString() {
            return s.filter(this.getS4LMessagingConfigIds(), e=>s.startsWith(e, "P-E")).toString()
        }
        getS4LUiExperimentalConfigString() {
            return s.filter(this.getS4LUiConfigIds(), e=>s.startsWith(e, "P-E")).toString()
        }
        getNRTMapping() {
            return this._getMergedEcsConfig().EventToConfigIdsMapping
        }
        dangerouslyGetS4LMessagingFeatures() {
            return this._getMergedEcsConfig().S4L_Messaging
        }
        getS4LContactsFeatures() {
            return this._getMergedEcsConfig().S4L_Contacts
        }
        getS4LContactsFeaturesNoSubscription() {
            return this._getMergedEcsConfig().S4L_Contacts
        }
        getS4LSearchFeatures() {
            return this._getMergedEcsConfig().S4L_Search
        }
        getS4LCommerceFeatures() {
            return this._getMergedEcsConfig().S4L_Commerce
        }
        dangerouslyGetS4LCommerceFeatures() {
            return this._getMergedEcsConfig().S4L_Commerce
        }
        getS4LEntitlementFeatures() {
            return this._getMergedEcsConfig().ConsumerEntitlement
        }
        getS4LCommerceFeaturesNoSubscription() {
            return this._getMergedEcsConfig().S4L_Commerce
        }
        getHeaders() {
            return this._getMergedEcsConfig().Headers
        }
        getPeopleSearchSettings() {
            return this._getMergedEcsConfig().PeopleSearch
        }
        getPeopleRecommendationSettings() {
            return this._getMergedEcsConfig().PeopleRecommendation
        }
        getS4LNativePlatformsEcsConfig() {
            return this._getMergedEcsConfig().S4L_NativePlatforms
        }
        getS4LNativePlatformsEcsConfigNoSubscription() {
            return this._getMergedEcsConfig().S4L_NativePlatforms
        }
        getS4LCMCFeatures() {
            return this._getMergedEcsConfig().S4L_CMC
        }
        getS4LCMCFeaturesNoSubscription() {
            return this._getMergedEcsConfig().S4L_CMC
        }
        getTelemetryFeatures() {
            return this._getMergedEcsConfig().SkypeTelemetry
        }
        getS4LTelemetryFeatures() {
            return this._getMergedEcsConfig().S4L_Telemetry
        }
        getS4LTelemetryFeaturesNoSubscription() {
            return this.getS4LTelemetryFeatures()
        }
        getPesConfig() {
            return this._getMergedEcsConfig().SkypePersonalization
        }
        getAsyncMediaFeatures() {
            return this._getMergedEcsConfig().AsyncMediaClient
        }
        getSkypeRootToolsConfig() {
            return this._getMergedEcsConfig().SkypeRootTools
        }
        getTrouterJScriptClientConfig() {
            return this._getMergedEcsConfig().TrouterJScriptClient
        }
        getMDNTRAPClientConfig() {
            return this._getMergedEcsConfig().MDN_TRAP
        }
        getSRMFeatures() {
            return this._getMergedEcsConfig().Skype_SRM
        }
        getSRMFeaturesNoSubscription() {
            return this._getMergedEcsConfig().Skype_SRM
        }
        getJoinFeaturesNoSubscription() {
            return this._getMergedEcsConfig().Join
        }
        getJoinFeatures() {
            return this._getMergedEcsConfig().Join
        }
        getAdsFeatures() {
            return this._getMergedEcsConfig().Ads
        }
        getOnboardingFeatures() {
            return this._getMergedEcsConfig().S4L_Onboarding
        }
        getEngagementFeatures() {
            return this._getMergedEcsConfig().S4L_Engagement
        }
        getSkypeEngagementFeatures() {
            return this._getMergedEcsConfig().SkypeEngagement
        }
        dangerouslyGetOnboardingFeatures() {
            return this._getMergedEcsConfig().S4L_Onboarding
        }
        getDebugabilitySquad() {
            return this._getMergedEcsConfig().DebugabilitySquad
        }
        getSkypeRealTimeMedia() {
            return this._getMergedEcsConfig().SkypeRealTimeMedia
        }
        getS4LSisuFeatures() {
            return this._getMergedEcsConfig().S4L_SISU
        }
        dangerouslyGetS4LSisuFeatures() {
            return this._getMergedEcsConfig().S4L_SISU
        }
        getS4LUiFeatures() {
            return this._getMergedEcsConfig().S4L_UI
        }
        getS4LUiFeaturesNoSubscription() {
            return this._getMergedEcsConfig().S4L_UI
        }
        getS4LStratusFeatures() {
            return this._getMergedEcsConfig().S4L_Stratus
        }
        getOEMConfig() {
            return this._getMergedEcsConfig().OEM_Operator_Squad
        }
        getFeedbackFeatures() {
            return this._getMergedEcsConfig().S4L_Feedback
        }
        getULLogUploadConfig(e, t) {
            const i = this._getMergedEcsConfig()[e];
            return i ? i[t] : void 0
        }
        getConfigSettings() {
            return this._getMergedConfigSettings()
        }
        getConfigSettingsNoSubscription() {
            return this._getMergedConfigSettings()
        }
        getCachedEcsConfig() {
            return this._cachedEcsConfig
        }
        isUserEcsConfig() {
            return !!this._cachedEcsConfig && this._cachedEcsConfig.configType === o.Models.EcsConfigType.User
        }
        getCachedEcsConfigEtag() {
            return this._cachedEcsConfig ? this._cachedEcsConfig.eTag : ""
        }
        getCachedEcsConfigExpiration() {
            return this._cachedEcsConfig ? this._cachedEcsConfig.expiration : 0
        }
        getTrustedDomainInfo() {
            const e = this.getAsyncMediaFeatures().trusted_domains.toLowerCase().split(";");
            return {
                authTrustedDomains: this.getAsyncMediaFeatures().auth_trusted_domains.toLowerCase().split(";"),
                trustedDomains: e.length > 0 ? e.concat(this.getS4LMessagingFeatures().safeDisplayDomains) : this.getS4LMessagingFeatures().safeDisplayDomains,
                thirdPartyDownloaderUrlSchemas: this.getAsyncMediaFeatures().third_party_downloader_url_schemas.toLowerCase().split(";")
            }
        }
        isTrustedDomain(e, t) {
            const i = this.getTrustedDomainInfo()
              , n = _.default.getURIComponents(e);
            if (!n || !n.protocol || !n.host)
                return !1;
            if (!s.includes(i.thirdPartyDownloaderUrlSchemas, n.protocol))
                return !1;
            const o = n.host.toLowerCase();
            return s.some(t ? i.authTrustedDomains : i.trustedDomains, e=>{
                if ("*" === e[0] && "." === e[1]) {
                    const t = e.substr(1);
                    return s.endsWith(o, t) && o.length > t.length
                }
                return o === e
            }
            )
        }
        getBingUrls() {
            return {
                privacyStatementUrl: `https://privacy.microsoft.com/${m.getLocale()}/privacystatement`,
                termsOfServiceUrl: `https://www.microsoft.com/${m.getLocale()}/servicesagreement`
            }
        }
        getBingMapsConfig() {
            return {
                urlBase: this.getS4LMessagingFeatures().bingMapsImageryRestApiBaseUrl,
                apiKey: this.getS4LMessagingFeatures().bingMapsRestApiKey,
                termsOfUseUrl: "https://www.microsoft.com/en-us/maps/product"
            }
        }
        getCortanaNotebookUrl() {
            return `https://go.microsoft.com/fwlink/?linkid=824114&setmkt=${f.getCountryCode()}&setlang=${m.getLocale()}`
        }
        isDesktopVIMEnabled() {
            return this.getS4LCMCFeatures().enableDesktopVIM
        }
        performWhenServerDefaultConfigAvailable() {
            if (this._cachedEcsConfig)
                return l.Resolved();
            const e = l.Defer()
              , t = this.subscribe(()=>{
                this._cachedEcsConfig && (this.unsubscribe(t),
                e.resolve(void 0))
            }
            );
            return e.promise()
        }
        _getS4LDefaults() {
            return {
                chatFeatures: {
                    recommendedRing: 0
                },
                pushConfig: {
                    ttlSeconds: 15552e3,
                    refreshIntervalSeconds: 604800,
                    refreshOnLaunch: !1
                },
                MSFT: !0,
                Murphy: !1,
                tracing: 2147483647,
                tracing2: 2147483647,
                tracing3: 2147483647,
                tracing4: 2147483647,
                tracing5: 2147483647,
                tracing6: 2147483647,
                tracing7: 2147483647,
                tracing8: 2147483647,
                tracing9: 2147483647,
                unsafeTraceAreas: [],
                saveUlLog: !1,
                pii: {
                    findPotentialPii: !1
                },
                enableUpgradeAlert: !1,
                upgradeAlertConfig: {
                    upgradeAlertDisplayIntervalSeconds: 86400,
                    forceUpgrade: !1
                },
                idleService: {
                    afterUiShownDelay: 2500,
                    busyTaskDelay: 500
                },
                intentStartup: {
                    enabled: !1,
                    enabledManifests: ["AllPreUI", "AllPostUI", "Recents", "Chat", "Call", "Dialpad"],
                    getIntentFromDeepLink: !1
                },
                beforeStartupDecorator: {
                    enabled: !1,
                    enforceNoEnsureStarted: !1
                },
                exceptions: {
                    reloadOnException: !0
                },
                scheduler: {
                    enablePesThrottling: !1,
                    enableSmsPriceThrottling: !1,
                    enablePeopleServiceClientThrottling: !1,
                    enableTelemetryServiceThrottling: !1,
                    enableEcsServiceThrottling: !1,
                    telemetryServiceResumeTimeout: 6e4
                },
                userCache: {
                    enabled: !1,
                    canClearCacheOnLogout: !1
                }
            }
        }
        _getS4LCortanaDefaults() {
            return {
                enabled: !1,
                inContextEnabled: !1,
                suggestionsConsentEnabled: !1,
                suggestionsConsentTimeout: 1e4,
                clearSuggestionsConsentEnabled: !1,
                silentOptInRefresh: !1,
                useNativeLocation: !0
            }
        }
        _getS4LCaapDefaults() {
            return {
                autoAddBotsEnabled: !1,
                botIdsToAdd: [],
                botDiscoveryEnabled: !1,
                botStoreAsList: !1,
                suggestions: {
                    enabled: !1,
                    feedbackEnabled: !1,
                    orderingEnabled: !1,
                    iconEnabled: !1,
                    ordering: [],
                    suggestionIdTelemetryEnabled: !1,
                    enableSuggestionsV2: !1
                },
                adaptiveCards: {
                    enableSharing: !1,
                    imagePrefetchEnabled: !1,
                    placeholderLoadingTimeout: 1e3
                },
                textSuggestions: {
                    enabled: !1,
                    allowedSuggestions: [],
                    maxSuggestions: 0
                },
                clientSideSuggestions: {
                    enabled: !1,
                    suggestions: []
                },
                highAccuracyLocationTimeout: 5e3
            }
        }
        _getS4LConfigDefaults() {
            return {}
        }
        _getS4LContactsDefaults() {
            return {
                enableInviteFree: !0,
                enableGroupInviteFree: !0,
                sendLegacyInvite: !1,
                sendLegacyInviteSfB: !0,
                consumeLegacyInvites: !0,
                maxContactInviteMessageCount: 10,
                shortCircuitHashBatchSize: 200,
                shortCircuitSyncMatchLimit: 0,
                peopleRecommendations: this._getPeopleYouMayKnowDefaults(),
                avatarChangeNotifications: this._getAvatarChangeNotificationsDefaults(),
                enableDisplayInviteShareSettings: !1,
                enableGroupShareButtonInChat: !1,
                enableSearchFeedback: !1,
                enableNewConnectionMessage: !1,
                enableIOSAutoBuddy: !1,
                overrideWithAddressBookName: !1,
                enableDeviceIdForShortcircuit: !1,
                enableAvatarLoadErrorTracking: !1,
                contactsFullSyncRefreshInHours: void 0,
                profileV2Url: "https://edge.skype.com/profile/v2/users/%username%/profile/private",
                profileV2PartialUrl: "https://edge.skype.com/profile/v2/users/%username%/profile/partial",
                enableProfileV2MigrationSuggestion: !1,
                enableProfileV2AutoMigration: !1,
                enableShortCircuitContactsRoaming: !1,
                enableAlwaysShowActiveNowFilter: !1,
                enableHideSkypeName: !1
            }
        }
        _getPeopleYouMayKnowDefaults() {
            return {
                enabled: !1,
                hideInHours: 336,
                refreshInHours: 240,
                zeroRecommendationsFetchDelayInMinutes: 1440,
                maximumNumberOfContactsToFetchRecommendations: 330,
                fetchSize: 20,
                minThreshold: 5,
                numberOfPeopleInCarousel: 6,
                recentChats: {
                    enabled: !1,
                    position: 6
                },
                newChat: {
                    enabled: !1,
                    position: 999
                },
                newGroup: {
                    enabled: !1,
                    position: 999
                }
            }
        }
        _getAvatarChangeNotificationsDefaults() {
            return {
                enabled: !1,
                showMaxNumberOfAlerts: 5,
                actionButtonType: 0
            }
        }
        _getS4LSearchDefaults() {
            return {
                searchHeaderDebounceWait: 350,
                hideInactivePublicDirectoryResults: !1,
                customizeExperienceByContactsLevel: !1,
                engagedContactsThreshold: void 0
            }
        }
        _getS4LCommerceDefaults() {
            return {
                accountLinkEnabled: !0,
                callerIdCTA: {
                    postCallInterruptPanel: {
                        enabled: !1,
                        showAfterCallNumber: 5,
                        showMaxAmount: 5,
                        maxTimeSinceFirstCallDays: 30,
                        minTimeSinceLastShowHours: 48
                    },
                    inChatMessages: {
                        enabled: !1,
                        messageType: "text",
                        minTimeSinceLastShowHours: 0
                    },
                    dialpadCTA: {
                        enabled: !1
                    },
                    ignoreCallTerminatedReasons: [14],
                    trackIgnoredCalls: !1
                },
                callingSettingsPanel: {
                    callForwarding: {
                        enabled: !1,
                        link: "https://secure.skype.com/portal/main-page?page=callForwarding",
                        goTarget: "myaccount.call-forwarding"
                    },
                    callerId: {
                        enabled: !1,
                        useExternalWebBrowser: !1,
                        link: "https://secure.skype.com/my/caller-id",
                        goTarget: "client.s4l.caller-id",
                        throttlingBuffer: 6e4,
                        smsCapableEnabled: !0
                    }
                },
                callIntent: {
                    allowNonE164NumberCalls: !1
                },
                creditUpsell: {
                    enablePaidUsersCallForwardingUpsell: !1,
                    enableAllUsersCallForwardingUpsell: !1
                },
                noCreditPromo: {
                    enabled: !1,
                    kind: d.NoCreditPromoKind.Plain,
                    color: d.NoCreditPromoColor.Gray,
                    caption: d.NoCreditPromoCaption.Balance
                },
                skypeNumber: {
                    showInProfile: !1,
                    forceLearnMoreButton: !1,
                    link: "https://secure.skype.com/my/skype-number",
                    goLink: "client.s4l.skype-number",
                    manageGoLink: "client.s4l.skype-number-manage",
                    backNavigation: !1,
                    useExternalWebBrowser: !1,
                    smsPackCampaign: {
                        countries: [],
                        endDate: void 0
                    },
                    nativeBuyExperience: {
                        enabled: !1
                    }
                },
                currencyConversion: {
                    cacheInSeconds: 60
                },
                purchaseOptions: {
                    enabled: !0,
                    refreshIntervalSeconds: 60
                },
                orderStatus: {
                    statusMap: {
                        DELIVERED: "success",
                        CREATED: "pending",
                        SENT_TO_PSP: "pending",
                        PAYMENT_PENDING: "pending",
                        PAYMENT_CONFIRMED: "pending",
                        PSP_ERROR: "failure",
                        REFUSED: "failure",
                        PAYMENT_REFUSED: "failure",
                        SENT_FOR_REVERSE: "failure",
                        REVERSED: "failure",
                        SENT_FOR_CANCEL: "failure",
                        CANCELLED: "failure",
                        SENT_FOR_PARTIAL_REFUND: "failure",
                        PARTIALLY_REFUNDED: "failure",
                        SENT_FOR_REFUND: "failure",
                        REFUNDED: "failure",
                        CHARGED_BACK: "failure",
                        CHARGE_BACK_INITIATED: "failure"
                    }
                },
                offerStore: {
                    prefetch: !0
                },
                nativeProducts: {
                    refreshIntervalSeconds: 60,
                    offerHref: "/offers/credit/skus/credit-10",
                    offerHrefMap: {
                        "com.skype.skype.subscription.au_mixed_300_ios.1_month": "/offers/calling/skus/au-mixed-300-ios/subscriptions/1-month",
                        "com.skype.skype.subscription.bd_mixed_400_ios.1_month": "/offers/calling/skus/bd-mixed-400-ios/subscriptions/1-month",
                        "com.skype.skype.subscription.in_mixed_800_ios.1_month": "/offers/calling/skus/in-mixed-800-ios/subscriptions/1-month",
                        "com.skype.skype.subscription.us_mixed_unlimited_ios.1_month": "/offers/calling/skus/us-mixed-unlimited-ios/subscriptions/1-month",
                        "com.skype.skype.subscription.world_mixed_unlimited_ios.1_month": "/offers/calling/skus/world-mixed-unlimited-ios/subscriptions/1-month"
                    },
                    destinations: {
                        enabled: !1
                    },
                    iOSPersonalizedOffers: {
                        enabled: !1,
                        balanceStatePanelEnabled: !1,
                        callFailureScreenEnabled: !1
                    },
                    webToNativeOfferMap: {
                        ipad: {},
                        iphone: {}
                    },
                    manageSubscription: {
                        apple: {
                            enabled: !0,
                            subscriptionPlanRegExp: "-ios$",
                            url: "https://buy.itunes.apple.com/WebObjects/MZFinance.woa/wa/manageSubscriptions"
                        }
                    },
                    ios: {
                        credit: {
                            china: ["com.skype.tomskype.pricetier.5"],
                            ipad: ["com.skype.SkypeForiPad.pricetier.5"],
                            iphone: ["com.skype.skype.pricetier.5"]
                        },
                        subscription: {
                            china: [],
                            ipad: [],
                            iphone: ["com.skype.skype.subscription.au_mixed_300_ios.1_month", "com.skype.skype.subscription.bd_mixed_400_ios.1_month", "com.skype.skype.subscription.in_mixed_800_ios.1_month", "com.skype.skype.subscription.us_mixed_unlimited_ios.1_month", "com.skype.skype.subscription.world_mixed_unlimited_ios.1_month"]
                        },
                        skypeNumber: {
                            china: {},
                            ipad: {},
                            iphone: {}
                        }
                    },
                    subscriptionSearch: {
                        enabled: !1,
                        iphone: [],
                        ipad: []
                    },
                    disclaimers: {
                        indiaCallLimitations: {
                            enabled: !1,
                            learnMoreLink: "https://go.skype.com/indiafaq",
                            subscriptions: ["com.skype.skype.subscription.in_mixed_800_ios.1_month", "com.skype.skype.subscription.in_mixed_2500_ios.1_month"]
                        }
                    }
                },
                webProducts: {
                    refreshIntervalSeconds: 60,
                    goLinkCreditCheckout: "client.s4l.credit-checkout.web",
                    goLinkCallingCheckout: "client.s4l.calling-checkout.web",
                    goLinkCreditSelection: "client.s4l.credit-selection.web",
                    goLinkCallingSelection: "client.s4l.calling-selection.web",
                    goLinkCallingRates: "client.s4l.calling-rates.web",
                    credits: [{
                        goLink: "client.s4l.credit-checkout.web",
                        apiPurchaseItem: "/offers/credit/skus/credit-5"
                    }],
                    subscriptions: [{
                        goLink: "client.s4l.calling-rates.web",
                        apiPurchaseItem: ""
                    }],
                    subscriptionSearch: {
                        enabled: !1
                    },
                    destinations: {
                        enabled: !1
                    },
                    disclaimers: {
                        indiaCallLimitations: {
                            enabled: !1,
                            learnMoreLink: "https://go.skype.com/indiafaq",
                            subscriptions: ["in-mixed-100", "in-mixed-800", "in-mixed-2500"]
                        }
                    }
                },
                webConfig: {
                    pathsRequiringHeaders: ["buy/offer/", "portal/overview/", "portal/profile/"],
                    checkoutPaths: ["buy/offer/", "my/checkout/"],
                    checkoutOfferParams: ["item", "F%5BexternalId%5D"]
                },
                atu: {
                    offerHref: "/offers/credit/skus/credit-10",
                    limits: {
                        EUR: "€2,00",
                        USD: "$2.00",
                        GBP: "£2.00",
                        JPY: "¥300",
                        PLN: "8,00 zł",
                        SEK: "20 kr",
                        DKK: "kr.16,00",
                        HKD: "HK$ 20.00",
                        NOK: "kr 16,00",
                        CAD: "C$3.00",
                        AUD: "AU$4.00",
                        CHF: "SFr. 4.00",
                        CNY: "¥12.00",
                        BRL: "R$ 6,00",
                        TWD: "NT$80",
                        KRW: "₩3,000",
                        INR: "₹ 120.00"
                    }
                },
                callFailure: {
                    callFailurePrompt: {
                        enabled: !1,
                        addParticipantEnabled: !1,
                        copiesOption: "positive",
                        cardsToShow: {
                            credit: 1,
                            calling: 1
                        }
                    },
                    smsFailurePrompt: {
                        enabled: !1,
                        cardsToShow: {
                            credit: 1,
                            calling: 1
                        }
                    },
                    postPurchasePrompt: {
                        enabled: !1,
                        timeLimitMinutes: 10
                    },
                    tasterPostCall: {
                        enabled: !1,
                        cardsToShow: {
                            credit: 1,
                            calling: 1
                        }
                    }
                },
                pstnProfileOption: {
                    enabled: !1
                },
                newBuyCreditExperience: {
                    enabled: !1,
                    lowFundsPSTNExperienceEnabled: !1,
                    lowFundsPSTNExperienceShowSubscriptions: !0,
                    lowFundsSMSExperienceEnabled: !1,
                    variant: d.NewBuyCreditExperienceVariant.Cards,
                    preselectedCreditId: "",
                    useClientFormattingForCurrencies: [],
                    wrapForContentLengthGreaterThan: 10,
                    dynamicFontSizeEnabled: !1,
                    sizes: {
                        large: {
                            contentLengthThreshold: 4,
                            smallDeviceFontSize: 20,
                            selectedItemSmallDeviceFontSize: 26,
                            mobileFontSize: 20,
                            selectedItemMobileFontSize: 26,
                            desktopFontSize: 20,
                            selectedItemDesktopFontSize: 26
                        },
                        medium: {
                            contentLengthThreshold: 8,
                            smallDeviceFontSize: 13,
                            selectedItemSmallDeviceFontSize: 14,
                            mobileFontSize: 16,
                            selectedItemMobileFontSize: 18,
                            desktopFontSize: 19,
                            selectedItemDesktopFontSize: 22
                        },
                        small: {
                            contentLengthThreshold: 100,
                            smallDeviceFontSize: 13,
                            selectedItemSmallDeviceFontSize: 13,
                            mobileFontSize: 16,
                            selectedItemMobileFontSize: 16,
                            desktopFontSize: 19,
                            selectedItemDesktopFontSize: 19
                        }
                    }
                },
                createOrderFailure: {
                    recoveryFlowEnabled: !1,
                    forceRedirectToWebEnabled: !1
                },
                payments3ds: {
                    enabled: !1
                },
                smsPromo: {
                    unpaidUserEnabled: !1
                },
                googlePay: {
                    enabled: !1,
                    tokenSpecGateway: "adyen",
                    tokenSpecMerchantId: "SkypeAdyenOneOff",
                    merchantName: "Skype Communications S.a.r.l",
                    merchantId: "BCR2DN6TWONZVHRV",
                    forbiddenForOfferIds: [],
                    instrumentName: "Google Pay",
                    instrumentDisplay: "Google Pay",
                    instrumentLogoPath: "payment/methods/logo/medium/GOOGLE-PAY",
                    totalPriceStatus: "NOT_CURRENTLY_KNOWN",
                    storeInstrument: "0"
                }
            }
        }
        _getHeadersDefault() {
            return {
                CountryCode: "",
                ETag: "",
                Expires: Date.now().toString(),
                StatusCode: ""
            }
        }
        _getPeopleSearchDefault() {
            return {
                v2Endpoint: "https://skypegraph.skype.com/v2.0/search",
                serviceSettings: {
                    experiment: "Default",
                    geoProximity: "disabled"
                }
            }
        }
        _getPeopleRecommendationDefault() {
            return {
                endpoint: "https://peoplerecommendations.skype.com/v1.1/recommend",
                serviceSettings: {
                    experiment: "default",
                    recommend: "true"
                }
            }
        }
        _getS4LEntitlementDefaults() {
            return {
                SCE: {
                    UserServices: {
                        Client: {
                            Features: {
                                BackendEnabled: !0,
                                UIEnabled: !0,
                                AdvancedPullingEnabled: !0,
                                RateIntegrationEnabled: !0,
                                ReactivationEnabled: !1,
                                DarkerDialerBarEnabled: !1,
                                OldEntitlementsClientEnabled: !1,
                                NewUcuxCallActionEnabled: !1,
                                ImprovedPollingTelemetryEnabled: !1
                            },
                            Service: {
                                Host: "consumer.entitlement.​skype.com",
                                RetryLimit: 5,
                                RetriableCodes: ["40402", "50310", "500"],
                                RetryInterval: [{
                                    Codes: ["40402"],
                                    Pattern: [5e3, 1e4, 2e4, 3e4, 6e4]
                                }, {
                                    Codes: ["50310", "IOException"],
                                    Pattern: [1e3, 2e3, 4e3, 8e3, 16e3]
                                }],
                                PollingStrategies: {
                                    Long: 36e5,
                                    Medium: 3e5,
                                    Fast: 3e3,
                                    Immediate: 0
                                }
                            },
                            Experiments: {
                                SkypeToPhoneCard: "default",
                                SkypeToPhoneInProfile: !0,
                                SkypeToPhoneBanner: "default"
                            }
                        },
                        ServiceGroups: {
                            Credit: ["pstn"],
                            Calling: ["plan", "package", "minute_plan"],
                            OnlineNumbers: ["skypein", "skypein2"],
                            PersonalExpressions: ["moiji"]
                        }
                    },
                    Dialpad: {
                        EmergencyCall: {
                            allowedCountries: ["gb", "fi", "au", "dk"]
                        },
                        CountryCodeToCountryDefault: {
                            1: "us",
                            7: "ru",
                            44: "gb",
                            47: "no",
                            61: "au",
                            64: "nz",
                            262: "re",
                            358: "fi",
                            500: "fk",
                            590: "gp",
                            599: "cw"
                        },
                        ContactsSearch: {
                            ExecutionDelay: 280,
                            T9SearchEnabled: !1
                        },
                        Calling: {
                            TestPrefixes: [999],
                            NonGeographicPrefixes: [800, 883, 870, 871, 872, 873, 874, 888]
                        },
                        Features: {
                            ContactsIconEnabled: !1,
                            SaveContactEnabled: !1,
                            SiriIntegrationPromptEnabled: !1,
                            SmsButtonEnabled: !0,
                            ExtensionDialingEnabled: !1,
                            TasterPromotionEnabled: !1
                        },
                        NumberInput: {
                            decodeHtmlMaxIterations: 5
                        }
                    },
                    CallRates: {
                        PerCurrency: {
                            AUD: .025,
                            BRL: .05,
                            CAD: .024,
                            CHF: .02,
                            CNY: .14,
                            DKK: .127,
                            EUR: .017,
                            GBP: .014,
                            HKD: .18,
                            INR: 1.39,
                            JPY: 2.26,
                            KRW: 24.95,
                            NOK: .137,
                            POL: .07,
                            SEK: .149,
                            TWD: .68,
                            USD: .023
                        },
                        TasterCallMaxDurationMinutes: 5
                    },
                    PersonalizedOffers: {
                        Features: {
                            CallEndRecommendationsEnabled: !0,
                            FreeTrialsEnabled: !1,
                            UpsellOnBalanceStateEnabled: !1,
                            UpsellOnBalanceStateSettings: {
                                cardsToShow: 3,
                                defaultOpened: !0,
                                showAllButtonEnabled: !1
                            },
                            DynamicRecommendationsLoadingEnabled: !1,
                            RecommendationsToLoadCount: 3,
                            PromotionsEndpointsTelemetryEnabled: !1
                        }
                    },
                    CallingSubscriptions: {
                        Features: {
                            UpgradeEnabled: !1,
                            UpgradeCoachMarkEnabled: !1,
                            iOSSubscriptionsEnabled: !1
                        },
                        UpgradeSettings: {
                            Threshold: .1
                        }
                    },
                    SkypeToPhoneBanner: {
                        Features: {
                            BannerEnabled: !1,
                            ForceShowBanner: !1
                        }
                    }
                }
            }
        }
        _getSkypeAudioLibraryDefaults() {
            return {
                ECS_AudioDL_DisableRouteChangeNotification: "0"
            }
        }
        _getNativePlatformsDefaults() {
            return {
                enableIOSNewNotifications: !1,
                enableAlertNotifications: !1,
                quickActions: {
                    enabled: !1,
                    options: r.DefaultQuickActionIds
                },
                enableSystemHotKey: !1,
                enableMacOSQuarantineFlagForDownloadedFiles: !1,
                enableRemoteClientAppearancePreferences: !1,
                enableElectronNativeModals: !1,
                enableElectronSplitView: !1,
                enableAndroidDirectShare: !1,
                enableMobileThemePickerAutoSkip: !1,
                enablePresenceCorrection: !1,
                enableAppActivationStateEventsDebouncing: !1,
                appActivationStateChangeDebounceTime: 600,
                enableAndroidRConversationBubbles: !1,
                enableIAPFlowForAmazonDevices: !1,
                enablePurchaseLinkForAmazonDevices: !1
            }
        }
        _getSRMDefaults() {
            return {
                allowedCountries: [],
                requestCardEnabled: !1,
                findPanelEnabled: !1,
                mediaBarEnabled: !1,
                groupEnabled: !1,
                headerMenuEnabled: !1,
                refetchTimeoutInterval: 3e5,
                partner: {
                    paypal: {
                        name: "PayPal",
                        logo: "https://srm.skype.com/assets/images/money-transfers-paypal-monogram.png"
                    }
                },
                cardFallback: {
                    id: "default",
                    uri: "https://srm.skype.com/assets/images/money-transfers-header-ok.png",
                    disabledUri: "https://srm.skype.com/assets/images/money-transfers-header-failed.png"
                },
                cards: []
            }
        }
        _getJoinDefaults() {
            return {
                autoJoinCall: !1,
                guestFlow: {
                    enabled: !1
                },
                meetings: {
                    apiHost: "https://api.join.skype.com"
                },
                joinLinkHost: "https://join.skype.com"
            }
        }
        _getAdsDefaults() {
            return {
                enabled: !1,
                naExperimentEnabled: !1,
                naExperimentName: "No Experiment",
                isAdDescriptionClickable: !1,
                testDevices: [],
                placementSettings: {
                    conversationList: {
                        enabled: !1,
                        forced: !1,
                        minRequiredAdjacentItems: 1,
                        maxRequiredAdjacentItems: 9999,
                        placementIds: ["noPlacementId"],
                        bingAdsSettings: void 0,
                        provider: g.AdsProvider.Fan,
                        adsType: g.AdsType.ListItem,
                        adsToRequest: 0,
                        isAdMediaClickable: !0,
                        refreshIntervalInMinutes: 50,
                        canHide: !1,
                        adIconMaskSettings: {
                            enabled: !0,
                            adIconMask: "CircleBigNeg"
                        },
                        fixedPosition: 8,
                        enhancedPositioning: {
                            enabled: !0,
                            minPosition: 2,
                            availableScreenSizeFactor: 1,
                            minimumVisibleAdHeightRate: .05,
                            allowMoveToPreviousGroup: !0,
                            groupLimitation: g.AdsListGroupType.Favourites
                        },
                        dynamicDimensionsSettings: {
                            enabled: !0,
                            adMediaRatio: 1.91,
                            defaultMediaHeight: 119,
                            defaultMediaWidth: 227,
                            numberOfNeighbouringItemsDefiningMaxAdHeight: 4
                        },
                        backupContent: {
                            enabled: !1,
                            contentProvider: g.AdsProvider.Msn,
                            switchAfterErrorCount: 0,
                            switchDelayInSeconds: 1
                        },
                        rotateProviderAfterNErrors: 1,
                        rotateProviderWhenNotEligible: !1
                    },
                    alertsPanel: {
                        enabled: !1,
                        forced: !1,
                        minRequiredAdjacentItems: 1,
                        maxRequiredAdjacentItems: 9999,
                        placementIds: ["noPlacementId"],
                        bingAdsSettings: void 0,
                        provider: g.AdsProvider.Fan,
                        adsType: g.AdsType.ListItem,
                        adsToRequest: 0,
                        canHide: !1,
                        isAdMediaClickable: !0,
                        refreshIntervalInMinutes: 50,
                        adIconMaskSettings: {
                            enabled: !0,
                            adIconMask: "CircleBigNeg"
                        },
                        fixedPosition: 8,
                        enhancedPositioning: {
                            enabled: !0,
                            minPosition: 2,
                            availableScreenSizeFactor: 1,
                            minimumVisibleAdHeightRate: .05,
                            allowMoveToPreviousGroup: !1,
                            groupLimitation: g.AdsListGroupType.None
                        },
                        dynamicDimensionsSettings: {
                            enabled: !0,
                            adMediaRatio: 1.91,
                            defaultMediaHeight: 119,
                            defaultMediaWidth: 227,
                            numberOfNeighbouringItemsDefiningMaxAdHeight: 4
                        },
                        backupContent: void 0
                    }
                },
                msnApiContent: {
                    ocid: "skypeint",
                    apiKey: "NO_API_KEY",
                    downloadProviderIcon: !0,
                    msnFeedbackUrl: "https://api.msn.com/feedback/api/AppEvents",
                    msnPersonalizeUrl: "https://go.microsoft.com/fwlink/?LinkID=286759",
                    categoryFilter: ["lifestyle"]
                },
                templateSettings: {
                    msn: {
                        showSponsored: !0,
                        showAdChoices: !1,
                        narrowTemplateShowButton: !1,
                        narrowTemplateShowButtonNoBorder: !1,
                        bannerShowProviderIcon: !0,
                        bannerShowAdLabel: !1,
                        nativePrefixSponsoredWithProviderName: !1
                    },
                    meetnow: {
                        showSponsored: !1,
                        showAdChoices: !1,
                        narrowTemplateShowButton: !0,
                        narrowTemplateShowButtonNoBorder: !1,
                        bannerShowAdLabel: !1,
                        bannerTitleWithBody: !0
                    },
                    fan: {
                        showSponsored: !0,
                        showAdChoices: !0,
                        narrowTemplateShowAdChoicesUnderSponsored: !0
                    }
                },
                featurePromoConfig: {
                    showToPaying: !0,
                    showToUnderAge: !0,
                    meetNowShowOnlyToSmallContactList: !1,
                    meetNowShowOnlyWhenNotUsed: !1,
                    meetNowSmallContactListSize: 3,
                    meetNowTitleVariant: 2
                },
                reloadOnClick: !0
            }
        }
        _getOnboardingDefaults() {
            return {
                enableCoachMarks: !0,
                enableReportProblemViaBot: !1,
                enableInContextCameraPermission: !1,
                themeAwareOnboardingEnabled: !1,
                contactInviteHeaderVariant: y.ContactInviteHeaderVariant.Old,
                useCommonAvatarPicker: !1,
                showAvatarUploadPictureButton: !1,
                showAvatarPickerOnlyToUsersWithoutAvatar: !1,
                features: {
                    enablePrefillPhoneNumberAndCode: !1,
                    enableReportProblemDirectly: !1,
                    disableAllDialogsAndPopCards: !1,
                    enablePhoneNumberVerification: !1,
                    showPrefillPhoneNumberPrompt: !1,
                    hideCortanaFromFRE: !0,
                    checkAccountSectionDataLoadTimeOut: 1e3,
                    checkAccountSectionBoxEnabled: !0,
                    androidFinishSetupPromptEnabled: !0,
                    showMobileCoachmarksOnFirstRun: !0,
                    disableShowWebSetupWizardOnlyOnce: !1,
                    landingCarouselWebsiteLink: "https://www.skype.com",
                    userProfileScreen: {
                        enabled: !1,
                        enableAddPhone: !1,
                        enableAddEmail: !1,
                        learnMoreLink: "https://go.skype.com/privacy",
                        closeBackIconEnabled: !1
                    },
                    buttonTitles: {
                        enabled: !1,
                        syncContactType: 1,
                        promptPermissionType: 1
                    }
                },
                landingPageWithCards: {
                    enabled: !1,
                    cardsConfig: {},
                    timelineConfig: {},
                    whatsNewCardAfterUpdate: {
                        enabled: !1,
                        showCardTimes: 3,
                        cardActionUrl: "https://www.skype.com"
                    }
                },
                enableContactSyncWithoutConfirmationScreen: !1,
                hubToShowAfterFinishedOnboarding: y.HubToShowAfterFinishedOnboarding.Recents,
                displayUserIconInAllHubs: !1,
                enableThemeUsingSystemDefaultOnly: !1,
                enableStepsRedesign: !1,
                enableSyncAddressSwitcher: !1,
                enablePrivacyCookiesButtonSyncAddress: !1
            }
        }
        _getEngagementDefaults() {
            return {
                engagementSenderIdentity: ["28:concierge", "28:concierge_df"],
                conciergeBlockedMessageTypes: ["RichText", "RichText/Media_FlikMsg", "RichText/Media_Card"],
                enableExternalBrowserLinkOpen: !1,
                enableInAppBrowserLinkOpen: !1,
                enableFirstRunExperienceFiltering: !0,
                firstRunExperienceAllowedList: [],
                shouldPrevalidateChatServiceMessage: !1,
                notices: {
                    enabled: !1,
                    defaultTimeoutSeconds: 1209600,
                    enabledMessageContentTypes: [],
                    maxBulkSize: 20,
                    schemaVersion: [1]
                },
                popCards: {
                    enabled: !1,
                    backButtonEnabled: !0,
                    escKeyEnabled: !0,
                    defaultTimeoutSeconds: 1209600,
                    maxBulkSize: 10,
                    toggleCloseOnLeft: !1,
                    uiVersion: h.EngagementUiVersion.V3,
                    imagePreloadEnabled: !0
                },
                coachMarks: {
                    disabledCoachMarkAreas: [],
                    disabledCoachMarkTypes: [],
                    thresholdPerSession: 0,
                    navigationAnimationDelayInMilliseconds: 1e3
                },
                engagementUserTagging: {
                    enabled: !0,
                    maxDurationInSeconds: 10
                },
                clientTriggeredEngagement: {
                    enabled: !1,
                    queueProcessingDelayInMs: 500,
                    campaignFiltering: {
                        enabled: !1,
                        allowedCampaignIds: []
                    }
                },
                engagementTelemetryAttributes: {
                    allowedKeys: []
                },
                engagementPostMessage: {
                    enabled: !1,
                    userContextAllowedOrigins: []
                },
                engagementApiClient: {
                    enabled: !0,
                    engagementApiHostPath: "https://engagementapi.skype.com/v1",
                    excludedCampaignIds: [],
                    requestRetries: 3,
                    postApiEnabled: !1
                },
                engagementShareableContent: {
                    enabled: !0,
                    enableOneClickSend: !0,
                    enableCustomMessageField: !1,
                    enableCarousel: !0,
                    dialogTitleVariant: h.EngagementShareableContentTextVariant.ShareContacts,
                    cardBtnTitleVariant: h.EngagementShareableContentTextVariant.Share
                },
                notificationSettings: {
                    emailNotificationsSettingsEnabled: !1,
                    emailMissedMessageReminders: {
                        enabled: !1,
                        timeWindowInHours: 24
                    },
                    emailMissedCallReminders: {
                        enabled: !1,
                        timeWindowInHours: 24
                    }
                },
                engagementMessagesQueue: {
                    enabled: !1,
                    refreshTime: 6e5
                },
                signInReminders: {
                    enabled: !1,
                    schedule: [],
                    throttlingInSeconds: -1,
                    campaignId: "",
                    emitControlTelemetryEnabled: !1
                },
                signOutReminders: {
                    enabled: !1,
                    schedule: [],
                    throttlingInSeconds: -1,
                    campaignId: "",
                    emitControlTelemetryEnabled: !1
                },
                engagementHelperRetrySetting: {
                    maxNumberOfRetries: 5,
                    exponentialTimeForRetryInitialTime: 100,
                    exponentialTimeForRetryMaxTime: 5e3
                },
                engagementOfflineTargetedPullSetting: {
                    searchForOfflineTargetedPullMetadataEnabled: !1
                },
                engagementCelebrationNotificationSetting: {
                    enabled: !1,
                    refreshTime: 864e5,
                    celebrationNotificationsTopContactCutOff: -1,
                    isThrottlingOnLocalSettingsEnabled: !1,
                    isThrottlingOnRoamingSettingsEnabled: !1,
                    isContactCutOffEnabled: !1,
                    getAllContactsMrisEnabled: !1,
                    isDiscardingOnAppActiveEnabled: !1
                }
            }
        }
        _getSkypeEngagementDefaults() {
            return {
                experiments: {},
                pullCampaigns: {},
                blockedCampaignIds: [],
                shareableContent: {},
                birthdayContent: {
                    campaignId: "",
                    variantId: "",
                    celebrationNotificationsTopContactCutOff: -1
                }
            }
        }
        _getS4LFeedbackDefaults() {
            return {
                forceSsoFlow: !1
            }
        }
        _getS4LIntegrationsDefaults() {
            return {
                enableDesktop: !1,
                enableAps: !0,
                apsPublishedStatus: "published",
                bingIntegration: {
                    enabled: !1,
                    id: "bing",
                    name: "Search",
                    icon: "https://www.bing.com/favicon.ico",
                    url: "https://www.bing.com/api/custom/v1/skype/findpanelconfig",
                    version: 1,
                    brandColor: "",
                    brandTextColor: ""
                },
                integrations: [{
                    enabled: !1,
                    id: "youtube",
                    name: "Youtube",
                    brandColor: "#e62117",
                    brandTextColor: "#ffffff",
                    icon: "https://skypeapps.azureedge.net/assets/youtube/youtube.png",
                    url: "https://skypeapps.azureedge.net/youtube/",
                    version: 1
                }],
                nativeIntegrationSettings: {
                    onedrive: {
                        maxRecentItemCount: 5,
                        shouldShareOnTappingFileItem: !0,
                        shouldShowThumbnailAsFileTypeIcon: !1,
                        shareCardType: "application/vnd.microsoft.card.thumbnail",
                        shouldShowInAddFilesAsAnOption: !1
                    }
                },
                findPanelLayout: {
                    isFlatList: !1,
                    includeMediaBarItemsInFlatList: !1,
                    excludedMediaBarItemsInFlatList: []
                }
            }
        }
        _getS4LSisuDefaults() {
            return {
                msaClientFlight: "ReservedFlight33,suhs",
                msaClaims: "",
                msaFlightParameter: "phone2",
                msaLightweightEnabled: !0,
                msixWAMLoginEnabled: !1,
                msaWebViewBackButtonEnabled: !1,
                enableMsaPhoneAccrual: !0,
                enableMsaWebViewPreload: !1,
                forceMobileView: !1,
                cobrandId: C.MsaCobrand.SkypeDefault,
                enableNopa: !1,
                nopaVersion: 1,
                sisuExpId: "Default",
                enableCloseMyAccount: !0,
                quickSignOnEnabled: !0,
                enableAccountProviderMultipleAccounts: !1,
                interruptHandlerEnabled: !0,
                hideInterruptHandlerOnFirstTimeSignIn: !1,
                enableSso: !0,
                phoneVerificationCampaignEnabled: !1,
                autoSignInEnabled: !0,
                signoutSurveyEnabled: !1,
                enableAvatarAppBadge: !1,
                phoneVerificationCampaignQueryInterval: 6048e5,
                wamRequestRetryTimerInHours: 1,
                enableSiSuRedesignWebViewTopBanner: !0,
                enableRemoveAccountOnSignOut: !0,
                identityUrls: {
                    substitutionValue: "%username%",
                    avatar: {
                        enabled: !0,
                        url: "https://avatar.skype.com/v1/avatars/%username%"
                    },
                    avatarPublic: {
                        enabled: !0,
                        url: "https://avatar.skype.com/v1/avatars/%username%/public"
                    },
                    profile: {
                        enabled: !0,
                        url: "https://edge.skype.com/profile/v1/users/%username%/profile"
                    },
                    profilePartial: {
                        enabled: !0,
                        url: "https://edge.skype.com/profile/v1/users/%username%/profile/partial"
                    },
                    ssoNonce: {
                        enabled: !0,
                        url: "https://edge.skype.com/sso/v1/skypetoken"
                    }
                },
                reminderNotificationsSchedule: {
                    logoutReminder: [1, 3, 7, 15],
                    remindersToCancelOnLaunch: 10
                },
                backgroundTokenRefresh: {
                    enabled: !0,
                    enableRefreshTelemetry: !0,
                    forceRefresh: !1,
                    timerRefreshDayInterval: 1
                },
                enableFailedMigratedCredentialsStorage: !0,
                signInButtonLabelType: 1,
                enableMigratedCredentialsRecovery: !0,
                autoSelectInterruptedAccount: !1,
                msaConvergenceFlags: {
                    convergenceEnabled: !1,
                    entryPointStalenessWindowEnabled: !0,
                    entryPointStalenessWindow: 3e5,
                    softInterruptEnabled: !1,
                    interruptInBackground: !1,
                    interruptOnCalls: !1,
                    interruptOnNotifications: !1
                }
            }
        }
        _getS4LUiDefaults() {
            return {
                onlinePresenceTimeoutSeconds: 180,
                showReportAProblemInDesktopOverflow: !1,
                showInsiderHubButton: !1,
                leftSideBarResizeMode: g.SideBarResizeMode.None,
                superComposerEnabled: !1,
                useNativeContextMenus: !0,
                tabletUIEnabled: !1,
                androidTabletSizeThreshold: 6.8,
                tabletConversationDetailsEnabled: !1,
                errorSafeImageAltViewDelayMs: 200,
                jsonAnimationEnabled: !0,
                enableUwpToggleStyle: f.getPlatformType() === p.PlatformType.Windows,
                enableUserVoiceLink: !1,
                enableBrowseKnownIssuesLink: !1,
                searchBarStyle: 0,
                enableHotKeysPanel: !1,
                enableRecentChatsSwipeActions: !1,
                recentChatsSwipeActionsConfig: {
                    left: ["markread"],
                    right: ["more", "call"],
                    overScrollLeft: !0,
                    overScrollRight: !1,
                    overScrollDistance: 150
                },
                contextHeaderDropdownActions: {
                    oneOnOne: ["settings", "sendsms", "privateconversation", "newgroup", "translate", "highlignts"],
                    group: ["settings", "shareLink", "addpeople"]
                },
                enableExtraCompactLayout: !1,
                enableRegularCompactLayout: !1,
                enableWebFooterEverywhere: !1,
                enableWebFooterPreviewBadge: !1,
                enableWebFeedbackBanner: !1,
                doubleClickConversationsEnabled: !0,
                systemThemeEnabled: !1,
                enableMonkey: !1,
                enableIOSCallsFABExperiment: !1,
                hideDesktopDownloadLink: !0,
                isPstnCallDetectionFix: !1,
                joinLinkPlaceholderText: "https://join.skype.com/code"
            }
        }
        _getS4LTelemetryDefaults() {
            return {
                telemetrySampling: {},
                perfTelemetrySampling: {},
                adjustTrackingEnabled: !1,
                censusTelemetryEnabled: !1,
                clockSkewRefreshDurationInMins: 0,
                ariaMaxEvents: 0,
                ariaEventsReportIfGreater: 0
            }
        }
        getTelemetryDefaults() {
            return {
                kpi_inapp_activity_ended: {
                    enabled: !0
                },
                kpi_inapp_activity_start: {
                    enabled: !0
                },
                kpi_call_ended: {
                    enabled: !0
                },
                kpi_message_viewed: {
                    enabled: !0
                },
                kpi_message_sent: {
                    enabled: !0,
                    percentage: 10
                },
                kpi_message_delivered: {
                    enabled: !0,
                    percentage: 10
                },
                kpi_chatsync_complete: {
                    enabled: !0
                },
                kpi_pushnotif_delivered: {
                    enabled: !0
                },
                kpi_pushnotif_displayed: {
                    enabled: !0
                },
                kpi_badge_count_state: {
                    enabled: !0
                },
                kpi_client_init: {
                    enabled: !0
                },
                kpi_push_to_sync_complete: {
                    enabled: !0
                },
                kpi_search_request: {
                    enabled: !0
                },
                kpi_postsearch_action: {
                    enabled: !0
                },
                kpi_contacts_sync_complete: {
                    enabled: !0
                },
                kpi_chat_service_connection: {
                    enabled: !0
                },
                kpi_message_sent_retry: {
                    enabled: !0
                },
                kpi_chatsync_failed: {
                    enabled: !0
                },
                file_sent: {
                    enabled: !0
                },
                file_received: {
                    enabled: !0
                },
                log_crash_sent: {
                    enabled: !0
                },
                contacts_sync_start_time: {
                    enabled: !0
                },
                contacts_sync_end_time: {
                    enabled: !0
                },
                kpi_longpoll_complete: {
                    enabled: !0,
                    percentage: 1
                },
                kpi_longpoll_failed: {
                    enabled: !0,
                    percentage: 1
                },
                sendEcsExpirationTime: !0,
                engagement_push_notification_event: {
                    enabled: !0
                }
            }
        }
        _getAsyncMediaDefaults() {
            return {
                auth_trusted_domains: "go.skype.com;login.skype.com;*.api.skype.com;*.asm.skype.com;*.asm.skype.net;neu1-api-xmm.cloudapp.net;*.neu1-api-xmm.cloudapp.net;url-preview.cloudapp.net;*.url-preview.cloudapp.net;latest-webclient.skype.com;web.skype.com;mockproxy-asynclib.cloudapp.net;mockproxy-asynclib3.cloudapp.net;mockproxy-asynclib2.cloudapp.net;authgwint.trafficmanager.net;authgw-preqa.cloudapp.net",
                trusted_domains: "go.skype.com;login.skype.com;*.api.skype.com;*.asm.skype.com;*.asm.skype.net;neu1-api-xmm.cloudapp.net;*.neu1-api-xmm.cloudapp.net;url-preview.cloudapp.net;*.url-preview.cloudapp.net;*.secure.skypeassets.com;*.secure.skypeassets.net;latest-webclient.skype.com;web.skype.com;mockproxy-asynclib.cloudapp.net;mockproxy-asynclib3.cloudapp.net;mockproxy-asynclib2.cloudapp.net;authgw-preqa.cloudapp.net;avatar.skype.com",
                third_party_downloader_url_schemas: "https;http",
                storage_limits: {
                    original: {
                        size: 314573500
                    },
                    imgpsh: {
                        size: 20971520
                    },
                    video: {
                        size: 104857600,
                        format: ["mp4", "mov", "webm"]
                    },
                    thumbnail: {
                        size: 5242880
                    },
                    audio: {
                        size: 20971520,
                        format: ["m4a", "wav", "mp3"]
                    }
                },
                cdn_cookie_refresh_request_enabled: !0,
                cdn_cookie_setter_debounce_wait: 6e4,
                ams_cookie_refresh_request_enabled: !0,
                ams_cookie_setter_debounce_wait: 6e5,
                fallback_to_file: !1,
                ams_base_url: "https://api.asm.skype.com",
                ams_skypetokenauth_url_format: "{0}/v1/skypetokenauth",
                ams_create_document_url_format: "{0}/v1/objects",
                ams_doc_url_format: "{0}/v1/objects/{1}",
                max_extension_length: 4
            }
        }
        _getPesDefaults() {
            return {
                pes_config: "https://static-asm.secure.skypeassets.com/pes/v1/configs/854962fa4bbc4be6a04d545ef2e73ea9/views/default",
                sticker_config: "https://static-asm.secure.skypeassets.com/pes/v1/configs/fc800ab4c80e49d6a598bd6d403772e2/views/default",
                sticker_chat_config: "",
                gif_config: "https://static-asm.secure.skypeassets.com/pes/v1/configs/dc9817a7240f4451a3b97aa11cd75416/views/default"
            }
        }
        _getSkypeRootToolsDefaults() {
            return {
                ULBaseline: {}
            }
        }
        _getTrouterJScriptClientDefaults() {
            return {
                TrouterConnectionUrl: "https://go.trouter.skype.com/v4/a",
                TelemetryEnabled: !0,
                ClientTelemetryEventEnabled: {
                    trouter_js_client_connected: !0,
                    trouter_js_client_disconnected: !0,
                    trouter_js_client_error: !0,
                    trouter_js_client_progress: !0,
                    trouter_js_client_response: !0,
                    logHealthCheckError: !0,
                    numberOfStepsToMaintain: 0,
                    sendProgressTimeoutSecs: 0
                }
            }
        }
        _getDebugabilitySquadDefaults() {
            return {
                brb_enabled: !1,
                brb_upload_logs_for_hockeyapp_crash: !1
            }
        }
        _getSkypeRealTimeMediaDefaults() {
            return {
                Configurations: {
                    CQF_Trigger: {
                        S2S_Percent: 10,
                        PSTN_Percent: 10,
                        GroupCall_Percent: 10,
                        MinCallDurationSecs: 5
                    }
                }
            }
        }
        _getS4LStratusDefaults() {
            return {
                request: {
                    includeDeviceIdInRequestPolicy: "requested"
                }
            }
        }
        _getOEMConfigDefaults() {
            return {
                zeroRating: {
                    mccMncList: []
                }
            }
        }
        _getIntConfigDefaults() {
            return {
                ecs: {
                    hosts: ["https://config.edge.skype.net"],
                    fetchTimeout: void 0,
                    ignoreActivationState: !0
                },
                chat: {
                    productionHost: "https://client-s.gateway.messenger.live-int.com/",
                    dogfoodHost: "https://client-s.gateway.messenger.live-int.com/",
                    blacklistedHosts: [],
                    productionWSHost: "wss://wsapi-dev.skype.net",
                    qaWSHost: "wss://wsapi-dev.skype.net",
                    prodCloudParam: "",
                    dogfoodCloudParam: "",
                    useQAWSHost: !0,
                    notifyLikes: !0,
                    forceChSetOnSend: !0,
                    serverSideEdits: !1,
                    serverSideEdits1to1: !1,
                    backgroundReleaseWakeLockTime: 500,
                    backgroundWaitForAmsUpload: !1,
                    backgroundPostingHoldOwnWakeLockEnabled: !0,
                    backgroundWakeLockWhilePostWaitingForTransfer: !0,
                    authentication: {
                        useRegToken: !0
                    },
                    syncBackoffOnNoNetwork: !0,
                    restoreEndpointsTimeout: 25e3,
                    reportInternalFailures: !1,
                    reportUnknownInternalFailures: !1,
                    reportSystemExceptionInternalFailures: !1,
                    syncWhenNoSubscription: !0,
                    syncFreeFetchesConfig: {
                        maxFetchesREST: 3,
                        bandwidthAwareFetchesREST: 3
                    },
                    enableForegroundMessagePostWithREST: {},
                    recreateEndpointOnSameLocationRedirect: !1,
                    updateEndpointOnEcsEtagChange: !1,
                    dontPersistSessionInfoOnWeb: !0,
                    durableEndpointId: {
                        enabled: !1,
                        recreateToMatchEnabled: !1
                    },
                    userPropertiesExpirationTime: 6e4,
                    chatServiceHostRefreshEnabled: !1,
                    chatServiceHostRefreshInterval: 1e4,
                    chatServiceRedirectTimerEnabled: !1,
                    msgApiConfig: {
                        enabled: !1,
                        host: "https://noam-canary.msgapi.teams.microsoft.com/"
                    }
                },
                abch: {
                    profileUrl: "https://pnv.skype.com/profile/",
                    appId: "d5e63001-9bae-4d30-9b77-fd84664df1ec"
                },
                bot: {
                    joinLink: "https://join.skype.net/bot/"
                },
                contacts: {
                    host: "https://contacts.skype.net/",
                    dogfoodHost: "https://contacts.skype.net/"
                },
                messageSearch: {
                    host: "https://search-int.cloudapp.net/v2/",
                    searchQueryDelay: 0
                },
                stratus: {
                    host: "https://qaapi.skype.net/"
                },
                secureStratus: {
                    host: "https://qasecure.skype.net/"
                },
                appAssets: {
                    host: "https://qaapps.skypeassets.net/"
                },
                promotions: {
                    host: "https://qa-promotions.skype.net/"
                },
                go: {
                    host: "https://qago.skype.net/"
                },
                aps: {
                    host: "https://aps-dev-0-skype.cloudapp.net/"
                },
                avatars: {
                    host: "https://avatar.skype.net/v1/avatars/"
                },
                rps: {
                    host: "https://edge.skype.net/"
                },
                optionsService: {
                    productionHost: "https://optionsservice-test-northeurope.cloudapp.net:443/options/",
                    dogfoodHost: "https://optionsservice-test-northeurope.cloudapp.net:443/options/"
                },
                peopleService: {
                    host: "https://people.skype.net/"
                },
                entitlements: {
                    host: "https://consumer.entitlement.test.skype.net/"
                },
                loginLive: {
                    host: "https://login.live-int.com/",
                    clientId: "0000000060403363",
                    scopes: "service::lw.skype.net::MBI_SSL"
                },
                signUpLive: {
                    host: "https://signup.live-int.com/signup"
                },
                loginSkype: {
                    host: "https://qalogin.skype.net/"
                },
                asm: {
                    cdnUrl: "https://static-asm.secure.skypeassets.com"
                },
                pes: {
                    emoticonBaseUrl: "https://static-asm.secure.skypeassets.net/pes/v1/emoticons",
                    skypeServiceHost: "static.asm.skype.net",
                    tokenSourceEndpoint: "/pes/v1/petoken",
                    cdnServiceHost: "static-asm.secure.skypeassets.net",
                    cookieSourceEndpoint: "/token/token_to_cookies",
                    cdnTokenTtlMs: 24e4,
                    rewriteRules: [{
                        from: "static.asm.skype.net",
                        to: "static-asm.secure.skypeassets.net"
                    }, {
                        from: "api.asm.skype.net",
                        to: "static-asm.secure.skypeassets.net"
                    }],
                    xmmFallbackUrl: "https://qalogin.skype.net/login/sso",
                    xmmFallbackUrlParams: "?go=webclient.xmm&amp;"
                },
                srm: {
                    host: "https://srm.qa.skype.net/",
                    fingerprintOrigin: "https://srm.qa.skype.net"
                },
                urlPreview: {
                    host: "https://urlp.asm.skype.net/v1/",
                    gifSizeLimitInBytes: 12e5,
                    timeout: 1e4
                },
                registrar: {
                    host: "https://qe.registrar.skype.net/",
                    registrationRelativeUrl: "v2/registrations"
                }
            }
        }
        _getConfigDefaults() {
            return {
                ecs: {
                    hosts: ["https://config.edge.skype.com"],
                    fetchTimeout: void 0,
                    ignoreActivationState: !0
                },
                chat: {
                    productionHost: "https://client-s.gateway.messenger.live.com/",
                    dogfoodHost: "https://co4-df-client-s.gateway.messenger.live.com/",
                    blacklistedHosts: [],
                    productionWSHost: "wss://wsapi.skype.com",
                    qaWSHost: "wss://wsapi-qa.skype.net",
                    useQAWSHost: !1,
                    prodCloudParam: "cloud=apis",
                    dogfoodCloudParam: "cloud=df-apis",
                    notifyLikes: !0,
                    forceChSetOnSend: !0,
                    serverSideEdits: !1,
                    serverSideEdits1to1: !1,
                    backgroundReleaseWakeLockTime: 500,
                    backgroundWaitForAmsUpload: !1,
                    backgroundPostingHoldOwnWakeLockEnabled: !0,
                    backgroundWakeLockWhilePostWaitingForTransfer: !0,
                    authentication: {
                        useRegToken: !0
                    },
                    syncBackoffOnNoNetwork: !0,
                    restoreEndpointsTimeout: 25e3,
                    reportInternalFailures: !1,
                    reportUnknownInternalFailures: !1,
                    reportSystemExceptionInternalFailures: !1,
                    syncWhenNoSubscription: !0,
                    syncFreeFetchesConfig: {
                        maxFetchesREST: 3,
                        bandwidthAwareFetchesREST: 3
                    },
                    enableForegroundMessagePostWithREST: {},
                    recreateEndpointOnSameLocationRedirect: !1,
                    updateEndpointOnEcsEtagChange: !1,
                    dontPersistSessionInfoOnWeb: !0,
                    durableEndpointId: {
                        enabled: !1,
                        recreateToMatchEnabled: !1
                    },
                    userPropertiesExpirationTime: 6e4,
                    chatServiceHostRefreshEnabled: !1,
                    chatServiceHostRefreshInterval: 1e4,
                    chatServiceRedirectTimerEnabled: !1,
                    msgApiConfig: {
                        enabled: !1,
                        host: "https://noam-canary.msgapi.teams.microsoft.com/"
                    }
                },
                auth: {
                    skypeTokenFetchBeforeExpiryMinutes: 720,
                    skypeTokenFetchBeforeExpiryMinutesUWP: 60,
                    skypeTokenFetchBeforeExpiryMinutesGuest: 5
                },
                profile: {
                    maxProfileAge: 864e5
                },
                abch: {
                    profileUrl: "https://pnv.skype.com/profile/",
                    appId: "d5e63001-9bae-4d30-9b77-fd84664df1ec"
                },
                asm: {
                    cdnUrl: "https://static-asm.secure.skypeassets.com"
                },
                bot: {
                    joinLink: "https://join.skype.com/bot/"
                },
                contacts: {
                    host: "https://contacts.skype.com/",
                    dogfoodHost: "https://df.contacts.skype.com/"
                },
                feedback: {
                    host: "https://feedback.skype.com",
                    sendLogsByDefault: !1
                },
                search: {
                    longQueryCharCount: 3
                },
                graphSearch: {
                    searchQueryDelay: 0
                },
                messageSearch: {
                    host: "https://msgsearch.skype.com/v2/",
                    searchQueryDelay: 0
                },
                groupDbSearch: {
                    searchQueryDelay: 100
                },
                botSearch: {
                    searchQueryDelay: 0
                },
                stratus: {
                    host: "https://api.skype.com/"
                },
                secureStratus: {
                    host: "https://secure.skype.com/"
                },
                appAssets: {
                    host: "https://apps.skypeassets.com/"
                },
                promotions: {
                    host: "https://api.promotions.skype.com/"
                },
                go: {
                    host: "https://go.skype.com/"
                },
                aps: {
                    host: "https://api.aps.skype.com/"
                },
                avatars: {
                    host: "https://avatar.skype.com/v1/avatars/"
                },
                rps: {
                    host: "https://edge.skype.com/"
                },
                optionsService: {
                    productionHost: "https://options.skype.com:443/options/",
                    dogfoodHost: "https://options-df.skype.com:443/options/"
                },
                peopleService: {
                    host: "https://people.skype.com/"
                },
                entitlements: {
                    host: "https://consumer.entitlement.skype.com/"
                },
                loginLive: {
                    host: "https://login.live.com/",
                    clientId: "00000000480BC46C",
                    scopes: "service::lw.skype.com::MBI_SSL"
                },
                signUpLive: {
                    host: "https://signup.live.com/signup"
                },
                loginSkype: {
                    host: "https://login.skype.com/"
                },
                downloadSkype: {
                    downloadSkypeUrl: "https://www.skype.com/get-skype"
                },
                pes: {
                    emoticonBaseUrl: "https://static-asm.secure.skypeassets.com/pes/v1/emoticons",
                    skypeServiceHost: "static.asm.skype.com",
                    tokenSourceEndpoint: "/pes/v1/petoken",
                    cdnServiceHost: "static-asm.secure.skypeassets.com",
                    cookieSourceEndpoint: "/token/token_to_cookies",
                    cdnTokenTtlMs: 24e4,
                    rewriteRules: [{
                        from: "static.asm.skype.com",
                        to: "static-asm.secure.skypeassets.com"
                    }, {
                        from: "api.asm.skype.com",
                        to: "static-asm.secure.skypeassets.com"
                    }],
                    xmmFallbackUrl: "https://login.skype.com/login/sso",
                    xmmFallbackUrlParams: "?go=webclient.xmm&amp;"
                },
                srm: {
                    host: "https://srm.skype.com/",
                    fingerprintOrigin: "https://srm.skype.com"
                },
                profileCard: {
                    manageProfileGoLink: "account.profile",
                    manageAccountGoLink: "myaccount",
                    closeMyAccountUrl: "https://go.microsoft.com/fwlink/?linkid=854340",
                    closeMyAccountEndUrl: "https://account.live.com/MessagePage.aspx",
                    closeMyAccountWebUrl: "https://go.skype.com/closeaccount",
                    editProfileGoLink: "editmicrosoftaccount",
                    learnMoreUrl: "https://go.skype.com/profilechanges.skype",
                    manageMSAccountUrl: "https://account.live.com/names/Manage"
                },
                mySettings: {
                    termsOfServiceGoLink: "tou"
                },
                balanceState: {
                    fairUsagePolicyGoLink: "fair.usage.policy",
                    manageSubscriptionsGoLink: "myaccount",
                    callingRatesGoLink: "prices",
                    callingOffersGoLink: "client.rates",
                    noCreditGoLink: "check.account",
                    noCreditLinkEnabled: !0,
                    serviceDetailsGoLink: "client.s4l.service-settings"
                },
                skypeGoLinks: {
                    servicesAgreement: "https://go.skype.com/microsoft.services.agreement",
                    privacyAndCookies: "https://go.skype.com/privacy",
                    refundPolicy: "https://go.skype.com/tou.refund",
                    publicWebSafety: "https://go.skype.com/web.incognito",
                    amazonPurchase: "https://go.skype.com/amazon"
                },
                registrar: {
                    host: "https://prod.registrar.skype.com/",
                    registrationRelativeUrl: "v2/registrations"
                },
                pstn: {
                    host: "https://mrrcountries.cdn.skype.com/",
                    ratesEndpoint: "pstn/v1.2/",
                    indiaRegulatoryFaq: "https://go.skype.com/indiafaq",
                    netherlandsRegulatoryFaq: "https://go.skype.com/help.calling.netherlands"
                },
                cortana: {
                    id: "cece905d-8137-4f70-8cbc-e94e16211a46",
                    mri: "28:cece905d-8137-4f70-8cbc-e94e16211a46",
                    displayName: "Cortana",
                    avatarUrl: "https://bot-framework.azureedge.net/bot-icons-v1/CoBotSnR_BlGC2jBLxAjN5wr6Vg5WpFXzBfcBYd67WCG2BMq9rL2VgCPT.png",
                    devMri: "28:99d8b4a2-7645-494e-9031-1f0145a2fc96",
                    visionUrl: "https://www.bingapis.com/api/cortana/beta/v1.1/vision",
                    notebookHost: "https://www.bing.com/cortana/notebook/",
                    privacyStatementUrl: "https://go.skype.com/legal.Cortana",
                    optOutUrl: "https://www.bing.com/cortana/api/v1/bot/logout",
                    suggestionEventsUrl: "https://api.cortana.ai/cortanainconversation/api/v1/suggestions/events",
                    allowSuggestionsBotIds: ["28:e5a85370-2f20-40fa-8a4b-e77eada74062"],
                    learnMoreUrl: "https://go.skype.com/cortana.in.skype"
                },
                bing: {
                    signalsHost: "https://platform.bing.com/"
                },
                suggestions: {
                    feedbackHost: "https://search.knowledge.store/api/SuggestedActions/Feedback"
                },
                urlPreview: {
                    host: "https://urlp.asm.skype.com/v1/",
                    gifSizeLimitInBytes: 12e5,
                    timeout: 1e4
                },
                inviteLinkGenerator: {
                    host: "https://inviteconnector.skype.com/"
                },
                termsUrl: {
                    host: "https://go.microsoft.com/fwlink/?LinkID=246338"
                },
                privacyUrl: {
                    host: "https://go.microsoft.com/fwlink/?LinkId=521839",
                    splitSearchSuggestionsSettingsUrl: "https://go.microsoft.com/fwlink/?linkid=873474",
                    profileLearnMoreUrl: "https://go.skype.com/privacy.profile",
                    receiveContactSuggestionsUrl: "https://go.skype.com/receive.suggestions",
                    appearInSuggestionsUrl: "https://go.skype.com/appear.suggestions"
                },
                azureMediaServices: {
                    apiUrl: "https://api.azms.skypeassets.com/api/"
                },
                sprinkles: {
                    endpoint: "https://bingcamservice.trafficmanager.net/api/",
                    appId: "e9b98ae9-0e47-e711-80c2-00155de56e0f"
                },
                feedbackBot: {
                    id: "a62068e3-63e9-4ffc-89a6-14d841e224d2",
                    displayName: "Skype Bot"
                },
                foursquare: {
                    endpoint: "https://api.foursquare.com/v2/venues/explore",
                    clientId: "0IBWTR05GKAKUMWMMAVFP2CHFUAGNX00MDV1H1FMGLOYUUGK",
                    secret: "YRSJUR2BPTUVQB405H55DGRYKQIUIEUMYGIEQ3DYR5BMH4QB"
                },
                endpointPresence: {
                    activeEndpointRequestEnabled: !0,
                    inactiveDelay: 12e4,
                    useSystemIdle: !1,
                    idleSystemTimeWindow: 180,
                    ensurePresencePublished: !1
                },
                presence: {
                    presenceAwayTimerInSeconds: 3600,
                    enablePresenceChangeNotification: !1,
                    enableLegacyPresence: !0,
                    enableUpsPresence: !1,
                    upsUrl: "https://noamdf.presence.skype.com/",
                    upsClientType: "skype4life"
                },
                iOSAppStore: {
                    host: "itms-apps://itunes.apple.com/app/",
                    chinaBundleID: "com.skype.tomskype.t2",
                    iPadBundleID: "com.skype.SkypeForiPad.t2",
                    chinaAppID: "419713786",
                    iPadAppID: "442012681",
                    iPhoneAppID: "304878510"
                },
                androidPlayStoreUrl: {
                    url: "market://details?id=com.skype.raider"
                },
                windowsStore: {
                    reviewUrl: "ms-windows-store://review/?ProductId=9wzdncrfj364",
                    feedback: {
                        baseUrl: "windows-feedback:?contextid=596&tabid=2&newFeedback=true&feedbackType=",
                        feedbackType: "2",
                        suggestionType: "1"
                    }
                },
                helpGoParam: {
                    browseKnownIssues: "s4l.browseissues",
                    supportArticles: "help.t2d",
                    upgradeLearnMore: "upgrade.learnmore",
                    skypeStatus: "skype.status"
                },
                feedbackAndProblemGoParam: {
                    feedback: "s4l.sendfeedback",
                    problem: "s4l.reportproblem",
                    suggestAddIns: "feedback.addins",
                    rating: "feedback.rate",
                    insiderHub: "insiderhub",
                    userVoice: "feedback.uv"
                },
                brb: {
                    submitPath: "https://brbv2.skype.com/AuthService.svc/SubmitBRBReport/S4L/",
                    releasePath: "https://brbv2.skype.com/AuthService.svc/release?container=",
                    version: "2016-05-31",
                    blobType: "BlockBlob",
                    blobDisposition: "attachment",
                    logsName: "/logs.zip?",
                    screenshotName: "/screenshot.png?",
                    feedbackSubmitPath: "https://feedback.skype.com/survey/questionanswerpost?id=slp",
                    enableHeartEntryPoint: !1,
                    disableShakeAndSendByDefault: !1,
                    extendReportTitle: "Extend report"
                },
                calling: {
                    emergencyCallingLearnMoreLink: "https://go.skype.com/emergency/",
                    disableEcsParamCache: !1,
                    disableSharedIdCache: !1,
                    enableDeferredStartup: !1
                },
                avSettings: {
                    learnMoreLink: "https://go.skype.com/call.quality.guide",
                    webcamLearnMoreLink: "https://support.microsoft.com/help/2998316/"
                },
                msAccountUrl: {
                    url: "https://account.microsoft.com"
                },
                combinedSisu: {
                    bundle_version: "0.0.0.0"
                },
                welcomeScreenProblemSigningInUrl: {
                    url: "https://go.skype.com/help.password.faq2"
                },
                checkAccountUrl: {
                    goParam: "check.account"
                },
                sms: {
                    host: "https://smssfe.skype.com/",
                    organizationId: "skype"
                },
                creditExpiration: {
                    creditExpirationFaqLink: "https://support.skype.com/en/faq/FA10378/how-do-i-reactivate-skype-credit"
                },
                connectors: {
                    host: "https://outlook.office.com/connectors/",
                    home: "https://outlook.office.com/connectors/Home/Login/#/configurations"
                },
                gogo: {
                    enabled: !1,
                    ssid: ["gogoinflight", "gogowifi"],
                    isOnGogoIpRange: !1
                },
                autoBuddySetup: {
                    url: "https://join.skype.com/setup"
                },
                readReceipts: {
                    learnMoreLink: "https://go.skype.com/receipts.help"
                },
                teams: {
                    imgHost: "https://img.teams.skype.com/amer/beta/users/"
                },
                database: {
                    splitLargeTransactions: !1
                },
                msGraph: {
                    host: "https://graph.microsoft.com/v1.0"
                },
                captivePortalDetection: {
                    statusCode: 200,
                    enabled: !0,
                    url: "http://www.msftconnecttest.com/",
                    browserUrl: "http://www.msftconnecttest.com/redirect",
                    path: "connecttest.txt",
                    expectedContent: "Microsoft Connect Test",
                    timeout: 1e4
                },
                debug: {
                    verboseDbLogging: "off"
                },
                fileNode: {
                    learnMoreLink: "https://go.skype.com/file.sharing.limits"
                },
                images: {
                    cacheControlRequestHeader: ""
                },
                restClient: {
                    defaultTimeout: 6e4,
                    checkCorruptNullBody: !1,
                    originHeaderValue: void 0
                },
                hotkeys: {
                    learnMoreUrl: "https://go.skype.com/keyboard.shortcuts"
                },
                translator: {
                    help: "https://go.skype.com/translator.help",
                    learnMoreUrl: "https://go.skype.com/translator.learnmoreurl",
                    privacyStatementUrl: "https://go.microsoft.com/fwlink/?LinkId=521839"
                },
                shareExternalPlatforms: {
                    gmail: "https://mail.google.com/mail/?view=cm&fs=1&su={subject}&body={body}",
                    outlook: "https://outlook.office.com/mail/deeplink/compose?subject={subject}&body={body}",
                    facebook: "https://www.facebook.com/sharer.php?u={url}"
                },
                noiseSuppression: {
                    learnMoreUrl: "https://www.skype.com/go/audiovideo.settings"
                }
            }
        }
        _initCapability(e) {
            return e
        }
        test_initCapability(e) {
            return this._initCapability(e)
        }
        test_trigger() {
            this.trigger()
        }
    }
    ;
    n.__decorate([a.autoSubscribe], b.prototype, "isMurphyUser", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getMergedEcsConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getSkypeAudioLibraryFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LCortanaFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LCaapFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LIntegrationsFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LMessagingFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "getS4LMessagingFeaturesNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LMessagingConfigIds", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LUiConfigIds", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LMessagingExperimentalConfigString", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LUiExperimentalConfigString", null),
    n.__decorate([a.disableWarnings], b.prototype, "dangerouslyGetS4LMessagingFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LContactsFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "getS4LContactsFeaturesNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LSearchFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LCommerceFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "dangerouslyGetS4LCommerceFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LEntitlementFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "getS4LCommerceFeaturesNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getHeaders", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getPeopleSearchSettings", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getPeopleRecommendationSettings", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LNativePlatformsEcsConfig", null),
    n.__decorate([a.disableWarnings], b.prototype, "getS4LNativePlatformsEcsConfigNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LCMCFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "getS4LCMCFeaturesNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getTelemetryFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LTelemetryFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "getS4LTelemetryFeaturesNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getPesConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getAsyncMediaFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getSkypeRootToolsConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getTrouterJScriptClientConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getMDNTRAPClientConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getSRMFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "getSRMFeaturesNoSubscription", null),
    n.__decorate([a.disableWarnings], b.prototype, "getJoinFeaturesNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getJoinFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getAdsFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getOnboardingFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getEngagementFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getSkypeEngagementFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "dangerouslyGetOnboardingFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getDebugabilitySquad", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getSkypeRealTimeMedia", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LSisuFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "dangerouslyGetS4LSisuFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LUiFeatures", null),
    n.__decorate([a.disableWarnings], b.prototype, "getS4LUiFeaturesNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getS4LStratusFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getOEMConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getFeedbackFeatures", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getULLogUploadConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getConfigSettings", null),
    n.__decorate([a.disableWarnings], b.prototype, "getConfigSettingsNoSubscription", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getCachedEcsConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "isUserEcsConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getTrustedDomainInfo", null),
    n.__decorate([a.autoSubscribe], b.prototype, "isTrustedDomain", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getBingUrls", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getBingMapsConfig", null),
    n.__decorate([a.autoSubscribe], b.prototype, "getCortanaNotebookUrl", null),
    n.__decorate([a.autoSubscribe], b.prototype, "isDesktopVIMEnabled", null),
    b = n.__decorate([a.AutoSubscribeStore], b),
    t.AppConfigStore = b;
    let v = new b;
    t.default = v
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e.transparent = "rgba(0, 0, 0, 0)",
        e.whiteOverlay20 = "rgba(255, 255, 255, 0.2)",
        e.whiteOverlay30 = "rgba(255, 255, 255, 0.3)",
        e.whiteOverlay50 = "rgba(255, 255, 255, 0.5)",
        e.whiteOverlay70 = "rgba(255, 255, 255, 0.7)",
        e.whiteOverlay80 = "rgba(255, 255, 255, 0.8)",
        e.whiteOverlay90 = "rgba(255, 255, 255, 0.9)",
        e.white = "#FFFFFF",
        e.gray50Overlay50 = "rgba(241, 241, 244, 0.5)",
        e.gray50overlay95 = "rgba(241, 241, 244, 0.95)",
        e.gray50 = "#F1F1F4",
        e.gray100Overlay30 = "rgba(229, 228, 232, 0.3)",
        e.gray100Overlay80 = "rgba(229, 228, 232, 0.8)",
        e.gray100 = "#E5E4E8",
        e.gray200Overlay10 = "rgba(213, 217, 222, 0.1)",
        e.gray200Overlay20 = "rgba(213, 217, 222, 0.2)",
        e.gray200Overlay60 = "rgba(213, 217, 222, 0.6)",
        e.gray200Overlay80 = "rgba(213, 217, 222, 0.8)",
        e.gray200 = "#D5D9DE",
        e.gray300Overlay10 = "rgba(138, 141, 145, 0.1)",
        e.gray300Overlay70 = "rgba(138, 141, 145, 0.7)",
        e.gray300Overlay80 = "rgba(138, 141, 145, 0.8)",
        e.gray300 = "#8A8D91",
        e.gray400Overlay10 = "rgba(43, 44, 51, 0.1)",
        e.gray400Overlay20 = "rgba(43, 44, 51, 0.2)",
        e.gray400Overlay40 = "rgba(43, 44, 51, 0.4)",
        e.gray400Overlay50 = "rgba(43, 44, 51, 0.5)",
        e.gray400Overlay70 = "rgba(43, 44, 51, 0.7)",
        e.gray400Overlay80 = "rgba(43, 44, 51, 0.8)",
        e.gray400overlay95 = "rgba(43, 44, 51, 0.95)",
        e.gray400 = "#2B2C33",
        e.blackOverlay10 = "rgba(0, 0, 0, 0.1)",
        e.blackOverlay20 = "rgba(0, 0, 0, 0.2)",
        e.blackOverlay35 = "rgba(0, 0, 0, 0.35)",
        e.blackOverlay40 = "rgba(0, 0, 0, 0.4)",
        e.blackOverlay50 = "rgba(0, 0, 0, 0.5)",
        e.blackOverlay60 = "rgba(0, 0, 0, 0.6)",
        e.blackOverlay65 = "rgba(0, 0, 0, 0.65)",
        e.blackOverlay70 = "rgba(0, 0, 0, 0.7)",
        e.blackOverlay80 = "rgba(0, 0, 0, 0.8)",
        e.black = "#000000",
        e.blueOverlay10 = "rgba(22, 134, 217, 0.1)",
        e.blueOverlay30 = "rgba(22, 134, 217, 0.3)",
        e.blueOverlay50 = "rgba(22, 134, 217, 0.5)",
        e.blueOverlay70 = "rgba(22, 134, 217, 0.7)",
        e.blue = "#1686D9",
        e.shadow = "rgba(69, 72, 82, 0.2)",
        e.yellow = "#F0C01E",
        e.orange = "#EC7758",
        e.orangeAccessible = "#CA5010",
        e.orangeGradient = "#FF8C00",
        e.rose = "#F7B7A6",
        e.fuschia = "#E362A6",
        e.mint = "#8FD3C5",
        e.pink = "#E262A6",
        e.red = "#F44336",
        e.redIOS = "#ff3b30",
        e.greenIOS = "#4cd964",
        e.greenOverlay10 = "rgba(76, 175, 80, 0.1)",
        e.green = "#4CAF50",
        e.raiseHandOrange = "#FFAA44",
        e.swiftCardsImageOverlay = "rgba(1, 1, 24, 0.05)",
        e.dialPadHoverDark = "#3E3F45",
        e.markupRed = "#D10000",
        e.markupRedOrange = "#F00A00",
        e.markupOrange = "#FB5D00",
        e.markupYellowOrange = "#FFC200",
        e.markupYellow = "#FFEC00",
        e.markupYellowGreen = "#A0D200",
        e.markupGreen = "#1B8014",
        e.markupBlueGreen = "#00706A",
        e.markupBlue = "#0000D8",
        e.markupBlueViolet = "#4D2279",
        e.markupViolet = "#3C0058",
        e.markupRedViolet = "#A00054",
        e.sxCortanaOuterRing = "#9bdaf5",
        e.sxCortanaInnerRing = "#20a0e6",
        e.sxCortanaOuterRingHover = "#89c3dc",
        e.sxCortanaInnerRingHover = "#168cce",
        e.callStageDark = "#1F1F1F",
        e.callStageLight = "#2B2B2B",
        e.sxStatusBarDefault = "#1F1F1F",
        e.sxBlue = "#00aff0",
        e.desktopUpgradeNotificationGreen = "#F5F9EC",
        e.desktopUpgradeNotificationGreenHover = "#DFE8CC",
        e.desktopMandatoryUpgradeNotificationRed = "#FAD7D6",
        e.desktopMandatoryUpgradeNotificationRedHover = "#F5B9B8",
        e.leftNavRowSelectionColor = "#FFFFFF",
        e.leftNavRowHoverColor = "#EAEAEA",
        e.darkThemeBackground = "#19191B",
        e.darkThemeBackgroundOverlay85 = "rgba(25, 25, 27, 0.85)",
        e.darkThemeSecondaryTextColor = "#ACACAC",
        e.darkThemeSecondaryBackground = "#202023",
        e.classicDarkBubbleOther = "#1E2224",
        e.classicDarkBubbleTextOther = "#CCCCCC",
        e.classicDarkBubbleSelf = "#2B333B",
        e.classicDarkBubbleTextSelf = "#CCCCCC",
        e.classicDarkPrimaryBackground = "#1F1F1F",
        e.classicDarkSecondaryBackground = "#1F1F1F",
        e.classicDarkMessageStreamBackground = "#000000",
        e.darkMessageComposerContentBackground = "rgba(90, 92, 115, 0.3)",
        e.darkThemeSisuTextColor = "#E5E4E8",
        e.defaultThemeSisuTextColor = "#2B2C33",
        e.accessibleBackground = "#606060",
        e.available = "#4DD965",
        e.away = "#FFBA00",
        e.coachMarkBackground = "#1479c7",
        e.adaptiveCardDarkThemeBorder = "#404040",
        e.adaptiveCardSubtleAccent = "rgba(22, 134, 217, 0.5)",
        e.adaptiveCardSubtleGood = "rgba(76, 175, 80, 0.8)",
        e.adaptiveCardSubtleWarning = "rgba(240, 192, 30, 0.8)",
        e.adaptiveCardSubtleAttention = "rgba(244, 67, 54, 0.8)",
        e.searchResultBackgroundColor = "#0000FF",
        e.pesPickerBackgroundLight = "#FBFBFB",
        e.pesPickerBackgroundDark = "#242424",
        e.delphiBubbleColorOther = "#F2F6F9",
        e.delphiBubbleColorSelf = "#DBF4FD",
        e.delphiBubbleColorBot = "#F2F6F9",
        e.delphiBubbleText = "#252423",
        e.delphiSecondaryBackgroundColor = "#F0F4F8",
        e.delphiSecondaryRowHighlightColor = "#C7EDFC",
        e.delphiSecondaryRowHoverColor = "rgba(199, 237, 252, 0.5)",
        e.delphiMessageComposerBackgroundColor = "#F1F1F4",
        e.delphiPrimaryTextColor = "#252423",
        e.delphiDarkBubbleColorOther = "#1E2224",
        e.delphiDarkBubbleColorSelf = "#2B333B",
        e.delphiDarkBubbleColorBot = "#1E2224",
        e.delphiDarkBubbleText = "#D5D9DE",
        e.delphiDarkPrimaryTextColor = "#D5D9DE",
        e.delphiDarkSecondaryTextColor = "#8A8D91",
        e.blueLight = "#00BCF2",
        e.blueMedium = "#009AE3",
        e.blueDark = "#0078d4",
        e.purpleLight = "#C182D1",
        e.purpleDark = "#C239B3",
        e.blurpleLight = "#8378DE",
        e.blurpleDark = "#49409A",
        e.pinkLight = "#EE9889",
        e.pinkDark = "#FF6767",
        e.orangeLight = "#FFAA44",
        e.orangeDark = "#F7894A",
        e.todoTaskFolderIconColor = "#465EFC",
        e.todoSharedFolderIconColor = "rgb(138,141,145)",
        e.syncAddressBookHeader = "#0284DC",
        e.docFile = "#2b579a",
        e.xlsFile = "#217346",
        e.pptFile = "#d24726",
        e.oneNoteFile = "#80397b",
        e.powerSavingCallingBG1 = "#05091C",
        e.powerSavingCallingBG2 = "#051B2D",
        e.teamsBackground = "#5357AE"
    }(t.Color || (t.Color = {}))
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(5)
      , s = i(8);
    t.MaxContentSizeMultiplier = 1.353,
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.SplitViewContent = 1] = "SplitViewContent",
        e[e.CallMonitor = 2] = "CallMonitor",
        e[e.ShareWith = 3] = "ShareWith",
        e[e.NativeWindow = 4] = "NativeWindow"
    }(t.RootViewType || (t.RootViewType = {})),
    t.MainRootViewId = "__MAIN_ROOT_VIEW_ID__",
    t.ScreenShareViewId = "__SCREEN_SHARE_VIEW_ID__",
    t.SettingsWindowRootViewId = "__SETTINGS_WINDOW_ROOT_VIEW_ID__",
    t.ShareFileViewId = "__SHARE_FILE_VIEW_ID__",
    t.CallNotificationViewId = "__CALL_NOTIFICATION_VIEW_ID__",
    t.CallMonitorViewId = "__CALL_MONITOR_VIEW_ID__",
    t.CallDebugRootViewId = "__CALL_DEBUG_VIEW_ID__",
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.BigDeprecated = 1] = "BigDeprecated",
        e[e.SmallDeprecated = 2] = "SmallDeprecated"
    }(t.BodyTextSize || (t.BodyTextSize = {})),
    function(e) {
        e[e.BodyText = 0] = "BodyText",
        e[e.BodyTextSmall = 1] = "BodyTextSmall",
        e[e.BodyTextBold = 2] = "BodyTextBold",
        e[e.Caption = 3] = "Caption"
    }(t.LinkTextStyle || (t.LinkTextStyle = {})),
    function(e) {
        e[e.Caption = 0] = "Caption",
        e[e.BodyText = 1] = "BodyText",
        e[e.BodyTextBold = 2] = "BodyTextBold",
        e[e.MessagingHeader = 3] = "MessagingHeader",
        e[e.MessagingHeaderSmall = 4] = "MessagingHeaderSmall"
    }(t.TextEditTextStyle || (t.TextEditTextStyle = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Primary = 1] = "Primary",
        e[e.Secondary = 2] = "Secondary",
        e[e.Disabled = 3] = "Disabled",
        e[e.Destructive = 4] = "Destructive"
    }(t.TextThemeColor || (t.TextThemeColor = {})),
    function(e) {
        e[e.h0 = 0] = "h0",
        e[e.h1 = 1] = "h1",
        e[e.h2 = 2] = "h2",
        e[e.h3 = 3] = "h3",
        e[e.h4 = 4] = "h4",
        e[e.h5 = 5] = "h5"
    }(t.HeaderSize || (t.HeaderSize = {})),
    function(e) {
        e.thin = "100",
        e.extraLight = "200",
        e.light = "300",
        e.regular = "400",
        e.medium = "500",
        e.semiBold = "600",
        e.bold = "700",
        e.heavy = "800",
        e.black = "900"
    }(t.FontWeight || (t.FontWeight = {})),
    t.SideBarWidths = {
        compact: 300,
        base: 322,
        max: 380,
        maxRight: 425,
        min: 290
    },
    t.RowPadding = {
        left: 10,
        leftDesktop: 8,
        leftDesktopSearch: 12,
        right: 10,
        rightDesktop: 15,
        rightSearch: 10,
        rightDesktopSearch: 10
    },
    t.NewChatMenuItemSizes = {
        defaultWidth: 105,
        height: 52,
        paddingVertical: 16
    },
    t.OverflowItemSizes = {
        minHeight: 110,
        iconSize: 60,
        captionLineHeight: 16,
        verticalPadding: 10,
        numberOfLines: 3
    },
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Android = 1] = "Android",
        e[e.Tablet = 2] = "Tablet",
        e[e.iosLandscape = 3] = "iosLandscape",
        e[e.CompactDesktop = 4] = "CompactDesktop"
    }(t.TabBarHeight || (t.TabBarHeight = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Bottom = 1] = "Bottom",
        e[e.None = 2] = "None"
    }(t.SXModalAnimationType || (t.SXModalAnimationType = {})),
    function(e) {
        e[e.Large = 0] = "Large",
        e[e.Medium = 1] = "Medium",
        e[e.Small = 2] = "Small"
    }(t.SXButtonSize || (t.SXButtonSize = {})),
    function(e) {
        e[e.Start = 0] = "Start",
        e[e.End = 1] = "End"
    }(t.SXButtonIconPosition || (t.SXButtonIconPosition = {})),
    function(e) {
        e[e.ColorFill = 0] = "ColorFill",
        e[e.ColorStroke = 1] = "ColorStroke",
        e[e.LightFill = 2] = "LightFill",
        e[e.DarkFill = 3] = "DarkFill",
        e[e.LightStroke = 4] = "LightStroke",
        e[e.DarkStroke = 5] = "DarkStroke",
        e[e.LightNoBackground = 6] = "LightNoBackground",
        e[e.DarkNoBackground = 7] = "DarkNoBackground",
        e[e.ThemeFill = 8] = "ThemeFill",
        e[e.ThemeStroke = 9] = "ThemeStroke",
        e[e.ThemeNoBackground = 10] = "ThemeNoBackground",
        e[e.GradientFill = 11] = "GradientFill",
        e[e.BlueFill = 12] = "BlueFill",
        e[e.Custom = 13] = "Custom"
    }(t.SXButtonStyle || (t.SXButtonStyle = {})),
    function(e) {
        e.auto = "auto",
        e.cover = "cover",
        e.contain = "contain",
        e.repeat = "repeat",
        e.stretch = "stretch"
    }(t.ImageResizeModeEnum || (t.ImageResizeModeEnum = {})),
    function(e) {
        e[e.ExtraSmall = 0] = "ExtraSmall",
        e[e.Small = 1] = "Small",
        e[e.Medium = 2] = "Medium",
        e[e.Large = 3] = "Large"
    }(t.SXActivityIndicatorSize || (t.SXActivityIndicatorSize = {})),
    t.ListItem = o.lazyProperties({
        small: ()=>({
            shortHeight: 50,
            shortHeightStyle: n.Styles.createViewStyle({
                minHeight: 50
            }),
            regularHeight: 60,
            regularHeightStyle: n.Styles.createViewStyle({
                minHeight: 60
            })
        })
    }),
    function(e) {
        e.CopyLink = "CopyLink",
        e.AddSkypeContacts = "SkypeContacts",
        e.Outlook = "Outlook",
        e.Gmail = "Gmail",
        e.SMS = "SMS",
        e.BlurBackground = "BlurBackground",
        e.ScreenshareOff = "ScreenshareOff",
        e.Screenshare = "Screenshare",
        e.ScreenSharingRequestControl = "ScreenSharingRequestControl",
        e.ScreenSharingStopControl = "ScreenSharingStopControl",
        e.ViewSwitch = "ViewSwitch",
        e.Snapshot = "Snapshot",
        e.React = "React",
        e.SkypeContacts = "SkypeContacts",
        e.Settings = "Settings",
        e.HoldCall = "HoldCall",
        e.ResumeCall = "ResumeCall",
        e.Record = "Record",
        e.Subtitles = "Subtitles",
        e.VideoEnable = "VideoEnable",
        e.VideoOff = "VideoOff",
        e.MicrophoneOff = "MicrophoneOff",
        e.Facebook = "Facebook",
        e.Mail = "Mail",
        e.RaiseHand = "RaiseHand",
        e.LowerHand = "LowerHand"
    }(t.SXMenuIcon || (t.SXMenuIcon = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.Up = 1] = "Up",
        e[e.Down = 2] = "Down"
    }(t.SXMenuNavigationDirection || (t.SXMenuNavigationDirection = {})),
    t.InsetZero = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
    },
    t.HorizontalInsetZero = {
        left: 0,
        right: 0
    },
    t.HorizontalInsetDefault = {
        left: t.RowPadding.left,
        right: t.RowPadding.right
    },
    t.BottomInsetDefault = 10,
    t.ListItemAccessibilityTrait = n.Types.AccessibilityTrait.Group,
    t.BlueGradient = [s.Color.blueLight, s.Color.blueMedium, s.Color.blueDark, s.Color.blueDark],
    t.CustomActionSheetBorderRadius = 3,
    t.CompositeNotificationToastInfo = {
        horizontal: 10,
        vertical: 5,
        color: s.Color.gray400
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Skype = 1] = "Skype"
    }(t.IconCollection || (t.IconCollection = {})),
    function(e) {
        e.Blank = "",
        e.SkypeIcon = "",
        e.MSOutlook = "",
        e.MSXbox = "",
        e.MSOneDrive = "",
        e.SkypeForBusinessLarge = "",
        e.SkypeForBusiness = "",
        e.MSOffice = "",
        e.Bing = "",
        e.MSTeams = "",
        e.CallStart = "",
        e.CallEnd = "",
        e.Video = "",
        e.VideoOff = "",
        e.Dialpad = "",
        e.Microphone = "",
        e.MicrophoneOff = "",
        e.More = "",
        e.ScreenShare = "",
        e.ScreenShareOff = "",
        e.CallMissed = "",
        e.CallIn = "",
        e.CallOut = "",
        e.Favourite = "",
        e.FavouriteFilled = "",
        e.CallDisabled = "",
        e.Landline = "",
        e.ShareiOS = "",
        e.Clippy = "",
        e.CallAdd = "",
        e.CallQualityIndicator = "",
        e.Contact = "",
        e.ContactAdd = "",
        e.SkypeAddressbook = "",
        e.ContactCard = "",
        e.ContactGroupAdd = "",
        e.ContactGroup = "",
        e.BlockNotification = "",
        e.ContactGroupCall = "",
        e.ContactGroupTwoPersonas = "",
        e.Bot = "",
        e.BotAdd = "",
        e.Message = "",
        e.Mobile = "",
        e.Videomail = "",
        e.File = "",
        e.FileVideo = "",
        e.FileAudio = "",
        e.Menu = "",
        e.MenuList = "",
        e.Location = "",
        e.MyLocation = "",
        e.EmoticonStroke = "",
        e.EmoticonNotPresent = "",
        e.ForwardItem = "",
        e.SwitchCamera = "",
        e.NewSwitchCamera = "",
        e.Badge = "",
        e.MSWord = "",
        e.MSExcel = "",
        e.MSPowerPoint = "",
        e.MSVisio = "",
        e.MSOneNote = "",
        e.FileMultiple = "",
        e.QuoteClose = "",
        e.Media = "",
        e.Send = "",
        e.Share = "",
        e.MoreVertical = "",
        e.QuickLook = "",
        e.Sad = "",
        e.Undo = "",
        e.SkypeTranslator = "",
        e.ShareAndroid = "",
        e.QuoteOpen = "",
        e.VolumeMax = "",
        e.VolumeMid = "",
        e.VolumeMin = "",
        e.VolumeOff = "",
        e.Search = "",
        e.Headset = "",
        e.Bluetooth = "",
        e.Camera = "",
        e.Topic = "",
        e.Play = "",
        e.Pause = "",
        e.Mail = "",
        e.Ok = "",
        e.Cancel = "",
        e.Plus = "",
        e.Down = "",
        e.Up = "",
        e.DownChevron = "",
        e.UpChevron = "",
        e.LeftChevron = "",
        e.RightChevron = "",
        e.Picture = "",
        e.Backspace = "",
        e.NavigationBack = "",
        e.AddText = "",
        e.NavigationForward = "",
        e.Move = "",
        e.HeartOutline = "",
        e.ScreenCapture = "",
        e.FlashOn = "",
        e.FlashOff = "",
        e.SkypeCredit = "",
        e.QR = "",
        e.Globe = "",
        e.SubscriptionCountry = "",
        e.SubscriptionRegion = "",
        e.SubscriptionWorld = "",
        e.GlobeCredit = "",
        e.CreditGlobe = "",
        e.SkypeMoney = "",
        e.Error = "",
        e.Warning = "",
        e.Info = "",
        e.Question = "",
        e.Refresh = "",
        e.SadError = "",
        e.Privacy = "",
        e.Settings = "",
        e.SkypeMobile = "",
        e.Notification = "",
        e.NotificationOff = "",
        e.InfoStroke = "",
        e.Link = "",
        e.LocationPin = "",
        e.Pinning = "",
        e.Pin = "",
        e.PinOff = "",
        e.Reload = "",
        e.MagicWand = "",
        e.Alert = "",
        e.AlertOff = "",
        e.NoCallsFace = "",
        e.CallAnimSmall1 = "",
        e.CallAnimSmall4 = "",
        e.PresenceOnline = "",
        e.PresenceBlocked = "",
        e.AvatarBotCertified = "",
        e.QikContact = "",
        e.Moji = "",
        e.MojiDeleted = "",
        e.MojiMaskInverted = "",
        e.Download = "",
        e.Card = "",
        e.Lightbulb = "",
        e.Filter = "",
        e.Clear = "",
        e.Connecting = "",
        e.UserHighlight = "",
        e.Sticker = "",
        e.StickerDeleted = "",
        e.StickerMaskInverted = "",
        e.ClosePanel = "",
        e.CortanaLogoOuter = "",
        e.CortanaLogoInner = "",
        e.Calendar = "",
        e.Bookmark = "",
        e.Bookmarked = "",
        e.CallList = "",
        e.PresenceDND = "",
        e.PresenceInvisible = "",
        e.PresenceAway = "",
        e.PresenceBusy = "",
        e.Compose = "",
        e.CallRecord = "",
        e.CallRecordStroke = "",
        e.CallRecordDot = "",
        e.MobileOk = "",
        e.MobileSending = "",
        e.MobileSms = "",
        e.MobileError = "",
        e.Gallery1 = "",
        e.Mask = "",
        e.SwitchVideoCamera = "",
        e.PrivateCallFill = "",
        e.PrivateSessionKey = "",
        e.PrivateChatFill = "",
        e.Lock = "",
        e.CheckMarkStroke = "",
        e.Delete = "",
        e.SettingsAudio = "",
        e.Birthday = "",
        e.Stop = "",
        e.ContactsGroup = "",
        e.PeopleAdd = "",
        e.People = "",
        e.Copy = "",
        e.Gif = "",
        e.ChromeRestore = "",
        e.MobileSmsNew = "",
        e.MessageUnread = "",
        e.MessageRead = "",
        e.SkypeInvite = "",
        e.RotateOrientation = "",
        e.CallInFilled = "",
        e.TV = "",
        e.CallOutFilled = "",
        e.CallMissedFilled = "",
        e.CallBlockedFilled = "",
        e.CallErrorFilled = "",
        e.Reply = "",
        e.ChatReply = "",
        e.QuestionCircle = "",
        e.SkypeNumber = "",
        e.CameraTest = "",
        e.ClosedCaption = "",
        e.ClosedCaptionFilled = "",
        e.SwitchAccount = "",
        e.SplitBill = "",
        e.SendMoney = "",
        e.RequestMoney = "",
        e.SelectAll = "",
        e.SkypeOut = "",
        e.CallOptions = "",
        e.Expand = "",
        e.Contract = "",
        e.PrivateChatFilled = "",
        e.MobileSMSFilled = "",
        e.Office = "",
        e.Snapshot = "",
        e.CircleBig = "",
        e.Recent = "",
        e.Hide = "",
        e.MissingPreview = "",
        e.Paste = "",
        e.MeetNow = "",
        e.Proximity = "",
        e.ModeratedChat = "",
        e.CallsInverted = "",
        e.ChatsInverted = "",
        e.CameraInverted = "",
        e.ContactsInverted = "",
        e.ContactsGroupInverted = "",
        e.AlertFill = "",
        e.AlertFillNewFont = "",
        e.PeopleFill = "",
        e.StickersCamera = "",
        e.ReactionAdd = "",
        e.AdMaskPos = "",
        e.AdMaskNeg = "",
        e.Screenshare1 = "",
        e.Screenshare2 = "",
        e.Screenshare3 = "",
        e.GuestAccountExpired = "",
        e.GuestAccount = "",
        e.Gridview = "",
        e.FocusedView = "",
        e.FocusedView2 = "",
        e.FocusedView3 = "",
        e.Schedule = "",
        e.CircleBigNeg = "",
        e.Carousel = "",
        e.PreviousNext = "",
        e.CallerID = "",
        e.RadioButtonSelection = "",
        e.Poll = "",
        e.CategoryTrending = "",
        e.CategoryFavorite = "",
        e.CategoryHappy = "",
        e.CategorySad = "",
        e.CategoryYes = "",
        e.CategoryNo = "",
        e.CategoryParty = "",
        e.CategoryCute = "",
        e.MessageVideo = "",
        e.ClosedCaptionSettings = "",
        e.ClosedCaptionSettingsFilled = "",
        e.Screenshare = "",
        e.Exclaimation = "",
        e.GroupMe = "",
        e.CallMerge = "",
        e.ViewSwitcher = "",
        e.Presenter = "",
        e.Audience = "",
        e.GalleryLarge = "",
        e.Gallery = "",
        e.FitToWindow = "",
        e.OriginalSize = "",
        e.StartIncomingVideo = "",
        e.Left = "",
        e.Right = "",
        e.NavigationBackCentered = "",
        e.NavigationForwardCentered = "",
        e.ScreenSharingRequestControl = "",
        e.ScreenSharingStopControl = "",
        e.GifPlay = "",
        e.BackgroundReplacement = "",
        e.RaiseHand = "",
        e.LowerHand = "",
        e.RaiseHandCrossed = "",
        e.LowerHandCrossed = ""
    }(t.SkypeIcon || (t.SkypeIcon = {})),
    function(e) {
        e[e.size8 = 8] = "size8",
        e[e.size10 = 10] = "size10",
        e[e.size12 = 12] = "size12",
        e[e.size14 = 14] = "size14",
        e[e.size15 = 15] = "size15",
        e[e.size16 = 16] = "size16",
        e[e.size18 = 18] = "size18",
        e[e.size20 = 20] = "size20",
        e[e.size24 = 24] = "size24",
        e[e.size28 = 28] = "size28",
        e[e.size30 = 30] = "size30",
        e[e.size32 = 32] = "size32",
        e[e.size40 = 40] = "size40",
        e[e.default = 44] = "default",
        e[e.size48 = 48] = "size48",
        e[e.size60 = 60] = "size60",
        e[e.size64 = 64] = "size64",
        e[e.size67 = 67] = "size67",
        e[e.size80 = 80] = "size80",
        e[e.size96 = 96] = "size96",
        e[e.size100 = 100] = "size100",
        e[e.size120 = 120] = "size120",
        e[e.size128 = 128] = "size128"
    }(t.IconSize || (t.IconSize = {}))
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(43)
      , o = i(234)
      , s = i(92)
      , r = i(135);
    class a extends n.default {
        constructor(e) {
            super(e),
            this._updateCurrentTheme(this._getCurrentTheme(e), !0),
            this._subscribeToThemeChanges() && this._startThemeSubscription()
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            this.context && this.context.shouldUseThemePreview && this._updateCurrentTheme(this._getCurrentTheme(this.props), !1)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._stopThemeSubscription()
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            e.colorThemeOverride && this.props.colorThemeOverride !== e.colorThemeOverride && this._updateCurrentTheme(e.colorThemeOverride, !1)
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            e.disableThemeSubscription !== this.props.disableThemeSubscription && (this.props.disableThemeSubscription ? this._stopThemeSubscription() : this._startThemeSubscription())
        }
        _updateCurrentTheme(e, t) {
            return this._currentTheme !== e && !this._themeOverriden && (this._currentTheme = e,
            this._themeStyles = o.themeStylesForTheme(e),
            this._themeColors = this._themeConfig = o.themeColorsForTheme(e),
            !0)
        }
        _setThemeOverride(e, t) {
            this._handleThemeChange(e, t),
            this._themeOverriden = !0
        }
        _clearThemeOverride(e) {
            this._themeOverriden = !1;
            const t = this.props.colorThemeOverride || s.colorThemeNoSubscription();
            this._handleThemeChange(t, e)
        }
        _useAccessibleTheme() {
            return r.isAccessibleTheme(this._currentTheme)
        }
        _useDarkTheme() {
            return r.isDarkTheme(this._currentTheme)
        }
        _useDelphiTheme() {
            return r.isDelphiTheme(this._currentTheme)
        }
        _subscribeToThemeChanges() {
            return !this.props.disableThemeSubscription
        }
        _getCurrentTheme(e) {
            let t;
            return e.colorThemeOverride ? t = e.colorThemeOverride : this.context && this.context.shouldUseThemePreview && (t = s.previewTheme()),
            t || (t = s.colorTheme()),
            t
        }
        _afterThemeChanged() {}
        _onThemeStoreChange(e) {
            this._handleThemeChange(e, !0),
            this._afterThemeChanged()
        }
        _handleThemeChange(e, t) {
            this._updateCurrentTheme(e, !1) && t && this.forceUpdate()
        }
        _startThemeSubscription() {
            this._stopThemeSubscription(),
            this._themeStoreToken = s.subscribe(()=>{
                this._onThemeStoreChange(this._getCurrentTheme(this.props))
            }
            )
        }
        _stopThemeSubscription() {
            this._themeStoreToken && (s.unsubscribe(this._themeStoreToken),
            this._themeStoreToken = void 0)
        }
    }
    t.default = a
}
, , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(61)
      , s = i(8)
      , r = {};
    class a {
        static dimensionsStyle(e) {
            const t = `${e.width}x${e.height}`;
            return r[t] || (r[t] = n.Styles.createViewStyle({
                width: e.width,
                height: e.height
            })),
            r[t]
        }
    }
    a.absoluteFill = n.Styles.createViewStyle({
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    }),
    a.flexOne = n.Styles.createViewStyle({
        flex: 1
    }),
    a.flexNegativeOne = n.Styles.createViewStyle({
        flex: -1
    }),
    a.flexZero = n.Styles.createViewStyle({
        flex: 0
    }),
    a.alignItemsCenter = n.Styles.createViewStyle({
        alignItems: "center"
    }),
    a.overflowVisible = n.Styles.createViewStyle({
        overflow: "visible"
    }),
    a.transparentBackground = n.Styles.createViewStyle({
        backgroundColor: s.Color.transparent
    }),
    a.floatingStyle = n.Styles.createViewStyle({
        zIndex: 1
    }),
    a.noncollapsibleView = a.transparentBackground,
    a.displayNone = {
        display: "none"
    },
    a.noWrap = {
        whiteSpace: "nowrap"
    },
    a.pointerCursor = o.UICapabilities.cursorTypesSupported() ? n.Styles.createViewStyle({
        cursor: "pointer"
    }) : void 0,
    a.defaultCursor = o.UICapabilities.cursorTypesSupported() ? n.Styles.createViewStyle({
        cursor: "default"
    }) : void 0,
    a.shadowStyle = n.Styles.createViewStyle({
        overflow: "visible",
        shadowColor: s.Color.black,
        shadowOpacity: .7,
        shadowRadius: 2,
        shadowOffset: {
            height: 2,
            width: 0
        },
        elevation: 3
    }),
    a.shadowLightStyle = n.Styles.createViewStyle({
        overflow: "visible",
        shadowColor: s.Color.blackOverlay20,
        shadowRadius: 3,
        shadowOffset: {
            height: 1,
            width: 0
        }
    }),
    e.exports = a
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(10);
    t.BodyTextSize = n.BodyTextSize,
    t.HeaderSize = n.HeaderSize,
    t.TextThemeColor = n.TextThemeColor;
    const o = i(494)
      , s = i(113)
      , r = i(24)
      , a = i(23)
      , l = i(2433);
    class c extends l.default {
        _textStyles() {
            return [this.props.bold ? a.bodyBoldFontStyle(this._currentTheme, this.props.size) : a.bodyFontStyle(this._currentTheme, this.props.size)]
        }
    }
    t.BodyText = c;
    class d extends l.default {
        _textStyles() {
            let e;
            if (e = this.props.small ? [this.props.selected ? a.selectedCaptionSmallFontStyle(this._currentTheme) : a.captionSmallFontStyle(this._currentTheme)] : [this.props.selected ? a.selectedCaptionFontStyle(this._currentTheme) : a.captionFontStyle(this._currentTheme)],
            this.props.messageStreamFontSize && this.props.messageStreamFontSize !== s.MessageStreamFontSize.Normal) {
                const t = o.getStyleFromStyle(e, this.props.messageStreamFontSize);
                e.push(t)
            }
            return e
        }
    }
    t.Caption = d;
    class u extends l.default {
        _textStyles() {
            let e;
            switch (this.props.size) {
            case n.HeaderSize.h0:
                e = this.props.light ? a.fontStyleNext.h0Light : a.fontStyle.h0;
                break;
            case n.HeaderSize.h1:
                e = this.props.light ? a.fontStyleNext.h1Light : a.fontStyle.h1;
                break;
            case n.HeaderSize.h2:
                e = this.props.light ? a.fontStyleNext.h2Light : a.fontStyle.h2;
                break;
            case n.HeaderSize.h3:
                e = this.props.light ? a.fontStyleNext.h3Light : a.fontStyle.h3;
                break;
            case n.HeaderSize.h4:
                e = this.props.light ? a.fontStyleNext.h4Light : a.fontStyle.h4;
                break;
            default:
            case n.HeaderSize.h5:
                e = this.props.light ? a.fontStyleNext.h5Light : a.fontStyle.h5
            }
            return [e, this._themeStyles.primaryTextColorStyle]
        }
    }
    t.Header = u;
    class g extends l.default {
        _textStyles() {
            return [a.subtitleFontStyle(this._currentTheme)]
        }
    }
    t.Subtitle = g;
    class h extends l.default {
        _textStyles() {
            const e = [a.rowTitleFontStyle(this._currentTheme)];
            return this.props.disabled && e.push(this._themeStyles.disabledTextColorStyle),
            e
        }
    }
    t.RowTitle = h;
    class p extends l.default {
        _textStyles() {
            const e = r.default.isSmallDeviceNoSubscription(this._getRootViewId()) && !1 !== this.props.useSmallTitle;
            return [a.cardTitleFontStyle(this._currentTheme, e)]
        }
    }
    t.CardTitle = p;
    class m extends l.default {
        _textStyles() {
            return [a.panelHeaderFontStyle(this.props.landscape, this._currentTheme)]
        }
    }
    t.PanelHeader = m;
    class S extends l.default {
        _textStyles() {
            return []
        }
    }
    t.ThemeAwareText = S
}
, , function(e, t, i) {
    "use strict";
    const n = i(33)
      , o = i(1)
      , s = i(164)
      , r = i(0)
      , a = i(52)
      , l = i(1025)
      , c = i(6)
      , d = i(197)
      , u = i(79)
      , g = i(46)
      , h = i(191)
      , p = i(16)
      , m = i(10)
      , S = i(199)
      , C = i(300)
      , y = i(333)
      , f = i(30)
      , _ = i(225)
      , b = i(669)
      , v = i(28)
      , T = i(2)
      , P = i(551)
      , A = i(567)
      , k = i(172)
      , I = i(3)
      , w = i(239)
      , N = i(1056)
      , M = i(4)
      , E = i(565)
      , x = i(1470)
      , D = i(54)
      , L = i(20)
      , R = i(55)
      , B = i(22)
      , O = i(97)
      , F = i(64)
      , V = i(262)
      , U = i(282)
      , H = i(214)
      , W = i(236)
      , z = i(436)
      , G = i(177)
      , K = i(360)
      , j = i(165)
      , q = i(259)
      , Q = i(638)
      , X = i(24)
      , J = i(34)
      , $ = i(307)
      , Y = i(105)
      , Z = i(1058)
      , ee = i(107)
      , te = i(308)
      , ie = i(59)
      , ne = i(129)
      , oe = i(553)
      , se = i(35)
      , re = i(45)
      , ae = i(9)
      , le = i(309)
      , ce = i(388);
    let de = new class {
        constructor() {
            this.launchModalEvent = new a.default,
            this.closeModalEvent = new a.default,
            this._forceRefreshOnNextNavigate = !1,
            this._scenarioLookupByConversationId = {},
            this._animationScenarios = {},
            this._defaultNavigateToConvParams = {
                convId: void 0,
                scrollToTimestamp: void 0,
                focusedMessageCuid: void 0,
                forceRefreshFocus: !1,
                contextConversationId: void 0,
                causeId: "",
                shouldAutoFocusInput: !1,
                shouldResetNavStack: !0,
                shouldFlattenNavOnInteraction: !1,
                origin: T.NavigationConversationOrigin.Unknown,
                isNewConversation: !1,
                inviteToken: void 0,
                popToRoot: !0,
                isFromPeopleRecommendations: !1,
                directShareEventData: void 0
            },
            this.navigateBack = (e,t)=>{
                if (I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateBack, causeId: " + e),
                t) {
                    if (t.isPresentedInDesktopRightNav)
                        return this._rightSidebarNavigateBack(e, t);
                    if (t.isPresentedInGenericDesktopModal)
                        return this._modalNavigateBack(e, t);
                    if (t.isPresentedInDesktopContentPanel)
                        return this._desktopContentNavigateBack(e, t);
                    if (t.isPresentedByMobileStackNavigator)
                        return this._stackNavNavigateBack(e)
                }
                return B.default.isUsingStackNavigationContext() ? this._stackNavNavigateBack(e) : this._modalNavigateBack(e, t)
            }
            ,
            this.navigationCompleteCallbackPSTNDialer = ()=>{
                B.default.isUsingStackNavigationContext() && this.reduceNavStack([R.PSTNDialerPanelId], !0)
            }
        }
        navigateAfterUIStarted(e) {
            Y.default.performAfterUIStarted(e)
        }
        navigateAssertingUIStarted(e) {
            Y.default.isUIDisplayed() ? e() : I.log(T.LogTraceArea.Navigation, "navigation attempted prior to UI being displayed")
        }
        forceRefreshOnNextNavigation() {
            this._forceRefreshOnNextNavigate = !0
        }
        flattenNavStack() {
            B.default.isUsingStackNavigationContext() && F.default.flattenNavStack()
        }
        reduceNavStack(e, t=!1) {
            B.default.isUsingStackNavigationContext() && F.default.reduceNavStack(e, void 0, t)
        }
        reduceModalNavStack(e, t, i=!1) {
            const n = H.default.modalNavigatorIdForRootViewId(t);
            F.default.reduceNavStack(e, n, i)
        }
        goBack(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.goBack, causeId: " + e),
            t.goBack ? t.goBack(e) : (I.warn(T.LogTraceArea.Navigation, "NavigationActions.goBack called without componentContext.goBack, causeId: " + e),
            this.navigateBack(e, t))
        }
        stackNavigationStarted(e, t, i, n, o) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions: navigationStarted: " + (o || n ? o + " -> " + n : "no progress info")),
            t instanceof R.MobileContentPanelNavigationContext) {
                const e = t.getConversationContext();
                if (e) {
                    const t = e.state.conversationId
                      , i = this._getScenarioIdForAnimation(t)
                      , n = new ne.default(W.ScenarioName.ConversationOpenAnimation,i);
                    n.start(),
                    this._animationScenarios[t] = n
                }
            }
            const s = {
                index: n,
                type: this._routeTypeForContext(t)
            }
              , r = {
                index: o,
                type: this._routeTypeForContext(i)
            };
            U.default.onNavigationStarted(e, s, r)
        }
        stackNavigationCompleted() {
            const e = ae.newCauseId();
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions: navigationCompleted causeId: " + e),
            B.default.isUsingStackNavigationContext()) {
                const e = o.last(F.default.getCurrentNavigationStack());
                if (e instanceof R.MobileContentPanelNavigationContext) {
                    const t = e.getConversationContext();
                    if (t) {
                        const e = this._animationScenarios[t.state.conversationId];
                        e && !e.isResolved() && e.finish()
                    }
                    e.state.shouldResetNavStack && this.flattenNavStack()
                }
                this._stackNavigationCompleteCallback && (I.log(T.LogTraceArea.Navigation, "NavigationActions: navigationCompleted, calling _navigationCompleteCallback"),
                this._stackNavigationCompleteCallback(),
                this._stackNavigationCompleteCallback = void 0)
            }
            U.default.onNavigationCompleted(),
            U.default.setTransitionHint(void 0),
            N.default.stopSkippingMobileHub(e)
        }
        collapseSplitNavContext(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: collapseSplitNavContext collapsed: " + t + " navigator: " + n.pii.Omit(e) + " causeId: " + i),
            e === ee.StackNavigatorId.DesktopContent && this.clearRightSidebarContext(!0, i, m.MainRootViewId),
            F.default.collapseSplitNavContext(e, t, i)
        }
        navigateToCompositeGroup(e, t, i, n=!0) {
            const s = F.default.getCompositeCallVisible(t)
              , r = i(n, e)
              , a = o.includes(r, O.CompositeNavigationType.MainContent) && F.default.getCompositeCallVisible(t);
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToCompositeGroup,  isCallVisible: " + s + " isNewCallVisible: " + a + " causeId: " + e),
            this.navigateToCompositeContext(e, r, s && !a, t)
        }
        navigateToModalContext(e, t, i, o) {
            const s = H.default.modalNavigatorIdForRootViewId(o);
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToModalContext navigatorId: " + n.pii.Omit(s) + " causeId: " + i);
            const r = F.default.getCurrentStackNavigationContext(s, !1);
            F.default.modalNavigateToView(e, r.getMasterContext(), s, o, t ? ee.StackNavigationType.PopToRoot : ee.StackNavigationType.Push, !0, i)
        }
        navigateToDesktopSettings(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToDesktopSettings, causeId: " + t),
            X.default.isMobileScreenSize(H.default.rootViewIdForComponentContext(e)) && (c.default.getS4LNativePlatformsEcsConfig().enableElectronNativeModals,
            1) ? this.navigateToSettingsModalContext(new R.SettingsMenuContext({
                title: M.getString("UserSettingsPanel.SettingsTitle")
            }), !0, t, e) : this.navigateToRootDesktopSettingsGroup(H.default.baseSettingsGroup(), e, t)
        }
        navigateToSettingsModalContext(e, t, i, n) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToSettingsModalContext, causeId: " + i);
            const o = H.default.modalNavigatorIdForComponentContext(n);
            let s = F.default.getCurrentStackNavigationContext(o, !1).getMasterContext();
            s && s instanceof R.SettingsMenuContext || (s = new R.SettingsMenuContext({
                title: M.getString("UserSettingsPanel.SettingsTitle")
            })),
            e instanceof R.SettingsMenuContext && (e = s),
            F.default.stackNavigateToView(e, s, o, t ? ee.StackNavigationType.PopToRoot : ee.StackNavigationType.Push, !0, i)
        }
        navigateToNonHighlightsConversationOrScheduleNavigationOnLaunch(e) {
            const t = ae.newCauseId();
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToNonHighlightsConversationOrScheduleNavigationOnLaunch convId = " + J.mriOrId(e.convId) + " causeId: " + t),
            Y.default.isUIDisplayed())
                this.navigateToConversation(e);
            else {
                const i = i=>{
                    I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToNonHighlightsConversationOrScheduleNavigationOnLaunch complete navigation. convId = " + J.mriOrId(i) + " causeId: " + t);
                    const n = this._getConversationNavigationContext(e, i);
                    {
                        const e = B.default.isUsingSplitViewNoSubscription() ? C.default.rootViewIdForConversationMri(i) : m.MainRootViewId;
                        F.default.setNewStartingNavigationContext(()=>n, e),
                        e !== m.MainRootViewId && this._openSplitView(e, t)
                    }
                }
                ;
                this.scheduleConvNavigationOnLaunch(e, i)
            }
        }
        scheduleConvNavigationOnLaunch(e, t) {
            !o.isUndefined(e.origin) && e.convId && this._startNavigateToConvScenario(e.convId, e.origin, e.browserOrigin);
            const i = e.causeId;
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToConversationOnLaunch, convId = " + J.mriOrId(e.convId) + " causeId: " + i),
            N.default.skipMobileHub(i),
            Y.default.performAfterUIStarted(()=>{
                H.default.getValidConversationIdForNavigation(e.convId, i, e.origin).then(n=>{
                    n ? (this._sendConversationNavigationTelemetry(e, n),
                    h.default.prioritizeConversation(n),
                    this.fetchMemberConsumptionHorizon(n),
                    t(n)) : N.default.stopSkippingMobileHub(i)
                }
                )
            }
            )
        }
        navigateToSelectConversationsForSharingOrScheduleNavigationOnLaunch(e) {
            Y.default.isUIDisplayed() ? this.navigateToShareWithPanel(e, void 0) : (I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToSelectConversationsForSharingOrScheduleNavigationOnLaunch causeId: " + e.causeId),
            N.default.skipMobileHub(e.causeId),
            Y.default.performAfterUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const t = new R.ShareWithPanelNavigationContext(e);
                    F.default.setNewStartingNavigationContext(()=>t, m.MainRootViewId)
                } else
                    this.navigateToShareWithPanel(e, void 0)
            }
            ))
        }
        navigateToConversationFromSearch(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToConversationFromSearch, convId = " + J.mriOrId(e.convId) + " causeId: " + t),
            this.navigateToConversation({
                convId: e.convId,
                scrollToTimestamp: e.scrollToTimestamp,
                focusedMessageCuid: e.focusedMessageCuid,
                causeId: t,
                shouldResetNavStack: !1,
                shouldFlattenNavOnInteraction: !0,
                origin: e.origin || T.NavigationConversationOrigin.Search,
                isNewConversation: e.isNewConversation,
                forceRefreshFocus: e.forceRefreshFocus
            })
        }
        navigateToConversationFromDiscoverPeople(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToConversationFromDiscoverPeople convId = " + J.mriOrId(e.convId) + " causeId: " + t),
            this.navigateToConversation({
                convId: e.convId,
                scrollToTimestamp: e.scrollToTimestamp,
                focusedMessageCuid: e.focusedMessageCuid,
                causeId: t,
                shouldResetNavStack: !1,
                shouldFlattenNavOnInteraction: !0,
                isFromPeopleRecommendations: !0,
                origin: e.origin || T.NavigationConversationOrigin.PeopleRecommendationsDiscoverPanel,
                isNewConversation: e.isNewConversation,
                forceRefreshFocus: e.forceRefreshFocus
            })
        }
        markScenarioStepCompleted(e, t) {
            const i = this._getScenarioByConversationId(e);
            !i || i.isResolved() || i.isStepMarked(t) || i.markStepCompleted(t)
        }
        finishScenario(e) {
            const t = this._getScenarioByConversationId(e);
            t && !t.isResolved() && t.finish()
        }
        navigateToPotentiallyRestrictedConversation(e) {
            L.isGuestUser() ? (H.default.setEligibleLeftNavViewModes(d.default.eligibleLeftNavViewModes(), this.getLeftNavigationContext(m.MainRootViewId)),
            this.navigateToConversation(e),
            this.reduceNavStack([R.JoiningGuestNavigatorId, R.MobileHubNavigationId, R.PromptPermissionsNavigatorId])) : this.navigateToConversation(e)
        }
        navigateToConversation(e) {
            this.navigateAfterUIStarted(()=>{
                e = o.extend(o.clone(this._defaultNavigateToConvParams), e);
                const t = B.default.isUsingStackNavigationContext()
                  , i = e.causeId;
                I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToConversation, convId = " + J.mriOrId(e.convId) + " causeId: " + i),
                H.default.getValidConversationIdForNavigation(e.convId, i, e.origin).then(n=>{
                    if (I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToConversation, validConversationId = " + J.mriOrId(n) + " causeId: " + i),
                    n && !o.isUndefined(e.origin) && this._startNavigateToConvScenario(n, e.origin, e.browserOrigin),
                    !n)
                        return void (t || B.default.isUsingSplitViewNoSubscription() || this.navigateToCompositeGroup(i, m.MainRootViewId, (e,t)=>{
                            const n = [];
                            n.push(this.clearMainStageContext(e, t, void 0));
                            const o = this.getLeftNavigationContext(m.MainRootViewId);
                            return o && n.push(H.default.setLeftNavViewMode(o, H.default.defaultLeftNavViewMode(R.MainStageNavViewMode.None, void 0), i)),
                            n.push(this.clearRightSidebarContext(e, t, m.MainRootViewId)),
                            n.push(this.setMainAreaFullScreen(!1, m.MainRootViewId)),
                            n
                        }
                        ));
                    this._sendConversationNavigationTelemetry(e, n),
                    h.default.prioritizeConversation(n),
                    this.fetchMemberConsumptionHorizon(n);
                    const s = this._getConversationNavigationContext(e, n);
                    $.default.deactivateSelectMessagesMode();
                    const r = f.default.getConversation(n);
                    if (r && r.isArchived() && y.default.setConversationsListMode(y.ConversationsListMode.ArchivedConversations),
                    y.default.setLastVisitedConversationId(n),
                    t)
                        F.default.navigateToView(this._getMobileContentPanelContext(e, s), i);
                    else {
                        if (y.default.getConversationsListMode() === y.ConversationsListMode.ArchivedConversations) {
                            const t = r && r.isArchived();
                            (!t || t && e.origin !== T.NavigationConversationOrigin.TabSwitcher && e.origin !== T.NavigationConversationOrigin.Search && e.origin !== T.NavigationConversationOrigin.ArchivedConversations) && y.default.setConversationsListMode(y.ConversationsListMode.AllConversations)
                        }
                        const t = B.default.isUsingSplitViewNoSubscription()
                          , a = t ? C.default.rootViewIdForConversationMri(n) : m.MainRootViewId;
                        this.navigateToCompositeGroup(i, a, (i,r)=>{
                            const l = []
                              , c = n ? R.MainStageNavViewMode.DesktopContentPanel : R.MainStageNavViewMode.None;
                            if (n ? l.push(this.navigateToMainStageContext(s, !!e.popToRoot, i, r, a)) : l.push(this.clearMainStageContext(i, r, {
                                rootViewId: a
                            })),
                            !t) {
                                let t;
                                if (X.default.isMobileScreenSize(H.default.rootViewIdForComponentContext(void 0)))
                                    b.default.collapseDesktopStackNavContextNoSubscription() && F.default.isSplitNavStackCollapsed(ee.StackNavigatorId.DesktopContent) && F.default.isLeftPanelShowing(m.MainRootViewId) && !F.default.isCallChatShowing(m.MainRootViewId) || (t = H.default.defaultLeftNavViewMode(c, s));
                                else
                                    switch (e.origin) {
                                    case T.NavigationConversationOrigin.Search:
                                    case T.NavigationConversationOrigin.AlertsPanel:
                                        break;
                                    default:
                                        t = H.default.defaultLeftNavViewMode(c, s)
                                    }
                                const i = this.getLeftNavigationContext(m.MainRootViewId);
                                if (i) {
                                    o.isUndefined(t) || l.push(H.default.setLeftNavViewMode(i, t, r)),
                                    i.getConversationsListContext().state.selectedConversationId = n
                                }
                            }
                            return l.push(this.clearRightSidebarContext(i, r, a)),
                            l.push(this.clearModalContext(i, r, a)),
                            l.push(this.setMainAreaFullScreen(!1, a)),
                            l
                        }
                        )
                    }
                    e.inviteLinkScenario && !e.inviteLinkScenario.isResolved() && (e.inviteLinkScenario.markStepCompleted("NavigateToConversation"),
                    e.inviteLinkScenario.finish())
                }
                )
            }
            )
        }
        navigateToMessageFromSearchMessagePanel(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToMessageFromSearchMessagePanel convId = " + J.mriOrId(t) + " causeId: " + n);
            const o = H.default.rootViewIdForComponentContext(i)
              , s = F.default.getActiveConversationContext(o);
            s && (s.state.scrollToTimestamp = e,
            this.navigateToMainStageContext(s, !0, !1, n, o))
        }
        navigateToMessage(e, t, i) {
            this.navigateAfterUIStarted(()=>{
                const n = t;
                n.convId = e.conversationId,
                n.scrollToTimestamp = e.createdTime,
                n.focusedMessageCuid = e.cuid;
                const s = H.default.rootViewIdForComponentContext(i);
                o.isUndefined(n.forceRefreshFocus) && F.default.getActiveConversationId(s) === e.conversationId && (n.forceRefreshFocus = !0),
                this.navigateToConversation(n)
            }
            )
        }
        navigateCallComplete(e, t, i, n, s, r=!1) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateCallComplete causeId: " + s),
            B.default.isUsingStackNavigationContext() ? (o.some(F.default.getCurrentNavigationStack(), e=>e instanceof R.CallNavigationContext) || I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateCallComplete, NO call found, causeId: " + s),
            i && this.setStackNavigationCompleteCallback(()=>{
                x.default.focusMessageComposer()
            }
            ),
            t ? this.navigateBack(s, n) : this.navigateToConversation({
                convId: e,
                shouldAutoFocusInput: i,
                causeId: s,
                isFromConversationBubble: r,
                origin: T.NavigationConversationOrigin.CallComplete
            })) : this.navigateToConversation({
                convId: e,
                causeId: s,
                isFromConversationBubble: r,
                origin: T.NavigationConversationOrigin.CallComplete
            })
        }
        setStackNavigationCompleteCallback(e) {
            this._stackNavigationCompleteCallback = e
        }
        navigateAfterDeleteConversation(e, t, i, n) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateAfterDeleteConversation, causeId: " + t);
            const o = B.default.isUsingStackNavigationContext()
              , s = {
                convId: n,
                causeId: t,
                shouldReplaceCurrentContext: !0,
                origin: T.NavigationConversationOrigin.TabSwitcher
            };
            if (o)
                return void (n ? this.navigateToConversation(s) : this.navigateToRecentsTab());
            this.closeDetailsPanel(t, i);
            const r = H.default.mainContentNavigatorIdForComponentContext(i)
              , a = F.default.getCurrentStackNavigationContext(r, !1);
            if (a instanceof R.RootCompositeSplitViewContext) {
                const i = a.getLeftNavigationContext();
                i && i.getConversationsListContext().state.selectedConversationId === e && (n ? this.navigateToConversation(s) : (y.default.setConversationsListMode(y.ConversationsListMode.AllConversations),
                this.navigateToWelcomeScreen(t)))
            }
        }
        openMainWindow(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.openMainWindow causeId: " + i),
            e && this.navigateToDesktopRecents(i),
            s.default.openMainView(t)
        }
        toggleRecentsInCall(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.toggleRecentsInCall show: " + e + " causeId: " + t);
            const n = {
                willToggle: !1,
                completeAction: o.noop
            };
            if (B.default.isUsingStackNavigationContext())
                return n;
            const s = i.rootViewId ? i.rootViewId : m.MainRootViewId;
            return B.default.isUsingSplitView() && i.rootViewType === m.RootViewType.SplitViewContent ? s !== m.MainRootViewId ? {
                willToggle: !1,
                completeAction: ()=>{
                    this.openMainWindow(!0, s, t)
                }
            } : n : F.default.isDesktopSplitNavStackCollapsedForRootViewId(s) ? (this.mainStageContextPopToRoot(!1, t, i),
            {
                willToggle: !1,
                completeAction: ()=>this.mainStageContextPopToRoot(!1, t, i)
            }) : {
                willToggle: !0,
                completeAction: ()=>{
                    this.navigateToCompositeGroup(t, s, (t,i)=>{
                        const n = []
                          , o = this.getLeftNavigationContext(m.MainRootViewId);
                        return o && (e ? n.push(H.default.setLeftNavViewMode(o, R.LeftNavViewMode.Recents, i)) : n.push(H.default.setLeftNavViewMode(o, R.LeftNavViewMode.None, i))),
                        n
                    }
                    )
                }
            }
        }
        openConversationInCall(e, t, i, n, o) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.openConversationInCall, causeId: " + e),
            this._openConversationInCallNext(e, t, i, n, o)
        }
        closeConversationInCall(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.closeConversationInCall, causeId: " + e),
            this._closeConversationInCallNext(e, t)
        }
        navigateToBotsList(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToBotsList, causeId: " + e.causeId),
            this.navigateAssertingUIStarted(()=>{
                const i = new R.BotsListNavigationContext({
                    filterBotsFunction: e.filterBotsFunction,
                    sortBotsByProperty: e.sortBotsByProperty,
                    botMarketplaceTitle: e.botMarketplaceTitle,
                    navigationDirection: ee.StackNavigationDirection.Present
                });
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(i, e.causeId) : this.navigateToModalContext(i, !1, e.causeId, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToBotDiscovery(e=ee.StackNavigationDirection.Present, t) {
            this._commonNavigateToModal(R.BotDiscoveryNavigationContext, t, "navigateToBotDiscovery", {}, (t,i)=>{
                i && (t.state.navigationDirection = e)
            }
            )
        }
        navigateToMobileArchivedConversationsPanel() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToMobileArchivedConversationsPanel, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const t = new R.ArchivedConversationsPanelNavigationContext({
                        navigationDirection: ee.StackNavigationDirection.Present
                    });
                    F.default.navigateToView(t, e)
                } else
                    ;
            }
            )
        }
        navigateToDesktopRecents(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToRecents, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() || (y.default.getConversationsListMode() !== y.ConversationsListMode.AllConversations && y.default.setConversationsListMode(y.ConversationsListMode.AllConversations),
                t ? this.navigateToConversation({
                    convId: t,
                    origin: i || T.NavigationConversationOrigin.Recents,
                    causeId: e
                }) : this.navigateToCompositeGroup(e, m.MainRootViewId, (e,t)=>{
                    const i = [];
                    i.push(this.clearModalContext(e, t, m.MainRootViewId));
                    const n = this.getLeftNavigationContext(m.MainRootViewId);
                    if (n) {
                        i.push(H.default.setLeftNavViewMode(n, R.LeftNavViewMode.Recents, t)),
                        n.getConversationsListContext().state.currentTab = R.HubTab.Recents
                    }
                    return i
                }
                ))
            }
            )
        }
        navigateToSearchFromPanel(e, t, i, n) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSearchFromPanel, causeId: " + e),
            B.default.isUsingStackNavigationContext() || i ? this.navigateToSearch({
                searchOrigin: n
            }, e) : this.navigateToSearchInModal({
                searchOrigin: n
            }, e, t)
        }
        navigateToSearch(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSearch, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                const i = new R.SearchNavigationContext(e);
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.SearchNavigationContext)
                        return;
                    z.searchWillOpen(),
                    F.default.navigateToView(i, t)
                } else
                    this.navigateToCompositeGroup(t, m.MainRootViewId, (e,t)=>{
                        const n = this.getLeftNavigationContext(m.MainRootViewId);
                        if (n) {
                            const e = n.getSearchContext();
                            n.state.viewMode !== R.LeftNavViewMode.Search && (n.state.searchViewModeContext = H.default.searchViewModeContext(n),
                            H.default.setLeftNavViewMode(n, R.LeftNavViewMode.Search, t)),
                            e.state = i.state
                        }
                        return z.searchWillOpen(),
                        [O.CompositeNavigationType.LeftSidebar]
                    }
                    )
            }
            )
        }
        navigateToQuickCallPanelInLeftNav(e) {
            const t = e.causeId;
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToQuickCallPanelInLeftNav, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() || this.navigateToCompositeGroup(t, m.MainRootViewId, (t,i)=>{
                    const n = this.getLeftNavigationContext(m.MainRootViewId);
                    if (n) {
                        const t = n.getCallsContext();
                        H.default.setLeftNavViewMode(n, R.LeftNavViewMode.Calls, i),
                        t.state = e,
                        n.getConversationsListContext().state.currentTab = R.HubTab.Calls
                    }
                    return [O.CompositeNavigationType.LeftSidebar]
                }
                )
            }
            )
        }
        navigateToContactsPanelInLeftNav(e) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToContactsPanelInLeftNav, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() || this.navigateToCompositeGroup(e, m.MainRootViewId, (e,t)=>{
                    const i = this.getLeftNavigationContext(m.MainRootViewId);
                    if (i) {
                        H.default.setLeftNavViewMode(i, R.LeftNavViewMode.Contacts, t),
                        i.getConversationsListContext().state.currentTab = R.HubTab.People
                    }
                    return [O.CompositeNavigationType.LeftSidebar]
                }
                )
            }
            )
        }
        navigateToNotificationsPanelInLeftNav(e) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToNotificationsPanelInLeftNav, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() || this.navigateToCompositeGroup(e, m.MainRootViewId, (e,t)=>{
                    const i = []
                      , n = this.getLeftNavigationContext(m.MainRootViewId);
                    if (n) {
                        i.push(H.default.setLeftNavViewMode(n, R.LeftNavViewMode.Notifications, t)),
                        n.getConversationsListContext().state.currentTab = R.HubTab.Notifications
                    }
                    return i.push(this.clearRightSidebarContext(e, t, m.MainRootViewId)),
                    i.push(this.setMainAreaFullScreen(!1, m.MainRootViewId)),
                    i
                }
                )
            }
            )
        }
        navigateToNotificationsInLeftNav() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToNotificationsInLeftNav, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() || this.navigateToCompositeGroup(e, m.MainRootViewId, (e,t)=>{
                    const i = this.getLeftNavigationContext(m.MainRootViewId);
                    if (i) {
                        H.default.setLeftNavViewMode(i, R.LeftNavViewMode.Notifications, t),
                        i.getConversationsListContext().state.currentTab = R.HubTab.Notifications
                    }
                    return [O.CompositeNavigationType.LeftSidebar]
                }
                )
            }
            )
        }
        navigateToSearchInModal(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSearchInModal, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext())
                    ;
                else {
                    z.searchWillOpen();
                    const n = new R.SearchNavigationContext(e);
                    this.navigateToModalContext(n, !1, t, H.default.rootViewIdForComponentContext(i))
                }
            }
            )
        }
        navigateToPesSearch(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToPesSearch, causeId: " + e.causeId),
            this.navigateAssertingUIStarted(()=>{
                const i = new R.PesSearchNavigationContext({
                    searchType: e.searchType,
                    conversationId: e.conversationId,
                    onMessageSent: e.onMessageSent,
                    onCloseSearch: e.onCloseSearch,
                    clearEditInChatsComposer: e.clearEditInChatsComposer
                });
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.PesSearchNavigationContext)
                        return;
                    i.state.navigationDirection = ee.StackNavigationDirection.Present,
                    F.default.navigateToView(i, e.causeId)
                } else
                    this.navigateToModalContext(i, !1, e.causeId, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        closeSearchPanel(e, t, i) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions.closeSearchPanel, causeId: " + e),
            B.default.isUsingStackNavigationContext())
                o.last(F.default.getCurrentNavigationStack())instanceof R.SearchNavigationContext && this.navigateBack(e, t);
            else {
                const t = this.getLeftNavigationContext(m.MainRootViewId);
                if (t && t.state.viewMode !== R.LeftNavViewMode.Search)
                    return;
                this.navigateToCompositeGroup(e, m.MainRootViewId, (e,t)=>{
                    const n = this.getLeftNavigationContext(m.MainRootViewId);
                    return n && (H.default.setLeftNavViewMode(n, n.state.searchViewModeContext || R.LeftNavViewMode.Recents, t),
                    n.state.searchViewModeContext = R.LeftNavViewMode.None,
                    n.state.isMessageSent = i),
                    [O.CompositeNavigationType.LeftSidebar]
                }
                )
            }
        }
        closeCallSearchPanel(e, t) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions.closeCallSearchPanel, causeId: " + e),
            B.default.isUsingStackNavigationContext())
                o.last(F.default.getCurrentNavigationStack())instanceof R.QuickCallNavigationContext && this.navigateBack(e, t);
            else {
                const t = this.getLeftNavigationContext(m.MainRootViewId);
                if (t && t.state.viewMode !== R.LeftNavViewMode.CallSearch)
                    return;
                this.navigateToCompositeGroup(e, m.MainRootViewId, (e,t)=>{
                    const i = this.getLeftNavigationContext(m.MainRootViewId);
                    return i && H.default.setLeftNavViewMode(i, R.LeftNavViewMode.Recents, t),
                    [O.CompositeNavigationType.LeftSidebar]
                }
                )
            }
        }
        navigateToAlertsHub() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToAlertsHub, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.AlertsHubNavigationContext)
                        return;
                    const t = new R.AlertsHubNavigationContext({
                        navigationDirection: ee.StackNavigationDirection.Present
                    });
                    F.default.navigateToView(t, e)
                }
            }
            )
        }
        navigateToMeControl(e, t, i=ee.StackNavigationDirection.Push) {
            this._fetchLatestUserInfoNow(),
            this._commonNavigateToModal(R.MeControlNavigationContext, e, "navigateToMeControl", {}, (e,t)=>{
                t && (e.state.navigationDirection = i)
            }
            , t)
        }
        navigateToMyProfile(e, t, i=ee.StackNavigationDirection.Push) {
            this._fetchLatestUserInfoNow();
            this._commonNavigateToModal(R.MySettingsNavigationContext, e, "navigateToMyProfile", {}, (e,n)=>{
                I.track(new j.ProfileOpened(T.ProfileType.My,t)),
                n && (e.state.navigationDirection = i)
            }
            )
        }
        navigateToSettingsGroup(e, t, i, n) {
            const s = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSettingsGroup, causeId: " + s),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const t = o.last(F.default.getCurrentNavigationStack());
                    if (t instanceof R.SettingsGroupNavigationContext && t.state.group === e)
                        return;
                    const r = new R.SettingsGroupNavigationContext({
                        group: e,
                        origin: n
                    });
                    i && (r.state.navigationDirection = i),
                    F.default.navigateToView(r, s)
                } else
                    this.navigateToRootDesktopSettingsGroup(e, t, s)
            }
            )
        }
        navigateToInviteLinkQRPanel(e, t, i, n) {
            this._commonNavigateToModal(R.InviteLinkQRPanelNavigationContext, n, "navigateToInviteLinkQRPanel", {
                inviteLink: e,
                displayName: i
            }, (e,t)=>{
                t && (e.state.navigationDirection = ee.StackNavigationDirection.Present)
            }
            )
        }
        navigateToLanguagePicker(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToLanguagePicker, causeId: " + i);
            const n = new R.LanguagePickerPanelNavigationContext({});
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(n, i) : this.navigateToModalContext(n, e, i, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToNewSettingsPanel(e, t, i) {
            this._commonNavigateToModal(R.NewSettingsPanelNavigationContext, t, "NewSettingsPanelNavigationContext", {}, (t,i)=>{
                i && (t.state.navigationDirection = e)
            }
            )
        }
        navigateToRootDesktopSettingsGroup(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToRootDesktopSettingsGroup, causeId: " + i),
            this.navigateAssertingUIStarted(()=>{
                if (!B.default.isUsingStackNavigationContext()) {
                    const n = new R.DesktopSettingsGroupNavigationContext({
                        group: e,
                        causeId: i
                    });
                    this.navigateToSettingsModalContext(n, !0, i, t)
                }
            }
            )
        }
        navigateToDesktopSettingsGroup(e, t, i, n) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToDesktopSettingsGroup, causeId: " + i),
            this.navigateAssertingUIStarted(()=>{
                if (!B.default.isUsingStackNavigationContext()) {
                    const o = new R.DesktopSettingsGroupNavigationContext({
                        group: e,
                        source: n
                    });
                    this.navigateToModalContext(o, !1, i, H.default.rootViewIdForComponentContext(t))
                }
            }
            )
        }
        navigateToManageUsersSettingsPanel(e) {
            this._commonNavigateToModal(R.ManageUsersSettingsPanelNavigationContext, e, "navigateToManageUsersSettingsPanel", {})
        }
        navigateToDesktopCortanaNotebook(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToDesktopCortanaNotebook, causeId: " + n),
            this.navigateAssertingUIStarted(()=>{
                if (!B.default.isUsingStackNavigationContext()) {
                    const o = new R.DesktopCortanaNotebookNavigationContext({
                        notebookUrl: e,
                        cortanaAccessToken: t
                    });
                    this.navigateToModalContext(o, !1, n, H.default.rootViewIdForComponentContext(i))
                }
            }
            )
        }
        navigateToPnvEnterNumber(e, t) {
            this._commonNavigateToModal(R.PnvEnterNumberContext, t, "navigateToPnvEnterNumber", {
                phoneNumber: e
            })
        }
        navigateToPnvEnterCode(e) {
            this._commonNavigateToModal(R.PnvEnterCodeContext, e, "navigateToPnvEnterCode", {})
        }
        navigateToPnvDebugTool() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToPnvEnterCode, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.PnvDebugToolContext)
                        return;
                    const t = new R.PnvDebugToolContext({});
                    F.default.navigateToView(t, e)
                }
            }
            )
        }
        navigateToAvatarPickerWithParams(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToAvatarPickerWithParams, causeId: " + i);
            const n = new (e.useCommonAvatarPicker ? R.ChooseAvatarCommonPickerContext : R.ChooseAvatarContext)({
                origin: e.origin,
                hideSkipButton: e.hideSkipButton,
                hideCloseButton: e.hideCloseButton,
                isFirstLogin: e.isFirstLogin,
                closeButtonIcon: e.closeButtonIcon,
                nextButtonIcon: e.nextButtonIcon,
                showCaptureViewFirst: e.showCaptureViewFirst
            },e.scenarioNavigator);
            if (B.default.isUsingStackNavigationContext()) {
                const e = o.last(F.default.getCurrentNavigationStack());
                if (e instanceof R.ChooseAvatarContext || e instanceof R.ChooseAvatarCommonPickerContext)
                    return;
                F.default.navigateToView(n, i)
            } else
                this.navigateToModalContext(n, !1, i, H.default.rootViewIdForComponentContext(t))
        }
        navigateToMediaViewerPanel(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToMediaViewerPanel, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const i = new R.MediaViewerPanelContext({
                        initialMedia: e.initialMedia,
                        controller: e.controller,
                        totalMedia: e.totalMedia,
                        onClose: e.onClose,
                        onLeftBoundSwipe: e.onLeftBoundSwipe,
                        onRightBoundSwipe: e.onRightBoundSwipe,
                        closeOnLastItemSwipe: e.closeOnLastItemSwipe,
                        mouseControlsSize: e.mouseControlsSize,
                        message: e.message,
                        cacheMode: e.cacheMode,
                        navigationDirection: ee.StackNavigationDirection.Present
                    });
                    F.default.navigateToView(i, t)
                }
            }
            )
        }
        navigateToConversationMediaViewer(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToConversationMediaViewer, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const n = o.last(F.default.getCurrentNavigationStack());
                    if (n instanceof R.ConversationMediaViewerPanelContext && n.state.conversationMri === e.conversationMri)
                        return void (i && i());
                    this.setStackNavigationCompleteCallback(i);
                    const s = new R.ConversationMediaViewerPanelContext(e);
                    F.default.navigateToView(s, t)
                }
            }
            )
        }
        closeConversationMediaViewer(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.closeConversationMediaViewer, causeId: " + e),
            B.default.isUsingStackNavigationContext() && o.last(F.default.getCurrentNavigationStack())instanceof R.ConversationMediaViewerPanelContext && this.navigateBack(e, t)
        }
        navigateToAbout() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToAbout, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const t = new R.AboutNavigationContext({});
                    F.default.navigateToView(t, e)
                }
            }
            )
        }
        navigateToThirdPartyNotices(e) {
            this._commonNavigateToModal(R.ThirdPartyNoticesNavigationContext, e, "navigateToThirdPartyNotices", {})
        }
        navigateToBalanceStatePanel(e, t, i, n) {
            this._commonNavigateToModal(R.GetBalanceStateNavigationContext, t, "navigateToBalanceStatePanel", {
                source: e,
                scrollTo: n
            }, (e,t)=>{
                t && i && this.setStackNavigationCompleteCallback(i)
            }
            )
        }
        navigateToPurchaseContinuationPanel(e, t, i) {
            this._commonNavigateToModal(R.PurchaseContinuationNavigationContext, i, "navigateToPurchaseContinuationPanel", {
                offerType: e,
                campaignRef: t
            })
        }
        navigateToSubscriptionsIntro(e) {
            this._commonNavigateToModal(R.SubscriptionIntroNavigationContext, e, "navigateToSubscriptionsIntro", {})
        }
        navigateToTelemetryPerformanceMonitor(e) {
            this._commonNavigateToModal(R.TelemetryPerformanceMonitorNavigationContext, e, "navigateToTelemetryPerformanceMonitor", {})
        }
        navigateToPayment3ds(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToPayment3ds, causeId: " + n),
            this.navigateAssertingUIStarted(()=>{
                const o = new R.Payments3dsNavigationContext({
                    order: e,
                    callback: t
                });
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(o, n) : this.navigateToModalContext(o, !1, n, H.default.rootViewIdForComponentContext(i))
            }
            )
        }
        navigateToGetProductWebFlow(e, t, i, n, o) {
            const s = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToGetProductWebFlow, causeId: " + s),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const n = new R.GetProductWebFlowNavigationContext({
                        webPurchase: e,
                        source: t,
                        title: i,
                        useDocumentTitle: !1
                    });
                    o && this.setStackNavigationCompleteCallback(o),
                    F.default.navigateToView(n, s)
                } else
                    e && Z.SsoWebFlowExternalBrowser.open(le.default.getGoLinkWithItem(e), t, n, {}, o)
            }
            )
        }
        navigateToSsoWebFlow(e, t, i, n, o=[], s=!1, r={}, a=!1) {
            const l = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSsoWebFlow, causeId: " + l),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const n = new R.SsoWebFlowNavigationContext({
                        goTarget: e,
                        source: t,
                        queryStringParams: r,
                        title: i,
                        useDocumentTitle: !1,
                        pathsRequiringHeaders: o,
                        disableSpinnerAfterGoLink: s,
                        enableWebViewBackNavigation: !1,
                        returnUrlParamKey: void 0,
                        returnUrlParamValue: void 0,
                        hideRightButton: a
                    });
                    F.default.navigateToView(n, l)
                } else
                    Z.SsoWebFlowExternalBrowser.open(e, t, n, r)
            }
            )
        }
        navigateToCallingSettingsPanel(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallingSettingsPanel, causeId: " + i),
            this.navigateAssertingUIStarted(()=>{
                const n = new R.CallingSettingsPanelNavigationContext({});
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.CallingSettingsPanelNavigationContext)
                        return;
                    F.default.navigateToView(n, i)
                } else
                    this.navigateToModalContext(n, e, i, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToCallingSettingsEntry(e, t, i, n, o, s, r, a) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallingSettingsEntry, causeId: " + r),
            this._navigateToCallingSettingsEntryDesktop(e, t, n, i, o, s, r, a)
        }
        navigateToCallerIDSettingsEntry(e, t, i, n) {
            const o = c.default.dangerouslyGetS4LCommerceFeatures().callingSettingsPanel.callerId
              , s = o.link ? oe.appendTrackingInfoToUrl(o.link, !0) : ""
              , r = o.goTarget || ""
              , a = M.getString("CallingSettingsPanel.CallerID");
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallerIDSettingsEntry, causeId: " + n),
            o.useExternalWebBrowser ? Z.SsoWebFlowExternalBrowser.openExternalBrowser(s, H.default.rootViewIdForComponentContext(i)).then(()=>{
                I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallerIDSettingsEntry, externalBrowser, causeId: " + n)
            }
            ).catch(()=>{
                I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallerIDSettingsEntry, failed to open externalBrowser, causeId: " + n)
            }
            ) : this.navigateToCallingSettingsEntry(s, e, r, a, t, i, n)
        }
        navigateToSkypeNumberPurchaseFlow(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, `NavigationActions.navigateToSkypeNumberWebFlow, causeId: ${n}.`),
            this.navigateAssertingUIStarted(()=>{
                if (t)
                    Z.SsoWebFlowExternalBrowser.open(e.goTarget, e.source, H.default.rootViewIdForComponentContext(i));
                else {
                    const t = new R.SkypeNumberWebFlowNavigationContext(e);
                    B.default.isUsingStackNavigationContext() ? F.default.navigateToView(t, n) : this.navigateToModalContext(t, !1, n, H.default.rootViewIdForComponentContext(i))
                }
            }
            )
        }
        navigateToSkypeNumberPanel(e=!1, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSkypeNumberPanel, causeId: ", i),
            this.navigateAssertingUIStarted(()=>{
                const n = new R.SkypeNumberPanelNavigationContext({});
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.CallingSettingsPanelNavigationContext)
                        return;
                    e && this.reduceNavStack([R.SkypeNumberPanel, R.SkypeNumberPanelPurchaseFlow], !1),
                    F.default.navigateToView(n, i)
                } else
                    this.navigateToModalContext(n, e, i, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToSkypeNumberNativePurchaseFlow(e=!1, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSkypeNumberNativePurchaseFlow, causeId: ", i),
            this.navigateAssertingUIStarted(()=>{
                const n = new R.SkypeNumberPanelPurchaseFlowNavigationContext({});
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.SkypeNumberPanelPurchaseFlowNavigationContext)
                        return;
                    F.default.navigateToView(n, i)
                } else
                    this.navigateToModalContext(n, e, i, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToDiagnosticTools(e) {
            this._commonNavigateToModal(R.DiagnosticToolsNavigationContext, e, "navigateToDiagnosticTools", {})
        }
        navigateToSendDiagnosticLogs(e) {
            this._commonNavigateToModal(R.SendDiagnosticLogsNavigationContext, e, "navigateToSendDiagnosticLogs", {})
        }
        navigateToBlockedUsersList(e) {
            this._commonNavigateToModal(R.BlockedUsersListNavigationContext, e, "navigateToBlockedUsersList", {})
        }
        navigateToBackgroundEffectsSettings(e) {
            this._commonNavigateToModal(R.BackgroundEffectsSettingsNavigationContext, e, "navigateToBackgroundEffectsSettings", {})
        }
        navigateToConnectedUsersList(e) {
            this._commonNavigateToModal(R.ConnectedUsersListNavigationContext, e, "navigateToConnectedUsersList", {})
        }
        navigateToProfilePicturePanel(e) {
            this._commonNavigateToModal(R.ProfilePicturePanelNavigationContext, e, "navigateToProfilePicturePanel", {})
        }
        navigateToManageSearchInfoPanel(e, t) {
            this._commonNavigateToModal(R.ManageSearchInfoPanelNavigationContext, t, "navigateToManageSearchInfoPanel", {
                origin: e
            }, ()=>{
                I.track(new K.ManageSearchOpenedEvent(e))
            }
            )
        }
        navigateToEffectsPrivacy(e) {
            this._commonNavigateToModal(R.EffectsPrivacyNavigationContext, e, "navigateToEffectsPrivacy", {})
        }
        navigateToFeatureFlags(e) {
            this._commonNavigateToModal(R.FeatureFlagListNavigationContext, e, "navigateToFeatureFlags", {})
        }
        navigateToSlimcoreFlags(e) {
            this._commonNavigateToModal(R.SlimcoreFlagListNavigationContext, e, "navigateToSlimcoreFlags", {})
        }
        navigateToRawPreferences(e) {
            this._commonNavigateToModal(R.RawPreferencesNavigationContext, e, "navigateToRawPreferences", {})
        }
        navigateToCustomReactionsPanel(e) {
            this._commonNavigateToModal(R.CustomReactionsPanelNavigationContext, e, "navigateToCustomReactionsPanel", {})
        }
        showDetailsPanelWithParams(e) {
            const t = e.causeId;
            I.log(T.LogTraceArea.Navigation, "NavigationActions.showDetailsPanelWithParams, causeId: " + t);
            const i = new R.DetailsNavigationContext({
                mri: e.mri,
                conversationId: e.conversationId,
                showConversationSettings: e.showConversationSettings,
                origin: e.origin,
                onBotAdded: e.onBotAdded
            });
            B.default.isUsingStackNavigationContext() ? (i.state.navigationDirection = ee.StackNavigationDirection.Present,
            F.default.navigateToView(i, t)) : this.navigateToModalContext(i, !1, t, H.default.rootViewIdForComponentContext(e.componentContext))
        }
        showChatSettingsPanel(e, t, i) {
            this._commonNavigateToModal(R.ChatConfigNavigationContext, i, "showChatSettingsPanel", {
                mri: e,
                conversationId: t
            }, (e,t)=>{
                t && (e.state.navigationDirection = ee.StackNavigationDirection.Push)
            }
            )
        }
        closeDetailsPanel(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.closeDetailsPanel, causeId: " + e),
            B.default.isUsingStackNavigationContext() ? o.last(F.default.getCurrentNavigationStack())instanceof R.DetailsNavigationContext && this.navigateBack(e, t) : this.closeGenericDesktopModal(e, t)
        }
        closeDetailsPanelForUser(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.closeDetailsPanelForUser, causeId: " + t);
            const n = (t,i)=>{
                const n = o.last(F.default.getCurrentNavigationStack(t));
                n instanceof R.DetailsNavigationContext && n.state.mri === e && i()
            }
            ;
            if (B.default.isUsingStackNavigationContext())
                n(ee.StackNavigatorId.Mobile, ()=>this.navigateBack(t, i));
            else {
                n(H.default.modalNavigatorIdForComponentContext(i), ()=>this.closeGenericDesktopModal(t, i))
            }
        }
        navigateToHub(e) {
            this.navigateAfterUIStarted(()=>{
                if (I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToHub causeId: " + e),
                B.default.isUsingStackNavigationContext()) {
                    let t = new R.MobileHubNavigationContext({
                        hubTab: R.HubTab.Recents
                    });
                    F.default.navigateToView(t, e)
                } else
                    this.navigateToDefaultConversation()
            }
            )
        }
        navigateAfterDecliningContactRequest(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateAfterDecliningContactRequest, causeId: " + e),
            B.default.isUsingStackNavigationContext() ? o.last(F.default.getCurrentNavigationStack())instanceof R.MobileContentPanelNavigationContext && this.navigateBack(e, t) : this.navigateToDefaultConversation()
        }
        navigateToSetConversationInfoPanel(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSetConversationInfoPanel, causeId: " + n),
            this.navigateAssertingUIStarted(()=>{
                const o = new R.CreateConversationNavigationContext({
                    navigationDirection: i
                },e);
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(o, n) : this.navigateToModalContext(o, !1, n, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        closeSetConversationInfoPanel(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: closeSetConversationInfoPanel,  causeId: " + e),
            B.default.isUsingStackNavigationContext() ? o.last(F.default.getCurrentNavigationStack())instanceof R.CreateConversationNavigationContext && this.navigateBack(e, t) : this.closeGenericDesktopModal(e, t)
        }
        navigateToSetConversationParticipantsPanel(e, t, i, n) {
            const s = !Y.default.isUIDisplayed()
              , r = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSetConversationParticipantsPanel performOnLaunch: " + s + " causeId: " + r);
            const a = s=>{
                const a = o.last(F.default.getCurrentNavigationStack());
                if (a instanceof R.ConversationParticipantsNavigationContext && a.state.isSuperComposer && t)
                    return;
                const l = new R.ConversationParticipantsNavigationContext({
                    isSuperComposer: t,
                    navigationDirection: n
                },e);
                B.default.isUsingStackNavigationContext() ? s ? F.default.setNewStartingNavigationContext(()=>l, m.MainRootViewId) : F.default.navigateToView(l, r) : this.navigateToModalContext(l, !1, r, H.default.rootViewIdForComponentContext(i))
            }
            ;
            s ? Y.default.performAfterUIStarted(()=>a(!0)) : this.navigateAssertingUIStarted(()=>a(!1))
        }
        closeSetConversationParticipantsPanel(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.closeSetConversationParticipantsPanel, causeId: " + e),
            B.default.isUsingStackNavigationContext() ? o.last(F.default.getCurrentNavigationStack())instanceof R.ConversationParticipantsNavigationContext && this.navigateBack(e, t) : this.closeGenericDesktopModal(e, t)
        }
        navigateToForcedUpgradeScreen() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToForcedUpgradeScreen, causeId: " + e),
            this.navigateAfterUIStarted(()=>{
                B.default.isUsingStackNavigationContext() || this.navigateToCompositeGroup(e, m.MainRootViewId, (e,t)=>{
                    const i = [];
                    i.push(this.setMainAreaFullScreen(!0, m.MainRootViewId));
                    const n = new R.ForcedUpgradeContext({});
                    return i.push(this.navigateToMainStageContext(n, !0, e, t, m.MainRootViewId)),
                    i
                }
                )
            }
            )
        }
        navigateToMediaPickerPanelWithParams(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToMediaPickerPanelWithParams, causeId: " + t),
            k.default.isUsingGogoNetworkNoSubscription() ? I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToMediaPickerPanelWithParams cancelled, gogo network detected, causeId: " + t) : this.navigateAssertingUIStarted(()=>{
                const i = new R.MediaPickerNavigationContext({
                    capturedContentHandler: e.capturedContentHandler,
                    conversationId: e.conversationId,
                    allowVideo: e.allowVideo,
                    allowMultiple: e.allowMultiple,
                    defaultToAlbums: e.defaultToAlbums,
                    disableMarkup: e.disableMarkup,
                    onSendFlowComplete: e.onSendFlowComplete,
                    onHandleEditMediaSelection: e.onHandleEditMediaSelection
                });
                B.default.isUsingStackNavigationContext() && F.default.navigateToView(i, t)
            }
            )
        }
        closeMediaPickerPanel(e, t) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions: closeMediaPickerPanel,  causeId: " + e),
            B.default.isUsingStackNavigationContext()) {
                const i = o.last(F.default.getCurrentNavigationStack());
                (i instanceof R.MediaPickerNavigationContext || i instanceof R.CaptureComboNavigationContext) && this.navigateBack(e, t)
            } else
                this.navigateToDefaultConversation()
        }
        navigateToCapturePreview(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCapturePreview, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                const i = new R.CapturePreviewNavigationContext(e);
                if (B.default.isUsingStackNavigationContext())
                    F.default.navigateToView(i, t);
                else {
                    const e = "DirectShare_Modal";
                    this.launchModalEvent.fire({
                        context: i,
                        rootViewId: m.MainRootViewId,
                        causeId: t,
                        modalId: e
                    })
                }
            }
            )
        }
        navigateToCaptureMultiPreview(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCaptureMultiPreview, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                const i = new R.CaptureMultiPreviewNavigationContext(e);
                if (B.default.isUsingStackNavigationContext())
                    F.default.navigateToView(i, t);
                else {
                    const e = "DirectShare_Modal";
                    this.launchModalEvent.fire({
                        context: i,
                        rootViewId: m.MainRootViewId,
                        causeId: t,
                        modalId: e
                    })
                }
            }
            )
        }
        navigateToShareContactsToConversationPanel(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToShareContactsToConversationPanel, causeId: " + e.causeId),
            this.navigateAssertingUIStarted(()=>{
                const i = new R.ShareContactsToConversationContext(e);
                B.default.isUsingStackNavigationContext() ? (i.state.navigationDirection = e.entryPoint === P.ShareContactOrigin.MessageComposer ? ee.StackNavigationDirection.Present : void 0,
                F.default.navigateToView(i, e.causeId)) : this.navigateToModalContext(i, !0, e.causeId, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToShareWithPanel(e, t, i=!1) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToShareWithPanel, causeId: " + e.causeId),
            this.navigateAssertingUIStarted(()=>{
                const n = new R.ShareWithPanelNavigationContext(e);
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.ShareWithPanelNavigationContext) {
                        if (!e.isExternalShare)
                            return;
                        this.navigateBack(e.causeId, t)
                    }
                    F.default.navigateToView(n, e.causeId)
                } else
                    this.navigateToModalContext(n, i, e.causeId, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToEngagementShareableContentPanel(e, t, i=!1) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToEngagementShareableContentPanel, causeId:", e.causeId),
            this.navigateAssertingUIStarted(()=>{
                const n = new R.EngagementSharePanelContext(e);
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(n, e.causeId) : this.navigateToModalContext(n, i, e.causeId, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToCaptivePortalQuestionnaire(e, t, i=!1) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCaptivePortalQuestionnaire, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                const n = new R.CaptivePortalQuestionnaireContext({});
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.CaptivePortalQuestionnaireContext)
                        return;
                    F.default.navigateToView(n, e)
                } else
                    this.navigateToModalContext(n, i, e, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        navigateToInAppBrowser(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToInAppBrowser, causeId: " + i),
            this.navigateAssertingUIStarted(()=>{
                if (!w.default.isIntegrationUrl(e.url) && !B.default.isUsingStackNavigationContext())
                    return void r.Linking.openUrl(se.default.normalizeUrlProtocol(e.url) || e.url);
                let n = new R.InAppBrowserNavigationContext({
                    origin: e.origin,
                    url: e.url,
                    integrationCorrelationId: e.openUrlOptions.integrationCorrelationId,
                    headers: e.openUrlOptions.headers,
                    injectedJavaScript: e.openUrlOptions.injectedJavaScript,
                    onNavigationStateChange: e.openUrlOptions.onNavigationStateChange,
                    onInAppWebBrowserClose: e.openUrlOptions.onInAppWebBrowserClose,
                    onShareComplete: e.openUrlOptions.onShareComplete,
                    onWebViewClose: e.openUrlOptions.onWebViewClose,
                    onMessage: e.openUrlOptions.onMessage,
                    headerTitle: e.openUrlOptions.browserTitle,
                    conversationId: e.openUrlOptions.conversationId,
                    messageId: e.openUrlOptions.messageId,
                    suggestionAttributes: e.openUrlOptions.suggestionAttributes,
                    hideBrowserActions: e.openUrlOptions.hideBrowserActions,
                    perfScenario: e.openUrlOptions.openIntegrationScenario
                });
                if (B.default.isUsingStackNavigationContext())
                    !e.openSecondaryBrowserIfNecessary && o.last(F.default.getCurrentNavigationStack())instanceof R.InAppBrowserNavigationContext || (n.state.navigationDirection = e.origin === T.BrowserOrigin.MoneySettings ? ee.StackNavigationDirection.Push : void 0,
                    F.default.navigateToView(n, i));
                else {
                    const o = H.default.rootViewIdForComponentContext(t)
                      , s = !!e.openUrlOptions.integrationCorrelationId;
                    this.navigateToCompositeGroup(i, o, (e,t)=>{
                        const i = [];
                        return i.push(this.clearModalContext(!0, t, o)),
                        i.push(this.navigateToRightSidebarContext(n, F.default.isInAppBrowserShowingNoSubscription(o) ? ee.StackNavigationType.PopToRoot : ee.StackNavigationType.Push, e, t, o, s && c.default.getS4LMessagingFeatures().enableDesktopComposerWithPopUpMenu)),
                        i
                    }
                    )
                }
            }
            )
        }
        closeInAppBrowser(e, t) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions: closeInAppBrowser,  causeId: " + e),
            B.default.isUsingStackNavigationContext()) {
                const i = o.last(F.default.getCurrentNavigationStack());
                i instanceof R.InAppBrowserNavigationContext && (i.state.onInAppWebBrowserClose && i.state.onInAppWebBrowserClose(),
                this.navigateBack(e, t))
            } else if (!this._maybePopToConversationInCall(e, t)) {
                const i = H.default.rootViewIdForComponentContext(t);
                this.navigateToCompositeGroup(e, i, (e,t)=>{
                    const n = [];
                    return n.push(this.setMainAreaFullScreen(!1, i)),
                    c.default.getS4LMessagingFeatures().enableDesktopComposerWithPopUpMenu ? this.closeGenericDesktopModal(t, void 0) : n.push(this.clearRightSidebarContext(e, t, i)),
                    n
                }
                )
            }
        }
        toggleGallery(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.toggleGallery, causeId: " + i);
            const n = H.default.rootViewIdForComponentContext(t)
              , o = F.default.isGalleryShowing(n);
            B.default.isUsingStackNavigationContext() || !o ? this.navigateToGallery(e, R.GalleryViewMode.All, t) : this.closeGalleryPanel(i, t)
        }
        navigateToGallery(e, t, i, n, s, r) {
            const a = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToGallery, causeId: " + a),
            this.navigateAssertingUIStarted(()=>{
                const l = new R.GalleryNavigationContext({
                    conversationId: e,
                    viewMode: t,
                    callId: n,
                    parentConversationId: s,
                    onClose: r,
                    navigationDirection: ee.StackNavigationDirection.Present
                })
                  , c = H.default.rootViewIdForComponentContext(i);
                if (B.default.isUsingStackNavigationContext())
                    l.state.viewMode === R.GalleryViewMode.All && (l.state.viewMode = R.GalleryViewMode.Media),
                    F.default.navigateToView(l, a);
                else if (F.default.shouldDisplayRightNavigationNoSubscription(c)) {
                    const t = H.default.rootViewIdForComponentContext(i)
                      , n = !!i && i.isPresentedInDesktopRightNav
                      , s = ()=>{
                        this.navigateToCompositeGroup(a, t, (e,i)=>{
                            const o = [];
                            return o.push(this.clearModalContext(e, i, t)),
                            o.push(this.navigateToRightSidebarContext(l, n ? ee.StackNavigationType.Push : ee.StackNavigationType.PopToRoot, e, i, t)),
                            o
                        }
                        )
                    }
                      , r = H.default.mainContentNavigatorIdForComponentContext(i)
                      , c = F.default.getCurrentStackNavigationContext(r, !1).getNavStack()
                      , d = o.last(c);
                    if (d instanceof R.DesktopContentPanelNavigationContext) {
                        const t = d.getConversationContext();
                        t && t.state.conversationId !== e && this.navigateToConversation({
                            convId: e,
                            origin: T.NavigationConversationOrigin.Gallery,
                            causeId: a
                        })
                    }
                    s()
                }
            }
            )
        }
        setDesktopGalleryViewMode(e, t, i, n=!0) {
            B.default.isUsingStackNavigationContext() || this.navigateToGallery(e, t, i)
        }
        closeGalleryPanel(e, t) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions: closeGalleryPanel,  causeId: " + e),
            B.default.isUsingStackNavigationContext())
                o.last(F.default.getCurrentNavigationStack())instanceof R.GalleryNavigationContext && this.navigateBack(e, t);
            else if (!this._maybePopToConversationInCall(e, t)) {
                const i = H.default.rootViewIdForComponentContext(t);
                this.navigateToCompositeGroup(e, i, (e,t)=>[this.clearRightSidebarContext(e, t, i)])
            }
        }
        maybeNavigateToFindPanel(e, t, i, n, o) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.maybeNavigateToFindPanel, causeId: " + n);
            const s = H.default.rootViewIdForComponentContext(i);
            F.default.isInAppBrowserShowingNoSubscription(s) || this.navigateToFindPanel(e, t, i, n, o)
        }
        navigateToFindPanel(e, t, i, n, o) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToFindPanel, causeId: " + n),
            this.navigateAssertingUIStarted(()=>{
                let s = new R.FindPanelNavigationContext({
                    conversationId: e,
                    overflowActionConfig: t,
                    onFindComplete: o
                });
                const r = H.default.rootViewIdForComponentContext(i);
                if (B.default.isUsingStackNavigationContext())
                    F.default.navigateToView(s, n);
                else if (F.default.shouldDisplayRightNavigationNoSubscription(r)) {
                    const e = !!i && i.isPresentedInDesktopRightNav;
                    this.navigateToCompositeGroup(n, r, (t,i)=>[this.navigateToRightSidebarContext(s, e ? ee.StackNavigationType.Push : ee.StackNavigationType.PopToRoot, t, i, r)])
                }
            }
            )
        }
        closeFindPanel(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: closeFindPanel,  causeId: " + e),
            B.default.isUsingStackNavigationContext() ? o.last(F.default.getCurrentNavigationStack())instanceof R.FindPanelNavigationContext && this.navigateBack(e, t) : this._maybePopToConversationInCall(e, t) || this.closeRightPanel(e, H.default.rootViewIdForComponentContext(t))
        }
        closeRightPanel(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: closeRightPanel, causeId: " + e),
            B.default.isUsingStackNavigationContext() || this.navigateToCompositeGroup(e, t, (e,i)=>[this.clearRightSidebarContext(e, i, t)])
        }
        maybeCloseRightPanel(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: maybeCloseRightPanel, causeId: " + e),
            this._maybePopToConversationInCall(e, t) || this.closeRightPanel(e, H.default.rootViewIdForComponentContext(t))
        }
        navigateToDesktopCloseAccount(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToDesktopCloseAccount, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                if (!B.default.isUsingStackNavigationContext()) {
                    const i = new R.DesktopCloseAccountNavigationContext({});
                    this.navigateToModalContext(i, !1, t, H.default.rootViewIdForComponentContext(e))
                }
            }
            )
        }
        navigateToDesktopSendMoney(e, t, i, n) {
            const o = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToDesktopSendMoney, causeId: " + o),
            this.navigateAssertingUIStarted(()=>{
                if (!B.default.isUsingStackNavigationContext()) {
                    const s = new R.SendMoneyPanelNavigationContext({
                        viewId: e,
                        entry: t
                    });
                    this.navigateToModalContext(s, i, o, H.default.rootViewIdForComponentContext(n))
                }
            }
            )
        }
        navigateToDesktopMsaPhoneAccrual(e, t, i, n) {
            const o = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToDesktopMsaPhoneAccrual,  causeId: " + o),
            this.navigateAssertingUIStarted(()=>{
                if (!B.default.isUsingStackNavigationContext()) {
                    const s = new R.DesktopMsaPhoneAccrualNavigationContext({
                        phoneNumber: e,
                        email: i,
                        isEmailAccrual: n
                    });
                    this.navigateToModalContext(s, !1, o, H.default.rootViewIdForComponentContext(t))
                }
            }
            )
        }
        navigateToSendMoneyPanel(e, t, i, n, o) {
            const s = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSendMoneyPanel, causeId: " + s);
            const r = new R.SendMoneyPanelNavigationContext({
                viewId: e,
                conversationId: i,
                orderId: n,
                entry: t
            })
              , a = H.default.rootViewIdForComponentContext(o);
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(r, s) : F.default.shouldDisplayRightNavigationNoSubscription(a) && this.navigateToCompositeGroup(s, a, (e,t)=>[this.navigateToRightSidebarContext(r, ee.StackNavigationType.Push, e, t, a, c.default.getS4LMessagingFeatures().enableDesktopComposerWithPopUpMenu)])
            }
            )
        }
        closeMoneyPanel(e, t) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions: closeMoneyPanel,  causeId: " + e),
            B.default.isUsingStackNavigationContext())
                o.last(F.default.getCurrentNavigationStack())instanceof R.SendMoneyPanelNavigationContext && this.navigateBack(e, t);
            else if (!this._maybePopToConversationInCall(e, t)) {
                const i = H.default.rootViewIdForComponentContext(t);
                this.navigateToCompositeGroup(e, i, (e,t)=>[this.clearRightSidebarContext(e, t, i)])
            }
        }
        openCallRoster(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.openCallRoster, causeId: " + n);
            const s = H.default.rootViewIdForComponentContext(i)
              , r = new R.CallRosterNavigationContext({
                conversationId: e,
                callId: t,
                navigationDirection: ee.StackNavigationDirection.Present
            });
            if (B.default.isUsingStackNavigationContext()) {
                if (o.last(F.default.getCurrentNavigationStack())instanceof R.CallRosterNavigationContext)
                    return;
                F.default.navigateToView(r, n)
            } else
                F.default.getCompositeCallVisibleNoSubscription(s) && this.navigateToModalContext(r, !1, n, H.default.rootViewIdForComponentContext(i))
        }
        openAddToCall(e, t, i, n, s) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.openAddToCall  callId: " + t + " causeId: " + s + " origin: " + i);
            const r = H.default.rootViewIdForComponentContext(n);
            if (B.default.isUsingStackNavigationContext()) {
                if (o.last(F.default.getCurrentNavigationStack())instanceof R.QuickCallNavigationContext)
                    return;
                const n = new R.QuickCallNavigationContext({
                    conversationId: e,
                    callId: t,
                    newGroup: !0,
                    navigationDirection: i === T.NavigationAddToCallOrigin.RosterView ? ee.StackNavigationDirection.Push : ee.StackNavigationDirection.Present
                });
                F.default.navigateToView(n, s)
            } else if (F.default.getCompositeCallVisibleNoSubscription(r)) {
                const o = new R.AddToCallNavigationContext({
                    conversationId: e,
                    callId: t,
                    origin: i,
                    newGroup: !0
                });
                this.navigateToModalContext(o, !1, s, H.default.rootViewIdForComponentContext(n))
            }
        }
        updateHubNavigationContext(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions: updateHubNavigationContext,  causeId: " + i),
            B.default.isUsingStackNavigationContext() ? F.default.updateMobileHubContextForStackNavContext(e, t) : this.navigateToCompositeGroup(i, m.MainRootViewId, (t,i)=>{
                const n = this.getLeftNavigationContext(m.MainRootViewId);
                if (n) {
                    n.getConversationsListContext().state.currentTab = e
                }
                return [O.CompositeNavigationType.LeftSidebar]
            }
            )
        }
        navigateToRecentsTab() {
            this._navigateToHubTab(R.HubTab.Recents),
            te.default.willNavigateToRecents()
        }
        navigateToCallsTab() {
            this._navigateToHubTab(R.HubTab.Calls)
        }
        navigateToPeopleTab() {
            this._navigateToHubTab(R.HubTab.People)
        }
        _navigateToHubTab(e) {
            this.navigateAfterUIStarted(()=>F.default.navigateToHubTab(e))
        }
        navigateToSyncAddressBook(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSyncAddressBook, causeId: " + n);
            const o = new R.SyncAddressBookContext(e,t);
            B.default.isUsingStackNavigationContext() ? F.default.navigateToView(o, n) : this.navigateToModalContext(o, !1, n, H.default.rootViewIdForComponentContext(i))
        }
        navigateToPeopleYouMayKnowNotice(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToPeopleYouMayKnowNotice, causeId: " + n);
            const o = new R.PeopleYouMayKnowNoticeContext(e,t);
            B.default.isUsingStackNavigationContext() ? F.default.navigateToView(o, n) : this.navigateToModalContext(o, !1, n, H.default.rootViewIdForComponentContext(i))
        }
        navigateToUserProfile(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToUserProfile, causeId: " + n);
            const o = new R.UserProfileContext(e,t);
            if (B.default.isUsingStackNavigationContext())
                F.default.navigateToView(o, n);
            else {
                const e = H.default.rootViewIdForComponentContext(i);
                this.navigateToModalContext(o, !1, n, e)
            }
        }
        navigateToColorTheme(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToColorTheme, causeId: " + n);
            const o = new R.ThemeContext(e,t);
            if (B.default.isUsingStackNavigationContext())
                F.default.navigateToView(o, n);
            else {
                const e = H.default.rootViewIdForComponentContext(i);
                this.navigateToModalContext(o, !1, n, e)
            }
        }
        navigateToPromptPermission(e, t, i, n=!1) {
            const o = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToPromptPermission, causeId: " + o);
            const s = !!(t && t.context && t.context.isFirstLogin)
              , r = new R.PromptPermissionContext({
                origin: e,
                hideCloseButton: n,
                isFirstLogin: s
            },t);
            B.default.isUsingStackNavigationContext() ? F.default.navigateToView(r, o) : (H.default.setEligibleLeftNavViewModes(d.default.eligibleLeftNavViewModes(), this.getLeftNavigationContext(m.MainRootViewId)),
            this.navigateToModalContext(r, !1, o, H.default.rootViewIdForComponentContext(i)))
        }
        navigateToLocationPicker(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToLocationPicker, causeId: " + i),
            this.navigateAssertingUIStarted(()=>{
                const n = {
                    conversationId: e,
                    navigationDirection: ee.StackNavigationDirection.Present
                }
                  , s = new R.LocationPickerContext(n)
                  , r = H.default.rootViewIdForComponentContext(t);
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.LocationPickerContext)
                        return;
                    F.default.navigateToView(s, i)
                } else if (!ie.useTabletUINoSubscription() && F.default.shouldDisplayRightNavigationNoSubscription(r)) {
                    const e = !!t && t.isPresentedInDesktopRightNav;
                    c.default.getS4LMessagingFeatures().enableDesktopComposerWithPopUpMenu ? this.navigateToModalContext(s, !e, i, r) : this.navigateToCompositeGroup(i, r, (t,i)=>[this.navigateToRightSidebarContext(s, e ? ee.StackNavigationType.Push : ee.StackNavigationType.PopToRoot, t, i, r)])
                } else
                    this.launchModalEvent.fire({
                        context: s,
                        rootViewId: H.default.rootViewIdForComponentContext(t),
                        causeId: i
                    })
            }
            )
        }
        navigateToLocationViewer(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToLocationViewer, causeId: " + i),
            this.navigateAssertingUIStarted(()=>{
                const n = Object.assign(Object.assign({}, e), {
                    navigationDirection: ee.StackNavigationDirection.Present
                })
                  , s = new R.LocationViewerContext(n);
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.LocationViewerContext)
                        return;
                    F.default.navigateToView(s, i)
                } else
                    this.launchModalEvent.fire({
                        context: s,
                        rootViewId: H.default.rootViewIdForComponentContext(t),
                        causeId: i
                    })
            }
            )
        }
        navigateToDocumentViewer(e, t, i, n) {
            const o = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToDocumentViewer, causeId: " + o),
            this.navigateAssertingUIStarted(()=>{
                const s = {
                    message: e,
                    fileUri: t,
                    fileName: i,
                    navigationDirection: ee.StackNavigationDirection.Present
                }
                  , r = new R.DocumentViewerContext(s);
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(r, o) : this.launchModalEvent.fire({
                    context: r,
                    rootViewId: H.default.rootViewIdForComponentContext(n),
                    causeId: o
                })
            }
            )
        }
        navigateToDesktopCaptureComboModal(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToDesktopCaptureComboModal, causeId: " + n),
            c.default.isDesktopVIMEnabled() && !B.default.isUsingStackNavigationContext() ? this.navigateAssertingUIStarted(()=>{
                this.launchModalEvent.fire({
                    context: new R.DesktopCaptureComboViewNavigationContext({
                        conversationId: e,
                        onShareComplete: t
                    }),
                    rootViewId: H.default.rootViewIdForComponentContext(i),
                    causeId: n
                })
            }
            ) : I.log(T.LogTraceArea.Navigation, "Video message is intended for desktop only")
        }
        navigateToQuickCallPanel(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToQuickCallPanel, causeId: " + e),
            this.navigateToQuickCallPanelWithParams({
                causeId: e
            }, t)
        }
        navigateToQuickCallPanelWithParams(e, t) {
            this._commonNavigateToModal(R.QuickCallNavigationContext, t, "navigateToQuickCallWithParams", e)
        }
        navigateToQuickCallSearchPanelWithParams(e, t) {
            const i = e.causeId;
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToQuickCallSearchPanelWithParams, causeId: " + i),
            e.searchOnly = !0,
            e.causeId = i,
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() ? this.navigateToQuickCallPanelWithParams(e, t) : this.navigateToCompositeGroup(i, m.MainRootViewId, (t,i)=>{
                    const n = this.getLeftNavigationContext(m.MainRootViewId);
                    if (n) {
                        const t = n.getCallSearchContext();
                        H.default.setLeftNavViewMode(n, R.LeftNavViewMode.CallSearch, i),
                        t.state = e
                    }
                    return [O.CompositeNavigationType.LeftSidebar]
                }
                )
            }
            )
        }
        navigateToPSTNDialerWithParams(e, t, i=this.navigationCompleteCallbackPSTNDialer) {
            const n = e.causeId;
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToPSTNDialerWithParams, causeId: " + n),
            I.track(new q.NavigateToDialpad(e.navigationSource,!!e.prefilledNumber));
            const o = new R.PSTNDialerNavigationContext({
                callId: e.callId,
                prefilledNumber: e.prefilledNumber,
                conversationId: e.conversationId,
                navigationSource: e.navigationSource
            });
            te.default.willNavigateToDialpad(),
            B.default.isUsingStackNavigationContext() ? (i && this.setStackNavigationCompleteCallback(i),
            o.state.navigationDirection = ee.StackNavigationDirection.Present,
            F.default.navigateToView(o, n)) : (this.reduceModalNavStack([R.PSTNDialerPanelId], m.MainRootViewId, !1),
            this.navigateToModalContext(o, !1, n, H.default.rootViewIdForComponentContext(t)))
        }
        navigateToCountrySelector(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCountrySelector, causeId: " + i);
            const n = new R.PSTNCountrySelectorNavigationContext({
                onCountrySelected: t
            });
            if (B.default.isUsingStackNavigationContext()) {
                if (o.last(F.default.getCurrentNavigationStack())instanceof R.PSTNCountrySelectorNavigationContext)
                    return;
                F.default.navigateToView(n, i)
            } else
                this.navigateToModalContext(n, !1, i, H.default.rootViewIdForComponentContext(e))
        }
        navigateToCountrySelectorWithFilter(e, t, i, n) {
            const s = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCountrySelector, causeId: " + s);
            const r = new R.PSTNCountrySelectorNavigationContext({
                onCountrySelected: t,
                countriesFiltered: i,
                hideRecentCountries: n
            });
            if (B.default.isUsingStackNavigationContext()) {
                if (o.last(F.default.getCurrentNavigationStack())instanceof R.PSTNCountrySelectorNavigationContext)
                    return;
                F.default.navigateToView(r, s)
            } else
                this.navigateToModalContext(r, !1, s, H.default.rootViewIdForComponentContext(e))
        }
        navigateToCountryAreaSelector(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCountryAreaSelector, causeId: " + i);
            const n = new R.SkypeNumberCountryAreaSelectorNavigationContext({
                onCountryAreaSelected: t
            });
            if (B.default.isUsingStackNavigationContext()) {
                if (o.last(F.default.getCurrentNavigationStack())instanceof R.SkypeNumberCountryAreaSelectorNavigationContext)
                    return;
                F.default.navigateToView(n, i)
            } else
                this.navigateToModalContext(n, !1, i, H.default.rootViewIdForComponentContext(e))
        }
        navigateToPrefixSelector(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToPrefixSelector, causeId: " + i);
            const n = new R.SkypeNumberPrefixSelectorNavigationContext({
                onPrefixSelected: t
            });
            if (B.default.isUsingStackNavigationContext()) {
                if (o.last(F.default.getCurrentNavigationStack())instanceof R.SkypeNumberPrefixSelectorNavigationContext)
                    return;
                F.default.navigateToView(n, i)
            } else
                this.navigateToModalContext(n, !1, i, H.default.rootViewIdForComponentContext(e))
        }
        closeGenericDesktopModal(e, t) {
            const i = H.default.modalNavigatorIdForComponentContext(t);
            I.log(T.LogTraceArea.Navigation, "NavigationActions: closeGenericDesktopModal navigatorId: " + n.pii.Omit(i) + " causeId: " + e),
            this._closeGenericDesktopModal(e, i)
        }
        navigateToContactsPanel(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToContactsPanel, causeId: " + n),
            this.navigateAssertingUIStarted(()=>{
                const o = new R.ContactsPanelV2NavigationContext({
                    currentTab: e
                });
                B.default.isUsingStackNavigationContext() ? (o.state.navigationDirection = ee.StackNavigationDirection.Present,
                F.default.navigateToView(o, n),
                t && this.setStackNavigationCompleteCallback(()=>{
                    this.flattenNavStack()
                }
                )) : this.navigateToModalContext(o, !1, n, H.default.rootViewIdForComponentContext(i))
            }
            )
        }
        navigateToAddContactPanel(e, t, i) {
            this._commonNavigateToModal(R.AddContactPanelNavigationContext, i, "navigateToAddContactPanel", {
                origin: e
            }, (e,i)=>{
                i && (e.state.navigationDirection = t)
            }
            )
        }
        navigateToAddPhoneNumberPanel(e, t, i, n, o, s, r) {
            l.default.clearSavedContactDetails(),
            this._commonNavigateToModal(R.AddPhoneNumberPanelNavigationContext, t, "navigateToAddPhoneNumberPanel", {
                origin: e,
                contactMriToEdit: i,
                phoneNumbers: n,
                contactName: o,
                onSave: s,
                onCancel: r
            })
        }
        navigateToDiscoverPeoplePanel(e, t, i) {
            this._commonNavigateToModal(R.DiscoverPeoplePanelNavigationContext, i, "navigateToDiscoverPeoplePanel", {
                origin: t
            }, (t,i)=>{
                i && (t.state.navigationDirection = e)
            }
            )
        }
        navigateToPeopleYouMayKnowLearnMorePanel(e, t) {
            this._commonNavigateToModal(R.AboutPeopleYouMayKnowNavigationContext, t, "navigateToAboutPeopleYouMayKnowPanel", {}, (t,i)=>{
                i && (t.state.navigationDirection = e)
            }
            )
        }
        navigateToLoadingPanel(e, t, i) {
            this._commonNavigateToModal(R.LoadingPanelNavigationContext, i, "navigateToLoadingPanel", {
                message: e
            })
        }
        navigateToInviteShare(e, t, i, n) {
            this._commonNavigateToModal(R.InviteShareNavigationContext, n, "navigateToInviteShare", {
                mri: e,
                displayName: t || "",
                origin: i
            })
        }
        navigateToGroupShare(e, t, i, n) {
            this._commonNavigateToModal(R.ConversationShareNavigationContext, n, "navigateToGroupShare", {
                mri: e,
                displayName: t || "",
                origin: i
            })
        }
        navigateToGuestUpsell() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToGuestUpsell, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                const t = new R.GuestUpsellNavigationContext({});
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.GuestUpsellNavigationContext)
                        return;
                    F.default.navigateToView(t, e)
                } else
                    this.navigateToModalContext(t, !1, e, m.MainRootViewId)
            }
            )
        }
        navigateToJoiningGuestScreen() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToGuestFlow, causeId: " + e),
            H.default.setEligibleLeftNavViewModes(d.default.eligibleLeftNavViewModes(), this.getLeftNavigationContext(m.MainRootViewId)),
            this.navigateAfterUIStarted(()=>{
                const t = new R.JoiningGuestScreenContext({});
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(t, e) : this.navigateToMainStageContext(t, !0, !1, e, m.MainRootViewId)
            }
            )
        }
        navigateToCallQualityFeedbackPanel(e) {
            const t = ae.newCauseId();
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallQualityFeedbackPanel, causeId: " + t),
            Y.default.isUIDisplayed()) {
                const i = B.default.isUsingSplitViewNoSubscription() ? C.default.rootViewIdForConversationMri(e.callInfo.conversationMri) : m.MainRootViewId;
                this.launchModalEvent.fire({
                    context: new R.CQFNavigationContext(Object.assign({}, e)),
                    rootViewId: i,
                    causeId: t
                })
            } else
                I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallQualityFeedbackPanel, ui not displayed, causeId: " + t)
        }
        navigateToCallPreviewView(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallPreviewView causeId: " + t);
            const i = i=>{
                this.launchModalEvent.fire({
                    context: new R.CallPreviewNavigationContext(e),
                    rootViewId: i,
                    causeId: t
                })
            }
            ;
            Y.default.performAfterUIStarted(()=>{
                const t = B.default.isUsingSplitViewNoSubscription() ? C.default.rootViewIdForConversationMri(e.conversationMri) : m.MainRootViewId;
                i(t)
            }
            )
        }
        navigateToRinglessCallInterstitial(e) {
            const t = e.causeId;
            I.log(T.LogTraceArea.Navigation, "NavigationActions.NavigateToRinglessCallInterstitialParams causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                const i = i=>{
                    this.launchModalEvent.fire({
                        context: new R.RinglessCallInterstitialNavigationContext(Object.assign({}, e)),
                        rootViewId: i,
                        causeId: t
                    })
                }
                ;
                B.default.isUsingSplitViewNoSubscription() ? s.default.getLastActiveSplitView().then(e=>{
                    const t = e && e.isActive ? e.id : m.MainRootViewId;
                    i(t)
                }
                , e=>{
                    I.log(T.LogTraceArea.Navigation, "getLastActiveSplitView() failed. error: " + e),
                    i(m.MainRootViewId)
                }
                ) : i(m.MainRootViewId)
            }
            )
        }
        navigateToCallerIdPromptPanel() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallerIdPromptPanel, causeId: " + e),
            this.navigateAssertingUIStarted(()=>{
                const t = new R.CallerIdPromptContext({
                    customizedHeight: _.CompactHeight
                });
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.CallerIdPromptContext)
                        return;
                    F.default.navigateToView(t, e)
                } else
                    this.navigateToModalContext(t, !1, e, H.default.rootViewIdForComponentContext(void 0))
            }
            )
        }
        navigateToCallFailurePromptPanel(e, t, i) {
            const n = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallFailurePromptPanel, causeId: " + n),
            this.navigateAssertingUIStarted(()=>{
                const s = new R.CallFailurePromptContext({
                    phoneNumber: t,
                    reason: i,
                    customizedWidth: _.CompactWidth
                });
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.CallFailurePromptContext)
                        return;
                    F.default.navigateToView(s, n)
                } else {
                    const t = B.default.isUsingSplitViewNoSubscription() ? C.default.rootViewIdForConversationMri(e) : m.MainRootViewId;
                    this.navigateToModalContext(s, !1, n, t)
                }
            }
            )
        }
        navigateToSmsFailurePrompt(e, t, i) {
            const n = ae.newCauseId()
              , s = c.default.getS4LCommerceFeatures().newBuyCreditExperience
              , r = s.enabled && s.lowFundsSMSExperienceEnabled;
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSmsFailurePrompt, causeId: " + n),
            this.navigateAssertingUIStarted(()=>{
                const s = new R.SmsFailurePromptContext({
                    phoneNumber: t,
                    isSmsInfo: i,
                    customizedHeight: r ? _.DefaultHeight : _.CompactHeight,
                    customizedWidth: _.CompactWidth
                });
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.SmsFailurePromptContext)
                        return;
                    F.default.navigateToView(s, n)
                } else {
                    const t = B.default.isUsingSplitViewNoSubscription() ? C.default.rootViewIdForConversationMri(e) : m.MainRootViewId;
                    this.navigateToModalContext(s, !1, n, t)
                }
            }
            )
        }
        navigateToCallFailurePostPurchasePromptPanel(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallFailurePostPurchasePromptPanel, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                const i = new R.CallFailurePostPurchasePromptContext({
                    phoneNumber: e,
                    customizedHeight: _.CompactHeight,
                    customizedWidth: _.CompactWidth
                });
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.CallFailurePostPurchasePromptContext)
                        return;
                    F.default.navigateToView(i, t)
                } else
                    this.navigateToModalContext(i, !1, t, m.MainRootViewId)
            }
            )
        }
        navigateToTasterPostCallPanel(e) {
            const t = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToTasterPostCallPanel, causeId: " + t),
            this.navigateAssertingUIStarted(()=>{
                const i = new R.TasterPostCallPanelContext({
                    customizedHeight: _.CompactHeight,
                    customizedWidth: _.CompactWidth
                });
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof R.TasterPostCallPanelContext)
                        return;
                    F.default.navigateToView(i, t)
                } else {
                    const n = B.default.isUsingSplitViewNoSubscription() ? C.default.rootViewIdForConversationMri(e) : m.MainRootViewId;
                    this.navigateToModalContext(i, !1, t, n)
                }
            }
            )
        }
        closeCallFailurePrompts(e, t) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions.closeCallFailurePrompts, causeId: " + e),
            B.default.isUsingStackNavigationContext()) {
                const e = o.last(F.default.getCurrentNavigationStack());
                (e instanceof R.CallFailurePromptContext || e instanceof R.SmsFailurePromptContext || e instanceof R.TasterPostCallPanelContext) && this.reduceNavStack([R.CallFailurePromptId, R.SmsFailurePromptId, R.TasterPostCallPanelId], !1)
            } else {
                const e = H.default.rootViewIdForComponentContext(t);
                this.reduceModalNavStack([R.CallFailurePromptId, R.SmsFailurePromptId, R.TasterPostCallPanelId], e, !1)
            }
        }
        navigateToAndroidCallMonitorPermissionPanel(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToAndroidCallMonitorPermissionPanel, causeId: " + i),
            Y.default.isUIDisplayed() ? this.launchModalEvent.fire({
                context: new R.AndroidCallMonitorPermissionNavigationContext(Object.assign({}, e)),
                rootViewId: H.default.rootViewIdForComponentContext(t),
                causeId: i
            }) : I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToAndroidCallMonitorPermissionPanel, ui not displayed, causeId: " + i)
        }
        clearRightSidebarContext(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.clearRightSidebarContext rootViewId: " + J.mriOrId(i) + " partOfLargerChange: " + e + " causeId: " + t);
            const n = H.default.rightSideBarNavigatorIdForRootViewId(i);
            return this._clearRightSidebarContext(e, t, n)
        }
        clearModalContext(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.clearModalContext rootViewId: " + J.mriOrId(i) + " partOfLargerChange: " + e + " causeId: " + t);
            const n = H.default.modalNavigatorIdForRootViewId(i);
            return F.default.clearModalNavStack(n, e, !0, t),
            O.CompositeNavigationType.Modal
        }
        navigateAfterBlock(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions._navigateAfterBlock, causeId: " + t),
            this.closeDetailsPanelForUser(e, t, i),
            F.default.getActiveConversationId(H.default.rootViewIdForComponentContext(i)) === e && (B.default.isUsingStackNavigationContext() ? this.navigateToHub(t) : this.navigateToWelcomeScreen(t))
        }
        clearMainStageContext(e, t, i) {
            const o = H.default.mainContentNavigatorIdForComponentContext(i);
            return I.log(T.LogTraceArea.Navigation, "NavigationActions.clearMainStageContext navigatorId: " + n.pii.Omit(o) + " causeId: " + t),
            F.default.clearNavStack(o, !e, !1, t),
            O.CompositeNavigationType.MainContent
        }
        clearSelectedConversationId(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.clearSelectedConversationId, causeId: " + e);
            const i = this.getLeftNavigationContext(m.MainRootViewId);
            return i && (t && H.default.setLeftNavViewMode(i, R.LeftNavViewMode.Recents, e),
            i.getConversationsListContext().state.selectedConversationId = void 0),
            O.CompositeNavigationType.LeftSidebar
        }
        mainStageContextPopToRoot(e, t, i) {
            const o = H.default.mainContentNavigatorIdForComponentContext(i);
            return I.log(T.LogTraceArea.Navigation, "NavigationActions.mainStageContextPopToRoot navigatorId: " + n.pii.Omit(o) + " causeId: " + t),
            this.clearSelectedConversationId(t, !0),
            F.default.clearNavStack(o, !e, !1, t),
            O.CompositeNavigationType.MainContent
        }
        navigateToWelcomeScreen(e) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToWelcomeScreen, causeId: " + e),
            B.default.isUsingStackNavigationContext() || this.navigateToCompositeGroup(e, m.MainRootViewId, (t,i)=>{
                const n = [];
                if (n.push(this.setMainAreaFullScreen(!1, m.MainRootViewId)),
                n.push(this.clearModalContext(t, e, m.MainRootViewId)),
                F.default.isSplitNavStackCollapsed(ee.StackNavigatorId.DesktopContent))
                    n.push(this.mainStageContextPopToRoot(t, i, void 0));
                else {
                    n.push(this.clearSelectedConversationId(i, !0));
                    const e = new R.WelcomeScreenContext({});
                    n.push(this.navigateToMainStageContext(e, !0, t, i, m.MainRootViewId))
                }
                return o.compact(n)
            }
            )
        }
        navigateToMeetNowJoinLinkPanel(e) {
            const t = ae.newCauseId()
              , i = m.MainRootViewId
              , n = new E.MeetNowJoinLinkPanelNavigationContext(e);
            this.launchModalEvent.fire({
                context: n,
                rootViewId: i,
                modalId: e.modalId,
                causeId: t
            })
        }
        navigateToScreenSharePanel(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToScreenSharePanel, causeId: " + i);
            const n = B.default.isUsingSplitViewNoSubscription() ? C.default.rootViewIdForConversationMri(e.conversationMri) : m.MainRootViewId;
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToScreenSharePanel, causeId: " + i + `rootViewId ${n} isUsingStackNavigationContext ${B.default.isUsingStackNavigationContext()}`),
            this.navigateAssertingUIStarted(()=>{
                const o = new R.ScreenShareModalContext(e);
                B.default.isUsingStackNavigationContext() || this.launchModalEvent.fire({
                    context: o,
                    rootViewId: n,
                    modalId: t,
                    causeId: i
                })
            }
            )
        }
        getLeftNavigationContext(e) {
            const t = H.default.mainContentNavigatorIdForRootViewId(e)
              , i = F.default.getCurrentStackNavigationContext(t, !1);
            if (i instanceof R.RootCompositeSplitViewContext)
                return i.getLeftNavigationContext()
        }
        setMainAreaFullScreen(e, t) {
            const i = H.default.mainContentNavigatorIdForRootViewId(t)
              , n = F.default.getCurrentStackNavigationContext(i, !1);
            return n instanceof R.RootCompositeSplitViewContext && n.setMainAreaFullScreen(e),
            O.CompositeNavigationType.MainContent
        }
        navigateToMainStageContext(e, t, i, n, o) {
            const r = H.default.mainContentNavigatorIdForRootViewId(o);
            I.log(T.LogTraceArea.Navigation, "NavigationActions: _navigateToMainStageContext, causeId: " + n);
            const a = H.default.maybeUpdateDesktopNavContext(e, n);
            return F.default.stackNavigateToView(a, void 0, r, t ? ee.StackNavigationType.PopToRoot : ee.StackNavigationType.Push, !i, n),
            (a instanceof R.DesktopContentPanelNavigationContext || a instanceof R.CallNavigationContext || a instanceof E.MeetNowNavigationContext) && (B.default.isUsingSplitViewNoSubscription() && o !== m.MainRootViewId ? this._openSplitView(o, n) : s.MainWindow.requestFocus()),
            O.CompositeNavigationType.MainContent
        }
        navigateToSXPlayground() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToSXPlayground causeId: " + e)
        }
        navigateToRightSidebarContext(e, t, i, n, o, s) {
            if (s)
                return this.navigateToModalContext(e, i, n, o),
                O.CompositeNavigationType.Modal;
            {
                const s = H.default.rightSideBarNavigatorIdForRootViewId(o);
                return I.log(T.LogTraceArea.Navigation, "NavigationActions: _navigateToRightSidebarContext, causeId: " + n),
                F.default.desktopSidebarNavigateToView(e, void 0, s, t, !i, n),
                O.CompositeNavigationType.RightSidebar
            }
        }
        fetchMemberConsumptionHorizon(e) {
            if (!c.default.getS4LMessagingFeatures().enableReadReceipts)
                return;
            if (p.isEncryptedThread(e) || p.isConversationWithPhoneNumber(e) || p.isBookmarkConversation(e))
                return;
            const t = f.default.getConversation(e);
            if (!t)
                return;
            if (t.isFake)
                return;
            const i = t.getThreadMembers().length;
            p.isThread(e) && (0 === i || i > 20) || u.fetchMemberConsumptionHorizon(e)
        }
        navigateToDefaultConversation() {
            this.navigateAfterUIStarted(()=>{
                const e = ae.newCauseId();
                I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToDefaultConversation, causeId: " + e),
                this.navigateToConversation({
                    causeId: e,
                    origin: T.NavigationConversationOrigin.NavToDefaultConv
                })
            }
            )
        }
        navigateAfterArchivingConversation(e, t, i) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateAfterArchivingConversation, causeId: " + t),
            B.default.isUsingStackNavigationContext())
                return void this.navigateToRecentsTab();
            this.closeDetailsPanel(t, i);
            const n = F.default.getActiveConversationId(H.default.rootViewIdForComponentContext(i))
              , s = o.find(S.default.getAllSiblingConversations(e), e=>e.id === n);
            (e === n || s) && this.navigateToWelcomeScreen(t)
        }
        navigateAfterUnarchivingConversation(e, t, i) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateAfterUnarchivingConversation, causeId: " + t),
            B.default.isUsingStackNavigationContext(),
            F.default.getActiveConversationId(H.default.rootViewIdForComponentContext(i)) === e && (y.default.setConversationsListMode(y.ConversationsListMode.AllConversations),
            this.clearModalContext(!0, t, m.MainRootViewId))
        }
        navigateToCompositeContext(e, t=[O.CompositeNavigationType.Default], i, n) {
            this.navigateAfterUIStarted(()=>{
                if (this._forceRefreshOnNextNavigate)
                    return this._forceRefreshOnNextNavigate = !1,
                    void Q.reloadApp(e);
                F.default.compositeCommitNavigationUpdates(e, t, i, n)
            }
            )
        }
        navigateToHelpAndFeedbackLink(e, t, i, n, o={}) {
            if (A.isSsoEnabled())
                this.navigateToSsoWebFlow(e, "", i, n, [], !0, o);
            else {
                const i = A.getHelpAndFeedbackUrl(e, t, o);
                Z.SsoWebFlowExternalBrowser.openExternalBrowser(i, n).then(()=>{
                    I.track(new V.NavigationHelpAndFeedbackLink(i,!1))
                }
                ).catch(()=>{
                    I.track(new V.NavigationHelpAndFeedbackLink(i,!0))
                }
                )
            }
        }
        navigateToTranslationSettingsPanel(e, t) {
            const i = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToTranslationSettingsPanel, causeId: " + i);
            const n = new R.TranslationSettingsPanelNavigationContext({});
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext() ? F.default.navigateToView(n, i) : this.navigateToModalContext(n, e, i, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
        openSubtitles(e, t, i, n, o) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.openSubtitles, causeId: " + o);
            const s = H.default.rootViewIdForComponentContext(i)
              , r = new R.SubtitlesNavigationContext({
                conversationMri: e,
                callId: t,
                onClose: n
            });
            B.default.isUsingStackNavigationContext() ? F.default.navigateToView(r, o) : this.navigateToCompositeGroup(o, s, (e,t)=>{
                const i = [];
                return i.push(this.clearModalContext(!0, t, s)),
                i.push(this.navigateToRightSidebarContext(r, ee.StackNavigationType.PopToRoot, e, t, s)),
                i
            }
            )
        }
        closeSubtitlesPanel(e, t) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions: closeSubtitlesPanel,  causeId: " + e),
            B.default.isUsingStackNavigationContext())
                o.last(F.default.getCurrentNavigationStack())instanceof R.SubtitlesNavigationContext && this.navigateBack(e, t);
            else if (!this._maybePopToConversationInCall(e, t)) {
                const i = H.default.rootViewIdForComponentContext(t);
                this.navigateToCompositeGroup(e, i, (e,t)=>[this.clearRightSidebarContext(e, t, i)])
            }
        }
        navigateToCallingDebugPanel(e, t, i=!1) {
            const n = ae.newCauseId();
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallingDebugPanel, causeId: " + n),
            B.default.isUsingStackNavigationContext()) {
                const t = new R.CallingDebugPanelNavigationContext({
                    callId: e,
                    nativeWindow: !1
                });
                F.default.navigateToView(t, n)
            } else
                this.navigateAssertingUIStarted(()=>{
                    B.default.isUsingStackNavigationContext();
                    new R.CallingDebugPanelNavigationContext({
                        callId: e,
                        nativeWindow: !0
                    });
                    const i = H.default.rootViewIdForComponentContext(t);
                    if (F.default.shouldDisplayRightNavigationNoSubscription(i)) {
                        const o = new R.CallingDebugPanelNavigationContext({
                            callId: e,
                            nativeWindow: !1
                        })
                          , s = !!t && t.isPresentedInDesktopRightNav;
                        this.navigateToCompositeGroup(n, i, (e,t)=>[this.navigateToRightSidebarContext(o, s ? ee.StackNavigationType.Push : ee.StackNavigationType.PopToRoot, e, t, i)])
                    }
                }
                )
        }
        navigateToBookmarkSource(e) {
            const t = g.getBookmarkMetadata(e)
              , i = t && t.bookmarkSourceConversationId
              , n = t && t.bookmarkSourceComposeTime;
            if (i && n) {
                const e = ae.newCauseId();
                I.log(T.LogTraceArea.Navigation, "NavigationActions: navigateToBookmarkSource causeId: " + e),
                this.navigateToConversation({
                    convId: i,
                    scrollToTimestamp: o.toNumber(n),
                    forceRefreshFocus: !0,
                    origin: T.NavigationConversationOrigin.BookmarkMessage,
                    causeId: e
                })
            }
        }
        closeCallDebugPanel(e, t, i) {
            if (i || this._maybePopToConversationInCall(e, t)) {
                const e = H.default.modalNavigatorIdForRootViewId(m.CallDebugRootViewId);
                s.default.closeNativeWindow(e)
            } else {
                const i = H.default.rootViewIdForComponentContext(t);
                B.default.isUsingStackNavigationContext() ? o.last(F.default.getCurrentNavigationStack())instanceof R.CallingDebugPanelNavigationContext && this.navigateBack(e, t) : this.navigateToCompositeGroup(e, i, (e,t)=>[this.clearRightSidebarContext(e, t, i)])
            }
        }
        showSpeechConsentPanel(e) {
            const t = e.causeId;
            I.log(T.LogTraceArea.Navigation, "NavigationActions.showSpeechConsentPanel, causeId: " + t),
            this._commonNavigateToModal(R.SpeechConsentNavigationContext, e.componentContext, "navigateToSpeechConsentPanel", {})
        }
        _maybePopToConversationInCall(e, t) {
            const i = H.default.rightSideBarNavigatorIdForComponentContext(t)
              , n = F.default.getCurrentStackNavigationContext(i, !1).getNavStack()
              , o = n ? n[0] : void 0;
            if (o && o instanceof R.ConversationInCallNavigationContext) {
                I.log(T.LogTraceArea.Navigation, "NavigationActions: _maybePopToConversationInCall popToRoot: true causeId: " + e);
                const i = H.default.rootViewIdForComponentContext(t);
                return this.navigateToCompositeGroup(e, i, (e,t)=>[this.navigateToRightSidebarContext(o, ee.StackNavigationType.PopToRoot, e, t, i)]),
                !0
            }
            return I.log(T.LogTraceArea.Navigation, "NavigationActions: _maybePopToConversationInCall popToRoot: false causeId: " + e),
            !1
        }
        _openConversationInCallNext(e, t, i, n, o) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions.openConversationInCallNext, causeId: " + e),
            !B.default.isUsingStackNavigationContext()) {
                const s = H.default.rootViewIdForComponentContext(n);
                F.default.getCompositeCallVisibleNoSubscription(s) && this.navigateToCompositeGroup(e, s, (e,n)=>{
                    const r = new R.ConversationInCallNavigationContext({
                        conversationId: t,
                        callId: i,
                        onClose: o
                    })
                      , a = [];
                    return a.push(this.clearModalContext(!0, n, s)),
                    a.push(this.navigateToRightSidebarContext(r, ee.StackNavigationType.PopToRoot, e, n, s)),
                    this._startNavigateToConvScenario(t, T.NavigationConversationOrigin.Call),
                    a
                }
                )
            }
        }
        _closeConversationInCallNext(e, t) {
            if (I.log(T.LogTraceArea.Navigation, "NavigationActions.closeConversationInCallNext, causeId: " + e),
            B.default.isUsingStackNavigationContext())
                return;
            const i = H.default.rootViewIdForComponentContext(t);
            this.navigateToCompositeGroup(e, i, (e,t)=>{
                const n = [];
                return n.push(this.clearRightSidebarContext(e, t, i)),
                n
            }
            )
        }
        _clearRightSidebarContext(e, t, i) {
            return I.log(T.LogTraceArea.Navigation, "NavigationActions._clearRightSidebarContext navigatorId: " + n.pii.Omit(i) + " partOfLargerChange: " + e + " causeId: " + t),
            F.default.clearDesktopSidebarNavStack(i, !e, !0, t),
            O.CompositeNavigationType.RightSidebar
        }
        _stackNavNavigateBack(e) {
            return I.log(T.LogTraceArea.Navigation, "NavigationActions._stackNavNavigateBack, causeId: " + e),
            F.default.stackNavNavigateBack(!1, e),
            !0
        }
        _modalNavigateBack(e, t) {
            const i = H.default.modalNavigatorIdForComponentContext(t);
            return I.log(T.LogTraceArea.Navigation, "NavigationActions._modalNavigateBack navigatorId: " + n.pii.Omit(i) + " causeId: " + e),
            F.default.stackNavNavigateBack(!1, e, i, O.CompositeNavigationType.Modal) || this._closeGenericDesktopModal(e, i),
            !0
        }
        _desktopContentNavigateBack(e, t) {
            const i = H.default.mainContentNavigatorIdForComponentContext(t)
              , n = F.default.getCurrentNavigationBackStack(i).length
              , o = F.default.stackNavNavigateBack(!1, e, i, O.CompositeNavigationType.MainContent);
            return I.log(T.LogTraceArea.Navigation, "NavigationActions._desktopContentNavigateBack backStackSizeBefore: " + n + " handled: " + o + " causeId: " + e),
            (!o || F.default.getCurrentNavigationBackStack(i).length <= 1) && this.navigateToCompositeGroup(e, H.default.rootViewIdForComponentContext(t), (e,t)=>[this.clearSelectedConversationId(t)]),
            n > 1
        }
        _rightSidebarNavigateBack(e, t) {
            const i = H.default.rightSideBarNavigatorIdForComponentContext(t);
            return I.log(T.LogTraceArea.Navigation, "NavigationActions._rightSidebarNavigateBack navigatorId: " + n.pii.Omit(i) + " causeId: " + e),
            F.default.stackNavNavigateBack(!1, e, i, O.CompositeNavigationType.RightSidebar) || F.default.clearNavStack(i, !0, !0, e),
            !0
        }
        _closeGenericDesktopModal(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: _closeGenericDesktopModal navigatorId: " + n.pii.Omit(t) + " causeId: " + e),
            B.default.isUsingStackNavigationContext() || F.default.clearModalNavStack(t, !0, !0, e)
        }
        _getScenarioByConversationId(e) {
            return this._scenarioLookupByConversationId[e]
        }
        _getScenarioIdForConversationId(e) {
            return J.mriOrId(e) + "Navigation"
        }
        _getScenarioIdForAnimation(e) {
            return J.mriOrId(e) + "Animation"
        }
        _startNavigateToConvScenario(e, t, i) {
            const n = {
                origin: T.NavigationConversationOrigin[t]
            };
            o.isUndefined(i) || (n.browserOrigin = T.BrowserOrigin[i]);
            const s = this._getScenarioIdForConversationId(e)
              , r = new ne.default(W.ScenarioName.StreamFrom,s,n);
            this._scenarioLookupByConversationId[e] = r,
            r.start(),
            te.default.willNavigateToChat()
        }
        _navigateToCallingSettingsEntryDesktop(e, t, i, n, o, s, r, a) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallingSettingsEntryDesktop, causeId: " + r),
            this.navigateAssertingUIStarted(()=>{
                B.default.isUsingStackNavigationContext();
                const l = new R.CallingSettingsEntryNavigationContext({
                    link: e,
                    source: t,
                    goTarget: n,
                    title: i,
                    enableWebViewBackNavigation: o,
                    titleAccessibilityRegion: a
                });
                this.navigateToModalContext(l, !1, r, H.default.rootViewIdForComponentContext(s))
            }
            )
        }
        _navigateToCallingSettingsHeaderAuthWebFlow(e, t, i, n, o, s=[], r, a, l, c) {
            const d = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions.navigateToCallingSettingsHeaderAuthWebFlow, causeId: " + d),
            this.navigateAssertingUIStarted(()=>{
                if (B.default.isUsingStackNavigationContext()) {
                    const c = new R.CallingSettingsHeaderAuthWebFlowNavigationContext({
                        link: e,
                        source: t,
                        goTarget: o,
                        title: i,
                        titleAllowTextWrap: n,
                        useDocumentTitle: a,
                        pathsRequiringHeaders: s,
                        disableSpinnerAfterGoLink: r,
                        enableWebViewBackNavigation: l
                    });
                    F.default.navigateToView(c, d)
                } else {
                    const n = new R.CallingSettingsEntryNavigationContext({
                        link: e,
                        source: t,
                        goTarget: o,
                        title: i,
                        enableWebViewBackNavigation: l
                    });
                    this.navigateToModalContext(n, !1, d, H.default.rootViewIdForComponentContext(c))
                }
            }
            )
        }
        _sendConversationNavigationTelemetry(e, t) {
            let i;
            if (!e.isNewConversation) {
                const e = f.default.getConversation(t);
                if (i = e ? e.getTimestamp() : 0,
                i > 0) {
                    const e = Date.now();
                    i > e && (i = e - 1)
                } else
                    i = e ? e.getConsumptionHorizonTimestamp() : 0
            }
            const n = t === c.default.getConfigSettingsNoSubscription().cortana.id
              , o = S.default.getAllSiblingConversations(t).length;
            I.track(new V.NavigationConversation(t,n,e.origin,e.browserOrigin,i,o))
        }
        _getConversationNavigationContext(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: _getConversationNavigationContext, conversationId: " + J.mriOrId(t) + " causeId: " + e.causeId);
            const i = f.default.getConversation(t)
              , n = i && i.isOneOnOne() ? i.getOtherPartyMri() : void 0;
            return new R.ConversationNavigationContext({
                conversationId: t,
                otherPartyMri: n,
                isNewConversation: e.isNewConversation,
                contextConversationId: e.contextConversationId,
                scrollToTimestamp: e.scrollToTimestamp,
                focusedMessageCuid: e.focusedMessageCuid,
                forceRefreshFocus: e.forceRefreshFocus ? Date.now() : void 0,
                shouldAutoFocusInput: e.shouldAutoFocusInput,
                shouldFlattenNavOnInteraction: e.shouldFlattenNavOnInteraction,
                inviteToken: e.inviteToken,
                selectedNumberForSMS: e.selectedNumberForSMS,
                origin: e.origin,
                isFromPeopleRecommendations: e.isFromPeopleRecommendations,
                directShareEventData: e.directShareEventData
            })
        }
        _getMobileContentPanelContext(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions: _getContentPanelContext, convId: " + J.mriOrId(e.convId) + " causeId: " + e.causeId + " isFromBubble: " + e.isFromConversationBubble);
            const i = new R.MobileContentPanelNavigationContext({
                shouldResetNavStack: e.shouldResetNavStack,
                shouldReplaceCurrentContext: e.shouldReplaceCurrentContext,
                shouldHideAllExtraControls: e.isFromConversationBubble
            });
            return i.setConversationContext(t.state),
            i
        }
        _routeTypeForContext(e) {
            return e instanceof R.MobileHubNavigationContext || e instanceof R.ConversationsListNavigationContext ? U.RouteType.Hub : e instanceof R.MobileContentPanelNavigationContext ? U.RouteType.Content : e instanceof R.SearchNavigationContext ? U.RouteType.Search : e instanceof R.ContactsPanelV2NavigationContext ? U.RouteType.ContactsPanel : e instanceof R.QuickCallNavigationContext && e.state.searchOnly ? U.RouteType.Search : U.RouteType.Other
        }
        _fetchLatestUserInfoNow() {
            const e = ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions._fetchLatestUserInfoNow, causeId: " + e),
            re.refreshNow(),
            D.refreshNow(e),
            G.refreshNow(),
            I.log(T.LogTraceArea.Navigation, "User info refresh requested")
        }
        _openSplitView(e, t) {
            I.log(T.LogTraceArea.Navigation, "NavigationActions._openSplitView rootViewId: " + J.mriOrId(e) + " causeId: " + t);
            const i = {
                event: {
                    eventId: e,
                    convId: e
                },
                reactxp_rootViewId: e
            }
              , n = ce.default.getWindowPreferences(e) || ce.default.getDefaultWindowPreferences();
            let o;
            p.isMri(e) && (o = v.getDisplayName(p.asMri(e)),
            p.isBookmarkConversation(e) && (o = M.getString("BookmarksConversation.BookmarksChatTitle"))),
            s.default.openSplitView(e, "RootContentView", i, n, o || "", (t,i)=>ce.default.storeWindowPreferences(e, t, i))
        }
        _commonNavigateToModal(e, t, i, n, s, r) {
            const a = r || ae.newCauseId();
            I.log(T.LogTraceArea.Navigation, "NavigationActions." + i + ", causeId: " + a),
            this.navigateAssertingUIStarted(()=>{
                const i = new e(n);
                if (B.default.isUsingStackNavigationContext()) {
                    if (o.last(F.default.getCurrentNavigationStack())instanceof e)
                        return;
                    s && s(i, !0),
                    F.default.navigateToView(i, a)
                } else
                    s && s(i, !1),
                    this.navigateToModalContext(i, !1, a, H.default.rootViewIdForComponentContext(t))
            }
            )
        }
    }
    ;
    e.exports = de
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(157)
      , s = i(0)
      , r = i(2)
      , a = i(1327)
      , l = i(543)
      , c = i(9);
    let d = i(2080);
    const u = ["000", "01", "02", "03", "04", "08", "11", "15", "16", "17", "18", "051", "61", "62", "91", "93", "94", "100", "101", "102", "103", "104", "105", "107", "108", "110", "111", "0112", "112", "113", "114", "115", "117", "118", "119", "122", "123", "128", "133", "140", "141", "142", "143", "144", "145", "147", "150", "151", "155", "158", "160", "163", "166", "175", "177", "179", "190", "191", "192", "196", "197", "199", "532", "911", "961", "984", "985", "986", "987", "991", "992", "993", "994", "995", "996", "997", "998", "999", "1145", "1400", "1412", "1414", "1415", "1510", "1515", "1525", "1530", "1591", "1717", "1800", "1802", "1804", "1987", "9155", "116000", "116006", "116111", "116117", "116123"]
      , g = /[^\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFDCF\uFDF0-\uFFFD]/gm;
    e.exports = new class {
        constructor() {
            this._sessionId = c.newGuid()
        }
        initialize(e) {
            this._appShellType = r.AppShellType.Browser,
            this._frontendHost = e.frontendHostOverride || "web.skype.com",
            this._loadPath = e.loadPath || "",
            this._loadPathFragment = e.loadPathFragment || "",
            this._initialSkypeURI = e.initialSkypeURI;
            let t = (e.appVersion || "").split(".");
            if (4 === t.length)
                this._appVersion = e.appVersion;
            else {
                let e = 4 - t.length;
                for (; e > 0; )
                    t.push("0"),
                    e--;
                this._appVersion = n.take(t, 4).join(".")
            }
            this._osVersion = o.EnvironmentInfo.OsVersion,
            this._locale = o.EnvironmentInfo.SystemLocale,
            this._systemModel = o.EnvironmentInfo.SystemModel,
            this._deviceId = o.EnvironmentInfo.DeviceId,
            this._androidOsVersionCode = o.EnvironmentInfo.AndroidOsVersionCode,
            this._uwpPackageVersion = o.EnvironmentInfo.UWPPackageVersion,
            this._msixPackageVersion = o.EnvironmentInfo.MSIXPackageVersion,
            this._cpuCount = o.EnvironmentInfo.CPUCount ? o.EnvironmentInfo.CPUCount : void 0,
            this._cpuSpeedMhz = o.EnvironmentInfo.CPUSpeed ? Math.round(o.EnvironmentInfo.CPUSpeed / 1e3) : void 0,
            this._chipset = o.EnvironmentInfo.Chipset,
            this._deviceName = o.EnvironmentInfo.DeviceName,
            this._deviceType = o.EnvironmentInfo.DeviceType,
            this._systemManufacturer = o.EnvironmentInfo.SystemManufacturer,
            this._languageCode = o.EnvironmentInfo.SystemLanguage,
            this._countryCode = o.EnvironmentInfo.SystemCountry,
            this._appIdentifier = o.EnvironmentInfo.AppIdentifier,
            this._preInstallPartnerId = o.EnvironmentInfo.PreInstallPartnerId,
            this._mccCode = o.EnvironmentInfo.NetworkMCCCode,
            this._mncCode = o.EnvironmentInfo.NetworkMNCCode,
            this._cpuAbi = o.EnvironmentInfo.CpuAbi,
            this._androidPrivateCpuAbi = o.EnvironmentInfo.AndroidPrivateCpuAbi,
            this._isChromeOS = o.EnvironmentInfo.IsChromeOS,
            this._isFireOS = o.EnvironmentInfo.IsFireOS;
            {
                const e = this._locale.split("-");
                this._languageCode = e.shift(),
                e.length ? this._countryCode = e.join("-") : this._countryCode = a.getDefaultLocale(this._languageCode).toUpperCase()
            }
            this._appInitTime = e.startupTimestamp,
            this._appLoadDuration = e.loadDuration,
            e.skypeData && (this._errorText = e.skypeData.errorText,
            this._startupSkypeId = e.skypeData.startupSkypeId,
            this._startupSignInName = e.skypeData.startupSignInName,
            this._startupRawSkypeToken = e.skypeData.startupRawSkypeToken,
            this._startupSkypeTokenExpiration = e.skypeData.startupSkypeTokenExpiration),
            this.updateIsRTL(s.International.isRTL()),
            this._corporateInstallationTag = o.EnvironmentInfo.CorporateInstallationTag
        }
        updateIsRTL(e) {
            this._isRTL = e
        }
        setChatEndpointId(e) {
            this._chatEndpointId = e
        }
        getChatEndpointId() {
            return this._chatEndpointId
        }
        getEchoMri() {
            return "8:echo123"
        }
        getCallLogMri() {
            return "48:calllogs"
        }
        getBlockedPSTNMri() {
            return "4:+000000"
        }
        isValidEmergencyNumber(e) {
            return n.includes(u, e)
        }
        getDocRoot() {
            return ""
        }
        getImagePath(e="") {
            return this.getDocRoot() + "images/" + e
        }
        getAnimationsPath(e="") {
            return this.getDocRoot() + "animations/" + e
        }
        getSoundPath(e="") {
            return this.getDocRoot() + "media/" + e
        }
        getWasmPath(e) {
            return this.getDocRoot() + "resources/" + e
        }
        getVideoPath(e="") {
            return this.getDocRoot() + "videos/" + e
        }
        getProtocol() {
            return "undefined" != typeof location && void 0 !== location.protocol ? location.protocol : "https:"
        }
        getFrontendHost() {
            return this._frontendHost
        }
        getFrontendBaseUrl() {
            return this.getProtocol() + "//" + this._frontendHost
        }
        getOAuthEndUrl() {
            return this.getFrontendBaseUrl() + "/oauthcallback"
        }
        deprecatedGetAppShellType() {
            return this._appShellType
        }
        getAppShellTypeName() {
            return r.AppShellType[this.deprecatedGetAppShellType()]
        }
        getPlatformType() {
            return o.EnvironmentInfo.getPlatformType()
        }
        getPreInstallPartnerId() {
            return this._preInstallPartnerId
        }
        getPlatformTypeName() {
            return o.EnvironmentInfo.getPlatformTypeName()
        }
        getOSVersion() {
            return this._osVersion
        }
        getAndroidOSVersionCode() {
            return this._androidOsVersionCode
        }
        isChromeOS() {
            return !!this._isChromeOS
        }
        isFireOS() {
            return !!this._isFireOS
        }
        getDeviceName(e=!0) {
            const t = this._deviceName || this.getSystemModel();
            return e ? t.replace(g, " ") : t
        }
        getIOSModel() {
            if (this.getPlatformType() !== o.PlatformType.iOS || !this._deviceType)
                return r.IOSModel.None;
            switch (this._deviceType.toLowerCase()) {
            case "ipad":
                return r.IOSModel.iPad;
            case "iphone":
                return r.IOSModel.iPhone;
            case "ipod touch":
                return r.IOSModel.iPodTouch;
            default:
                return r.IOSModel.None
            }
        }
        getCPUCount() {
            return this._cpuCount
        }
        getCPUSpeedMhz() {
            return this._cpuSpeedMhz
        }
        getChipset() {
            return this._chipset
        }
        getDeviceId() {
            return this._deviceId
        }
        getSystemModel() {
            return this._systemModel
        }
        getSystemManufacturer() {
            return this._systemManufacturer || ""
        }
        getSystemLocale() {
            return this._locale
        }
        getCountryCode() {
            return this._countryCode
        }
        getSystemLanguage() {
            return this._languageCode
        }
        getAppInitTime() {
            return this._appInitTime
        }
        getAppLoadDuration() {
            return this._appLoadDuration
        }
        getSessionId() {
            return this._sessionId
        }
        getMccCode() {
            return this._mccCode
        }
        getMncCode() {
            return this._mncCode
        }
        getXSkypeCallerHeader() {
            return `Skype4Life ${this.getAppShellTypeName()} ${this.getPlatformTypeName()} (${this.getAppVersion()})`
        }
        isDebug() {
            return !1
        }
        getAppVersion() {
            return this._appVersion
        }
        getUWPPackageVersion() {
            return this._uwpPackageVersion
        }
        getMSIXPackageVersion() {
            return this._msixPackageVersion
        }
        getAppIdentifier() {
            return this._appIdentifier
        }
        _getCpuType() {
            return this._androidPrivateCpuAbi || this._cpuAbi || ""
        }
        _getAppCenterConfig() {
            let e;
            return e = {
                appSecret: d.appSecret
            },
            e
        }
        getAppCenterSecret() {
            return this._getAppCenterConfig().appSecret || ""
        }
        getSkypePlatformId() {
            return l.platformId.web
        }
        getClientId() {
            return l.clientId
        }
        isS4LPlatformId(e) {
            return n.some(l.platformId, t=>t === e)
        }
        getUIVersion() {
            return this.getSkypePlatformId() + "/" + this.getAppVersion()
        }
        getUIVersionWithPartnerID() {
            let e = this.getUIVersion()
              , t = this.getPreInstallPartnerId();
            return t && (e = e + "/" + t),
            e
        }
        getInitialUrl() {
            return this._initialSkypeURI || this.getFrontendBaseUrl() + this._loadPath
        }
        getLoadPath() {
            return this._loadPath
        }
        getLoadPathFragment() {
            return this._loadPathFragment
        }
        getErrorText() {
            return this._errorText
        }
        getStartupSkypeId() {
            return this._startupSkypeId
        }
        getStartupRawSkypeToken() {
            return this._startupRawSkypeToken
        }
        getStartupSignInName() {
            return this._startupSignInName
        }
        getStartupSkypeTokenExpiration() {
            return this._startupSkypeTokenExpiration
        }
        getAriaTenantToken() {
            return l.telemetry.ariaTenantToken
        }
        getAriaTelemetryTenantToken() {
            return l.telemetry.ariaTelemetryTenantToken
        }
        getAriaCallingTenantToken() {
            return l.telemetry.calling.ariaCallingTenantToken
        }
        getAriaAddinTenantToken() {
            return l.telemetry.ariaAddinTenantToken
        }
        getAriaCQFTenantToken() {
            return this.getAriaPluginlessMediaTenantToken()
        }
        getAriaPluginlessMediaTenantToken() {
            return l.telemetry.calling.ariaPluginlessMediaTenantToken
        }
        getAriaCommerceTenantToken() {
            return l.telemetry.ariaCommerceTenantTokenLIVE
        }
        getAriaSkypeFraudTelemetryTenantToken() {
            return l.telemetry.ariaSkypeFraudTelemetryTenantToken
        }
        getAriaCortanaSignalsTenantToken() {
            return l.telemetry.ariaCortanaSignalsTenantToken
        }
        getAriaPluginlessTrouterTenantToken() {
            return l.telemetry.calling.ariaPluginlessTrouterTenantToken
        }
        getFootprintTenantId() {
            return l.footprintTenantId
        }
        isUsingExperimentalNav() {
            return !1
        }
        isRTL() {
            return this._isRTL
        }
        isElectronOsx() {
            return !1
        }
        isElectronWindows() {
            return !1
        }
        isElectronLinux() {
            return !1
        }
        isAnyWindowsOrOsx() {
            return this.isElectronWindows() || this.isElectronOsx()
        }
        isCurrentRSVersionGreaterThan(e) {
            return this._isExpectedRSVersion(t=>t > e)
        }
        isCurrentRSVersionEqualOrGreaterThan(e) {
            return this._isExpectedRSVersion(t=>t >= e)
        }
        isCorporateInstallation() {
            return !n.isUndefined(this._corporateInstallationTag)
        }
        getCorporateInstallationTag() {
            return this._corporateInstallationTag || ""
        }
        getCrashReportingAppId() {
            return "web.skype.com" === this._frontendHost ? l.crashReporting.web.marketAppId : -1 !== this._frontendHost.indexOf("preview.web.skype.com") ? l.crashReporting.web.previewAppId : "0.0.84.1" === this.getAppVersion() || -1 !== this._frontendHost.indexOf("dev.web.skype.com") ? l.crashReporting.web.devAppId : -1 !== this._frontendHost.indexOf("latest.web.skype.com") ? l.crashReporting.web.latestAppId : void 0
        }
        isAlexaPlatformId(e) {
            return e === l.platformId.alexa
        }
        getClientVersionAndPlatform() {
            return `${this.getSkypePlatformId()}/${this.getAppVersion()}`
        }
        _isExpectedRSVersion(e) {
            const t = this.getOSVersion().split(".")[2];
            return e(parseInt(t, 10))
        }
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(33)
      , o = i(1)
      , s = i(104)
      , r = i(3)
      , a = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g
      , l = /[A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
      , c = RegExp("(?:[✀-➿]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[︎️]?(?:[̀-ͯ︠-︣⃐-⃰]|\ud83c[\udffb-\udfff])?(?:‍(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[︎️]?(?:[̀-ͯ︠-︣⃐-⃰]|\ud83c[\udffb-\udfff])?)*");
    class d {
        static deburrLocaleUpperCase(e) {
            return e ? d.deburr(e.toLocaleUpperCase()).toLocaleUpperCase() : e
        }
        static deburrUpperCase(e) {
            return e ? d.toUpper(d.deburr(d.toUpper(e))) : e
        }
        static deburrLocaleLowerCase(e) {
            return e ? d.deburr(e.toLocaleLowerCase()) : e
        }
        static deburrLowerCase(e, t=!1) {
            return e ? d.deburr(e.toLowerCase(), t) : e
        }
        static deburr(e, t=!1) {
            return e ? t ? d.normalizeGreekFast(o.deburr(e)) : d.normalizeGreek(o.deburr(e)) : e
        }
        static normalizeGreek(e) {
            return e = e.replace(/ά/g, "α").replace(/Ά/g, "Α").replace(/έ/g, "ε").replace(/Έ/g, "Ε").replace(/ή/g, "η").replace(/Ή/g, "Η").replace(/ί|ΐ|ϊ/g, "ι").replace(/Ί|Ϊ/g, "Ι").replace(/ό/g, "ο").replace(/Ό/g, "Ο").replace(/ύ|ΰ|ϋ/g, "υ").replace(/Ύ|Ϋ/g, "Υ").replace(/ώ/g, "ω").replace(/Ώ/g, "Ω").replace(/ς/g, "σ")
        }
        static normalizeGreekFast(e) {
            let t = [];
            for (let i = 0; i < e.length; i++) {
                let n = e[i];
                switch (n) {
                case "ά":
                    n = "α";
                    break;
                case "Ά":
                    n = "Α";
                    break;
                case "έ":
                    n = "ε";
                    break;
                case "Έ":
                    n = "Ε";
                    break;
                case "ή":
                    n = "η";
                    break;
                case "Ή":
                    n = "Η";
                    break;
                case "ί":
                case "ΐ":
                case "ϊ":
                    n = "ι";
                    break;
                case "Ί":
                case "Ϊ":
                    n = "Ι";
                    break;
                case "ό":
                    n = "ο";
                    break;
                case "Ό":
                    n = "Ο";
                    break;
                case "ύ":
                case "ΰ":
                case "ϋ":
                    n = "υ";
                    break;
                case "Ύ":
                case "Ϋ":
                    n = "Υ";
                    break;
                case "ώ":
                    n = "ω";
                    break;
                case "Ώ":
                    n = "Ω";
                    break;
                case "ς":
                    n = "σ"
                }
                t.push(n)
            }
            return t.join("")
        }
        static escapeReservedRegexCharacters(e) {
            return e.replace(a, "\\$&")
        }
        static formatV(e, t, i) {
            return i = i || this.asString,
            e = this._formatInternal(e, t, i),
            1 === t.length && "object" == typeof t[0] && (e = this._formatInternal(e, t[0], i)),
            e
        }
        static format(e, ...t) {
            return this.formatV(e, t)
        }
        static formatUri(e, ...t) {
            return this.formatV(e, t, e=>encodeURIComponent(this.asString(e)))
        }
        static _isSurogate(e) {
            return e >= 55296 && e <= 57343
        }
        static _assertMissingPairSurrogate(e, t) {}
        static _symbolsOffset(e, t, i) {
            const n = e.length;
            let o = 0
              , s = t;
            for (; !(o === i || s > n); ) {
                let t = e.charCodeAt(s);
                d._isSurogate(t) && (++s >= n || !d._isSurogate(e.charCodeAt(s))) && d._assertMissingPairSurrogate(e, s - 1),
                s++,
                o++
            }
            return s
        }
        static countSymbols(e) {
            let t = e.length;
            const i = e.length;
            for (let n = 0; n < i; n++)
                d._isSurogate(e.charCodeAt(n)) && (++n >= i && !d._isSurogate(e.charCodeAt(n)) && d._assertMissingPairSurrogate(e, n - 1),
                t--);
            return t
        }
        static getFirstEmoji(e) {
            const t = e.match(c);
            return t ? t[0] : null
        }
        static substr(e, t, i) {
            let n = d._symbolsOffset(e, 0, t);
            const o = d._symbolsOffset(e, n, i);
            return e.substring(n, o)
        }
        static _formatInternal(e, t, i) {
            for (let n in t)
                t.hasOwnProperty(n) && (e = e.replace("{" + n + "}", i(t[n])));
            return e
        }
        static asString(e) {
            if (null === e)
                return "null";
            if (void 0 === e)
                return "undefined";
            let t = typeof e;
            return "string" === t ? e : "number" === t || "boolean" === t ? String(e) : "function" === t ? "" : JSON.stringify(e)
        }
        static errorAsString(e) {
            let t;
            return t = e && e.code && e.message ? e.code + ":" + e.message : e instanceof Error ? e.toString() : e && e.errorMessage ? e.errorMessage : d.asString(e),
            n.pii.Omit(t)
        }
        static shorten(e, t=0) {
            if (!e || 0 === t)
                return e;
            let i = e;
            return i.length > t && (i = d.substr(i, 0, t - 3) + "…"),
            i
        }
        static parseVersion(e) {
            if (!e)
                return;
            const t = e.split(".");
            return {
                major: parseInt(t[0], 10) || 0,
                minor: parseInt(t[1], 10) || 0,
                build: parseInt(t[2], 10) || 0,
                revision: parseInt(t[3], 10) || 0
            }
        }
        static compareVersions(e, t) {
            if (e === t)
                return 0;
            if (!e)
                return -1;
            if (!t)
                return 1;
            const i = d.parseVersion(e)
              , n = d.parseVersion(t);
            return i.major > n.major ? 1 : i.major < n.major ? -1 : i.minor > n.minor ? 1 : i.minor < n.minor ? -1 : i.build > n.build ? 1 : i.build < n.build ? -1 : i.revision > n.revision ? 1 : i.revision < n.revision ? -1 : 0
        }
        static startsWithUnicodeLetter(e) {
            return !!e && l.test(e[0])
        }
        static getFirstCharFromDeburredString(e) {
            if (!this.startsWithUnicodeLetter(e))
                return;
            const t = this.deburrLocaleUpperCase(e[0]);
            return t ? t[0] : void 0
        }
        static parseJsonErrorable(e) {
            return o.attempt(()=>JSON.parse(e))
        }
        static parseJsonWithDefault(e, t) {
            if (!e)
                return t;
            const i = this.parseJsonErrorable(e);
            return o.isError(i) ? (r.error(s.LogTraceArea.GenericUnsafe, "Error parsing JSON: " + this.errorAsString(i) + " , Content: " + n.pii.Omit(e)),
            t) : i
        }
        static parseJsonErrorToUndefined(e) {
            return this.parseJsonWithDefault(e, void 0)
        }
        static toUpper(e) {
            return o.toUpper(e)
        }
        static _replacePlaceholder(e, t, i) {
            let n = [];
            return o.each(e, e=>{
                if ("string" == typeof e) {
                    const o = e.split("{" + t + "}");
                    2 === o.length ? (n.push(o[0]),
                    n.push(i),
                    n.push(o[1])) : n.push(e)
                } else
                    n.push(e)
            }
            ),
            n
        }
        static getParts(e, t) {
            let i = [e];
            return o.each(t, (e,t)=>{
                i = this._replacePlaceholder(i, t, e)
            }
            ),
            i
        }
        static safeDecodeURIComponent(e) {
            const t = o.attempt(()=>decodeURIComponent(e));
            if (!o.isError(t))
                return t;
            r.error(s.LogTraceArea.GenericUnsafe, `${t.message}: ${e}`)
        }
        static parseArguments(e) {
            let t, i, n = [], s = !1;
            for (let r = 0; r < e.length; r++) {
                const a = e.charAt(r);
                o.isUndefined(t) ? a === a.trim() && ("'" === a || '"' === a ? (i = a,
                t = r + 1) : t = r) : s || "\\" !== a ? !s && (a !== a.trim() && o.isUndefined(i) || a === i) ? (n.push(e.substring(t, r)),
                t = void 0,
                i = void 0) : s = !1 : s = !0
            }
            return !o.isUndefined(t) && o.isUndefined(i) && n.push(e.substring(t)),
            o.map(n, e=>e.replace(/\\n/g, "\n").replace(/\\r/g, "\r").replace(/\\t/g, "\t").replace(/\\(.)/g, "$1"))
        }
    }
    e.exports = d
}
, function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(52)
      , a = i(7);
    var l;
    !function(e) {
        e[e.userCidUpdated = 0] = "userCidUpdated",
        e[e.userGuestUpdated = 1] = "userGuestUpdated"
    }(l || (l = {}));
    let c = class extends s.StoreBase {
        constructor() {
            super(...arguments),
            this._logoutStarted = !1,
            this._mris = [],
            this.TextMessageMeMri = "21:ME",
            this.userLoggedInUpdatedEvent = new r.default
        }
        internal_feedInfo(e, t, i, n, o, s) {
            const r = [];
            e && e !== this._skypeId && (this._skypeId = e,
            this.userLoggedInUpdatedEvent.fire(!0),
            r.push(l.userGuestUpdated)),
            t && (this._msaId = t),
            i && this._cid !== i && (this._cid = i,
            r.push(l.userCidUpdated)),
            n && (this._cidHex = n);
            let a = [this.getSkypeMri()];
            if (this._msaId && a.push("1:" + this._msaId),
            this._mris = a,
            this._cid) {
                const e = this._cidDeferred;
                e && (this._cidDeferred = void 0,
                e.resolve(this._cid))
            }
            if (this._cidHex) {
                const e = this._cidHexDeferred;
                e && (this._cidHexDeferred = void 0,
                e.resolve(this._cidHex))
            }
            o && (this._msaIdFromSignIn = o),
            s && (this._anid = s),
            r.length && this.trigger(r)
        }
        getSkypeId() {
            return this._skypeId
        }
        hasSkypeId() {
            return !!this._skypeId
        }
        hasLogoutStarted() {
            return this._logoutStarted
        }
        logoutUser() {
            this.isUserLoggedIn() && (this._logoutStarted = !0,
            this.userLoggedInUpdatedEvent.fire(!1))
        }
        isUserLoggedIn() {
            return this._skypeId && !this._logoutStarted
        }
        getDisplayableSecondaryIdentifier() {
            const e = this.getSkypeId();
            return o.startsWith(e, "live:") ? this.getMsaId() : e
        }
        getMsaId() {
            return this._msaId
        }
        getUserCidHex() {
            return this._cidHex ? this._cidHex : void 0
        }
        getUserCidHexAsync() {
            return this._cidHex ? a.Resolved(this._cidHex) : (this._cidHexDeferred || (this._cidHexDeferred = a.Defer()),
            this._cidHexDeferred.promise())
        }
        getSkypeMri() {
            return "8:" + this._skypeId
        }
        isMyMri(e) {
            return o.includes(this._mris, e) || e.toLowerCase() === this.TextMessageMeMri.toLowerCase()
        }
        getMyMris() {
            return o.clone(this._mris)
        }
        getUserCidAsync() {
            return this._cid ? a.Resolved(this._cid) : (this._cidDeferred || (this._cidDeferred = a.Defer()),
            this._cidDeferred.promise())
        }
        getUserCid() {
            return this._cid ? this._cid : void 0
        }
        getMsaIdFromSignIn() {
            return this._msaIdFromSignIn
        }
        isGuestUser() {
            return o.startsWith(this._skypeId, "guest:")
        }
        getAnid() {
            return this._anid
        }
        test_reset() {
            0
        }
    }
    ;
    n.__decorate([s.disableWarnings], c.prototype, "getSkypeId", null),
    n.__decorate([s.disableWarnings], c.prototype, "hasSkypeId", null),
    n.__decorate([s.disableWarnings], c.prototype, "hasLogoutStarted", null),
    n.__decorate([s.disableWarnings], c.prototype, "logoutUser", null),
    n.__decorate([s.disableWarnings], c.prototype, "isUserLoggedIn", null),
    n.__decorate([s.disableWarnings], c.prototype, "getDisplayableSecondaryIdentifier", null),
    n.__decorate([s.disableWarnings], c.prototype, "getMsaId", null),
    n.__decorate([s.disableWarnings], c.prototype, "getUserCidHex", null),
    n.__decorate([s.disableWarnings], c.prototype, "getUserCidHexAsync", null),
    n.__decorate([s.disableWarnings], c.prototype, "getSkypeMri", null),
    n.__decorate([s.disableWarnings], c.prototype, "isMyMri", null),
    n.__decorate([s.disableWarnings], c.prototype, "getMyMris", null),
    n.__decorate([s.disableWarnings], c.prototype, "getUserCidAsync", null),
    n.__decorate([s.autoSubscribeWithKey(l.userCidUpdated)], c.prototype, "getUserCid", null),
    n.__decorate([s.disableWarnings], c.prototype, "getMsaIdFromSignIn", null),
    n.__decorate([s.disableWarnings], c.prototype, "isGuestUser", null),
    c = n.__decorate([s.AutoSubscribeStore], c),
    e.exports = new c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(13)
      , s = i(7)
      , r = i(19);
    function a(e) {
        return "function" == typeof e ? e() : e
    }
    let l = []
      , c = [];
    function d(e) {
        return e = a(e),
        n.find(l, t=>t.startupable === e).isComplete
    }
    function u(e, t) {
        if (n.isArrayLike(e) && "function" != typeof e) {
            const i = e.map(a);
            return s.all(n.map(i, e=>h(e, t))).then(n.noop)
        }
        return h(a(e), t)
    }
    function g(e) {
        const t = n.find(l, t=>t.startupable === e);
        return t
    }
    function h(e, i) {
        const a = g(e);
        if (!a)
            return s.Rejected("Object not registered for startup: " + S(e));
        if (a.isComplete)
            return s.Resolved();
        if (a.startupPromise)
            return a.startupPromise;
        const d = s.Defer();
        a.startupPromise = d.promise();
        const h = Date.now();
        let C;
        return function() {
            0 === m && (p = setInterval(()=>{
                const e = n.map(n.filter(l, e=>!e.isComplete && !!e.startupPromise), e=>e.name);
                t.NormalInstrumentationSink && e.length > 0 && t.NormalInstrumentationSink("Still Starting Up: " + e.join(", "))
            }
            , 2e3));
            m++
        }(),
        u(a.dependencies, i).then(()=>{
            t.DetailedInstrumentationSink && (C = Date.now(),
            t.DetailedInstrumentationSink("Starting: " + a.name + (a.dependencies.length > 0 ? ", Deps Finish: " + (C - h) + "ms" : "")));
            const i = n.attempt(()=>e.startup());
            return n.isError(i) ? s.Rejected(i) : i
        }
        ).finally(()=>{
            m--,
            0 === m && (clearInterval(p),
            p = void 0)
        }
        ).then(()=>{
            if (a.isComplete = !0,
            a.startupPromise = void 0,
            t.DetailedInstrumentationSink) {
                const e = Date.now() - C;
                t.DetailedInstrumentationSink("Finish: " + a.name + ": " + e + "ms")
            }
            i && e instanceof o.StoreBase && c.push(e),
            function() {
                if (0 === m && c.length > 0) {
                    o.StoreBase.pushTriggerBlock();
                    const e = c;
                    c = [],
                    n.each(e, e=>{
                        const t = e;
                        n.isFunction(t.trigger) && t.trigger()
                    }
                    ),
                    o.StoreBase.popTriggerBlock()
                }
            }(),
            d.resolve(void 0)
        }
        , e=>{
            t.DetailedInstrumentationSink && t.DetailedInstrumentationSink("Startup Error: " + a.name + ": " + r.errorAsString(e)),
            d.reject(e)
        }
        ),
        d.promise()
    }
    t.RegisterStartupable = function(e, t, i=[]) {
        if (n.find(l, t=>t.startupable === e))
            return;
        const o = {
            startupable: e,
            name: t,
            dependencies: i.map(a),
            startupPromise: void 0,
            isComplete: !1
        };
        l.push(o)
    }
    ,
    t.HasStarted = d,
    t.EnsureStartedExclusive = function(e, t=!1) {
        const i = n.map(e, i=>{
            const o = g(i);
            if (!o)
                return s.Rejected("Object not registered for startup: " + S(i));
            const r = n.find(o.dependencies, t=>!n.includes(e, t));
            return r ? s.Rejected("Missing startup dependency: " + S(r)) : h(i, t)
        }
        );
        return s.all(i).then(n.noop)
    }
    ,
    t.EnsureStartedOnly = function(e, t, i=!1) {
        const o = g(e = a(e));
        if (!o)
            return s.Rejected("Object not registered for startup: " + S(e));
        const r = n.find(o.dependencies, e=>!n.includes(t, e) || !d(e));
        return r ? s.Rejected("Missing startup dependency: " + S(r)) : h(e, i)
    }
    ,
    t.EnsureStarted = function(e) {
        return u(e, !1)
    }
    ;
    let p, m = 0;
    function S(e) {
        const t = n.find(l, t=>t.startupable === e);
        if (t)
            return t.name;
        const i = /function (.{1,})\(/.exec(e.constructor.toString());
        return i && i.length > 1 ? i[1] : ""
    }
    t.test_reset = function() {
        n.each(l, e=>{
            e.isComplete = !1,
            e.startupPromise = void 0
        }
        )
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(7)
      , r = i(2)
      , a = i(3)
      , l = i(32)
      , c = i(62)
      , d = i(2405)
      , u = i(24)
      , g = i(275)
      , h = i(21)
      , p = i(388);
    var m;
    !function(e) {
        e[e.NavContextType = 0] = "NavContextType",
        e[e.SplitViewMode = 1] = "SplitViewMode"
    }(m = t.TriggerKeys || (t.TriggerKeys = {}));
    let S = class extends o.StoreBase {
        constructor() {
            super(),
            this._usingStackNavContext = !1,
            this._maybeUseStackNavigation = ()=>{
                this._shouldUseStackNavigation().then(e=>{
                    this._usingStackNavContext !== e && (this._usingStackNavContext = e,
                    a.log(r.LogTraceArea.Navigation, "NavigationContextStore: updating use stack navigation: " + this._usingStackNavContext),
                    this.trigger(m.NavContextType))
                }
                )
            }
            ,
            h.RegisterStartupable(this, "NavigationContextStore", [u.default, l.default])
        }
        startup() {
            return a.log(r.LogTraceArea.Navigation, "NavigationContextStore start"),
            this._shouldUseStackNavigation().then(e=>{
                const t = this._usingStackNavContext !== e;
                this._usingStackNavContext = e,
                a.log(r.LogTraceArea.Navigation, "NavigationContextStore: At startup, use stack navigation: " + this._usingStackNavContext),
                l.default.subscribe(this._maybeUseStackNavigation),
                u.default.subscribe(this._maybeUseStackNavigation),
                t && this.trigger(m.NavContextType),
                a.log(r.LogTraceArea.Navigation, "NavigationContextStore: finished startup")
            }
            )
        }
        isUsingStackNavigationContext() {
            return this._usingStackNavContext
        }
        isUsingStackNavigationContextNoSubscription() {
            return this._usingStackNavContext
        }
        isUsingSplitView() {
            return p.default.isSplitViewSupported() && !!c.default.getUserAppearancePreferencesForCurrentPlatformNoSubscription().splitViewEnabled
        }
        isUsingSplitViewNoSubscription() {
            return p.default.isSplitViewSupported() && !!c.default.getUserAppearancePreferencesForCurrentPlatformNoSubscription().splitViewEnabled
        }
        setSplitViewMode(e) {
            a.track(new g.SplitViewTelemetryEvent(e)),
            c.default.setUserAppearancePreferencesForCurrentPlatform({
                splitViewEnabled: e
            }),
            this.trigger(m.SplitViewMode)
        }
        _shouldUseStackNavigation() {
            return l.default.getUserPreferencesLocal().useStackNavOnNarrowDesktop ? d.default.shouldUseStackNavigationFromScreenSize() : (a.log(r.LogTraceArea.Navigation, "NavigationContextStore._shouldUseStackNavigation: Using non-RN shell, returning false"),
            s.Resolved(!1))
        }
    }
    ;
    n.__decorate([o.autoSubscribeWithKey(m.NavContextType)], S.prototype, "isUsingStackNavigationContext", null),
    n.__decorate([o.disableWarnings], S.prototype, "isUsingStackNavigationContextNoSubscription", null),
    n.__decorate([o.autoSubscribeWithKey(m.SplitViewMode)], S.prototype, "isUsingSplitView", null),
    n.__decorate([o.disableWarnings], S.prototype, "isUsingSplitViewNoSubscription", null),
    S = n.__decorate([o.AutoSubscribeStore], S);
    let C = new S;
    t.default = C
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(791)
      , s = i(10)
      , r = i(5)
      , a = i(8)
      , l = i(234)
      , c = i(109)
      , d = i(92)
      , u = i(9);
    class g {
        static _textStyle(e, t) {
            return g._createTextStyle(e, t)
        }
        static _createTextStyle(e, t) {
            let i = [e.toString(), "|", t.toString()].join("")
              , o = g.textStylesCache[i];
            if (!o) {
                const s = l.themeStylesForTheme(t);
                let r, a;
                switch (e) {
                case c.TextStyleCategories.Subtitle:
                    r = g.fontStyle.subtitle,
                    a = s.secondaryTextColorStyle;
                    break;
                case c.TextStyleCategories.Caption:
                    r = g.fontStyle.caption,
                    a = s.secondaryTextColorStyle;
                    break;
                case c.TextStyleCategories.SelectedCaption:
                    r = g.fontStyle.captionSelected,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.CaptionSmall:
                    r = g.fontStyle.captionSmall,
                    a = s.secondaryTextColorStyle;
                    break;
                case c.TextStyleCategories.SelectedCaptionSmall:
                    r = g.fontStyle.captionSmallBold,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.RowTitle:
                    r = g.fontStyle.rowTitle,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.Body:
                    r = g.fontStyle.body,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.BodyBold:
                    r = g.fontStyle.bodyBold,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.BodyBig:
                    r = g.fontStyle.bodyBigDeprecated,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.BodyBigBold:
                    r = g.fontStyle.bodyBigBoldDeprecated,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.BodySmall:
                    r = g.fontStyle.bodySmallDeprecated,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.BodySmallBold:
                    r = g.fontStyle.bodySmallBoldDeprecated,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.MessagingHeader:
                    r = g.fontStyle.messagingHeader,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.MessagingHeaderSmall:
                    r = g.fontStyle.messagingHeaderSmall,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.CardTitle:
                    r = g.fontStyle.cardTitle,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.CardTitleSmall:
                    r = g.fontStyle.cardTitleSmall,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.PanelHeader:
                    r = g.fontStyle.panelHeader,
                    a = s.primaryTextColorStyle;
                    break;
                case c.TextStyleCategories.PanelHeaderLandscape:
                    r = g.fontStyle.panelHeaderLandscape,
                    a = s.primaryTextColorStyle;
                    break;
                default:
                    u.switchStatementExhaustiveChecking(e)
                }
                o = n.Styles.combine(r || [], a || []),
                g.textStylesCache[i] = o
            }
            return o
        }
        static rowTitleFontStyle(e) {
            const t = e || d.colorThemeNoSubscription();
            return g._textStyle(c.TextStyleCategories.RowTitle, t)
        }
        static subtitleFontStyle(e) {
            const t = e || d.colorThemeNoSubscription();
            return g._textStyle(c.TextStyleCategories.Subtitle, t)
        }
        static captionFontStyle(e) {
            const t = e || d.colorThemeNoSubscription();
            return g._textStyle(c.TextStyleCategories.Caption, t)
        }
        static selectedCaptionFontStyle(e) {
            const t = e || d.colorThemeNoSubscription();
            return g._textStyle(c.TextStyleCategories.SelectedCaption, t)
        }
        static captionSmallFontStyle(e) {
            const t = e || d.colorThemeNoSubscription();
            return g._textStyle(c.TextStyleCategories.CaptionSmall, t)
        }
        static selectedCaptionSmallFontStyle(e) {
            const t = e || d.colorThemeNoSubscription();
            return g._textStyle(c.TextStyleCategories.SelectedCaptionSmall, t)
        }
        static bodyFontStyle(e, t) {
            const i = e || d.colorThemeNoSubscription();
            let n;
            switch (t) {
            case s.BodyTextSize.BigDeprecated:
                n = c.TextStyleCategories.BodyBig;
                break;
            case s.BodyTextSize.SmallDeprecated:
                n = c.TextStyleCategories.BodySmall;
                break;
            default:
                n = c.TextStyleCategories.Body
            }
            return g._textStyle(n, i)
        }
        static bodyBoldFontStyle(e, t) {
            const i = e || d.colorThemeNoSubscription();
            let n;
            switch (t) {
            case s.BodyTextSize.BigDeprecated:
                n = c.TextStyleCategories.BodyBigBold;
                break;
            case s.BodyTextSize.SmallDeprecated:
                n = c.TextStyleCategories.BodySmallBold;
                break;
            default:
                n = c.TextStyleCategories.BodyBold
            }
            return g._textStyle(n, i)
        }
        static cardTitleFontStyle(e, t) {
            const i = e || d.colorThemeNoSubscription();
            return g._textStyle(t ? c.TextStyleCategories.CardTitleSmall : c.TextStyleCategories.CardTitle, i)
        }
        static messagingHeaderFontStyle(e, t, i, n) {
            const o = i || d.colorThemeNoSubscription();
            return e ? g.rowTitleFontStyle(o) : g._textStyle(t || n ? c.TextStyleCategories.MessagingHeaderSmall : c.TextStyleCategories.MessagingHeader, o)
        }
        static panelHeaderFontStyle(e=!1, t) {
            const i = t || d.colorThemeNoSubscription();
            return g._textStyle(e ? c.TextStyleCategories.PanelHeaderLandscape : c.TextStyleCategories.PanelHeader, i)
        }
    }
    g.textStylesCache = {},
    g.fontSize = {
        size13Deprecated: 13,
        size17Deprecated: 17,
        size18: 18,
        size20: 20,
        size32: 32
    },
    g.controlFontSize = {
        h0: 50,
        h1: 42,
        h2: 40,
        h3: 36,
        h4: 26,
        h5: 22,
        smallBadge: 10,
        tinyBadge: 8,
        caption: 12,
        captionSmall: 10,
        captionTiny: 9,
        subtitle: 12,
        body: 15,
        bodyBigDeprecated: 16,
        bodySmallDeprecated: 14,
        button: 15,
        smallButton: 12,
        largeButton: 18,
        rowTitle: 15,
        actionButtonLabel: 11,
        tabHeader: 15,
        tabHeaderSmall: 13,
        messagingHeaderSmall: 20,
        panelHeader: 18,
        panelHeaderTiny: 15,
        panelHeaderLarge: 24,
        headerSizeSmall: 24,
        cardTitle: 18,
        cardTitleSmall: 15,
        searchInput: 14,
        searchInputMobile: 15,
        searchFiltersTab: 14,
        dialpadNumber: 32,
        dialpadNumberLarge: 36,
        adaptiveCardTiny: 10,
        adaptiveCardSmall: 11,
        adaptiveCardDefault: 12,
        adaptiveCardMedium: 14,
        adaptiveCardLarge: 16,
        adaptiveCardMediumLarge: 20,
        adaptiveCardExtraLarge: 24,
        filterText: 13,
        captureMarkupText: 22,
        dialpadInput: 22,
        messageComposerMobile: 16,
        messageComposerDesktop: 14,
        messageStreamItemMobile: 17,
        messageStreamItemDesktop: 14,
        messageStreamQuoteAttributeMobile: 14,
        messageStreamQuoteAttributeDesktop: 12,
        webFooter: 11
    },
    g.tabUnderlineHeight = 2,
    g.messageTextLineHeight = 22,
    g.maxContentSizeMultiplier = 1.353,
    g.fontFamily = {
        monospace: o.Collection.MONOSPACE,
        uidDisplayRegular: o.Collection.DISPLAY_REGULAR,
        uidDisplayBold: o.Collection.DISPLAY_BOLD
    },
    g._fontFamily = {
        uidDisplayLight: o.Collection.DISPLAY_LIGHT,
        uidDisplaySemibold: o.Collection.DISPLAY_SEMIBOLD
    },
    g.font = {
        uiDisplayRegular: {
            fontFamily: g.fontFamily.uidDisplayRegular,
            fontWeight: s.FontWeight.regular
        },
        uiDisplaySemibold_DEPRECATED: {
            fontFamily: g._fontFamily.uidDisplaySemibold,
            fontWeight: s.FontWeight.regular
        },
        uiDisplayBold: {
            fontFamily: g.fontFamily.uidDisplayBold,
            fontWeight: s.FontWeight.regular
        }
    },
    g._fontNext = {
        uiDisplayLight: {
            fontFamily: g._fontFamily.uidDisplayLight
        }
    },
    g.fontStyle = r.lazyProperties({
        h0: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.h0,
            color: a.Color.gray400
        }),
        h1: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.h1,
            color: a.Color.gray400
        }),
        h2: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.h2,
            color: a.Color.gray400
        }),
        h3: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.h3,
            color: a.Color.gray400
        }),
        h4: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.h4,
            color: a.Color.gray400
        }),
        h5: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.h5
        }),
        body: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayRegular,
            fontSize: g.controlFontSize.body
        }),
        bodyBold: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.body
        }),
        bodyBigDeprecated: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayRegular,
            fontSize: g.controlFontSize.bodyBigDeprecated
        }),
        bodyBigBoldDeprecated: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.bodyBigDeprecated
        }),
        bodySmallDeprecated: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayRegular,
            fontSize: g.controlFontSize.bodySmallDeprecated
        }),
        bodySmallBoldDeprecated: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.bodySmallDeprecated
        }),
        caption: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayRegular,
            fontSize: g.controlFontSize.caption,
            color: a.Color.gray300
        }),
        captionSelected: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.caption
        }),
        captionSmall: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayRegular,
            fontSize: g.controlFontSize.captionSmall,
            color: a.Color.gray300
        }),
        captionSmallBold: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.captionSmall
        }),
        primaryButtonLarge: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.largeButton,
            textAlign: "center"
        }),
        secondaryButton: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayRegular,
            fontSize: g.controlFontSize.largeButton
        }),
        tertiaryButton: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayRegular,
            fontSize: g.controlFontSize.smallButton
        }),
        rowTitle: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.rowTitle,
            color: a.Color.gray400
        }),
        subtitle: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.subtitle,
            color: a.Color.gray300
        }),
        messagingHeader: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.panelHeaderLarge
        }),
        messagingHeaderSmall: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.messagingHeaderSmall
        }),
        panelHeader: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.panelHeader
        }),
        panelHeaderLandscape: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.panelHeaderTiny
        }),
        cardTitle: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.cardTitle,
            color: a.Color.gray400
        }),
        cardTitleSmall: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.cardTitleSmall,
            color: a.Color.gray400
        }),
        cardAction: ()=>n.Styles.createTextStyle({
            font: g.font.uiDisplayBold,
            fontSize: g.controlFontSize.button
        })
    }),
    g.fontStyleNext = r.lazyProperties({
        h0Light: ()=>n.Styles.createTextStyle({
            font: g._fontNext.uiDisplayLight,
            fontSize: g.controlFontSize.h0,
            color: a.Color.gray400
        }),
        h1Light: ()=>n.Styles.createTextStyle({
            font: g._fontNext.uiDisplayLight,
            fontSize: g.controlFontSize.h1,
            color: a.Color.gray400
        }),
        h2Light: ()=>n.Styles.createTextStyle({
            font: g._fontNext.uiDisplayLight,
            fontSize: g.controlFontSize.h2,
            color: a.Color.gray400
        }),
        h3Light: ()=>n.Styles.createTextStyle({
            font: g._fontNext.uiDisplayLight,
            fontSize: g.controlFontSize.h3,
            color: a.Color.gray400
        }),
        h4Light: ()=>n.Styles.createTextStyle({
            font: g._fontNext.uiDisplayLight,
            fontSize: g.controlFontSize.h4,
            color: a.Color.gray400
        }),
        h5Light: ()=>n.Styles.createTextStyle({
            font: g._fontNext.uiDisplayLight,
            fontSize: g.controlFontSize.h5
        })
    }),
    e.exports = g
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(36)
      , r = i(0)
      , a = i(13)
      , l = i(7)
      , c = i(89)
      , d = i(10)
      , u = i(2)
      , g = i(3)
      , h = i(490)
      , p = i(34)
      , m = i(21)
      , S = i(19)
      , C = i(18)
      , y = i(25)
      , f = i(9);
    var _, b;
    !function(e) {
        e[e.Orientation = 0] = "Orientation",
        e[e.ResponsiveWidth = 1] = "ResponsiveWidth",
        e[e.Width = 2] = "Width",
        e[e.Height = 3] = "Height",
        e[e.ContentSizeMultiplier = 4] = "ContentSizeMultiplier",
        e[e.SplitScreenIPad = 5] = "SplitScreenIPad"
    }(_ = t.TriggerKeys || (t.TriggerKeys = {})),
    function(e) {
        e.Small = "Small",
        e.Medium = "Medium",
        e.Large = "Large"
    }(b = t.DeviceSize || (t.DeviceSize = {}));
    let v = class extends a.StoreBase {
        constructor() {
            super(),
            this._rawWidth = {
                [d.MainRootViewId]: 0
            },
            this._rawHeight = {
                [d.MainRootViewId]: 0
            },
            this._responsiveWidth = {
                [d.MainRootViewId]: y.ResponsiveWidth.Medium
            },
            this._deviceOrientation = {
                [d.MainRootViewId]: s.DeviceOrientation.Landscape
            },
            this._contentSizeMultiplier = 1,
            this._isSplitScreenIPad = !1,
            this._updateSplitScreen = e=>{
                this._isSplitScreenIPad !== e && (g.log(u.LogTraceArea.ResponsiveWidthStore, "iPad split screen updated: " + e),
                this._isSplitScreenIPad = e,
                this.trigger(_.SplitScreenIPad))
            }
            ,
            m.RegisterStartupable(this, "ResponsiveWidthStore")
        }
        startup() {
            if (r.UserInterface.getContentSizeMultiplier().then(e=>{
                e && (this._contentSizeMultiplier = e)
            }
            ),
            r.UserInterface.contentSizeMultiplierChangedEvent.subscribe(e=>{
                e && e !== this._contentSizeMultiplier && (this._contentSizeMultiplier = e,
                this.trigger(_.ContentSizeMultiplier))
            }
            ),
            C.getIOSModel() === u.IOSModel.iPad && (s.default.isSplitScreen().then(e=>{
                g.log(u.LogTraceArea.ResponsiveWidthStore, "Split screen initial value: " + e),
                this._updateSplitScreen(e)
            }
            ),
            s.default.addSplitScreenEventListener("splitScreenSubscriptionKey", this._updateSplitScreen)),
            !this._rawWidth[d.MainRootViewId] || !this._rawHeight[d.MainRootViewId] || C.getPlatformType() !== u.PlatformType.iOS) {
                const {width: e, height: t} = r.UserInterface.measureWindow();
                this.putWindowSize(e, t, d.MainRootViewId)
            }
            return C.getPlatformType() === u.PlatformType.Android && (this._activationSubToken = c.default.subscribeForChanges("ResponsiveWidthStore", e=>{
                if (e === r.Types.AppActivationState.Active) {
                    const e = f.newCauseId();
                    g.log(u.LogTraceArea.ResponsiveWidthStore, "App state changed, causeId: " + e),
                    this._checkDeviceOrientation(e)
                }
            }
            )),
            l.Resolved()
        }
        putWindowSize(e, t, i) {
            const n = []
              , o = f.newCauseId();
            let r = this._rawWidth[i] !== e;
            if (r) {
                this._rawWidth[i] = e,
                g.log(u.LogTraceArea.ResponsiveWidthStore, "New width: " + e + " rootViewId: " + p.mriOrId(i) + " causeId: " + o),
                n.push(a.formCompoundKey(i, _.Width));
                const t = h.default.responsiveWidthForSize(e);
                this._responsiveWidth[i] !== t && (this._responsiveWidth[i] = t,
                g.log(u.LogTraceArea.ResponsiveWidthStore, "New Responsive Width: " + t + " rootViewId: " + p.mriOrId(i) + " causeId: " + o),
                n.push(a.formCompoundKey(i, _.ResponsiveWidth)))
            }
            this._rawHeight[i] !== t && (this._rawHeight[i] = t,
            g.log(u.LogTraceArea.ResponsiveWidthStore, "New height: " + t + " rootViewId: " + p.mriOrId(i) + " causeId: " + o),
            n.push(a.formCompoundKey(i, _.Height)));
            const l = this.windowDimensionsNoSubscription(i)
              , c = l.width > l.height ? s.DeviceOrientation.Landscape : s.DeviceOrientation.Portrait;
            c !== this._deviceOrientation[i] && (this._deviceOrientation[i] = c,
            g.log(u.LogTraceArea.ResponsiveWidthStore, "New orientation from width update: " + c + " window dimensions, w: " + l.width + " h: " + l.height + " rootViewId: " + p.mriOrId(i) + " causeId: " + o),
            n.push(a.formCompoundKey(i, _.Orientation))),
            this.trigger(n),
            r && C.getPlatformType() === u.PlatformType.Android && this._checkDeviceOrientation(o)
        }
        destroy() {
            this._activationSubToken && (this._activationSubToken.unsubscribe(),
            this._activationSubToken = void 0),
            s.default.removeSplitScreenEventListener("splitScreenSubscriptionKey")
        }
        getWidth(e) {
            return this._rawWidth[e] || 0
        }
        getWidthNoSubscription(e) {
            return this._rawWidth[e] || 0
        }
        getHeight(e) {
            return this._rawHeight[e] || 0
        }
        getHeightNoSubscription(e) {
            return this._rawHeight[e] || 0
        }
        getResponsiveWidth(e) {
            return this._responsiveWidthForRootViewId(e)
        }
        isMobileScreenSize(e) {
            return this._responsiveWidthForRootViewId(e) <= y.ResponsiveWidth.Tiny
        }
        getDeviceOrientation(e) {
            return this._deviceOrientation[e]
        }
        isSmallOrTinyScreenSize(e) {
            return this._responsiveWidthForRootViewId(e) <= y.ResponsiveWidth.Small
        }
        isMinDesktopWidth(e) {
            return this._responsiveWidthForRootViewId(e) <= y.ResponsiveWidth.MinDesktop
        }
        getContentSizeMultiplier() {
            return this._contentSizeMultiplier
        }
        isSmallDevice(e) {
            return this.isSmallDeviceNoSubscription(e)
        }
        deviceSize(e) {
            return this.isSmallDeviceNoSubscription(e) ? b.Small : this.isMediumPhoneDeviceNoSubscription(e) ? b.Medium : b.Large
        }
        isSplitScreenIPad() {
            return this._isSplitScreenIPad
        }
        isSmallDesktopHeightView(e) {
            return this.isHeightSmallerThanThresholdNoSubscription(637, e)
        }
        isHeightSmallerThanThreshold(e, t) {
            return this.isHeightSmallerThanThresholdNoSubscription(e, t)
        }
        isWidthSmallerThanThreshold(e, t) {
            return this.isWidthSmallerThanThresholdNoSubscription(e, t)
        }
        isSplitScreenIPadNoSubscription() {
            return this._isSplitScreenIPad
        }
        isSmallDeviceNoSubscription(e) {
            return this.isWidthSmallerThanThresholdNoSubscription(320, e) || this.isHeightSmallerThanThresholdNoSubscription(320, e)
        }
        isMediumPhoneDeviceNoSubscription(e) {
            const t = this.windowDimensionsNoSubscription(e);
            return t.width && t.height || g.log(u.LogTraceArea.ResponsiveWidthStore, "No window width or height dimension for rootViewId:" + p.mriOrId(e)),
            t.width > 320 && t.width <= 400 || t.height > 320 && t.height <= 400
        }
        isHeightSmallerThanThresholdNoSubscription(e, t) {
            const i = this.windowDimensionsNoSubscription(t);
            return i.height || g.log(u.LogTraceArea.ResponsiveWidthStore, "No window height dimension for rootViewId:" + p.mriOrId(t)),
            i.height <= e
        }
        isWidthSmallerThanThresholdNoSubscription(e, t) {
            const i = this.windowDimensionsNoSubscription(t);
            return i.width || g.log(u.LogTraceArea.ResponsiveWidthStore, "No window width dimension for rootViewId:" + p.mriOrId(t)),
            i.width <= e
        }
        windowDimensionsNoSubscription(e) {
            return e === d.MainRootViewId ? r.UserInterface.measureWindow() : r.UserInterface.measureWindow(e)
        }
        _checkDeviceOrientation(e) {
            s.default.currentOrientation().then(t=>{
                g.log(u.LogTraceArea.ResponsiveWidthStore, "DeviceUtilities.currentOrientation: " + t + " causeId: " + e),
                t !== this._deviceOrientation[d.MainRootViewId] && (this._deviceOrientation[d.MainRootViewId] = t,
                g.log(u.LogTraceArea.ResponsiveWidthStore, "New orientation from DeviceUtilities: " + t + " causeId: " + e),
                this.trigger(_.Orientation))
            }
            ).catch(t=>{
                g.warn(u.LogTraceArea.ResponsiveWidthStore, "DeviceUtilities.currentOrientation failed: " + S.errorAsString(t) + " causeId: " + e)
            }
            )
        }
        _responsiveWidthForRootViewId(e) {
            let t = this._responsiveWidth[e];
            return o.isUndefined(t) && (t = y.ResponsiveWidth.Medium),
            t
        }
    }
    ;
    n.__decorate([a.autoSubscribeWithKey(_.Width), n.__param(0, a.key)], v.prototype, "getWidth", null),
    n.__decorate([a.disableWarnings], v.prototype, "getWidthNoSubscription", null),
    n.__decorate([a.autoSubscribeWithKey(_.Height), n.__param(0, a.key)], v.prototype, "getHeight", null),
    n.__decorate([a.disableWarnings], v.prototype, "getHeightNoSubscription", null),
    n.__decorate([a.autoSubscribeWithKey(_.ResponsiveWidth), n.__param(0, a.key)], v.prototype, "getResponsiveWidth", null),
    n.__decorate([a.autoSubscribeWithKey(_.ResponsiveWidth), n.__param(0, a.key)], v.prototype, "isMobileScreenSize", null),
    n.__decorate([a.autoSubscribeWithKey(_.Orientation), n.__param(0, a.key)], v.prototype, "getDeviceOrientation", null),
    n.__decorate([a.autoSubscribeWithKey(_.ResponsiveWidth), n.__param(0, a.key)], v.prototype, "isSmallOrTinyScreenSize", null),
    n.__decorate([a.autoSubscribeWithKey(_.ResponsiveWidth), n.__param(0, a.key)], v.prototype, "isMinDesktopWidth", null),
    n.__decorate([a.autoSubscribeWithKey(_.ContentSizeMultiplier)], v.prototype, "getContentSizeMultiplier", null),
    n.__decorate([a.autoSubscribeWithKey(_.Width), n.__param(0, a.key)], v.prototype, "isSmallDevice", null),
    n.__decorate([a.autoSubscribeWithKey(_.Width), n.__param(0, a.key)], v.prototype, "deviceSize", null),
    n.__decorate([a.autoSubscribeWithKey(_.SplitScreenIPad)], v.prototype, "isSplitScreenIPad", null),
    n.__decorate([a.autoSubscribeWithKey(_.Height), n.__param(0, a.key)], v.prototype, "isSmallDesktopHeightView", null),
    n.__decorate([a.autoSubscribeWithKey(_.Height), n.__param(1, a.key)], v.prototype, "isHeightSmallerThanThreshold", null),
    n.__decorate([a.autoSubscribeWithKey(_.Width), n.__param(1, a.key)], v.prototype, "isWidthSmallerThanThreshold", null),
    n.__decorate([a.disableWarnings], v.prototype, "isSplitScreenIPadNoSubscription", null),
    n.__decorate([a.disableWarnings], v.prototype, "isSmallDeviceNoSubscription", null),
    n.__decorate([a.disableWarnings], v.prototype, "isMediumPhoneDeviceNoSubscription", null),
    n.__decorate([a.disableWarnings], v.prototype, "isHeightSmallerThanThresholdNoSubscription", null),
    n.__decorate([a.disableWarnings], v.prototype, "isWidthSmallerThanThresholdNoSubscription", null),
    n.__decorate([a.disableWarnings], v.prototype, "windowDimensionsNoSubscription", null),
    v = n.__decorate([a.AutoSubscribeStore], v);
    const T = new v;
    t.default = T
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.MAX_SAFE_INTEGER = 9007199254740991] = "MAX_SAFE_INTEGER"
    }(t.NumberShim || (t.NumberShim = {})),
    function(e) {
        e[e.SystemInformational = 0] = "SystemInformational",
        e[e.Normal = 1] = "Normal",
        e[e.OneOnOne = 2] = "OneOnOne",
        e[e.MentionedOrQuoted = 3] = "MentionedOrQuoted"
    }(t.MessageNotificationClass || (t.MessageNotificationClass = {})),
    function(e) {
        e[e.Unspecified = 0] = "Unspecified",
        e[e.Male = 1] = "Male",
        e[e.Female = 2] = "Female"
    }(t.eGender || (t.eGender = {})),
    function(e) {
        e[e.Small = 0] = "Small",
        e[e.Medium = 1] = "Medium",
        e[e.Large = 2] = "Large"
    }(t.AvatarSize || (t.AvatarSize = {})),
    function(e) {
        e[e.Home = 0] = "Home",
        e[e.Office = 1] = "Office",
        e[e.Mobile = 2] = "Mobile",
        e[e.Other = 3] = "Other"
    }(t.PhoneNumberTypes || (t.PhoneNumberTypes = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Sticker = 1] = "Sticker",
        e[e.Snapshot = 2] = "Snapshot",
        e[e.Animation = 3] = "Animation",
        e[e.CallEvent = 4] = "CallEvent"
    }(t.ReactionsTextStyle || (t.ReactionsTextStyle = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.CallEventMuted = 1] = "CallEventMuted",
        e[e.CallEventKickedOut = 2] = "CallEventKickedOut"
    }(t.ReactionsTextType || (t.ReactionsTextType = {})),
    function(e) {
        e[e.Heart = 1] = "Heart",
        e[e.Yes = 2] = "Yes",
        e[e.CryWithLaughter = 3] = "CryWithLaughter",
        e[e.Surprised = 4] = "Surprised",
        e[e.Sarcastic = 5] = "Sarcastic",
        e[e.Cry = 6] = "Cry",
        e[e.Rock = 7] = "Rock",
        e[e.Devil = 8] = "Devil",
        e[e.Tongueout = 9] = "Tongueout",
        e[e.Shock = 10] = "Shock",
        e[e.Cash = 11] = "Cash",
        e[e.Bomb = 12] = "Bomb",
        e[e.Hi = 13] = "Hi",
        e[e.Sad = 14] = "Sad",
        e[e.Laugh = 15] = "Laugh",
        e[e.Monkey = 16] = "Monkey",
        e[e.Angry = 17] = "Angry"
    }(t.ReactionsEmoticon || (t.ReactionsEmoticon = {})),
    function(e) {
        e[e.MinDesktop = 0] = "MinDesktop",
        e[e.Tiny = 1] = "Tiny",
        e[e.Small = 2] = "Small",
        e[e.Medium = 3] = "Medium",
        e[e.Large = 4] = "Large"
    }(t.ResponsiveWidth || (t.ResponsiveWidth = {})),
    function(e) {
        e[e.None = 1] = "None",
        e[e.Current = 2] = "Current",
        e[e.Custom = 3] = "Custom",
        e[e.Search = 4] = "Search",
        e[e.NearBy = 5] = "NearBy"
    }(t.LocationType || (t.LocationType = {})),
    function(e) {
        e[e.Admin = 0] = "Admin",
        e[e.User = 1] = "User"
    }(t.ThreadMemberAccessType || (t.ThreadMemberAccessType = {})),
    function(e) {
        e[e.File = 1] = "File",
        e[e.Picture = 2] = "Picture",
        e[e.Thumbnail = 3] = "Thumbnail",
        e[e.Video = 4] = "Video",
        e[e.VideoMessage = 5] = "VideoMessage",
        e[e.Audio = 6] = "Audio",
        e[e.AudioMessage = 7] = "AudioMessage",
        e[e.GroupAvatar = 8] = "GroupAvatar",
        e[e.Excel = 9] = "Excel",
        e[e.OneNote = 10] = "OneNote",
        e[e.Powerpoint = 11] = "Powerpoint",
        e[e.Word = 12] = "Word"
    }(t.UploadFileType || (t.UploadFileType = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.IncomingRing = 1] = "IncomingRing",
        e[e.Call = 2] = "Call"
    }(t.AudioState || (t.AudioState = {})),
    function(e) {
        e[e.Camera = 0] = "Camera",
        e[e.CameraRoll = 1] = "CameraRoll",
        e[e.WriteCameraRoll = 2] = "WriteCameraRoll",
        e[e.Microphone = 3] = "Microphone",
        e[e.Contacts = 4] = "Contacts",
        e[e.Notifications = 5] = "Notifications",
        e[e.Location = 6] = "Location",
        e[e.LocationAlways = 7] = "LocationAlways",
        e[e.SendSms = 8] = "SendSms",
        e[e.ReadSms = 9] = "ReadSms",
        e[e.ReceiveSms = 10] = "ReceiveSms",
        e[e.ReadPhoneState = 11] = "ReadPhoneState",
        e[e.DrawOver = 12] = "DrawOver",
        e[e.MicrophoneAndCamera = 13] = "MicrophoneAndCamera",
        e[e.BackgroundExecution = 14] = "BackgroundExecution",
        e[e.Calendar = 15] = "Calendar",
        e[e.ScreenRecording = 16] = "ScreenRecording"
    }(t.PermissionType || (t.PermissionType = {})),
    function(e) {
        e[e.PromptAgainIfDenied = 1] = "PromptAgainIfDenied",
        e[e.SkipPrePrompt = 2] = "SkipPrePrompt",
        e[e.DontPrompt = 4] = "DontPrompt",
        e[e.SkipAugmentedWebPanel = 8] = "SkipAugmentedWebPanel"
    }(t.PermissionPromptOptions || (t.PermissionPromptOptions = {})),
    function(e) {
        e[e.Outgoing = 0] = "Outgoing",
        e[e.Incoming = 1] = "Incoming",
        e[e.Missed = 2] = "Missed"
    }(t.CallDirectionType || (t.CallDirectionType = {})),
    function(e) {
        e[e.DisplayName = 0] = "DisplayName",
        e[e.Participant = 1] = "Participant",
        e[e.PhoneNumber = 2] = "PhoneNumber",
        e[e.SkypeId = 3] = "SkypeId"
    }(t.TextToHighlightType || (t.TextToHighlightType = {})),
    function(e) {
        e[e.LaunchCamera = 0] = "LaunchCamera",
        e[e.LaunchSearch = 1] = "LaunchSearch",
        e[e.LaunchEmoticon = 2] = "LaunchEmoticon",
        e[e.LaunchMoji = 3] = "LaunchMoji",
        e[e.LaunchKeyboard = 4] = "LaunchKeyboard",
        e[e.CloseKeyboard = 5] = "CloseKeyboard",
        e[e.LaunchSticker = 6] = "LaunchSticker",
        e[e.LaunchGif = 7] = "LaunchGif"
    }(t.MediaBarCustomAction || (t.MediaBarCustomAction = {})),
    function(e) {
        e[e.Thumbnail = 0] = "Thumbnail",
        e[e.ThumbnailUncropped = 1] = "ThumbnailUncropped",
        e[e.ThumbnailBlurred = 2] = "ThumbnailBlurred",
        e[e.MobilePreview = 3] = "MobilePreview",
        e[e.Full = 4] = "Full"
    }(t.MediaViewSize || (t.MediaViewSize = {}))
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43)
      , s = i(49);
    t.simpleIcon = function(e, t, i, o, r, a) {
        const l = o ? s.paddedIconStyle(i, o, t, !0, a) : s.iconStyle(i, t, !0, a);
        return n.createElement(n.Text, {
            allowFontScaling: !1,
            importantForAccessibility: n.Types.ImportantForAccessibility.NoHideDescendants,
            style: [l, r]
        }, e)
    }
    ,
    t.simpleAnimatedIcon = function(e, t, i, o, r, a) {
        const l = o ? s.paddedIconStyle(i, o, t, !0, a) : s.iconStyle(i, t, !0, a);
        return n.createElement(n.Animated.Text, {
            allowFontScaling: !1,
            importantForAccessibility: n.Types.ImportantForAccessibility.NoHideDescendants,
            style: [l, r]
        }, e)
    }
    ;
    class r extends o.default {
        constructor() {
            super(...arguments),
            this._onContentRef = e=>{
                this._contentRef = e || void 0
            }
        }
        requestFocus() {
            this._contentRef && this._contentRef.requestFocus()
        }
        render() {
            const e = this.props
              , t = e.iconCollection || this._getContext().iconCollection
              , i = [e.padding ? s.paddedIconStyle(e.size, e.padding, e.color, !0, t) : s.iconStyle(e.size, e.color, !0, t), e.style]
              , o = Object.assign(Object.assign({}, e), {
                style: i
            })
              , r = this._isAnimated()
              , a = r ? n.Animated.Text : n.Text
              , l = r ? void 0 : this._onContentRef;
            return n.createElement(a, Object.assign({
                ref: l,
                allowFontScaling: !1,
                importantForAccessibility: n.Types.ImportantForAccessibility.NoHideDescendants
            }, o), o.icon)
        }
    }
    class a extends r {
        _isAnimated() {
            return !1
        }
    }
    t.IconView = a;
    t.AnimatedIconView = class extends r {
        _isAnimated() {
            return !0
        }
    }
    ,
    t.default = a
}
, function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(7)
      , a = i(138)
      , l = i(6)
      , c = i(16)
      , d = i(650)
      , u = i(653)
      , g = i(30)
      , h = i(954)
      , p = i(198)
      , m = i(20)
      , S = i(21)
      , C = i(1426)
      , y = i(45);
    let f = class extends s.StoreBase {
        constructor() {
            super(100),
            this._conversationsToTrack = {},
            this._handleConversationUpdates = e=>{
                const t = o.filter(e, e=>{
                    const t = this._conversationsToTrack[e];
                    if (!t)
                        return !1;
                    const i = g.default.getConversation(e);
                    return !!i && t.updateConversationAndCheckIfChanged(i)
                }
                );
                t.length > 0 && this.trigger(t)
            }
            ,
            S.RegisterStartupable(this, "DisplayInfoStore", [g.default, y])
        }
        startup() {
            return g.default.subscribe(this._handleConversationUpdates),
            y.subscribe(e=>{
                o.each(this._conversationsToTrack, (t,i)=>{
                    const n = g.default.getConversation(i);
                    o.each(e, e=>{
                        if (n && n.isUserMember(e))
                            return this._handleConversationUpdates([i]),
                            !1
                    }
                    )
                }
                ),
                this.trigger(e)
            }
            ),
            a.default.subscribe(e=>{
                const t = o.filter(e, e=>c.isMri(e));
                o.isEmpty(t) || this.trigger(t)
            }
            ),
            d.default.subscribe(e=>{
                const t = o.filter(e, e=>c.isMri(e));
                o.isEmpty(t) || this.trigger(t)
            }
            ),
            r.Resolved()
        }
        _startedTrackingKey(e) {
            if (!c.isThread(e) || this._conversationsToTrack[e])
                return;
            const t = g.default.getConversation(e);
            this._conversationsToTrack[e] = new u(e,t)
        }
        _stoppedTrackingKey(e) {
            delete this._conversationsToTrack[e]
        }
        getDisplayableProfilePotentiallyBeforeStartupAsync(e) {
            return S.HasStarted(this) ? r.Resolved(this.getDisplayableProfile(e)) : c.isThread(e) ? g.default.getConversationPotentiallyBeforeStartupAsync(e).then(t=>{
                const i = t && c.isOneOnOneConversation(e) ? t.getOtherPartyMri() : void 0;
                return i ? C.getDisplayableProfilePotentiallyBeforeStartupAsync(i).then(t=>c.isEncryptedThread(e) && t instanceof h.default ? o.clone(t).setConversationId(e) : t) : C.populateProfilesToCalculateConvDisplayName(t).then(()=>new u(e,t))
            }
            ) : C.getDisplayableProfilePotentiallyBeforeStartupAsync(e)
        }
        getDisplayableNamePotentiallyBeforeStartupAsync(e, t) {
            return this.getDisplayableProfilePotentiallyBeforeStartupAsync(e).then(i=>this._getDisplayName(e, i, t))
        }
        getDisplayableProfile(e) {
            if (c.isThread(e)) {
                const t = c.isOneOnOneConversation(e) ? g.default.getConversation(e) : void 0
                  , i = t ? t.getOtherPartyMri() : void 0;
                if (i) {
                    const t = C.getDisplayableProfile(i);
                    return c.isEncryptedThread(e) && t instanceof h.default ? o.clone(t).setConversationId(e) : t
                }
                if (!this._conversationsToTrack[e]) {
                    const t = g.default.getConversation(e);
                    return new u(e,t)
                }
                return this._conversationsToTrack[e]
            }
            return C.getDisplayableProfile(e)
        }
        getDisplayName(e, t) {
            const i = this._possiblyGetMatchingAddressBookContact(e);
            if (i)
                return i.getDisplayName();
            const n = this.getDisplayableProfile(e);
            return this._getDisplayName(e, n, t)
        }
        _getDisplayName(e, t, i) {
            const n = c.isAgent(e) || c.isConnector(e) ? void 0 : c.stripMriNamespace(e);
            return t ? t.getDisplayName(n, i) : n
        }
        _possiblyGetMatchingAddressBookContact(e) {
            let t, i;
            if (c.isPhoneMri(e) && (i = e),
            i) {
                const e = c.getPhoneNumberFromMri(i);
                t = e ? p.default.getContactByPhoneNumber(e) : void 0
            } else
                l.default.getS4LContactsFeatures().overrideWithAddressBookName && c.isUserMri(e) && !y.getDisplayableUserByMri(e).isManuallyAdded && (t = p.default.getContactByCorrespondingMri(e));
            return t
        }
        getShortDisplayName(e) {
            const t = this._possiblyGetMatchingAddressBookContact(e);
            if (t)
                return t.getShortName();
            const i = this.getDisplayableProfile(e);
            return i ? i.getShortName() : c.stripMriNamespace(e)
        }
        getMemberShortNameForConversation(e, t) {
            if (!c.isThread(e) || !this._conversationsToTrack[e])
                return this.getDisplayableProfile(t).getShortName();
            return this._conversationsToTrack[e].getMemberShortName(t)
        }
        getCurrentUserDisplayNameCensusParams() {
            const e = this.getDisplayName(m.getSkypeMri())
              , t = e ? e.split(" ") : []
              , i = t.length;
            let n = !1;
            return 2 === i && t[0] === t[1] && (n = !0),
            {
                displayNamePartsLength: i,
                firstAndSecondAreMatching: n
            }
        }
    }
    ;
    n.__decorate([s.disableWarnings], f.prototype, "_startedTrackingKey", null),
    n.__decorate([s.disableWarnings], f.prototype, "_stoppedTrackingKey", null),
    n.__decorate([s.autoSubscribe, n.__param(0, s.key)], f.prototype, "getDisplayableProfile", null),
    n.__decorate([s.autoSubscribe, n.__param(0, s.key)], f.prototype, "getDisplayName", null),
    n.__decorate([s.autoSubscribe, n.__param(0, s.key)], f.prototype, "getShortDisplayName", null),
    n.__decorate([s.autoSubscribe, n.__param(0, s.key)], f.prototype, "getMemberShortNameForConversation", null),
    n.__decorate([s.autoSubscribe], f.prototype, "getCurrentUserDisplayNameCensusParams", null),
    f = n.__decorate([s.AutoSubscribeStore], f),
    e.exports = new f
}
, , , , function(e, t, i) {
    "use strict";
    var n;
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const o = i(26)
      , s = i(1)
      , r = i(36)
      , a = (i(386),
    i(0))
      , l = i(13)
      , c = i(7)
      , d = i(6)
      , u = i(1407)
      , g = i(78)
      , h = i(48)
      , p = i(211)
      , m = i(2)
      , S = i(210)
      , C = i(3)
      , y = i(74)
      , f = i(38)
      , _ = i(4)
      , b = i(113)
      , v = i(249)
      , T = i(427)
      , P = i(772)
      , A = i(756)
      , k = (i(105),
    i(275))
      , I = i(21)
      , w = i(19)
      , N = (i(18),
    i(9));
    var M;
    !function(e) {
        e[e.speechConsentTranslator = 0] = "speechConsentTranslator",
        e[e.speechConsentSuggestion = 1] = "speechConsentSuggestion"
    }(M = t.LocalPreferencesTriggerKeys || (t.LocalPreferencesTriggerKeys = {}));
    let E = n = class extends l.StoreBase {
        constructor() {
            super(),
            this._preferencesLocal = {},
            I.RegisterStartupable(this, "MyUserPreferencesLocalStore", [y.default])
        }
        startup() {
            const e = y.default.getData(h.InternalKeys.PrefsLocal);
            this._preferencesLocal = e || {},
            e && e.locale ? (_.setLocale(e.locale),
            C.log(m.LogTraceArea.PreferencesStores, `Locale set from user preferences to [${e.locale}]`)) : ("undefined" != typeof window && void 0 !== window.electronApi && window.electronApi.ipcProvider.localisation.resetLocale.invoke(),
            C.log(m.LogTraceArea.PreferencesStores, "Locale set without user preferences to system default")),
            e && e.rtl && !A.ForceRTLBasedOnLanguage && a.International.forceRTL(!0);
            e && (!e.fileDownloadPathDesktop || e.fileDownloadDisplayNameDesktop),
            d.default.getS4LMessagingFeaturesNoSubscription().enableCustomFileDownloadLocation;
            return this.trigger(),
            c.Resolved()
        }
        reset() {
            this._preferencesLocal = {},
            y.default.putData(h.InternalKeys.PrefsLocal, this._preferencesLocal),
            this.trigger()
        }
        isShakeAndSendDisabled() {
            const e = this._preferencesLocal.disableShakeAndSend;
            if (!s.isUndefined(e))
                return C.log(m.LogTraceArea.PreferencesStores, "isShakeAndSendDisabled(): " + e),
                e;
            const t = d.default.getConfigSettings().brb.disableShakeAndSendByDefault;
            return C.log(m.LogTraceArea.PreferencesStores, `isShakeAndSendDisabled(): ${t} (default)`),
            t
        }
        getUserPreferencesLocal() {
            return s.extend({}, n._defaultPrefs, this._preferencesLocal)
        }
        getUserPreferencesLocalNoSubscription() {
            return s.extend({}, n._defaultPrefs, this._preferencesLocal)
        }
        internal_getUserPreferencesLocalDefaults() {
            return s.extend({}, n._defaultPrefs)
        }
        getUserPreferencesForConversationLocal(e) {
            return (this.getUserPreferencesLocal().conversationPrefs || {})[e] || {}
        }
        setUserPreferencesLocal(e) {
            const t = N.deepExtendIgnoringNulls(this._preferencesLocal, e);
            f.default(this._preferencesLocal, t) || (this._preferencesLocal.allowHugeEmoticons !== t.allowHugeEmoticons && C.track(new P.PesSettingsEvent(!!t.allowHugeEmoticons,d.default.getS4LMessagingFeatures().singleEmoticonSize,d.default.getS4LMessagingFeatures().emoticonsOnlyEmoticonSize)),
            this._preferencesLocal.enableInAppEngagementNotifications !== t.enableInAppEngagementNotifications && C.track(new p.EngagementSettingsTelemetryEvent({
                source: p.EngagementSettingsSource.TipsAndTricks,
                isToggled: !!t.enableInAppEngagementNotifications
            })),
            this._preferencesLocal.enablePushEngagementNotifications !== t.enablePushEngagementNotifications && C.track(new p.EngagementSettingsTelemetryEvent({
                source: p.EngagementSettingsSource.TipsAndTricksPush,
                isToggled: !!t.enablePushEngagementNotifications
            })),
            this._preferencesLocal.allowCallsFromContactsOnly !== t.allowCallsFromContactsOnly && C.track(new k.CallingSettingsEvent("AllowCallsFromContactsOnly",!!t.allowCallsFromContactsOnly)),
            this._preferencesLocal.openUrlInExternalBrowser !== t.openUrlInExternalBrowser && C.track(new v.OpenLinksInSkype(!t.openUrlInExternalBrowser)),
            this._preferencesLocal = t,
            y.default.putData(h.InternalKeys.PrefsLocal, this._preferencesLocal).fail(t=>{
                t instanceof u.CalledBeforeStartupError && (C.track(new S.FundamentalsDebugEvent("PutDataBeforeStartup",g.chain(g.keys(e), g.sortBy(s.identity), g.join(",")))),
                C.log(m.LogTraceArea.PreferencesStores, t.message))
            }
            ),
            this.trigger())
        }
        getCoachMarksSeen() {
            const e = this.getUserPreferencesLocal().seenCoachMarks
              , t = e ? w.parseJsonErrorable(e) : void 0;
            if (!s.isError(t)) {
                if (t && !s.isArray(t)) {
                    let e = [];
                    return s.each(t, t=>e = s.union(e, t)),
                    e
                }
                return t
            }
            C.warn(m.LogTraceArea.PreferencesStores, "Failed to parse seenCoachMark local preference.")
        }
        setCoachMarksSeen(e) {
            this.setUserPreferencesLocal({
                seenCoachMarks: e && JSON.stringify(e)
            })
        }
        getLastOpenedTabForUser(e) {
            return (this.getUserPreferencesLocal().lastOpenedTabs || {})[e]
        }
        setLastOpenedTabForUser(e, t) {
            const i = s.cloneDeep(this.getUserPreferencesLocal().lastOpenedTabs || {});
            i[e] = t,
            this.setUserPreferencesLocal({
                lastOpenedTabs: i
            })
        }
        removeLastUsedBackgroundEffects() {
            return this.setUserPreferencesLocal({
                lastUsedBackgroundEffects: void 0
            })
        }
        setAllLastUsedBackgroundEffects(e) {
            return this.setUserPreferencesLocal({
                lastUsedBackgroundEffects: JSON.stringify(e)
            })
        }
        setLastUsedBackgroundEffects(e) {
            const t = this.getUserPreferencesLocal().lastUsedBackgroundEffects
              , i = w.parseJsonWithDefault(t, []);
            if (-1 !== i.indexOf(e))
                return;
            const {numberOfVisibleLastUsedEffects: n} = d.default.getS4LCMCFeaturesNoSubscription();
            return i.length >= d.default.getS4LCMCFeaturesNoSubscription().numberOfVisibleLastUsedEffects ? this.setUserPreferencesLocal({
                lastUsedBackgroundEffects: JSON.stringify([...i.slice(-(n - 1)), e])
            }) : this.setUserPreferencesLocal({
                lastUsedBackgroundEffects: JSON.stringify([...i, e])
            })
        }
        getLastUsedBackgroundEffects() {
            return w.parseJsonWithDefault(this.getUserPreferencesLocal().lastUsedBackgroundEffects, [])
        }
        getMessageStreamFontSize() {
            let e;
            const t = this.getUserPreferencesLocal().fontSizeMultiplier;
            if (1 !== t) {
                switch (t) {
                case .8:
                    e = b.MessageStreamFontSize.Smaller;
                    break;
                case .9:
                    e = b.MessageStreamFontSize.Small;
                    break;
                case 1.1:
                    e = b.MessageStreamFontSize.Large;
                    break;
                case 1.2:
                    e = b.MessageStreamFontSize.Larger
                }
                this.setUserPreferencesLocal({
                    fontSizeMultiplier: 1
                }),
                this.setUserPreferencesLocal({
                    messageStreamFontSize: e
                })
            } else
                e = this.getUserPreferencesLocal().messageStreamFontSize;
            return e || b.MessageStreamFontSize.Normal
        }
        getNativeKeyboardHeight(e) {
            const t = this.getUserPreferencesLocalNoSubscription().nativeKeyboardHeights;
            return e === r.DeviceOrientation.Portrait ? t ? t.potraitHeight : void 0 : e === r.DeviceOrientation.Landscape && t ? t.landscapeHeight : void 0
        }
        setCallPreviewMicSettings(e) {
            this.setUserPreferencesLocal({
                callPreviewMicSetting: e
            })
        }
        setCallPreviewCameraSettings(e) {
            this.setUserPreferencesLocal({
                callPreviewCameraSetting: e
            })
        }
        setCallPreviewSettings(e, t, i) {
            this.setUserPreferencesLocal({
                callPreviewMicSetting: e,
                callPreviewCameraSetting: t,
                callPreviewBlurSetting: i
            })
        }
        setFileDownloadPath(e) {
            this.setUserPreferencesLocal({
                fileDownloadPathDesktop: e.path,
                fileDownloadDisplayNameDesktop: "Downloads"
            })
        }
        setSpeechConsentForTranslator(e) {
            this.setUserPreferencesLocal({
                speechConsentTranslator: e
            }),
            this.trigger([M.speechConsentTranslator, M.speechConsentSuggestion])
        }
        getSpeechConsentForTranslator() {
            return this.getUserPreferencesLocal().speechConsentTranslator
        }
        setCallsWithTranslatorCount(e) {
            this.setUserPreferencesLocal({
                callsWithTranslatorCount: e
            }),
            this.trigger(M.speechConsentSuggestion)
        }
    }
    ;
    E._defaultPrefs = {
        enableChatNotifications: !0,
        enableScheduledCallNotifications: !0,
        enableInAppScheduledCallNotifications: !0,
        enableInAppPollNotifications: !0,
        enablePollNotifications: !0,
        enableInAppNotifications: !0,
        enableNotificationSounds: !0,
        enablePushNotificationSounds: !0,
        enableInAppEngagementNotifications: !0,
        enablePushEngagementNotifications: !0,
        useStackNavOnNarrowDesktop: !1,
        popupCardConsumptionHorizon: 0,
        noticeMessageConsumptionHorizon: 0,
        androidNotificationLight: !0,
        androidNotificationVibration: !0,
        mobileKeychainSkypeTokenMigrated: !1,
        mobileKeychainMSATokenMigrated: !1,
        disableShakeAndSend: !1,
        mobileCoachMarkIndex: 0,
        desktopCoachmarkIndex: 4,
        mobileCoachMarkSequenceVersion: void 0,
        e2eeV1Initialised: !1,
        includeMeInSearchEnabled: !0,
        allowHugeEmoticons: !0,
        receiveSuggestionsToggleEnabled: !0,
        hideRecommendationsInRecentChatsTime: 0,
        avatarPolicy: T.OptionsServiceAvatarPolicyValueType.BUDDIES_OR_AUTHORIZED_CAN_SEE,
        isUserFromInviteFlow: !1,
        migrationLandingScreenSeen: !1,
        wasTutorialStarted: !1,
        forceDisplayMigrationLandingScreen: !1,
        isArchiveConversationDialogRequired: !0,
        isCameraMigrated: !1,
        isMicrophoneMigrated: !1,
        areSpeakersMigrated: !1,
        migratedToUsingPhysicalDeviceIdSCD: !1,
        allowCallsFromContactsOnly: !1,
        firstMessageReceived: !1,
        firstCallAnswered: !1,
        isUserActivityExpected: !1,
        useSystemTheme: !1,
        sendMessageWithEnter: !0,
        pasteAsQuotesEnabled: !1,
        lastMessageAuthorAvatarEnabled: d.default.getS4LMessagingFeatures().enableLastMessageAuthorAvatarDefaultSettingOn,
        contactsPanelSkypeTabShowOnlyActiveNow: !1,
        contactsPanelABNotSyncedShowOnlyActiveNow: !1,
        presentDNDSetting: !0,
        fontSizeMultiplier: 1,
        entitlementsBannerOptions: {
            visible: !0
        },
        autoDownloadFiles: !1,
        cortanaCanBeShownInFRE: !1,
        messageStreamFontSize: b.MessageStreamFontSize.Normal,
        hasSignOutSurveyShown: !1,
        fileDownloadPathDesktop: void 0,
        presentDefaultUrlOpenBehaviorPrompt: !0,
        enableSystemHotKeys: !0,
        notifiedAboutBookmarks: !1,
        showComposerPopupMenuIndicator: !0,
        showMeetNowEducationalModal: !0,
        showBackgroundBlurAsNewForIOS: !0,
        showBackgroundBlurAsNewForAndroid: !0,
        speechConsentTranslator: void 0,
        callsWithTranslatorCount: 0,
        speechSuggestionDismissed: !1,
        lastUsedBackgroundEffects: void 0
    },
    o.__decorate([l.autoSubscribe], E.prototype, "isShakeAndSendDisabled", null),
    o.__decorate([l.autoSubscribe], E.prototype, "getUserPreferencesLocal", null),
    o.__decorate([l.disableWarnings], E.prototype, "getUserPreferencesLocalNoSubscription", null),
    o.__decorate([l.disableWarnings], E.prototype, "internal_getUserPreferencesLocalDefaults", null),
    o.__decorate([l.autoSubscribe], E.prototype, "getUserPreferencesForConversationLocal", null),
    o.__decorate([l.autoSubscribe], E.prototype, "getLastUsedBackgroundEffects", null),
    o.__decorate([l.autoSubscribe], E.prototype, "getMessageStreamFontSize", null),
    o.__decorate([l.autoSubscribe], E.prototype, "getNativeKeyboardHeight", null),
    E = n = o.__decorate([l.AutoSubscribeStore], E),
    t.default = new E
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(104);
    t.mriOrId = function(e) {
        return e && n.pii.Mri(e)
    }
    ,
    t.trustMeThisJsonIsSafe = function(e) {
        return o.piiTrustMeThisIsSafe(JSON.stringify(e))
    }
    ,
    t.dev_unknownOmit = function(e) {
        return e ? n.pii.Omit(e) : ""
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(2108)
      , r = i(1339)
      , a = i(2)
      , l = i(3)
      , c = i(38)
      , d = i(4)
      , u = i(93)
      , g = i(19)
      , h = i(18)
      , p = i(295)
      , m = i(9);
    var S;
    !function(e) {
        e[e.All = 0] = "All",
        e[e.Protocol = 1] = "Protocol",
        e[e.MailtoLiteral = 2] = "MailtoLiteral",
        e[e.MsProtocol = 3] = "MsProtocol",
        e[e.SkypeWinProtocol = 4] = "SkypeWinProtocol",
        e[e.SkypeLiteral = 5] = "SkypeLiteral",
        e[e.SkypeParticipants = 6] = "SkypeParticipants",
        e[e.TelLiteral = 7] = "TelLiteral",
        e[e.TelParticipants = 8] = "TelParticipants",
        e[e.EmailName = 9] = "EmailName",
        e[e.Host = 10] = "Host",
        e[e.Port = 11] = "Port",
        e[e.PathBeforeLastSlash = 12] = "PathBeforeLastSlash",
        e[e.PathAfterLastSlash = 13] = "PathAfterLastSlash",
        e[e.PathAfterLastDot = 14] = "PathAfterLastDot",
        e[e.QueryParameters = 15] = "QueryParameters",
        e[e.Fragment = 16] = "Fragment"
    }(S || (S = {}));
    const C = /^\(?(?:(http|https|ftp):\/\/|(mailto):|(ms-voip-call|ms-voip-video|ms-ipmessaging):|(skypewin):|(skype):((?:[^\W\s]|\.|-|\:|\;)+)?|(tel):((?:[^\W\s]|[\.\-_~!$&'()\*\+,;=])+))?(?:(?:((?:[^\W\s]|\.|-|[:]{1})+)@{1})?((?:www.)?(?:[^\W\s]|\.|-)+|localhost(?=\/)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?::(\d*))?([\/]?[^\r\n\?]*[\/]{1})*?(?:\/?([^\r\n\?\[\]\{\}\#]*(?:(?=\.)){1}|[^\s\n\?\[\]\{\}\.\#]*)?([\.]{1}[^\s\?\#]*)?))?(?:\?{1}([^\s\n\#\[\]]*))?(?:[\#]([^\s\n]*))?\)?$/i
      , y = /^(?:https?|ftp):\/\/|(?:mailto|skype|skype-meetnow|skypewin|tel|callto|ms-voip-call|ms-voip-video|ms-ipmessaging):/i
      , f = /\b(?:[^\W\s]|\.|-|[:]{1})+@{1}(?:[^\W\s]|\.|-)+/i
      , _ = /^chat|call|golive|buycredit|action|home/i
      , b = /^[a-z-]+:/i
      , v = {
        "ms-voip-call": p.UrlType.VoipAudio,
        "ms-voip-video": p.UrlType.VoipVideo,
        "ms-ipmessaging": p.UrlType.Messaging
    };
    class T {
        static isUrlValid(e) {
            if (!e)
                return !1;
            const t = this.getURIComponents(e);
            return this._isComponentsValid(t)
        }
        static removeHost(e) {
            const t = this.getURIComponents(e);
            if (!t || !this._isComponentsValid(t))
                return e;
            let i = "";
            return t.pathname && (i += t.pathname),
            t.queryParameterString && (i += "?" + t.queryParameterString),
            t.fragment && (i += "#" + t.fragment),
            i
        }
        static _isComponentsValid(e) {
            if (!e)
                return !1;
            const {port: t, protocol: i, emailName: n, host: s} = e
              , r = t ? parseInt(t, 10) : void 0
              , a = i && o.includes(["http", "https", "ftp"], i)
              , l = e.type === p.UrlType.Email && n
              , c = s && -1 === s.indexOf("..") && "." !== o.head(s) && "." !== o.last(s)
              , d = void 0 !== r && r >= 0 && r <= 65535
              , u = !o.isFinite(r) || d;
            return !(!a && !l || !u || !c) || (e.type === p.UrlType.SkypeWin || (!!this._isSkypeUrlComponentsValid(e) || (!!this._isPhoneUrlComponentsValid(e) || (!!this._isCommsUrlComponentsValid(e) || !!this.isContactUrlComponentsValid(e)))))
        }
        static isContactUrlComponentsValid(e) {
            return !!e && "content" === e.protocol && ("com.android.contacts" === e.host || !!e.pathname && e.pathname.indexOf("com.android.contacts") > -1)
        }
        static _isSkypeUrlComponentsValid(e) {
            return !(!e || e.type !== p.UrlType.Skype && e.type !== p.UrlType.Meetnow || e.queryParameterString && !_.test(e.queryParameterString))
        }
        static _isPhoneUrlComponentsValid(e) {
            var t;
            return o.includes([p.UrlType.Tel, p.UrlType.CallTo], null === (t = e) || void 0 === t ? void 0 : t.type) && u.default.isPossiblyPhoneNumber(e.telNumber)
        }
        static _isCommsUrlComponentsValid(e) {
            return !(!e || !o.includes([p.UrlType.Messaging, p.UrlType.VoipAudio, p.UrlType.VoipVideo], e.type))
        }
        static getDomainName(e) {
            const t = this.getURIComponents(e);
            return t ? t.protocol + "://" + t.host : (l.log(a.LogTraceArea.UrlUtils, "getDomainName: Found no components for url: " + e),
            "")
        }
        static getHost(e) {
            const t = this.getURIComponents(e);
            if (t)
                return t.host;
            l.log(a.LogTraceArea.UrlUtils, "getHost: Found no components for url: " + e)
        }
        static getIDNSafeUrl(e) {
            let t = this.getURIComponents(e);
            if (!t || !this._isComponentsValid(t) || !t.host) {
                l.log(a.LogTraceArea.UrlUtils, "getIDNSafeUrl: Parsing failed converting to ASCII.");
                const i = r.toASCII(e.toLowerCase());
                if (t = this.getURIComponents(i),
                !t || !this._isComponentsValid(t) || !t.host)
                    return e
            }
            if (t.type === p.UrlType.Email)
                return r.toASCII(e.toLowerCase());
            if (t.type === p.UrlType.Web)
                try {
                    let i = t.host;
                    t.port && (i = t.host.replace(":" + t.port, ""));
                    const n = r.toUnicode(i)
                      , o = r.toASCII(i.toLowerCase())
                      , s = new RegExp(n,"i");
                    return e.replace(s, o)
                } catch (e) {
                    l.log(a.LogTraceArea.UrlUtils, "getIDNSafeUrl: " + g.errorAsString(e))
                }
            return e
        }
        static getProtocol(e) {
            const t = this.getURIComponents(e);
            if (t)
                return t.protocol;
            l.log(a.LogTraceArea.UrlUtils, "getProtocol: Found no components for url: " + e)
        }
        static normalizeUrlProtocol(e) {
            const t = this.getProtocol(e);
            if (t) {
                let i = new RegExp(t,"i");
                return e.replace(i, t)
            }
        }
        static createSanitizedHref(e) {
            let t = this.getIDNSafeUrl(e);
            const i = this.getURIComponents(t);
            if (!i || !this._isComponentsValid(i))
                return void l.log(a.LogTraceArea.UrlUtils, "createSanitizedHref: No valid components: " + JSON.stringify(i) + ", URL: " + e);
            let n;
            if (!i.queryParameterString && !i.fragment) {
                const e = t;
                t = o.trimEnd(t, ".-:;?"),
                n = e.substr(t.length)
            }
            let s = t;
            return i.type === p.UrlType.Email ? t = /^mailto:/i.test(t) ? t : "mailto:" + t : i.host && (t = /^w{3}\./i.test(t) ? "https://" + t : t),
            {
                href: t,
                text: s,
                trailingCharacters: n,
                urlType: i.type
            }
        }
        static sanitizeUrl(e) {
            const t = this.createSanitizedHref(e);
            return t ? t.href : void 0
        }
        static getURIComponents(e) {
            if (!e)
                return;
            y.test(e) || (f.test(e) ? e = /^mailto:/i.test(e) ? e : "mailto:" + e : /^w{3}\./i.test(e) && (e = "https://" + e));
            let t = this._syncGetUriComponents(e);
            if (t) {
                if (t.pathname && "/" === o.head(t.pathname) && (t.pathname = t.pathname.substr(1)),
                t.pathname && "/" !== o.last(t.pathname) && (t.pathname = t.pathname + "/"),
                t.pathname || t.queryParameterString || t.fragment || (t.host = o.trimEnd(t.host, ".-"),
                t.skypeParticipants = o.trimEnd(t.skypeParticipants, ".-:;")),
                t.queryParameterString) {
                    const e = m.unescapeXml(t.queryParameterString).split("&")
                      , i = this.parseParameterPairs(e);
                    if (i.foundInvalidParameter)
                        return;
                    t.queryParameterKeyValues = i.parameterKeyValues
                } else
                    t.queryParameterKeyValues = {};
                if (o.includes([p.UrlType.Messaging, p.UrlType.VoipAudio, p.UrlType.VoipVideo], t.type)) {
                    const e = t.queryParameterKeyValues.ContactRemoteIds;
                    e && (t.skypeParticipants = o.replace(e, ",", ";"))
                }
                return t
            }
            l.log(a.LogTraceArea.UrlUtils, "getURIComponents: Parsing failed for uri: " + e)
        }
        static parseParameterPairs(e) {
            let t = {}
              , i = !1;
            return o.each(e, e=>{
                const n = e.indexOf("=")
                  , s = -1 === n ? e.length : n
                  , r = o.attempt(()=>decodeURIComponent(e.substr(0, s)))
                  , a = o.attempt(()=>decodeURIComponent(e.substr(s + 1)));
                o.isError(r) || o.isError(a) ? i = !0 : t[r] = a
            }
            ),
            {
                parameterKeyValues: t,
                foundInvalidParameter: i
            }
        }
        static getUrlParamsInFragment(e) {
            const t = e.indexOf("#");
            if (-1 === t)
                return;
            const i = e.substr(t + 1).split("&")
              , {parameterKeyValues: n} = this.parseParameterPairs(i);
            return n || {}
        }
        static getUrlParameterValue(e, t, i=!1) {
            if (this.isUrlValid(e)) {
                const n = this._getUrlParameterRegularExpress(t);
                let o = e.match(n);
                if (o && o.length >= 3)
                    return i ? decodeURIComponent(o[2]) : o[2]
            }
        }
        static addUrlParameter(e, t, i, n) {
            if (n || this.isUrlValid(e)) {
                const n = e.indexOf("#")
                  , s = -1 === n ? "" : e.substr(n)
                  , r = (e = -1 === n ? e : e.substr(0, n)).indexOf("?");
                let a = e
                  , l = "";
                -1 !== r && (a = e.slice(0, r),
                l = e.slice(r, e.length));
                const c = this._getUrlParameterRegularExpress(t);
                if (i)
                    if (l.match(c))
                        l = l.replace(c, "$1" + t + "=" + i);
                    else {
                        l = l + (-1 !== e.indexOf("?") ? "&" : "?") + t + "=" + i
                    }
                else if ("" !== l) {
                    const e = new RegExp("([?&])" + t + "=[^&#/]*","i");
                    l = l.replace(e, ""),
                    "?" !== o.head(l) && (l = l.replace(/&/, "?"))
                }
                return a + l + s
            }
            return e
        }
        static _getUrlParameterRegularExpress(e) {
            return new RegExp("([?&])" + e + "=([^\\s\\n&#/]*)","i")
        }
        static addUrlParameters(e, t, i) {
            let n = e;
            return o.forOwn(t, (e,t)=>{
                n = T.addUrlParameter(n, t, e, i)
            }
            ),
            n
        }
        static isHttp(e) {
            const t = T.getURIComponents(e);
            return !!t && (!!e && /^https?/i.test(t.protocol))
        }
        static isPdfUrl(e) {
            const t = this.getURIComponents(e);
            return !!(t && this._isComponentsValid(t) && this.isHttp(e)) && (!!t.pathname && o.endsWith(o.trimEnd(t.pathname, "/"), ".pdf"))
        }
        static isGifUrl(e) {
            const t = this.getURIComponents(e);
            return !!(t && this._isComponentsValid(t) && this.isHttp(e)) && (!!t.pathname && o.endsWith(o.trimEnd(t.pathname, "/"), ".gif"))
        }
        static isFile(e) {
            return o.startsWith(e, "file:") || o.startsWith(e, "urn:future-access-list:")
        }
        static isFileOrBlob(e) {
            return T.isFile(e) || o.startsWith(e, "blob:") || o.startsWith(e, "ph:")
        }
        static getFileUrl(e) {
            let t;
            const i = e.file;
            if (i && i.uri)
                t = i.uri;
            else {
                const i = e.file;
                t = URL.createObjectURL(i)
            }
            return t
        }
        static appendLanguageUrlParameter(e) {
            return T.addUrlParameter(e, "lang", encodeURIComponent(d.getLocale()))
        }
        static areUrlsSame(e, t) {
            if (!e && !t)
                return !0;
            if (!e || !t)
                return !1;
            const i = T.getURIComponents(e);
            if (!i)
                return !1;
            const n = T.getURIComponents(t);
            return !!n && (i.protocol === n.protocol && i.host === n.host && i.port === n.port && i.pathname === n.pathname && c.default(i.queryParameterKeyValues, n.queryParameterKeyValues))
        }
        static urlContains(e, t, i) {
            const n = i || {
                compareQueryParamValues: !1
            };
            if (e === t)
                return !0;
            if (!e || !t)
                return !1;
            const s = T.getURIComponents(e);
            if (!s)
                return !1;
            const r = T.getURIComponents(t);
            if (!r)
                return !1;
            if (s.protocol !== r.protocol || s.host !== r.host || s.port !== r.port)
                return !1;
            if (this._getUrlType(s.protocol) !== this._getUrlType(r.protocol) || this._getUrlType(s.protocol) !== p.UrlType.Web)
                return !1;
            if (!o.isEmpty(r.pathname) && r.pathname !== s.pathname)
                return !1;
            const a = o.keys(r.queryParameterKeyValues);
            return !(!o.isEmpty(r.queryParameterKeyValues) && o.intersection(o.keys(s.queryParameterKeyValues), a).length !== a.length) && !(n.compareQueryParamValues && !o.isEmpty(r.queryParameterKeyValues) && o.some(a, e=>r.queryParameterKeyValues[e] !== s.queryParameterKeyValues[e]))
        }
        static areHostsSame(e, t) {
            return !!e && !!t && e.host === t.host
        }
        static isSkypeUrl(e) {
            if (!this.isUrlValid(e))
                return !1;
            const t = this.getHost(e);
            return o.endsWith(t, ".skype.com") || o.endsWith(t, ".skype.net")
        }
        static isSkypeDeepLinkUrl(e) {
            const t = this.getURIComponents(e);
            let i = !1;
            if (t) {
                const e = t.pathname ? o.compact(t.pathname.split("/")) : [];
                i = (t.host && t.host.toLowerCase()) === h.getFrontendHost() && 1 === e.length
            }
            return i
        }
        static _syncGetUriComponents(e) {
            let t, i;
            if (e = (e = e.replace(/^skype:\/\//, "skype:")).replace(/^skype-meetnow:\/\//, "skype-meetnow:"),
            "undefined" != typeof document && "function" == typeof document.createElement) {
                if (!b.test(e))
                    return void l.log(a.LogTraceArea.UrlUtils, "_syncGetUriComponents: non-standard URI: " + n.pii.Omit(e));
                const s = document.createElement("a");
                s.setAttribute("href", e);
                let r = o.attempt(()=>s.protocol);
                if (o.isError(r))
                    return void l.log(a.LogTraceArea.UrlUtils, "_syncGetUriComponents: Error accessing protocol " + r + ", uri:" + e);
                if (!r)
                    return void l.log(a.LogTraceArea.UrlUtils, "_syncGetUriComponents: URI does not have protocol: " + e);
                r = o.toLower(o.trimEnd(s.protocol, ":"));
                const c = this._getUrlType(r);
                i = s.pathname,
                t = {
                    type: c,
                    protocol: r,
                    host: s.host,
                    port: s.port,
                    queryParameterString: o.trimStart(s.search, "?"),
                    fragment: o.trimStart(s.hash, "#")
                }
            } else {
                0;
                const n = s.default.syncGetUriComponents(e);
                if (!n)
                    return;
                const r = o.toLower(n.protocol)
                  , a = this._getUrlType(r);
                i = n.path,
                t = {
                    type: a,
                    protocol: r,
                    host: n.host,
                    port: n.port,
                    queryParameterString: n.query,
                    fragment: n.fragment
                }
            }
            if (i)
                if (t.type === p.UrlType.Email) {
                    const e = i.indexOf("@");
                    t.emailName = i.substr(0, e),
                    t.host = i.substr(e + 1)
                } else if (t.type === p.UrlType.Skype)
                    t.skypeParticipants = i;
                else if (t.type === p.UrlType.Tel || t.type === p.UrlType.CallTo) {
                    const e = g.safeDecodeURIComponent(i);
                    t.telNumber = e ? u.default.getNormalizedPhoneNumber(e, !0) : void 0
                } else
                    t.pathname = i;
            return t
        }
        static _regexGetUriComponents(e) {
            const t = C.exec(e);
            if (!t)
                return;
            let i = p.UrlType.Web;
            const n = t[S.Host]
              , s = t[S.EmailName]
              , r = !!t[S.MailtoLiteral] || !!s
              , a = !!t[S.SkypeLiteral]
              , l = !!t[S.TelLiteral]
              , c = !!t[S.MsProtocol]
              , d = !!t[S.SkypeWinProtocol];
            let g = void 0
              , h = void 0;
            r ? i = p.UrlType.Email : a ? (i = p.UrlType.Skype,
            g = t[S.SkypeParticipants]) : l ? (i = p.UrlType.Tel,
            h = u.default.getNormalizedPhoneNumber(t[S.TelParticipants], !0)) : c ? i = v[t[S.MsProtocol]] : d && (i = p.UrlType.SkypeWin);
            const m = t[S.QueryParameters]
              , y = t[S.Fragment];
            let f = t[S.Protocol] ? t[S.Protocol].toLowerCase() : !r && n && /^w{3}\./i.test(n) ? "http" : ""
              , _ = o.compact([t[S.PathBeforeLastSlash], t[S.PathAfterLastSlash], t[S.PathAfterLastDot]]).join("");
            return {
                protocol: f,
                type: i,
                skypeParticipants: g,
                telNumber: h,
                emailName: s,
                host: n,
                port: t[S.Port],
                pathname: _,
                queryParameterString: m,
                fragment: y
            }
        }
        static _getUrlType(e) {
            return e ? "mailto" === (e = e.toLowerCase()) ? p.UrlType.Email : "skype" === e ? p.UrlType.Skype : "skype-meetnow" === e ? p.UrlType.Meetnow : "tel" === e ? p.UrlType.Tel : "callto" === e ? p.UrlType.CallTo : "ms-voip-call" === e ? p.UrlType.VoipAudio : "ms-voip-video" === e ? p.UrlType.VoipVideo : "ms-ipmessaging" === e ? p.UrlType.Messaging : "skypewin" === e ? p.UrlType.SkypeWin : o.includes(["http", "https"], e) ? p.UrlType.Web : p.UrlType.Unknown : p.UrlType.Unknown
        }
        static test_syncGetUriComponents(e) {
            return this._syncGetUriComponents(e)
        }
        static test_regexGetUriComponents(e) {
            return this._regexGetUriComponents(e)
        }
    }
    t.default = T
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(36)
      , s = i(0)
      , r = i(13)
      , a = i(7)
      , l = (i(89),
    i(10))
      , c = i(2)
      , d = i(3)
      , u = (i(38),
    i(60))
      , g = i(21)
      , h = i(358)
      , p = i(19);
    var m;
    !function(e) {
        e[e.StatusBarVisibility = 0] = "StatusBarVisibility",
        e[e.StatusBarHeight = 1] = "StatusBarHeight",
        e[e.SafeAreaInsets = 2] = "SafeAreaInsets"
    }(m || (m = {}));
    let S = class extends r.StoreBase {
        constructor() {
            super(),
            g.RegisterStartupable(this, "SafeAreaStore", [h.default])
        }
        startup() {
            return this._leavePaddingForStatusBar = s.StatusBar.isOverlay() && !h.default.statusBarHiddenInLandscape(),
            h.default.statusBarUpdated.subscribe(e=>{
                this._leavePaddingForStatusBar !== !e && (this._leavePaddingForStatusBar = s.StatusBar.isOverlay() && !e,
                this.trigger(m.StatusBarVisibility))
            }
            ),
            this._statusBarHeight = 0,
            this._keepStatusBarVisible = this._shouldKeepStatusBarVisible(),
            a.Resolved()
        }
        leavePaddingForStatusBar() {
            return this._leavePaddingForStatusBar
        }
        statusBarHeight() {
            return this._topInset()
        }
        statusBarPadding() {
            return this._leavePaddingForStatusBar ? this._topInset() : 0
        }
        statusBarPaddingNoSubscription() {
            return this._leavePaddingForStatusBar ? this._topInset() : 0
        }
        bottomSafeAreaInset(e) {
            return this._safeAreaInsets ? Math.max(0, this._safeAreaInsets.bottom - (e || 0)) : 0
        }
        horizontalPaddingStyle(e) {
            const t = this.horizontalInsets(e);
            if (t !== l.HorizontalInsetZero)
                return u.horizontalPaddingStyle(t)
        }
        horizontalInsets(e) {
            if (!this._safeAreaInsets || !this._safeAreaInsets.left && !this._safeAreaInsets.right)
                return l.HorizontalInsetZero;
            if (e) {
                const t = Math.max(0, this._safeAreaInsets.left - e.left)
                  , i = Math.max(0, this._safeAreaInsets.right - e.right);
                return t || i ? {
                    left: t,
                    right: i
                } : l.HorizontalInsetZero
            }
            return this._safeAreaInsets
        }
        keepStatusBarVisible() {
            return this._keepStatusBarVisible
        }
        keepStatusBarVisibleNoSubscription() {
            return this._keepStatusBarVisible
        }
        hasNonZeroSafeAreaInsets() {
            return this._hasNonZeroSafeAreaInsets()
        }
        hasNonZeroSafeAreaInsetsNoSubscription() {
            return this._hasNonZeroSafeAreaInsets()
        }
        _refreshSafeAreaInsets() {
            d.log(c.LogTraceArea.GenericUnsafe, "SafeAreaStore _refreshSafeAreaInsets"),
            o.default.safeAreaInsets().then(e=>{
                e && (d.log(c.LogTraceArea.GenericUnsafe, "SafeAreaStore safeAreaInsets: " + p.asString(e)),
                this._safeAreaInsets = e,
                this._keepStatusBarVisible = this._shouldKeepStatusBarVisible(),
                this.trigger(m.SafeAreaInsets))
            }
            ).catch(e=>{
                d.warn(c.LogTraceArea.GenericUnsafe, "SafeAreaStore safeAreaInsets failed: " + p.errorAsString(e))
            }
            )
        }
        _topInset() {
            return (this._safeAreaInsets ? this._safeAreaInsets.top : 0) || this._statusBarHeight
        }
        _shouldKeepStatusBarVisible() {
            return !s.StatusBar.isOverlay() || this._hasNonZeroSafeAreaInsets() && this._topInset() > this._defaultStatusBarHeight() + 10
        }
        _hasNonZeroSafeAreaInsets() {
            return !!this._safeAreaInsets && !!(this._safeAreaInsets.left || this._safeAreaInsets.top || this._safeAreaInsets.right || this._safeAreaInsets.bottom)
        }
        _defaultStatusBarHeight() {
            return 0
        }
    }
    ;
    n.__decorate([r.autoSubscribeWithKey(m.StatusBarVisibility)], S.prototype, "leavePaddingForStatusBar", null),
    n.__decorate([r.autoSubscribeWithKey([m.StatusBarHeight, m.SafeAreaInsets])], S.prototype, "statusBarHeight", null),
    n.__decorate([r.autoSubscribeWithKey([m.StatusBarVisibility, m.StatusBarHeight, m.SafeAreaInsets])], S.prototype, "statusBarPadding", null),
    n.__decorate([r.disableWarnings], S.prototype, "statusBarPaddingNoSubscription", null),
    n.__decorate([r.autoSubscribeWithKey(m.SafeAreaInsets)], S.prototype, "bottomSafeAreaInset", null),
    n.__decorate([r.autoSubscribeWithKey(m.SafeAreaInsets)], S.prototype, "horizontalPaddingStyle", null),
    n.__decorate([r.autoSubscribeWithKey(m.SafeAreaInsets)], S.prototype, "horizontalInsets", null),
    n.__decorate([r.autoSubscribeWithKey(m.StatusBarHeight)], S.prototype, "keepStatusBarVisible", null),
    n.__decorate([r.disableWarnings], S.prototype, "keepStatusBarVisibleNoSubscription", null),
    n.__decorate([r.autoSubscribeWithKey(m.SafeAreaInsets)], S.prototype, "hasNonZeroSafeAreaInsets", null),
    n.__decorate([r.disableWarnings], S.prototype, "hasNonZeroSafeAreaInsetsNoSubscription", null),
    S = n.__decorate([r.AutoSubscribeStore], S),
    t.default = new S
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(157)
      , r = i(0)
      , a = i(20)
      , l = i(18)
      , c = i(9);
    var d, u, g;
    t.TelemetryConfig = {},
    t.TelemetryETag = "",
    t.TelemetryConfigExpiration = 0,
    t.TelemetryIsAnonymous = !1,
    t.SampledEvents = {},
    t.SampledPerfEvents = {},
    t.ReportedNetworkType = r.Types.DeviceNetworkType.Unknown,
    function(e) {
        e[e.None = 0] = "None",
        e[e.EventName = 1] = "EventName",
        e[e.Full = 2] = "Full"
    }(d = t.TelemetryTraceMode || (t.TelemetryTraceMode = {})),
    function(e) {
        e[e.SendNow = 0] = "SendNow",
        e[e.WaitForUserId = 1] = "WaitForUserId"
    }(u = t.TelemetryEventLoggedOutPolicy || (t.TelemetryEventLoggedOutPolicy = {})),
    function(e) {
        e[e.MSA = 0] = "MSA",
        e[e.Unknown = 1] = "Unknown"
    }(g || (g = {}));
    t.TelemetryEventBase = class {
        constructor(e) {
            this._experimentConfigIds = e,
            this._eventCreationTime = Date.now(),
            this._activationState = r.App.getActivationState()
        }
        getAriaTenantTokenOverride() {}
        shouldSend() {
            const e = t.SampledEvents[this.getEventName()];
            return !o.isNumber(e) || c.sampleForPercentage(e)
        }
        getCorrelationAttributes() {
            return {}
        }
        getAttributes() {
            return this._getBaseAttributes()
        }
        _getBaseAttributes() {
            const e = r.Types.DeviceNetworkType[t.ReportedNetworkType];
            let i = void 0;
            void 0 !== t.ExperimentMappings && (i = t.ExperimentMappings.getExperimentIdsForEventName(this.getEventName().toLowerCase()));
            let n = {
                Skype_InitiatingUser_IsGuest: a.isGuestUser(),
                Skype_InitiatingUser_Username: t.TelemetryIsAnonymous ? "" : a.getSkypeId(),
                ShellType: l.getAppShellTypeName(),
                PlatformType: s.PlatformType[l.getPlatformType()],
                Version: l.getAppVersion(),
                Platform_Uiversion: l.getUIVersionWithPartnerID(),
                Platform_Id: l.getSkypePlatformId(),
                "DeviceInfo.Make": l.getSystemManufacturer() || "",
                "DeviceInfo.Model": l.getSystemModel(),
                ecs_etag: t.TelemetryETag,
                NetworkType: e,
                session_id: l.getSessionId(),
                "AppInfo.ExperimentIds": i || "",
                ActivationState: r.Types.AppActivationState[this._activationState],
                UserType: this._getUserType(),
                ChatEndpointId: l.getChatEndpointId() || ""
            };
            return this._experimentConfigIds && (n.ExperimentConfigIds = this._experimentConfigIds),
            void 0 !== t.TelemetryConfigExpiration && (n.ecs_expiration = t.TelemetryConfigExpiration),
            this.shouldExcludeUserIdentificationInfo() && (n.Skype_InitiatingUser_Username = ""),
            t.EngagementUserTaggingConfig && (this._eventCreationTime <= t.EngagementUserTaggingConfig.durationAbsoluteTimestamp ? n.EngagementTag = t.EngagementUserTaggingConfig.engagementTag : t.EngagementUserTaggingConfig = void 0),
            l.isCorporateInstallation() && (n.CorpInstallTag = l.getCorporateInstallationTag()),
            n
        }
        shouldExcludeUserIdentificationInfo() {
            return !1
        }
        shouldExcludeDeviceIdentificationInfo() {
            return !1
        }
        getPiiAttributes() {
            return {}
        }
        getEventPriority() {
            return n.AWTEventPriority.Normal
        }
        getEventTraceMode() {
            return d.None
        }
        getLoggedOutSendingPolicy() {
            return u.WaitForUserId
        }
        _getUserType() {
            return a.hasSkypeId() ? g[g.MSA] : g[g.Unknown]
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(221)
      , s = i(0)
      , r = i(589)
      , a = i(43)
      , l = i(2)
      , c = i(151)
      , d = i(27)
      , u = i(3)
      , g = i(5)
      , h = (i(4),
    i(8))
      , p = i(14)
      , m = g.lazyProperties({
        text: ()=>s.Styles.createTextStyle({
            flexDirection: "row",
            alignSelf: "center",
            alignItems: "center",
            justifyContent: "center",
            backgroundColor: h.Color.transparent,
            overflow: "visible"
        }),
        shadow: ()=>s.Styles.createViewStyle({
            shadowColor: h.Color.black,
            shadowOpacity: .7,
            shadowRadius: 2,
            shadowOffset: {
                height: 0,
                width: 0
            }
        }),
        flippedView: ()=>s.Styles.createViewStyle({
            transform: [{
                scaleX: -1
            }]
        })
    });
    class S extends a.default {
        constructor() {
            super(...arguments),
            this._onHoverStart = e=>{
                this.props.disabled || this.setState({
                    isHovering: !0
                }),
                this.props.onHover && this.props.onHover(!0)
            }
            ,
            this._onHoverEnd = e=>{
                this.setState({
                    isHovering: !1
                }),
                this.props.onHover && this.props.onHover(!1)
            }
            ,
            this._onContentButtonRef = e=>{
                this._contentButton = e || void 0
            }
        }
        _buildState(e, t) {
            const i = {};
            return t && (i.isHovering = !1),
            i
        }
        getChildContext() {
            const e = super.getChildContext();
            return Object.assign(Object.assign({}, e), {
                hasRxButtonAscendant: !1
            })
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.accessibilityLabel || this.props.title || u.warn(l.LogTraceArea.GenericUnsafe, "IconButton mounted without an accessibilityLabel or title")
        }
        render() {
            const e = this.state.isHovering && this.props.hoverColor && !this.props.disabled ? this.props.hoverColor : this.props.color
              , t = [p.alignItemsCenter, this.props.style];
            this.state.isHovering && this.props.hoverStyle && !this.props.disabled && t.push(this.props.hoverStyle);
            const i = [m.text];
            this.props.showShadow && i.push(m.shadow),
            this.state.isHovering && this.props.hoverTextStyle && !this.props.disabled ? i.push(this.props.hoverTextStyle) : this.props.iconTextStyle && i.push(this.props.iconTextStyle);
            const o = this._getContext().iconCollection;
            let a;
            if (this.props.icon instanceof Array)
                a = s.createElement(r.default, {
                    icons: this.props.icon,
                    iconSize: this.props.size,
                    padding: this.props.padding,
                    style: i,
                    color: this.props.color
                });
            else if (this.props.animatedTextStyle) {
                const t = [...i, this.props.animatedTextStyle];
                a = d.simpleAnimatedIcon(this.props.icon, e, this.props.size, this.props.padding, t, o)
            } else
                a = d.simpleIcon(this.props.icon, e, this.props.size, this.props.padding, i, o);
            const l = this.props.accessibilityTraits ? n.isArray(this.props.accessibilityTraits) ? this.props.accessibilityTraits : [this.props.accessibilityTraits] : [s.Types.AccessibilityTrait.Button];
            let u = this.props.accessibilityLabel || this.props.title;
            this.props.disabled && l.push(s.Types.AccessibilityTrait.Disabled),
            this.props.flipIcon && (a = s.createElement(s.View, {
                style: m.flippedView
            }, a));
            const g = this.props.toolTip || this.props.title;
            if (this.props.onPress || this.props.onLongPress || this.props.onPressIn || this.props.onPressOut || this.props.onContextMenu || this.props.onKeyPress) {
                const e = this.props.showHoverEffect ? c.HoverableButton : s.Button;
                return s.createElement(e, {
                    style: t,
                    title: g,
                    ref: this._onContentButtonRef,
                    autoFocus: this.props.autoFocus,
                    onPress: this.props.onPress,
                    onPressIn: this.props.onPressIn,
                    onPressOut: this.props.onPressOut,
                    onLongPress: this.props.onLongPress,
                    onContextMenu: this.props.onContextMenu,
                    onHoverStart: this._onHoverStart,
                    onHoverEnd: this._onHoverEnd,
                    onKeyPress: this.props.onKeyPress,
                    disabled: this.props.disabled,
                    onFocus: this.props.onFocus,
                    onBlur: this.props.onBlur,
                    accessibilityLabel: u,
                    accessibilityTraits: l,
                    tabIndex: this.props.tabIndex,
                    disableTouchOpacityAnimation: this.props.disableTouchOpacityAnimation,
                    activeOpacity: this.props.activeOpacity,
                    importantForAccessibility: this.props.importantForAccessibility,
                    disabledOpacity: this.props.disabledOpacity
                }, a, this.props.accessoryView)
            }
            return s.createElement(s.View, {
                title: g,
                style: t,
                importantForAccessibility: this.props.importantForAccessibility
            }, a, this.props.accessoryView)
        }
        requestFocus() {
            this._contentButton && this._contentButton.requestFocus()
        }
    }
    S.childContextTypes = Object.assign({
        hasRxButtonAscendant: o.bool
    }, a.default.childContextTypes),
    t.default = S
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(2619)
      , a = i(2621)
      , l = i(12);
    class c extends l.default {
        constructor() {
            super(...arguments),
            this._onButtonTertirarytRef = e=>{
                this._button = e || void 0
            }
            ,
            this._onPrimaryButtonRef = e=>{
                this._button = e || void 0
            }
        }
        requestFocus() {
            this._button && this._button.requestFocus && this._button.requestFocus()
        }
        _themedButtonStyle() {
            const e = this._useDarkTheme();
            return this.props.buttonStyle === s.SXButtonStyle.ThemeFill ? e ? s.SXButtonStyle.LightFill : s.SXButtonStyle.DarkFill : this.props.buttonStyle === s.SXButtonStyle.ThemeStroke ? e ? s.SXButtonStyle.LightStroke : s.SXButtonStyle.DarkStroke : e ? s.SXButtonStyle.LightNoBackground : s.SXButtonStyle.DarkNoBackground
        }
        _accessibleButtonStyle() {
            const e = this._useDarkTheme();
            return this.props.buttonStyle === s.SXButtonStyle.ColorStroke ? e ? s.SXButtonStyle.LightStroke : s.SXButtonStyle.DarkStroke : e ? s.SXButtonStyle.LightFill : s.SXButtonStyle.DarkFill
        }
        render() {
            let e;
            return this.props.buttonStyle === s.SXButtonStyle.ThemeFill || this.props.buttonStyle === s.SXButtonStyle.ThemeStroke || this.props.buttonStyle === s.SXButtonStyle.ThemeNoBackground ? (e = n.clone(this.props),
            e.buttonStyle = this._themedButtonStyle()) : !this._useAccessibleTheme() || this.props.buttonStyle !== s.SXButtonStyle.ColorFill && this.props.buttonStyle !== s.SXButtonStyle.ColorStroke && this.props.buttonStyle !== s.SXButtonStyle.GradientFill ? e = this.props : (e = n.clone(this.props),
            e.buttonStyle = this._accessibleButtonStyle()),
            this.props.buttonSize === s.SXButtonSize.Small ? o.createElement(a.default, Object.assign({}, e, {
                ref: this._onButtonTertirarytRef
            })) : o.createElement(r.default, Object.assign({}, e, {
                ref: this._onPrimaryButtonRef
            }))
        }
    }
    e.exports = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = (i(110),
    i(4));
    let s = new class {
        linkAccessibilityInfo(e, t) {
            let i, o = e;
            return i = t ? [n.Types.AccessibilityTrait.Button] : [n.Types.AccessibilityTrait.None, n.Types.AccessibilityTrait.Link],
            {
                label: o,
                traits: i
            }
        }
        wrapLinkWithAccessibilityView(e, t, i, o) {
            const s = this.linkAccessibilityInfo(t);
            return n.createElement(n.Button, {
                style: o,
                accessibilityTraits: s.traits,
                accessibilityLabel: s.label,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes,
                onPress: i
            }, e)
        }
        tabAccessibilityLabel(e, t, i, n=!1) {
            let s = e;
            return n && (s += ", ",
            s += o.getString("Global.CountOfTotal", {
                count: t + 1,
                total: i
            })),
            s
        }
        headerAccessibilityInfo(e, t) {
            return {
                accessibilityLabel: this.combinedAccessibilityLabel(e, t) || "",
                accessibilityTraits: n.Types.AccessibilityTrait.Header
            }
        }
        tabAccessibilityTraits(e) {
            return e ? [n.Types.AccessibilityTrait.Tab, n.Types.AccessibilityTrait.Selected] : [n.Types.AccessibilityTrait.Tab]
        }
        buttonAccessibilityInfo(e, t) {
            const i = [n.Types.AccessibilityTrait.Button];
            let o = e;
            return t && i.push(n.Types.AccessibilityTrait.Disabled),
            {
                accessibilityLabel: o,
                accessibilityTraits: i
            }
        }
        applyMoreOptionsAccessibilityHint(e) {
            return e + ", " + o.getString("Global.MoreOptionsAvailableAccessibilityLabel")
        }
        combinedAccessibilityLabel(e, t, i) {
            return e ? e + (t ? (i || ", ") + t : "") : t
        }
        registerMobileFocusHandler(e, t) {
            0
        }
        applyShouldGroupAccessibilityChildren(e) {
            return e
        }
    }
    ;
    t.default = s
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(6);
    const n = i(1431)
      , o = i(10)
      , s = (i(2),
    i(657));
    i(3);
    class r extends s.InitialStateComponent {
        constructor(e) {
            super(e),
            this._visibilityChanged = e=>{
                const t = !e;
                this._paused !== t && (this._paused = t,
                t || this._shouldUpdateWhenResumed && (this.forceUpdate(),
                this._shouldUpdateWhenResumed = !1))
            }
        }
        getChildContext() {
            return this._context || (this._context = this._createContext()),
            this._context
        }
        shouldComponentUpdate(e, t, i) {
            if (this._pauseResumeDesired) {
                const n = this._shouldComponentUpdate(this._paused, e, t, this._renderedProps || this.props, this._renderedState || this.state, i);
                return !this._paused || n || this._shouldUpdateWhenResumed || (this._shouldUpdateWhenResumed = super.shouldComponentUpdate(e, t, i)),
                n
            }
            return super.shouldComponentUpdate(e, t, i)
        }
        componentDidMount() {
            super.componentDidMount(),
            this._pauseResumeDesired = this._pauseWhenNotVisible(),
            this._pauseResumeDesired && this._context.componentVisibilityStatus && (this._pauseResumeEnabled = !0,
            this._paused = !this._context.componentVisibilityStatus.isVisible(),
            this._renderedProps = this.props,
            this._renderedState = this.state,
            this._baseVisibilitySubscriptionToken = this._context.componentVisibilityStatus.isVisibleEvent().subscribe(this._visibilityChanged))
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this._pauseResumeDesired && this._componentWillUpdate(e, t, this._renderedProps || this.props, this._renderedState || this.state, i)
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this._pauseResumeDesired && this._componentDidUpdate(this._renderedProps || e, this._renderedState || t, i),
            this._pauseResumeEnabled && (this._renderedState = this.state,
            this._renderedProps = this.props)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._baseVisibilitySubscriptionToken && (this._baseVisibilitySubscriptionToken.unsubscribe(),
            this._baseVisibilitySubscriptionToken = void 0)
        }
        _shouldComponentUpdate(e, t, i, n, o, s) {
            return !e && super.shouldComponentUpdate(t, i, s)
        }
        _componentWillUpdate(e, t, i, n, o) {}
        _componentDidUpdate(e, t, i) {}
        _componentDidRender() {
            super._componentDidRender(),
            this._pauseResumeEnabled && (this._shouldUpdateWhenResumed = !1,
            this._paused)
        }
        _getContext() {
            return this._context || (this._context = this._createContext()),
            this._context
        }
        _getRootViewId() {
            return this._getContext().rootViewId || o.MainRootViewId
        }
        _getRootViewType() {
            return this._getContext().rootViewType
        }
        _isComponentVisible() {
            const e = this._context.componentVisibilityStatus;
            return !e || e.isVisible()
        }
        _createContext() {
            return this.context || {
                rootViewId: o.MainRootViewId
            }
        }
        _isPresentedInLeftNav() {
            return this._getContext().isPresentedInDesktopLeftNav && !0
        }
        _isPresentedInDesktopLeftNav() {
            return !!this._getContext().isPresentedInDesktopLeftNav && !0
        }
        _isPresentedInTabletLeftNav() {
            return !!this._getContext().isPresentedInDesktopLeftNav && this._useTabletUI()
        }
        _isPresentedInTabletRightNav() {
            return !!this._getContext().isPresentedInDesktopRightNav && this._useTabletUI()
        }
        _isPresentedInDesktopModal() {
            const e = this._getContext();
            return e.isPresentedInDesktopSubview && !e.isPresentedInDesktopLeftNav && !e.isPresentedInDesktopRightNav
        }
        _pauseWhenNotVisible() {
            return !1
        }
        _useTabletUI() {
            return !1
        }
    }
    t.default = r,
    r.contextTypes = n.componentContextTypes(),
    r.childContextTypes = n.componentContextTypes()
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(0)
      , r = i(61)
      , a = i(42)
      , l = i(10)
      , c = i(10)
      , d = i(2)
      , u = i(80)
      , g = i(40)
      , h = i(27)
      , p = i(3)
      , m = i(5)
      , S = i(4)
      , C = i(17)
      , y = i(24)
      , f = i(37)
      , _ = i(60)
      , b = i(66)
      , v = i(41)
      , T = i(8)
      , P = i(23)
      , A = i(11)
      , k = i(49)
      , I = i(14)
      , w = i(12)
      , N = i(9);
    var M, E;
    !function(e) {
        e[e.Default = 0] = "Default",
        e[e.Start = 1] = "Start",
        e[e.End = 2] = "End"
    }(M = t.HeaderPosition || (t.HeaderPosition = {})),
    function(e) {
        e[e.Close = 1] = "Close",
        e[e.Back = 2] = "Back"
    }(E = t.CloseButtonType || (t.CloseButtonType = {}));
    t.HeaderHeight = 60,
    t.HeaderHeightSmall = 50,
    t.HeaderHeightLandscape = 60,
    t.HeaderHeightLandscapeSmall = 50;
    const x = {
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        overflow: "visible",
        zIndex: 1
    }
      , D = m.lazyProperties({
        header: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            height: 60,
            alignSelf: "stretch",
            alignItems: "center"
        }),
        headerSmall: ()=>s.Styles.createViewStyle({
            height: 50
        }),
        headerBorder: ()=>s.Styles.createViewStyle({
            borderBottomWidth: 1,
            borderStyle: "solid"
        }),
        headerFloating: ()=>s.Styles.createViewStyle(x),
        headerDesktop: ()=>s.Styles.createViewStyle({
            paddingHorizontal: 10
        }),
        iconButton: ()=>s.Styles.createButtonStyle({
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center",
            width: A.IconSize.default,
            height: A.IconSize.default
        }),
        iconButtonLandscape: ()=>s.Styles.createViewStyle({
            height: 60,
            paddingTop: 5
        }),
        iconButtonLandscapeSmall: ()=>s.Styles.createViewStyle({
            height: 50,
            paddingTop: 5
        }),
        iconButtonLandscapeMobile: ()=>s.Styles.createViewStyle({
            paddingTop: 2
        }),
        textButton: ()=>s.Styles.createViewStyle({
            marginHorizontal: 10
        }),
        titleContainer: ()=>s.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row"
        }),
        titleContainerMobileCentered: ()=>s.Styles.createViewStyle({
            height: A.IconSize.default,
            alignItems: "center",
            overflow: "visible"
        }),
        titleContainerMobile: ()=>s.Styles.createViewStyle({
            height: A.IconSize.default,
            alignSelf: "center",
            alignItems: "center",
            overflow: "visible"
        }),
        titleCentered: ()=>s.Styles.createTextStyle({
            textAlign: "center"
        }),
        rightControlContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "flex-end"
        }),
        rightControlContainerCenterText: ()=>s.Styles.createViewStyle({
            minWidth: 64
        }),
        controlContainerCenterTextLarge: ()=>s.Styles.createViewStyle({
            minWidth: 80
        }),
        leftControlContainer: ()=>s.Styles.createViewStyle({
            width: 64,
            flexDirection: "row",
            justifyContent: "flex-start"
        }),
        leftControlContainerCenterText: ()=>s.Styles.createViewStyle({
            width: 64
        }),
        leftControlContainerRightNav: ()=>s.Styles.createViewStyle({
            width: 48
        }),
        controlsContainerDesktop: ()=>s.Styles.createViewStyle({
            paddingBottom: 3
        }),
        spacer: ()=>s.Styles.createViewStyle({
            width: 64,
            height: A.IconSize.default
        }),
        smallSpacer: ()=>s.Styles.createViewStyle({
            width: 12
        }),
        leftControlSpacer: ()=>s.Styles.createViewStyle({
            width: 20
        }),
        displayNameDesktopMaxHeight: ()=>s.Styles.createTextStyle({
            maxHeight: 54
        }),
        backgroundView: ()=>[I.absoluteFill, s.Styles.createViewStyle({
            justifyContent: "center",
            alignItems: "center"
        })],
        centeredIcon: ()=>s.Styles.createViewStyle({
            marginRight: 10
        }),
        centeredTitleWithIcon: ()=>s.Styles.createViewStyle({
            justifyContent: "center",
            alignItems: "center"
        }),
        centeredTitleNameWithIcon: ()=>s.Styles.createTextStyle({
            flex: 0
        })
    });
    class L extends w.default {
        constructor() {
            super(...arguments),
            this._onCenterControlsRef = e=>{
                this._centerControls = e || void 0
            }
            ,
            this._onLeftControlRef = e=>{
                this._leftControl = e || void 0
            }
            ,
            this._onRightControlRef = e=>{
                this._rightControl = e || void 0
            }
            ,
            this._getControl = (e,t)=>{
                if (e)
                    return e.icon || e.closeButtonType ? this._getIconButton(e, t) : this._getTextButton(e, t)
            }
            ,
            this._getTextButton = (e,t)=>e.text ? s.createElement(v, {
                key: t,
                ref: e.setButtonRef,
                style: D.textButton,
                buttonStyle: e.textButtonStyle || l.SXButtonStyle.ColorFill,
                buttonSize: l.SXButtonSize.Small,
                title: e.text,
                icon: e.textButtonIcon,
                showActivityIndicator: e.showActivityIndicator,
                onPress: e.onPress,
                onHoverStart: e.onHoverStart,
                onHoverEnd: e.onHoverEnd,
                disabled: e.disabled,
                accessibilityLabel: e.accessibilityLabel,
                accessibilityTraits: e.accessibilityTraits,
                allowTextWrap: !1
            }) : void 0,
            this._onIconButtonClosePress = ()=>{
                const e = N.newCauseId();
                p.log(d.LogTraceArea.Navigation, "SimplePanelHeader.onPress, causeId: " + e),
                C.goBack(e, this._getContext())
            }
            ,
            this._getIconButton = (e,t)=>{
                if (this._getRootViewType() === c.RootViewType.NativeWindow && e.closeButtonType === E.Close)
                    return;
                const i = this.state.isLandscape ? A.IconSize.size20 : A.IconSize.size24;
                let n, o = [D.iconButton];
                this.state.isLandscape && (o.push(this.state.isSmallDevice ? D.iconButtonLandscapeSmall : D.iconButtonLandscape),
                this.state.isMobileScreenSize && o.push(D.iconButtonLandscapeMobile)),
                o.push(e.buttonStyle),
                e.onPress ? n = e.onPress : e.closeButtonType && (n = this._onIconButtonClosePress);
                let r = "";
                if (e.title ? r = e.title : e.closeButtonType === E.Close ? r = S.getString("Global.CloseButtonTitle") : e.closeButtonType === E.Back && (r = S.getString("Global.BackButtonTitle")),
                e.showActivityIndicator)
                    return s.createElement(s.View, {
                        key: t,
                        style: o,
                        onPress: e.onPress,
                        title: r
                    }, s.createElement(b.default, {
                        size: l.SXActivityIndicatorSize.Small,
                        tintColor: e.color || T.Color.gray300,
                        useRXIndicator: !0
                    }));
                {
                    let a;
                    return e.icon ? a = e.icon : e.closeButtonType === E.Close ? a = k.closeIcon() : e.closeButtonType === E.Back && (a = k.backIcon()),
                    a ? s.createElement(g.default, {
                        key: t,
                        ref: e.setButtonRef,
                        disabled: e.disabled,
                        style: o,
                        hoverStyle: e.buttonHoverStyle,
                        iconTextStyle: e.textStyle,
                        size: i,
                        onPress: n,
                        onFocus: e.onFocus,
                        color: e.color || this._themeColors.headerIconColor,
                        hoverColor: e.hoverColor || this._themeColors.iconHoverColor,
                        icon: a,
                        title: r,
                        accessibilityLabel: e.accessibilityLabel,
                        accessibilityTraits: e.accessibilityTraits,
                        flipIcon: e.flipIcon
                    }) : void 0
                }
            }
        }
        _buildState(e, t) {
            const i = this._getContext()
              , n = this._getRootViewId()
              , r = y.default.getDeviceOrientation(n);
            let a = !!e.leavePaddingForStatusBar;
            !a && s.StatusBar.isOverlay() && f.default.leavePaddingForStatusBar() && (i.isPresentedInDesktopLeftNav || i.isPresentedInDesktopRightNav || i.isPresentedInManagedModal ? a = !0 : i.isPresentedInMobileSheet || i.isPresentedInDesktopSubview || (a = !0));
            let c = i.isPresentedInDesktopSubview ? void 0 : f.default.horizontalInsets(l.HorizontalInsetDefault);
            if (c && (e.headerPosition === M.Start || e.headerPosition === M.End))
                switch (e.headerPosition) {
                case M.Start:
                    c = {
                        left: c.left,
                        right: 0
                    };
                    break;
                case M.End:
                    c = {
                        left: 0,
                        right: c.right
                    }
                }
            return {
                isMobileScreenSize: y.default.isMobileScreenSize(n),
                leavePaddingForStatusBar: a,
                statusBarHeight: f.default.statusBarHeight(),
                isLandscape: r === o.DeviceOrientation.Landscape && !this._getContext().isPresentedInDesktopContentPanel || !!this._getContext().isPresentedInDesktopSubview,
                isSmallDevice: y.default.isSmallDevice(n),
                deviceOrientation: r,
                safeAreaHorizontalInsets: c
            }
        }
        componentDidMount() {
            if (super.componentDidMount(),
            this.props.dontFocusOnMount || n.isUndefined(this.props.titleViewTabIndexDeprecated))
                return;
            const e = ()=>{
                this.isComponentMounted() && this._centerControls && (p.log(d.LogTraceArea.Navigation, "SimplePanelHeader.componentDidMount, focus center controls"),
                this._centerControls.requestFocus(),
                this.props.shouldAnnouncePanelNameOnMount && this.props.panelName && s.Accessibility.announceForAccessibility(this.props.panelName))
            }
            ;
            this.props.delayHeaderFocus ? n.delay(e, 100) : n.defer(e)
        }
        requestFocus() {
            this._centerControls && this._centerControls.requestFocus()
        }
        render() {
            const e = this._getContext()
              , t = !!e.isPresentedInDesktopSubview
              , i = this._isPresentedInTabletLeftNav() || this._isPresentedInTabletRightNav()
              , o = !!e.isPresentedInDesktopRightNav
              , l = !!e.isPresentedInMobileSheet
              , c = !!e.isPresentedInSplitView
              , d = !!e.isPresentedInManagedModal
              , g = !!e.isPresentedInDesktopContentPanel;
            let p = !1;
            p = n.isUndefined(this.props.useCenteredControls) ? l || t && !o && !c && !d : this.props.useCenteredControls;
            let m, S = [D.header];
            this.props.backgroundColor ? S.push(s.Styles.createViewStyle({
                backgroundColor: this.props.backgroundColor
            }, !1)) : this.props.useTransparentBackground ? S.push(I.transparentBackground) : S.push(this._themeStyles.primaryBackgroundColorStyle),
            this.props.hideBottomBorder || c || (S.push(D.headerBorder),
            S.push(this._themeStyles.headerShadowBorderColorStyle)),
            (this.state.isSmallDevice || c) && S.push(D.headerSmall),
            this.state.leavePaddingForStatusBar && (S.push(_.heightStyle((this.state.isSmallDevice ? 50 : 60) + this.state.statusBarHeight)),
            m = _.paddingTopStyle(this.state.statusBarHeight),
            S.push(m)),
            this.props.floating && S.push(D.headerFloating),
            !t || o || c || d || S.push(D.headerDesktop),
            this.state.safeAreaHorizontalInsets && _.hasHorizontalSafeAreas(this.state.safeAreaHorizontalInsets) && S.push(_.horizontalPaddingStyle(this.state.safeAreaHorizontalInsets)),
            this.props.style && S.push(this.props.style);
            const C = [I.flexOne, this._themeStyles.headerTextColorStyle];
            let y, f;
            if (p && C.push(D.titleCentered),
            !t || i || c || d ? l || i || d ? C.push(this.props.useSmallFont ? P.fontStyle.panelHeaderLandscape : P.fontStyle.panelHeader) : this.state.isLandscape ? C.push(P.fontStyle.panelHeaderLandscape) : C.push(this.props.useSmallFont ? P.fontStyle.panelHeaderLandscape : P.fontStyle.panelHeader) : C.push(this.props.useSmallFont ? P.fontStyle.bodySmallBoldDeprecated : P.fontStyle.h5),
            this.props.titleTextStyle && C.push(this.props.titleTextStyle),
            this.props.panelName) {
                const e = [D.titleContainer];
                p || e.push(D.titleContainerMobile);
                const t = a.default.headerAccessibilityInfo(this.props.accessibleName || this.props.panelName)
                  , i = this.props.allowTextWrap ? 2 : 1;
                i > 1 && !r.UICapabilities.textNumberOfLinesSupported() && C.push(D.displayNameDesktopMaxHeight),
                this.props.centeredIcon && (e.push(D.centeredTitleWithIcon),
                C.push(D.centeredTitleNameWithIcon)),
                y = s.createElement(s.View, {
                    key: "centercontrols",
                    tabIndex: this.props.titleViewTabIndexDeprecated,
                    ref: this._onCenterControlsRef,
                    style: e,
                    accessibilityLabel: t.accessibilityLabel,
                    importantForAccessibility: s.Types.ImportantForAccessibility.Yes,
                    accessibilityTraits: t.accessibilityTraits,
                    accessibilityLiveRegion: this.props.centralControlAccessibilityLiveRegion
                }, this.props.centeredIcon && s.createElement(h.default, {
                    color: this._themeColors.primaryIconColor,
                    size: A.IconSize.size24,
                    style: D.centeredIcon,
                    icon: this.props.centeredIcon
                }), s.createElement(u.HiddenText, {
                    style: C,
                    numberOfLines: i
                }, this.props.panelName))
            } else
                this.props.titleView && (y = this.props.titleView);
            let b = !1;
            this.props.rightButtons ? (f = n.isArray(this.props.rightButtons) ? n.map(this.props.rightButtons, (e,t)=>this._getControl(e, "rightbutton" + t)) : this._getControl(this.props.rightButtons, "rightbutton"),
            b = !0) : this.props.leftButton && this.props.titleView && (f = this._getSpacer()),
            p && this.props.leftButton && !this.props.rightButtons && (f = this._getSpacer());
            const v = [D.leftControlContainer]
              , T = [D.rightControlContainer];
            let k;
            p ? this.props.adjustCenteredControlsWidth ? (T.push(D.controlContainerCenterTextLarge),
            v.push(D.controlContainerCenterTextLarge)) : (v.push(D.leftControlContainerCenterText),
            T.push(D.rightControlContainerCenterText)) : (o || d) && v.push(D.leftControlContainerRightNav),
            t && (v.push(D.controlsContainerDesktop),
            T.push(D.controlsContainerDesktop),
            f || !1 === this.props.useCenteredControls || T.push(D.smallSpacer)),
            k = this.props.leftButton ? s.createElement(s.View, {
                key: "leftbutton",
                ref: this._onLeftControlRef,
                style: v
            }, this._getControl(this.props.leftButton, "leftbutton")) : c || g ? s.createElement(s.View, {
                key: "leftbutton",
                style: D.leftControlSpacer
            }) : s.createElement(s.View, {
                key: "leftbutton",
                style: v
            });
            const w = this.props.backgroundView ? s.createElement(s.View, {
                style: [D.backgroundView, m]
            }, this.props.backgroundView) : void 0;
            return w && !y && (y = s.createElement(s.View, {
                style: I.flexOne,
                ignorePointerEvents: !0,
                blockPointerEvents: !0
            })),
            s.createElement(s.View, {
                style: S,
                ignorePointerEvents: this.props.ignorePointerEvents,
                blockPointerEvents: this.props.blockPointerEvents
            }, w, k, y, s.createElement(s.View, {
                key: "rightbutton",
                ref: b ? this._onRightControlRef : void 0,
                style: T
            }, f))
        }
        _getSpacer() {
            return s.createElement(s.View, {
                style: D.spacer,
                ignorePointerEvents: !0
            })
        }
    }
    t.SimplePanelHeader = L
}
, , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0);
    class s {
        static shouldAnnounceForAccessibility() {
            return !0
        }
        static isMobileScreenReaderEnabled() {
            return !1
        }
        static maybeAnnounceForAccessibility(e, t) {
            const i = ()=>{
                e && s.shouldAnnounceForAccessibility() && o.Accessibility.announceForAccessibility(e)
            }
            ;
            t ? n.delay(i, t) : 0 === t ? n.defer(i) : i()
        }
    }
    e.exports = s
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(545)
      , s = i(7)
      , r = i(1359)
      , a = i(1357)
      , l = i(952)
      , c = i(1361)
      , d = i(1362)
      , u = i(384)
      , g = i(954)
      , h = i(2)
      , p = i(3)
      , m = i(1369)
      , S = i(274)
      , C = i(355);
    let y = 51;
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y += 2,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    y++,
    t.InternalKeys = {
        SkypeToken: "skypetoken2",
        AMSCookieSkypeToken: "priv_amscookieskypetoken2",
        TeamsCookieSkypeToken: "priv_teamscookieskypetoken",
        MSARefreshToken: "msarefreshtoken",
        CortanaToken: "cortanatoken",
        MsaUserInternalToken: "msaUserInternalToken",
        CdnToken: "cdntoken",
        ApsETag: "priv_apsetag_v3",
        ApsFeaturedAgentsETag: "priv_apsfeaturedagentsetag_v2",
        ApsIntegrationsETag: "priv_apsintegrationsetag_v2",
        ContactsDeltaSyncETag: "contactsdeltasyncetag_v17",
        ContactsNextFullSync: "contacts_next_fullsync",
        Prefs: "priv_prefs_v2",
        PrefsLocal: "priv_prefsLocal",
        ConversationListSyncInfo: "priv_convlistsyncinfov14",
        ContactMris: "priv_contactusernames_v4",
        ContactInvites: "priv_contactinvites",
        AddressBookContactHashes: "priv_addressbookcontacthashes_v2",
        EcsConfig: "priv_ecscache",
        EngagementCampaignData: "priv_engagementcampaigndata",
        PesConfigInfo: "priv_pesconfiginfo",
        PesTabs: "priv_pestabs",
        Emoticons: "priv_emoticons",
        RecentlyUsedEmoticons: "priv_mru_emoticons",
        CustomReactionsTones: "priv_crt_reactions",
        LastlyUsedEmoticonTones: "priv_lut_emoticons",
        LastlyUsedEmoticonGroupItem: "priv_luegi_emoticons",
        Mojis: "priv_mojis",
        RecentlyUsedMojis: "priv_mru_mojis",
        PhoneCountryCache: "priv_phonecountrycache_v4",
        DeviceId: "priv_deviceid",
        LastDBCleanupVersion: "lastCleanupVersion",
        MyUserStoreData: "priv_myuserstore",
        ChatServiceRegToken: "priv_csregtoken",
        EntitlementsData: "priv_EntitlementsData",
        LastOverlayConfigurationETag: "priv_lastOverlayConfigurationETag",
        ChatServiceSessionInfo_deprecated: "chatservicesessioninfo",
        InfoRefreshServiceCache: "priv_inforefreshcache",
        ContactsDirtyBit: "priv_contactsdirtybit_v5",
        ContactInvitesDirtyBit: "priv_contactinvitesdirtybit",
        SyncAddressBookEnabled: "priv_syncaddressbookenabled",
        PhoneRegisteredWithShortCircuitCheckCompleted: "phoneRegisteredWithShortCircuitCheckCompleted",
        BingSearchConfig: "bingsearchconfigdata",
        EdfRegistrationInfo: "priv_pnhregistrationinfo",
        PreferedDevices: "preferedDevices",
        NdiConfig: "ndiConfig",
        MyUserColor: "priv_myUserColor",
        PendingMediaPrefetchV1: "priv_pendingMediaPrefetch",
        PendingMediaPrefetch: "priv_pendingMediaPrefetch_v2",
        WebOfferStoreCache: "priv_webofferstorecache",
        IOSOfferStoreCache: "priv_iosofferstorecache",
        NativeSNOfferStoreCache: "priv_nativesnofferstorecache",
        BillingInformationCache: "priv_billinginformation",
        PersonalizedOfferStoreCache: "priv_personalizedofferstorecache",
        NativePersonalizedOfferStoreCache: "priv_nativepersonalizedofferstorecache",
        PurchaseOptionsStoreCache: "priv_purchaseoptionsstorecache",
        BlockedMriStoreCache: "priv_blockeduserstorecache",
        PesStickerInCaptureConfigInfo: "priv_pesstickercaptureconfiginfo",
        PesStickerInChatConfigInfo: "priv_pesstickerchatconfiginfo",
        PesStickerInCaptureTabs: "priv_pesstickercapturetabs",
        PesStickerInChatTabs: "priv_pesstickerchattabs",
        StickersInCapture: "priv_stickerscapture",
        StickersInChat: "priv_stickerschat",
        RecentlyUsedStickersInCapture: "priv_mru_stickerscapture",
        RecentlyUsedStickersInChat: "priv_mru_stickerschat",
        RecentlyUsedEffectsInCapture: "priv_mru_effectscapture",
        PesGifConfigInfo: "priv_pesgifconfiginfo",
        PesGifTabs: "priv_pesgiftabs",
        AgentMrisToImportantize: "AgentMrisToImportantize",
        SuggestionFeedbackMessageIds: "priv_suggestionsFeedbackClicked",
        SuggestionsData: "priv_suggestionsData",
        DeviceStoreSettings: "DeviceStoreSettings",
        EndToEndEncryptionData: "e2eeData",
        SecureDeviceId: "priv_securedeviceid",
        Integrations: "integrations",
        MyUserPresence: "priv_myUserPresence",
        ClockSkew: "priv_clockSkew",
        EngagementUserTaggingConfig: "engagement_user_tagging_config",
        ActiveCalls: "priv_activeCalls",
        PrivateConversations: "privateConversations",
        TransferServicesMeta: "TransferServicesMeta",
        IsOnGoGoSSID: "priv_isOnGoGoSSID",
        EcsParamCache: "priv_ecsParamCache",
        SharedIdServiceCache: "priv_sharedidcache",
        CelebrationNotificationLastShownTime: "priv_celebrationNotificationLastShownTime",
        AppActivity: "priv_appactivity",
        AuthTokenLastRefreshDate: "authtokenlastrefreshdate",
        AuthTokenNextRefreshDate: "authtokennextrefreshdate",
        MyUserProfileV2: "MyUserProfileV2",
        LocalOverriddenEcsConfig: "priv_localoverrideecscache",
        CallCaptionsCleanupStartTimestamp: "callcaptionscleanupstarttimestamp",
        CallCaptionsCleanupEndTimestamp: "callcaptionscleanupendtimestamp"
    },
    t.Stores = {
        Conversations: "conversationsv14",
        Alerts: "alertsv12",
        PopCards: "popupcards",
        InternalData: "internaldata",
        Messages: "messagesv12",
        Profiles: "profilecachev8",
        ProfileMinis: "miniprofilecachev8",
        Telemetry: "telemetrycachev3",
        Agents: "agentscachev3",
        FeaturedAgents: "featuredagentscache",
        AgentIdUserIdPairs: "priv_agentiduseridpairs",
        IntegrationConsents: "priv_integrationconsents",
        PersistentActions: "persistentActionsv2",
        LocalNotifications: "localnotificationsv2",
        FileCacheMetadata: "fileCachemetadata",
        FileTracker: "fileTracker",
        LocalAddressBookContacts: "localAddressBookContacts",
        ImagePrefetchInfo: "imagePrefetchInfo",
        PeopleRecommendations: "peoplerecommendationscache",
        Connectors: "connectors",
        EngagementPullCampaigns: "engagementpullcampaigns",
        ConsumedConciergeBotMessages: "consumedconciergebotmsgs",
        CallLogs: "calllogs",
        Drafts: "drafts",
        EngagementMessagesQueueStore: "engagementMessagesQueue",
        MediaDrafts: "mediadrafts"
    },
    t.Indexes = {
        Conversations_IsHighlight_HasUnread: "convHlHasUnread",
        Conversations_IsHighlight_ForceToRecents_Timestamp: "convHlRecentsTimestamp",
        Conversations_NeedsSync: "convNeedsSync",
        Conversations_SearchTerms: "searchTerms",
        Alerts_Read_Timestamp: "alertsReadTimestamp",
        Alerts_ConvId: "alertsConvid",
        Agents_Important: "agentsImportant",
        Agents_Whitelisted: "agentsWhitelisted",
        Messages_ConversationId_CreatedTime: "convidcreatedtime",
        Messages_ConversationId_CountsType_CreatedTime: "convidcountscreatedtime",
        Messages_ConversationId_IsMyMessage_CreatedTime: "convidmymessagecreatedtime",
        Profiles_PhoneNumber: "phoneNumbersIndex",
        Telemetry_Priority_Timestamp: "prioritytimestamp"
    };
    class f extends d.ClientDatabaseBase {
        constructor() {
            super(...arguments),
            this._schema = {
                version: 88,
                lastUsableVersion: 10,
                stores: [{
                    name: t.Stores.Messages,
                    estimatedObjBytes: 1500,
                    primaryKeyPath: ["conversationId", "cuid"],
                    indexes: [{
                        name: t.Indexes.Messages_ConversationId_CreatedTime,
                        keyPath: ["conversationId", "createdTime"],
                        unique: !1
                    }, {
                        name: t.Indexes.Messages_ConversationId_CountsType_CreatedTime,
                        keyPath: ["conversationId", "_countsType", "createdTime"],
                        unique: !1
                    }, {
                        name: t.Indexes.Messages_ConversationId_IsMyMessage_CreatedTime,
                        keyPath: ["conversationId", "_isMyMessage", "createdTime"],
                        unique: !1
                    }]
                }, {
                    name: t.Stores.Alerts,
                    primaryKeyPath: "guid",
                    estimatedObjBytes: 4e3,
                    indexes: [{
                        name: t.Indexes.Alerts_ConvId,
                        keyPath: "message.conversationId",
                        unique: !1
                    }, {
                        name: t.Indexes.Alerts_Read_Timestamp,
                        keyPath: ["isRead", "alertTime"],
                        unique: !1
                    }]
                }, {
                    name: t.Stores.PopCards,
                    primaryKeyPath: "guid",
                    estimatedObjBytes: 1e3,
                    indexes: []
                }, {
                    name: t.Stores.Conversations,
                    primaryKeyPath: "conv.id",
                    estimatedObjBytes: 3500,
                    indexes: [{
                        name: t.Indexes.Conversations_IsHighlight_ForceToRecents_Timestamp,
                        keyPath: ["_isHighlight", "_forceToRecents", "conv._timestamp"],
                        unique: !1
                    }, {
                        name: t.Indexes.Conversations_IsHighlight_HasUnread,
                        keyPath: ["_isHighlight", "counts.hasUnread"],
                        unique: !1
                    }, {
                        name: t.Indexes.Conversations_NeedsSync,
                        keyPath: "_needsSync",
                        unique: !1
                    }, {
                        name: t.Indexes.Conversations_SearchTerms,
                        keyPath: "conv._searchTerms",
                        fullText: !0
                    }]
                }, {
                    name: t.Stores.InternalData,
                    primaryKeyPath: "id",
                    estimatedObjBytes: 1e4,
                    indexes: []
                }, {
                    name: t.Stores.Profiles,
                    primaryKeyPath: "mri",
                    estimatedObjBytes: 300,
                    indexes: [{
                        name: t.Indexes.Profiles_PhoneNumber,
                        keyPath: "_phoneNumbersForDbIndex",
                        multiEntry: !0
                    }]
                }, {
                    name: t.Stores.ProfileMinis,
                    primaryKeyPath: "mri",
                    estimatedObjBytes: 250,
                    indexes: []
                }, {
                    name: t.Stores.Telemetry,
                    primaryKeyPath: "id",
                    estimatedObjBytes: 3e3,
                    indexes: [{
                        name: t.Indexes.Telemetry_Priority_Timestamp,
                        keyPath: ["priority", "timestamp"],
                        unique: !1
                    }]
                }, {
                    name: t.Stores.Agents,
                    primaryKeyPath: "agentId",
                    estimatedObjBytes: 1500,
                    indexes: [{
                        name: t.Indexes.Agents_Important,
                        keyPath: "isImportant",
                        unique: !1
                    }, {
                        name: t.Indexes.Agents_Whitelisted,
                        keyPath: "isWhitelisted",
                        unique: !1
                    }]
                }, {
                    name: t.Stores.FeaturedAgents,
                    primaryKeyPath: "agentId",
                    estimatedObjBytes: 1500,
                    indexes: []
                }, {
                    name: t.Stores.AgentIdUserIdPairs,
                    primaryKeyPath: "agentId",
                    indexes: []
                }, {
                    name: t.Stores.IntegrationConsents,
                    primaryKeyPath: ["integrationId", "consentType"],
                    indexes: []
                }, {
                    name: t.Stores.PersistentActions,
                    primaryKeyPath: "id",
                    indexes: []
                }, {
                    name: t.Stores.LocalNotifications,
                    primaryKeyPath: "id",
                    indexes: []
                }, {
                    name: t.Stores.FileCacheMetadata,
                    primaryKeyPath: ["cacheName", "id"],
                    indexes: []
                }, {
                    name: t.Stores.FileTracker,
                    primaryKeyPath: "id",
                    indexes: []
                }, {
                    name: t.Stores.LocalAddressBookContacts,
                    primaryKeyPath: "id",
                    indexes: []
                }, {
                    name: t.Stores.ImagePrefetchInfo,
                    primaryKeyPath: "url",
                    estimatedObjBytes: 200,
                    indexes: []
                }, {
                    name: t.Stores.PeopleRecommendations,
                    primaryKeyPath: "fetchedPosition",
                    indexes: []
                }, {
                    name: t.Stores.Connectors,
                    primaryKeyPath: "mri",
                    indexes: []
                }, {
                    name: t.Stores.EngagementPullCampaigns,
                    primaryKeyPath: "campaignId",
                    estimatedObjBytes: 250,
                    indexes: []
                }, {
                    name: t.Stores.ConsumedConciergeBotMessages,
                    primaryKeyPath: ["conversationId", "messageCuid"],
                    estimatedObjBytes: 100,
                    indexes: []
                }, {
                    name: t.Stores.CallLogs,
                    primaryKeyPath: "callId",
                    indexes: []
                }, {
                    name: t.Stores.Drafts,
                    primaryKeyPath: "conversationId",
                    indexes: []
                }, {
                    name: t.Stores.EngagementMessagesQueueStore,
                    primaryKeyPath: "id",
                    indexes: []
                }, {
                    name: t.Stores.MediaDrafts,
                    primaryKeyPath: "conversationId",
                    indexes: []
                }]
            }
        }
        open(e, i, o=!1, s=!1) {
            const r = "s4l-" + i
              , a = Date.now();
            let l = super.open(e, r, !1, s);
            return o && (p.log(h.LogTraceArea.GenericUnsafe, "open() with nukeDb called..."),
            l = l.then(()=>this.openTransaction([t.Stores.InternalData], !1)).then(e=>{
                const i = e.internal_getInternalData(t.InternalKeys.SkypeToken);
                return e.markCompleted(),
                i
            }
            ).thenAsync(i=>this._close().then(()=>super.open(e, r, !0, s)).then(()=>{
                if (i)
                    return this.openTransaction([t.Stores.InternalData], !0).then(e=>{
                        const n = e.internal_putInternalData(t.InternalKeys.SkypeToken, i);
                        return e.markCompleted(),
                        n
                    }
                    )
            }
            )).thenAsync(n.noop)),
            l.then(()=>{
                const e = Date.now() - a;
                p.log(h.LogTraceArea.GenericUnsafe, `ClientDatabase initialization Completed in ${e}ms`),
                this._databaseInitalizationDeferred && (p.log(h.LogTraceArea.GenericUnsafe, "Resolving initialization promise..."),
                this._databaseInitalizationDeferred.resolve(void 0),
                this._databaseInitalizationDeferred = void 0)
            }
            )
        }
        performWhenDatabaseInitialized() {
            return this.isInitialized() ? (p.log(h.LogTraceArea.GenericUnsafe, "Database is already initialized    ..."),
            s.Resolved()) : (this._databaseInitalizationDeferred || (this._databaseInitalizationDeferred = s.Defer()),
            p.log(h.LogTraceArea.GenericUnsafe, "Awaiting database initialization..."),
            this._databaseInitalizationDeferred.promise())
        }
        getProviderName() {
            const e = this.getProviderInfo();
            return e && e.name
        }
        internal_getAllInternalData() {
            return this.openTransaction([t.Stores.InternalData], !1).then(e=>{
                const t = e.internal_getAllInternalData();
                return e.markCompleted(),
                t
            }
            )
        }
        internal_getInternalData(e) {
            return this.openTransaction([t.Stores.InternalData], !1).then(t=>{
                const i = t.internal_getInternalData(e);
                return t.markCompleted(),
                i
            }
            )
        }
        internal_putInternalData(e, i) {
            return this.openTransaction([t.Stores.InternalData], !0).then(t=>{
                const n = t.internal_putInternalData(e, i);
                return t.markCompleted(),
                n
            }
            )
        }
        internal_deleteInternalData(e) {
            return this.openTransaction([t.Stores.InternalData], !0).then(t=>{
                const i = t.internal_deleteInternalData(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getUserProfileByMri(e) {
            return this.openTransaction([t.Stores.Profiles], !1).then(t=>{
                const i = t.getUserProfileByMri(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getUserProfilesByMris(e) {
            return this.openTransaction([t.Stores.Profiles], !1).then(t=>{
                const i = t.getUserProfilesByMris(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getUserProfilesByPhoneNumber(e) {
            return this.openTransaction([t.Stores.Profiles], !1).then(t=>{
                const i = t.getUserProfilesByPhoneNumber(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllUserProfiles() {
            return this.openTransaction([t.Stores.Profiles], !1).then(e=>{
                const t = e.getAllUserProfiles();
                return e.markCompleted(),
                t
            }
            )
        }
        putUserProfiles(e) {
            return this.openTransaction([t.Stores.Profiles], !0).then(t=>{
                const i = t.putUserProfiles(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllDisplayableUsers() {
            return this.openTransaction([t.Stores.ProfileMinis], !1).then(e=>{
                const t = e.getAllDisplayableUsers();
                return e.markCompleted(),
                t
            }
            )
        }
        getDisplayableUser(e) {
            return this.openTransaction([t.Stores.ProfileMinis], !1).then(t=>{
                const i = t.getDisplayableUser(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getTelemetryEvents(e, i) {
            return this.openTransaction([t.Stores.Telemetry], !1).then(t=>{
                const n = t.getTelemetryEvents(e, i);
                return t.markCompleted(),
                n
            }
            )
        }
        putTelemetryEvents(e) {
            return this.openTransaction([t.Stores.Telemetry], !0).then(t=>{
                const i = t.putTelemetryEvents(e);
                return t.markCompleted(),
                i
            }
            )
        }
        deleteTelemetryEvents(e) {
            return this.openTransaction([t.Stores.Telemetry], !0).then(t=>{
                const i = t.deleteTelemetryEvents(e);
                return t.markCompleted(),
                i
            }
            )
        }
        countTelemetryEvents() {
            return this.openTransaction([t.Stores.Telemetry], !1).then(e=>{
                const t = e.countTelemetryEvents();
                return e.markCompleted(),
                t
            }
            )
        }
        getAgentDescription(e) {
            return this.openTransaction([t.Stores.Agents], !1).then(t=>{
                const i = t.getAgentDescription(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAgentDescriptions(e) {
            return this.openTransaction([t.Stores.Agents], !1).then(t=>{
                const i = t.getAgentDescriptions(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getImportantAgents() {
            return this.openTransaction([t.Stores.Agents], !1).then(e=>{
                const t = e.getImportantAgents();
                return e.markCompleted(),
                t
            }
            )
        }
        getWhitelistedAgents() {
            return this.openTransaction([t.Stores.Agents], !1).then(e=>{
                const t = e.getWhitelistedAgents();
                return e.markCompleted(),
                t
            }
            )
        }
        putAgentDescriptions(e) {
            return this.openTransaction([t.Stores.Agents], !0).then(t=>{
                const i = t.putAgentDescriptions(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllFeaturedAgents() {
            return this.openTransaction([t.Stores.FeaturedAgents], !1).then(e=>{
                const t = e.getAllFeaturedAgents();
                return e.markCompleted(),
                t
            }
            )
        }
        replaceFeaturedAgents(e) {
            return this.openTransaction([t.Stores.FeaturedAgents], !0).then(t=>t.replaceFeaturedAgents(e))
        }
        getAllAgentIdUserIdPairs() {
            return this.openTransaction([t.Stores.AgentIdUserIdPairs], !1).then(e=>{
                const t = e.getAllAgentIdUserIdPairs();
                return e.markCompleted(),
                t
            }
            )
        }
        putAgentIdUserIdPair(e) {
            return this.openTransaction([t.Stores.AgentIdUserIdPairs], !0).then(t=>{
                const i = t.putAgentIdUserIdPair(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getConnectorMetadata(e) {
            return this.openTransaction([t.Stores.Connectors], !1).then(t=>{
                const i = t.getConnectorMetadata(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getConnectorsMetadata(e) {
            return this.openTransaction([t.Stores.Connectors], !1).then(t=>{
                const i = t.getConnectorsMetadata(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllConnectorMetadata() {
            return this.openTransaction([t.Stores.Connectors], !1).then(e=>{
                const t = e.getAllConnectorMetadata();
                return e.markCompleted(),
                t
            }
            )
        }
        putConnectorMetadata(e) {
            return this.openTransaction([t.Stores.Connectors], !0).then(t=>{
                const i = t.putConnectorMetadata(e);
                return t.markCompleted(),
                i
            }
            )
        }
        putConnectorsMetadata(e) {
            return this.openTransaction([t.Stores.Connectors], !0).then(t=>{
                const i = t.putConnectorsMetadata(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getIntegrationConsent(e, i) {
            return this.openTransaction([t.Stores.IntegrationConsents], !1).then(t=>{
                const n = t.getIntegrationConsent(e, i);
                return t.markCompleted(),
                n
            }
            )
        }
        putIntegrationConsent(e) {
            return this.openTransaction([t.Stores.IntegrationConsents], !0).then(t=>{
                const i = t.putIntegrationConsent(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getConversationMeta(e) {
            return this.openTransaction([t.Stores.Conversations], !1).then(t=>{
                const i = t.getConversationMeta(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getConversationMetas(e) {
            return this.openTransaction([t.Stores.Conversations], !1).then(t=>{
                const i = t.getConversationMetas(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllConversationMetas(e, i) {
            return this.openTransaction([t.Stores.Conversations], !1).then(t=>{
                const n = t.getAllConversationMetas(e, i);
                return t.markCompleted(),
                n
            }
            )
        }
        getCountOfUnreadConversations(e) {
            return this.openTransaction([t.Stores.Conversations], !1).then(t=>{
                const i = t.getCountOfUnreadConversations(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getRecentNonHighlightConversationMetas(e, i=u.ConversationHistoryTimeSpanImportant) {
            return this.openTransaction([t.Stores.Conversations], !1).then(t=>t.getRecentNonHighlightConversationMetas(e, i))
        }
        getAllNonHighlightConversationMetas() {
            return this.openTransaction([t.Stores.Conversations], !1).then(e=>e.getAllNonHighlightConversationMetas())
        }
        getConversationMetasBySearchTerm(e, i=!1, n) {
            if (0 === e.length)
                return s.Rejected("Empty search term");
            const r = i ? o.FullTextTermResolution.Or : o.FullTextTermResolution.And;
            return this.openTransaction([t.Stores.Conversations], !1).then(t=>{
                const i = t.getConversationMetasBySearchTerm(e, r, n);
                return t.markCompleted(),
                i
            }
            )
        }
        putConversationMetas(e) {
            return this.openTransaction([t.Stores.Conversations], !0).then(t=>{
                const i = t.putConversationMetas(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllMessages(e, i) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                const n = t.getAllMessages(e, i);
                return t.markCompleted(),
                n
            }
            )
        }
        getMessagesInConversation(e) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                const i = t.getMessagesInConversation(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getMessageByCuid(e, i) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                const n = t.getMessageByCuid(e, i);
                return t.markCompleted(),
                n
            }
            )
        }
        getMessagesByCuidForConversations(e) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                const i = t.getMessagesByCuidForConversations(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getMessagesForConversationBeforeTime(e, i, n, o) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                const s = t.getMessagesForConversationBeforeTime(e, i, n, o);
                return t.markCompleted(),
                s
            }
            )
        }
        getMessagesNotSentByMe(e, i, n, o) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                const s = t.getMessagesNotSentByMe(e, i, n, o);
                return t.markCompleted(),
                s
            }
            )
        }
        getMessagesSentByMeSinceTime(e, i, n, o) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                const s = t.getMessagesSentByMeSinceTime(e, i, n, o);
                return t.markCompleted(),
                s
            }
            )
        }
        getMessagesForConversationAfterTime(e, i, n, o) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                const s = t.getMessagesForConversationAfterTime(e, i, n, o);
                return t.markCompleted(),
                s
            }
            )
        }
        getMessagesForConversationAndTimeRange(e, i, n, s=!1, r) {
            return this.openTransaction([t.Stores.Messages], !1).then(t=>{
                let a = o.QuerySortOrder.None;
                s ? a = o.QuerySortOrder.Reverse : !s && r && (a = o.QuerySortOrder.Forward);
                const l = t.getMessagesForConversationAndTimeRange(e, i, n, a, r);
                return t.markCompleted(),
                l
            }
            )
        }
        removeMessages(e) {
            this.openTransaction([t.Stores.Messages], !0).then(t=>t.removeMessages(e))
        }
        getMostRecentAlertTime() {
            return this.openTransaction([t.Stores.Alerts], !1).then(e=>{
                const t = e.getMostRecentAlertTime();
                return e.markCompleted(),
                t
            }
            )
        }
        countUnreadAlertsSinceTime(e) {
            return this.openTransaction([t.Stores.Alerts], !1).then(t=>{
                const i = t.countUnreadAlertsSinceTime(e);
                return t.markCompleted(),
                i
            }
            )
        }
        countAlerts() {
            return this.openTransaction([t.Stores.Alerts], !1).then(e=>{
                const t = e.countAlerts();
                return e.markCompleted(),
                t
            }
            )
        }
        getAlerts() {
            return this.openTransaction([t.Stores.Alerts], !1).then(e=>{
                const t = e.getAlerts();
                return e.markCompleted(),
                t
            }
            )
        }
        putAlerts(e) {
            return this.openTransaction([t.Stores.Alerts], !0).then(t=>{
                const i = t.putAlerts(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removeAlerts(e) {
            return this.openTransaction([t.Stores.Alerts], !0).then(t=>{
                const i = t.removeAlerts(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllPopCards() {
            return this.openTransaction([t.Stores.PopCards], !1).then(e=>{
                const t = e.getAllPopCards();
                return e.markCompleted(),
                t
            }
            )
        }
        putPopCards(e) {
            return this.openTransaction([t.Stores.PopCards], !0).then(t=>{
                const i = t.putPopCards(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removePopCard(e) {
            return this.openTransaction([t.Stores.PopCards], !0).then(t=>{
                const i = t.removePopCard(e);
                return t.markCompleted(),
                i
            }
            )
        }
        clearAllPopCards() {
            return this.openTransaction([t.Stores.PopCards], !0).then(e=>e.clearAllPopCards())
        }
        getAllEngagementMessagesInQueue() {
            return this.openTransaction([t.Stores.EngagementMessagesQueueStore], !1).then(e=>{
                const t = e.getAllEngagementMessagesInQueue();
                return e.markCompleted(),
                t
            }
            )
        }
        putEngagementMessagesToQueue(e) {
            return this.openTransaction([t.Stores.EngagementMessagesQueueStore], !0).then(t=>{
                const i = t.putEngagementMessagesToQueue(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removeEngagementMessageFromQueue(e) {
            return this.openTransaction([t.Stores.EngagementMessagesQueueStore], !0).then(t=>{
                const i = t.removeEngagementMessageFromQueue(e);
                return t.markCompleted(),
                i
            }
            )
        }
        clearEngagementQueueOfMessages() {
            return this.openTransaction([t.Stores.EngagementMessagesQueueStore], !0).then(e=>e.clearEngagementQueueOfMessages())
        }
        getAllCampaigns() {
            return this.openTransaction([t.Stores.EngagementPullCampaigns], !1).then(e=>{
                const t = e.getAllCampaigns();
                return e.markCompleted(),
                t
            }
            )
        }
        putCampaigns(e) {
            return this.openTransaction([t.Stores.EngagementPullCampaigns], !0).then(t=>{
                const i = t.putCampaigns(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removeCampaigns(e) {
            return this.openTransaction([t.Stores.EngagementPullCampaigns], !0).then(t=>{
                const i = t.removeCampaigns(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllConsumedBotMessages() {
            return this.openTransaction([t.Stores.ConsumedConciergeBotMessages], !1).then(e=>{
                const t = e.getAllConsumedBotMessages();
                return e.markCompleted(),
                t
            }
            )
        }
        putConsumedBotMessages(e) {
            return this.openTransaction([t.Stores.ConsumedConciergeBotMessages], !0).then(t=>{
                const i = t.putConsumedBotMessages(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getLocalNotifications() {
            return this.openTransaction([t.Stores.LocalNotifications], !1).then(e=>{
                const t = e.getLocalNotifications();
                return e.markCompleted(),
                t
            }
            )
        }
        putLocalNotifications(e) {
            return this.openTransaction([t.Stores.LocalNotifications], !0).then(t=>{
                const i = t.putLocalNotifications(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removeLocalNotifications(e) {
            return this.openTransaction([t.Stores.LocalNotifications], !0).then(t=>{
                const i = t.removeLocalNotifications(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getPersistentActions() {
            return this.openTransaction([t.Stores.PersistentActions], !1).then(e=>{
                const t = e.getPersistentActions();
                return e.markCompleted(),
                t
            }
            )
        }
        putPersistentAction(e) {
            return this.openTransaction([t.Stores.PersistentActions], !0).then(t=>{
                const i = t.putPersistentAction(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removePersistentAction(e) {
            return this.openTransaction([t.Stores.PersistentActions], !0).then(t=>{
                const i = t.removePersistentAction(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllFileCacheMetadata() {
            return this.openTransaction([t.Stores.FileCacheMetadata], !1).then(e=>{
                const t = e.getAllFileCacheMetadata();
                return e.markCompleted(),
                t
            }
            )
        }
        putFileCacheMetadata(e) {
            return this.openTransaction([t.Stores.FileCacheMetadata], !0).then(t=>{
                const i = t.putFileCacheMetadata(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removeFileCacheMetadata(e, i) {
            return this.openTransaction([t.Stores.FileCacheMetadata], !0).then(t=>{
                const n = t.removeFileCacheMetadata(e, i);
                return t.markCompleted(),
                n
            }
            )
        }
        getAllFileTrackerMetadata() {
            return this.openTransaction([t.Stores.FileTracker], !1).then(e=>{
                const t = e.getAllFileTrackerMetadata();
                return e.markCompleted(),
                t
            }
            )
        }
        putFileTrackerMetadata(e) {
            return this.openTransaction([t.Stores.FileTracker], !0).then(t=>{
                const i = t.putFileTrackerMetadata(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removeFileTrackerMetadata(e) {
            return this.openTransaction([t.Stores.FileTracker], !0).then(t=>{
                const i = t.removeFileTrackerMetadata(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllLocalAddressBookContacts() {
            return this.openTransaction([t.Stores.LocalAddressBookContacts], !1).then(e=>{
                const t = e.getAllLocalAddressBookContacts();
                return e.markCompleted(),
                t
            }
            )
        }
        putLocalAddressBookContacts(e) {
            return this.openTransaction([t.Stores.LocalAddressBookContacts], !0).then(t=>{
                const i = t.putLocalAddressBookContacts(e);
                return t.markCompleted(),
                i
            }
            )
        }
        replaceAllLocalAddressBookContacts(e) {
            return this.openTransaction([t.Stores.LocalAddressBookContacts], !0).then(t=>t.replaceAllLocalAddressBookContacts(e))
        }
        removeAllLocalAddressBookContacts() {
            return this.openTransaction([t.Stores.LocalAddressBookContacts], !0).then(e=>{
                const t = e.removeAllLocalAddressBookContacts();
                return e.markCompleted(),
                t
            }
            )
        }
        getAllImagePrefetchInfo() {
            return this.openTransaction([t.Stores.ImagePrefetchInfo], !1).then(e=>{
                const t = e.getAllImagePrefetchInfo();
                return e.markCompleted(),
                t.then(e=>n.compact(e))
            }
            )
        }
        putImagePrefetchRecords(e) {
            return this.openTransaction([t.Stores.ImagePrefetchInfo], !0).then(t=>{
                const i = t.putImagePrefetchRecords(e);
                return t.markCompleted(),
                i
            }
            )
        }
        removeImagePrefetchInfo(e) {
            return this.openTransaction([t.Stores.ImagePrefetchInfo], !0).then(t=>{
                const i = t.removeImagePrefetchInfo(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllPeopleRecommendations() {
            return this.openTransaction([t.Stores.PeopleRecommendations], !1).then(e=>{
                const t = e.getAllPeopleRecommendations();
                return e.markCompleted(),
                t
            }
            )
        }
        replacePeopleRecommendations(e) {
            return this.openTransaction([t.Stores.PeopleRecommendations], !0).then(t=>t.replacePeopleRecommendations(e))
        }
        removePeopleRecommendations(e) {
            return this.openTransaction([t.Stores.PeopleRecommendations], !0).then(t=>{
                const i = t.removePeopleRecommendations(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getCallLogs(e) {
            return this.openTransaction([t.Stores.CallLogs], !1).then(t=>{
                const i = n.map(e, e=>t.getCallLog(e));
                return t.markCompleted(),
                s.all(i).then(e=>n.compact(e))
            }
            )
        }
        getAllDraftMessages() {
            return this.openTransaction([t.Stores.Drafts], !1).then(e=>{
                const t = e.getAllDraftMessages();
                return e.markCompleted(),
                t
            }
            )
        }
        putDraftMessage(e) {
            return this.openTransaction([t.Stores.Drafts], !0).then(t=>{
                const i = t.putDraftMessage(e);
                return t.markCompleted(),
                i
            }
            )
        }
        deleteDraftMessage(e) {
            return this.openTransaction([t.Stores.Drafts], !0).then(t=>{
                const i = t.deleteDraftMessage(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getAllMediaDrafts() {
            return this.openTransaction([t.Stores.MediaDrafts], !1).then(e=>{
                const t = e.getAllDraftMedia();
                return e.markCompleted(),
                t
            }
            )
        }
        putMediaDrafts(e) {
            return this.openTransaction([t.Stores.MediaDrafts], !0).then(t=>{
                const i = t.putDraftMedia(e);
                return t.markCompleted(),
                i
            }
            )
        }
        deleteMediaDraft(e) {
            return this.openTransaction([t.Stores.MediaDrafts], !0).then(t=>{
                const i = t.deleteDraftMedia(e);
                return t.markCompleted(),
                i
            }
            )
        }
        getLastCallCaptionsCleanupTimestamp() {
            return this.internal_getInternalData(t.InternalKeys.CallCaptionsCleanupEndTimestamp).then(e=>null != e ? e : void 0)
        }
    }
    class _ extends d.ClientDatabaseTransactionBase {
        constructor() {
            super(...arguments),
            this._increaseLastCharCode = e=>e.substring(0, e.length - 1) + String.fromCharCode(e.charCodeAt(e.length - 1) + 1)
        }
        internal_putInternalData(e, i) {
            return this._getStore(t.Stores.InternalData).put({
                id: e,
                value: i
            }).fail(this._databaseError)
        }
        internal_deleteInternalData(e) {
            return this._getStore(t.Stores.InternalData).remove(e).fail(this._databaseError)
        }
        internal_getInternalData(e) {
            return this._getStore(t.Stores.InternalData).get(e).then(e=>e ? e.value : null).fail(this._databaseError)
        }
        internal_getAllInternalData() {
            return this._getStore(t.Stores.InternalData).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        getUserProfileByMri(e) {
            return this._getStore(t.Stores.Profiles).get(e).then(e=>C.default.fromDatabaseObject(e)).fail(this._databaseError)
        }
        getUserProfilesByMris(e) {
            return this._getStore(t.Stores.Profiles).getMultiple(e).then(e=>n.map(e, e=>C.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getUserProfilesByPhoneNumber(e) {
            return this._getStore(t.Stores.Profiles).openIndex(t.Indexes.Profiles_PhoneNumber).getRange(e, this._increaseLastCharCode(e), !1, !0, o.QuerySortOrder.None).then(e=>{
                let t = n.compact(e);
                return t = n.uniqWith(t, (e,t)=>e.mri === t.mri),
                n.map(t, e=>C.default.fromDatabaseObject(e))
            }
            ).fail(this._databaseError)
        }
        getAllUserProfiles() {
            return this._getStore(t.Stores.Profiles).getAll(o.QuerySortOrder.None).then(e=>n.map(e, e=>C.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        putUserProfiles(e) {
            return this._getStore(t.Stores.Profiles).put(e).fail(this._databaseError)
        }
        getAllDisplayableUsers() {
            return this._getStore(t.Stores.ProfileMinis).getAll(o.QuerySortOrder.None).then(e=>n.map(e, e=>g.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getDisplayableUser(e) {
            return this._getStore(t.Stores.ProfileMinis).get(e).then(e=>g.default.fromDatabaseObject(e)).fail(this._databaseError)
        }
        putDisplayableUsers(e) {
            return this._getStore(t.Stores.ProfileMinis).put(n.map(e, e=>e.getDatabaseRepresentation())).fail(this._databaseError)
        }
        getTelemetryEvents(e, i) {
            return this._getStore(t.Stores.Telemetry).openIndex(t.Indexes.Telemetry_Priority_Timestamp).getAll(o.QuerySortOrder.None, e, i).fail(this._databaseError)
        }
        putTelemetryEvents(e) {
            return this._getStore(t.Stores.Telemetry).put(e).fail(this._databaseError)
        }
        deleteTelemetryEvents(e) {
            return this._getStore(t.Stores.Telemetry).remove(e).fail(this._databaseError)
        }
        countTelemetryEvents() {
            return this._getStore(t.Stores.Telemetry).openPrimaryKey().countAll().fail(this._databaseError)
        }
        getAgentDescription(e) {
            return this._getStore(t.Stores.Agents).get(e).then(e=>a.default.fromDatabaseObject(e)).fail(this._databaseError)
        }
        getAgentDescriptions(e) {
            return this._getStore(t.Stores.Agents).getMultiple(e).then(e=>n.map(e, e=>a.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getImportantAgents() {
            return this._getStore(t.Stores.Agents).openIndex(t.Indexes.Agents_Important).getOnly(1, o.QuerySortOrder.None).then(e=>n.map(e, e=>a.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getWhitelistedAgents() {
            return this._getStore(t.Stores.Agents).openIndex(t.Indexes.Agents_Whitelisted).getOnly(1, o.QuerySortOrder.None).then(e=>n.map(e, e=>a.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        putAgentDescriptions(e) {
            return this._getStore(t.Stores.Agents).put(e).fail(this._databaseError)
        }
        getAllFeaturedAgents() {
            return this._getStore(t.Stores.FeaturedAgents).getAll(o.QuerySortOrder.None).then(e=>n.map(e, e=>a.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        replaceFeaturedAgents(e) {
            return this._getStore(t.Stores.FeaturedAgents).clearAllData().then(()=>this._getStore(t.Stores.FeaturedAgents).put(e)).fail(this._databaseError)
        }
        getAllAgentIdUserIdPairs() {
            return this._getStore(t.Stores.AgentIdUserIdPairs).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putAgentIdUserIdPair(e) {
            return this._getStore(t.Stores.AgentIdUserIdPairs).put(e).fail(this._databaseError)
        }
        getConnectorMetadata(e) {
            return this._getStore(t.Stores.Connectors).get(e).fail(this._databaseError)
        }
        getConnectorsMetadata(e) {
            return this._getStore(t.Stores.Connectors).getMultiple(e).fail(this._databaseError)
        }
        getAllConnectorMetadata() {
            return this._getStore(t.Stores.Connectors).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putConnectorMetadata(e) {
            return this._getStore(t.Stores.Connectors).put(e).fail(this._databaseError)
        }
        putConnectorsMetadata(e) {
            return this._getStore(t.Stores.Connectors).put(e).fail(this._databaseError)
        }
        getIntegrationConsent(e, i) {
            return this._getStore(t.Stores.IntegrationConsents).get([e, i]).fail(this._databaseError)
        }
        putIntegrationConsent(e) {
            return this._getStore(t.Stores.IntegrationConsents).put(e).fail(this._databaseError)
        }
        getConversationMeta(e) {
            return this._getStore(t.Stores.Conversations).get(e).then(e=>u.default.fromDatabaseObject(e)).fail(this._databaseError)
        }
        getConversationMetas(e) {
            return this._getStore(t.Stores.Conversations).getMultiple(e).then(e=>{
                const t = {};
                return n.each(e, e=>{
                    const i = u.default.fromDatabaseObject(e);
                    t[i.conv.id] = i
                }
                ),
                t
            }
            ).fail(this._databaseError)
        }
        getAllConversationMetas(e, i) {
            return this._getStore(t.Stores.Conversations).openPrimaryKey().getAll(o.QuerySortOrder.Forward, e, i).then(e=>n.map(n.compact(e), e=>u.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getCountOfUnreadConversations(e) {
            return this._getStore(t.Stores.Conversations).openIndex(t.Indexes.Conversations_IsHighlight_HasUnread).countOnly([e ? 1 : 0, 1]).fail(this._databaseError)
        }
        getRecentNonHighlightConversationMetas(e, t=u.ConversationHistoryTimeSpanImportant) {
            return this._getRecentConversationMetas(!1, e, t)
        }
        getAllNonHighlightConversationMetas() {
            return this._getStore(t.Stores.Conversations).openIndex(t.Indexes.Conversations_IsHighlight_ForceToRecents_Timestamp).getRange([0, 0, 0], [0, 1, Number.MAX_VALUE], !0, !1, o.QuerySortOrder.Reverse).then(e=>e).then(e=>n.map(e, e=>u.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getAllHighlightConversationMetas() {
            return this._getStore(t.Stores.Conversations).openIndex(t.Indexes.Conversations_IsHighlight_ForceToRecents_Timestamp).getRange([1, 0, 0], [1, 1, Number.MAX_VALUE], !1, !1, o.QuerySortOrder.None).then(e=>n.map(e, e=>u.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getAllDraftMessages() {
            return this._getStore(t.Stores.Drafts).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putDraftMessage(e) {
            return this._getStore(t.Stores.Drafts).put(e).fail(this._databaseError)
        }
        deleteDraftMessage(e) {
            return this._getStore(t.Stores.Drafts).remove(e).fail(this._databaseError)
        }
        getAllDraftMedia() {
            return this._getStore(t.Stores.MediaDrafts).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putDraftMedia(e) {
            return this._getStore(t.Stores.MediaDrafts).put(e).fail(this._databaseError)
        }
        deleteDraftMedia(e) {
            return this._getStore(t.Stores.MediaDrafts).remove(e).fail(this._databaseError)
        }
        _getRecentConversationMetas(e, i, s) {
            const r = this._getStore(t.Stores.Conversations).openIndex(t.Indexes.Conversations_IsHighlight_ForceToRecents_Timestamp)
              , a = e ? 1 : 0
              , l = Date.now() - s;
            return r.getRange([a, 0, l], [a, 1, Number.MAX_VALUE], !1, !1, o.QuerySortOrder.None).then(e=>{
                const t = n.filter(e, e=>e.conv._timestamp >= l).length;
                return t >= i ? e : r.getRange([a, 0, 0], [a, 0, l], !1, !0, o.QuerySortOrder.Reverse, i - t).then(t=>e.concat(t))
            }
            ).then(e=>n.map(e, e=>u.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getNeedsSyncConversations() {
            return this._getStore(t.Stores.Conversations).openIndex(t.Indexes.Conversations_NeedsSync).getOnly(1, o.QuerySortOrder.None).then(e=>n.map(n.compact(e), e=>u.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getConversationMetasBySearchTerm(e, i, o) {
            return this._getStore(t.Stores.Conversations).openIndex(t.Indexes.Conversations_SearchTerms).fullTextSearch(e, i, o).then(e=>n.map(n.compact(e), e=>u.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        putConversationMetas(e) {
            const i = n.isArray(e) ? e : [e];
            return this._getStore(t.Stores.Conversations).put(i).fail(this._databaseError)
        }
        removeConversationMetas(e) {
            const i = n.map(e, e=>e.conv.id);
            return this._getStore(t.Stores.Conversations).remove(i).fail(this._databaseError)
        }
        getMessagesInConversation(e) {
            const i = this._increaseLastCharCode(e);
            return this._getStore(t.Stores.Messages).getRange([e, ""], [i, ""], !1, !0, o.QuerySortOrder.None).then(e=>n.map(e, e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getMessagesForConversationAndTimeRange(e, i, o, s, r) {
            return this._getStoreIndex(t.Stores.Messages, t.Indexes.Messages_ConversationId_CreatedTime).getRange([e, i], [e, o], !1, !1, s, r).then(e=>n.map(e, e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getMessagesForConversationBeforeTime(e, i, s, r) {
            return this._getStoreIndex(t.Stores.Messages, t.Indexes.Messages_ConversationId_CreatedTime).getRange([e, 0], [e, i], !1, r, o.QuerySortOrder.Reverse, s).then(e=>n.map(e, e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getMessagesForConversationAfterTime(e, i, s, r) {
            return this._getStoreIndex(t.Stores.Messages, t.Indexes.Messages_ConversationId_CreatedTime).getRange([e, i], [e, Number.MAX_VALUE], r, !0, o.QuerySortOrder.Forward, s).then(e=>n.map(e, e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getMessagesNotSentByMe(e, i, s, r) {
            return this._getStoreIndex(t.Stores.Messages, t.Indexes.Messages_ConversationId_IsMyMessage_CreatedTime).getRange([e, 0, 0], [e, 0, i], !1, r, o.QuerySortOrder.Reverse, s).then(e=>n.map(e, e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getMessagesSentByMeSinceTime(e, i, s, r) {
            return this._getStoreIndex(t.Stores.Messages, t.Indexes.Messages_ConversationId_IsMyMessage_CreatedTime).getRange([e, 1, i], [e, 1, Number.MAX_VALUE], !1, r, o.QuerySortOrder.Reverse, s).then(e=>n.map(e, e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getCountOfMessagesForConversationAfterTimeNormalPri(e, i, s) {
            const r = void 0 === s ? void 0 : 2 * s;
            return this._getStoreIndex(t.Stores.Messages, t.Indexes.Messages_ConversationId_CreatedTime).getRange([e, i], [e, Number.MAX_VALUE], !0, !0, o.QuerySortOrder.Forward, r).then(e=>{
                const t = n.map(e, e=>S.fromDatabaseObject(e))
                  , i = c.updateCallEventMessages(t)
                  , o = n.filter(i, e=>1 === e.getCountsType()).length;
                return void 0 === s ? o : Math.min(s, o)
            }
            ).fail(this._databaseError)
        }
        getCountOfMessagesForConversationAfterTimeHighPri(e, i) {
            return this._getStoreIndex(t.Stores.Messages, t.Indexes.Messages_ConversationId_CountsType_CreatedTime).countRange([e, 2, i], [e, 2, Number.MAX_VALUE], !0, !0)
        }
        getCountOfMessagesForConversationISentSinceTime(e, i) {
            return this._getStoreIndex(t.Stores.Messages, t.Indexes.Messages_ConversationId_IsMyMessage_CreatedTime).countRange([e, 1, i], [e, 1, Number.MAX_VALUE], !1, !0)
        }
        getMessageByCuid(e, i) {
            return this._getStore(t.Stores.Messages).get([e, i]).then(e=>S.fromDatabaseObject(e)).fail(this._databaseError)
        }
        getMessagesByCuid(e, i) {
            return this._getStore(t.Stores.Messages).getMultiple(n.map(i, t=>[e, t])).then(e=>n.map(n.compact(e), e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getMessagesByCuidForConversations(e) {
            let i = [];
            return n.each(e, (e,t)=>{
                n.each(e, e=>{
                    i.push([t, e])
                }
                )
            }
            ),
            this._getStore(t.Stores.Messages).getMultiple(i).then(e=>n.map(n.compact(e), e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        putMessages(e) {
            return this._getStore(t.Stores.Messages).put(e).fail(this._databaseError)
        }
        removeMessages(e) {
            const i = n.map(e, e=>[e.conversationId, e.cuid]);
            return this._getStore(t.Stores.Messages).remove(i).fail(this._databaseError)
        }
        getAllMessages(e, i) {
            return this._getStore(t.Stores.Messages).openPrimaryKey().getAll(o.QuerySortOrder.Forward, e, i).then(e=>n.map(e, e=>S.fromDatabaseObject(e))).fail(this._databaseError)
        }
        getMostRecentAlertTime() {
            const e = this._getStore(t.Stores.Alerts).openIndex(t.Indexes.Alerts_Read_Timestamp)
              , i = e.getRange([0, 0], [0, Number.MAX_VALUE], !1, !1, o.QuerySortOrder.Reverse, 1).fail(this._databaseError)
              , r = e.getRange([1, 0], [1, Number.MAX_VALUE], !1, !1, o.QuerySortOrder.Reverse, 1).fail(this._databaseError);
            return s.all([i, r]).then(([e,t])=>{
                const i = n.maxBy(n.compact(e.concat(t)), e=>e.alertTime);
                return i ? i.alertTime : 0
            }
            )
        }
        getAlertsForConversation(e) {
            return this._getStore(t.Stores.Alerts).openIndex(t.Indexes.Alerts_ConvId).getOnly(e, o.QuerySortOrder.None).then(e=>n.map(e, e=>l.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        countUnreadAlertsSinceTime(e) {
            return this._getStore(t.Stores.Alerts).openIndex(t.Indexes.Alerts_Read_Timestamp).countRange([0, e], [0, Number.MAX_VALUE], !0, !1).fail(this._databaseError)
        }
        getAlertsByIsReadAndTimestampRange(e, i, s) {
            return this._getStore(t.Stores.Alerts).openIndex(t.Indexes.Alerts_Read_Timestamp).getRange([e ? 1 : 0, i], [e ? 1 : 0, s], !1, !1, o.QuerySortOrder.None).then(e=>n.map(e, e=>l.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        countAlerts() {
            return this._getStore(t.Stores.Alerts).openPrimaryKey().countAll().fail(this._databaseError)
        }
        getAlerts() {
            return this._getStore(t.Stores.Alerts).getAll(o.QuerySortOrder.None).then(e=>n.map(e, e=>l.default.fromDatabaseObject(e))).fail(this._databaseError)
        }
        putAlerts(e) {
            return this._getStore(t.Stores.Alerts).put(e).fail(this._databaseError)
        }
        removeAlerts(e) {
            const i = n.map(e, e=>e.guid);
            return this._getStore(t.Stores.Alerts).remove(i).fail(this._databaseError)
        }
        getAllPopCards() {
            return this._getStore(t.Stores.PopCards).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putPopCards(e) {
            return this._getStore(t.Stores.PopCards).put(e).fail(this._databaseError)
        }
        removePopCard(e) {
            return this._getStore(t.Stores.PopCards).remove(e).fail(this._databaseError)
        }
        clearAllPopCards() {
            return this._getStore(t.Stores.PopCards).clearAllData().fail(this._databaseError)
        }
        getAllEngagementMessagesInQueue() {
            return this._getStore(t.Stores.EngagementMessagesQueueStore).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putEngagementMessagesToQueue(e) {
            return this._getStore(t.Stores.EngagementMessagesQueueStore).put(e).fail(this._databaseError)
        }
        removeEngagementMessageFromQueue(e) {
            return this._getStore(t.Stores.EngagementMessagesQueueStore).remove(e).fail(this._databaseError)
        }
        clearEngagementQueueOfMessages() {
            return this._getStore(t.Stores.EngagementMessagesQueueStore).clearAllData().fail(this._databaseError)
        }
        getAllCampaigns() {
            return this._getStore(t.Stores.EngagementPullCampaigns).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putCampaigns(e) {
            return this._getStore(t.Stores.EngagementPullCampaigns).put(e).fail(this._databaseError)
        }
        removeCampaigns(e) {
            const i = n.map(e, e=>e.campaignId);
            return this._getStore(t.Stores.EngagementPullCampaigns).remove(i).fail(this._databaseError)
        }
        getAllConsumedBotMessages() {
            return this._getStore(t.Stores.ConsumedConciergeBotMessages).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putConsumedBotMessages(e) {
            return this._getStore(t.Stores.ConsumedConciergeBotMessages).put(e).fail(this._databaseError)
        }
        getLocalNotifications() {
            return this._getStore(t.Stores.LocalNotifications).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putLocalNotifications(e) {
            return this._getStore(t.Stores.LocalNotifications).put(e).fail(this._databaseError)
        }
        removeLocalNotifications(e) {
            const i = n.map(e, e=>e.id);
            return this._getStore(t.Stores.LocalNotifications).remove(i).fail(this._databaseError)
        }
        getPersistentActions() {
            return this._getStore(t.Stores.PersistentActions).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putPersistentAction(e) {
            return this._getStore(t.Stores.PersistentActions).put(e).fail(this._databaseError)
        }
        removePersistentAction(e) {
            return this._getStore(t.Stores.PersistentActions).remove(e).fail(this._databaseError)
        }
        getAllFileCacheMetadata() {
            return this._getStore(t.Stores.FileCacheMetadata).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putFileCacheMetadata(e) {
            return this._getStore(t.Stores.FileCacheMetadata).put(e).fail(this._databaseError)
        }
        removeFileCacheMetadata(e, i) {
            const o = n.isArray(i) ? i : [i];
            return this._getStore(t.Stores.FileCacheMetadata).remove(n.map(o, t=>[e, t])).fail(this._databaseError)
        }
        getAllFileTrackerMetadata() {
            return this._getStore(t.Stores.FileTracker).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putFileTrackerMetadata(e) {
            return this._getStore(t.Stores.FileTracker).put(e).fail(this._databaseError)
        }
        removeFileTrackerMetadata(e) {
            return this._getStore(t.Stores.FileTracker).remove(e).fail(this._databaseError)
        }
        getAllLocalAddressBookContacts() {
            return this._getStore(t.Stores.LocalAddressBookContacts).getAll(o.QuerySortOrder.None).then(e=>n.map(e, e=>r.AddressBookContact.fromDatabaseObject(e))).fail(this._databaseError)
        }
        putLocalAddressBookContacts(e) {
            return this._getStore(t.Stores.LocalAddressBookContacts).put(e).fail(this._databaseError)
        }
        replaceAllLocalAddressBookContacts(e) {
            return this._getStore(t.Stores.LocalAddressBookContacts).clearAllData().then(()=>this._getStore(t.Stores.LocalAddressBookContacts).put(e)).fail(this._databaseError)
        }
        removeAllLocalAddressBookContacts() {
            return this._getStore(t.Stores.LocalAddressBookContacts).clearAllData().fail(this._databaseError)
        }
        getAllImagePrefetchInfo() {
            return this._getStore(t.Stores.ImagePrefetchInfo).getAll(o.QuerySortOrder.None).fail(this._databaseError)
        }
        putImagePrefetchRecords(e) {
            return this._getStore(t.Stores.ImagePrefetchInfo).put(e).fail(this._databaseError)
        }
        removeImagePrefetchInfo(e) {
            return this._getStore(t.Stores.ImagePrefetchInfo).remove(e).fail(this._databaseError)
        }
        getAllPeopleRecommendations() {
            return this._getStore(t.Stores.PeopleRecommendations).getAll(o.QuerySortOrder.None).then(e=>n.map(e, e=>m.createRecommendationFromDatabaseObject(e))).fail(this._databaseError)
        }
        replacePeopleRecommendations(e) {
            return this._getStore(t.Stores.PeopleRecommendations).clearAllData().then(()=>this._getStore(t.Stores.PeopleRecommendations).put(e)).fail(this._databaseError)
        }
        removePeopleRecommendations(e) {
            return this._getStore(t.Stores.PeopleRecommendations).remove(e).fail(this._databaseError)
        }
        getCallLog(e) {
            return this._getStore(t.Stores.CallLogs).get(e).fail(this._databaseError)
        }
        putCallLogs(e) {
            return this._getStore(t.Stores.CallLogs).put(e).fail(this._databaseError)
        }
        getCallCaptionsCleanupStartTimestamp() {
            return this.internal_getInternalData(t.InternalKeys.CallCaptionsCleanupStartTimestamp)
        }
        setCallCaptionsCleanupStartTimestamp() {
            return this.internal_putInternalData(t.InternalKeys.CallCaptionsCleanupStartTimestamp, Date.now())
        }
        deleteCallCaptionsCleanupStartTimestamp() {
            return this.internal_deleteInternalData(t.InternalKeys.CallCaptionsCleanupStartTimestamp)
        }
        setCallCaptionsCleanupEndTimestamp() {
            return this.internal_putInternalData(t.InternalKeys.CallCaptionsCleanupEndTimestamp, Date.now())
        }
    }
    t.ClientDatabaseTransaction = _;
    let b = new f(_);
    if ("undefined" != typeof window) {
        window.ClientDatabase = b
    }
    t.default = b
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(791)
      , r = i(2)
      , a = i(5)
      , l = i(4)
      , c = i(8)
      , d = i(18)
      , u = i(11)
      , g = {
        skypeAssetsLight: {
            fontFamily: s.Collection.SKYPE_ASSETS_LIGHT
        }
    }
      , h = a.lazyProperties({
        skypeAssetsLight: ()=>o.Styles.createTextStyle({
            font: g.skypeAssetsLight
        })
    });
    function p() {
        return g.skypeAssetsLight
    }
    t.skypeAssetsFont = p,
    t.skypeAssetsFontStyle = function() {
        return h.skypeAssetsLight
    }
    ;
    const m = {};
    function S() {
        return d.isRTL() ? u.SkypeIcon.Right : u.SkypeIcon.Left
    }
    function C(e, t, i, n, s) {
        const r = s || u.IconCollection.Skype
          , a = [e.toString(), "|", t.toString(), "|", i, "|", n, "|", r.toString()].join("");
        let l = m[a];
        if (!l) {
            const s = e
              , c = e - 2 * t
              , d = t
              , g = t;
            let h;
            switch (r) {
            case u.IconCollection.Skype:
            default:
                h = p()
            }
            l = i && n ? o.Styles.createTextStyle({
                height: s,
                fontSize: c,
                paddingHorizontal: d,
                paddingVertical: g,
                font: h,
                color: i,
                backgroundColor: n
            }) : i ? o.Styles.createTextStyle({
                height: s,
                fontSize: c,
                paddingHorizontal: d,
                paddingVertical: g,
                font: h,
                color: i
            }) : n ? o.Styles.createTextStyle({
                height: s,
                fontSize: c,
                paddingHorizontal: d,
                paddingVertical: g,
                font: h,
                backgroundColor: n
            }) : o.Styles.createTextStyle({
                height: s,
                fontSize: c,
                paddingHorizontal: d,
                paddingVertical: g,
                font: h
            }),
            m[a] = l
        }
        return l
    }
    t.shareIcon = function() {
        switch (d.getPlatformType()) {
        case r.PlatformType.iOS:
        case r.PlatformType.OSX:
            return u.SkypeIcon.ShareiOS;
        case r.PlatformType.Android:
            return u.SkypeIcon.ShareAndroid;
        default:
            return u.SkypeIcon.Share
        }
    }
    ,
    t.moreIcon = function() {
        return d.getPlatformType() === r.PlatformType.Android ? u.SkypeIcon.MoreVertical : u.SkypeIcon.More
    }
    ,
    t.closeIcon = function() {
        return d.getPlatformType() === r.PlatformType.Android ? S() : u.SkypeIcon.ClosePanel
    }
    ,
    t.backIcon = S,
    t.forwardIcon = function() {
        return d.isRTL() ? u.SkypeIcon.Left : u.SkypeIcon.Right
    }
    ,
    t.navForwardIcon = function(e=!1) {
        return e ? d.isRTL() ? u.SkypeIcon.NavigationBackCentered : u.SkypeIcon.NavigationForwardCentered : d.isRTL() ? u.SkypeIcon.NavigationBack : u.SkypeIcon.NavigationForward
    }
    ,
    t.navBackIcon = function(e=!1) {
        return e ? d.isRTL() ? u.SkypeIcon.NavigationForwardCentered : u.SkypeIcon.NavigationBackCentered : d.isRTL() ? u.SkypeIcon.NavigationForward : u.SkypeIcon.NavigationBack
    }
    ,
    t.nextChevron = function() {
        return d.isRTL() ? u.SkypeIcon.LeftChevron : u.SkypeIcon.RightChevron
    }
    ,
    t.prevChevron = function() {
        return d.isRTL() ? u.SkypeIcon.RightChevron : u.SkypeIcon.LeftChevron
    }
    ,
    t.getQuoteSymbol = function() {
        return n.includes(["ar-SA", "bg-BG", "cs-CZ", "da-DK", "de-DE", "et-EE", "fi-FI", "he-IL", "hu-HU", "nb-NO", "pl-PL", "ro-RO", "sk-SK", "sr-Latn-RS", "sv-SE", "uk-UA"], l.getLocale()) ? u.SkypeIcon.QuoteClose : u.SkypeIcon.QuoteOpen
    }
    ,
    t.okIconByFontCollection = function(e) {
        switch (e) {
        case u.IconCollection.Skype:
        default:
            return u.SkypeIcon.Ok
        }
    }
    ,
    t.paddedIconStyle = function(e, t, i, n, o) {
        return C(e, t, i, n ? c.Color.transparent : void 0, o)
    }
    ,
    t.iconStyle = function(e, t, i, n) {
        return C(e, 0, t, i ? c.Color.transparent : void 0, n)
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(51)
      , o = i(2)
      , s = i(3)
      , r = i(9);
    class a extends n.default {
        constructor(e) {
            super(e)
        }
        componentMounting(e) {
            super.componentMounting(e),
            this.props.onAccessibilityTitleChange && this.props.onAccessibilityTitleChange(this._getHeaderText(e))
        }
        _goBack(e) {
            const t = e || r.newCauseId();
            return s.log(o.LogTraceArea.Navigation, "BaseNavigationComponentPresentedInModal._goBack isAloneInNavStack: " + this.props.isAloneInNavStack + " closeModal: " + !!this.props.closeModal + " causeId: " + t),
            this.props.isAloneInNavStack && this.props.closeModal ? (this.props.closeModal(),
            !0) : super._goBack(t)
        }
    }
    t.default = a
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(148)
      , s = i(1431)
      , r = i(2)
      , a = i(3)
      , l = i(17)
      , c = i(358)
      , d = i(12)
      , u = i(9);
    class g extends d.default {
        constructor(e) {
            super(e),
            this._onBackButtonPressed = ()=>{
                const e = u.newCauseId()
                  , t = this._goBack(e);
                return a.log(r.LogTraceArea.HardwareBackButton, "goBack: " + t + " componentId: " + this._componentId() + " causeId: " + e),
                t
            }
            ,
            this._statusBarKey = n.uniqueId("StatusBar:")
        }
        _createContext() {
            const e = this.context || {};
            return this.props.isPresentedInDesktopSubview && (e.isPresentedInDesktopSubview = !0),
            this.props.isPresentedInDesktopLeftNav && (e.isPresentedInDesktopSubview = !0,
            e.isPresentedInDesktopLeftNav = !0),
            this.props.isPresentedInDesktopRightNav && (e.isPresentedInDesktopSubview = !0,
            e.isPresentedInDesktopRightNav = !0),
            this.props.isPresentedInGenericDesktopModal && (e.isPresentedInDesktopSubview = !0,
            e.isPresentedInGenericDesktopModal = !0),
            this.props.isPresentedInManagedModal && (e.isPresentedInDesktopSubview = !1 !== this.props.isPresentedInDesktopSubview,
            e.isPresentedInManagedModal = !0),
            this.props.isPresentedInSplitView && (e.isPresentedInSplitView = !0),
            this.props.isPresentedInDesktopContentPanel && (e.isPresentedInDesktopContentPanel = !0),
            this.props.isPresentedByMobileStackNavigator && (e.componentVisibilityStatus || (e.componentVisibilityStatus = new s.ComponentVisibilityStatus),
            e.isPresentedByMobileStackNavigator = !0),
            e.goBack = e=>this._goBack(e),
            e
        }
        componentDidMount() {
            super.componentDidMount(),
            o.subscribe(this._onBackButtonPressed)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._removeStatusBarStyle(),
            o.unsubscribe(this._onBackButtonPressed)
        }
        setVisible(e) {
            const t = this._getContext();
            t.componentVisibilityStatus && t.componentVisibilityStatus.updateVisibility(e)
        }
        _updateStatusBarStyle(e) {
            this._getContext().isPresentedInDesktopSubview || c.default.addOrUpdateStyle(this._statusBarKey, e)
        }
        _removeStatusBarStyle() {
            this._getContext().isPresentedInDesktopSubview || c.default.removeStyle(this._statusBarKey)
        }
        _componentId() {
            return "BaseNavigationComponent"
        }
        _goBack(e) {
            return !!(this.props.isPresentedByMobileStackNavigator || this.props.isPresentedInDesktopSubview || this.props.isPresentedInDesktopContentPanel) && (a.log(r.LogTraceArea.Navigation, "BaseNavigationComponent._goBack componentId: " + this._componentId() + " causeId: " + e),
            l.navigateBack(e, this._getContext()))
        }
    }
    t.default = g
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(636)
      , r = i(13)
      , a = i(7)
      , l = i(48)
      , c = i(2)
      , d = i(3)
      , u = i(74)
      , g = i(779)
      , h = i(213)
      , p = i(2373)
      , m = i(32)
      , S = i(20)
      , C = i(486)
      , y = i(1416)
      , f = i(21)
      , _ = i(19);
    var b;
    !function(e) {
        e[e.SkypeTokenKey = 0] = "SkypeTokenKey",
        e[e.MSARefreshTokenKey = 1] = "MSARefreshTokenKey",
        e[e.CdnTokenKey = 2] = "CdnTokenKey",
        e[e.CortanaTokenKey = 3] = "CortanaTokenKey",
        e[e.AmsTokenKey = 4] = "AmsTokenKey",
        e[e.MsaUserInternalKey = 5] = "MsaUserInternalKey"
    }(b = t.TriggerKeys || (t.TriggerKeys = {}));
    t.Test_KeychainKeys = {
        SkypeToken: "Skype for Desktop",
        MSAToken: "Skype for Desktop MSA"
    };
    t.Test_SkypeTokenKey = "Skype4Life-SkypeToken";
    t.Test_MsaTokenKey = "Skype4Life-MSA";
    const v = /^[\x20-\xFF]+$/;
    let T = class extends r.StoreBase {
        constructor() {
            super(),
            this._cdnCookieSet = !1,
            this._msaUserInternalTokenRequestOngoing = !1,
            this._canGetMsaUserInternalToken = !0,
            this._amsCookieSet = !1,
            this._fetchAuthToken = ()=>{
                const e = this.getMSARefreshToken();
                e ? this._canGetMsaUserInternalToken ? this._msaUserInternalTokenRequestOngoing || (this._msaUserInternalTokenRequestOngoing = !0,
                p.default.fetch(e, S.getUserCidHex()).then(e=>{
                    this._msaUserInternalTokenRequestOngoing = !1,
                    this.useMsaUserInternalToken(e)
                }
                , e=>{
                    this._msaUserInternalTokenRequestOngoing = !1,
                    !1 === e && (this._canGetMsaUserInternalToken = !1)
                }
                )) : d.log(c.LogTraceArea.TokenStore, "Fetching MSA User Internal token for this user is not possible") : d.log(c.LogTraceArea.TokenStore, "MSAToken is not present. Can not fetch MSA User Internal Auth token")
            }
            ,
            f.RegisterStartupable(this, "TokenStore", [u.default, m.default]),
            h.default.registerForLogout(this, "TokenStore")
        }
        feedStartupInfo(e, t) {
            e && (this._startupSkypeToken = e),
            t && (this._startupMSARefreshToken = t)
        }
        startup() {
            return a.all([this._startupSkypeToken || k.getInitialSkypeToken(), this._startupMSARefreshToken || k.getInitialMSAToken()]).then(([e,t])=>{
                const i = u.default.getData(l.InternalKeys.CdnToken)
                  , n = u.default.getData(l.InternalKeys.CortanaToken)
                  , o = u.default.getData(l.InternalKeys.MsaUserInternalToken)
                  , s = (m.default.getUserPreferencesLocal(),
                this._startupSkypeToken ? k.setSkypeToken(e) : a.Resolved());
                return a.all([void 0, s]).then(()=>{
                    this._msaRefreshToken = t,
                    k.provideSsoToken(this._msaRefreshToken),
                    e && !e.isTokenExpired() && i && (this._cdnToken = i,
                    this._cdnCookieSet = !0),
                    this._cortanaToken = n,
                    this._msaUserInternalToken = o,
                    this.useSkypeToken(e, !1),
                    d.log(c.LogTraceArea.TokenStore, "TokenStore Started - " + (this.hasUsableSkypeToken() ? "Usable Skypetoken" : "Non-usable Skypetoken") + " - " + (this._skypeToken ? "expiration: " + new Date(this._skypeToken.expiration) : "no token"))
                }
                )
            }
            ).fail(e=>d.error(c.LogTraceArea.TokenStore, "Failure during startup: " + _.errorAsString(e)))
        }
        logout(e, t, i) {
            return k.provideSsoToken(void 0),
            k.clearTokensFromKeychain()
        }
        performWhenValidSkypeTokenArrives() {
            if (this.hasUsableSkypeToken())
                return d.log(c.LogTraceArea.TokenStore, "Valid Skype Token available"),
                a.Resolved();
            this._waitingForValidSkypeToken || (this._waitingForValidSkypeToken = a.Defer());
            const e = a.Defer();
            return this._waitingForValidSkypeToken.promise().then(()=>{
                e.resolve(void 0)
            }
            ),
            d.log(c.LogTraceArea.TokenStore, "Awaiting a valid Skype Token..."),
            e.promise()
        }
        performWhenCdnTokenArrives() {
            if (this._cdnToken)
                return a.Resolved();
            this._waitingForCdnToken || (this._waitingForCdnToken = a.Defer());
            const e = a.Defer();
            return this._waitingForCdnToken.promise().then(()=>{
                e.resolve(void 0)
            }
            ),
            e.promise()
        }
        useCdnToken(e) {
            if ((this._cdnCookieSet !== e.cookie || this._cdnToken !== e.token) && (this._cdnToken = e.token,
            this._cdnCookieSet = e.cookie,
            u.default.putData(l.InternalKeys.CdnToken, e.token),
            this.trigger(b.CdnTokenKey),
            this._waitingForCdnToken)) {
                const e = this._waitingForCdnToken;
                this._waitingForCdnToken = void 0,
                e.resolve(void 0)
            }
        }
        usingCdnCookie() {
            return this._cdnCookieSet
        }
        getCdnToken() {
            return this._cdnToken
        }
        skypeTokenInvalid(e) {
            this._skypeToken ? this._skypeToken.rawToken === e ? this.useSkypeToken(void 0) : d.log(c.LogTraceArea.TokenStore, "Skypetoken reported invalid, but it doesn't match our stored one -- ignoring!") : d.log(c.LogTraceArea.TokenStore, "Skypetoken reported invalid, but we already knew that -- ignoring!")
        }
        useSkypeToken(e, t=!0) {
            var i;
            if (this._skypeToken && e && this._skypeToken.rawToken === e.rawToken)
                return;
            this._skypeToken = e,
            this._skypeToken && t && k.setSkypeToken(e);
            const n = null === (i = this._skypeToken) || void 0 === i ? void 0 : i.getCidFromSkypeToken();
            if (n) {
                const e = parseInt(n, 16).toString();
                d.log(c.LogTraceArea.TokenStore, `Setting MSACID and MSACIDHEX from Skypetoken - ${e} ${n}`),
                S.internal_feedInfo(void 0, void 0, e, n)
            }
            document.cookie = "skypeToken=" + (this._skypeToken ? this._skypeToken.rawToken : "") + ";secure",
            this.trigger(b.SkypeTokenKey),
            this.hasUsableSkypeToken() && this._waitingForValidSkypeToken && (d.log(c.LogTraceArea.TokenStore, "Got a valid Skype Token"),
            this._waitingForValidSkypeToken.resolve(void 0),
            this._waitingForValidSkypeToken = void 0)
        }
        useMSARefreshToken(e, t) {
            if (this._msaRefreshToken !== e) {
                if (e) {
                    const i = "TokenStore got a bad MSA Refresh Token";
                    I(e) || (d.log(c.LogTraceArea.TokenStore, i),
                    d.track(new g.TokenIssueEvent(c.KeychainTokenType.MSARefresh,g.TokenIssueType.InvalidToken,t)))
                } else {
                    const i = "Empty MSA refresh token passed to TokenStore.useMSARefreshToken()";
                    k.isValidMSARefreshToken(e) || (d.log(c.LogTraceArea.TokenStore, i),
                    d.track(new g.TokenIssueEvent(c.KeychainTokenType.MSARefresh,g.TokenIssueType.EmptyToken,t)))
                }
                this._msaRefreshToken = e,
                k.setMSAToken(e),
                k.provideSsoToken(e),
                this.trigger(b.MSARefreshTokenKey)
            }
        }
        hasUsableSkypeToken() {
            return !!this._skypeToken && !this._skypeToken.isTokenExpired()
        }
        hasUsableSkypeTokenNoSubscription() {
            return !!this._skypeToken && !this._skypeToken.isTokenExpired()
        }
        getSkypeToken() {
            return this._skypeToken ? this._skypeToken.clone() : void 0
        }
        getRawSkypeToken() {
            return this._skypeToken ? this._skypeToken.rawToken : void 0
        }
        getMSARefreshToken() {
            return this._msaRefreshToken
        }
        useCortanaToken(e, t) {
            let i;
            e && t > 0 && (i = {
                accessToken: e,
                expiresInSeconds: t,
                expiryDateTimeMs: Date.now() + t / 2 * 1e3
            }),
            this._cortanaToken !== i && (this._cortanaToken = i,
            u.default.putData(l.InternalKeys.CortanaToken, i ? {
                accessToken: i.accessToken,
                expiresInSeconds: i.expiresInSeconds,
                expiryDateTimeMs: i.expiryDateTimeMs
            } : void 0),
            this.trigger(b.CortanaTokenKey))
        }
        getCortanaToken() {
            return this._cortanaToken
        }
        getMsaUserInternalToken() {
            if (!this._canGetMsaUserInternalToken)
                return;
            const e = this._getAuthToken();
            return e || this._fetchAuthToken(),
            e
        }
        msaUserInternalTokenInvalid(e) {
            this._msaUserInternalToken && this._msaUserInternalToken.accessToken === e.accessToken && this.useMsaUserInternalToken(void 0)
        }
        useMsaUserInternalToken(e) {
            if (this._msaUserInternalToken && e && this._msaUserInternalToken.accessToken === e.accessToken)
                return;
            u.default.putData(l.InternalKeys.MsaUserInternalToken, e ? {
                accessToken: e.accessToken,
                expiryDateTimeMs: e.expiryDateTimeMs,
                idHash: e.idHash
            } : void 0),
            this._msaUserInternalToken = e,
            this._canGetMsaUserInternalToken = !0;
            const t = this._waitingForMsaUserInternalToken;
            t && (this._waitingForMsaUserInternalToken = void 0,
            t.resolve(void 0)),
            this.trigger(b.MsaUserInternalKey)
        }
        getCanGetMsaUserInternalToken() {
            return this._canGetMsaUserInternalToken
        }
        _getAuthToken() {
            if (void 0 !== this._msaUserInternalToken)
                return this._msaUserInternalToken.expiryDateTimeMs > Date.now() + 6e5 ? this._msaUserInternalToken : void 0
        }
        performWhenMsaInternalUserTokenArrives() {
            if (this._getAuthToken())
                return a.Resolved();
            let e = this._waitingForMsaUserInternalToken;
            return e || (e = a.Defer(),
            this._waitingForMsaUserInternalToken = e),
            this._fetchAuthToken(),
            e.promise()
        }
        setAMSCookieSet(e) {
            this._amsCookieSet !== e && (this._amsCookieSet = e,
            this.trigger(b.AmsTokenKey))
        }
        getAmsCookieSet() {
            return this._amsCookieSet
        }
    }
    ;
    n.__decorate([r.autoSubscribeWithKey(b.CdnTokenKey)], T.prototype, "usingCdnCookie", null),
    n.__decorate([r.autoSubscribeWithKey(b.CdnTokenKey)], T.prototype, "getCdnToken", null),
    n.__decorate([r.autoSubscribeWithKey(b.SkypeTokenKey)], T.prototype, "hasUsableSkypeToken", null),
    n.__decorate([r.autoSubscribeWithKey(b.SkypeTokenKey)], T.prototype, "getSkypeToken", null),
    n.__decorate([r.autoSubscribeWithKey(b.SkypeTokenKey)], T.prototype, "getRawSkypeToken", null),
    n.__decorate([r.autoSubscribeWithKey(b.MSARefreshTokenKey)], T.prototype, "getMSARefreshToken", null),
    n.__decorate([r.autoSubscribeWithKey(b.CortanaTokenKey)], T.prototype, "getCortanaToken", null),
    n.__decorate([r.autoSubscribeWithKey(b.MsaUserInternalKey)], T.prototype, "getMsaUserInternalToken", null),
    n.__decorate([r.autoSubscribeWithKey(b.MsaUserInternalKey)], T.prototype, "getCanGetMsaUserInternalToken", null),
    n.__decorate([r.autoSubscribeWithKey(b.AmsTokenKey)], T.prototype, "getAmsCookieSet", null),
    T = n.__decorate([r.AutoSubscribeStore], T),
    t.TokenStore = T;
    class P {
        clearSkypeTokenFromKeychain() {
            let e = a.Resolved();
            let t = a.Resolved();
            return a.all([t.catch(e=>{
                d.error(c.LogTraceArea.TokenStore, "Unable to delete Skype Token from KeyChain " + _.errorAsString(e))
            }
            ), e.catch(e=>{
                d.error(c.LogTraceArea.TokenStore, "Unable to remove extension Skype Token from KeyChain " + _.errorAsString(e))
            }
            )]).then(()=>!0)
        }
        clearMSARefreshTokenFromKeychain() {
            let e = a.Resolved();
            let t = a.Resolved();
            return a.all([t.catch(e=>{
                d.error(c.LogTraceArea.TokenStore, "Unable to delete MSAToken from KeyChain " + _.errorAsString(e))
            }
            ), e.catch(e=>{
                d.error(c.LogTraceArea.TokenStore, "Unable to remove extension MSAToken from KeyChain " + _.errorAsString(e))
            }
            )]).then(()=>!0)
        }
        getPasswordFromKeychain(e) {
            return s.default.getPassword(e, S.getSkypeId())
        }
        setPasswordIntoKeychain(e, t) {
            return t ? s.default.setPassword(e, S.getSkypeId(), t) : s.default.deletePassword(e, S.getSkypeId()).then(o.noop)
        }
        getGenericPasswordFromKeychain(e) {
            return s.default.getGenericPassword(e)
        }
        setGenericPasswordIntoKeychain(e, t, i) {
            return t ? s.default.setGenericPassword(e, t, i) : (d.warn(c.LogTraceArea.TokenStore, "_setGenericPasswordIntoKeychain called with empty password, resetting entry"),
            s.default.resetGenericPassword(i).then(o.noop))
        }
    }
    t.Test_TokenStoreKeychain = P;
    class A {
        constructor() {
            this._keychain = new P
        }
        getInitialSkypeToken() {
            return d.log(c.LogTraceArea.TokenStore, "getInitialSkypeToken - fetching SkypeToken from DataStore"),
            a.Resolved(C.fromDbToken(u.default.getData(l.InternalKeys.SkypeToken)))
        }
        setSkypeToken(e) {
            return d.log(c.LogTraceArea.TokenStore, "setSkypeToken - setting SkypeToken to DataStore"),
            u.default.putData(l.InternalKeys.SkypeToken, e ? {
                rawToken: e.rawToken,
                expiration: e.expiration
            } : void 0)
        }
        getInitialMSAToken() {
            if (S.isGuestUser())
                return a.Resolved(void 0);
            return d.log(c.LogTraceArea.TokenStore, "getInitialMSAToken - getting MSAToken from DataStore"),
            a.Resolved(u.default.getData(l.InternalKeys.MSARefreshToken))
        }
        setMSAToken(e) {
            return d.log(c.LogTraceArea.TokenStore, "setMSAToken - setting MSAToken to DataStore"),
            u.default.putData(l.InternalKeys.MSARefreshToken, e)
        }
        provideSsoToken(e) {
            o.isNil(e) ? y.default.removeSkypeSsoAccount() : y.default.provideSkypeSsoAccount(e)
        }
        clearTokensFromKeychain() {
            return a.all([this._keychain.clearMSARefreshTokenFromKeychain(), this._keychain.clearSkypeTokenFromKeychain()]).then(o.noop)
        }
        setSharedSkypeTokenIntoKeychain(e) {
            0
        }
        setSharedMsaTokenIntoKeychain(e) {
            0
        }
        getUserSpecificServiceName(e) {
            return S.getSkypeId() + e
        }
        isValidMSARefreshToken(e) {
            return !0
        }
        test_setKeychain(e) {
            this._keychain = e
        }
    }
    t.Test_TokenStoreHelpers = A;
    const k = new A;
    function I(e) {
        return v.test(e)
    }
    t.Test_TokenStoreHelpersInstance = k,
    t.isTokenReasonableAsHeader = I,
    t.default = new T
}
, function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(0)
      , s = i(13)
      , r = i(7)
      , a = i(6)
      , l = i(48)
      , c = i(1057)
      , d = i(189)
      , u = i(2)
      , g = i(206)
      , h = i(142)
      , p = i(3)
      , m = i(74)
      , S = i(62)
      , C = i(20)
      , y = i(429)
      , f = i(21)
      , _ = i(19)
      , b = i(8)
      , v = i(92);
    let T = class extends s.StoreBase {
        constructor() {
            super(),
            this._initializeColors = ()=>y.default.getUiColorOption().then(e=>{
                p.log(u.LogTraceArea.ConversationColorStore, `Getting my color [${e}] from options service`)
            }
            , e=>{
                p.warn(u.LogTraceArea.ConversationColorStore, "Getting my color from the options service failed: " + _.errorAsString(e))
            }
            ),
            f.RegisterStartupable(this, "MyUserColorStore", [g.default, m.default, S.default, v])
        }
        startup() {
            this._overrideColorInfo = this._overrideColorInfoForTheme();
            const e = this._getUserColorInfo();
            return this._colorInfo = e && this._isValidColor(e) ? e : d.getDefaultColorInfo(C.getSkypeMri()),
            this._useSecondaryAccent = c.useSecondaryAccentColor(this._colorInfo),
            p.log(u.LogTraceArea.ConversationColorStore, `My color from DB [${e && e.key}], validated color [${this._colorInfo.key}]`),
            this._updateStyles(),
            h.default.setRefreshOptions("MyUserColorStore", {
                interval: 864e5,
                taskTypeFlags: h.TaskTypeFlags.UsesNetworking,
                callback: this._initializeColors
            }),
            g.default.isSetupWizardCompleted() || (h.default.fireEarly("MyUserColorStore"),
            this._firstRunStoreSubscriptionToken = g.default.subscribe(()=>{
                g.default.isSetupWizardCompleted() && (this._evaluateUserColorPreferences(!0),
                this._firstRunStoreSubscriptionToken && g.default.unsubscribe(this._firstRunStoreSubscriptionToken))
            }
            , g.TriggerKeys.SetupWizard)),
            S.default.subscribe(()=>this._evaluateUserColorPreferences(!0)),
            v.subscribe(()=>{
                let e = !1;
                const t = this._overrideColorInfoForTheme();
                this._evaluateUserColorPreferences();
                const i = c.useSecondaryAccentColor(this._colorInfo);
                t !== this._overrideColorInfo && (this._overrideColorInfo = t,
                e = !0),
                i !== this._useSecondaryAccent && (this._useSecondaryAccent = i,
                e = !0),
                e && (p.log(u.LogTraceArea.ConversationColorStore, "Triggering color update for theme change"),
                this._updateStyles(),
                this.trigger())
            }
            ),
            r.Resolved()
        }
        _evaluateUserColorPreferences(e=!1) {
            const t = this._getUserColorInfo();
            t && t.key !== this._colorInfo.key && (this._colorInfo = t,
            e && this.trigger())
        }
        getColorInfo(e=!1) {
            return this._intColorInfo(e)
        }
        getGradientColors(e=!1) {
            return this._computeGradientColors(e)
        }
        getSubtleGradientColors(e=!1) {
            return this._computeSubtleGradientColors(e)
        }
        getPrimaryColor() {
            return this.getPrimaryColorNoSubscription()
        }
        getPrimaryBackgroundColorStyle() {
            return this.getBackgroundColorStyleNoSubscription()
        }
        getPrimaryBorderColorStyle() {
            return this.getBorderColorStyleNoSubscription()
        }
        getPrimaryTextColorStyle() {
            return this.getTextColorStyleNoSubscription()
        }
        getCurrentSearchResultBackgroundColor() {
            return this._currentSearchResultBackgroundColor
        }
        getCurrentSearchResultTextColor() {
            return this._getCurrentSearchResultTextColor()
        }
        getSearchResultsBackgroundColor(e=!1) {
            return this._getSearchResultsBackgroundColor(e)
        }
        getSearchResultsTextColor(e=!1) {
            return this._getSearchResultsTextColor(e)
        }
        getColorInfoNoSubscription(e=!1) {
            return this._intColorInfo(e)
        }
        getPrimaryColorNoSubscription() {
            return this._accentColor()
        }
        getBackgroundColorStyleNoSubscription() {
            return this._primaryBackgroundColorStyle
        }
        getBorderColorStyleNoSubscription() {
            return this._primaryBorderColorStyle
        }
        getTextColorStyleNoSubscription() {
            return this._textColorStyle
        }
        getGradientColorsNoSubscription(e=!1) {
            return this._computeGradientColors(e)
        }
        getGradientSubtleColorsNoSubscription(e=!1) {
            return this._computeSubtleGradientColors(e)
        }
        setUserColor(e, t) {
            if (e === this._colorInfo || !this._isValidColor(e))
                return;
            p.log(u.LogTraceArea.ConversationColorStore, `Setting my color to [${e.key}] causeId: ${t}`),
            this._colorInfo = e,
            this._updateStyles();
            const i = d.serializeColorInfo(e);
            y.default.setUiColorOption(i),
            m.default.putData(l.InternalKeys.MyUserColor, i),
            a.default.getS4LNativePlatformsEcsConfig().enableRemoteClientAppearancePreferences && S.default.setUserAppearancePreferencesForCurrentPlatform({
                colorInfo: i
            }),
            this.trigger()
        }
        refreshNow(e) {
            p.log(u.LogTraceArea.ConversationColorStore, "refreshNow causeId: " + e),
            f.EnsureStarted(this).then(()=>{
                h.default.fireEarly("MyUserColorStore")
            }
            )
        }
        _accentColor() {
            return c.accentColorForColorInfo(this._intColorInfo(), this._useSecondaryAccent)
        }
        _isValidColor(e) {
            return !!e && !d.isMatchingColorInfo(e, d.SerializedColorByNumber.Rainbow)
        }
        _updateStyles() {
            const e = this.getPrimaryColorNoSubscription()
              , t = this.getColorInfo();
            this._primaryBackgroundColorStyle = o.Styles.createViewStyle({
                backgroundColor: e
            }, !1),
            this._searchResultsBackgroundColor = v.useDarkTheme() ? b.Color.gray200 : b.Color.gray400,
            this._currentSearchResultBackgroundColor = "yellow" === t.key || "rose" === t.key || v.useAccessibleTheme() ? b.Color.blue : b.Color.yellow,
            this._currentSearchResultTextColor = "yellow" === t.key || "rose" === t.key ? b.Color.white : b.Color.black,
            this._searchResultsTextColor = v.useDarkTheme() ? b.Color.black : b.Color.white,
            this._primaryBorderColorStyle = o.Styles.createViewStyle({
                borderColor: e
            }, !1),
            this._textColorStyle = o.Styles.createTextStyle({
                color: e
            }, !1)
        }
        _computeGradientColors(e=!1) {
            return d.gradientColorsForColorInfo(this._intColorInfo(e))
        }
        _computeSubtleGradientColors(e=!1) {
            return d.subtleGradientColorsForColorInfo(this._intColorInfo(e))
        }
        _overrideColorInfoForTheme() {
            return v.useDelphiTheme() ? d.delphiColorInfo : void 0
        }
        _intColorInfo(e=!1) {
            return e ? this._colorInfo : this._overrideColorInfo || this._colorInfo || d.getDefaultUnknownColorInfo()
        }
        _getCurrentSearchResultTextColor() {
            return v.useAccessibleTheme() ? b.Color.gray100 : this._currentSearchResultTextColor
        }
        _getSearchResultsBackgroundColor(e) {
            return v.useAccessibleTheme() && !e ? v.useDarkTheme() ? b.Color.gray400 : b.Color.gray100 : this._searchResultsBackgroundColor
        }
        _getSearchResultsTextColor(e) {
            return v.useAccessibleTheme() && !e ? v.useDarkTheme() ? b.Color.gray100 : b.Color.gray400 : this._searchResultsTextColor
        }
        _getUserColorInfo() {
            if (!g.default.isSetupWizardCompleted())
                return;
            const e = a.default.getS4LNativePlatformsEcsConfig().enableRemoteClientAppearancePreferences ? S.default.getUserAppearancePreferencesForCurrentPlatform() : {};
            let t;
            return t = e && e.colorInfo ? e.colorInfo : m.default.getData(l.InternalKeys.MyUserColor),
            d.deserializeColorInfo(t)
        }
    }
    ;
    n.__decorate([s.autoSubscribe], T.prototype, "getColorInfo", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getGradientColors", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getSubtleGradientColors", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getPrimaryColor", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getPrimaryBackgroundColorStyle", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getPrimaryBorderColorStyle", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getPrimaryTextColorStyle", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getCurrentSearchResultBackgroundColor", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getCurrentSearchResultTextColor", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getSearchResultsBackgroundColor", null),
    n.__decorate([s.autoSubscribe], T.prototype, "getSearchResultsTextColor", null),
    T = n.__decorate([s.AutoSubscribeStore], T),
    e.exports = new T
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2);
    let s = 0;
    var r, a;
    !function(e) {
        e[e.None = 0] = "None",
        e[e.Recents = 1] = "Recents",
        e[e.Search = 2] = "Search",
        e[e.ConversationInCall = 3] = "ConversationInCall",
        e[e.Calls = 4] = "Calls",
        e[e.Contacts = 5] = "Contacts",
        e[e.Notifications = 6] = "Notifications",
        e[e.CallSearch = 7] = "CallSearch"
    }(r = t.LeftNavViewMode || (t.LeftNavViewMode = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.WelcomeScreen = 1] = "WelcomeScreen",
        e[e.DesktopContentPanel = 2] = "DesktopContentPanel",
        e[e.Call = 3] = "Call",
        e[e.MeetNow = 4] = "MeetNow",
        e[e.ForcedUpgradeScreen = 5] = "ForcedUpgradeScreen"
    }(t.MainStageNavViewMode || (t.MainStageNavViewMode = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.Gallery = 1] = "Gallery",
        e[e.Find = 2] = "Find",
        e[e.SendMoney = 3] = "SendMoney",
        e[e.InAppBrowser = 4] = "InAppBrowser",
        e[e.Other = 5] = "Other"
    }(t.RightSidebarViewMode || (t.RightSidebarViewMode = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.All = 1] = "All",
        e[e.Media = 2] = "Media",
        e[e.Files = 3] = "Files",
        e[e.Links = 4] = "Links"
    }(t.GalleryViewMode || (t.GalleryViewMode = {})),
    function(e) {
        e[e.Recents = 0] = "Recents",
        e[e.MeetNowChats = 1] = "MeetNowChats",
        e[e.MeetNowCalls = 2] = "MeetNowCalls",
        e[e.CaptureHub = 3] = "CaptureHub",
        e[e.Calls = 4] = "Calls",
        e[e.People = 5] = "People",
        e[e.Notifications = 6] = "Notifications"
    }(a = t.HubTab || (t.HubTab = {})),
    function(e) {
        e[e.Cortana = 0] = "Cortana",
        e[e.Notifications = 1] = "Notifications",
        e[e.Chat = 2] = "Chat",
        e[e.Contacts = 3] = "Contacts",
        e[e.Privacy = 4] = "Privacy",
        e[e.General = 5] = "General",
        e[e.MyAccountAndProfile = 6] = "MyAccountAndProfile",
        e[e.AccountAndProfile = 7] = "AccountAndProfile",
        e[e.Debug = 8] = "Debug",
        e[e.AppSettings = 9] = "AppSettings",
        e[e.AudioVideoSettings = 10] = "AudioVideoSettings",
        e[e.AudioSettings = 11] = "AudioSettings",
        e[e.BalanceState = 12] = "BalanceState",
        e[e.SkypeNumber = 13] = "SkypeNumber",
        e[e.ThemeSettings = 14] = "ThemeSettings",
        e[e.HelpAndFeedback = 15] = "HelpAndFeedback",
        e[e.About = 16] = "About",
        e[e.SyncAddressBook = 17] = "SyncAddressBook",
        e[e.HotKeys = 18] = "HotKeys",
        e[e.ManagePayments = 19] = "ManagePayments",
        e[e.BackgroundEffectsSettings = 20] = "BackgroundEffectsSettings"
    }(t.SettingsGroup || (t.SettingsGroup = {}));
    class l {
        constructor(e) {
            this._init(e)
        }
        _init(e) {
            this.id = s++,
            this.state = n.cloneDeep(e)
        }
        clone(e) {
            let t = Object.create(this);
            return t._init(this.state),
            e && (t.id = this.id),
            t
        }
    }
    t.NavigationContext = l;
    class c extends l {
        constructor(e, t) {
            super(e),
            this.navigator = t
        }
    }
    t.ScenarioContext = c;
    class d extends l {
        constructor(e) {
            super(e)
        }
        _init(e) {
            super._init(e),
            this.setupDefaults()
        }
        setupDefaults() {
            this._navStack = []
        }
        clone(e) {
            let t = Object.create(this);
            return t._init(this.state),
            e && (t.id = this.id),
            t._navStack = n.clone(this._navStack),
            t
        }
        clearNavStack() {
            this._navStack = []
        }
        setNavStack(e) {
            this._navStack = e
        }
        getNavStack() {
            return this._navStack
        }
        navigateBack() {
            this._navStack.length > 0 && this.setNavStack(this._navStack.slice(0, this._navStack.length - 1))
        }
    }
    t.StackNavigationContext = d;
    class u extends d {
        clone(e) {
            let t = Object.create(this);
            return t._init(this.state),
            e && (t.id = this.id),
            t._navStack = n.clone(this._navStack),
            t._masterContext = this._masterContext && this._masterContext.clone ? this._masterContext.clone(e) : n.clone(this._masterContext),
            t._isCollapsed = this._isCollapsed,
            t
        }
        isValid() {
            return !!this.getMasterContext() || this.getNavStack().length > 0
        }
        collapse(e) {
            this._isCollapsed = e
        }
        isCollapsed() {
            return this._isCollapsed
        }
        setMasterContext(e) {
            this._masterContext = e
        }
        clearMasterContext() {
            this._masterContext = void 0
        }
        getMasterContext(e=!1) {
            return !this._isCollapsed || e ? this._masterContext : void 0
        }
        getNavStack(e=!1) {
            return this._isCollapsed && this._masterContext && !e ? [this._masterContext, ...this._navStack] : this._navStack
        }
        getBackStack(e=!1) {
            return this.getNavStack(e)
        }
    }
    t.SplitNavigationContext = u;
    class g extends u {
    }
    t.SimpleSplitNavigationContext = g;
    class h extends l {
        constructor(e) {
            super(e)
        }
        _init(e) {
            super._init(e),
            this.children = {}
        }
        clone(e) {
            let t = super.clone(e);
            return n.each(this.children, (i,n)=>{
                t.children[n] = i.clone(e)
            }
            ),
            t
        }
        _assignChildrenContext(e, t) {
            const i = this.children[e];
            return i ? n.assign(i, t) : this.children[e] = t
        }
    }
    t.CompositeNavigationContext = h,
    t.LocationPickerNavigationId = "LocationPicker",
    t.LocationViewerNavigationId = "LocationViewer",
    t.ConversationMediaViewerPanelNavigationId = "ConversationMediaViewerPanel",
    t.PromptPermissionsNavigatorId = "PromptPermissions";
    t.PromptPermissionContext = class extends c {
    }
    ;
    t.LocationPickerContext = class extends l {
    }
    ;
    t.LocationViewerContext = class extends l {
    }
    ;
    t.DocumentViewerContext = class extends l {
    }
    ;
    t.MediaViewerPanelContext = class extends l {
    }
    ;
    t.ConversationMediaViewerPanelContext = class extends l {
    }
    ;
    t.ScreenShareModalContext = class extends l {
    }
    ,
    t.WelcomeScreenNavigatorId = "WelcomeScreen";
    class p extends l {
    }
    t.WelcomeScreenContext = p,
    t.JoiningGuestNavigatorId = "JoiningGuestScreen";
    t.JoiningGuestScreenContext = class extends l {
    }
    ,
    t.ForcedUpgradeNavigatorId = "ForcedUpgrade";
    t.ForcedUpgradeContext = class extends l {
    }
    ,
    t.ConversationsListNavigationId = "ConversationsList";
    class m extends l {
    }
    t.ConversationsListNavigationContext = m,
    t.MobileHubNavigationId = "MobileHub";
    t.MobileHubNavigationContext = class extends l {
    }
    ,
    t.AlertsHubNavigationId = "AlertsHub";
    class S extends l {
    }
    t.AlertsHubNavigationContext = S,
    t.MeControlNavigationId = "MeControlId";
    t.MeControlNavigationContext = class extends l {
    }
    ,
    t.MySettingsNavigationId = "MySettingsId";
    t.MySettingsNavigationContext = class extends l {
    }
    ,
    t.InviteLinkQRPanelNavigationId = "InviteLinkQRPanelId";
    t.InviteLinkQRPanelNavigationContext = class extends l {
    }
    ,
    t.PesSearchNavigationId = "PesSearchId";
    t.PesSearchNavigationContext = class extends l {
    }
    ,
    t.ColorPickerNavigationId = "ColorPicker",
    t.ThemeNavigationId = "Theme";
    t.OnboardingDialogWizardContext = class extends l {
    }
    ,
    t.SyncAddressBookNavigationId = "SyncAddressBook";
    t.SyncAddressBookContext = class extends c {
    }
    ;
    t.PeopleYouMayKnowNoticeContext = class extends c {
    }
    ;
    t.ThemeContext = class extends c {
    }
    ;
    t.UserProfileContext = class extends c {
    }
    ,
    t.PnvEnterNumberNavigationId = "PnvEnterNumber";
    t.PnvEnterNumberContext = class extends c {
    }
    ,
    t.PnvEnterCodeNavigationId = "PnvEnterCode";
    t.PnvEnterCodeContext = class extends c {
    }
    ;
    t.PnvDebugToolContext = class extends c {
    }
    ,
    t.AvatarNavigationId = "AvatarPicker";
    t.ChooseAvatarContext = class extends c {
    }
    ;
    t.ChooseAvatarCommonPickerContext = class extends c {
    }
    ,
    t.AVSettingsNavigationId = "AVSettings";
    t.AVSettingsContext = class extends c {
    }
    ;
    t.BackgroundEffectsSettingsNavigationContext = class extends l {
    }
    ,
    function(e) {
        e[e.NavigationFromSettings = 0] = "NavigationFromSettings"
    }(t.NavigationSettingsGroupOrigin || (t.NavigationSettingsGroupOrigin = {}));
    t.SettingsGroupNavigationContext = class extends l {
    }
    ;
    t.NewSettingsPanelNavigationContext = class extends l {
    }
    ,
    t.LanguagePickerNavigationId = "LanguagePicker";
    t.LanguagePickerPanelNavigationContext = class extends l {
    }
    ,
    t.ConversationNavigationId = "Conversation";
    class C extends l {
    }
    t.ConversationNavigationContext = C,
    t.CallNavigationId = "Call",
    function(e) {
        e[e.StartingCall = 0] = "StartingCall",
        e[e.JoinOngoing = 1] = "JoinOngoing",
        e[e.AnsweredRing = 2] = "AnsweredRing",
        e[e.PresentIncomingRing = 3] = "PresentIncomingRing",
        e[e.Rejoining = 4] = "Rejoining",
        e[e.AutoAnsweredRing = 5] = "AutoAnsweredRing"
    }(t.CallNavigationReason || (t.CallNavigationReason = {}));
    t.CallNavigationContext = class extends l {
    }
    ;
    t.UnansweredCallNavigationContext = class extends l {
    }
    ;
    t.AndroidCallMonitorPermissionNavigationContext = class extends l {
    }
    ;
    t.CQFNavigationContext = class extends l {
    }
    ;
    t.CallPreviewNavigationContext = class extends l {
    }
    ;
    t.CallerIdPromptContext = class extends l {
    }
    ,
    t.CallFailurePromptId = "CallFailurePrompt";
    t.CallFailurePromptContext = class extends l {
    }
    ;
    t.CallFailurePostPurchasePromptContext = class extends l {
    }
    ;
    t.RinglessCallInterstitialNavigationContext = class extends l {
    }
    ,
    t.DetailsNavigationId = "Details";
    t.DetailsNavigationContext = class extends l {
    }
    ;
    t.ChatConfigNavigationContext = class extends l {
    }
    ,
    t.ConversationInCallNavigationId = "ConversationInCall";
    class y extends l {
    }
    t.ConversationInCallNavigationContext = y,
    t.CallRosterNavigationId = "CallRoster";
    t.CallRosterNavigationContext = class extends l {
    }
    ,
    t.AddToCallNavigationId = "AddToCall";
    t.AddToCallNavigationContext = class extends l {
    }
    ,
    t.CreateConversationNavigationId = "CreateConversation";
    t.CreateConversationNavigationContext = class extends c {
    }
    ,
    t.LoadingPanelNavigationId = "LoadingPanel";
    t.LoadingPanelNavigationContext = class extends l {
    }
    ;
    t.ElectronForceUpgradeScreen = class extends l {
    }
    ,
    t.ConversationParticipantsNavigationId = "ConvParticipants",
    t.SuperComposerNavigationId = "SuperComposer";
    t.ConversationParticipantsNavigationContext = class extends c {
    }
    ,
    t.BotsListNavigationId = "BotsList";
    t.BotsListNavigationContext = class extends l {
    }
    ,
    t.BotDiscoveryNavigationId = "BotDiscovery";
    t.BotDiscoveryNavigationContext = class extends l {
    }
    ;
    t.CaptureNavigationContext = class extends l {
    }
    ;
    t.DesktopCaptureComboViewNavigationContext = class extends l {
    }
    ;
    t.AugmentedPermissionsViewNavigationState = class {
    }
    ;
    t.AugmentedPermissionsViewNavigationContext = class extends l {
    }
    ,
    t.ArchivedConversationsId = "ArchivedConversations";
    class f extends l {
    }
    t.ArchivedConversationsPanelNavigationContext = f,
    t.SearchNavigationId = "Search";
    class _ extends l {
    }
    t.SearchNavigationContext = _;
    t.AboutNavigationContext = class extends l {
    }
    ;
    t.ThirdPartyNoticesNavigationContext = class extends l {
    }
    ,
    t.GetBalanceStateId = "GetBalanceState";
    t.GetBalanceStateNavigationContext = class extends l {
    }
    ,
    t.PurchaseContinuationId = "PurchaseContinuation";
    t.PurchaseContinuationNavigationContext = class extends l {
    }
    ;
    t.SubscriptionIntroNavigationContext = class extends l {
    }
    ,
    t.TelemetryPerfId = "TelemetryPerf";
    t.TelemetryPerformanceMonitorNavigationContext = class extends l {
    }
    ,
    t.DiagnosticToolsId = "DiagnosticTools";
    t.DiagnosticToolsNavigationContext = class extends l {
    }
    ,
    t.SendDiagnosticLogsId = "SendDiagnosticLogs";
    t.SendDiagnosticLogsNavigationContext = class extends l {
    }
    ,
    t.ProfilePicturePanelId = "ProfilePicturePanelId";
    t.ProfilePicturePanelNavigationContext = class extends l {
    }
    ,
    t.BlockedUsersListId = "BlockedUsersList";
    t.BlockedUsersListNavigationContext = class extends l {
    }
    ;
    t.ConnectedUsersListNavigationContext = class extends l {
    }
    ,
    t.ManageSearchInfoPanelId = "ManageSearchInfo";
    t.ManageSearchInfoPanelNavigationContext = class extends l {
    }
    ,
    t.FeatureFlagListId = "FeatureFlagList";
    t.FeatureFlagListNavigationContext = class extends l {
    }
    ,
    t.SlimcoreFlagListId = "SlimcoreFlagList";
    t.SlimcoreFlagListNavigationContext = class extends l {
    }
    ,
    t.RawPreferencesId = "RawPreferences";
    t.RawPreferencesNavigationContext = class extends l {
    }
    ,
    t.CustomReactionsPanelId = "CustomReactionsPanel";
    t.CustomReactionsPanelNavigationContext = class extends l {
    }
    ,
    t.DesktopCloseAccountNavigationId = "DesktopCloseAccount";
    t.DesktopCloseAccountNavigationContext = class extends l {
    }
    ,
    t.EffectsPrivacyId = "EffectsPrivacy";
    t.EffectsPrivacyNavigationContext = class extends l {
    }
    ,
    t.DesktopMsaPhoneAccrualNavigationId = "DesktopMsaPhoneAccrual";
    t.DesktopMsaPhoneAccrualNavigationContext = class extends l {
    }
    ;
    t.GetProductWebFlowNavigationContext = class extends l {
    }
    ;
    t.Payments3dsNavigationContext = class extends l {
    }
    ;
    t.SsoWebFlowNavigationContext = class extends l {
    }
    ;
    t.CallingSettingsHeaderAuthWebFlowNavigationContext = class extends l {
    }
    ;
    t.SkypeNumberWebFlowNavigationContext = class extends l {
    }
    ,
    t.SkypeNumberPanel = "SkypeNumberPanel";
    t.SkypeNumberPanelNavigationContext = class extends l {
    }
    ,
    t.SkypeNumberPanelPurchaseFlow = "SkypeNumberPanelPurchaseFlow";
    t.SkypeNumberPanelPurchaseFlowNavigationContext = class extends l {
    }
    ,
    t.AlertsNavigationId = "Alerts";
    t.AlertsNavigationContext = class extends l {
    }
    ,
    t.MediaEditorNavigationId = "MediaEditor";
    t.CapturePreviewNavigationContext = class extends l {
    }
    ;
    t.CaptureMultiPreviewNavigationContext = class extends l {
    }
    ,
    t.InAppBrowserNavigationId = "InAppBrowser";
    t.InAppBrowserNavigationContext = class extends l {
    }
    ,
    t.ShareWithPanelNavigationId = "ShareWith";
    t.ShareWithPanelNavigationContext = class extends l {
    }
    ,
    t.EngagementSharePanelNavigationId = "EngagementSharePanel";
    t.EngagementSharePanelContext = class extends l {
    }
    ,
    t.CaptivePortalQuestionnaireNavigationId = "CaptivePortalQuestionnaire";
    t.CaptivePortalQuestionnaireContext = class extends l {
    }
    ,
    t.ShareContactsToConversationNavigationId = "ShareContactsToConversation";
    t.ShareContactsToConversationContext = class extends l {
    }
    ,
    t.MediaPickerNavigationId = "MediaPicker";
    t.MediaPickerNavigationContext = class extends l {
    }
    ,
    t.CaptureComboNavigationId = "CaptureCombo";
    t.CaptureComboNavigationContext = class extends l {
    }
    ,
    t.GalleryNavigationId = "Gallery";
    t.GalleryNavigationContext = class extends l {
    }
    ,
    t.FindPanelNavigationId = "Find";
    t.FindPanelNavigationContext = class extends l {
    }
    ,
    t.SendMoneyPanelNavigationId = "SendMoney";
    t.SendMoneyPanelNavigationContext = class extends l {
    }
    ,
    t.CallingSettingsPanelNavigationId = "CallingSettings";
    t.CallingSettingsPanelNavigationContext = class extends l {
    }
    ,
    t.AdvancedCallingSettingsPanelNavigationId = "AdvancedCallingSettings";
    t.AdvancedCallingSettingsPanelNavigationContext = class extends l {
    }
    ;
    t.SubtitlesCallingSettingsPanelNavigationContext = class extends l {
    }
    ;
    t.TranslationSettingsPanelNavigationContext = class extends l {
    }
    ,
    t.CallingSettingsEntryNavigationId = "CallingSettingsEntry";
    t.CallingSettingsEntryNavigationContext = class extends l {
    }
    ;
    t.CallingDebugPanelNavigationContext = class extends l {
    }
    ,
    t.QuickCallPanelId = "QuickCallPanel",
    t.QuickCallSearchPanelId = "QuickCallSearchPanel";
    class b extends l {
    }
    t.QuickCallNavigationContext = b,
    t.PSTNDialerPanelId = "PSTNDialerPanel";
    t.PSTNDialerNavigationContext = class extends l {
    }
    ,
    t.PSTNCountrySelectorPanelId = "PSTNCountrySelectorPanel";
    t.PSTNCountrySelectorNavigationContext = class extends l {
    }
    ,
    t.SkypeNumberCountryAreaSelectorPanelId = "SkypeNumberCountryAreaSelectorPanel";
    t.SkypeNumberCountryAreaSelectorNavigationContext = class extends l {
    }
    ,
    t.SkypeNumberPrefixSelectorPanelId = "SkypeNumberPrefixSelectorPanel";
    t.SkypeNumberPrefixSelectorNavigationContext = class extends l {
    }
    ,
    t.ContactsPanelId = "Contacts";
    class v extends l {
    }
    t.ContactsPanelV2NavigationContext = v,
    t.AddContactPanelId = "AddContactPanel";
    t.AddContactPanelNavigationContext = class extends l {
    }
    ;
    t.AddPhoneNumberPanelNavigationContext = class extends l {
    }
    ,
    t.DiscoverPeoplePanelId = "DiscoverPeoplePanel";
    t.DiscoverPeoplePanelNavigationContext = class extends l {
    }
    ,
    t.AboutPeopleYouMayKnowId = "AboutPeopleYouMayKnow";
    t.AboutPeopleYouMayKnowNavigationContext = class extends l {
    }
    ,
    t.ActiveNowPanelId = "ActiveNowPanel";
    t.ActiveNowPanelNavigationContext = class extends l {
    }
    ,
    t.ProfileNavigationId = "Profile";
    t.ProfileNavigationState = class {
    }
    ;
    t.ProfileNavigationContext = class extends l {
    }
    ,
    t.MobileSharingScreenId = "MobileSharingScreen";
    t.InviteShareNavigationContext = class extends l {
    }
    ;
    t.InviteShareNavigationState = class {
    }
    ,
    t.ConversationSharingScreenId = "ConversationSharingScreenId";
    t.ConversationShareNavigationState = class {
    }
    ,
    t.ShareProfilePanel = "DiscoverPeoplePanel";
    t.ShareProfilePanelNavigationContext = class extends l {
    }
    ,
    t.ShareGroupPanel = "DiscoverPeoplePanel";
    t.ShareGroupPanelNavigationContext = class extends l {
    }
    ;
    t.ConversationShareNavigationContext = class extends l {
    }
    ;
    t.GuestUpsellNavigationContext = class extends l {
    }
    ;
    t.SXPlaygroundNavigationContext = class extends l {
    }
    ,
    t.DesktopSettingsGroupNavigationId = "DesktopSettingsGroup";
    t.DesktopSettingsGroupNavigationContext = class extends l {
    }
    ;
    t.ManageUsersSettingsPanelNavigationContext = class extends l {
    }
    ;
    t.DesktopCortanaNotebookNavigationContext = class extends l {
    }
    ;
    t.MobileContentPanelNavigationContext = class extends h {
        setConversationContext(e) {
            this.children[t.ConversationNavigationId] = new C(e)
        }
        getConversationContext() {
            return this.children[t.ConversationNavigationId]
        }
    }
    ;
    t.DesktopContentPanelNavigationContext = class extends h {
        setConversationContext(e) {
            this.children[t.ConversationNavigationId] = new C(e)
        }
        getConversationContext() {
            return this.children[t.ConversationNavigationId]
        }
    }
    ;
    t.RightSidebarStackContext = class extends d {
    }
    ,
    t.LeftNavigationViewId = "LeftNavView",
    t.SubtitlesNavigationId = "Subtitles";
    t.SubtitlesNavigationContext = class extends l {
    }
    ;
    class T extends h {
        setViewMode(e) {
            this.state.viewMode = e
        }
        getConversationsListContext() {
            return this.children[t.ConversationsListNavigationId] || (this.children[t.ConversationsListNavigationId] = new m({
                currentTab: a.Recents
            })),
            this.children[t.ConversationsListNavigationId]
        }
        getSearchContext() {
            return this.children[t.SearchNavigationId] || (this.children[t.SearchNavigationId] = new _({
                searchOrigin: o.SearchPanelInitiator.Unknown
            })),
            this.children[t.SearchNavigationId]
        }
        getCallSearchContext() {
            return this.children[t.QuickCallSearchPanelId] || (this.children[t.QuickCallSearchPanelId] = new b({
                searchOnly: !0
            })),
            this.children[t.QuickCallSearchPanelId]
        }
        getConversationInCallContext() {
            return this.children[t.ConversationInCallNavigationId]
        }
        setConversationInCallContext(e) {
            this.children[t.ConversationInCallNavigationId] = new y(e)
        }
        getCallsContext() {
            return this.children[t.QuickCallPanelId] || (this.children[t.QuickCallPanelId] = new b({})),
            this.children[t.QuickCallPanelId]
        }
        getContactsV2Context() {
            return this.children[t.ContactsPanelId] || (this.children[t.ContactsPanelId] = new v({})),
            this.children[t.ContactsPanelId]
        }
        getNotificationsContext() {
            return this.children[t.AlertsHubNavigationId] || (this.children[t.AlertsHubNavigationId] = new S({})),
            this.children[t.AlertsHubNavigationId]
        }
        getArchivedConversationsContext() {
            return this.children[t.ArchivedConversationsId] || (this.children[t.ArchivedConversationsId] = new f({})),
            this.children[t.ArchivedConversationsId]
        }
    }
    t.LeftNavigationViewContext = T;
    class P extends l {
    }
    t.SplitMasterNavigationContext = P;
    t.SettingsMenuContext = class extends P {
    }
    ,
    t.SpeechConsentNavigationId = "SpeechConsent";
    t.SpeechConsentNavigationContext = class extends l {
    }
    ;
    t.RootCompositeSplitViewContext = class extends g {
        setupDefaults() {
            super.setupDefaults(),
            this._navStack = [new p({})],
            this._masterContext = new T({
                viewMode: r.Recents
            })
        }
        collapse(e) {
            super.collapse(e),
            e || 0 !== this._navStack.length || (this._navStack = [new p({})])
        }
        clone(e) {
            let t = Object.create(this);
            return t._init(this.state),
            e && (t.id = this.id),
            t._navStack = n.clone(this._navStack),
            t._masterContext = this._masterContext && this._masterContext.clone ? this._masterContext.clone(e) : n.clone(this._masterContext),
            t._isCollapsed = this._isCollapsed,
            t
        }
        getMasterContext() {
            return super.getMasterContext()
        }
        getNavStack() {
            if (this._isCollapsed) {
                const e = this._masterContext instanceof T ? this._masterContext : void 0
                  , t = !!e && e.state.viewMode !== r.None ? n.filter(this._navStack, e=>!this._shouldFilterNavContext(e)) : this._navStack;
                return e ? [e, ...t] : t
            }
            return this._navStack
        }
        getBackStack() {
            let e = super.getBackStack();
            return e = n.filter(e, e=>!(e instanceof T && e.state.viewMode === r.None)),
            e
        }
        getLeftNavigationContext() {
            if (this._masterContext instanceof T)
                return this._masterContext
        }
        shouldDisplayMainAreaFullScreen() {
            return this._displayMainAreaFullScreen
        }
        setMainAreaFullScreen(e) {
            this._displayMainAreaFullScreen = e
        }
        _shouldFilterNavContext(e) {
            return e instanceof p
        }
    }
    ,
    t.SmsFailurePromptId = "SmsFailurePrompt";
    t.SmsFailurePromptContext = class extends l {
    }
    ,
    t.TasterPostCallPanelId = "TasterPostCallPanel";
    t.TasterPostCallPanelContext = class extends l {
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(164)
      , o = i(0)
      , s = i(10)
      , r = i(2)
      , a = i(3)
      , l = i(2425)
      , c = i(22)
      , d = i(34)
      , u = i(14);
    let g = new class {
        showModal(e, t, i) {
            const g = n=>{
                a.log(r.LogTraceArea.Navigation, "CommonModalUtils.showModal modalId: " + t + " rootViewId: " + d.mriOrId(n));
                const c = i.useScopedModalId ? this._getAdjustedId(t, i.rootViewId) : t
                  , g = Object.assign(Object.assign({}, i), {
                    rootViewId: n === s.MainRootViewId ? void 0 : n
                });
                let h = e;
                (n !== s.MainRootViewId || g.rootViewType) && (h = o.createElement(l.default, {
                    style: u.absoluteFill,
                    rootViewId: n,
                    rootViewType: g.rootViewType
                }, h)),
                o.Modal.show(h, c, g)
            }
            ;
            c.default.isUsingSplitViewNoSubscription() && i.rootViewId === s.MainRootViewId && i.useFocussedWindowFallback ? n.default.getLastActiveSplitView().then(e=>{
                const t = e && e.isActive ? e.id : s.MainRootViewId;
                g(t)
            }
            , e=>{
                a.log(r.LogTraceArea.Navigation, "getLastActiveSplitView() failed. error: " + e),
                g(s.MainRootViewId)
            }
            ) : g(i.rootViewId)
        }
        dismissModal(e, t, i) {
            a.log(r.LogTraceArea.Navigation, "CommonModalUtils.dismissModal modalId: " + e + " rootViewId: " + d.mriOrId(t));
            const n = i ? this._getAdjustedId(e, t) : e;
            o.Modal.dismiss(n)
        }
        isModalDisplayed(e, t, i) {
            const n = i ? this._getAdjustedId(e, t) : e;
            return o.Modal.isDisplayed(n)
        }
        showPopup(e, t, i) {
            return (n=>{
                a.log(r.LogTraceArea.Navigation, "CommonModalUtils.showPopup popupId: " + t + " rootViewId: " + d.mriOrId(n));
                const c = e.useScopedPopupId ? this._getAdjustedId(t, e.rootViewId) : t
                  , g = Object.assign(Object.assign({}, e), {
                    renderPopup: (t,i,r,a)=>{
                        const c = e.renderPopup(t, i, r, a);
                        return n !== s.MainRootViewId || e.rootViewType ? o.createElement(l.default, {
                            style: u.overflowVisible,
                            rootViewId: n,
                            rootViewType: e.rootViewType
                        }, c) : c
                    }
                    ,
                    rootViewId: n === s.MainRootViewId ? void 0 : n,
                    getAnchor: ()=>{
                        const i = e.getAnchor ? e.getAnchor() : void 0;
                        return i || a.log(r.LogTraceArea.Navigation, "CommonModalUtils.showPopup getAnchor popupId: " + t + " rootViewId: " + d.mriOrId(n) + " hasAnchor: false"),
                        i
                    }
                });
                return o.Popup.show(g, c, i)
            }
            )(e.rootViewId)
        }
        dismissPopup(e, t, i) {
            a.log(r.LogTraceArea.Navigation, "CommonModalUtils.dismissPopup popupId: " + e + " rootViewId: " + (t ? d.mriOrId(t) : "none"));
            const n = i ? this._getAdjustedId(e, t) : e;
            return o.Popup.dismiss(n)
        }
        validatePopupOffset(e) {
            e && (Math.abs(e.x) > 50 || Math.abs(e.y) > 50) && a.warn(r.LogTraceArea.GenericUnsafe, "CommonModalUtils popup offset is too large x: " + e.x + " y: " + e.y)
        }
        _getAdjustedId(e, t) {
            return t !== s.MainRootViewId ? e + "_" + t : e
        }
    }
    ;
    t.default = g
}
, function(e, t, i) {
    "use strict";
    i(6),
    i(2),
    i(22),
    i(18);
    e.exports = class {
        static useTabletUI() {
            return !1
        }
        static useTabletUINoSubscription() {
            return !1
        }
        static isTablet() {
            return !1
        }
        static isTabletNoSubscription() {
            return !1
        }
        static isIPad() {
            return !1
        }
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(2)
      , s = i(3);
    class r {
        static paddingTopStyle(e) {
            let t = this._cachedPaddingTopStyles[e];
            return t || (s.log(o.LogTraceArea.GenericUnsafe, "SafeAreaStyleUtils: Creating paddingTopStyle " + e),
            t = n.Styles.createViewStyle({
                paddingTop: e
            }, !1),
            this._cachedPaddingTopStyles[e] = t),
            t
        }
        static marginTopStyle(e) {
            let t = this._cachedMarginTopStyles[e];
            return t || (s.log(o.LogTraceArea.GenericUnsafe, "SafeAreaStyleUtils: Creating marginTopStyle " + e),
            t = n.Styles.createViewStyle({
                marginTop: e
            }, !1),
            this._cachedMarginTopStyles[e] = t),
            t
        }
        static paddingBottomStyle(e) {
            let t = this._cachedPaddingBottomStyles[e];
            return t || (s.log(o.LogTraceArea.GenericUnsafe, "SafeAreaStyleUtils: Creating paddingBottomStyle " + e),
            t = n.Styles.createViewStyle({
                paddingBottom: e
            }, !1),
            this._cachedPaddingBottomStyles[e] = t),
            t
        }
        static marginBottomStyle(e) {
            let t = this._cachedMarginBottomStyles[e];
            return t || (s.log(o.LogTraceArea.GenericUnsafe, "SafeAreaStyleUtils: Creating marginBottomStyle " + e),
            t = n.Styles.createViewStyle({
                marginBottom: e
            }, !1),
            this._cachedMarginBottomStyles[e] = t),
            t
        }
        static heightStyle(e) {
            let t = this._cachedHeightStyles[e];
            return t || (s.log(o.LogTraceArea.GenericUnsafe, "SafeAreaStyleUtils: Creating heightStyle " + e),
            t = n.Styles.createViewStyle({
                height: e
            }, !1),
            this._cachedHeightStyles[e] = t),
            t
        }
        static horizontalPaddingStyle(e) {
            let t = e.left + "_" + e.right
              , i = this._cachedHorizontalPaddingStyles[t];
            return i || (s.log(o.LogTraceArea.GenericUnsafe, "SafeAreaStyleUtils: Creating horizontalPaddingStyle left: " + e.left + ", right: " + e.right),
            i = n.Styles.createViewStyle({
                paddingLeft: e.left,
                paddingRight: e.right
            }, !1),
            this._cachedHorizontalPaddingStyles[t] = i),
            i
        }
        static horizontalMarginStyle(e) {
            let t = e.left + "_" + e.right
              , i = this._cachedHorizontalMarginStyles[t];
            return i || (s.log(o.LogTraceArea.GenericUnsafe, "SafeAreaStyleUtils: Creating horizontalMarginStyle left: " + e.left + ", right: " + e.right),
            i = n.Styles.createViewStyle({
                marginLeft: e.left,
                marginRight: e.right
            }, !1),
            this._cachedHorizontalMarginStyles[t] = i),
            i
        }
        static hasHorizontalSafeAreas(e) {
            return 0 !== e.left || 0 !== e.right
        }
    }
    r._cachedPaddingTopStyles = {},
    r._cachedMarginTopStyles = {},
    r._cachedPaddingBottomStyles = {},
    r._cachedMarginBottomStyles = {},
    r._cachedHeightStyles = {},
    r._cachedHorizontalPaddingStyles = {},
    r._cachedHorizontalMarginStyles = {},
    e.exports = r
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(157)
      , s = i(2)
      , r = i(3)
      , a = (i(19),
    i(18));
    var l, c;
    !function(e) {
        e[e.JSONAnimation = 0] = "JSONAnimation",
        e[e.Camera = 1] = "Camera",
        e[e.SystemSettingsDeepLink = 2] = "SystemSettingsDeepLink",
        e[e.DragAndDrop = 3] = "DragAndDrop",
        e[e.DesktopFilePicker = 4] = "DesktopFilePicker",
        e[e.AVSettings = 5] = "AVSettings",
        e[e.NativeAnimations = 6] = "NativeAnimations",
        e[e.SpriteAnimations = 7] = "SpriteAnimations",
        e[e.NumberOfLines = 8] = "NumberOfLines",
        e[e.ContactsSync = 9] = "ContactsSync",
        e[e.InlineTextFormatting = 10] = "InlineTextFormatting",
        e[e.CursorTypes = 11] = "CursorTypes",
        e[e.RTL = 12] = "RTL",
        e[e.CopyTextToClipboard = 13] = "CopyTextToClipboard",
        e[e.SystemTheme = 14] = "SystemTheme",
        e[e.KeyboardAwareView = 15] = "KeyboardAwareView",
        e[e.QuickActions = 16] = "QuickActions",
        e[e.AddScheduledCallToCalendar = 17] = "AddScheduledCallToCalendar",
        e[e.SystemHotKeys = 18] = "SystemHotKeys",
        e[e.RemoteAppearancePreferences = 19] = "RemoteAppearancePreferences",
        e[e.EngagementProcessedMessageOnWebTimestamp = 20] = "EngagementProcessedMessageOnWebTimestamp"
    }(l || (l = {})),
    function(e) {
        e[e.OneToOne = 0] = "OneToOne",
        e[e.Group = 1] = "Group",
        e[e.MeetNow = 2] = "MeetNow",
        e[e.Encrypted = 3] = "Encrypted",
        e[e.AutoAnswer = 4] = "AutoAnswer",
        e[e.CallMonitor = 5] = "CallMonitor",
        e[e.ScreenSharing = 6] = "ScreenSharing",
        e[e.ScreenSharingWithSounds = 7] = "ScreenSharingWithSounds",
        e[e.ScreenSharingControl = 8] = "ScreenSharingControl",
        e[e.MicrophoneLevelMeter = 9] = "MicrophoneLevelMeter",
        e[e.MicrophoneVolumeControl = 10] = "MicrophoneVolumeControl",
        e[e.SpeakerVolumeControl = 11] = "SpeakerVolumeControl",
        e[e.PersistVolumeLevels = 12] = "PersistVolumeLevels",
        e[e.AvSettingsCameraPreview = 13] = "AvSettingsCameraPreview",
        e[e.NonNativeEmergencyCalls = 14] = "NonNativeEmergencyCalls",
        e[e.CallSnapshot = 15] = "CallSnapshot",
        e[e.AttachVideoWithId = 16] = "AttachVideoWithId",
        e[e.RemoteRendererDispose = 17] = "RemoteRendererDispose",
        e[e.DirectReparenting = 18] = "DirectReparenting",
        e[e.DefaultOutputDevice = 19] = "DefaultOutputDevice",
        e[e.SecondaryRinging = 20] = "SecondaryRinging",
        e[e.UnmuteDevice = 21] = "UnmuteDevice",
        e[e.Agc = 22] = "Agc",
        e[e.CallTechnicalInformation = 23] = "CallTechnicalInformation",
        e[e.BackgroundBlur = 24] = "BackgroundBlur",
        e[e.BackgroundReplacement = 25] = "BackgroundReplacement",
        e[e.NdiPlatform = 26] = "NdiPlatform",
        e[e.ApplicationSharing = 27] = "ApplicationSharing",
        e[e.MobileScreenSharing = 28] = "MobileScreenSharing",
        e[e.CallMerge = 29] = "CallMerge",
        e[e.ScreenSharingToolbar = 30] = "ScreenSharingToolbar",
        e[e.floatableResizableVideoPreviewSupported = 31] = "floatableResizableVideoPreviewSupported"
    }(c || (c = {}));
    class d {
        constructor() {
            this._capabilityMap = {}
        }
        _isSupported(e, t) {
            const i = e;
            return n.isUndefined(this._capabilityMap[i]) && (this._capabilityMap[i] = t()),
            this._capabilityMap[i]
        }
    }
    t.CallingCapabilities = new class extends d {
        anyCallingSupported() {
            const e = this.oneToOneCallingSupported()
              , t = this.groupCallingSupported();
            return r.log(s.LogTraceArea.Calling, `CallingCapabilities.anyCallingSupported, oneToOneCallingSupported: ${e}, groupCallingSupported: ` + t),
            e || t
        }
        oneToOneCallingSupported() {
            return this._isSupported(c.OneToOne, ()=>o.BrowserEnvironment.isChrome() || o.BrowserEnvironment.isEdge())
        }
        groupCallingSupported() {
            return this._isSupported(c.Group, ()=>o.BrowserEnvironment.isChrome() || o.BrowserEnvironment.isEdge() || o.BrowserEnvironment.isSafari())
        }
        meetNowCallingSupported() {
            return this._isSupported(c.MeetNow, ()=>o.BrowserEnvironment.isChrome() || o.BrowserEnvironment.isEdge() || o.BrowserEnvironment.isCallingSupportedSafari())
        }
        encryptedCallingSupported() {
            return this._isSupported(c.Encrypted, ()=>!1)
        }
        autoAnswerSupported() {
            return this._isSupported(c.AutoAnswer, ()=>!1)
        }
        callMonitorSupported() {
            return this._isSupported(c.CallMonitor, ()=>!1)
        }
        screenSharingSupported() {
            return this._isSupported(c.ScreenSharing, ()=>o.BrowserEnvironment.supportsScreenSharing())
        }
        screenSharingControlSupported() {
            return this._isSupported(c.ScreenSharingControl, ()=>this.screenSharingSupported() && !1)
        }
        screenSharingWithSoundSupported() {
            return this._isSupported(c.ScreenSharingWithSounds, ()=>a.isElectronWindows())
        }
        mobileScreenSharingSupported() {
            return this._isSupported(c.MobileScreenSharing, ()=>!1)
        }
        microphoneLevelMeterSupported() {
            return this._isSupported(c.MicrophoneLevelMeter, ()=>a.isAnyWindowsOrOsx())
        }
        microphoneVolumeControlSupported() {
            return this._isSupported(c.MicrophoneVolumeControl, ()=>a.isAnyWindowsOrOsx())
        }
        speakerVolumeControlSupported() {
            return this._isSupported(c.SpeakerVolumeControl, ()=>a.isAnyWindowsOrOsx())
        }
        persistVolumeLevelsSupported() {
            return this._isSupported(c.PersistVolumeLevels, ()=>a.isAnyWindowsOrOsx())
        }
        avSettingsCameraPreviewSupported() {
            return this._isSupported(c.AvSettingsCameraPreview, ()=>!0)
        }
        nonNativeEmergencyCallsSupported() {
            return this._isSupported(c.NonNativeEmergencyCalls, ()=>!1)
        }
        callSnapshotSupported() {
            return this._isSupported(c.CallSnapshot, ()=>!1)
        }
        attachVideoWithIdSupported() {
            return this._isSupported(c.AttachVideoWithId, ()=>!1)
        }
        remoteRendererDisposeSupported() {
            return this._isSupported(c.RemoteRendererDispose, ()=>!0)
        }
        directReparentingSupported() {
            return this._isSupported(c.DirectReparenting, ()=>!1)
        }
        defaultOutputDeviceSupported() {
            return this._isSupported(c.DefaultOutputDevice, ()=>!1)
        }
        secondaryRingingSupported() {
            return this._isSupported(c.SecondaryRinging, ()=>!0)
        }
        unmuteDeviceSupported() {
            return this._isSupported(c.UnmuteDevice, ()=>!1)
        }
        agcSupported() {
            return this._isSupported(c.Agc, ()=>!1)
        }
        callTechnicalInformationSupported() {
            return this._isSupported(c.CallTechnicalInformation, ()=>!1)
        }
        backgroundBlurSupported() {
            return this._isSupported(c.BackgroundBlur, ()=>!1)
        }
        ndiPlatformSupported() {
            return this._isSupported(c.NdiPlatform, ()=>!1)
        }
        applicationSharingSupported() {
            return this._isSupported(c.ApplicationSharing, ()=>!0)
        }
        callMergeSupported() {
            return this._isSupported(c.CallMerge, ()=>!1)
        }
        screenSharingToolbarSupported() {
            return this._isSupported(c.ScreenSharingToolbar, ()=>!1)
        }
        floatableResizableVideoPreviewSupported() {
            return this._isSupported(c.floatableResizableVideoPreviewSupported, ()=>!0)
        }
    }
    ,
    t.UICapabilities = new class extends d {
        cameraSupported() {
            return this._isSupported(l.Camera, ()=>!1)
        }
        systemSettingsDeepLinkSupported() {
            return this._isSupported(l.SystemSettingsDeepLink, ()=>!1)
        }
        dragAndDropSupported() {
            return this._isSupported(l.DragAndDrop, ()=>!0)
        }
        desktopFilePickerSupported() {
            return this._isSupported(l.DesktopFilePicker, ()=>!0)
        }
        avSettingsSupported() {
            return this._isSupported(l.AVSettings, ()=>t.CallingCapabilities.anyCallingSupported())
        }
        nativeAnimationsSupported() {
            return this._isSupported(l.NativeAnimations, ()=>!1)
        }
        textNumberOfLinesSupported() {
            return this._isSupported(l.NumberOfLines, ()=>!1)
        }
        contactsSyncSupported() {
            return this._isSupported(l.ContactsSync, ()=>!1)
        }
        inlineTextFormattingSupported() {
            return this._isSupported(l.InlineTextFormatting, ()=>!0)
        }
        cursorTypesSupported() {
            return this._isSupported(l.CursorTypes, ()=>!0)
        }
        copyTextToClipboardSupported() {
            return this._isSupported(l.CopyTextToClipboard, ()=>o.BrowserEnvironment.supportsCopy())
        }
        systemThemeSupported() {
            return this._isSupported(l.SystemTheme, ()=>!1)
        }
        keyboardAwareViewSupported() {
            return this._isSupported(l.KeyboardAwareView, ()=>!1)
        }
        quickActionsSupported() {
            return this._isSupported(l.QuickActions, ()=>!1)
        }
        addScheduledCallToCalendarSupported() {
            return this._isSupported(l.AddScheduledCallToCalendar, ()=>!1)
        }
        systemHotKeysSupported() {
            return this._isSupported(l.SystemHotKeys, ()=>!1)
        }
        engagementProcessedMessageOnWebTimestampSupported() {
            return this._isSupported(l.EngagementProcessedMessageOnWebTimestamp, ()=>!0)
        }
        androidNotificationChannelSupported() {
            return !1
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(7)
      , a = i(6)
      , l = i(79)
      , c = i(57)
      , d = i(116)
      , u = i(16)
      , g = i(2)
      , h = i(3)
      , p = i(38)
      , m = i(4)
      , S = i(249)
      , C = i(32)
      , y = (i(543),
    i(259))
      , f = i(21)
      , _ = i(19)
      , b = i(18);
    t.TriggerKeys = u.UserProps;
    let v = class extends s.StoreBase {
        constructor() {
            super(100),
            this._preferencesPersisted = {},
            this._preferencesPendingPersist = {},
            this._preferencesComputed = {},
            this._requiresUWPMigration = !1,
            this._preferencesSynced = !1,
            this._setUserRingIfRequired = ()=>{
                const e = c.default.getUserProperty(u.ServerUserProps.UserRing)
                  , t = c.default.getUserProperty(u.UserProps.ChatServiceRingChangedManually) === d.UserRingChangedManually
                  , i = a.default.getS4LFeatures().chatFeatures.recommendedRing;
                i && i !== e && !t && this.setMyUserRing(i, !1)
            }
            ,
            f.RegisterStartupable(this, "MyUserPreferencesStore", [c.default, C.default])
        }
        startup() {
            return (c.default.hasFetchedUserPropertiesAtLeastOnce() ? r.Resolved() : this.fetchAndUpdateProperties()).always(()=>{
                c.default.userPropertiesChanged.subscribe(e=>{
                    this._gotUpdatedProps(e)
                }
                ),
                l.reconnected.subscribe(()=>{
                    this.fetchAndUpdateProperties()
                }
                ),
                this._preferencesPersisted = c.default.getUserProperties(),
                this._preferencesSynced = !0,
                this._preferencesPersisted[t.TriggerKeys.ReadReceiptsEnabled] && h.log(g.LogTraceArea.ReadReceipts, "Got enabled=" + this._preferencesPersisted[t.TriggerKeys.ReadReceiptsEnabled] + " on startup"),
                this._computePreferences(),
                this._requiresUWPMigration && this._migrateUWPToMSIXPlatformPreferences();
                const e = C.default.getUserPreferencesLocal().splitViewMode;
                o.isNil(e) || (C.default.setUserPreferencesLocal({
                    splitViewMode: void 0
                }),
                this.setUserAppearancePreferencesForCurrentPlatform({
                    splitViewEnabled: !!e
                }))
            }
            )
        }
        requestUWPToMSIXMigration() {
            this._requiresUWPMigration = !0,
            this._preferencesSynced && this._migrateUWPToMSIXPlatformPreferences()
        }
        _migrateUWPToMSIXPlatformPreferences() {
            0
        }
        fetchAndUpdateProperties(e=!1) {
            return f.EnsureStarted(l).then(()=>l.fetchAndUpdateMyProperties(e))
        }
        reset() {
            o.each(t.TriggerKeys, e=>this._setPreference(e, ""))
        }
        setAlertsLastReadTime(e) {
            this._setPreference(t.TriggerKeys.AlertsLastReadTime, e.toString())
        }
        getAlertsLastReadTime() {
            const e = Number(this._getPreference(t.TriggerKeys.AlertsLastReadTime));
            return isNaN(e) ? void 0 : e
        }
        setCaptureFirstRunLevel(e) {
            this._setPreference(t.TriggerKeys.CaptureFirstRunLevel, e && e.toString())
        }
        getCaptureFirstRunLevel() {
            const e = Number(this._getPreference(t.TriggerKeys.CaptureFirstRunLevel));
            return isNaN(e) ? void 0 : e
        }
        setCaptureMarkupTooltipDismissed(e) {
            this._setPreferenceBool(t.TriggerKeys.CaptureMarkupTooltipDismissed, e)
        }
        getCaptureMarkupTooltipDismissed() {
            return this._getPreferenceBool(t.TriggerKeys.CaptureMarkupTooltipDismissed)
        }
        setCoachMarksSeen(e) {
            this._setPreference(t.TriggerKeys.CoachMarksSeen, e && JSON.stringify(e))
        }
        getCoachMarksSeen() {
            const e = this._getPreference(t.TriggerKeys.CoachMarksSeen)
              , i = e ? _.parseJsonErrorable(e) : void 0;
            if (!o.isError(i)) {
                if (i && !o.isArray(i)) {
                    let e = [];
                    return o.each(i, t=>e = o.union(e, t)),
                    e
                }
                return i
            }
            h.error(g.LogTraceArea.PreferencesStores, "Failed to parse coachMarksSeen preference.")
        }
        setCortanaOptedIn(e) {
            return this._setPrefOnServer(t.TriggerKeys.CortanaOptedIn, e ? "true" : "")
        }
        getCortanaOptedIn() {
            return this._getPreferenceBool(t.TriggerKeys.CortanaOptedIn)
        }
        setSuggestionsEnabled(e) {
            let i;
            return i = o.isUndefined(e) ? "undefined" : e ? "true" : "false",
            this._setPreference(t.TriggerKeys.SuggestionsEnabled, i)
        }
        getSuggestionsEnabled() {
            const e = this._getPreference(t.TriggerKeys.SuggestionsEnabled);
            return "true" === e || "false" !== e && void 0
        }
        setCelebrationNotificationLastShownTime(e) {
            return this._setPrefOnServer(t.TriggerKeys.CelebrationNotificationLastShownTime, String(e))
        }
        getCelebrationNotificationLastShownTime() {
            const e = this._getPreference(t.TriggerKeys.CelebrationNotificationLastShownTime);
            if (e)
                return parseInt(e, 10)
        }
        setLocale(e) {
            return this._setPrefOnServer(t.TriggerKeys.Locale, e)
        }
        getLocale() {
            return this._getPreference(t.TriggerKeys.Locale)
        }
        setMarket(e) {
            return this._setPrefOnServer(t.TriggerKeys.Market, e)
        }
        getMarket() {
            return this._getPreference(t.TriggerKeys.Market)
        }
        setTimezone(e) {
            return this._setPrefOnServer(t.TriggerKeys.Timezone, e)
        }
        getTimezone() {
            return this._getPreference(t.TriggerKeys.Timezone)
        }
        setCortanaOptInHandledTime(e) {
            return this._setPreference(t.TriggerKeys.CortanaOptInHandledTime, e.toString())
        }
        getCortanaOptInHandledTime() {
            const e = Number(this._getPreference(t.TriggerKeys.CortanaOptInHandledTime));
            return isNaN(e) ? void 0 : e
        }
        setEmergencyCallDefaultCountry(e) {
            h.track(new y.EmergencyCallDefaultCountryChanged(e)),
            this._setPreference(t.TriggerKeys.EmergencyCallDefaultCountryChanged, e)
        }
        getEmergencyCallDefaultCountry() {
            return this._getPreference(t.TriggerKeys.EmergencyCallDefaultCountryChanged)
        }
        setIntegrationConsent(e) {
            this._setPreference(t.TriggerKeys.IntegrationAuthConsent, JSON.stringify(e))
        }
        getIntegrationConsent() {
            const e = this._getPreference(t.TriggerKeys.IntegrationAuthConsent)
              , i = e ? _.parseJsonErrorable(e) : {};
            return o.isError(i) ? (h.error(g.LogTraceArea.PreferencesStores, "Failed to parse integration consent cache.", i, e),
            {}) : i
        }
        setIntegrationIdAuthStatePairs(e) {
            this._setPreference(t.TriggerKeys.IntegrationIdAuthStatePairs, JSON.stringify(e))
        }
        getIntegrationIdAuthStatePairs() {
            const e = this._getPreference(t.TriggerKeys.IntegrationIdAuthStatePairs)
              , i = e ? _.parseJsonErrorable(e) : {};
            return o.isError(i) ? (h.error(g.LogTraceArea.PreferencesStores, "Failed to parse integrationIdAuthStatePairs.", i, e),
            {}) : i
        }
        setInviteSharingDisabled(e) {
            this._setPreferenceBool(t.TriggerKeys.InviteSharingDisabled, e)
        }
        getInviteSharingDisabled() {
            return this._getPreferenceBool(t.TriggerKeys.InviteSharingDisabled)
        }
        setIsSetupWizardCompleted(e) {
            this._setPreferenceBool(t.TriggerKeys.IsSetupWizardCompleted, e)
        }
        getOnboardingUserProfileScreenSeen() {
            return this._getPreferenceBool(t.TriggerKeys.OnboardingUserProfileScreenSeen)
        }
        setOnboardingUserProfileScreenSeen(e) {
            this._setPreferenceBool(t.TriggerKeys.OnboardingUserProfileScreenSeen, e)
        }
        getIsSetupWizardCompleted() {
            return this._getPreferenceBool(t.TriggerKeys.IsSetupWizardCompleted)
        }
        setScheduleNextCallDisplayedTimes() {
            const e = Number(this._getPreference(t.TriggerKeys.ScheduleNextCallDisplayedTimes));
            this._setPreference(t.TriggerKeys.ScheduleNextCallDisplayedTimes, (e + 1).toString())
        }
        getScheduleNextCallDisplayedTimes() {
            return Number(this._getPreference(t.TriggerKeys.ScheduleNextCallDisplayedTimes))
        }
        setScheduleNextCallCurrentSuccessfulCalls(e) {
            const i = Number(this._getPreference(t.TriggerKeys.ScheduleNextCallCurrentSuccessfulCalls));
            this._setPreference(t.TriggerKeys.ScheduleNextCallCurrentSuccessfulCalls, o.isNumber(e) ? e.toString() : (i + 1).toString())
        }
        getScheduleNextCallCurrentSuccessfulCalls() {
            return Number(this._getPreference(t.TriggerKeys.ScheduleNextCallCurrentSuccessfulCalls))
        }
        setMediaEditorFirstRunLevel(e) {
            this._setPreference(t.TriggerKeys.MediaEditorFirstRunLevel, e && e.toString())
        }
        getMediaEditorFirstRunLevel() {
            const e = Number(this._getPreference(t.TriggerKeys.MediaEditorFirstRunLevel));
            return isNaN(e) ? void 0 : e
        }
        setReactionNotificationsEnabled(e) {
            h.track(new S.ReactionPushNotificationsToggleSetting(!!e)),
            h.log(g.LogTraceArea.Push, "Setting push notifications for reactions setting, enabled=" + !!e);
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.ReactionPushNotificationsEnabled, i)
        }
        setLastEngagementProcessedMessageOnWebTimestamp() {
            const e = (new Date).getTime();
            h.log(g.LogTraceArea.Engagement, "Setting engagement message already shown on S4L.Web user preference,timestamp=" + e),
            this._setPreference(t.TriggerKeys.LastEngagementProcessedMessageOnWebTimestamp, e.toString())
        }
        setReadReceiptsEnabled(e, i) {
            h.track(new S.ReadReceiptsToggleSetting(!!e,i)),
            h.log(g.LogTraceArea.ReadReceipts, "Setting read receipts user preference, enabled=" + e + ", origin=" + S.ReadReceiptsSettingOrigin[i]);
            const n = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.ReadReceiptsEnabled, n),
            i === S.ReadReceiptsSettingOrigin.UserAction && this._setPreference(t.TriggerKeys.ReadReceiptsUserPreference, n)
        }
        setDisplayUrlPreviewsEnabled(e) {
            h.track(new S.DisplayUrlPreviewsToggleSetting(e)),
            h.log(g.LogTraceArea.UrlPreviews, "Setting display URL preview user preference, enabled=" + e);
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.DisplayUrlPreviewsEnabled, i)
        }
        setCallNotificationsWhileDNDEnabled(e) {
            h.track(new S.CallNotificationsWhileDNDToggleSetting(!!e)),
            h.log(g.LogTraceArea.DNDSetting, "Setting call notifications while DND, enabled=" + !!e);
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.CallNotificationsWhileDND, i)
        }
        setChatNotificationsWhileDNDEnabled(e) {
            h.track(new S.ChatNotificationsWhileDNDToggleSetting(!!e)),
            h.log(g.LogTraceArea.DNDSetting, "Setting chat notifications while DND, enabled=" + !!e);
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.ChatNotificationsWhileDND, i)
        }
        setNotifyOnPresenceChangeEnabled(e) {
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.NotifyOnPresenceChange, i)
        }
        setPresentDNDSetting() {
            this._setPreference(t.TriggerKeys.PresentDNDSetting, "false")
        }
        getReactionNotificationsEnabled() {
            return "false" !== this._getPreference(t.TriggerKeys.ReactionPushNotificationsEnabled)
        }
        getLastEngagementProcessedMessageOnWebTimestamp() {
            const e = Number(this._getPreference(t.TriggerKeys.LastEngagementProcessedMessageOnWebTimestamp));
            return isNaN(e) ? 0 : e
        }
        getReadReceiptsEnabled() {
            return "true" === this._getPreference(t.TriggerKeys.ReadReceiptsEnabled)
        }
        getDisplayUrlPreviews() {
            return "false" !== this._getPreference(t.TriggerKeys.DisplayUrlPreviewsEnabled)
        }
        getUserPreferenceForReadReceipts() {
            return "false" !== this._getPreference(t.TriggerKeys.ReadReceiptsUserPreference)
        }
        getCallNotificationsWhileDNDEnabled() {
            return "false" !== this._getPreference(t.TriggerKeys.CallNotificationsWhileDND)
        }
        getChatNotificationsWhileDNDEnabled() {
            return "true" === this._getPreference(t.TriggerKeys.ChatNotificationsWhileDND)
        }
        getNotifyOnPresenceChangeEnabled() {
            return "true" === this._getPreference(t.TriggerKeys.NotifyOnPresenceChange)
        }
        getPresentDNDSettingStatus() {
            return C.default.getUserPreferencesLocal().presentDNDSetting || this.setPresentDNDSetting(),
            "false" !== this._getPreference(t.TriggerKeys.PresentDNDSetting)
        }
        setScheduledCallReminders(e) {
            this._setPreference(t.TriggerKeys.ScheduledCallReminders, e && JSON.stringify(e))
        }
        getScheduledCallReminders() {
            const e = this._getPreference(t.TriggerKeys.ScheduledCallReminders)
              , i = e ? _.parseJsonErrorable(e) : void 0;
            if (!o.isError(i))
                return i;
            h.error(g.LogTraceArea.PreferencesStores, "Failed to parse scheduledCallReminders preference.")
        }
        setScheduledCallBannerDismissState(e, i) {
            const n = this.getScheduledCallsBannerDismissStates() || {};
            n[e] = i,
            this._setPreference(t.TriggerKeys.ScheduledCallBannerDismissStates, JSON.stringify(n))
        }
        deleteScheduledCallBannerDismissStates(e) {
            const i = this.getScheduledCallsBannerDismissStates();
            i && (o.each(e, e=>{
                i[e] && delete i[e]
            }
            ),
            this._setPreference(t.TriggerKeys.ScheduledCallBannerDismissStates, JSON.stringify(i)))
        }
        getScheduledCallsBannerDismissStates() {
            const e = this._getPreference(t.TriggerKeys.ScheduledCallBannerDismissStates)
              , i = e ? _.parseJsonErrorable(e) : void 0;
            if (!o.isError(i))
                return i;
            h.error(g.LogTraceArea.PreferencesStores, "Failed to parse scheduledCallBannerDismissStates preference.")
        }
        setConversationTranslationBannerDismissState(e, t) {
            const i = this._getTranslationBannerDismissStatesForConversation(e);
            i.conversationBannerBeenDismissed = t,
            this._setTranslationBannerDismissedState(e, i)
        }
        setInCallTranslationBannerDismissState(e, t) {
            const i = this._getTranslationBannerDismissStatesForConversation(e);
            i.inCallBannerBeenDismissed = t,
            this._setTranslationBannerDismissedState(e, i)
        }
        getReactions() {
            const e = this._getPreference(t.TriggerKeys.Reactions)
              , i = e ? _.parseJsonErrorable(e) : void 0;
            if (!o.isError(i))
                return i;
            h.error(g.LogTraceArea.PreferencesStores, "Failed to parse reactions preference.")
        }
        setReactions(e) {
            this._setPrefOnServer(t.TriggerKeys.Reactions, e ? JSON.stringify(e) : "")
        }
        _setTranslationBannerDismissedState(e, i) {
            const n = this._getTranslationBannerDismissStates() || {};
            n[e] = i,
            this._setPreference(t.TriggerKeys.TranslatedConversationBannerDismissStates, JSON.stringify(n))
        }
        _getTranslationBannerDismissStatesForConversation(e) {
            const t = this._getTranslationBannerDismissStates();
            let i;
            return i = t && t[e] ? t[e] : {
                inCallBannerBeenDismissed: !1,
                conversationBannerBeenDismissed: !1
            },
            i
        }
        _getTranslationBannerDismissStates() {
            const e = this._getPreference(t.TriggerKeys.TranslatedConversationBannerDismissStates)
              , i = e ? _.parseJsonErrorable(e) : void 0;
            if (!o.isError(i))
                return i || void 0;
            h.error(g.LogTraceArea.PreferencesStores, "Failed to parse translationBannerDismissStates preference.")
        }
        getConversationTranslationBannerDismissState(e) {
            const t = this._getTranslationBannerDismissStates();
            return !(!t || !t[e]) && t[e].conversationBannerBeenDismissed
        }
        getInCallTranslationBannerDismissState(e) {
            const t = this._getTranslationBannerDismissStates();
            return !(!t || !t[e]) && t[e].inCallBannerBeenDismissed
        }
        deleteTranslationBannerDismissStates(e) {
            const i = this._getTranslationBannerDismissStates();
            i && !o.isEmpty(i) && (i[e] && delete i[e],
            this._setPreference(t.TriggerKeys.TranslatedConversationBannerDismissStates, JSON.stringify(i)))
        }
        setInterstitialForLargeGroupRinglessCallsShown(e) {
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.InterstitialForLargeGroupRinglessCallsShown, i)
        }
        getInterstitialForLargeGroupRinglessCallsShown() {
            return "true" === this._getPreference(t.TriggerKeys.InterstitialForLargeGroupRinglessCallsShown)
        }
        setInterstitialForSmallGroupRinglessCallsShown(e) {
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.InterstitialForSmallGroupRinglessCallsShown, i)
        }
        getInterstitialForSmallGroupRinglessCallsShown() {
            return "true" === this._getPreference(t.TriggerKeys.InterstitialForSmallGroupRinglessCallsShown)
        }
        setEnableSubtitlesForAllCalls(e) {
            h.track(new S.EnableSubtitlesForAllCallsSetting(!!e)),
            h.log(g.LogTraceArea.PreferencesStores, "Setting enable subtitles for all calls, enabled=" + !!e);
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.EnableSubtitlesForAllCalls, i)
        }
        getEnableSubtitlesForAllCalls() {
            return "true" === this._getPreference(t.TriggerKeys.EnableSubtitlesForAllCalls)
        }
        setOnlyShowSubtitlesForOtherParticipants(e) {
            h.track(new S.OnlyShowSubtitlesForOtherParticipants(!!e)),
            h.log(g.LogTraceArea.PreferencesStores, "Setting only show subtitles for other participants, enabled=" + !!e);
            const i = e ? "true" : "false";
            this._setPreference(t.TriggerKeys.OnlyShowSubtitlesForOtherParticipants, i)
        }
        getOnlyShowSubtitlesForOtherParticipants() {
            return "false" !== this._getPreference(t.TriggerKeys.OnlyShowSubtitlesForOtherParticipants)
        }
        setCallTranslatorBotSpokenLanguageLocale(e) {
            h.log(g.LogTraceArea.PreferencesStores, "Setting call translator bot spoken language locale: " + e),
            this._setPreference(t.TriggerKeys.CallTranslatorBotSpokenLanguageLocale, e),
            a.default.getS4LCMCFeatures().enableMessageTranslation && this._setPreference(t.TriggerKeys.CallTranslatorBotSubtitleLanguageLocale, e)
        }
        getCallTranslatorBotSpokenLanguageLocale() {
            const e = a.default.getS4LCMCFeatures().enableMessageTranslation ? this.getCallTranslatorBotSubtitleLanguageLocale() : this._getPreference(t.TriggerKeys.CallTranslatorBotSpokenLanguageLocale)
              , i = a.default.getS4LCMCFeatures().callTranslatorBotConfig.languageSupport.speech || []
              , n = !o.isEmpty(e) && i.some(t=>t === e)
              , s = i.find(e=>e === m.getLocale()) || "en-US";
            return n ? e : s
        }
        setCallTranslatorBotTranslationVoice(e) {
            h.log(g.LogTraceArea.PreferencesStores, "Setting call translator bot translation voice: " + e),
            this._setPreference(t.TriggerKeys.CallTranslatorBotTranslationVoice, e)
        }
        getCallTranslatorBotTranslationVoice() {
            return this._getPreference(t.TriggerKeys.CallTranslatorBotTranslationVoice)
        }
        setCallTranslatorBotSubtitleLanguageLocale(e) {
            h.log(g.LogTraceArea.PreferencesStores, "Setting call translator bot subtitle language locale: " + e),
            this._setPreference(t.TriggerKeys.CallTranslatorBotSubtitleLanguageLocale, e)
        }
        getCallTranslatorBotSubtitleLanguageLocale() {
            return this._getPreference(t.TriggerKeys.CallTranslatorBotSubtitleLanguageLocale)
        }
        setCallTranslatorPrivacyConsent(e) {
            const i = e ? "true" : "false";
            h.log(g.LogTraceArea.PreferencesStores, "Setting call privacy consent to: " + e),
            this._setPreference(t.TriggerKeys.CallTranslatorPrivacyConsent, i)
        }
        getCallTranslatorPrivacyConsent() {
            return "true" === this._getPreference(t.TriggerKeys.CallTranslatorPrivacyConsent)
        }
        setUserAppearancePreferencesForCurrentPlatform(e) {
            const i = this._getUserAppearancePreferences() || {}
              , n = b.getSkypePlatformId().toString()
              , s = o.get(i, n) || {}
              , r = o.defaults({}, e, s)
              , a = o.defaults({}, {
                [n]: r
            }, i);
            this._setPreference(t.TriggerKeys.UserAppearancePreferences, a)
        }
        _getUserAppearancePreferences() {
            const e = this._getPreference(t.TriggerKeys.UserAppearancePreferences)
              , i = e ? _.parseJsonErrorable(e) : {};
            return o.isError(i) ? (h.error(g.LogTraceArea.PreferencesStores, "Failed to parse appearance preferences.", i, e),
            {}) : i
        }
        getUserAppearancePreferencesForCurrentPlatform() {
            const e = b.getSkypePlatformId().toString();
            return o.get(this._getUserAppearancePreferences(), e) || {}
        }
        getUserAppearancePreferencesForCurrentPlatformNoSubscription() {
            const e = b.getSkypePlatformId().toString();
            return o.get(this._getUserAppearancePreferences(), e) || {}
        }
        _gotUpdatedProps(e) {
            o.each(e, e=>{
                this._preferencesPendingPersist.hasOwnProperty(e) && (e === t.TriggerKeys.ReadReceiptsEnabled && h.log(g.LogTraceArea.ReadReceipts, "_gotUpdatedProps enabled=" + c.default.getUserProperty(e)),
                delete this._preferencesPendingPersist[e])
            }
            ),
            this._preferencesPersisted = o.clone(c.default.getUserProperties()),
            this._computePreferences()
        }
        _computePreferences() {
            const e = o.extend({}, this._getDefaultPrefs(), this._preferencesPersisted, this._preferencesPendingPersist)
              , t = o.difference(o.keys(this._preferencesComputed), o.keys(e))
              , i = o.filter(o.keys(e), t=>!p.default(this._preferencesComputed[t], e[t]));
            this._preferencesComputed = e,
            i.length > 0 && this.trigger(t.concat(i)),
            this._setUserRingIfRequired()
        }
        setMyUserRing(e, t) {
            return l.serviceSetMyUserRing(e).then(()=>{
                if (this.fetchAndUpdateProperties(!0),
                t)
                    return l.serviceSetMyProperty(u.UserProps.ChatServiceRingChangedManually, d.UserRingChangedManually)
            }
            )
        }
        _getPreference(e) {
            return this._preferencesComputed[e]
        }
        _setPreference(e, t) {
            return this._isEqualToPersistedPreferences(e, t) ? r.Resolved() : (t = o.isObject(t) ? JSON.stringify(t) : t,
            this._preferencesPendingPersist[e] = t,
            this._computePreferences(),
            this._setPrefOnServer(e, t))
        }
        _isEqualToPersistedPreferences(e, t) {
            if (o.isObject(t)) {
                if (!o.isUndefined(this._preferencesPendingPersist[e])) {
                    const i = _.parseJsonWithDefault(this._preferencesPendingPersist[e], {});
                    return p.default(i, t)
                }
                const i = _.parseJsonWithDefault(this._preferencesPersisted[e], {});
                return p.default(i, t)
            }
            return this._preferencesPersisted[e] === t || this._preferencesPendingPersist[e] === t
        }
        _getPreferenceBool(e) {
            return "true" === this._getPreference(e)
        }
        _setPreferenceBool(e, t) {
            return this._setPreference(e, t ? "true" : "")
        }
        _setPrefOnServer(e, t) {
            return f.EnsureStarted(l).then(()=>{
                l.serviceSetMyProperty(e, t)
            }
            )
        }
        _getDefaultPrefs() {
            return {
                alertsLastReadTime: 0,
                scheduleNextCallDisplayedTimes: 0,
                scheduleNextCallCurrentSuccessfulCalls: 0
            }
        }
    }
    ;
    n.__decorate([s.disableWarnings], v.prototype, "requestUWPToMSIXMigration", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.AlertsLastReadTime)], v.prototype, "getAlertsLastReadTime", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CaptureFirstRunLevel)], v.prototype, "getCaptureFirstRunLevel", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CaptureMarkupTooltipDismissed)], v.prototype, "getCaptureMarkupTooltipDismissed", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CoachMarksSeen)], v.prototype, "getCoachMarksSeen", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CortanaOptedIn)], v.prototype, "getCortanaOptedIn", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.SuggestionsEnabled)], v.prototype, "getSuggestionsEnabled", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CelebrationNotificationLastShownTime)], v.prototype, "getCelebrationNotificationLastShownTime", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.Locale)], v.prototype, "getLocale", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.Market)], v.prototype, "getMarket", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.Timezone)], v.prototype, "getTimezone", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CortanaOptInHandledTime)], v.prototype, "getCortanaOptInHandledTime", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.EmergencyCallDefaultCountryChanged)], v.prototype, "getEmergencyCallDefaultCountry", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.IntegrationAuthConsent)], v.prototype, "getIntegrationConsent", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.IntegrationIdAuthStatePairs)], v.prototype, "getIntegrationIdAuthStatePairs", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.InviteSharingDisabled)], v.prototype, "getInviteSharingDisabled", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.IsSetupWizardCompleted)], v.prototype, "getOnboardingUserProfileScreenSeen", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.IsSetupWizardCompleted)], v.prototype, "getIsSetupWizardCompleted", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.ScheduleNextCallDisplayedTimes)], v.prototype, "getScheduleNextCallDisplayedTimes", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.ScheduleNextCallCurrentSuccessfulCalls)], v.prototype, "getScheduleNextCallCurrentSuccessfulCalls", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.MediaEditorFirstRunLevel)], v.prototype, "getMediaEditorFirstRunLevel", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.ReactionPushNotificationsEnabled)], v.prototype, "getReactionNotificationsEnabled", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.LastEngagementProcessedMessageOnWebTimestamp)], v.prototype, "getLastEngagementProcessedMessageOnWebTimestamp", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.ReadReceiptsEnabled)], v.prototype, "getReadReceiptsEnabled", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.DisplayUrlPreviewsEnabled)], v.prototype, "getDisplayUrlPreviews", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.ReadReceiptsUserPreference)], v.prototype, "getUserPreferenceForReadReceipts", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CallNotificationsWhileDND)], v.prototype, "getCallNotificationsWhileDNDEnabled", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.ChatNotificationsWhileDND)], v.prototype, "getChatNotificationsWhileDNDEnabled", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.NotifyOnPresenceChange)], v.prototype, "getNotifyOnPresenceChangeEnabled", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.PresentDNDSetting)], v.prototype, "getPresentDNDSettingStatus", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.ScheduledCallReminders)], v.prototype, "getScheduledCallReminders", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.ScheduledCallBannerDismissStates)], v.prototype, "getScheduledCallsBannerDismissStates", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.Reactions)], v.prototype, "getReactions", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.TranslatedConversationBannerDismissStates)], v.prototype, "getConversationTranslationBannerDismissState", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.TranslatedConversationBannerDismissStates)], v.prototype, "getInCallTranslationBannerDismissState", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.InterstitialForLargeGroupRinglessCallsShown)], v.prototype, "getInterstitialForLargeGroupRinglessCallsShown", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.InterstitialForSmallGroupRinglessCallsShown)], v.prototype, "getInterstitialForSmallGroupRinglessCallsShown", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.EnableSubtitlesForAllCalls)], v.prototype, "getEnableSubtitlesForAllCalls", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.OnlyShowSubtitlesForOtherParticipants)], v.prototype, "getOnlyShowSubtitlesForOtherParticipants", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CallTranslatorBotSpokenLanguageLocale)], v.prototype, "getCallTranslatorBotSpokenLanguageLocale", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CallTranslatorBotTranslationVoice)], v.prototype, "getCallTranslatorBotTranslationVoice", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CallTranslatorBotSubtitleLanguageLocale)], v.prototype, "getCallTranslatorBotSubtitleLanguageLocale", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.CallTranslatorPrivacyConsent)], v.prototype, "getCallTranslatorPrivacyConsent", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.UserAppearancePreferences)], v.prototype, "getUserAppearancePreferencesForCurrentPlatform", null),
    n.__decorate([s.disableWarnings], v.prototype, "getUserAppearancePreferencesForCurrentPlatformNoSubscription", null),
    v = n.__decorate([s.AutoSubscribeStore], v),
    t.default = new v
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(33)
      , s = i(1)
      , r = i(499)
      , a = i(0)
      , l = i(13)
      , c = i(7)
      , d = i(10)
      , u = i(2)
      , g = i(141)
      , h = i(3)
      , p = i(32)
      , m = i(435)
      , S = i(55)
      , C = i(22)
      , y = i(97)
      , f = i(214)
      , _ = i(802)
      , b = i(107)
      , v = i(21)
      , T = i(9);
    let P = class extends l.StoreBase {
        constructor() {
            super(),
            this._usingStackNavContext = !1,
            this._skipCompositeNavigation = !1,
            this._numberOfTrackedRejoinCallOperations = 0,
            this._stackNavigationContexts = {},
            v.RegisterStartupable(this, "NavigationStateStore", [p.default, C.default])
        }
        startup() {
            return h.log(u.LogTraceArea.Navigation, "NavigationStateStore start"),
            this._usingStackNavContext = C.default.isUsingStackNavigationContext(),
            this._stackNavigationContexts[b.StackNavigatorId.Mobile] = new S.SimpleSplitNavigationContext({}),
            C.default.subscribe(()=>{
                const e = C.default.isUsingStackNavigationContext();
                this._usingStackNavContext !== e && (this._usingStackNavContext = e,
                this._convertNavContext())
            }
            , C.TriggerKeys.NavContextType),
            c.Resolved()
        }
        navigateToView(e, t) {
            if (h.log(u.LogTraceArea.Navigation, "NavigationStateStore.navigateToView, causeId: " + t),
            !(e instanceof S.CallNavigationContext)) {
                const e = this.getCurrentNavigationStack();
                -1 !== s.findIndex(e, e=>e instanceof S.CallNavigationContext) && (h.log(u.LogTraceArea.Navigation, "NavigationStateStore.navigateToView, StackNavigatorId.Mobile navigating while in a call, causeId: " + t),
                r.default.onCallScreenClose())
            }
            this.stackNavigateToView(e, void 0, b.StackNavigatorId.Mobile, b.StackNavigationType.Push, !0, t)
        }
        compositeCommitNavigationUpdates(e, t=[y.CompositeNavigationType.Default], i, n) {
            if (m.dismissAll(n),
            this._skipCompositeNavigation)
                return;
            i && (h.log(u.LogTraceArea.Navigation, "NavigationStateStore.compositeCommitNavigationUpdates, navigating while in a call, causeId: " + e),
            r.default.onCallScreenClose()),
            this._skipCompositeNavigation = this._shouldSkipNextCompositeNavigation(),
            g.default.indicateBusyOperation();
            const o = f.default.navigationTypesToTriggerKeys(t);
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.compositeCommitNavigationUpdates  triggerKeys: " + o + " causeId: " + e),
            this.trigger(o)
        }
        modalNavigateToView(e, t, i, n, s, a, l) {
            const c = this.getCompositeCallVisible(n);
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.modalNavigateToView: navigator: " + o.pii.Omit(i) + " isCallVisible: " + c + " causeId: " + l),
            c && (h.log(u.LogTraceArea.Navigation, "NavigationStateStore.modalNavigateToView, navigating while in a call, causeId: " + l),
            r.default.onCallScreenClose()),
            this.stackNavigateToView(e, t, i, s, !1, l),
            a && this.trigger(y.TriggerKeys.ModalNavigation)
        }
        desktopSidebarNavigateToView(e, t, i, n, s, r) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.desktopSidebarNavigateToView: navigator: " + o.pii.Omit(i) + " causeId: " + r),
            this.stackNavigateToView(e, t, i, n, !1, r),
            s && this.trigger(y.TriggerKeys.DesktopSidebar)
        }
        stackNavigateToView(e, t, i, n, r, a) {
            if (m.dismissAll(),
            e)
                if (n === b.StackNavigationType.PopToRoot)
                    t === e ? this._stackNavContext(i).setNavStack([]) : this._stackNavContext(i).setNavStack([e]);
                else {
                    const t = this.getCurrentNavigationStack(i, !0).slice(0);
                    let o = !1;
                    for (let n = t.length - 1; n >= 0; n--)
                        if (f.default.considerNavContextsEqual(e, t[n])) {
                            this._stackNavContext(i).setNavStack(t.slice(0, n + 1)),
                            o = !0;
                            break
                        }
                    if (!o) {
                        const o = s.last(t);
                        n === b.StackNavigationType.Replace || o && f.default.shouldNavigationContextPartReplaceExisting(o, e) ? (t[t.length - 1] = e,
                        this._stackNavContext(i).setNavStack(t)) : t.length >= 1 && o && f.default.shouldResetToHubAndConversation(o, e) ? this._stackNavContext(i).setNavStack([t[0], e]) : (t.push(e),
                        this._stackNavContext(i).setNavStack(t))
                    }
                }
            t && this._stackNavContext(i).setMasterContext(t),
            g.default.indicateBusyOperation(),
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.stackNavigateToView: navigator: " + o.pii.Omit(i) + " navigationType: " + n + " navContext: " + (e ? e.id : "none") + " shouldTrigger: " + r + " causeId: " + a),
            r && this.trigger(y.TriggerKeys.NavigationAndTabs)
        }
        stackNavNavigateBack(e, t, i=b.StackNavigatorId.Mobile, n=y.CompositeNavigationType.Default) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.stackNavNavigateBack navigator: " + o.pii.Omit(i) + " causeId: " + t);
            const s = this._stackNavContext(i);
            if (s.getBackStack().length <= 1)
                return h.log(u.LogTraceArea.Navigation, "NavigationStateStore: returning (stackNavNavigateBack already at the root) causeId: " + t),
                !1;
            if (s.navigateBack(),
            !e) {
                h.log(u.LogTraceArea.Navigation, "NavigationStateStore.stackNavNavigateBack triggering update. causeId: " + t);
                const e = f.default.navigationTypesToTriggerKeys([n]);
                this.trigger(e)
            }
            return !0
        }
        clearModalNavStack(e=b.StackNavigatorId.DesktopModal, t, i, n) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.clearModalNavStack navigator: " + o.pii.Omit(e) + " shouldTrigger: " + t + " causeId: " + n),
            this.clearNavStack(e, !1, i, n),
            t && this.trigger(y.TriggerKeys.ModalNavigation)
        }
        clearDesktopSidebarNavStack(e=b.StackNavigatorId.DesktopSidebar, t, i, n) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.clearDesktopSidebarNavStack navigator: " + o.pii.Omit(e) + " shouldTrigger: " + t + " causeId: " + n),
            this.clearNavStack(e, !1, i, n),
            t && this.trigger(y.TriggerKeys.DesktopSidebar)
        }
        clearNavStack(e=b.StackNavigatorId.Mobile, t, i, n) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.clearNavStack navigator: " + o.pii.Omit(e) + " shouldTrigger: " + t + " causeId: " + n),
            this._stackNavContext(e).clearNavStack(),
            i && this._stackNavContext(e).clearMasterContext(),
            t && this.trigger(y.TriggerKeys.NavigationAndTabs)
        }
        flattenNavStack(e=b.StackNavigatorId.Mobile) {
            if (h.log(u.LogTraceArea.Navigation, "NavigationStateStore.flattenNavStack, navigator: " + o.pii.Omit(e)),
            this._usingStackNavContext) {
                const t = this.getCurrentNavigationStack(e, !0);
                t.length > 2 && (this._stackNavContext(e).setNavStack([t[0], t[t.length - 1]]),
                h.log(u.LogTraceArea.Navigation, "NavigationStateStore.flattenNavStack"),
                this.trigger(y.TriggerKeys.NavigationAndTabs))
            }
        }
        reduceNavStack(e, t=b.StackNavigatorId.Mobile, i=!1) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.reduceNavStack, navigator: " + o.pii.Omit(t));
            let n = !1;
            const r = this.getCurrentNavigationStack(t, !0)
              , a = r.length
              , l = s.filter(r, (t,o)=>{
                let r = !0;
                return s.each(e, e=>{
                    if (!i || o !== a - 1)
                        switch (e) {
                        case S.ConversationMediaViewerPanelNavigationId:
                            t instanceof S.ConversationMediaViewerPanelContext && (n = !0,
                            r = !1);
                            break;
                        case S.SearchNavigationId:
                            t instanceof S.SearchNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case S.AlertsHubNavigationId:
                            t instanceof S.AlertsHubNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case S.PurchaseContinuationId + "credit":
                        case S.PurchaseContinuationId + "calling":
                            t instanceof S.PurchaseContinuationNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case S.MobileHubNavigationId:
                            t instanceof S.MobileHubNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case S.JoiningGuestNavigatorId:
                            t instanceof S.JoiningGuestScreenContext && (n = !0,
                            r = !1);
                            break;
                        case S.AddContactPanelId:
                            t instanceof S.AddContactPanelNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case S.PromptPermissionsNavigatorId:
                            t instanceof S.PromptPermissionContext && (n = !0,
                            r = !1);
                            break;
                        case _.PollCreationPanelNavigationId:
                            t instanceof _.PollCreationPanelNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case _.PollSummaryPanelNavigationId:
                            t instanceof _.PollSummaryPanelNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case _.PollVotersListPanelNavigationId:
                            t instanceof _.PollVotersListPanelNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case S.PSTNDialerPanelId:
                            t instanceof S.PSTNDialerNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case S.CallFailurePromptId:
                            t instanceof S.CallFailurePromptContext && (n = !0,
                            r = !1);
                            break;
                        case S.SmsFailurePromptId:
                            t instanceof S.SmsFailurePromptContext && (n = !0,
                            r = !1);
                            break;
                        case S.TasterPostCallPanelId:
                            t instanceof S.TasterPostCallPanelContext && (n = !0,
                            r = !1);
                            break;
                        case S.SkypeNumberPanel:
                            t instanceof S.SkypeNumberPanelNavigationContext && (n = !0,
                            r = !1);
                            break;
                        case S.SkypeNumberPanelPurchaseFlow:
                            t instanceof S.SkypeNumberPanelPurchaseFlowNavigationContext && (n = !0,
                            r = !1);
                            break;
                        default:
                            h.warn(u.LogTraceArea.Navigation, "NavigationStateStore: navigationId not handled " + e)
                        }
                }
                ),
                r
            }
            );
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore: reduceNavStack: " + n),
            n && (this._stackNavContext(t).setNavStack(l),
            this.trigger(y.TriggerKeys.NavigationAndTabs))
        }
        collapseSplitNavContext(e=b.StackNavigatorId.Mobile, t, i) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.collapseSplitNavContext collapsed: " + t + " navigator: " + o.pii.Omit(e) + " causeId: " + i);
            const n = this._stackNavContext(e);
            n.isCollapsed() !== t && (n.collapse(t),
            this.trigger(y.TriggerKeys.NavigationAndTabs))
        }
        isSplitNavStackCollapsed(e=b.StackNavigatorId.Mobile) {
            return this._stackNavContext(e).isCollapsed()
        }
        isDesktopSplitNavStackCollapsedForRootViewId(e) {
            const t = f.default.mainContentNavigatorIdForRootViewId(e);
            return this.isSplitNavStackCollapsed(t)
        }
        isDesktopSplitNavStackCollapsedForRootViewIdNoSubscription(e) {
            const t = f.default.mainContentNavigatorIdForRootViewId(e);
            return this.isSplitNavStackCollapsed(t)
        }
        getCurrentNavigationStack(e=b.StackNavigatorId.Mobile, t=!1) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.getCurrentNavigationStack navigator: " + o.pii.Omit(e));
            const i = this._stackNavContext(e).getNavStack();
            return i.length || e !== b.StackNavigatorId.Mobile || (h.log(u.LogTraceArea.Navigation, "NavigationStateStore: No stack navigation context yet. Returning default."),
            i.push(new S.MobileHubNavigationContext({
                hubTab: S.HubTab.Recents
            })),
            this._stackNavContext(e).setNavStack(i)),
            this._stackNavContext(e).getNavStack(t).slice(0)
        }
        getCurrentNavigationBackStack(e=b.StackNavigatorId.Mobile, t=!1) {
            return h.log(u.LogTraceArea.Navigation, "NavigationStateStore.getCurrentNavigationBackStack navigator: " + o.pii.Omit(e)),
            this._stackNavContext(e).getBackStack(t).slice(0)
        }
        getCurrentStackNavigationContext(e=b.StackNavigatorId.Mobile, t=!0) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.getCurrentStackNavigationContext navigator: " + o.pii.Omit(e));
            const i = this._stackNavContext(e);
            return t ? i.clone(!0) : i
        }
        getCurrentModalStackNavigationContext(e=b.StackNavigatorId.DesktopModal, t=!0) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.getCurrentModalStackNavigationContext navigator: " + o.pii.Omit(e));
            const i = this._stackNavContext(e);
            return t ? i.clone(!0) : i
        }
        getCurrentSidebarStackNavigationContext(e=b.StackNavigatorId.DesktopSidebar, t=!0) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.getCurrentSidebarStackNavigationContext navigator: " + o.pii.Omit(e));
            const i = this._stackNavContext(e);
            return t ? i.clone(!0) : i
        }
        getCurrentStackNavigationContextNoSubscription(e=b.StackNavigatorId.Mobile, t=!0) {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore.getCurrentStackNavigationContextNoSubscription navigator: " + o.pii.Omit(e));
            const i = this._stackNavContext(e);
            return t ? i.clone(!0) : i
        }
        isConversationOnTopOfNavStack(e) {
            const t = s.last(this.getCurrentNavigationStack());
            if (t && t instanceof S.MobileContentPanelNavigationContext) {
                const i = t.getConversationContext();
                return !!i && e === i.state.conversationId
            }
            return !1
        }
        isCallOnTopOfNavStack(e) {
            const t = s.last(this.getCurrentNavigationStack());
            return !!(t && t instanceof S.CallNavigationContext) && e === t.state.callId
        }
        isHubOnTopOfNavStack() {
            const e = s.last(this.getCurrentNavigationStack());
            return !!e && e instanceof S.MobileHubNavigationContext
        }
        isHubOnTopOfNavStackNoSubscription() {
            const e = s.last(this._stackNavContext(b.StackNavigatorId.Mobile).getNavStack());
            return !!e && e instanceof S.MobileHubNavigationContext
        }
        getCurrentHubTab() {
            const e = s.find(this._stackNavContext(b.StackNavigatorId.Mobile).getNavStack(), e=>e instanceof S.MobileHubNavigationContext);
            return e ? e.state.hubTab : S.HubTab.Recents
        }
        navigateToHubTab(e=S.HubTab.Recents) {
            this._usingStackNavContext;
            let t, i = this._stackNavContext(b.StackNavigatorId.Mobile).getNavStack();
            const n = s.findLastIndex(i, e=>e instanceof S.MobileHubNavigationContext);
            -1 !== n ? (t = i[n],
            t.state.hubTab !== e && (t = t.clone(!1),
            t.state.hubTab = e),
            i = i.slice(0, n)) : t = new S.MobileHubNavigationContext({
                hubTab: e
            }),
            i.push(t),
            this._stackNavContext(b.StackNavigatorId.Mobile).setNavStack(i),
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore: navigateToHubTab: " + e + "usingStackNavContext: " + this._usingStackNavContext),
            this.trigger([y.TriggerKeys.NavigationAndTabs, y.TriggerKeys.HubTab])
        }
        getCompositeMainStageNavViewMode(e) {
            const t = f.default.mainContentNavigatorIdForRootViewId(e)
              , i = this.getCurrentStackNavigationContext(t, !1).getNavStack();
            return f.default.mainStageViewModeForNavContext(s.last(i))
        }
        getCompositeMainStageNavViewModeNoSubscription(e) {
            const t = f.default.mainContentNavigatorIdForRootViewId(e)
              , i = this.getCurrentStackNavigationContextNoSubscription(t, !1).getNavStack();
            return f.default.mainStageViewModeForNavContext(s.last(i))
        }
        getCompositeCallVisible(e) {
            return this._getCompositeCallVisible(e)
        }
        getCompositeCallVisibleNoSubscription(e) {
            return this._getCompositeCallVisible(e)
        }
        shouldDisplayRightNavigation(e) {
            return this._shouldDisplayRightNavigation(e)
        }
        shouldDisplayRightNavigationNoSubscription(e) {
            return this._shouldDisplayRightNavigation(e)
        }
        isFindPanelShowing(e) {
            const t = this._getRightBarNavigationContext(e);
            return t instanceof S.FindPanelNavigationContext || t instanceof S.InAppBrowserNavigationContext
        }
        isInAppBrowserShowingNoSubscription(e) {
            return this._getRightBarNavigationContext(e)instanceof S.InAppBrowserNavigationContext
        }
        isGalleryShowing(e) {
            return this._getRightBarNavigationContext(e)instanceof S.GalleryNavigationContext
        }
        isSubtitlesShowing(e) {
            return this._getRightBarNavigationContext(e)instanceof S.SubtitlesNavigationContext
        }
        isRightSideBarShowing(e) {
            return this._stackNavContext(f.default.rightSideBarNavigatorIdForRootViewId(e)).getNavStack().length > 0
        }
        isSearchShowing(e) {
            return this._leftNavViewMode(e) === S.LeftNavViewMode.Search
        }
        isCallChatShowing(e) {
            if (this._leftNavViewMode(e) === S.LeftNavViewMode.ConversationInCall)
                return !0;
            const t = this._stackNavContext(f.default.rightSideBarNavigatorIdForRootViewId(e));
            return s.last(t.getNavStack())instanceof S.ConversationInCallNavigationContext
        }
        isLeftPanelShowing(e) {
            return this._leftNavViewMode(e) !== S.LeftNavViewMode.None
        }
        setNewStartingNavigationContext(e, t) {
            const i = T.newCauseId();
            h.log(u.LogTraceArea.Navigation, "NavigationActions.setNewStartingNavigationContext, causeId: " + i);
            {
                const n = f.default.maybeUpdateDesktopNavContext(e(), i)
                  , o = f.default.mainContentNavigatorIdForRootViewId(t);
                this._stackNavContext(o).setNavStack([n])
            }
        }
        updateMobileHubContextForStackNavContext(e, t) {
            const i = this._stackNavContext(b.StackNavigatorId.Mobile).getNavStack();
            if (i.length) {
                const n = s.findLastIndex(i, e=>e instanceof S.MobileHubNavigationContext);
                if (-1 !== n) {
                    const o = i[n].clone(!0);
                    o.state.hubTab = e,
                    i[n] = o,
                    this._stackNavContext(b.StackNavigatorId.Mobile).setNavStack(i),
                    h.log(u.LogTraceArea.Navigation, "NavigationStateStore: updateMobileHubContextForStackNavContext, hubTab: " + e),
                    t && this.trigger(y.TriggerKeys.NavigationAndTabs),
                    this.trigger(y.TriggerKeys.HubTab)
                }
            }
        }
        dangerouslyGetActiveConversationContextOrigin(e) {
            const t = this.getActiveConversationContext(e);
            return (t ? t.state.origin : void 0) || u.NavigationConversationOrigin.Unknown
        }
        getActiveContextConversationId(e) {
            let t;
            const i = this.getActiveConversationContext(e);
            return i && (t = i.state.contextConversationId),
            t
        }
        getActiveContextConversationIdNoSubsription(e) {
            let t;
            const i = this.getActiveConversationContext(e);
            return i && (t = i.state.contextConversationId),
            t
        }
        getActiveConversationId(e) {
            let t;
            const i = this.getActiveConversationContext(e);
            return i && (t = i.state.conversationId),
            t
        }
        getActiveCallConversationId(e) {
            if (this._usingStackNavContext) {
                const e = s.last(this._stackNavContext(b.StackNavigatorId.Mobile).getNavStack());
                if (e instanceof S.CallNavigationContext)
                    return e.state.conversationMri
            } else {
                const e = f.default.mainContentNavigatorIdForRootViewId(d.MainRootViewId)
                  , t = this.getCurrentStackNavigationContext(e, !1).getNavStack()
                  , i = s.last(t);
                if (i instanceof S.CallNavigationContext)
                    return i.state.conversationMri
            }
        }
        getActiveConversationContext(e) {
            return this._usingStackNavContext ? this._getStackConversationContext(this._stackNavContext(b.StackNavigatorId.Mobile)) : this._getCompositeConversationContext(e)
        }
        wrapWithTrackingForRejoinCallOperation(e) {
            return ++this._numberOfTrackedRejoinCallOperations,
            1 === this._numberOfTrackedRejoinCallOperations && this.trigger(y.TriggerKeys.RejoinCallOperation),
            e.finally(()=>{
                --this._numberOfTrackedRejoinCallOperations,
                0 === this._numberOfTrackedRejoinCallOperations && this.trigger(y.TriggerKeys.RejoinCallOperation)
            }
            )
        }
        isTrackingRejoinCallOperation() {
            return this._numberOfTrackedRejoinCallOperations > 0
        }
        isContactPanelVisible() {
            const e = this.getCurrentStackNavigationContext(b.StackNavigatorId.DesktopContent, !1);
            if (e instanceof S.RootCompositeSplitViewContext) {
                const t = e.getLeftNavigationContext();
                if (t)
                    return t.state.viewMode === S.LeftNavViewMode.Contacts
            }
            return !1
        }
        _leftNavViewMode(e) {
            const t = f.default.mainContentNavigatorIdForRootViewId(e);
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore._leftNavViewMode navigator: " + o.pii.Omit(t));
            const i = this._stackNavContext(t);
            if (i instanceof S.RootCompositeSplitViewContext) {
                const e = i.getLeftNavigationContext();
                return e ? e.state.viewMode : void 0
            }
            if (i.getMasterContext()instanceof S.ConversationInCallNavigationContext)
                return S.LeftNavViewMode.ConversationInCall
        }
        _shouldSkipNextCompositeNavigation() {
            const e = this.getCurrentStackNavigationContext(b.StackNavigatorId.DesktopContent, !1).getNavStack();
            return s.last(e)instanceof S.ForcedUpgradeContext
        }
        _convertCompositeNavContextToStackNavContextStack() {
            return h.log(u.LogTraceArea.Navigation, "NavigationStateStore._convertCompositeNavContextToStackNavContextStack"),
            a.Modal.dismissAll(),
            a.Popup.dismissAll(),
            f.default.convertCompositeNavContextToStackNavContextStack(this._stackNavContext(b.StackNavigatorId.DesktopContent))
        }
        _convertStackNavContextToCompositeSplitNavContext() {
            return h.log(u.LogTraceArea.Navigation, "NavigationStateStore._convertStackNavContextToCompositeSplitNavContext"),
            a.Modal.dismissAll(),
            a.Popup.dismissAll(),
            f.default.convertStackNavContextToCompositeSplitNavContext(this._stackNavContext(b.StackNavigatorId.Mobile))
        }
        _convertNavContext() {
            h.log(u.LogTraceArea.Navigation, "NavigationStateStore._convertNavContext, usingStackNavContext: " + this._usingStackNavContext),
            this._usingStackNavContext ? (this._stackNavigationContexts[b.StackNavigatorId.Mobile] = this._convertCompositeNavContextToStackNavContextStack(),
            delete this._stackNavigationContexts[b.StackNavigatorId.DesktopContent],
            delete this._stackNavigationContexts[b.StackNavigatorId.DesktopSidebar]) : (this._stackNavigationContexts[b.StackNavigatorId.DesktopContent] = this._convertStackNavContextToCompositeSplitNavContext(),
            this._stackNavigationContexts[b.StackNavigatorId.Mobile] = new S.SimpleSplitNavigationContext({})),
            this.trigger()
        }
        _stackNavContext(e) {
            if (!this._stackNavigationContexts[e]) {
                const t = T.newCauseId();
                h.log(u.LogTraceArea.Navigation, "NavigationActions._stackNavContext, creating new context, causeId: " + t),
                e === b.StackNavigatorId.DesktopContent ? this._stackNavigationContexts[e] = f.default.createRootCompositeSplitViewContext(t) : this._stackNavigationContexts[e] = new S.SimpleSplitNavigationContext({})
            }
            return this._stackNavigationContexts[e]
        }
        _getCompositeCallVisible(e) {
            const t = f.default.mainContentNavigatorIdForRootViewId(e);
            return this._getCompositeCallVisibleWithNavigatorId(t)
        }
        _getCompositeCallVisibleWithNavigatorId(e) {
            const t = this.getCurrentStackNavigationContext(e, !1).getNavStack();
            return s.last(t)instanceof S.CallNavigationContext
        }
        _shouldDisplayRightNavigation(e) {
            const t = f.default.mainContentNavigatorIdForRootViewId(e)
              , i = this.getCurrentStackNavigationContext(t, !1).getNavStack()
              , n = s.last(i);
            return n instanceof S.CallNavigationContext || n instanceof S.DesktopContentPanelNavigationContext || n instanceof S.WelcomeScreenContext || n instanceof S.CallingDebugPanelNavigationContext
        }
        _getStackConversationContext(e) {
            const t = s.last(e.getNavStack());
            if (t instanceof S.MobileContentPanelNavigationContext)
                return t.getConversationContext()
        }
        _getCompositeConversationContext(e) {
            const t = f.default.mainContentNavigatorIdForRootViewId(e)
              , i = this.getCurrentStackNavigationContext(t, !1).getNavStack()
              , n = s.last(i);
            if (n instanceof S.DesktopContentPanelNavigationContext)
                return n.getConversationContext()
        }
        _getRightBarNavigationContext(e) {
            const t = this._stackNavContext(f.default.rightSideBarNavigatorIdForRootViewId(e));
            return s.last(t.getNavStack())
        }
    }
    ;
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "isSplitNavStackCollapsed", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "isDesktopSplitNavStackCollapsedForRootViewId", null),
    n.__decorate([l.disableWarnings], P.prototype, "isDesktopSplitNavStackCollapsedForRootViewIdNoSubscription", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "getCurrentNavigationStack", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "getCurrentNavigationBackStack", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "getCurrentStackNavigationContext", null),
    n.__decorate([l.autoSubscribeWithKey([y.TriggerKeys.ModalNavigation, y.TriggerKeys.NavigationAndTabs])], P.prototype, "getCurrentModalStackNavigationContext", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.DesktopSidebar)], P.prototype, "getCurrentSidebarStackNavigationContext", null),
    n.__decorate([l.disableWarnings], P.prototype, "getCurrentStackNavigationContextNoSubscription", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "isConversationOnTopOfNavStack", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "isCallOnTopOfNavStack", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "isHubOnTopOfNavStack", null),
    n.__decorate([l.disableWarnings], P.prototype, "isHubOnTopOfNavStackNoSubscription", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.HubTab)], P.prototype, "getCurrentHubTab", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "getCompositeMainStageNavViewMode", null),
    n.__decorate([l.disableWarnings], P.prototype, "getCompositeMainStageNavViewModeNoSubscription", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "getCompositeCallVisible", null),
    n.__decorate([l.disableWarnings], P.prototype, "getCompositeCallVisibleNoSubscription", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "shouldDisplayRightNavigation", null),
    n.__decorate([l.disableWarnings], P.prototype, "shouldDisplayRightNavigationNoSubscription", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.DesktopSidebar)], P.prototype, "isFindPanelShowing", null),
    n.__decorate([l.disableWarnings], P.prototype, "isInAppBrowserShowingNoSubscription", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.DesktopSidebar)], P.prototype, "isGalleryShowing", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.DesktopSidebar)], P.prototype, "isSubtitlesShowing", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.DesktopSidebar)], P.prototype, "isRightSideBarShowing", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "isSearchShowing", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "isCallChatShowing", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "isLeftPanelShowing", null),
    n.__decorate([l.disableWarnings], P.prototype, "dangerouslyGetActiveConversationContextOrigin", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "getActiveContextConversationId", null),
    n.__decorate([l.disableWarnings], P.prototype, "getActiveContextConversationIdNoSubsription", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "getActiveConversationId", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.NavigationAndTabs)], P.prototype, "getActiveCallConversationId", null),
    n.__decorate([l.autoSubscribeWithKey(y.TriggerKeys.RejoinCallOperation)], P.prototype, "isTrackingRejoinCallOperation", null),
    P = n.__decorate([l.AutoSubscribeStore], P);
    let A = new P;
    t.default = A
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(164)
      , s = i(0)
      , r = i(7)
      , a = i(556)
      , l = i(58)
      , c = i(10)
      , d = i(2)
      , u = i(3)
      , g = i(4)
      , h = i(22)
      , p = i(34)
      , m = i(162);
    class S {
        static showWithOptions(e) {
            S._show(e.title, e.message, e.dialogAccessibilityTitle, e.buttons, e.rootViewId, e.useHorizontalButtons, e.useDesktopDialog, e.leftAlignContent, e.useFocussedWindowFallback, e.suppressModalDismissalEvents, e.onClickOutside)
        }
        static showErrorAlert(e, t) {
            this.showErrorAlertWithOptions({
                errorText: e,
                dialogAccessibilityTitle: e,
                rootViewId: t,
                hideTitle: !1
            })
        }
        static showErrorAlertWithOptions(e) {
            u.warn(d.LogTraceArea.GenericUnsafe, "AlertUtils: Error dialog: " + p.dev_unknownOmit(e.errorText)),
            S.showOkAlertWithOptions({
                title: e.hideTitle ? "" : g.getString("Global.ErrorDialogTagline"),
                message: e.errorText,
                dialogAccessibilityTitle: e.dialogAccessibilityTitle || g.getString("Global.ErrorTitle"),
                rootViewId: e.rootViewId
            })
        }
        static showOkAlertWithOptions(e) {
            const t = {
                text: g.getString("Global.OkLabel"),
                isSubmit: !0
            };
            S.showWithOptions(Object.assign(Object.assign({}, e), {
                buttons: [t]
            }))
        }
        static showOKAlert(e, t, i, n) {
            S.showOkAlertWithOptions({
                title: e,
                dialogAccessibilityTitle: t || e,
                message: t,
                rootViewId: i,
                useFocussedWindowFallback: n
            })
        }
        static showOKAlertWithPromise(e, t, i, n, o) {
            const s = r.Defer()
              , a = {
                text: g.getString("Global.OkLabel"),
                isSubmit: !0,
                onPress: ()=>{
                    s.resolve(void 0)
                }
            };
            return S.showWithOptions({
                title: e,
                message: t,
                buttons: [a],
                rootViewId: i,
                useFocussedWindowFallback: n,
                dialogAccessibilityTitle: o || t || e
            }),
            s.promise()
        }
        static showConfirmationAlert(e, t, i, n, o, s, r, a, l) {
            const c = [{
                text: g.getString("Global.CancelLabel"),
                onPress: a,
                isCancel: !0
            }, {
                text: i,
                onPress: n,
                isSubmit: !0
            }];
            S.showWithOptions({
                title: e,
                dialogAccessibilityTitle: r || t || e,
                message: t,
                buttons: c,
                rootViewId: o,
                useFocussedWindowFallback: s,
                onClickOutside: l
            })
        }
        static showNatively(e, t, i, o) {
            {
                const i = t || e;
                if (o && o.length)
                    if (window.confirm(i)) {
                        const e = n.find(o, e=>!!e.isSubmit);
                        e && e.onPress && e.onPress()
                    } else {
                        const e = n.find(o, e=>!!e.isCancel);
                        e && e.onPress && e.onPress()
                    }
                else
                    window.alert(i)
            }
        }
        static dismissCurrentCustomAlert(e) {
            const t = "customdialog" + this._customDialogId;
            l.default.dismissModal(t, e)
        }
        static showCustomAlertWithOptions(e) {
            this.dismissCurrentCustomAlert(e.rootViewId),
            this._customDialogId++;
            const t = "customdialog" + this._customDialogId
              , i = !e.requireUserAction;
            let n;
            if (e.imageSource) {
                const t = s.Styles.createImageStyle({
                    width: e.imageSource.width,
                    height: e.imageSource.height,
                    borderRadius: e.imageSource.imageBorderRadiusValue,
                    alignSelf: e.imageSource.centerImageInAlert ? "center" : void 0
                }, !1);
                n = s.createElement(s.Image, {
                    style: t,
                    resizeMode: e.imageResizeMode || c.ImageResizeModeEnum.cover,
                    source: e.imageSource.source
                })
            }
            const o = s.createElement(m.SimpleDialog, {
                dialogId: t,
                key: t,
                closeOnClickOutside: i,
                onClickOutside: i ? e.onClickOutside : void 0,
                text: e.dialogTitle,
                accessibilityLabel: e.accessibilityTitle || e.dialogTitle,
                simpleContent: e.dialogText,
                buttons: e.buttons,
                buttonAlignment: e.useHorizontalButtons ? a.SimpleDialogButtonAlignment.HorizontalStack : void 0,
                leftAlignContent: e.leftAlignContentText,
                suppressModalDismissalEvents: e.suppressModalDismissalEvents
            }, n, e.content);
            l.default.showModal(o, t, {
                rootViewId: e.rootViewId
            })
        }
        static _show(e, t, i, n, s, r, a, l, g, p, m) {
            const C = o=>{
                const s = S._decorateAlertButtons(n);
                S.showCustomAlertWithOptions({
                    dialogTitle: e,
                    dialogText: t,
                    buttons: s,
                    useHorizontalButtons: r,
                    accessibilityTitle: i,
                    leftAlignContentText: l,
                    rootViewId: o,
                    onClickOutside: m,
                    suppressModalDismissalEvents: p
                })
            }
            ;
            h.default.isUsingSplitViewNoSubscription() && s === c.MainRootViewId && g ? o.default.getLastActiveSplitView().then(e=>{
                const t = e && e.isActive ? e.id : c.MainRootViewId;
                C(t)
            }
            , e=>{
                u.log(d.LogTraceArea.Navigation, "getLastActiveSplitView() failed. error: " + e),
                C(c.MainRootViewId)
            }
            ) : C(s)
        }
        static _decorateAlertButtons(e) {
            return n.map(e, e=>(e.isCancel ? e.style = "cancel" : "cancel" === e.style && (e.isCancel = !0),
            e))
        }
    }
    t.default = S,
    S._customDialogId = 0
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(2562)
      , r = i(6)
      , a = i(10)
      , l = i(8);
    class c extends o.ComponentBase {
        _buildState(e, t) {
            return {
                useRXIndicator: e.useRXIndicator || !r.default.getS4LUiFeatures().jsonAnimationEnabled
            }
        }
        render() {
            if (this.state.useRXIndicator) {
                let e;
                switch (this.props.size) {
                case a.SXActivityIndicatorSize.ExtraSmall:
                    e = "tiny";
                    break;
                case a.SXActivityIndicatorSize.Medium:
                    e = "medium";
                    break;
                case a.SXActivityIndicatorSize.Large:
                    e = "large";
                    break;
                default:
                case a.SXActivityIndicatorSize.Small:
                    e = "small"
                }
                return n.createElement(n.ActivityIndicator, {
                    style: this.props.style,
                    size: e,
                    color: this.props.tintColor || l.Color.white,
                    deferTime: this.props.deferTimeMs
                })
            }
            {
                const e = {
                    size: this.props.size,
                    tintColor: this.props.tintColor,
                    deferTimeMs: this.props.deferTimeMs,
                    style: this.props.style
                };
                return n.createElement(s.default, Object.assign({}, e))
            }
        }
    }
    t.default = c
}
, , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(222)
      , s = i(326)
      , r = i(4);
    class a {
        static add(e, t=0, i=0, n=0, o=0, s=0) {
            return e + 1e3 * (t * a._secondsPerYear + i * a._secondsPerDay + n * a._secondsPerHour + o * a._secondsPerMinute + s)
        }
        static fromUnixMilliseconds(e) {
            return new Date(e)
        }
        static getMidnight(e) {
            const t = a.fromUnixMilliseconds(e);
            return t.setHours(0, 0, 0, 0),
            t.getTime()
        }
        static isSameDay(e, t) {
            const i = a.fromUnixMilliseconds(e)
              , n = a.fromUnixMilliseconds(t);
            return i.getDate() === n.getDate() && i.getMonth() === n.getMonth() && i.getFullYear() === n.getFullYear()
        }
        static getDisplayDateStringShort(e) {
            const t = s.getDateShort(a.fromUnixMilliseconds(e));
            return o.unix(e / 1e3).calendar(null, {
                sameDay: "[" + r.getString("DateTimeRelative.Today") + "]",
                nextDay: "[" + r.getString("DateTimeRelative.Tomorrow") + "]",
                nextWeek: "[" + t + "]",
                lastDay: "[" + r.getString("DateTimeRelative.Yesterday") + "]",
                lastWeek: "[" + t + "]",
                sameElse: "[" + t + "]"
            })
        }
        static getDisplayDateString(e) {
            const t = a.fromUnixMilliseconds(e)
              , i = s.getDayName(t)
              , n = s.getDateLong(t);
            return o.unix(e / 1e3).calendar(null, {
                sameDay: "[" + r.getString("DateTimeRelative.Today") + "]",
                nextDay: "[" + r.getString("DateTimeRelative.Tomorrow") + "]",
                nextWeek: "[" + i + "]",
                lastDay: "[" + r.getString("DateTimeRelative.Yesterday") + "]",
                lastWeek: "[" + i + "]",
                sameElse: "[" + n + "]"
            })
        }
        static getDisplayDateStringFull(e) {
            return s.getDateLong(a.fromUnixMilliseconds(e))
        }
        static getDisplayDateStringDayMonthYearFormat(e) {
            return s.getDateShort(a.fromUnixMilliseconds(e))
        }
        static getDisplayDateTimeString(e) {
            const t = a.fromUnixMilliseconds(e)
              , i = s.getTimeShort(t)
              , n = s.getDateShort(t)
              , l = s.getDayName(t);
            return o.unix(e / 1e3).calendar(null, {
                sameDay: "[" + r.getString("DateTimeRelative.TodayAt", {
                    time: i
                }) + "]",
                nextDay: "[" + r.getString("DateTimeRelative.TomorrowAt", {
                    time: i
                }) + "]",
                nextWeek: "[" + r.getString("DateTimeRelative.DayAtTime", {
                    day: l,
                    time: i
                }) + "]",
                lastDay: "[" + r.getString("DateTimeRelative.YesterdayAt", {
                    time: i
                }) + "]",
                lastWeek: "[" + r.getString("DateTimeRelative.DayAtTime", {
                    day: l,
                    time: i
                }) + "]",
                sameElse: "[" + n + "]"
            })
        }
        static getAbsoluteDisplayDateTimeString(e) {
            const t = a.fromUnixMilliseconds(e)
              , i = s.getTimeShort(t)
              , n = s.getDateShort(t);
            return "[" + r.getString("DateTimeRelative.DayAtTime", {
                day: n,
                time: i
            }) + "]"
        }
        static getDisplayDateTimeMixedString(e, t=!1) {
            const i = a.fromUnixMilliseconds(e)
              , n = s.getTimeShort(i)
              , l = s.getDateShort(i)
              , c = s.getDayName(i)
              , d = t ? c : s.getDayAbbreviatedName(i);
            return o.unix(e / 1e3).calendar(null, {
                sameDay: "[" + n + "]",
                nextDay: "[" + r.getString("DateTimeRelative.TomorrowAt", {
                    time: n
                }) + "]",
                nextWeek: "[" + r.getString("DateTimeRelative.DayAtTime", {
                    day: c,
                    time: n
                }) + "]",
                lastDay: "[" + d + "]",
                lastWeek: "[" + d + "]",
                sameElse: "[" + l + "]"
            })
        }
        static getDisplayTimeString(e) {
            return s.getTimeShort(a.fromUnixMilliseconds(e))
        }
        static getRelativeDisplayDateTimeString(e) {
            return o.updateLocale("en", {
                relativeTime: {
                    future: r.getString("DateTimeRelative.Future", {
                        time: "%s"
                    }),
                    past: r.getString("DateTimeRelative.Past", {
                        time: "%s"
                    }),
                    s: r.getString("DateTimeRelative.Seconds"),
                    ss: r.getString("DateTimeRelative.Seconds"),
                    m: r.getString("DateTimeRelative.Minute"),
                    mm: r.getString("DateTimeRelative.Minutes", {
                        count: "%d"
                    }),
                    h: r.getString("DateTimeRelative.Hour"),
                    hh: r.getString("DateTimeRelative.Hours", {
                        count: "%d"
                    }),
                    d: r.getString("DateTimeRelative.Day"),
                    dd: r.getString("DateTimeRelative.Days", {
                        count: "%d"
                    }),
                    M: r.getString("DateTimeRelative.Month"),
                    MM: r.getString("DateTimeRelative.Months", {
                        count: "%d"
                    }),
                    y: r.getString("DateTimeRelative.OverAYear"),
                    yy: r.getString("DateTimeRelative.OverAYear")
                }
            }),
            o.unix(e / 1e3).fromNow()
        }
        static getLongMonthAndYearString(e) {
            return s.getMonthAndYear(a.fromUnixMilliseconds(e))
        }
        static getElapsedTimePartsFromS(e) {
            if (!isFinite(e))
                return {
                    hours: 0,
                    minutes: 0,
                    seconds: 0
                };
            const t = e % 3600
              , i = t % 60;
            return {
                hours: Math.floor(e / 3600),
                minutes: Math.floor(t / 60),
                seconds: Math.floor(i)
            }
        }
        static getElapsedTimeStringFromS(e) {
            const t = this.getElapsedTimePartsFromS(e)
              , i = (t.seconds > 9 ? "" : "0") + t.seconds;
            if (t.hours > 0) {
                const e = (t.minutes > 9 ? "" : "0") + t.minutes;
                return t.hours + ":" + e + ":" + i
            }
            return t.minutes + ":" + i
        }
        static getElapsedTimeStringFromMs(e) {
            const t = Math.round(e / 1e3);
            return this.getElapsedTimeStringFromS(t)
        }
        static getElapsedTimeStringInMsFromMs(e) {
            const t = e % 1e3
              , i = Math.floor(e / 1e3);
            return this.getElapsedTimeStringFromS(i) + "." + t
        }
        static getUnixMillisecondsTimestamp(e) {
            return new Date(e).getTime()
        }
        static getFormattedDuration(e, t=!1) {
            let i = "";
            const n = Math.floor(e / 86400)
              , o = 86400 * n
              , s = Math.floor((e - o) / 3600)
              , a = 3600 * s
              , l = Math.floor((e - o - a) / 60)
              , c = e - o - a - 60 * l
              , d = s >= 1
              , u = l >= 1
              , g = c >= 0;
            return n >= 1 ? i = r.getString(t ? "DateTimeDuration.AccessibleDays" : "DateTimeDuration.Days", {
                days: n
            }) : d && u && g ? i = r.getString(t ? "DateTimeDuration.AccessibleHoursMinutesSeconds" : "DateTimeDuration.HoursMinutesSeconds", {
                hours: s,
                minutes: l,
                seconds: c
            }) : d && u ? i = r.getString(t ? "DateTimeDuration.AccessibleHoursMinutes" : "DateTimeDuration.HoursMinutes", {
                hours: s,
                minutes: l
            }) : d && g ? i = r.getString(t ? "DateTimeDuration.AccessibleHoursSeconds" : "DateTimeDuration.HoursSeconds", {
                hours: s,
                seconds: c
            }) : u && g ? i = r.getString(t ? "DateTimeDuration.AccessibleMinutesSeconds" : "DateTimeDuration.MinutesSeconds", {
                minutes: l,
                seconds: c
            }) : u ? i = r.getString(t ? "DateTimeDuration.AccessibleMinutes" : "DateTimeDuration.Minutes", {
                minutes: l
            }) : g ? i = r.getString(t ? "DateTimeDuration.AccessibleSeconds" : "DateTimeDuration.Seconds", {
                seconds: c
            }) : d && (i = r.getString(t ? "DateTimeDuration.AccessibleHours" : "DateTimeDuration.Hours", {
                hours: s
            })),
            i
        }
        static isTimestampValid(e) {
            return o(e, o.ISO_8601, !0).isValid()
        }
        static isTimestampPassed(e, t=!0) {
            const i = n.attempt(()=>this.getUnixMillisecondsTimestamp(e));
            return n.isError(i) ? t : Date.now() > i
        }
        static isDateTimePassed(e) {
            return Date.now() > e
        }
        static isNowWithinDateTimes(e, t) {
            const i = Date.now();
            return e < i && i < t
        }
        static getPostedTime(e, t=!1) {
            const i = Math.floor((Date.now() - e) / 1e3);
            if (i < 60)
                return t ? r.getString("HighlightsItemView.MediaPostedJustNowLowerCase") : r.getString("HighlightsItemView.MediaPostedJustNow");
            const n = Math.floor(i / 60);
            if (n < 60)
                return r.getString("HighlightsItemView.MediaPostedMinutes", {
                    count: n
                });
            const o = Math.floor(i / 3600);
            if (o < 24)
                return r.getString("HighlightsItemView.MediaPostedHours", {
                    count: o
                });
            const s = Math.floor(i / 86400);
            return r.getString("HighlightsItemView.MediaPostedDays", {
                count: s
            })
        }
        static getDaysDifferenceToNow(e) {
            const t = Math.floor((Date.now() - e) / 1e3);
            return Math.floor(t / 86400)
        }
        static roundToNextHour(e) {
            const t = a.fromUnixMilliseconds(e);
            return t.setHours(t.getHours() + 1),
            t.setMinutes(0),
            t.setSeconds(0),
            t.getTime()
        }
        static convertDateToUTC(e) {
            return new Date(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds())
        }
        static getAbbreviatedDatetimeString(e) {
            const t = a.fromUnixMilliseconds(e);
            return r.getString("DateTimeRelative.AbbreviatedDateTime", {
                day: s.getDayAbbreviatedName(t),
                monthDate: s.getMonthAndDateAbbreviatedName(t),
                year: s.getYear(t),
                time: a.getDisplayTimeString(e)
            })
        }
        static getConditionalDateTimeString(e) {
            const t = -1 * a.getDaysDifferenceToNow(e);
            return t <= 2 && t >= 0 ? a.getDisplayDateTimeString(e) : a.getAbbreviatedDatetimeString(e)
        }
        static getLastSyncTime(e) {
            const t = Math.floor((Date.now() - e) / 1e3);
            if (t < 60)
                return r.getString("UserSettingsPanel.SyncedJustNow");
            const i = Math.floor(t / 60);
            if (i < 60)
                return r.getString("UserSettingsPanel.SyncedMinutesAgo", {
                    count: i
                });
            const n = Math.floor(t / 3600);
            if (n < 24)
                return r.getString("UserSettingsPanel.SyncedHoursAgo", {
                    count: n
                });
            const o = Math.floor(t / 86400);
            return 1 === o ? r.getString("UserSettingsPanel.SyncedYesterday") : o < 31 ? r.getString("UserSettingsPanel.SyncedDaysAgo", {
                count: o
            }) : a.getDisplayDateStringShort(e)
        }
        static convertPeriodToMiliseconds(e) {
            if (!e)
                return;
            const [t,i] = n.split(e, ".")
              , s = Number(t);
            return n.includes(this.getSupportedMomentPeriods(), i) && n.isInteger(s) ? o(0).add(s, i).valueOf() : void 0
        }
        static getSupportedMomentPeriods() {
            return ["years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds"]
        }
    }
    a._secondsPerMinute = 60,
    a._secondsPerHour = 60 * a._secondsPerMinute,
    a._secondsPerDay = 24 * a._secondsPerHour,
    a._secondsPerYear = 365 * a._secondsPerDay,
    a.getFullDateTimeString = e=>{
        const t = a.fromUnixMilliseconds(e);
        return r.getString("DateTimeRelative.DayAtTime", {
            day: s.getDateLong(t),
            time: s.getTimeShort(t)
        })
    }
    ,
    e.exports = a
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1492)
      , s = i(0)
      , r = i(65)
      , a = i(6)
      , l = i(58)
      , c = i(143)
      , d = i(2)
      , u = i(3)
      , g = i(124)
      , h = i(4)
      , p = i(22)
      , m = (i(47),
    i(310),
    i(8))
      , S = i(1493)
      , C = i(2603)
      , y = i(226)
      , f = i(234)
      , _ = i(59)
      , b = i(92)
      , v = i(135)
      , T = i(9);
    var P;
    !function(e) {
        e[e.Default = 0] = "Default",
        e[e.End = 1] = "End"
    }(P = t.CancelButtonPosition || (t.CancelButtonPosition = {})),
    t.SXActionMenuCancel = "cancel";
    class A {
        static showWithOptions(e) {
            return u.log(d.LogTraceArea.GenericUnsafe, "SXActionMenu showWithOptions"),
            this._show(e.id, e.config, e.getMenuItems, e.handleMenuCommand, e.menuTitle, e.cancelButtonTitleIOS || h.getString("Global.CancelLabel"), e.onDismiss, e.delay, e.destructiveButtonIndex, e.maintainAnchor, e.maintainTitleForDesktop, e.rootViewId, e.accessibilityAnnouncement, void 0, e.invokingEvent)
        }
        static showGroupWithOptions(e) {
            return u.log(d.LogTraceArea.GenericUnsafe, "SXActionMenu showGroupWithOptions"),
            this._showMenuGroup(e.id, e.config, e.getMenuGroups, e.handleMenuCommand, e.cancelButtonTitleIOS, e.onDismiss, e.delay, e.destructiveButtonIndex, e.maintainAnchor, e.maintainTitleForMobile, e.rootViewId, e.accessibilityAnnouncement, e.invokingEvent)
        }
        static showWithActionMenuConfig(e) {
            if (u.log(d.LogTraceArea.GenericUnsafe, "SXActionMenu showWithActionMenuConfig"),
            e.useAlertForDesktop) {
                const t = []
                  , i = {
                    text: e.options.cancelButtonTitle || h.getString("Global.CancelLabel"),
                    onPress: e.onCancel,
                    isCancel: !0
                };
                e.options.cancelButtonPosition !== P.End && t.push(i),
                n.each(e.options.buttons, (i,n)=>{
                    t.push({
                        text: i.text,
                        onPress: ()=>{
                            e.callback(i.command)
                        }
                        ,
                        isSubmit: n === e.options.destructiveButtonIndex
                    })
                }
                ),
                e.options.cancelButtonPosition === P.End && t.push(i);
                const o = e.options.title || e.options.message || ""
                  , s = e.options.title ? e.options.message : void 0;
                return r.default.showWithOptions({
                    title: o,
                    message: s,
                    buttons: t,
                    dialogAccessibilityTitle: e.options.dialogAccessibilityTitle || o,
                    rootViewId: e.rootViewId,
                    suppressModalDismissalEvents: e.suppressModalDismissalEvents,
                    onClickOutside: e.onCancel
                }),
                !0
            }
            {
                const t = {
                    anchor: e.options.anchor,
                    positionPriorities: e.options.positionPriorities,
                    useTheme: !0
                };
                return A._show(this.actionMenuId(), t, ()=>e.options.buttons, e.callback, e.options.message || e.options.title, e.options.cancelButtonTitle, void 0, 0, e.options.destructiveButtonIndex, e.maintainAnchor, void 0, e.rootViewId, e.accessibilityAnnouncement, e.onCancel, e.invokingEvent)
            }
        }
        static dismiss(e, t) {
            l.default.dismissPopup(e, t)
        }
        static menuId(e) {
            return this._popupId++,
            (e || "popup") + this._popupId
        }
        static actionMenuId(e) {
            return this._actionMenuId++,
            (e || "actionmenu") + this._actionMenuId
        }
        static _show(e, t, i, o, s, r, a, c, d, u, g, h, p, m, S) {
            const C = i(t);
            if (n.isEmpty(C))
                return !1;
            l.default.validatePopupOffset(t.popupOffset);
            return A._presentMenu(()=>{
                {
                    const i = {
                        key: "menu",
                        title: g ? s : void 0,
                        menuItems: C
                    };
                    return this._renderWebActionMenu(e, t, o, [i], a, c, d, h)
                }
            }
            , p)
        }
        static _showMenuGroup(e, t, i, o, s, r, a, c, d, u, g, h, p) {
            const m = i(t);
            if (n.isEmpty(m))
                return !1;
            l.default.validatePopupOffset(t.popupOffset);
            return A._presentMenu(()=>this._renderWebActionMenu(e, t, o, m, r, a, void 0, g), h)
        }
        static _registerElectronContextMenuItemSelectedHandler(e, t, i, n, o) {
            this._electronMenuItemSelectedEventConfigs[o] = {
                id: e,
                config: i,
                handleMenuCommand: n,
                rootViewId: t
            }
        }
        static _registerELectronContextMenuClosedHandler(e, t) {
            this._electronMenuCloseEventConfigs[e] = t
        }
        static _registerElectronContextMenuListeners() {
            window.electronApi.ipcProvider.contextMenu.menuItemClick.once(e=>{
                if (!this._electronMenuItemSelectedEventConfigs[e.requestId])
                    return;
                const {id: t, config: i, handleMenuCommand: n, rootViewId: o} = this._electronMenuItemSelectedEventConfigs[e.requestId];
                A._handleWebMenuCommand(e.command, t, i, n, o),
                delete this._electronMenuItemSelectedEventConfigs[e.requestId]
            }
            ),
            window.electronApi.ipcProvider.contextMenu.menuClose.once(e=>{
                const t = this._electronMenuCloseEventConfigs[e.requestId];
                t ? (t(),
                delete this._electronMenuCloseEventConfigs[e.requestId]) : u.error(d.LogTraceArea.GenericUnsafe, "Close menu request with uknown requestId: " + e.requestId),
                window.electronApi.ipcProvider.contextMenu.menuClose.removeAllListeners(),
                window.electronApi.ipcProvider.contextMenu.menuItemClick.removeAllListeners()
            }
            )
        }
        static _presentMenu(e, t) {
            const i = T.newCauseId();
            return u.log(d.LogTraceArea.GenericUnsafe, "SXActionMenu._presentMenu, causeId: " + i),
            t && (u.log(d.LogTraceArea.GenericUnsafe, "SXActionMenu._presentMenu with accessibility annoucement, causeId: " + i),
            s.Accessibility.announceForAccessibility(t)),
            e()
        }
        static _renderMobileActionMenu(e, i, s, r, a, l, c, d, u, g) {
            const m = {
                anchor: u || !p.default.isUsingStackNavigationContextNoSubscription() || _.isTablet() ? e.anchor : void 0,
                buttons: s,
                title: r,
                destructiveButtonIndexIOS: d,
                cancelButtonTitleIOS: a || h.getString("Global.CancelLabel")
            }
              , S = n=>{
                const o = n.toLowerCase() === t.SXActionMenuCancel ? t.SXActionMenuCancel : n;
                i(o, e),
                l && l(),
                g && o === t.SXActionMenuCancel && g()
            }
            ;
            return c ? n.delay(()=>o.ActionMenu.show(m, S), c) : o.ActionMenu.show(m, S),
            !0
        }
        static _renderWebActionMenu(e, t, i, o, r, a, c, d) {
            let u, g, p;
            const _ = t.colorThemeOverride || b.colorThemeNoSubscription();
            if (t.colors)
                u = t.colors.strokeColor,
                g = t.colors.fillColor,
                p = t.colors.textColor;
            else if (t.useTheme) {
                const e = f.themeColorsForTheme(_);
                u = v.isDarkTheme(_) ? e.dividerColor : void 0,
                g = e.popoverBackgroundColor,
                p = e.primaryTextColor
            } else
                u = v.isDarkTheme(_) ? f.themeColorsForTheme(_).dividerColor : m.Color.black,
                g = m.Color.black,
                p = m.Color.white;
            const T = {
                getAnchor: ()=>t.anchor(),
                renderPopup: (r,a,l,m)=>{
                    let f;
                    if (1 === o.length) {
                        const r = o[0];
                        if (!n.isUndefined(c)) {
                            const e = r.menuItems[c];
                            e && (e.isDestructiveButton = !0)
                        }
                        f = s.createElement(S.default, Object.assign({}, t.menuStyles, {
                            title: r.title,
                            menuItems: r.menuItems,
                            onSelectItem: n=>this._handleWebMenuCommand(n, e, t, i, d),
                            menuTextStyles: r.menuTextStyles || s.Styles.createTextStyle({
                                color: p
                            }, !1),
                            menuButtonStyles: r.menuButtonStyles,
                            focusFirst: !0
                        }))
                    } else
                        o.length > 1 && (f = s.createElement(C.default, Object.assign({}, t.menuStyles, {
                            sections: o,
                            onSelectItem: n=>this._handleWebMenuCommand(n, e, t, i, d),
                            menuTextStyles: s.Styles.createTextStyle({
                                color: p
                            }, !1)
                        })));
                    return t.popupMaxWidth && (f = s.createElement(s.View, {
                        style: s.Styles.createViewStyle({
                            maxWidth: t.popupMaxWidth
                        }, !1)
                    }, f)),
                    s.createElement(y, {
                        disableContextMenu: t.popupDisableContextMenu,
                        anchorPosition: r,
                        anchorOffset: a,
                        popupWidth: l,
                        popupHeight: m,
                        strokeColor: u,
                        fillColor: g,
                        offset: t.popupOffset,
                        popupBeakHeight: t.popupBeakSize ? t.popupBeakSize.height : void 0,
                        popupBeakWidth: t.popupBeakSize ? t.popupBeakSize.width : void 0,
                        popupAccessibilityTitle: h.getString("Global.MoreOptions"),
                        skipPopupAutoFocus: !0
                    }, f)
                }
                ,
                positionPriorities: t.positionPriorities || ["top", "bottom"],
                onDismiss: r,
                dismissIfShown: !0,
                rootViewId: d
            }
              , P = ()=>l.default.showPopup(T, e, a);
            return P()
        }
        static _renderElectronActionMenu(e, t, i, o, r, l) {
            const h = n.filter(t, e=>e.menuItems.length > 0);
            if (!h.length)
                return !1;
            const p = e.colorThemeOverride || b.colorThemeNoSubscription()
              , m = v.isDarkTheme(p)
              , S = []
              , C = a.default.getS4LUiFeaturesNoSubscription().enableHotKeysPanel;
            let y, f;
            n.each(h, (t,i)=>{
                const o = n.map(t.menuItems, t=>{
                    return {
                        text: (o = t.text,
                        o.replace("&", "&&")),
                        group: i,
                        type: t.isCheckbox ? "checkbox" : void 0,
                        checked: t.selected,
                        disabled: t.disabled,
                        accelerator: C && t.shortcut ? g.default.acceleratorForKeyboardShortcut(t.shortcut) : void 0,
                        command: t.command,
                        icon: (n = t.icon,
                        n && e.useTheme && m ? "Dark" + n : n)
                    };
                    var n, o
                }
                );
                S.push(...o)
            }
            );
            const _ = l;
            !_ || n.isUndefined(_.pageX) || n.isUndefined(_.pageY) || (y = _.pageX,
            f = _.pageY);
            const T = ()=>{
                if (u.log(d.LogTraceArea.GenericUnsafe, "SXActionMenu.showContextMenu, requestId: " + i),
                s.UserInterface.isNavigatingWithKeyboard()) {
                    const t = e.anchor();
                    if (a.default.getS4LUiFeaturesNoSubscription().useNativeContextMenus && t)
                        return void c.default.measureLayoutRelativeToWindow(e.anchor).then(e=>{
                            const t = e ? {
                                x: Math.round(e.x + e.width / 2),
                                y: Math.round(e.y + e.height / 2),
                                zoomFactor: window.electronApi.getZoomFactor()
                            } : void 0
                              , n = {
                                menuOptions: S,
                                options: t,
                                requestId: i,
                                windowId: o
                            };
                            u.log(d.LogTraceArea.GenericUnsafe, "SXActionMenu - Navigated with keyboard. Calling IPC method showGenericPopupMenu(), requestId: " + i),
                            window.electronApi.ipcProvider.contextMenu.showGenericPopupMenu.send(n)
                        }
                        , e=>{
                            u.warn(d.LogTraceArea.GenericUnsafe, "SXActionMenu not measured: " + e.toString())
                        }
                        )
                }
                const t = {
                    x: y,
                    y: f,
                    zoomFactor: window.electronApi.getZoomFactor()
                }
                  , n = {
                    menuOptions: S,
                    options: t,
                    requestId: i,
                    windowId: o
                };
                u.log(d.LogTraceArea.GenericUnsafe, "SXActionMenu - Navigated with mouse. Calling IPC method showGenericPopupMenu(), requestId: " + i),
                window.electronApi.ipcProvider.contextMenu.showGenericPopupMenu.send(n)
            }
            ;
            return r ? n.delay(T, r) : T(),
            !0
        }
        static _handleWebMenuCommand(e, t, i, n, o) {
            A.dismiss(t, o),
            n(e, i)
        }
        static _flattenMenu(e) {
            const t = [];
            return n.each(e, e=>t.push(...e.menuItems)),
            t
        }
    }
    A._popupId = 0,
    A._actionMenuId = 0,
    A._electronMenuCloseEventConfigs = {},
    A._electronMenuItemSelectedEventConfigs = {},
    t.default = A
}
, function(e, t, i) {
    "use strict";
    var n;
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const o = i(26)
      , s = i(1)
      , r = i(13)
      , a = i(7)
      , l = i(1407)
      , c = i(48)
      , d = i(2)
      , u = i(3)
      , g = i(38)
      , h = i(21)
      , p = i(9);
    let m = n = class extends r.StoreBase {
        constructor() {
            super(),
            h.RegisterStartupable(this, "InternalDataStore")
        }
        startup() {
            return c.default.internal_getAllInternalData().then(e=>{
                this._internalData = {},
                this._exclusiveData = {},
                s.each(e, e=>{
                    e && (this._internalData[e.id] = e.value)
                }
                )
            }
            )
        }
        static _deepFreeze(e) {
            if ("object" == typeof e) {
                for (let t in e)
                    e[t] && n._deepFreeze(e[t]);
                Object.freeze(e)
            }
        }
        getData(e) {
            const t = s.cloneDeep(this._internalData[e]);
            return this._exclusiveData[e],
            t
        }
        getDataExclusive(e) {
            const t = this._internalData[e];
            return this._exclusiveData[e],
            this._exclusiveData[e] = !0,
            delete this._internalData[e],
            t
        }
        putData(e, t, i, n) {
            if (n = n || p.newCauseId(),
            !h.HasStarted(this)) {
                const t = new l.CalledBeforeStartupError("InternalDataStore","putData","key=" + e);
                return a.Rejected(t)
            }
            if (h.HasStarted(this) && !this._exclusiveData[e] && g.default(this._internalData[e], t))
                return u.log(d.LogTraceArea.SQLiteClient, `no change to data. key ${e} causeId: ${n}`),
                a.Resolved();
            return (i ? i.internal_putInternalData(e, t) : c.default.internal_putInternalData(e, t)).then(()=>{
                delete this._internalData[e],
                this._exclusiveData[e] || (this._internalData[e] = t,
                this.trigger(e))
            }
            )
        }
        getKeys() {
            return s.keys(this._internalData)
        }
        deleteKeys(e, t) {
            return (t ? t.internal_deleteInternalData(e) : c.default.internal_deleteInternalData(e)).then(()=>{
                s.each(e, e=>{
                    delete this._internalData[e]
                }
                ),
                this.trigger(e)
            }
            )
        }
    }
    ;
    o.__decorate([r.autoSubscribe, o.__param(0, r.key)], m.prototype, "getData", null),
    o.__decorate([r.autoSubscribe, o.__param(0, r.key)], m.prototype, "getDataExclusive", null),
    m = n = o.__decorate([l.Startupable, r.AutoSubscribeStore], m),
    t.InternalDataStore = m,
    t.default = new m
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(70)
      , r = i(0)
      , a = i(13)
      , l = i(7)
      , c = i(89)
      , d = i(6)
      , u = i(2)
      , g = i(3)
      , h = i(4)
      , p = i(32)
      , m = i(1428)
      , S = i(21)
      , C = i(19)
      , y = i(18)
      , f = i(25)
      , _ = i(9);
    t.TriggerKeys = {
        NotificationsPrompt: "NotificationsPrompt"
    };
    let b = class extends a.StoreBase {
        constructor() {
            super(),
            this._systemPermissionStatus = {},
            this._prePermissionStatus = {},
            S.RegisterStartupable(this, "PermissionsStore", [p.default])
        }
        startup() {
            const e = p.default.getUserPreferencesLocal();
            this._updatePrePermissionStatus(e.cameraPrePromptStatus, f.PermissionType.Camera, !1),
            this._updatePrePermissionStatus(e.cameraRollPrePromptStatus, f.PermissionType.CameraRoll, !1),
            this._updatePrePermissionStatus(e.writeCameraRollPrePromptStatus, f.PermissionType.WriteCameraRoll, !1),
            this._updatePrePermissionStatus(e.microphonePrePromptStatus, f.PermissionType.Microphone, !1),
            this._updatePrePermissionStatus(e.contactsPrePromptStatus, f.PermissionType.Contacts, !1),
            this._updatePrePermissionStatus(e.notificationsPrePromptStatus, f.PermissionType.Notifications, !1),
            this._updatePrePermissionStatus(e.locationPrePromptStatus, f.PermissionType.Location, !1),
            this._updatePrePermissionStatus(e.locationAlwaysPrePromptStatus, f.PermissionType.LocationAlways, !1),
            this._updatePrePermissionStatus(e.sendSmsPrePromptStatus, f.PermissionType.SendSms, !1),
            this._updatePrePermissionStatus(e.receiveSmsPrePromptStatus, f.PermissionType.ReceiveSms, !1),
            this._updatePrePermissionStatus(e.readSmsPrePromptStatus, f.PermissionType.ReadSms, !1),
            this._updatePrePermissionStatus(e.phoneStatePermissionPrePromptStatus, f.PermissionType.ReadPhoneState, !1),
            this._updatePrePermissionStatus(e.drawOverPermissionPrePromptStatus, f.PermissionType.DrawOver, !1),
            this._updatePrePermissionStatus(e.calendarPrePromptPermissionPrePromptStatus, f.PermissionType.Calendar, !1),
            this._updatePrePermissionStatus(e.screenRecordingPrePromptStatus, f.PermissionType.ScreenRecording, !1);
            const t = s.default.notificationsPermissionStatus().then(e=>{
                const t = (s.PermissionStatus.Denied,
                e);
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.Notifications, t)
            }
            ).then(o.noop);
            if (this._checkSystemPermissionStatus(),
            this._activationSubToken = c.default.subscribeForChanges("PermissionsStore", e=>{
                e === r.Types.AppActivationState.Active && this._checkSystemPermissionStatus()
            }
            ),
            this._shouldShowNotificationsPrompt = !0,
            this._shouldShowNotificationsPrompt) {
                const t = e.promptClosedForVersion;
                if (t) {
                    const e = C.parseVersion(t)
                      , i = C.parseVersion(y.getAppVersion());
                    i && e && i.major === e.major && i.minor <= e.minor && (this._shouldShowNotificationsPrompt = !1)
                }
            }
            return t
        }
        destroy() {
            this._activationSubToken && (this._activationSubToken.unsubscribe(),
            this._activationSubToken = void 0)
        }
        isNotificationsPromptDismissed() {
            return !this._shouldShowNotificationsPrompt
        }
        shouldShowNotificationsPrompt() {
            return this._shouldShowNotificationsPrompt && this.permissionStatus(f.PermissionType.Notifications) !== s.PermissionStatus.Granted
        }
        closeNotificationsPrompt() {
            this._shouldShowNotificationsPrompt = !1,
            this.trigger(t.TriggerKeys.NotificationsPrompt),
            p.default.setUserPreferencesLocal({
                promptClosedForVersion: y.getAppVersion()
            })
        }
        systemPromptHasNotBeenDisplayed(e) {
            return this.permissionStatus(e) === s.PermissionStatus.Unknown
        }
        permissionStatus(e) {
            return this._systemPermissionStatus[e] || s.PermissionStatus.Unknown
        }
        getPermissionStatusFetchIfUnavailable(e, t) {
            const i = this._systemPermissionStatus[e];
            return (o.isUndefined(i) || i === s.PermissionStatus.Unknown || t) && (e === f.PermissionType.MicrophoneAndCamera ? s.default.microphoneAndCameraPermissionStatus().then(t=>(this.setPermissionStatus(e, t),
            l.Resolved(t))) : e === f.PermissionType.Microphone ? s.default.microphonePermissionStatus().then(t=>(this.setPermissionStatus(e, t),
            l.Resolved(t))) : e === f.PermissionType.Camera && s.default.cameraPermissionStatus().then(t=>(this.setPermissionStatus(e, t),
            l.Resolved(t)))),
            l.Resolved(this.permissionStatus(e))
        }
        requestPermission(e, t, i) {
            const n = "requestPermission - " + f.PermissionType[e]
              , o = this._systemPermissionStatus[e] || s.PermissionStatus.Unknown;
            if (!(t && !!(t & f.PermissionPromptOptions.DontPrompt))) {
                const r = this._prePermissionStatus[e] || s.PermissionStatus.Unknown;
                t && f.PermissionPromptOptions.PromptAgainIfDenied;
                {
                    const a = !!(t && t & f.PermissionPromptOptions.SkipAugmentedWebPanel)
                      , l = !!(t && t & f.PermissionPromptOptions.SkipPrePrompt) && o !== s.PermissionStatus.Denied;
                    return g.log(u.LogTraceArea.Permissions, n + ": " + `shouldNotPrePrompt: ${l}, ` + `preStatus: ${s.PermissionStatus[r]}, systemStatus: ` + s.PermissionStatus[o]),
                    this._intPromptForPermissionType(e, !l, a).then(t=>(this.setPermissionStatus(e, t.systemPermissionStatus, t.prePermissionStatus, i),
                    t.systemPermissionStatus))
                }
            }
            return g.log(u.LogTraceArea.Permissions, n + ": dontPrompt"),
            l.Resolved(o)
        }
        setPermissionStatus(e, t, i, n) {
            let o = !1;
            const r = [e];
            if (g.log(u.LogTraceArea.Permissions, `setPermissionStatus - type: ${f.PermissionType[e]}, newStatus: ${s.PermissionStatus[t]}, prevStatus: ${s.PermissionStatus[this._systemPermissionStatus[e]]}, origin: ` + (n && s.PermissionOrigin[n] || "undefined")),
            this._systemPermissionStatus[e] !== t) {
                if (this._systemPermissionStatus[e] = t,
                e === f.PermissionType.MicrophoneAndCamera) {
                    let e = s.PermissionStatus.Denied
                      , i = s.PermissionStatus.Denied;
                    t === s.PermissionStatus.Granted ? (e = s.PermissionStatus.Granted,
                    i = s.PermissionStatus.Granted) : t === s.PermissionStatus.MicGrantedAndCameraDenied ? e = s.PermissionStatus.Granted : t === s.PermissionStatus.MicDeniedAndCameraGranted && (i = s.PermissionStatus.Granted),
                    this._systemPermissionStatus[f.PermissionType.Microphone] = e,
                    this._systemPermissionStatus[f.PermissionType.Camera] = i,
                    r.push(f.PermissionType.Microphone),
                    r.push(f.PermissionType.Camera),
                    g.track(new m.PermissionsStatusChange(f.PermissionType.Microphone,e,n)),
                    g.track(new m.PermissionsStatusChange(f.PermissionType.Camera,i,n))
                } else
                    g.track(new m.PermissionsStatusChange(e,t,n));
                o = !0
            }
            this._updatePrePermissionStatus(i || t, e) && (o = !0),
            o && this.trigger(r)
        }
        setPrePermissionStatus(e, t) {
            this._updatePrePermissionStatus(t, e)
        }
        updateDrawOverPrePermissionStatus(e) {
            this._updatePrePermissionStatus(e, f.PermissionType.DrawOver);
            const t = p.default.getUserPreferencesLocal().drawOverPermissionPromptDisplayCount || 0;
            p.default.setUserPreferencesLocal({
                drawOverPermissionPromptDisplayCount: t + 1,
                drawOverPermissionPromptLastDisplayDate: Date.now()
            })
        }
        updateScreenRecordingPrePermissionStatus() {
            return y.isElectronOsx() ? s.default.requestScreenRecordingPermission().then(e=>(this._updateAndTriggerPermissionStatusForType(f.PermissionType.ScreenRecording, e),
            e)) : l.Resolved(s.PermissionStatus.Granted)
        }
        showDrawOverPermissionPrompt() {
            const e = d.default.getS4LCMCFeatures().androidCallMonitorConfig.permissionPromptMaxDisplayCount
              , t = d.default.getS4LCMCFeatures().androidCallMonitorConfig.permissionPromptResetIntervalSeconds
              , i = p.default.getUserPreferencesLocal().drawOverPermissionPromptLastDisplayDate || 0;
            let n = p.default.getUserPreferencesLocal().drawOverPermissionPromptDisplayCount || 0;
            return t > 0 && Date.now() > i + 1e3 * t && (g.log(u.LogTraceArea.Permissions, "Reseting drawOverPermissionPromptDisplayCount to 0"),
            n = 0,
            p.default.setUserPreferencesLocal({
                drawOverPermissionPromptDisplayCount: n
            })),
            this._systemPermissionStatus[f.PermissionType.DrawOver] !== s.PermissionStatus.Granted && n < e
        }
        _checkSystemPermissionStatus() {
            s.default.cameraRollPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.CameraRoll, e)
            }
            ),
            s.default.writeCameraRollPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.WriteCameraRoll, e)
            }
            ),
            s.default.contactsPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.Contacts, e)
            }
            ),
            s.default.locationPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.Location, e)
            }
            ),
            s.default.locationAlwaysPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.LocationAlways, e)
            }
            ),
            s.default.drawOverPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.DrawOver, e, !1)
            }
            ),
            s.default.readPhoneStatePermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.ReadPhoneState, e)
            }
            ),
            s.default.readSmsPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.ReadSms, e)
            }
            ),
            s.default.sendSmsPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.SendSms, e)
            }
            ),
            s.default.receiveSmsPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.ReceiveSms, e)
            }
            ),
            s.default.backgroundExecutionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.BackgroundExecution, e)
            }
            ),
            s.default.calendarPermissionStatus().then(e=>{
                this._updateAndTriggerPermissionStatusForType(f.PermissionType.Calendar, e)
            }
            )
        }
        _updateAndTriggerPermissionStatusForType(e, t, i=!0) {
            this._systemPermissionStatus[e] !== t && (this._systemPermissionStatus[e] = t,
            t === s.PermissionStatus.Granted && this._prePermissionStatus[e] !== s.PermissionStatus.Granted && i && this._updatePrePermissionStatus(s.PermissionStatus.Granted, e),
            this.trigger(e))
        }
        _intPromptForPermissionType(e, t, i) {
            return (t ? this._inducePrePromptForType(e) : l.Resolved(s.PermissionStatus.Granted)).then(t=>t === s.PermissionStatus.Denied ? {
                prePermissionStatus: t,
                systemPermissionStatus: s.PermissionStatus.Unknown
            } : this._induceSystemPromptForType(e, i).then(e=>({
                prePermissionStatus: t,
                systemPermissionStatus: e
            })))
        }
        _inducePrePromptForType(e) {
            let t, i;
            switch (g.log(u.LogTraceArea.Permissions, "PermissionsStore._inducePrePromptForType " + e),
            e) {
            case f.PermissionType.Camera:
                t = h.getString("CapturePermissions.PermissionCamera"),
                i = h.getString("CapturePermissions.PermissionCameraPrePrompt");
                break;
            case f.PermissionType.CameraRoll:
            case f.PermissionType.WriteCameraRoll:
                t = h.getString("CapturePermissions.PermissionCameraRoll"),
                i = h.getString("CapturePermissions.PermissionCameraRollPrePrompt");
                break;
            case f.PermissionType.Microphone:
                t = h.getString("CapturePermissions.PermissionMicrophone"),
                i = h.getString("CapturePermissions.PermissionMicrophonePrePrompt");
                break;
            case f.PermissionType.Contacts:
                t = h.getString("CapturePermissions.PermissionContacts"),
                i = h.getString("CapturePermissions.PermissionContactsPrePrompt");
                break;
            case f.PermissionType.Notifications:
                t = h.getString("CapturePermissions.PermissionNotifications"),
                i = h.getString("CapturePermissions.PermissionNotificationsPrePrompt");
                break;
            case f.PermissionType.Location:
            case f.PermissionType.LocationAlways:
                t = h.getString("CapturePermissions.PermissionLocation"),
                i = h.getString("CapturePermissions.PermissionLocationPrePrompt");
                break;
            case f.PermissionType.Calendar:
                t = h.getString("CapturePermissions.PermissionCalendar"),
                i = h.getString("CapturePermissions.PermissionCalendarPrePrompt")
            }
            return i ? s.default.prePromptWithMessageAndTitle(i, t || "") : (g.warn(u.LogTraceArea.Permissions, "PermissionsStore._inducePrePromptForType, no message found for " + e),
            l.Resolved(s.PermissionStatus.Granted))
        }
        _induceSystemPromptForType(e, t) {
            let i = "";
            if (e === f.PermissionType.MicrophoneAndCamera) {
                i = `before prompting - Mic: ${s.PermissionStatus[this._systemPermissionStatus[f.PermissionType.Microphone]] || "Unknown"}, Cam: ${s.PermissionStatus[this._systemPermissionStatus[f.PermissionType.Microphone]] || "Unknown"}`
            }
            g.log(u.LogTraceArea.Permissions, `_induceSystemPromptForType - ${f.PermissionType[e]}, ${i}`);
            const n = !!p.default.getUserPreferencesLocal().wasInstructedAboutMicrophoneWebPermissions
              , o = !!p.default.getUserPreferencesLocal().wasInstructedAboutCameraWebPermissions
              , r = e=>t ? s.SkipAugmentedWebPanelConfig.All : e && !s.default.supportsGetPermissionState() ? s.SkipAugmentedWebPanelConfig.InitialOnly : void 0
              , a = e=>{
                g.log(u.LogTraceArea.Permissions, "_induceSystemPromptForType - SkipAugmentedWebPanelConfig: " + (void 0 !== e ? s.SkipAugmentedWebPanelConfig[e] : "undefined"))
            }
            ;
            let c;
            switch (e) {
            case f.PermissionType.Camera:
                return c = r(o),
                a(c),
                s.default.requestCameraPermission(c);
            case f.PermissionType.CameraRoll:
                return s.default.requestCameraRollPermission();
            case f.PermissionType.WriteCameraRoll:
                return s.default.requestWriteCameraRollPermission();
            case f.PermissionType.Microphone:
                return c = r(n),
                a(c),
                s.default.requestMicrophonePermission(c);
            case f.PermissionType.Contacts:
                return s.default.requestContactsPermission();
            case f.PermissionType.Location:
                return s.default.requestLocationPermission();
            case f.PermissionType.LocationAlways:
                return s.default.requestLocationAlwaysPermission();
            case f.PermissionType.ReadPhoneState:
                return s.default.requestReadPhoneStatePermission();
            case f.PermissionType.SendSms:
                return s.default.requestSendSmsPermission();
            case f.PermissionType.ReceiveSms:
                return s.default.requestReceiveSmsPermission();
            case f.PermissionType.ReadSms:
                return s.default.requestReadSmsPermission();
            case f.PermissionType.Calendar:
                return s.default.requestCalendarPermission();
            case f.PermissionType.Notifications:
                return l.Rejected("Notifications prompting is not supported yet.");
            case f.PermissionType.MicrophoneAndCamera:
                return c = r(n && o),
                a(c),
                s.default.requestMicrophoneAndCameraPermission(c);
            case f.PermissionType.DrawOver:
                return l.Resolved(s.PermissionStatus.Unknown);
            case f.PermissionType.BackgroundExecution:
                const t = h.getString("BatterySavePrompt.PromptText");
                return s.default.requestBackgroundExecutionPermission(t);
            case f.PermissionType.ScreenRecording:
                return s.default.requestScreenRecordingPermission();
            default:
                return _.switchStatementExhaustiveChecking(e),
                l.Resolved(s.PermissionStatus.Unknown)
            }
        }
        _updatePrePermissionStatus(e, t, i=!0) {
            if (this._prePermissionStatus[t] === e)
                return !1;
            if (this._prePermissionStatus[t] = e,
            i)
                switch (t) {
                case f.PermissionType.Camera:
                    p.default.setUserPreferencesLocal({
                        cameraPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.CameraRoll:
                    p.default.setUserPreferencesLocal({
                        cameraRollPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.WriteCameraRoll:
                    p.default.setUserPreferencesLocal({
                        writeCameraRollPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.Microphone:
                    p.default.setUserPreferencesLocal({
                        microphonePrePromptStatus: e
                    });
                    break;
                case f.PermissionType.MicrophoneAndCamera:
                    p.default.setUserPreferencesLocal({
                        microphonePrePromptStatus: e
                    }),
                    p.default.setUserPreferencesLocal({
                        cameraPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.Contacts:
                    p.default.setUserPreferencesLocal({
                        contactsPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.Notifications:
                    p.default.setUserPreferencesLocal({
                        notificationsPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.Location:
                    p.default.setUserPreferencesLocal({
                        locationPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.LocationAlways:
                    p.default.setUserPreferencesLocal({
                        locationAlwaysPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.ReadPhoneState:
                case f.PermissionType.ReadSms:
                    p.default.setUserPreferencesLocal({
                        readSmsPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.SendSms:
                    p.default.setUserPreferencesLocal({
                        sendSmsPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.ReceiveSms:
                    p.default.setUserPreferencesLocal({
                        receiveSmsPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.DrawOver:
                    p.default.setUserPreferencesLocal({
                        drawOverPermissionPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.BackgroundExecution:
                    p.default.setUserPreferencesLocal({
                        backgroundExecutionPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.Calendar:
                    p.default.setUserPreferencesLocal({
                        calendarPrePromptPermissionPrePromptStatus: e
                    });
                    break;
                case f.PermissionType.ScreenRecording:
                    p.default.setUserPreferencesLocal({
                        screenRecordingPrePromptStatus: e
                    });
                    break;
                default:
                    _.switchStatementExhaustiveChecking(t)
                }
            return !0
        }
    }
    ;
    n.__decorate([a.autoSubscribeWithKey(t.TriggerKeys.NotificationsPrompt)], b.prototype, "isNotificationsPromptDismissed", null),
    n.__decorate([a.autoSubscribeWithKey([t.TriggerKeys.NotificationsPrompt, f.PermissionType.Notifications])], b.prototype, "shouldShowNotificationsPrompt", null),
    n.__decorate([a.autoSubscribe], b.prototype, "systemPromptHasNotBeenDisplayed", null),
    n.__decorate([a.autoSubscribe, n.__param(0, a.key)], b.prototype, "permissionStatus", null),
    n.__decorate([a.autoSubscribe, n.__param(0, a.key)], b.prototype, "getPermissionStatusFetchIfUnavailable", null),
    b = n.__decorate([a.AutoSubscribeStore], b),
    t.default = new b
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = (i(0),
    i(13))
      , s = i(7)
      , r = i(2)
      , a = i(3)
      , l = i(21);
    let c = class extends o.StoreBase {
        constructor() {
            super(),
            this._screenReaderEnabled = !1,
            l.RegisterStartupable(this, "ScreenReaderStatusStore")
        }
        startup() {
            return this._screenReaderEnabled = !1,
            s.Resolved()
        }
        isMobileScreenReaderEnabled() {
            return this._screenReaderEnabled
        }
        _reportScreenReaderStatus(e) {
            this._screenReaderEnabled !== e && (a.log(r.LogTraceArea.GenericUnsafe, "ScreenReaderDetectionStore Change: isEnabled = " + e),
            this._screenReaderEnabled = e,
            this.trigger())
        }
    }
    ;
    n.__decorate([o.autoSubscribe], c.prototype, "isMobileScreenReaderEnabled", null),
    c = n.__decorate([o.AutoSubscribeStore], c),
    t.default = new c
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(5)
      , s = i(12)
      , r = {}
      , a = {}
      , l = {}
      , c = {}
      , d = o.lazyProperties({
        itemDivider: ()=>n.Styles.createViewStyle({
            height: 1,
            alignSelf: "stretch"
        })
    });
    class u extends s.default {
        render() {
            const e = this._getDividerStyle(this.props.marginLeft || 0, this.props.marginRight || 0, this.props.marginTop || 0, this.props.marginBottom || 0)
              , t = this.props.color ? n.Styles.createViewStyle({
                backgroundColor: this.props.color
            }, !1) : this.props.useLightTheme ? this._themeStyles.headerShadowColorStyle : this._themeStyles.dividerColorStyle
              , i = [d.itemDivider, t, ...e, this.props.style];
            return n.createElement(n.View, {
                style: i
            })
        }
        _getDividerStyle(e, t, i, o) {
            let s = l[e]
              , d = c[t]
              , u = r[i]
              , g = a[o];
            return s || (s = n.Styles.createViewStyle({
                marginLeft: e
            }),
            l[e] = s),
            d || (d = n.Styles.createViewStyle({
                marginRight: t
            }),
            c[t] = d),
            u || (u = n.Styles.createViewStyle({
                marginTop: i
            }),
            r[i] = u),
            g || (g = n.Styles.createViewStyle({
                marginBottom: o
            }),
            a[o] = g),
            [s, d, u, g]
        }
    }
    e.exports = u
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13);
    class s extends o.ComponentBase {
        render() {
            return n.createElement(n.View, Object.assign({}, this.props, {
                importantForAccessibility: n.Types.ImportantForAccessibility.NoHideDescendants
            }))
        }
    }
    t.default = s;
    class r extends o.ComponentBase {
        render() {
            return n.createElement(n.Animated.View, Object.assign({}, this.props, {
                importantForAccessibility: n.Types.ImportantForAccessibility.NoHideDescendants
            }))
        }
    }
    t.HiddenAnimatedView = r;
    class a extends o.ComponentBase {
        render() {
            return n.createElement(n.Text, Object.assign({}, this.props, {
                importantForAccessibility: n.Types.ImportantForAccessibility.NoHideDescendants
            }), this.props.children)
        }
    }
    t.HiddenText = a
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(42)
      , s = i(5)
      , r = i(103)
      , a = i(14)
      , l = i(15)
      , c = i(12)
      , d = s.lazyProperties({
        title: ()=>n.Styles.createTextStyle({
            paddingTop: 30,
            paddingBottom: 10
        })
    });
    class u extends c.default {
        render() {
            const e = [r.styles.switchTitleMediumSemiLarge];
            this.props.disabled && e.push(this._themeStyles.disabledTextColorStyle);
            const t = n.createElement(l.RowTitle, {
                style: e,
                numberOfLines: 2
            }, this.props.title);
            let i;
            return this.props.subtitle && (i = n.createElement(l.Caption, {
                style: r.styles.subtitleMediumSemiLarge,
                numberOfLines: 4
            }, this.props.subtitle)),
            n.createElement(n.View, {
                style: a.flexOne
            }, t, i)
        }
    }
    t.SwitchLabel = u;
    class g extends c.default {
        render() {
            let e = n.createElement(l.Subtitle, {
                style: this.props.titleStyles || d.title,
                numberOfLines: this.props.numberOfLines || 1,
                colorThemeOverride: this.props.colorThemeOverride,
                accessibilityHidden: !0
            }, this.props.title);
            {
                const t = o.default.headerAccessibilityInfo(this.props.title);
                e = n.createElement(n.View, {
                    style: this.props.containerStyles,
                    accessibilityLabel: t.accessibilityLabel,
                    accessibilityTraits: t.accessibilityTraits,
                    importantForAccessibility: n.Types.ImportantForAccessibility.Yes
                }, e)
            }
            return e
        }
    }
    t.SectionTitle = g
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(780)
      , o = i(0)
      , s = i(6)
      , r = i(2)
      , a = i(3);
    class l {
        constructor() {
            this._debounceTimeoutIdHashMap = {}
        }
        subscribeForChanges(e, t) {
            const i = i=>{
                if (t) {
                    let n = `App activation state changed to: ${o.Types.AppActivationState[i.newState]} - notify: ${e}`;
                    i.shouldDebounce && (n += `, debounced by ${i.debounceTime} ms`),
                    a.log(r.LogTraceArea.Lifecycle, n),
                    t(i.newState)
                }
            }
            ;
            return o.App.activationStateChangedEvent.subscribe(t=>{
                const o = {
                    newState: t,
                    shouldDebounce: s.default.getS4LNativePlatformsEcsConfigNoSubscription().enableAppActivationStateEventsDebouncing,
                    debounceTime: s.default.getS4LNativePlatformsEcsConfigNoSubscription().appActivationStateChangeDebounceTime
                };
                if (o.shouldDebounce && o.debounceTime && o.debounceTime > 0) {
                    if (!e || "" === e)
                        return void i({
                            newState: t,
                            shouldDebounce: !1
                        });
                    this._debounceTimeoutIdHashMap[e] && (n.default.clearTimeout(this._debounceTimeoutIdHashMap[e]),
                    delete this._debounceTimeoutIdHashMap[e]),
                    this._debounceTimeoutIdHashMap[e] = n.default.setTimeout(()=>{
                        delete this._debounceTimeoutIdHashMap[e],
                        i(o)
                    }
                    , o.debounceTime)
                } else
                    i({
                        newState: t,
                        shouldDebounce: !1
                    })
            }
            )
        }
    }
    t.AppActivationStateListener = l,
    t.default = new l
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(589)
      , a = i(77)
      , l = i(80)
      , c = i(27)
      , d = i(5)
      , u = i(4)
      , g = i(66)
      , h = i(8)
      , p = i(23)
      , m = i(11)
      , S = i(49)
      , C = i(14)
      , y = i(15)
      , f = i(12)
      , _ = d.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch"
        }),
        buttonInner: ()=>o.Styles.createViewStyle({
            justifyContent: "space-between",
            flexDirection: "row",
            minHeight: 60,
            alignItems: "center",
            alignSelf: "stretch"
        }),
        iconStyleMargin: ()=>o.Styles.createViewStyle({
            marginRight: 10
        }),
        topTextLine: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between"
        }),
        bottomTextLine: ()=>o.Styles.createViewStyle({
            marginTop: 2
        }),
        divider: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            bottom: 0,
            height: 1
        }),
        rightLabelText: ()=>o.Styles.createTextStyle({
            textAlignVertical: "center",
            marginLeft: 6
        }),
        rightArrowView: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            paddingHorizontal: 6,
            overflow: "visible"
        }),
        rightArrowText: ()=>o.Styles.createTextStyle({
            backgroundColor: h.Color.transparent,
            overflow: "visible"
        })
    });
    class b extends f.default {
        constructor() {
            super(...arguments),
            this._handleOnClick = e=>{
                e.stopPropagation(),
                this.props.onPressed && this.props.onPressed(e)
            }
            ,
            this._onHoverStart = ()=>{
                this.isComponentMounted() && this.setState({
                    isHovering: !0
                })
            }
            ,
            this._onButtonRef = e=>{
                this._focussableComponentRef = e || void 0
            }
            ,
            this._onHoverEnd = ()=>{
                this.isComponentMounted() && this.setState({
                    isHovering: !1
                })
            }
        }
        _buildState(e, t) {
            let i = {};
            return t && (i.isHovering = !1),
            i
        }
        requestFocus() {
            this._focussableComponentRef && this._focussableComponentRef.requestFocus()
        }
        render() {
            let e, t, i;
            if (this.props.icon) {
                let t;
                const i = this.state.isHovering ? this._themeColors.textHoverColor : this.props.isDestructive ? this._themeColors.destructiveTextColor : void 0;
                t = n.isArray(this.props.icon) ? n.map(this.props.icon, (e,t)=>({
                    icon: e,
                    color: i,
                    opacity: t > 0 ? .6 : 1
                })) : [{
                    icon: this.props.icon,
                    color: i
                }];
                const s = this.props.iconMargins ? o.Styles.createViewStyle({
                    marginLeft: this.props.iconMargins.left,
                    marginRight: this.props.iconMargins.right
                }, !1) : _.iconStyleMargin;
                e = o.createElement(l.default, {
                    style: s
                }, o.createElement(r.default, {
                    icons: t,
                    padding: this.props.iconPadding,
                    iconSize: this.props.iconSize
                }))
            }
            this.props.showSpinner ? t = o.createElement(g.default, {
                size: s.SXActivityIndicatorSize.Small,
                tintColor: this._themeColors.primaryTextColor
            }) : this.props.hideArrow || (t = o.createElement(l.default, {
                style: _.rightArrowView
            }, o.createElement(c.default, {
                icon: S.navForwardIcon(),
                size: m.IconSize.size20,
                color: this._themeColors.disclosureArrowColor,
                style: _.rightArrowText
            }))),
            this.props.labelBottom && (i = o.createElement(y.Caption, {
                style: _.bottomTextLine,
                numberOfLines: this.props.labelBottomSingleLine ? 1 : 2
            }, this.props.labelBottom));
            const d = [this.props.useRegularFont ? p.bodyFontStyle(this._currentTheme) : p.rowTitleFontStyle(this._currentTheme), C.flexOne];
            this.props.disabled && !this.props.showFullOpacityWhenDisabled ? d.push(this._themeStyles.disabledTextColorStyle) : this.props.isDestructive && d.push(this._themeStyles.destructiveTextColorStyle),
            this.props.labelStyle && d.push(this.props.labelStyle),
            this.state.isHovering && d.push(this._themeStyles.textHoverColorStyle);
            let h = [_.buttonInner, C.pointerCursor];
            this.props.buttonStyles && h.push(this.props.buttonStyles);
            const f = this.props.hideDivider ? void 0 : o.createElement(a, {
                style: _.divider
            });
            let b = this.props.accessibilityLabel;
            if (!b) {
                const e = n.compact([this.props.label, this.props.labelBottom, this.props.labelRight]);
                b = n.join(e, ", ")
            }
            this.props.disabled,
            !this._useLinkTrait() && this.props.treatAsLink && b && (b += ", " + u.getString("Browser.OpenUrlInBrowserTitle"));
            const v = n.isUndefined(this.props.accessibilityTraits) ? this._useLinkTrait() ? o.Types.AccessibilityTrait.Link : o.Types.AccessibilityTrait.Button : this.props.accessibilityTraits;
            return o.createElement(o.View, {
                style: [_.container, C.noncollapsibleView, this.props.style],
                onMouseEnter: this.props.disabled ? void 0 : this._onHoverStart,
                onMouseLeave: this.props.disabled ? void 0 : this._onHoverEnd
            }, o.createElement(o.Button, {
                ref: this._onButtonRef,
                accessibilityLabel: b,
                accessibilityTraits: v,
                style: h,
                onPress: this._handleOnClick,
                onLongPress: this.props.onLongPress,
                disabled: this.props.disabled,
                disabledOpacity: this.props.disabled && this.props.showFullOpacityWhenDisabled ? 1 : void 0,
                autoFocus: this.props.autoFocus
            }, e, o.createElement(o.View, {
                style: C.flexOne
            }, o.createElement(o.View, {
                style: _.topTextLine
            }, o.createElement(o.Text, {
                style: d,
                numberOfLines: n.isUndefined(this.props.labelNumberOfLines) ? 2 : this.props.labelNumberOfLines
            }, this.props.label)), i), o.createElement(y.RowTitle, {
                style: [this._themeStyles.secondaryTextColorStyle, _.rightLabelText],
                numberOfLines: 2
            }, this.props.labelRight), t), f)
        }
        _useLinkTrait() {
            return this.props.treatAsLink && !0
        }
    }
    t.WideButton = b
}
, , function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(1)
      , s = i(36)
      , r = i(0)
      , a = i(13)
      , l = i(7)
      , c = i(89)
      , d = i(6)
      , u = i(2)
      , g = i(206)
      , h = i(3)
      , p = i(32)
      , m = i(62)
      , S = i(21)
      , C = i(234)
      , y = i(109)
      , f = i(135);
    let _ = class extends a.StoreBase {
        constructor() {
            super(),
            this._colorTheme = y.Theme.Delphi,
            this._evaluatePreferencesUpdates = ()=>{
                let e = this._getUserPreferredTheme();
                this.isHighContrastEnabled() && !f.isAccessibleTheme(e) && (e = y.Theme.Accessible);
                const t = this._setThemeNoDB(e, !1)
                  , i = this._setUseSystemTheme(this._getUseSystemTheme())
                  , n = this._setFlipBubbleColors(this._getUserFlipBubblesColorPreference());
                (t || i || n) && this.trigger()
            }
            ,
            this._handleHighContrastChange = e=>{
                h.log(u.LogTraceArea.Theme, "ThemeStore._handleHighContrastChange isEnabled: " + e),
                this._isHighContrastEnabled = e;
                const t = this._getUserPreferredTheme();
                f.isAccessibleTheme(t) || (e ? this._setThemeNoDB(this._highContrastThemeForCurrentOSTheme()) : this._setThemeNoDB(t))
            }
            ,
            this._osThemeChangeCallback = e=>{
                h.log(u.LogTraceArea.Theme, "ThemeStore._osThemeChangeCallback osTheme: " + e);
                const t = this._useSystemTheme ? f.convertThemeToDelphiTheme(this._colorTheme) : this._colorTheme;
                if (this._osTheme !== e) {
                    if (this._osTheme = e,
                    this.isHighContrastEnabled())
                        this._setThemeNoDB(this._highContrastThemeForCurrentOSTheme());
                    else if (this._useSystemTheme && !f.themeMatchesOSTheme(t, e)) {
                        const e = f.matchingLightOrDarkTheme(t);
                        this._setUserAppearancePreferences({
                            colorTheme: this.convertThemeEnumToString(e),
                            useSystemTheme: !0
                        }),
                        this._updateAppTheme(e)
                    }
                } else if (this._useSystemTheme && !f.themeMatchesOSTheme(t, this._osTheme)) {
                    const e = f.convertOSThemeToTheme(t, this._osTheme);
                    e && this._setUserAppearancePreferences({
                        colorTheme: this.convertThemeEnumToString(e),
                        useSystemTheme: !0
                    })
                } else
                    this._useSystemTheme && f.themeMatchesOSTheme(t, this._osTheme) && this._setUserAppearancePreferences({
                        colorTheme: this.convertThemeEnumToString(t),
                        useSystemTheme: !0
                    });
                this.trigger()
            }
            ,
            S.RegisterStartupable(this, "ThemeStore", [g.default, p.default, m.default])
        }
        startup() {
            this._isHighContrastEnabled = r.Accessibility.isHighContrastEnabled(),
            this._useSystemTheme = this._getUseSystemTheme(),
            this._flipBubbleColors = this._getUserFlipBubblesColorPreference();
            const e = this._getUserAppearancePreferences();
            this._themeSetFromRemotePrefs = e && void 0 !== e.colorTheme;
            let t = this._getUserPreferredTheme();
            if (this.isHighContrastEnabled() && !f.isAccessibleTheme(t) && (t = y.Theme.Accessible),
            this._colorTheme = t,
            f.isColorfulTheme(this._colorTheme)) {
                const e = f.isDarkTheme(this._colorTheme) ? y.Theme.MonoDark : y.Theme.Mono;
                this._colorTheme = e,
                o.defer(()=>this.setTheme(e))
            }
            h.log(u.LogTraceArea.Theme, "ThemeStore.startup theme: " + t + " useSystemTheme: " + this._useSystemTheme + " flipBubbleColors: " + this._flipBubbleColors);
            const i = C.themeColorsForTheme(this._colorTheme);
            this._useCompactLayout = !!i.useCompactLayout,
            this._useInitialsForConversationIcon = !!i.useInitialsForConversationIcon,
            m.default.subscribe(this._evaluatePreferencesUpdates),
            p.default.subscribe(this._evaluatePreferencesUpdates),
            g.default.isSetupWizardCompleted() || (this._firstRunStoreSubscriptionToken = g.default.subscribe(()=>{
                g.default.isSetupWizardCompleted() && (this._evaluatePreferencesUpdates(),
                this._firstRunStoreSubscriptionToken && g.default.unsubscribe(this._firstRunStoreSubscriptionToken))
            }
            , g.TriggerKeys.SetupWizard)),
            this._updateAppTheme(this._colorTheme),
            this._subscribeHighContrastChanged(),
            o.defer(()=>{
                this.trigger()
            }
            );
            let n = !1;
            return s.default.osThemeChanged.subscribe(e=>{
                n = !0,
                this._osThemeChangeCallback(e)
            }
            ),
            s.default.getOSTheme().then(e=>{
                n || (n = !0,
                this._osThemeChangeCallback(e))
            }
            ),
            c.default.subscribeForChanges("ThemeStore", e=>{
                if (e === r.Types.AppActivationState.Background) {
                    let e;
                    e = this._useSystemTheme ? s.AppThemeType.System : this.useDarkThemeNoSubscription() ? s.AppThemeType.Dark : s.AppThemeType.Light,
                    s.default.storeAppThemeInfo(e),
                    r.Storage.setItem(s.IsDarkThemeActiveKey, JSON.stringify(f.isDarkTheme(this._colorTheme)))
                }
            }
            ),
            l.Resolved()
        }
        toggleLightOrDarkTheme() {
            const e = f.matchingLightOrDarkTheme(this._colorTheme);
            this.setTheme(e, !1)
        }
        setTheme(e, t) {
            const i = !!t && f.systemThemeEnabled();
            this._setUseSystemTheme(i),
            this._setUserAppearancePreferences({
                colorTheme: this.convertThemeEnumToString(e),
                useSystemTheme: !!this._useSystemTheme
            }),
            this._updateAppTheme(e)
        }
        setPreviewTheme(e) {
            e !== this._previewTheme && (this._previewTheme = e,
            this.trigger())
        }
        colorTheme() {
            return this._colorTheme
        }
        previewTheme() {
            return this._previewTheme
        }
        themeForOSTheme(e) {
            return f.convertOSThemeToTheme(e || this._colorTheme, this._osTheme)
        }
        themeForOSThemeNoSubscription(e) {
            return f.convertOSThemeToTheme(e || this._colorTheme, this._osTheme)
        }
        colorThemeNoSubscription() {
            return this._colorTheme
        }
        wasThemeChanged() {
            const e = p.default.getUserPreferencesLocal().colorTheme;
            return !o.isUndefined(e) && !o.isEmpty(e)
        }
        useAccessibleTheme() {
            return this.useAccessibleThemeNoSubscription()
        }
        useAccessibleThemeNoSubscription() {
            return f.isAccessibleTheme(this._colorTheme)
        }
        useDelphiTheme() {
            return this.useDelphiThemeNoSubscription()
        }
        useDelphiThemeNoSubscription() {
            return f.isDelphiTheme(this._colorTheme)
        }
        shouldOverrideColors() {
            return this.shouldOverrideColorsNoSubscription()
        }
        shouldOverrideColorsNoSubscription() {
            return this._colorTheme === y.Theme.Mono || this._colorTheme === y.Theme.MonoDark || this._colorTheme === y.Theme.Delphi || this._colorTheme === y.Theme.DelphiDark
        }
        useDarkTheme() {
            return this.useDarkThemeNoSubscription()
        }
        useDarkThemeNoSubscription() {
            return f.isDarkTheme(this._colorTheme)
        }
        isHighContrastEnabled() {
            return this._isHighContrastEnabled
        }
        useCompactLayout() {
            return this._useCompactLayout
        }
        useInitialsForConversationIcon() {
            return this._useInitialsForConversationIcon
        }
        themeStyles() {
            return C.themeStylesForTheme(this._colorTheme)
        }
        themeStylesNoSubscription() {
            return C.themeStylesForTheme(this._colorTheme)
        }
        themeColors() {
            return C.themeColorsForTheme(this._colorTheme)
        }
        themeColorsNoSubscription() {
            return C.themeColorsForTheme(this._colorTheme)
        }
        useSystemTheme() {
            return this._useSystemTheme
        }
        setFlipBubbleColors(e) {
            e !== this._flipBubbleColors && (d.default.getS4LNativePlatformsEcsConfig().enableRemoteClientAppearancePreferences && m.default.setUserAppearancePreferencesForCurrentPlatform({
                flipBubbleColors: e
            }),
            p.default.setUserPreferencesLocal({
                flipBubbleColors: e
            }))
        }
        flipBubbleColors() {
            return this._flipBubbleColors
        }
        convertStringToThemeEnum(e) {
            switch (e) {
            case "accessible":
                return y.Theme.Accessible;
            case "mono":
                return y.Theme.Mono;
            case "dark":
                return y.Theme.AccessibleDark;
            case "colorfuldark":
                return y.Theme.ColorfulDark;
            case "monodark":
                return y.Theme.MonoDark;
            case "delphiDark":
            case "classicDark":
                return y.Theme.DelphiDark;
            case "default":
                return y.Theme.Colorful;
            default:
            case "delphi":
            case "classic":
                return y.Theme.Delphi
            }
        }
        convertThemeEnumToString(e) {
            switch (e) {
            case y.Theme.Accessible:
                return "accessible";
            case y.Theme.Mono:
                return "mono";
            case y.Theme.AccessibleDark:
                return "dark";
            case y.Theme.ColorfulDark:
                return "colorfuldark";
            case y.Theme.MonoDark:
                return "monodark";
            case y.Theme.ClassicDarkDeprecated:
            case y.Theme.DelphiDark:
                return "delphiDark";
            case y.Theme.Colorful:
                return "default";
            default:
            case y.Theme.ClassicDeprecated:
            case y.Theme.Delphi:
                return "delphi"
            }
        }
        shouldSkipThemePickerInOnboarding() {
            const e = f.systemThemeEnabled() && void 0 !== this._osTheme && this._osTheme !== s.OSTheme.Unknown;
            return h.log(u.LogTraceArea.Theme, "shouldSkipThemePickerInOnboarding(): OS Theme supported:" + e),
            h.log(u.LogTraceArea.Theme, "shouldSkipThemePickerInOnboarding(): RemotePrefs available:" + this._themeSetFromRemotePrefs),
            this._themeSetFromRemotePrefs ? (h.log(u.LogTraceArea.Theme, "shouldSkipThemePickerInOnboarding(): true"),
            !0) : !!e && (this.setTheme(this._colorTheme, !0),
            this.trigger(),
            h.log(u.LogTraceArea.Theme, "shouldSkipThemePickerInOnboarding(): true"),
            !0)
        }
        getSystemTheme(e) {
            return e ? this._highContrastThemeForCurrentOSTheme() : this._osTheme === s.OSTheme.Dark ? y.Theme.DelphiDark : y.Theme.Delphi
        }
        _updateAppTheme(e) {
            this._useSystemTheme ? s.default.setAppTheme("system") : f.isDarkTheme(e) ? s.default.setAppTheme("dark") : s.default.setAppTheme("light")
        }
        _setUserAppearancePreferences(e) {
            o.isUndefined(e.useSystemTheme) || e.useSystemTheme === this._useSystemTheme || s.default.setUseSystemTheme(e.useSystemTheme),
            d.default.getS4LNativePlatformsEcsConfig().enableRemoteClientAppearancePreferences && m.default.setUserAppearancePreferencesForCurrentPlatform(e),
            p.default.setUserPreferencesLocal(e)
        }
        _getUserPreferredTheme() {
            const e = p.default.getUserPreferencesLocal()
              , t = this._getUserAppearancePreferences();
            return t && t.colorTheme ? this.convertStringToThemeEnum(t.colorTheme) : this.convertStringToThemeEnum(e.colorTheme)
        }
        _getUserFlipBubblesColorPreference() {
            const e = p.default.getUserPreferencesLocal()
              , t = this._getUserAppearancePreferences();
            return t && !o.isUndefined(t.flipBubbleColors) ? t.flipBubbleColors : !!e.flipBubbleColors
        }
        _getUserAppearancePreferences() {
            return d.default.getS4LNativePlatformsEcsConfig().enableRemoteClientAppearancePreferences ? m.default.getUserAppearancePreferencesForCurrentPlatform() : {}
        }
        _getUseSystemTheme() {
            if (!f.systemThemeEnabled())
                return !1;
            const e = p.default.getUserPreferencesLocal()
              , t = this._getUserAppearancePreferences();
            return t && !o.isUndefined(t.useSystemTheme) ? t.useSystemTheme : !!e.useSystemTheme
        }
        _setUseSystemTheme(e) {
            return this._useSystemTheme !== e && (this._useSystemTheme = e,
            !0)
        }
        _setFlipBubbleColors(e) {
            return this._flipBubbleColors !== e && (this._flipBubbleColors = e,
            !0)
        }
        _setThemeNoDB(e, t=!0) {
            if (h.log(u.LogTraceArea.Theme, "ThemeStore.setThemeNoDB theme: " + e),
            this._colorTheme !== e) {
                this._colorTheme = e,
                this._previewTheme = void 0;
                const i = C.themeColorsForTheme(e);
                return this._useCompactLayout = !!i.useCompactLayout,
                this._useInitialsForConversationIcon = !!i.useInitialsForConversationIcon,
                t && this.trigger(),
                !0
            }
            return !1
        }
        _subscribeHighContrastChanged() {
            r.Accessibility.highContrastChangedEvent.subscribe(this._handleHighContrastChange)
        }
        _highContrastThemeForCurrentOSTheme() {
            return this._osTheme === s.OSTheme.Dark ? y.Theme.AccessibleDark : y.Theme.Accessible
        }
    }
    ;
    n.__decorate([a.autoSubscribe], _.prototype, "colorTheme", null),
    n.__decorate([a.autoSubscribe], _.prototype, "previewTheme", null),
    n.__decorate([a.autoSubscribe], _.prototype, "themeForOSTheme", null),
    n.__decorate([a.disableWarnings], _.prototype, "themeForOSThemeNoSubscription", null),
    n.__decorate([a.disableWarnings], _.prototype, "colorThemeNoSubscription", null),
    n.__decorate([a.autoSubscribe], _.prototype, "wasThemeChanged", null),
    n.__decorate([a.autoSubscribe], _.prototype, "useAccessibleTheme", null),
    n.__decorate([a.autoSubscribe], _.prototype, "useDelphiTheme", null),
    n.__decorate([a.autoSubscribe], _.prototype, "shouldOverrideColors", null),
    n.__decorate([a.autoSubscribe], _.prototype, "useDarkTheme", null),
    n.__decorate([a.autoSubscribe], _.prototype, "isHighContrastEnabled", null),
    n.__decorate([a.autoSubscribe], _.prototype, "useCompactLayout", null),
    n.__decorate([a.autoSubscribe], _.prototype, "useInitialsForConversationIcon", null),
    n.__decorate([a.autoSubscribe], _.prototype, "themeStyles", null),
    n.__decorate([a.disableWarnings], _.prototype, "themeStylesNoSubscription", null),
    n.__decorate([a.autoSubscribe], _.prototype, "themeColors", null),
    n.__decorate([a.disableWarnings], _.prototype, "themeColorsNoSubscription", null),
    n.__decorate([a.autoSubscribe], _.prototype, "useSystemTheme", null),
    n.__decorate([a.autoSubscribe], _.prototype, "flipBubbleColors", null),
    _ = n.__decorate([a.AutoSubscribeStore], _),
    e.exports = new _
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(37)
      , s = i(358);
    e.exports = class {
        static createHiddenStyle(e, t=s.ShowHideTransition.Slide, i=!1) {
            let n = e;
            return n && !i && (n = !o.default.keepStatusBarVisibleNoSubscription()),
            {
                hidden: {
                    hide: n,
                    showHideTransition: t
                }
            }
        }
        static createBackgroundColorStyle(e, t=!0) {
            return {
                backgroundColor: {
                    color: e,
                    animated: t
                }
            }
        }
        static createBarStyle(e, t=!0) {
            return {
                barStyle: {
                    style: e,
                    animated: t
                }
            }
        }
        static mergeStyles(e) {
            return n.reduce(e, (e,t)=>n.merge(e, t), {})
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(0)
      , r = i(82)
      , a = i(112)
      , l = i(83)
      , c = i(16)
      , d = i(16)
      , u = i(2)
      , g = i(18)
      , h = i(39)
      , p = i(159);
    class m extends h.TelemetryEventBase {
        constructor(e, t, i, n, o) {
            super(),
            this._callId = e,
            this._conversationId = t,
            this._participantId = i,
            this._nodeId = n,
            this._origin = o,
            this._textReactionCount = 0,
            this._emoticonReactionCount = 0,
            this._animationReactionCount = 0,
            this._photoReactionCount = 0,
            this._mediaPickerPhotoReactionCount = 0,
            this._navigateToMediaStageCount = 0,
            this._moveParticipantToStageCount = 0,
            this._moveSelfToStageCount = 0,
            this._moveSelfToRibbonCount = 0,
            this._moveParticipantToRibbonCount = 0,
            this._sideNavigateInCallCount = 0,
            this._backgroundAppInCallCount = 0,
            this._toggleCameraCount = 0,
            this._localMuteCount = 0,
            this._localUnmuteCount = 0,
            this._muteMicButtonPressCount = 0,
            this._muteKeyboardShortcutPressCount = 0,
            this._muteCommandServiceInvokeCount = 0,
            this._muteCallMonitorPressCount = 0,
            this._muteFloatingPipPressCount = 0,
            this._muteCallRosterPressCount = 0,
            this._muteSystemHotKeyPressCount = 0,
            this._muteLocalVideoContextMenuPressCount = 0,
            this._resizedOwnPreviewCount = 0,
            this._movedOwnPreviewCount = 0,
            this._dockedOwnPreviewCount = 0,
            this._reactionThreadCreationDelay = 0,
            this._photoSnapshotCount = 0,
            this._photoSnapshotAudioCount = 0,
            this._photoSnapshotVideoCount = 0,
            this._photoSnapshotScreenShareCount = 0,
            this._callDurationSeconds = 0,
            this._incomingVideoUserNotificationCount = 0,
            this._didEnterMinWidth = !1,
            this._callConnectionDurationMilliseconds = 0
        }
        getAttributes() {
            return o.assign(super.getAttributes(), this._getOwnAttributes())
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = p.getTrackableConversationId(this._conversationId);
            return t && (e.ConversationId = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
        getEventPriority() {
            return n.AWTEventPriority.High
        }
        _getOwnAttributes() {
            return {
                CallId: this._callId || "",
                ParticipantId: this._participantId || "",
                NodeId: this._nodeId || "",
                DidUserReact: this._textReactionCount > 0 || this._emoticonReactionCount > 0 || this._photoReactionCount > 0 || this._mediaPickerPhotoReactionCount > 0 || this._photoSnapshotCount > 0 || this._animationReactionCount > 0,
                ReactionCount: this._textReactionCount + this._emoticonReactionCount + this._photoReactionCount + this._mediaPickerPhotoReactionCount + this._photoSnapshotCount + this._animationReactionCount,
                TextReactionCount: this._textReactionCount,
                EmoticonReactionCount: this._emoticonReactionCount,
                PhotoReactionCount: this._photoReactionCount,
                AnimationReactionCount: this._animationReactionCount,
                MediaPickerPhotoReactionCount: this._mediaPickerPhotoReactionCount,
                DidUserNavigateToMediaStage: this._navigateToMediaStageCount > 0,
                NavigateToMediaStageCount: this._navigateToMediaStageCount,
                MoveParticipantToStageCount: this._moveParticipantToStageCount,
                MoveParticipantToRibbonCount: this._moveParticipantToRibbonCount,
                MoveSelfToRibbonCount: this._moveSelfToRibbonCount,
                MoveSelfToStageCount: this._moveSelfToStageCount,
                DidUserSideNavigateInCall: this._sideNavigateInCallCount > 0,
                SideNavigateInCallCount: this._sideNavigateInCallCount,
                DidUserBackgroundAppInCall: this._backgroundAppInCallCount > 0,
                BackgroundAppInCallCount: this._backgroundAppInCallCount,
                DidUserToggleCamera: this._toggleCameraCount > 0,
                ToggleCameraCount: this._toggleCameraCount,
                LocalMuteCount: this._localMuteCount,
                LocalUnmuteCount: this._localUnmuteCount,
                MuteMicButtonPressCount: this._muteMicButtonPressCount,
                MuteKeyboardShortcutPressCount: this._muteKeyboardShortcutPressCount,
                MuteCommandServiceInvokeCount: this._muteCommandServiceInvokeCount,
                MuteCallMonitorPressCount: this._muteCallMonitorPressCount,
                MuteFloatingPipPressCount: this._muteFloatingPipPressCount,
                MuteCallRosterPressCount: this._muteCallRosterPressCount,
                MuteSystemHotKeyPressCount: this._muteSystemHotKeyPressCount,
                MuteLocalVideoContextMenuPressCount: this._muteLocalVideoContextMenuPressCount,
                ResizedOwnPreviewCount: this._resizedOwnPreviewCount,
                MovedOwnPreviewCount: this._movedOwnPreviewCount,
                DockedOwnPreviewCount: this._dockedOwnPreviewCount,
                ReactionThreadCreationDelay: this._reactionThreadCreationDelay,
                Origin: u.NavigationCallOrigin[this._origin],
                CallConversationMriNamespace: this._callConversationMriNamespace ? c.Namespaces[this._callConversationMriNamespace] : "",
                PhotoSnapshotCount: this._photoSnapshotCount,
                DidUserPostPhotoSnapshot: this._photoSnapshotCount > 0,
                PhotoSnapshotAudioCount: this._photoSnapshotAudioCount,
                PhotoSnapshotVideoCount: this._photoSnapshotVideoCount,
                PhotoSnapshotScreenShareCount: this._photoSnapshotScreenShareCount,
                CallDurationSeconds: this._callDurationSeconds,
                CallConnectionDurationMilliseconds: this._callConnectionDurationMilliseconds,
                UserToggledIncomingVideoViaNotificationCount: this._incomingVideoUserNotificationCount,
                DidEnterMinWidth: this._didEnterMinWidth
            }
        }
        postAnimationReaction() {
            this._animationReactionCount++
        }
        postTextReaction() {
            this._textReactionCount++
        }
        postEmoticonReaction() {
            this._emoticonReactionCount++
        }
        postPhotoReaction() {
            this._photoReactionCount++
        }
        postMediaPickerPhotoReaction() {
            this._mediaPickerPhotoReactionCount++
        }
        navigateToMediaStage() {
            this._navigateToMediaStageCount++
        }
        moveParticipantToStage() {
            this._moveParticipantToStageCount++
        }
        moveParticipantToRibbon() {
            this._moveParticipantToRibbonCount++
        }
        moveSelfToStage() {
            this._moveSelfToStageCount++
        }
        moveSelfToRibbon() {
            this._moveSelfToRibbonCount++
        }
        sideNavigateInCall() {
            this._sideNavigateInCallCount++
        }
        backgroundAppInCall() {
            this._backgroundAppInCallCount++
        }
        toggleCamera() {
            this._toggleCameraCount++
        }
        localMute() {
            this._localMuteCount++
        }
        localUnmute() {
            this._localUnmuteCount++
        }
        micButtonPress() {
            this._muteMicButtonPressCount++
        }
        muteKeyboardShortcutPress() {
            this._muteKeyboardShortcutPressCount++
        }
        muteCommandServiceInvoke() {
            this._muteCommandServiceInvokeCount++
        }
        muteCallMonitorPress() {
            this._muteCallMonitorPressCount++
        }
        muteFloatingPipPress() {
            this._muteFloatingPipPressCount++
        }
        muteCallRosterPress() {
            this._muteCallRosterPressCount++
        }
        muteSystemHotKeyPress() {
            this._muteSystemHotKeyPressCount++
        }
        muteLocalVideoContextMenuPress() {
            this._muteLocalVideoContextMenuPressCount++
        }
        resizeOwnPreview() {
            this._resizedOwnPreviewCount++
        }
        moveOwnPreview() {
            this._movedOwnPreviewCount++
        }
        dockOwnPreview() {
            this._dockedOwnPreviewCount++
        }
        setReactionThreadCreationDelay(e) {
            this._reactionThreadCreationDelay = e
        }
        updateParticipantId(e) {
            this._participantId = e
        }
        setCallConversationMriNamespace(e) {
            this._callConversationMriNamespace = e
        }
        postPhotoSnapshot() {
            this._photoSnapshotCount++
        }
        setPhotoSnapshotMakeup(e, t, i) {
            this._photoSnapshotAudioCount = e,
            this._photoSnapshotVideoCount = t,
            this._photoSnapshotScreenShareCount = i
        }
        setCallDurationSeconds(e) {
            this._callDurationSeconds = e
        }
        setCallConnectionDurationMilliseconds(e) {
            this._callConnectionDurationMilliseconds = e
        }
        incomingVideoNotificationHit() {
            this._incomingVideoUserNotificationCount++
        }
        setEnterMinWidth() {
            this._didEnterMinWidth = !0
        }
    }
    t.Call = class extends m {
        constructor(e) {
            super(e.callId, e.conversationId, e.participantId, e.nodeId, e.origin),
            this._params = e,
            this._startVideoCount = 0,
            this._stopVideoCount = 0,
            this._startScreenSharingCount = 0,
            this._stopScreenSharingCount = 0,
            this._cancelSreenSharingCount = 0,
            this._startActivityCount = 0,
            this._stopActivityCount = 0,
            this._startSoundSharingCount = 0,
            this._screenSharingDroppedCount = 0,
            this._screenSharingStolenCount = 0,
            this._switchScreenWhileSharingCount = 0,
            this._orientationLandscapeCount = 0,
            this._orientationPortraitCount = 0,
            this._isConversationAccepted = !1,
            this._isConversationAutoAccepted = !1,
            this._isEscalatedToGroup = !1,
            this._escalationUserCount = 0,
            this._addUsersToGroupCount = 0,
            this._ringUsersToCallCount = 0,
            this._autoAnsweredWithAudio = !1,
            this._autoAnsweredWithVideo = !1,
            this._wasOffline = !1,
            this._wasSuspended = !1,
            this._didShowReconnectUI = !1,
            this._didShowPoorConnectionUI = !1,
            this._connectionType = r.ConnectionType.AllSupported,
            this._mccCode = "",
            this._mncCode = "",
            this._startRecordingCount = 0,
            this._stopRecordingCount = 0,
            this._startNdiCount = 0,
            this._stopNdiCount = 0,
            this._navBarOpenedCount = 0,
            this._navBarClosedCount = 0,
            this._mrDuration = 0,
            this._noMrDuration = 0,
            this._isPSTNCall = !1,
            this._maxConnectedParticipants = 0,
            this._groupMemberCount = 0,
            this._soloModeDurationSeconds = 0,
            this._isGoLive = !1,
            this._chatOpenedCount = 0,
            this._galleryOpenedCount = 0,
            this._manualDismissedUFDCount = 0,
            this._autoDismisssedUFDCount = 0,
            this._actionedUFDCount = 0,
            this._totalUFDCount = 0,
            this._totalSuccessfulToggleVideoPress = 0,
            this._totalIgornedToggleVideoPress = 0,
            this._callRosterOpenedCount = 0,
            this._callRosterClosedCount = 0,
            this._callRosterGetAllParticipantsFailedCount = 0,
            this._audioOnlyStartedCount = 0,
            this._audioOnlyStoppedCount = 0,
            this._audioOnlySuggestedCount = 0,
            this._enabledIncomingVideoCount = 0,
            this._disabledIncomingVideoCount = 0,
            this._startCaptioningCount = 0,
            this._stopCaptioningCount = 0,
            this._failedCaptioningConfigCount = 0,
            this._displayScreenSharingDialogCount = 0,
            this._didUserDisplayScreenSharingDialog = !1,
            this._audioSystemResetCount = 0,
            this._wholeScreenSharedCount = 0,
            this._appWindowSharedCount = 0,
            this._startBackgroundBlurCount = 0,
            this._stopBackgroundBlurCount = 0,
            this._durationWithBackgroundBlurRatio = 0,
            this._startSpeakerViewCount = 0,
            this._stopSpeakerViewCount = 0,
            this._durationInSpeakerViewRatio = 0,
            this._callMergeRequested = 0,
            this._callMergeSucceed = 0,
            this._zoomedInCount = 0,
            this._zoomedOutCount = 0,
            this._accessedDialpadCount = 0,
            this._displayedDtmfWarningCount = 0,
            this._screenShareControlReceivedControlRequestCount = 0,
            this._screenShareControlReceivedControlRequestCanceledCount = 0,
            this._screenShareControlSentControlRequestCount = 0,
            this._screenShareControlRequestAcceptedCount = 0,
            this._screenShareControlRequestDeniedCount = 0,
            this._screenShareControlGrantedCount = 0,
            this._screenShareControlSharerTerminatedControlCount = 0,
            this._screenShareControlViewerTerminatedControlCount = 0,
            this._pinToolbar = 0,
            this._unpinToolbar = 0,
            this._couldGiveControl = !1,
            this._startBackgroundEffectCount = {
                [u.BackgroundEffect.Blur]: 0,
                [u.BackgroundEffect.BackgroundImage]: 0
            },
            this._stopBackgroundEffectCount = {
                [u.BackgroundEffect.Blur]: 0,
                [u.BackgroundEffect.BackgroundImage]: 0
            },
            this._durationWithBackgroundEffectRatio = {
                [u.BackgroundEffect.Blur]: 0,
                [u.BackgroundEffect.BackgroundImage]: 0
            },
            this._startTogetherMode = !1,
            this._ableToStartTogetherMode = !1,
            this._startLargeGridMode = !1,
            this._ableToStartLargeGridMode = !1,
            this._noiseSuppressionMode = r.NoiseSuppressionMode.Auto,
            this._badQualityCounts = new Map,
            this._noiseSuppressionMode = e.noiseSuppressionMode
        }
        getEventName() {
            return "calling_call"
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return d.isThread(this._params.conversationId) && (e.ConversationId = {
                value: this._params.conversationId,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
        getAttributes() {
            const e = Object.assign(Object.assign(Object.assign(Object.assign({
                IsGroupCall: this._params.isGroupCall,
                IsCallCreator: this._params.isCallCreator,
                DidUserStartVideo: this._startVideoCount > 0,
                StartVideoCount: this._startVideoCount,
                DidUserStopVideo: this._stopVideoCount > 0,
                StopVideoCount: this._stopVideoCount,
                StartScreenSharingCount: this._startScreenSharingCount,
                SwitchScreenWhileSharingCount: this._switchScreenWhileSharingCount,
                StopScreenSharingCount: this._stopScreenSharingCount,
                StartSoundSharingCount: this._startSoundSharingCount,
                CancelScreenSharingCount: this._cancelSreenSharingCount,
                ScreenSharingDroppedCount: this._screenSharingDroppedCount,
                ScreenSharingStolenCount: this._screenSharingStolenCount,
                DidUserStartScreenSharing: this._startScreenSharingCount > 0,
                DidUserSwitchScreenWhileSharing: this._switchScreenWhileSharingCount > 0,
                DidUserStopScreenSharing: this._stopScreenSharingCount > 0,
                DidUserChangeOrientation: this._orientationLandscapeCount > 0 || this._orientationPortraitCount > 0,
                OrientationLandscapeCount: this._orientationPortraitCount,
                OrientationPortraitCount: this._orientationPortraitCount,
                IsConversationAccepted: this._isConversationAccepted,
                IsConversationAutoAccepted: this._isConversationAutoAccepted,
                IsEscalatedToGroup: this._isEscalatedToGroup,
                EscalationUserCount: this._escalationUserCount,
                AddUsersToGroupCount: this._addUsersToGroupCount,
                RingUsersToCallCount: this._ringUsersToCallCount,
                CallWasAutoAnsweredWithAudio: this._autoAnsweredWithAudio,
                CallWasAutoAnsweredWithVideo: this._autoAnsweredWithVideo,
                WasOffline: this._wasOffline,
                WasSuspended: this._wasSuspended,
                DidShowReconnectUI: this._didShowReconnectUI,
                DidShowPoorConnectionUI: this._didShowPoorConnectionUI,
                StartActivityCount: this._startActivityCount,
                StopActivityCount: this._stopActivityCount,
                NetworkMCCCode: this._mccCode,
                NetworkMNCCode: this._mncCode,
                ConnectionType: this._connectionType,
                StartRecordingCount: this._startRecordingCount,
                StopRecordingCount: this._stopRecordingCount,
                StartNdiCount: this._startNdiCount,
                StopNdiCount: this._stopNdiCount,
                DurationInMr: this._mrDuration,
                DurationNoMr: this._noMrDuration,
                NavigationBarDesktopOpenedCount: this._navBarOpenedCount,
                NavigationBarDesktopClosedCount: this._navBarClosedCount,
                IsPSTNCall: this._isPSTNCall,
                IsGoLive: this._isGoLive,
                MaxConnectedParticipants: this._maxConnectedParticipants || 0,
                GroupMemberCount: this._groupMemberCount || 0,
                SoloModeDurationSeconds: this._soloModeDurationSeconds,
                ChatOpenedCount: this._chatOpenedCount,
                GalleryOpenedCount: this._galleryOpenedCount,
                ActionedUFDCount: this._actionedUFDCount,
                ManualDismissedUFDCount: this._manualDismissedUFDCount,
                AutoDismissedUFDCount: this._autoDismisssedUFDCount,
                TotalUFDCount: this._totalUFDCount,
                ToggleVideoSuccessfulCount: this._totalSuccessfulToggleVideoPress,
                ToggleVideoIgnoredCount: this._totalIgornedToggleVideoPress,
                CallRosterOpenedCount: this._callRosterOpenedCount,
                CallRosterClosedCount: this._callRosterClosedCount,
                CallRosterGetAllParticipantsFailedCount: this._callRosterGetAllParticipantsFailedCount,
                StartAudioOnlyCount: this._audioOnlyStartedCount,
                StopAudioOnlyCount: this._audioOnlyStoppedCount,
                AudioOnlyModeSuggestedCount: this._audioOnlySuggestedCount,
                DisabledIncomingVideoCount: this._disabledIncomingVideoCount,
                EnabledIncomingVideoCount: this._enabledIncomingVideoCount,
                StartCaptioningCount: this._startCaptioningCount,
                StopCaptioningCount: this._stopCaptioningCount,
                FailedCaptioningConfigCount: this._failedCaptioningConfigCount,
                DisplayScreenSharingDialogCount: this._displayScreenSharingDialogCount,
                DidUserDisplayScreenSharingDialog: this._didUserDisplayScreenSharingDialog,
                IsScheduledCallActive: this._params.isScheduledCallActive,
                IsMeetNow: this._params.isMeetNow,
                IsPreheated: this._params.isPreheated,
                IsEchoCall: this._params.isEchoCall,
                AudioSystemReset: this._audioSystemResetCount,
                "WholeScreenSharedCount ": this._wholeScreenSharedCount,
                AppWindowSharedCount: this._appWindowSharedCount,
                StartBackgroundBlurCount: this._startBackgroundBlurCount,
                StopBackgroundBlurCount: this._stopBackgroundBlurCount,
                DurationWithBackgroundBlurRatio: this._durationWithBackgroundBlurRatio,
                StartSpeakerViewCount: this._startSpeakerViewCount,
                StopSpeakerViewCount: this._stopSpeakerViewCount,
                DurationInSpeakerViewRatio: this._durationInSpeakerViewRatio,
                CallMergeRequested: this._callMergeRequested,
                CallMergeSucceed: this._callMergeSucceed,
                ZoomedInCount: this._zoomedInCount,
                ZoomedOutCount: this._zoomedOutCount,
                AccessedDialpadCount: this._accessedDialpadCount,
                DisplayedDtmfWarningCount: this._displayedDtmfWarningCount,
                ScreenShareControlReceivedControlRequestCount: this._screenShareControlReceivedControlRequestCount,
                ScreenShareControlReceivedControlRequestCanceledCount: this._screenShareControlReceivedControlRequestCanceledCount,
                ScreenShareControlSentControlRequestCount: this._screenShareControlSentControlRequestCount,
                ScreenShareControlRequestAcceptedCount: this._screenShareControlRequestAcceptedCount,
                ScreenShareControlRequestDeniedCount: this._screenShareControlRequestDeniedCount,
                ScreenShareControlGrantedCount: this._screenShareControlGrantedCount,
                ScreenShareControlSharerTerminatedControlCount: this._screenShareControlSharerTerminatedControlCount,
                ScreenShareControlViewerTerminatedControlCount: this._screenShareControlViewerTerminatedControlCount,
                IsTranslatedCall: this._params.isTranslatedCall,
                IsFirstCall: this._params.isFirstCall,
                StartBackgroundEffectBlurCount: this._startBackgroundEffectCount[u.BackgroundEffect.Blur],
                StopBackgroundEffectBlurCount: this._stopBackgroundEffectCount[u.BackgroundEffect.Blur],
                DurationWithBackgroundEffectBlurRatio: this._durationWithBackgroundEffectRatio[u.BackgroundEffect.Blur],
                StartBackgroundEffectImageCount: this._startBackgroundEffectCount[u.BackgroundEffect.BackgroundImage],
                StopBackgroundEffectImageCount: this._stopBackgroundEffectCount[u.BackgroundEffect.BackgroundImage],
                DurationWithBackgroundEffectImageRatio: this._durationWithBackgroundEffectRatio[u.BackgroundEffect.BackgroundImage],
                PinToolbar: this._pinToolbar,
                UnpinToolbar: this._unpinToolbar,
                CouldGiveControl: this._couldGiveControl,
                NoiseSuppressionMode: this._noiseSuppressionMode,
                HadBadQuality: !!this._badQualityCounts.size
            }, this._getBadQualityAttributes()), this._getDeviceCountsAttributes()), this._getPermissionAttributes()), this._getFullScreenBotAttributes());
            return o.isUndefined(this._params.timeBeforeFirstCallInSec) || (e.TimeBeforeFirstCallInSec = this._params.timeBeforeFirstCallInSec),
            o.isUndefined(this._params.source) || (e.source = this._params.source),
            o.assign(super.getAttributes(), e)
        }
        _getDeviceCountsAttributes() {
            return void 0 !== this._micCount && void 0 !== this._speakerCount && void 0 !== this._cameraCount ? {
                MicCount: this._micCount,
                SpeakerCount: this._speakerCount,
                CameraCount: this._cameraCount
            } : {}
        }
        _getPermissionAttributes() {
            return void 0 !== this._micPermission && this._cameraPermission,
            {}
        }
        _getFullScreenBotAttributes() {
            return {
                WasLargeGridBotOnCall: this._startLargeGridMode,
                WasAbleToStartLargeGridBot: this._ableToStartLargeGridMode,
                WasTogetherModeBotOnCall: this._startTogetherMode,
                WasAbleToStartTogetherModeBot: this._ableToStartTogetherMode
            }
        }
        _getBadQualityAttributes() {
            const e = {};
            return this._badQualityCounts.forEach((t,i)=>e[r.QualityEventType[i]] = t),
            e
        }
        screenShareControlReceivedControlRequest() {
            this._screenShareControlReceivedControlRequestCount++
        }
        screenShareControlReceivedControlRequestCanceled() {
            this._screenShareControlReceivedControlRequestCanceledCount++
        }
        screenShareControlSentControlRequest() {
            this._screenShareControlSentControlRequestCount++
        }
        screenShareControlRequestAccepted() {
            this._screenShareControlRequestAcceptedCount++
        }
        screenShareControlRequestDenied() {
            this._screenShareControlRequestDeniedCount++
        }
        screenShareControlGranted() {
            this._screenShareControlGrantedCount++
        }
        screenShareControlSharerTerminatedControl() {
            this._screenShareControlSharerTerminatedControlCount++
        }
        screenShareControlViewerTerminatedControl() {
            this._screenShareControlViewerTerminatedControlCount++
        }
        pinToolbar() {
            this._pinToolbar++
        }
        unPinToolbar() {
            this._unpinToolbar++
        }
        setGiveControlAsPossible() {
            this._couldGiveControl = !0
        }
        setIsCallCreator(e) {
            this._params.isCallCreator = e
        }
        startVideo() {
            this._startVideoCount++
        }
        stopVideo() {
            this._stopVideoCount++
        }
        startScreenSharing() {
            this._startScreenSharingCount++
        }
        switchScreenWhileSharing() {
            this._switchScreenWhileSharingCount++
        }
        stopScreenSharing() {
            this._stopScreenSharingCount++
        }
        cancelScreenSharing() {
            this._cancelSreenSharingCount++
        }
        startSoundSharing() {
            this._startSoundSharingCount++
        }
        screenSharingDropped() {
            this._screenSharingDroppedCount++
        }
        screenSharingStolen() {
            this._screenSharingStolenCount++
        }
        orientationChanged(e) {
            e ? this._orientationLandscapeCount++ : this._orientationPortraitCount++
        }
        isConversationAccepted(e) {
            this._isConversationAccepted = e
        }
        isConversationAutoAccepted(e) {
            this._isConversationAutoAccepted = e
        }
        isEscalatedToGroup(e) {
            this._isEscalatedToGroup = e
        }
        escalationUserCount(e) {
            this._escalationUserCount = e
        }
        addUserToGroup() {
            this._addUsersToGroupCount += 1
        }
        addUsersToGroup(e) {
            this._addUsersToGroupCount += e
        }
        ringUserToCall() {
            this._ringUsersToCallCount += 1
        }
        ringUsersToCall(e) {
            this._ringUsersToCallCount += e
        }
        callAutoAnswered(e) {
            e ? this._autoAnsweredWithVideo = !0 : this._autoAnsweredWithAudio = !0
        }
        setWasSuspended() {
            this._wasSuspended = !0
        }
        setWasOffline() {
            this._wasOffline = !0
        }
        showedReconnectUI() {
            this._didShowReconnectUI = !0
        }
        showedPoorConnectionUI() {
            this._didShowPoorConnectionUI = !0
        }
        startActivityCount() {
            this._startActivityCount++
        }
        stopActivityCount() {
            this._stopActivityCount++
        }
        callConnectionType(e) {
            this._connectionType = o.isUndefined(e) ? r.ConnectionType.AllSupported : e
        }
        setMccMncCode(e, t) {
            this._mccCode = e || "",
            this._mncCode = t || ""
        }
        startRecordingCount() {
            this._startRecordingCount++
        }
        stopRecordingCount() {
            this._stopRecordingCount++
        }
        startNdiCount() {
            this._startNdiCount++
        }
        stopNdiCount() {
            this._stopNdiCount++
        }
        audioSystemResetCount() {
            this._audioSystemResetCount++
        }
        toggleVideoPressSuccessful() {
            this._totalSuccessfulToggleVideoPress++
        }
        toggleVideoPressIgored() {
            this._totalIgornedToggleVideoPress++
        }
        callRosterOpenedCount() {
            this._callRosterOpenedCount++
        }
        callRosterClosedCount() {
            this._callRosterClosedCount++
        }
        callRosterGetAllParticipantsFailedCount() {
            this._callRosterGetAllParticipantsFailedCount++
        }
        startAudioOnly() {
            this._audioOnlyStartedCount++
        }
        stopAudioOnly() {
            this._audioOnlyStoppedCount++
        }
        suggestAudioOnly() {
            this._audioOnlySuggestedCount++
        }
        enableIncomingVideoCount() {
            this._enabledIncomingVideoCount++
        }
        disableIncomingVideoCount() {
            this._disabledIncomingVideoCount++
        }
        displayScreenSharingDialogCount() {
            this._displayScreenSharingDialogCount++
        }
        didUserDisplayScreenSharingDialog() {
            this._didUserDisplayScreenSharingDialog = !0
        }
        wholeScreenSharedCount() {
            this._wholeScreenSharedCount++
        }
        appWindowSharedCount() {
            this._appWindowSharedCount++
        }
        ufdDisplayed(e) {
            switch (e) {
            case l.ToastActionType.Actioned:
                this._actionedUFDCount++;
                break;
            case l.ToastActionType.AutoDismissed:
                this._autoDismisssedUFDCount++;
                break;
            case l.ToastActionType.ManualDismissed:
                this._manualDismissedUFDCount++
            }
            this._totalUFDCount++
        }
        navBarOpened() {
            this._navBarOpenedCount++
        }
        navBarClosed() {
            this._navBarClosedCount++
        }
        setIsPSTNCall(e) {
            this._isPSTNCall = e
        }
        setGroupMemberCount(e) {
            this._groupMemberCount = e
        }
        setMaxConnectedParticipants(e) {
            e > this._maxConnectedParticipants && (this._maxConnectedParticipants = e)
        }
        setDurationInSoloMode(e) {
            0 === this._soloModeDurationSeconds && (this._soloModeDurationSeconds = e)
        }
        setIsGoLive(e) {
            this._isGoLive = e
        }
        chatOpened() {
            this._chatOpenedCount++
        }
        galleryOpened() {
            this._galleryOpenedCount++
        }
        startCaptioningCount() {
            this._startCaptioningCount++
        }
        stopCaptioningCount() {
            this._stopCaptioningCount++
        }
        failedCaptioningConfigCount() {
            this._failedCaptioningConfigCount++
        }
        startBackgroundBlur() {
            this._startBackgroundBlurCount++
        }
        stopBackgroundBlur() {
            this._stopBackgroundBlurCount++
        }
        setBackgroundBlurDurationRatio(e) {
            this._durationWithBackgroundBlurRatio = e
        }
        startBackgroundEffect(e) {
            const t = e === u.BackgroundEffect.Blur ? u.BackgroundEffect.Blur : u.BackgroundEffect.BackgroundImage;
            this._startBackgroundEffectCount[t] = this._startBackgroundEffectCount[t] + 1
        }
        stopBackgroundEffect(e) {
            const t = e === u.BackgroundEffect.Blur ? u.BackgroundEffect.Blur : u.BackgroundEffect.BackgroundImage;
            this._stopBackgroundEffectCount[t] = this._stopBackgroundEffectCount[t] + 1
        }
        setBackgroundEffectDurationRatio(e, t) {
            const i = t === u.BackgroundEffect.Blur ? u.BackgroundEffect.Blur : u.BackgroundEffect.BackgroundImage;
            this._durationWithBackgroundEffectRatio[i] = e
        }
        startSpeakerView() {
            this._startSpeakerViewCount++
        }
        stopSpeakerView() {
            this._stopSpeakerViewCount++
        }
        setSpeakerViewDurationRatio(e) {
            this._durationInSpeakerViewRatio = e
        }
        callMergeRequested() {
            this._callMergeRequested++
        }
        callMergeSucceed() {
            this._callMergeSucceed++
        }
        zoomedIn() {
            this._zoomedInCount++
        }
        zoomedOut() {
            this._zoomedOutCount++
        }
        accessedDialpad() {
            this._accessedDialpadCount++
        }
        displayedDtmfWarning() {
            this._displayedDtmfWarningCount++
        }
        setBadQuality(e) {
            this._badQualityCounts.set(e, (this._badQualityCounts.get(e) || 0) + 1)
        }
        setCameraCount(e) {
            this._cameraCount = e
        }
        setMicCount(e) {
            this._micCount = e
        }
        setSpeakerCount(e) {
            this._speakerCount = e
        }
        setCameraPermission(e) {
            this._cameraPermission = e
        }
        setMicPermission(e) {
            this._micPermission = e
        }
        startTogetherMode() {
            this._startTogetherMode = !0
        }
        startLargeGrid() {
            this._startLargeGridMode = !0
        }
        ableToStartTogetherMode() {
            this._ableToStartTogetherMode = !0
        }
        ableToStartLargeGrid() {
            this._ableToStartLargeGridMode = !0
        }
        setNoiseSuppressionMode(e) {
            this._noiseSuppressionMode = e
        }
    }
    ;
    class S extends h.TelemetryEventBase {
        constructor() {
            super()
        }
        getEventName() {
            return "calling_action"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Action: this.getActionName()
            })
        }
    }
    t.CallActionBase = S;
    var C, y, f, _, b, v, T, P, A, k, I, w, N, M, E, x;
    t.CallActionPushNotification = class extends S {
        constructor(e, t, i) {
            super(),
            this._info = e,
            this._nodeId = t,
            this._registrationId = i
        }
        getActionName() {
            return "PushNotification"
        }
        getAttributes() {
            const e = {
                EventType: this._info.eventType,
                CallId: this._info.callId,
                RegistrationId: this._registrationId || "",
                NodeId: this._nodeId || "",
                IsStarted: this._info.isStarted,
                Source: this._info.source,
                TimeWaitingToProcess: Math.max(0, this._info.pushProcessedTime - this._info.pushReceivedTime),
                HasRegistered: this._info.hasRegistered,
                ActivationState: s.Types.AppActivationState[s.App.getActivationState()],
                StopRingReason: this._info.stopRingReason || ""
            };
            return this._info.participantId && (e.ParticipantId = this._info.participantId),
            o.assign(super.getAttributes(), e)
        }
    }
    ,
    function(e) {
        e[e.None = 0] = "None",
        e[e.Stale = 1] = "Stale",
        e[e.UpToDate = 2] = "UpToDate"
    }(C = t.CallActionTokenState || (t.CallActionTokenState = {}));
    t.CallActionTokenRequested = class extends S {
        constructor(e, t, i, n, o) {
            super(),
            this._nodeId = e,
            this._upToDateToken = t,
            this._hasConnectedToCall = i,
            this._hasOutgoingCall = n,
            this._hasIncomingCall = o
        }
        getActionName() {
            return "TokenRequested"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                NodeId: this._nodeId,
                TokenState: C[this._upToDateToken],
                HasConnectedCall: this._hasConnectedToCall,
                HasOutgoingCall: this._hasOutgoingCall,
                HasIncomingCall: this._hasIncomingCall
            })
        }
    }
    ;
    t.CallActionEnterFromCallCard = class extends S {
        getActionName() {
            return "EnterFromCallCard"
        }
    }
    ;
    t.CallActionInviteFreeDecline = class extends S {
        constructor(e) {
            super(),
            this._callId = e
        }
        getActionName() {
            return "InviteFreeDecline"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId
            })
        }
    }
    ;
    t.InCallReaction = class extends S {
        constructor(e, t) {
            super(),
            this._reactionKey = e,
            this._reactionType = t
        }
        getActionName() {
            return "InCallReaction"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                ReactionKey: this._reactionKey,
                ReactionType: this._reactionType
            })
        }
    }
    ;
    t.OverflowMenuOpenedEvent = class extends S {
        constructor(e, t, i) {
            super(),
            this._totalUserActionsCount = e,
            this._firstUserAction = t,
            this._secondUserAction = i
        }
        getActionName() {
            return "OverflowMenuOpened"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                TotalUserActionsCount: this._totalUserActionsCount,
                FirstUserAction: this._firstUserAction,
                SecondUserAction: this._secondUserAction
            })
        }
    }
    ;
    t.InCallUFD = class extends S {
        constructor(e, t, i) {
            super(),
            this._callId = e,
            this._type = t,
            this._actionType = i
        }
        getActionName() {
            return "InCallUFD"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                UFDType: l.DeviceStatusToastType[this._type],
                UFDActionType: l.ToastActionType[this._actionType]
            })
        }
    }
    ;
    t.InCallActivity = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._correlationId = t
        }
        getActionName() {
            return "InCallActivity"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                CorrelationId: this._correlationId
            })
        }
    }
    ;
    t.CallActionError = class extends S {
        constructor(e, t, i) {
            super(),
            this._error = e,
            this._nodeId = t,
            this._registrationId = i
        }
        getActionName() {
            return "Error"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                NodeId: this._nodeId || "",
                RegistrationId: this._registrationId || "",
                CallAction: this._error.action,
                ErrorMessage: this._error.message,
                CallValidationFaillureReason: this._error.validationReason ? a.CallValidationFailureReason[this._error.validationReason] : "",
                CallTerminatedReason: this._error.terminatedReason,
                CallFailureType: this._error.failureType
            })
        }
    }
    ;
    t.CallActionCallKitError = class extends S {
        constructor(e, t, i, n, o, s) {
            super(),
            this._operation = e,
            this._errorDomain = t,
            this._errorCode = i,
            this._callId = n,
            this._nodeId = o,
            this._terminal = s
        }
        getActionName() {
            return "CallKitError"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId || "",
                NodeId: this._nodeId || "",
                Operation: this._operation || "",
                ErrorDomain: this._errorDomain,
                ErrorCode: this._errorCode,
                Terminal: this._terminal
            })
        }
    }
    ;
    t.CallActionCallKitSuccess = class extends S {
        constructor(e, t, i) {
            super(),
            this._operation = e,
            this._result = t,
            this._attemptNumber = i
        }
        getActionName() {
            return "CallKitSuccess"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Operation: this._operation,
                Result: this._result,
                AttemptNumber: this._attemptNumber
            })
        }
    }
    ;
    t.CallActionCalleeUserPresence = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._userPresence = t
        }
        getActionName() {
            return "CallActionCalleeUserPresence"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                UserStatus: this._userPresence.status || "",
                Availabililty: this._userPresence.availability || "",
                LastSeenAtUtc: this._userPresence.lastSeenAtUtc || ""
            })
        }
    }
    ;
    class D extends h.TelemetryEventBase {
        constructor(e, t, i=!1) {
            super(),
            this._callId = e,
            this._origin = t,
            this._isRejoin = i
        }
        getEventName() {
            return "calling_call_entry_point"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                Origin: u.NavigationCallOrigin[this._origin],
                IsRejoiningCall: this._isRejoin
            })
        }
    }
    t.CallEntryPoint = D;
    class L extends h.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._date = e,
            this._dispostion = t
        }
        getEventName() {
            return "calling_warm_call_notification"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Date: this._date,
                Disposition: this._dispostion
            })
        }
    }
    t.WarmCalNotificationDisposition = L;
    class R extends h.TelemetryEventBase {
        constructor(e, t, i, n, o, s, r, a, l, c) {
            super(),
            this._callId = e,
            this._endpointId = t,
            this._nodeId = i,
            this._participantId = n,
            this._score = o,
            this._problemTokens = s,
            this._questionaryId = r,
            this._trackingReason = a,
            this._cdrId = l,
            this._maxConnectedParticipants = c
        }
        getEventName() {
            return "mdsc_call_quality_feedback"
        }
        getAriaTenantTokenOverride() {
            return g.getAriaCQFTenantToken()
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.uiVersion = g.getUIVersion(),
            e.call_id = this._callId,
            e.participant_id = this._participantId,
            this._nodeId && (e.nodeId = this._nodeId),
            this._endpointId && (e.endpoint_id = this._endpointId),
            this._score && (e.call_mos_score = this._score - 1),
            this._problemTokens && (e.call_mos_score_problem_tokens = this._problemTokens),
            this._cdrId && (e.call_mos_score_cdr_id = this._cdrId),
            e.call_mos_score_questionary_id = this._questionaryId,
            e.call_mos_score_tracking_reason = this._trackingReason,
            e.call_max_connected_participants = this._maxConnectedParticipants,
            e
        }
    }
    t.CQF = R,
    function(e) {
        e[e.Cancel = 0] = "Cancel",
        e[e.JoinWithVideo = 1] = "JoinWithVideo",
        e[e.JoinWithoutVideo = 2] = "JoinWithoutVideo"
    }(y = t.CallPreviewActions || (t.CallPreviewActions = {}));
    t.CallPreviewEvent = class extends S {
        constructor(e, t=!1, i=!1, n=!1, o) {
            super(),
            this._callPreviewActions = e,
            this._isCameraChanged = t,
            this._isMicrophoneMuted = i,
            this._isBlurred = n,
            this._callId = o
        }
        getActionName() {
            return "CallPreview"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallPreviewActions: y[this._callPreviewActions],
                IsCameraChanged: this._isCameraChanged,
                IsMicrophoneMuted: this._isMicrophoneMuted,
                IsBlurred: this._isBlurred,
                CallId: this._callId
            })
        }
    }
    ;
    t.RingTheGroupEvent = class extends S {
        constructor(e) {
            super(),
            this._callId = e
        }
        getActionName() {
            return "RingTheGroup"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId
            })
        }
    }
    ;
    t.ScreenSharingStoppedEvent = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._origin = t
        }
        getActionName() {
            return "ScreenSharingStopped"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                Origin: this._origin
            })
        }
    }
    ,
    function(e) {
        e[e.Cancel = 0] = "Cancel",
        e[e.ContinueWithCall = 1] = "ContinueWithCall"
    }(f = t.RinglessCallInterstitialActions || (t.RinglessCallInterstitialActions = {}));
    t.RinglessCallInterstitialEvent = class extends S {
        constructor(e, t=!1) {
            super(),
            this._ringlessCallInterstitialActions = e,
            this._isLargeGroup = t
        }
        getActionName() {
            return "RinglessCallInterstitial"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                RinglessCallInterstitialActions: f[this._ringlessCallInterstitialActions],
                IsLargeGroup: this._isLargeGroup
            })
        }
    }
    ;
    t.UnansweredCallActionEvent = class extends S {
        constructor(e, t, i, n, o, s) {
            super(),
            this._callId = e,
            this._nodeId = t,
            this._terminatedReason = i,
            this._failureType = n,
            this._ucuxReason = o,
            this._ucuxAction = s
        }
        getActionName() {
            return "UnansweredCallActionEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId || "",
                NodeId: this._nodeId || "",
                CallingTerminatedReason: this._terminatedReason,
                CallingFailureType: this._failureType,
                UcuxReason: a.UnansweredCallReason[this._ucuxReason],
                UcuxAction: a.UnansweredCallAction[this._ucuxAction]
            })
        }
    }
    ;
    t.CallCrashEvent = class extends S {
        constructor(e, t, i, n, o) {
            super(),
            this._callId = e,
            this._state = t,
            this._nodeId = i,
            this._participantId = n,
            this._endpointId = o
        }
        getActionName() {
            return "CallCrash"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                CallState: this._state,
                NodeId: this._nodeId || "",
                ParticipantId: this._participantId || "",
                EndpointId: this._endpointId || ""
            })
        }
    }
    ;
    t.VideoSuggestionTooltipEvent = class extends S {
        constructor(e) {
            super(),
            this._callId = e,
            this._didTurnOnVideo = !1
        }
        getActionName() {
            return "VideoSuggestionTooltipEvent"
        }
        markDidTurnOnVideo() {
            this._didTurnOnVideo = !0
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                DidTurnOnVideo: this._didTurnOnVideo
            })
        }
    }
    ;
    t.CallAudioSettingsPopup = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._isTouch = t,
            this._didChangeMicDevice = !1,
            this._didChangeSpeakerDevice = !1,
            this._didAdjustSpeakerVolume = !1,
            this._didAdjustMicVolume = !1
        }
        getActionName() {
            return "CallAudioSettingsPopup"
        }
        markDidChangeMicDevice() {
            this._didChangeMicDevice = !0
        }
        markDidChangeSpeakerDevice() {
            this._didChangeSpeakerDevice = !0
        }
        markDidAdjustSpeakerVolume() {
            this._didAdjustSpeakerVolume = !0
        }
        markDidAdjustMicVolume() {
            this._didAdjustMicVolume = !0
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                IsTouch: this._isTouch,
                DidChangeMicDevice: this._didChangeMicDevice,
                DidChangeSpeakerDevice: this._didChangeSpeakerDevice,
                DidAdjustSpeakerVolume: this._didAdjustSpeakerVolume,
                DidAdjustMicVolume: this._didAdjustMicVolume
            })
        }
    }
    ;
    t.CallVideoSettingsPopup = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._isTouch = t,
            this._didChangeCameraDevice = !1,
            this._toggleBlurOnCount = 0,
            this._toggleBlurOffCount = 0
        }
        getActionName() {
            return "CallVideoSettingsPopup"
        }
        markDidChangeCameraDevice() {
            this._didChangeCameraDevice = !0
        }
        toggleBlurOn() {
            this._toggleBlurOnCount++
        }
        toggleBlurOff() {
            this._toggleBlurOffCount++
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                IsTouch: this._isTouch,
                DidChangeCameraDevice: this._didChangeCameraDevice,
                ToggleBlurOnCount: this._toggleBlurOnCount,
                ToggleBlurOffCount: this._toggleBlurOffCount
            })
        }
    }
    ;
    t.Zoom = class extends S {
        constructor() {
            super()
        }
        getActionName() {
            return "Zoomed"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {})
        }
    }
    ;
    t.CallRosterSession = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._callRosterOrigin = t,
            this._callRosterRemovedUserCount = 0,
            this._callRosterMutedUserCount = 0,
            this._callRosterRangUserCount = 0,
            this._callRosterAddToCallCount = 0,
            this._callRosterJoinLinkCount = 0,
            this._callRosterRingTheGroupCount = 0,
            this._isCanceled = !1
        }
        setIsCanceled(e) {
            this._isCanceled = e
        }
        getActionName() {
            return "InCallRosterSession"
        }
        callRosterRemovedUser() {
            this._callRosterRemovedUserCount++
        }
        callRosterMutedUser() {
            this._callRosterMutedUserCount++
        }
        callRosterRangUser() {
            this._callRosterRangUserCount++
        }
        callRosterAddToCall() {
            this._callRosterAddToCallCount++
        }
        callRosterJoinLink() {
            this._callRosterJoinLinkCount++
        }
        callRosterRingTheGroup() {
            this._callRosterRingTheGroupCount++
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Action: this.getActionName(),
                CallId: this._callId,
                Origin: l.CallRosterOrigin[this._callRosterOrigin],
                IsCanceled: this._isCanceled,
                CallRosterAddToCallCount: this._callRosterAddToCallCount,
                CallRosterJoinLinkCount: this._callRosterJoinLinkCount,
                CallRosterMutedUserCount: this._callRosterMutedUserCount,
                CallRosterRangUserCount: this._callRosterRangUserCount,
                CallRosterRemovedUserCount: this._callRosterRemovedUserCount,
                CallRosterRingTheGroupCount: this._callRosterRingTheGroupCount
            })
        }
    }
    ,
    function(e) {
        e[e.FailedToParsePayload = 0] = "FailedToParsePayload",
        e[e.AcknowledgeFailed = 1] = "AcknowledgeFailed",
        e[e.CallerNotAllowed = 2] = "CallerNotAllowed",
        e[e.InvalidNotification = 3] = "InvalidNotification",
        e[e.WrongRecipient = 4] = "WrongRecipient",
        e[e.HandshakeNotCompleted = 5] = "HandshakeNotCompleted",
        e[e.DecryptionFailed = 6] = "DecryptionFailed",
        e[e.GoGoNetwork = 7] = "GoGoNetwork",
        e[e.CallerNotContact = 8] = "CallerNotContact",
        e[e.RedundantNotification = 9] = "RedundantNotification",
        e[e.LackedLocalPermission = 10] = "LackedLocalPermission"
    }(t.IncomingCallEndReason || (t.IncomingCallEndReason = {})),
    function(e) {
        e[e.NotificationReceived = 0] = "NotificationReceived",
        e[e.WaitingForCallingStartup = 1] = "WaitingForCallingStartup",
        e[e.BeginAcknowledge = 2] = "BeginAcknowledge",
        e[e.CompleteAcknowledge = 3] = "CompleteAcknowledge"
    }(t.IncomingCallStep || (t.IncomingCallStep = {})),
    function(e) {
        e[e.RejectedByCallee = 0] = "RejectedByCallee",
        e[e.NotifyingCalleeFailed = 1] = "NotifyingCalleeFailed",
        e[e.AnsweringCallFailed = 2] = "AnsweringCallFailed",
        e[e.StopRingerNotificationReceived = 3] = "StopRingerNotificationReceived",
        e[e.Error = 4] = "Error",
        e[e.DNDEnabled = 5] = "DNDEnabled"
    }(t.AnswerCallEndReason || (t.AnswerCallEndReason = {})),
    function(e) {
        e[e.InAppBanner = 0] = "InAppBanner",
        e[e.InAppFullScreen = 1] = "InAppFullScreen",
        e[e.OSNotification = 2] = "OSNotification",
        e[e.DesktopCallNotification = 3] = "DesktopCallNotification",
        e[e.CallInteractionManager = 4] = "CallInteractionManager"
    }(t.AnswerCallNotificationLocation || (t.AnswerCallNotificationLocation = {})),
    function(e) {
        e[e.NotifyingCallee = 0] = "NotifyingCallee",
        e[e.CalleeAnsweredWithAudio = 1] = "CalleeAnsweredWithAudio",
        e[e.CalleeAnsweredWithVideo = 2] = "CalleeAnsweredWithVideo",
        e[e.CalleeRejected = 3] = "CalleeRejected"
    }(t.AnswerCallStep || (t.AnswerCallStep = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.Gallery = 1] = "Gallery",
        e[e.MessageStream = 2] = "MessageStream",
        e[e.SharedPhoto = 3] = "SharedPhoto",
        e[e.OverflowMenu = 4] = "OverflowMenu"
    }(t.CallActivitiesEntryPoint || (t.CallActivitiesEntryPoint = {})),
    function(e) {
        e[e.ChatOverflow = 0] = "ChatOverflow",
        e[e.MessageComposer = 1] = "MessageComposer",
        e[e.OverflowMenu = 2] = "OverflowMenu",
        e[e.Stage = 3] = "Stage",
        e[e.CallGalleryEmptyView = 4] = "CallGalleryEmptyView"
    }(_ = t.CallAddPhotosEntryPoint || (t.CallAddPhotosEntryPoint = {}));
    class B extends S {
        constructor(e, t, i) {
            super(),
            this._callId = e,
            this._isGroupCall = t,
            this._origin = i
        }
        setPhotosSent(e) {
            this._photosSent = e
        }
        setFromMediaPicker(e) {
            this._fromMediaPicker = e
        }
        setMediaPickerPhotosSelected(e) {
            this._mediaPickerPhotosSelected = e
        }
        setPhotoTaken(e) {
            this._wasPhotoTaken = e
        }
        setNumberOfPhotos(e) {
            this._photosCount = e
        }
        getActionName() {
            return "CallAddPhotosBaseEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                IsGroupCall: this._isGroupCall,
                PhotosSent: !!this._photosSent,
                FromMediaPicker: !!this._fromMediaPicker,
                MediaPickerPhotosSelected: !!this._mediaPickerPhotosSelected,
                WasPhotoTaken: !!this._wasPhotoTaken,
                PhotosCount: this._photosCount || 0,
                Origin: _[this._origin]
            })
        }
    }
    t.CallAddPhotosEvent = class extends B {
        getActionName() {
            return "CallAddPhotosEvent"
        }
    }
    ;
    t.CallAddPhotosWithFabEvent = class extends B {
        getActionName() {
            return "CallAddPhotosWithFabEvent"
        }
    }
    ;
    t.CallFullScreenBotEvent = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._botType = t,
            this._enableVideo = !1,
            this._botOnCallUselessLengthSeconds = 0,
            this._botOnCallUselessTime = 0
        }
        getActionName() {
            return `Call${this._botType}Event`
        }
        setBotOnCallLengthSeconds(e) {
            this._botOnCallLengthSeconds = e
        }
        addBotOnCallUselessLengthSeconds(e) {
            this._botOnCallUselessLengthSeconds += e
        }
        getBotOnCallUselessTime() {
            return this._botOnCallUselessTime
        }
        setBotOnCallUselessTime(e) {
            this._botOnCallUselessTime = e
        }
        setEnableVideo() {
            this._enableVideo = !0
        }
        setMaxConnectedParticipants(e) {
            (!this._maxConnectedParticipants || e > this._maxConnectedParticipants) && (this._maxConnectedParticipants = e)
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                DidEnableVideo: this._enableVideo,
                BotOnCallSeconds: this._botOnCallLengthSeconds || 0,
                BotOnCallUselessSeconds: this._botOnCallUselessLengthSeconds,
                MaxConnectedParticipants: this._maxConnectedParticipants || 0
            })
        }
    }
    ;
    t.CallFullScreenBotError = class extends S {
        constructor(e, t, i) {
            super(),
            this._errorCode = e,
            this._callId = t,
            this._botType = i
        }
        getActionName() {
            return "CallFullScreenBotError"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId || "",
                ErrorCode: this._errorCode,
                BotType: this._botType
            })
        }
    }
    ;
    t.CallRecordingEvent = class extends S {
        constructor(e) {
            super(),
            this._callId = e,
            this._screenShare = !1,
            this._enableVideo = !1
        }
        getActionName() {
            return "CallRecordingEvent"
        }
        recordingLengthSeconds(e) {
            this._recordingLengthSeconds = e
        }
        setScreenShare() {
            this._screenShare = !0
        }
        setEnableVideo() {
            this._enableVideo = !0
        }
        setMaxConnectedParticipants(e) {
            (!this._maxConnectedParticipants || e > this._maxConnectedParticipants) && (this._maxConnectedParticipants = e)
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                RecordingLengthSeconds: this._recordingLengthSeconds || 0,
                DidScreenShare: this._screenShare,
                DidEnableVideo: this._enableVideo,
                MaxConnectedParticipants: this._maxConnectedParticipants || 0
            })
        }
    }
    ;
    t.NdiBroadcastEvent = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._maxConnectedParticipantsCount = t,
            this._wasVideoEverEnabled = !1
        }
        getActionName() {
            return "NdiBroadcastEvent"
        }
        setBroadcastingLengthSeconds(e) {
            this._broadcastingDurationSeconds = e
        }
        setWatermarkLocation(e) {
            this._watermarkLocation = e
        }
        observeVideoEnabled() {
            this._wasVideoEverEnabled = !0
        }
        setMaxConnectedParticipants(e) {
            e > this._maxConnectedParticipantsCount && (this._maxConnectedParticipantsCount = e)
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                WasVideoEverEnabled: this._wasVideoEverEnabled,
                BroadcastingDurationSeconds: this._broadcastingDurationSeconds || 0,
                MaxConnectedParticipantsCount: this._maxConnectedParticipantsCount || 0,
                LastWatermarkLocation: this._watermarkLocation || ""
            })
        }
    }
    ;
    t.CallAddToCallEvent = class extends S {
        constructor(e, t, i, n, o) {
            super(),
            this._callId = e,
            this._isGroupCall = t,
            this._hasCoachmark = i,
            this._isPSTN = n,
            this._origin = o
        }
        getActionName() {
            return "AddToCallEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                IsGroupCall: this._isGroupCall,
                HasCoachmark: this._hasCoachmark,
                IsPSTN: this._isPSTN,
                Origin: this._origin
            })
        }
    }
    ,
    function(e) {
        e[e.ContextMenu = 0] = "ContextMenu",
        e[e.OverflowMenu = 1] = "OverflowMenu"
    }(t.MuteEveryoneOrigin || (t.MuteEveryoneOrigin = {}));
    t.CallMuteEveryoneEvent = class extends S {
        constructor(e) {
            super(),
            this._origin = e
        }
        getActionName() {
            return "MuteEveryone"
        }
        getAttributes() {
            return Object.assign(Object.assign({}, super.getAttributes()), {
                Origin: this._origin
            })
        }
    }
    ,
    function(e) {
        e[e.InitiatorMetadataUnavailable = 0] = "InitiatorMetadataUnavailable",
        e[e.InvalidToken = 1] = "InvalidToken"
    }(b = t.CallRecorderBotDebugEventType || (t.CallRecorderBotDebugEventType = {}));
    t.CallRecorderBotDebugEvent = class extends S {
        constructor(e, t) {
            super(),
            this._type = e,
            this._properties = t
        }
        getActionName() {
            return "CallRecorderBotDebugEvent"
        }
        getAttributes() {
            const e = {
                CallRecorderBotDebugEventType: b[this._type]
            };
            return o.assign(e, this._properties),
            o.assign(super.getAttributes(), e)
        }
    }
    ,
    function(e) {
        e[e.SetConfigFailed = 0] = "SetConfigFailed",
        e[e.SetConfigSucceeded = 1] = "SetConfigSucceeded"
    }(v = t.CallTranslatorDebugEventType || (t.CallTranslatorDebugEventType = {}));
    t.CallTranslatorDebugEvent = class extends S {
        constructor(e, t, i) {
            super(),
            this._type = e,
            this._errorCode = t,
            this._errorMessage = i
        }
        getActionName() {
            return "CallTranslatorDebug"
        }
        getAttributes() {
            var e, t;
            const i = {
                CallTranslatorDebugEventType: v[this._type],
                ErrorCode: (e = this._errorCode,
                null != e ? e : ""),
                ErrorMessage: (t = this._errorMessage,
                null != t ? t : "")
            };
            return o.assign(super.getAttributes(), i)
        }
    }
    ,
    function(e) {
        e[e.PopupShown = 0] = "PopupShown",
        e[e.Mute = 1] = "Mute",
        e[e.RemoveFromCall = 2] = "RemoveFromCall",
        e[e.CropVideo = 3] = "CropVideo",
        e[e.FullVideo = 4] = "FullVideo",
        e[e.SendMessage = 5] = "SendMessage",
        e[e.ViewProfile = 6] = "ViewProfile"
    }(T = t.CanvasAndRibbonActions || (t.CanvasAndRibbonActions = {}));
    t.CanvasAndRibbonActionsEvent = class extends S {
        constructor(e) {
            super(),
            this._action = e
        }
        getActionName() {
            return "CanvasAndRibbonActionsEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                UserAction: T[this._action]
            })
        }
    }
    ,
    function(e) {
        e[e.EnterFullScreen = 0] = "EnterFullScreen",
        e[e.ExitFullScreen = 1] = "ExitFullScreen"
    }(P = t.RibbonSettingsMenuActions || (t.RibbonSettingsMenuActions = {}));
    t.RibbonSettingsMenuActionEvent = class extends S {
        constructor(e) {
            super(),
            this._action = e
        }
        getActionName() {
            return "RibbonSettingsMenuEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                UserAction: P[this._action]
            })
        }
    }
    ,
    function(e) {
        e[e.EndCallPopupShown = 0] = "EndCallPopupShown",
        e[e.EndCallForEveryone = 1] = "EndCallForEveryone",
        e[e.LeaveCall = 2] = "LeaveCall"
    }(A = t.EndCallPopupActions || (t.EndCallPopupActions = {}));
    t.EndCallPopupMenuActionsEvent = class extends S {
        constructor(e) {
            super(),
            this._action = e
        }
        getActionName() {
            return "EndCallPopupMenuEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                UserAction: A[this._action]
            })
        }
    }
    ;
    t.CallCaptioningEvent = class extends S {
        constructor(e, t, i, n, o) {
            super(),
            this._callId = e,
            this._captioningSessionId = t,
            this._spokenLanguage = i,
            this._subtitleLanguage = n,
            this._isAutoJoin = o,
            this._subtitleHistoryViewCount = 0,
            this._tokenRefreshCount = 0
        }
        getActionName() {
            return "CallCaptioningEvent"
        }
        setCaptioningLengthSeconds(e) {
            this._captioningLengthSeconds = e
        }
        setMaxSenderCount(e) {
            (!this._maxSenderCount || e > this._maxSenderCount) && (this._maxSenderCount = e)
        }
        openSubtitleHistoryView() {
            this._subtitleHistoryViewCount++
        }
        tokenRefresh() {
            this._tokenRefreshCount++
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                CaptioningSessionId: this._captioningSessionId,
                CaptioningLengthSeconds: this._captioningLengthSeconds || 0,
                MaxSenderCount: this._maxSenderCount || 0,
                SpokenLanguage: this._spokenLanguage,
                SubtitleLanguage: this._subtitleLanguage,
                IsSubtitleLanguageDifferentFromSpokenLanguage: this._spokenLanguage !== this._subtitleLanguage,
                SubtitleHistoryViewCount: this._subtitleHistoryViewCount,
                TokenRefreshCount: this._tokenRefreshCount,
                IsAutoJoin: this._isAutoJoin
            })
        }
    }
    ,
    function(e) {
        e[e.PopupShown = 0] = "PopupShown",
        e[e.SwitchCamera = 1] = "SwitchCamera",
        e[e.TurnOnVideo = 2] = "TurnOnVideo",
        e[e.TurnOffVideo = 3] = "TurnOffVideo",
        e[e.Mute = 4] = "Mute",
        e[e.Unmute = 5] = "Unmute",
        e[e.BackgroundBlur = 6] = "BackgroundBlur",
        e[e.BackgroundUnBlur = 7] = "BackgroundUnBlur"
    }(k = t.LocalVideoActions || (t.LocalVideoActions = {})),
    function(e) {
        e[e.SwitchToSpeaker = 0] = "SwitchToSpeaker",
        e[e.SwitchToContent = 1] = "SwitchToContent",
        e[e.SwitchToPresentation = 2] = "SwitchToPresentation",
        e[e.SwitchToFloat = 3] = "SwitchToFloat",
        e[e.SwitchToWindow = 4] = "SwitchToWindow",
        e[e.EnterFullScreen = 5] = "EnterFullScreen",
        e[e.SwitchToModernGrid = 6] = "SwitchToModernGrid",
        e[e.SwitchToTogetherMode = 7] = "SwitchToTogetherMode",
        e[e.SwitchToLargeGallery = 8] = "SwitchToLargeGallery"
    }(I = t.CallViewMenuActions || (t.CallViewMenuActions = {}));
    t.LocalVideoActionsEvent = class extends S {
        constructor(e) {
            super(),
            this._action = e
        }
        getActionName() {
            return "LocalVideoActionsEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                UserAction: k[this._action]
            })
        }
    }
    ;
    class O extends h.TelemetryEventBase {
        constructor(e, t, i, n) {
            super(),
            this._hasActiveCall = e,
            this._predefinedImage = t,
            this._effectType = i,
            this._predefinedImageName = n
        }
        getEventName() {
            return "calling_background_effects_settings"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.EffectType = this._effectType,
            e.HasActiveCall = !!this._hasActiveCall,
            this._effectType === u.BackgroundEffect.BackgroundImage && (e.IsPredefinedImage = this._predefinedImage),
            this._predefinedImageName && (e.PredefinedImageName = this._predefinedImageName),
            o.assign(super.getAttributes(), e)
        }
    }
    t.BackgroundEffectsSettingsEvent = O;
    t.BackgroundBlurEvent = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._durationSecond = t
        }
        getActionName() {
            return "BackgroundBlurEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                BlurSessionDuration: this._durationSecond
            })
        }
    }
    ;
    t.BackgroundEffectEvent = class extends S {
        constructor(e, t, i) {
            super(),
            this._callId = e,
            this._durationSecond = t,
            this._type = i
        }
        getActionName() {
            return "BackgroundEffectEvent"
        }
        getAttributes() {
            const e = this._type === u.BackgroundEffect.Blur ? "BlurSessionDuration" : "BackgroundImageSessionDuration";
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                [e]: this._durationSecond
            })
        }
    }
    ,
    function(e) {
        e[e.None = 0] = "None",
        e[e.Navigate = 1] = "Navigate",
        e[e.Call = 2] = "Call"
    }(w = t.CallbackReminderTappedAction || (t.CallbackReminderTappedAction = {}));
    class F extends h.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._result = e,
            this._missedCallTime = t,
            this._notificationShownTime = i
        }
        getEventName() {
            return "CallbackReminderTapped"
        }
        getAttributes() {
            const e = Date.now();
            return o.assign(super.getAttributes(), {
                CallbackReminderTappedAction: w[this._result],
                TimeSinceMissedCallMinutes: (e - this._missedCallTime) / 6e4,
                TimeSinceReminderMinutes: (e - this._notificationShownTime) / 6e4
            })
        }
    }
    t.CallbackReminderTappedEvent = F,
    function(e) {
        e[e.Displayed = 0] = "Displayed",
        e[e.Pressed = 1] = "Pressed"
    }(N = t.IncomingVideoNotificationAction || (t.IncomingVideoNotificationAction = {}));
    class V extends h.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._origin = e,
            this._callId = t,
            this._action = i
        }
        getEventName() {
            return "calling_incoming_video_notification"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Origin: this._origin,
                CallId: this._callId,
                Action: N[this._action]
            })
        }
    }
    t.IncomingVideoNotification = V;
    t.ScreenShareSourceGetPreviewFailure = class extends S {
        constructor(e, t, i) {
            super(),
            this._error = e,
            this._sourceType = t,
            this._currentlyShared = i
        }
        getActionName() {
            return "GetPreview"
        }
        getEventName() {
            return "GetPreviewFailed"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Error: this._error,
                SourceType: this._sourceType,
                CurrentlyShared: this._currentlyShared
            })
        }
    }
    ;
    t.ScreenShareSourceGetIconFailure = class extends S {
        constructor(e, t) {
            super(),
            this._error = e,
            this._currentlyShared = t
        }
        getActionName() {
            return "GetIcon"
        }
        getEventName() {
            return "GetIconFailed"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Error: this._error,
                CurrentlyShared: this._currentlyShared
            })
        }
    }
    ;
    t.CallMergeEvent = class extends S {
        constructor(e, t, i) {
            super(),
            this._activeCallId = e,
            this._incomingCallId = t,
            this._succeed = i
        }
        getActionName() {
            return "CallMergeEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                ActiveCallId: this._activeCallId,
                IncomingCallId: this._incomingCallId,
                Succeed: this._succeed
            })
        }
    }
    ;
    class U extends h.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._startingRoute = e,
            this._endingRoute = t,
            this._changed = i
        }
        getEventName() {
            return "AudioOutputDeviceSwitcher"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                DidChangeOutputDevice: this._changed,
                StartingOutputDevice: this._startingRoute,
                EndingOutputDevice: this._endingRoute
            })
        }
    }
    t.AudioOutputRouteChangedEvent = U,
    function(e) {
        e[e.Accept = 0] = "Accept",
        e[e.Reject = 1] = "Reject",
        e[e.Mute = 2] = "Mute"
    }(M = t.SystemHotKeyCallAction || (t.SystemHotKeyCallAction = {}));
    t.SystemHotKeyCallEvent = class extends S {
        constructor(e) {
            super(),
            this._systemHotKeyCallAction = e
        }
        getActionName() {
            return "SystemHotKeyCall"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                SystemHotKeyCallAction: M[this._systemHotKeyCallAction]
            })
        }
    }
    ;
    t.SpeakerViewEvent = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._durationSecond = t
        }
        getActionName() {
            return "SpeakerView"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                CallId: this._callId,
                SpeakerViewSessionDuration: this._durationSecond
            })
        }
    }
    ;
    t.CallViewMenuActionEvent = class extends S {
        constructor(e) {
            super(),
            this._userAction = e
        }
        getActionName() {
            return "CallViewMenuAction"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                UserAction: I[this._userAction]
            })
        }
    }
    ;
    t.CallStageLayoutChangeEvent = class extends S {
        constructor(e, t, i) {
            super(),
            this._fromStageMode = e,
            this._toStageMode = t,
            this._isAutomatic = i
        }
        getActionName() {
            return "CallStageLayoutChange"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                FromStageMode: l.StageMode[this._fromStageMode],
                ToStageMode: l.StageMode[this._toStageMode],
                IsAutomatic: this._isAutomatic
            })
        }
    }
    ,
    function(e) {
        e[e.AnsweredWithAudio = 0] = "AnsweredWithAudio",
        e[e.AnsweredWithVideo = 1] = "AnsweredWithVideo",
        e[e.Declined = 2] = "Declined",
        e[e.DeclinedWithMessage = 3] = "DeclinedWithMessage"
    }(E = t.MobileCallAnswerActions || (t.MobileCallAnswerActions = {}));
    t.MobileCallAnswerEvent = class extends S {
        constructor(e, t) {
            super(),
            this._userAction = e,
            this._messageIndex = t
        }
        getActionName() {
            return "MobileCallAnswerEvent"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                UserAction: E[this._userAction],
                MessageSent: this._messageIndex
            })
        }
    }
    ,
    function(e) {
        e.MobileIncomingRingPanel = "MobileIncomingRingPanel",
        e.IncomingRingControls = "IncomingRingControls",
        e.DesktopCallControls = "DesktopCallControls",
        e.OngoingCallService = "OngoingCallService",
        e.MobileCallControls = "MobileCallControls"
    }(t.CallControlContext || (t.CallControlContext = {})),
    function(e) {
        e.Ignore = "Ignore",
        e.AnswerCall = "AnswerCall",
        e.EndCall = "EndCall"
    }(t.MediaActionEventResult || (t.MediaActionEventResult = {}));
    t.MediaActionEvent = class extends S {
        constructor(e, t) {
            super(),
            this._context = e,
            this._result = t
        }
        getActionName() {
            return "MediaAction"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Context: this._context,
                Result: this._result
            })
        }
    }
    ;
    t.MaybeEndCallFromAndroidBtScoDisconnectEvent = class extends S {
        constructor(e) {
            super(),
            this._context = e
        }
        getActionName() {
            return "MaybeEndCallFromAndroidBtScoDisconnect"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Context: this._context
            })
        }
    }
    ,
    function(e) {
        e[e.Enter = 0] = "Enter",
        e[e.Leave = 1] = "Leave"
    }(x = t.FullChatUXNavigation || (t.FullChatUXNavigation = {}));
    t.FullChatUXTelemetryEvent = class extends S {
        constructor(e, t, i) {
            super(),
            this._navigation = e,
            this._conversationId = t,
            this._callId = i
        }
        getActionName() {
            return "FullChatUX"
        }
        getNavigationName() {
            return x[this._navigation]
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Navigation = this.getNavigationName(),
            e.IsGroupConversation = d.isGroupConversation(this._conversationId),
            e.CallId = this._callId,
            e
        }
    }
    ;
    t.CancelPreheatedCallNotJoinedEvent = class extends S {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._terminatedReason = t
        }
        getActionName() {
            return "CancelPreheatedCallNotJoined"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CallId = this._callId,
            e.TerminatedReason = r.TerminatedReason[this._terminatedReason],
            e
        }
    }
    ;
    t.FallbackFromJoinPreheatedToRegularJoinEvent = class extends S {
        constructor(e) {
            super(),
            this._callId = e
        }
        getActionName() {
            return "FallbackFromJoinPreheatedToRegularJoin"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CallId = this._callId,
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(25)
      , s = ["png", "jpg", "jpeg", "gif", "heif", "heic"]
      , r = ["mp4", "webm", "mov"]
      , a = ["mp3", "wav", "m4a"]
      , l = ["txt", "pdf", "svg", "bmp", "tif", "tiff"]
      , c = ["doc", "docx"]
      , d = ["xls", "xlsx"]
      , u = ["ppt", "pptx"]
      , g = ["one"]
      , h = n.union(c, d, u, g, ["wopitest"]);
    class p {
        static extractFileNameWithExtension(e) {
            return e.replace(/^.*[\\\/]/, "")
        }
        static extractFileExtension(e, t=!0) {
            if (!e)
                return "";
            const i = e.lastIndexOf(".");
            let n = "";
            return i >= 0 && (n = e.substr(i + 1)),
            t && (n = n.toLowerCase()),
            n
        }
        static extractFileName(e) {
            const t = e.lastIndexOf(".");
            return t > 0 ? e.substr(0, t) : e
        }
        static extractFileNameForKnownFileTypes(e) {
            let t = p.extractFileExtension(e);
            return this.isKnownExtension(t) ? this.extractFileName(e) : e
        }
        static isInExtensionsList(e, t) {
            return n.includes(e, t.toLowerCase())
        }
        static isImageExtension(e) {
            return this.isInExtensionsList(s, e)
        }
        static isGifImageExtension(e) {
            return "gif" === e
        }
        static isAudioExtension(e) {
            return this.isInExtensionsList(a, e)
        }
        static isVideoExtension(e) {
            return this.isInExtensionsList(r, e)
        }
        static isExcelExtension(e) {
            return this.isInExtensionsList(d, e)
        }
        static isOneNoteExtension(e) {
            return this.isInExtensionsList(g, e)
        }
        static isPowerPointExtension(e) {
            return this.isInExtensionsList(u, e)
        }
        static isWordExtension(e) {
            return this.isInExtensionsList(c, e)
        }
        static isOfficeExtension(e) {
            return this.isInExtensionsList(h, e)
        }
        static isOtherKnowExtension(e) {
            return this.isInExtensionsList(l, e)
        }
        static isKnownExtension(e) {
            return this.isImageExtension(e) || this.isAudioExtension(e) || this.isVideoExtension(e) || this.isOfficeExtension(e) || this.isOtherKnowExtension(e)
        }
        static isImageMimeType(e) {
            return !!e && n.includes(p.imageContentTypes, e.toLowerCase())
        }
        static isSupportedImageFormat(e) {
            return e === p.imageContentTypes.jpeg
        }
        static getFileType(e) {
            return this.isImageExtension(e) ? o.UploadFileType.Picture : this.isVideoExtension(e) ? o.UploadFileType.Video : this.isAudioExtension(e) ? o.UploadFileType.Audio : this.isExcelExtension(e) ? o.UploadFileType.Excel : this.isOneNoteExtension(e) ? o.UploadFileType.OneNote : this.isPowerPointExtension(e) ? o.UploadFileType.Powerpoint : this.isWordExtension(e) ? o.UploadFileType.Word : o.UploadFileType.File
        }
        static getFileContentTypeFromExtension(e) {
            let t = "application/unknown";
            switch (e) {
            case "jpg":
            case "jpeg":
                t = p.imageContentTypes.jpeg;
                break;
            case "gif":
                t = p.imageContentTypes.gif;
                break;
            case "tif":
            case "tiff":
                t = p.imageContentTypes.tiff;
                break;
            case "png":
                t = p.imageContentTypes.png;
                break;
            case "mp4":
                t = "video/mp4";
                break;
            case "webm":
                t = "video/webm"
            }
            return t
        }
        static getFileContentType(e) {
            const t = this.extractFileExtension(e);
            return this.getFileContentTypeFromExtension(t)
        }
        static isThumbnailSupportedFileType(e) {
            switch (e) {
            case o.UploadFileType.Picture:
            case o.UploadFileType.Video:
            case o.UploadFileType.VideoMessage:
                return !0;
            default:
                return !1
            }
        }
    }
    p.imageContentTypes = {
        png: "image/png",
        jpeg: "image/jpeg",
        gif: "image/gif",
        svg: "image/svg",
        bmp: "image/bmp",
        tiff: "image/tiff",
        heif: "image/heif",
        heic: "image/heic"
    },
    p.htmlContentTypes = {
        textHtml: "text/html"
    },
    e.exports = p
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(42)
      , s = i(10)
      , r = i(80)
      , a = i(5)
      , l = i(4)
      , c = i(76)
      , d = i(66)
      , u = i(12)
      , g = i(457)
      , h = a.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch"
        })
    });
    class p extends u.default {
        constructor() {
            super(...arguments),
            this._onToggleSwitchRef = e=>{
                this._toggleSwitchRef = e || void 0
            }
            ,
            this._onComponentRef = e=>{
                this._componentRef = e || void 0
            }
            ,
            this._toggleButton = e=>{
                this.props.onChange && this.props.onChange(e, !this.props.isOn)
            }
            ,
            this._onAccessibilityTapIOS = e=>{
                e.stopPropagation(),
                this._toggleButton(e)
            }
            ,
            this._onPress = e=>{
                e.stopPropagation(),
                this._toggleButton(e)
            }
        }
        _buildState(e, t) {
            return {
                isMobileScreenReaderEnabled: c.default.isMobileScreenReaderEnabled()
            }
        }
        focusToggle() {
            this._componentRef ? this._componentRef.requestFocus() : this._toggleSwitchRef && this._toggleSwitchRef.requestFocus()
        }
        render() {
            const e = this.state.isMobileScreenReaderEnabled
              , t = this.props.showSpinner ? n.createElement(d.default, {
                size: s.SXActivityIndicatorSize.Small,
                tintColor: this._themeColors.primaryTextColor
            }) : n.createElement(g.default, {
                ref: this._onToggleSwitchRef,
                isOn: this.props.isOn,
                disableInteraction: e,
                disable: this.props.disable,
                overlayColorAndroid: this.props.overlayColorAndroid,
                accessibilityLabel: this.props.accessibilityLabel,
                onChange: this.props.onChange
            });
            if (e) {
                const e = this.props.isOn ? l.getString("ToggleSwitch.OnWithTextAccessibilityLabel", {
                    text: this.props.accessibilityLabel || ""
                }) : l.getString("ToggleSwitch.OffWithTextAccessibilityLabel", {
                    text: this.props.accessibilityLabel || ""
                })
                  , i = o.default.buttonAccessibilityInfo(e, !!this.props.disable);
                return n.createElement(n.Button, {
                    ref: this._onComponentRef,
                    style: h.container,
                    onPress: this.props.disable ? void 0 : this._onPress,
                    title: i.accessibilityLabel,
                    accessibilityTraits: i.accessibilityTraits,
                    onAccessibilityTapIOS: this.props.disable ? void 0 : this._onAccessibilityTapIOS,
                    disabled: this.props.disable
                }, n.createElement(r.default, {
                    style: this.props.style
                }, this.props.children, t))
            }
            return n.createElement(n.View, {
                style: this.props.style
            }, this.props.children, t)
        }
    }
    e.exports = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(5);
    t.styles = o.lazyProperties({
        controlRow: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            minHeight: 60,
            borderBottomWidth: 1
        }),
        titleMediumSemiLarge: ()=>n.Styles.createTextStyle({
            flex: 1,
            marginRight: 12
        }),
        switchTitleMediumSemiLarge: ()=>n.Styles.createTextStyle({
            flex: 1,
            marginRight: 12,
            marginTop: 4,
            marginBottom: 2
        }),
        subtitleMediumSemiLarge: ()=>n.Styles.createTextStyle({
            flex: 1,
            marginRight: 12,
            marginTop: 2,
            marginBottom: 4
        }),
        controlRowWithDescription: ()=>n.Styles.createViewStyle({
            paddingTop: 5,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            paddingBottom: 0,
            marginVertical: 0
        })
    })
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(7)
      , a = i(6)
      , l = i(2)
      , c = i(481)
      , d = i(3)
      , u = i(38)
      , g = i(21)
      , h = i(420);
    var p, m;
    !function(e) {
        e[e.SplashDisplayed = 0] = "SplashDisplayed",
        e[e.LoginDisplayed = 1] = "LoginDisplayed",
        e[e.StartupComplete = 2] = "StartupComplete"
    }(p = t.StartupUIState || (t.StartupUIState = {})),
    function(e) {
        e[e.CallingStatusKey = 0] = "CallingStatusKey",
        e[e.UIDisplayedKey = 1] = "UIDisplayedKey",
        e[e.LoginSessionKey = 2] = "LoginSessionKey",
        e[e.StartupUIStateKey = 3] = "StartupUIStateKey",
        e[e.SecondaryWindowLoginStateKey = 4] = "SecondaryWindowLoginStateKey"
    }(m = t.TriggerKeys || (t.TriggerKeys = {})),
    function(e) {
        e[e.MSALogin = 0] = "MSALogin",
        e[e.QuickSignOn = 1] = "QuickSignOn"
    }(t.SecondaryWindowLoginType || (t.SecondaryWindowLoginType = {}));
    let S = class extends s.StoreBase {
        constructor() {
            super(),
            this._isUIDisplayed = !1,
            this._telemetryServiceResumed = !1,
            this._telemetryServiceDebounce = o.debounce(()=>{
                this._telemetryServiceResumed = !0,
                h.resume()
            }
            , a.default.getS4LFeatures().scheduler.telemetryServiceResumeTimeout),
            this._inCall = !1,
            this._inMeetNowCall = !1,
            this._inCallEstablishment = !1,
            this._loggedInThisSession = !1,
            this._startupUIState = p.SplashDisplayed,
            this.subscribe(()=>{
                c.default.updateAppState({
                    uiDisplayed: this._isUIDisplayed
                })
            }
            , m.UIDisplayedKey),
            this.subscribe(()=>{
                c.default.updateAppState({
                    inCall: this._inCall,
                    inCallEstablishment: this._inCallEstablishment
                })
            }
            , m.CallingStatusKey)
        }
        test_reset() {
            this._isUIDisplayed = !1,
            this._inCall = !1,
            this._inCallEstablishment = !1,
            this._inMeetNowCall = !1,
            this._loggedInThisSession = !1
        }
        internal_uiIsDisplayed() {
            this._isUIDisplayed = !0,
            this.trigger(m.UIDisplayedKey)
        }
        internal_userLoggedIn() {
            this._loggedInThisSession = !0,
            this.trigger(m.LoginSessionKey)
        }
        internal_getLoginDisplayedParameters() {
            return this._loginDisplayedParameters
        }
        isUIDisplayed() {
            return this._isUIDisplayed
        }
        isLoginSession() {
            return this._loggedInThisSession
        }
        isInCallEstablishment() {
            return this._isInCallEstablishmentNoSubscription()
        }
        _isInCallEstablishmentNoSubscription() {
            return this._inCallEstablishment
        }
        isInMeetNowCall() {
            return this.isInCall() && this._inMeetNowCall
        }
        isInCall() {
            return this._isInCallNoSubscription()
        }
        _isInCallNoSubscription() {
            return this._inCall || this._inCallEstablishment
        }
        internal_setCallStatus(e, t=!1) {
            const i = e !== this._inCall || t !== this._inMeetNowCall;
            t !== this._inMeetNowCall && (d.log(l.LogTraceArea.Startup, "ServiceStateStore: Setting inMeetNowCall to " + t),
            this._inMeetNowCall = t),
            e !== this._inCall && (d.log(l.LogTraceArea.Startup, "ServiceStateStore: Setting inCall to " + e),
            this._inCall = e,
            this._maybeResolveCallingPromises()),
            i && this.trigger(m.CallingStatusKey)
        }
        internal_setCallEstablishmentStatus(e, t) {
            e !== this._inCallEstablishment && (d.log(l.LogTraceArea.Startup, "ServiceStateStore: Set inCallEstablishment to " + e + " reason: " + t),
            this._inCallEstablishment = e,
            a.default.getS4LFeatures().scheduler.enableTelemetryServiceThrottling && (e ? (this._telemetryServiceResumed = !1,
            h.pause(),
            this._telemetryServiceDebounce()) : (this._telemetryServiceDebounce.cancel(),
            this._telemetryServiceResumed || (this._telemetryServiceResumed = !0,
            h.resume()))),
            this._maybeResolveCallingPromises(),
            this.trigger(m.CallingStatusKey))
        }
        _maybeResolveCallingPromises() {
            if (this._whenNotInCall && !this._isInCallNoSubscription()) {
                const e = this._whenNotInCall;
                this._whenNotInCall = void 0,
                e.resolve(void 0)
            }
            if (this._whenNotInCallEstablishment && !this._isInCallEstablishmentNoSubscription()) {
                const e = this._whenNotInCallEstablishment;
                this._whenNotInCallEstablishment = void 0,
                e.resolve(void 0)
            }
        }
        performWhenNotInCallEstablishment() {
            return this._isInCallEstablishmentNoSubscription() ? (this._whenNotInCallEstablishment || (this._whenNotInCallEstablishment = r.Defer()),
            this._whenNotInCallEstablishment.promise()) : r.Resolved()
        }
        performWhenNotInCall() {
            return this._isInCallNoSubscription() ? (this._whenNotInCall || (this._whenNotInCall = r.Defer()),
            this._whenNotInCall.promise()) : r.Resolved()
        }
        startupAfterUIStarted(e) {
            this.performAfterUIStarted(()=>{
                g.EnsureStarted(e)
            }
            )
        }
        performAfterUIStarted(e) {
            if (this.isUIDisplayed())
                e();
            else {
                const t = this.subscribe(()=>{
                    e(),
                    this.unsubscribe(t)
                }
                , m.UIDisplayedKey)
            }
        }
        getStartupUIState() {
            return this._startupUIState
        }
        internal_setStartupUIState(e, t) {
            e === this._startupUIState && u.default(t, this._loginDisplayedParameters) || (d.log(l.LogTraceArea.Startup, "ServiceStateStore: Setting statup UI state to " + e),
            this._startupUIState = e,
            this._loginDisplayedParameters = t,
            this.trigger(m.StartupUIStateKey))
        }
        getSecondaryWindowLoginState() {
            return this._secondaryWindowLoginState
        }
        internal_setSecondaryWindowLoginState(e, t) {
            d.log(l.LogTraceArea.Startup, "ServiceStateStore: Setting secondary window login by " + e),
            this._secondaryWindowLoginState = {
                loginType: e,
                state: t
            },
            this.trigger(m.SecondaryWindowLoginStateKey)
        }
        internal_resetSecondaryWindowLoginState() {
            this._secondaryWindowLoginState = void 0
        }
    }
    ;
    n.__decorate([s.autoSubscribeWithKey(m.UIDisplayedKey)], S.prototype, "isUIDisplayed", null),
    n.__decorate([s.autoSubscribeWithKey(m.LoginSessionKey)], S.prototype, "isLoginSession", null),
    n.__decorate([s.autoSubscribeWithKey(m.CallingStatusKey)], S.prototype, "isInCallEstablishment", null),
    n.__decorate([s.autoSubscribeWithKey(m.CallingStatusKey)], S.prototype, "isInMeetNowCall", null),
    n.__decorate([s.autoSubscribeWithKey(m.CallingStatusKey)], S.prototype, "isInCall", null),
    n.__decorate([s.disableWarnings], S.prototype, "internal_setCallStatus", null),
    n.__decorate([s.disableWarnings], S.prototype, "internal_setCallEstablishmentStatus", null),
    n.__decorate([s.autoSubscribeWithKey(m.StartupUIStateKey)], S.prototype, "getStartupUIState", null),
    n.__decorate([s.disableWarnings], S.prototype, "internal_setStartupUIState", null),
    n.__decorate([s.autoSubscribeWithKey(m.SecondaryWindowLoginStateKey)], S.prototype, "getSecondaryWindowLoginState", null),
    n.__decorate([s.disableWarnings], S.prototype, "internal_setSecondaryWindowLoginState", null),
    S = n.__decorate([s.AutoSubscribeStore], S);
    let C = new S;
    if ("undefined" != typeof window) {
        window.ServiceStateStore = C
    }
    t.default = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.SendMessage = 0] = "SendMessage",
        e[e.SendRestoredMessage = 1] = "SendRestoredMessage",
        e[e.SendTextMessage = 2] = "SendTextMessage",
        e[e.SendPicture = 3] = "SendPicture",
        e[e.SendVideo = 4] = "SendVideo",
        e[e.SendAudioMessage = 5] = "SendAudioMessage",
        e[e.SendLocation = 6] = "SendLocation",
        e[e.SendMoji = 7] = "SendMoji",
        e[e.SendSticker = 8] = "SendSticker",
        e[e.SendFile = 9] = "SendFile",
        e[e.SendGif = 10] = "SendGif",
        e[e.InitialRecentsSync = 11] = "InitialRecentsSync",
        e[e.ReactionsSummary = 12] = "ReactionsSummary",
        e[e.ShowReactionsSummary = 13] = "ShowReactionsSummary",
        e[e.ReactionsMenuAccessable = 14] = "ReactionsMenuAccessable",
        e[e.ShowReactionsMenu = 15] = "ShowReactionsMenu",
        e[e.ReactionsMenu = 16] = "ReactionsMenu",
        e[e.OpenMojiPicker = 17] = "OpenMojiPicker",
        e[e.ShareToSkypeMedia = 18] = "ShareToSkypeMedia",
        e[e.ShareToSkypeText = 19] = "ShareToSkypeText",
        e[e.ForwardAdditionalText = 20] = "ForwardAdditionalText",
        e[e.OpenEmoticonPicker = 21] = "OpenEmoticonPicker",
        e[e.OpenDiversityPicker = 22] = "OpenDiversityPicker",
        e[e.AppStartup = 23] = "AppStartup",
        e[e.StreamFrom = 24] = "StreamFrom",
        e[e.IncomingCall = 25] = "IncomingCall",
        e[e.AnswerCall = 26] = "AnswerCall",
        e[e.Gallery = 27] = "Gallery",
        e[e.Search = 28] = "Search",
        e[e.PnvUI = 29] = "PnvUI",
        e[e.NewGroupChat = 30] = "NewGroupChat",
        e[e.PNH_Post = 31] = "PNH_Post",
        e[e.PNH_Delete = 32] = "PNH_Delete",
        e[e.PopCard = 33] = "PopCard",
        e[e.FirstRunCoachMark = 34] = "FirstRunCoachMark",
        e[e.SuggestionsConsent = 35] = "SuggestionsConsent",
        e[e.OpenChatStickerPicker = 36] = "OpenChatStickerPicker",
        e[e.EmergencyRestoreEndpoints = 37] = "EmergencyRestoreEndpoints",
        e[e.ChatServiceRequest = 38] = "ChatServiceRequest",
        e[e.TimeToConnected = 39] = "TimeToConnected",
        e[e.LoginAuth = 40] = "LoginAuth",
        e[e.EmoticonRendering = 41] = "EmoticonRendering",
        e[e.PesPickerOpen = 42] = "PesPickerOpen",
        e[e.OpenGifPicker = 43] = "OpenGifPicker",
        e[e.MessagePanelPip = 44] = "MessagePanelPip",
        e[e.CreateMeetNow = 45] = "CreateMeetNow",
        e[e.FirstLogin = 46] = "FirstLogin",
        e[e.Startup = 47] = "Startup",
        e[e.RenderCallControls = 48] = "RenderCallControls",
        e[e.RenderLocalCallReaction = 49] = "RenderLocalCallReaction",
        e[e.ShowCameraViewfinder = 50] = "ShowCameraViewfinder",
        e[e.PreviewSnappedPhoto = 51] = "PreviewSnappedPhoto",
        e[e.OpenContactsPanel = 52] = "OpenContactsPanel",
        e[e.OpenContactsPanelV2 = 53] = "OpenContactsPanelV2",
        e[e.OpenFindPanel = 54] = "OpenFindPanel",
        e[e.OpenIntegration = 55] = "OpenIntegration",
        e[e.ViewMediaIntent = 56] = "ViewMediaIntent",
        e[e.PlayVideoIntent = 57] = "PlayVideoIntent",
        e[e.Logout = 58] = "Logout",
        e[e.PerfTelemetryScenario = 59] = "PerfTelemetryScenario",
        e[e.SendTextMessageUI = 60] = "SendTextMessageUI",
        e[e.SendTextMessageTimeToAppearInChat = 61] = "SendTextMessageTimeToAppearInChat",
        e[e.SendPictureUI = 62] = "SendPictureUI",
        e[e.SayHi = 63] = "SayHi",
        e[e.ConversationOpenAnimation = 64] = "ConversationOpenAnimation",
        e[e.InviteAcceptance = 65] = "InviteAcceptance",
        e[e.ActionInvite = 66] = "ActionInvite",
        e[e.GuestLoginFlow = 67] = "GuestLoginFlow",
        e[e.GuestUpsellPanel = 68] = "GuestUpsellPanel",
        e[e.GuestSiSuComponent = 69] = "GuestSiSuComponent",
        e[e.AppStartupIntent = 70] = "AppStartupIntent",
        e[e.ApsFetchIntegrations = 71] = "ApsFetchIntegrations"
    }(t.ScenarioName || (t.ScenarioName = {}));
    t.ScenarioTrackerBase = class {
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Stack = 0] = "Stack",
        e[e.StackCollapsible = 1] = "StackCollapsible"
    }(t.DesktopNavigationType || (t.DesktopNavigationType = {})),
    t.StackNavigatorId = {
        Mobile: "mobile",
        DesktopContent: "desktopcontent",
        DesktopModal: "desktopmodal",
        DesktopSidebar: "desktopsidebar"
    },
    function(e) {
        e[e.Push = 1] = "Push",
        e[e.Present = 2] = "Present"
    }(t.StackNavigationDirection || (t.StackNavigationDirection = {})),
    function(e) {
        e[e.Push = 1] = "Push",
        e[e.PopToRoot = 2] = "PopToRoot",
        e[e.Replace = 3] = "Replace"
    }(t.StackNavigationType || (t.StackNavigationType = {}))
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(555)
      , o = i(0)
      , s = i(7)
      , r = i(65)
      , a = i(831)
      , l = i(10)
      , c = i(2)
      , d = i(1087)
      , u = i(3)
      , g = i(569)
      , h = i(4)
      , p = i(17)
      , m = i(583);
    function S(e, t, i={}, r=!1, l) {
        return t ? i.openInExternalBrowser ? n.default.openUrl(t).fail(f) : m.getNavigationActionForDeepLink(t, c.NavigationConversationOrigin.LinkerUtil, e, r, void 0, i.conversationId, i.onShareComplete).then(n=>n ? i.preventInAppNavigationForGuest ? void p.navigateToGuestUpsell() : (g.trackEntryPoint(c.AppEntryPoint.URI),
        void n.action()) : !d.shouldLaunchInAppBrowser(t) || a.default.shouldLaunchExternalBrowser(t) ? 0 === t.indexOf("skype:") ? void 0 : o.Linking.openUrl(t) : void p.navigateToInAppBrowser({
            origin: e,
            url: t,
            openUrlOptions: {
                integrationCorrelationId: i.integrationCorrelationId,
                headers: i.headers,
                injectedJavaScript: i.injectedJavaScript,
                onNavigationStateChange: i.onNavigationStateChange,
                onInAppWebBrowserClose: i.onInAppWebBrowserClose,
                onShareComplete: i.onShareComplete,
                onWebViewClose: i.onWebViewClose,
                onMessage: i.onMessage,
                browserTitle: i.browserTitle,
                conversationId: i.conversationId,
                messageId: i.messageId,
                suggestionAttributes: i.suggestionAttributes,
                hideBrowserActions: i.hideBrowserActions,
                openIntegrationScenario: i.openIntegrationScenario
            }
        }, l)).fail(f) : s.Rejected()
    }
    function C(e) {
        switch (e.code) {
        case o.Types.LinkingErrorCode.NoAppFound:
            return h.getString("LinkerUtil.NoAppFoundError");
        case o.Types.LinkingErrorCode.UnexpectedFailure:
        default:
            return h.getString("LinkerUtil.UnexpectedFailureError")
        }
    }
    function y(e, t) {
        t.code === o.Types.LinkingErrorCode.Blocked && e ? r.default.showConfirmationAlert(e.message, void 0, e.actionName, ()=>S(c.BrowserOrigin.LinkerUtil, t.url), l.MainRootViewId) : (r.default.showOKAlert(C(t), void 0, l.MainRootViewId),
        function(e) {
            if (e) {
                let t = C(e);
                e.description && (t += ", URL: " + e.url + ", Error: " + e.description),
                u.error(c.LogTraceArea.GenericUnsafe, t)
            }
        }(t))
    }
    function f(e) {
        return y(void 0, e)
    }
    t.openUrlWithParams = function(e) {
        S(e.origin, e.url, e.options, e.wasLaunchedFromExternalApp, e.componentContext)
    }
    ,
    t.openUrl = S,
    t.launchNativeSms = function(e) {
        o.Linking.launchSms(e).fail(f)
    }
    ,
    t.launchNativeEmail = function(e, t) {
        o.Linking.launchEmail(e).fail(e=>y(t, e))
    }
    ,
    t.openMailToLink = function(e, t) {
        S(e, "mailto:" + t.to.join(",") + "?Subject=" + t.subject + "&Body=" + t.body)
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Colorful = 1] = "Colorful",
        e[e.Accessible = 2] = "Accessible",
        e[e.Mono = 3] = "Mono",
        e[e.AccessibleDark = 4] = "AccessibleDark",
        e[e.ColorfulDark = 7] = "ColorfulDark",
        e[e.MonoDark = 8] = "MonoDark",
        e[e.ClassicDeprecated = 9] = "ClassicDeprecated",
        e[e.ClassicDarkDeprecated = 10] = "ClassicDarkDeprecated",
        e[e.Delphi = 11] = "Delphi",
        e[e.DelphiDark = 12] = "DelphiDark"
    }(t.Theme || (t.Theme = {})),
    function(e) {
        e[e.Subtitle = 0] = "Subtitle",
        e[e.Caption = 1] = "Caption",
        e[e.SelectedCaption = 2] = "SelectedCaption",
        e[e.CaptionSmall = 3] = "CaptionSmall",
        e[e.SelectedCaptionSmall = 4] = "SelectedCaptionSmall",
        e[e.RowTitle = 5] = "RowTitle",
        e[e.Body = 6] = "Body",
        e[e.BodyBold = 7] = "BodyBold",
        e[e.CardTitle = 8] = "CardTitle",
        e[e.CardTitleSmall = 9] = "CardTitleSmall",
        e[e.PanelHeader = 10] = "PanelHeader",
        e[e.PanelHeaderLandscape = 11] = "PanelHeaderLandscape",
        e[e.MessagingHeader = 12] = "MessagingHeader",
        e[e.MessagingHeaderSmall = 13] = "MessagingHeaderSmall",
        e[e.BodyBig = 14] = "BodyBig",
        e[e.BodyBigBold = 15] = "BodyBigBold",
        e[e.BodySmall = 16] = "BodySmall",
        e[e.BodySmallBold = 17] = "BodySmallBold"
    }(t.TextStyleCategories || (t.TextStyleCategories = {}))
}
, , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(13)
      , s = i(6)
      , r = i(151)
      , a = i(5)
      , l = i(2599)
      , c = i(29)
      , d = a.lazyProperties({
        altViewContainer: ()=>n.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            alignItems: "center",
            justifyContent: "center"
        })
    });
    class u extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._loadAltView = ()=>{
                this._altViewLoadTimer = void 0,
                this.isComponentMounted() && this.setState({
                    showAltView: !0
                })
            }
            ,
            this._loadSucceeded = e=>{
                this._clearAltViewTimer(),
                this.isComponentMounted() && this.setState({
                    loadSucceeded: !0,
                    showAltView: !1
                }),
                this.props.onLoad && this.props.onLoad(e)
            }
            ,
            this._loadErrored = e=>{
                this._clearAltViewTimer(),
                this.isComponentMounted() && this.setState({
                    loadFailed: !0,
                    showAltView: !0
                }),
                this.props.onError && this.props.onError(e)
            }
            ,
            this._gotImageRef = e=>{
                this._imageRef = e || void 0
            }
        }
        _buildState(e, t) {
            const i = this.props
              , n = e.showAltView || !e.source;
            if (t || e.source !== i.source) {
                let t = {
                    loadSucceeded: !1,
                    loadFailed: !1,
                    showAltView: n
                };
                if (this._clearAltViewTimer(),
                e.source) {
                    const e = s.default.getS4LUiFeatures().errorSafeImageAltViewDelayMs || 100;
                    this._altViewLoadTimer = c.setTimeout(this._loadAltView, e)
                }
                return t
            }
        }
        _clearAltViewTimer() {
            this._altViewLoadTimer && (c.clearTimeout(this._altViewLoadTimer),
            this._altViewLoadTimer = void 0)
        }
        render() {
            const e = this.state.loadFailed && this.props.errorView || this.props.altView
              , t = [this.state.showAltView ? n.createElement(n.View, {
                key: "altview",
                style: d.altViewContainer
            }, e) : void 0, this.props.source ? n.createElement(l.default, {
                key: "image",
                style: this.props.style,
                ref: this._gotImageRef,
                sourceUrl: this.props.source,
                skypeToken: this.props.skypeToken,
                origin: this.props.origin,
                resizeMode: this.props.resizeMode,
                shouldInstrument: this.props.shouldInstrument,
                telemetryProperties: this.props.telemetryProperties,
                noRetryOnError: this.props.noRetryOnError,
                blockUntrustedDomains: this.props.blockUntrustedDomains,
                onLoad: this._loadSucceeded,
                onError: this._loadErrored
            }) : void 0, this.props.children];
            if (this.props.onPress || this.props.onKeyPress) {
                const e = this.props.showHoverEffect ? r.HoverableButton : n.Button;
                return n.createElement(e, {
                    style: this.props.containerStyle,
                    onPress: this.props.onPress,
                    onKeyPress: this.props.onKeyPress,
                    title: this.props.title,
                    importantForAccessibility: this.props.importantForAccessibility,
                    shouldRasterizeIOS: this.props.shouldRasterizeIOS,
                    tabIndex: this.props.tabIndex,
                    activeOpacity: this.props.activeOpacity,
                    accessibilityLabel: this.props.accessibilityLabel,
                    accessibilityTraits: n.Types.AccessibilityTrait.Button
                }, t)
            }
            return n.createElement(n.View, {
                style: this.props.containerStyle,
                title: this.props.title,
                importantForAccessibility: this.props.importantForAccessibility,
                shouldRasterizeIOS: this.props.shouldRasterizeIOS,
                tabIndex: this.props.tabIndex,
                activeOpacity: this.props.activeOpacity
            }, t)
        }
        getNativeImageSize() {
            return this._imageRef && this._imageRef.getNativeImageSize()
        }
    }
    e.exports = u
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(2378)
      , a = i(38);
    let l = class extends s.StoreBase {
        constructor(e) {
            super(),
            this._providers = e
        }
        init() {
            o.each(r.providers, e=>{
                e.subscribe && e.subscribe(()=>{
                    this._updateFlags()
                }
                )
            }
            ),
            this._updateFlags()
        }
        _updateFlags() {
            const e = o.map(this._providers, e=>e.flags())
              , t = o.mergeWith({}, ...e, (e,t)=>o.isBoolean(e) || o.isBoolean(t) ? !1 !== e && !1 !== t : void 0);
            a.default(this._merged, t) || (this._merged = t,
            this.trigger(1))
        }
        entitlements() {
            return this._merged.entitlements
        }
        userSettings() {
            return this._merged.userSettings
        }
        navigation() {
            return this._merged.navigation
        }
        addins() {
            return this._merged.addins
        }
        onboarding() {
            return this._merged.onboarding
        }
        identity() {
            return this._merged.identity
        }
        contacts() {
            return this._merged.contacts
        }
        meetnow() {
            return this._merged.meetnow
        }
        call() {
            return this._merged.call
        }
    }
    ;
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "entitlements", null),
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "userSettings", null),
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "navigation", null),
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "addins", null),
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "onboarding", null),
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "identity", null),
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "contacts", null),
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "meetnow", null),
    n.__decorate([s.autoSubscribeWithKey(1)], l.prototype, "call", null),
    l = n.__decorate([s.AutoSubscribeStore], l),
    t.default = new l(o.values(r.providers))
}
, , , , function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(36)
      , s = i(13)
      , r = i(10)
      , a = i(2)
      , l = i(3)
      , c = i(32)
      , d = i(24)
      , u = i(21);
    var g;
    !function(e) {
        e[e.Default = 0] = "Default",
        e[e.None = 1] = "None"
    }(g || (g = {}));
    let h = class extends s.StoreBase {
        constructor() {
            super(...arguments),
            this._resizeMode = g.Default,
            this._lastUpdateInfo = {
                height: 0
            },
            this._isCustomKeyboardVisibleAndroid = !1,
            this._customKeyboardHeightFixAndroid = 0,
            this._customAndroidKeyboardVisible = ()=>!1
        }
        setResizeMode(e) {
            this._resizeMode !== e && (this._resizeMode = e,
            l.log(a.LogTraceArea.Keyboard, "KeyboardAwareStore.setResizeMode: " + e),
            this.trigger())
        }
        setUpdateInfo(e) {
            const t = this._lastUpdateInfo.height !== e.height;
            this._lastUpdateInfo = e,
            this._updateNativeKeyboardHeights(e),
            t && (l.log(a.LogTraceArea.Keyboard, "KeyboardAwareStore.setUpdateInfo, height changed: " + e.height),
            this.trigger())
        }
        immediatelyResetUpdateInfo() {
            this.setUpdateInfo({
                height: 0,
                duration: 0,
                easing: "keyboard"
            })
        }
        setCustomKeyboardVisibilityAndroid(e) {
            this._isCustomKeyboardVisibleAndroid !== e && (this._isCustomKeyboardVisibleAndroid = e,
            this.trigger())
        }
        setCustomKeyboardFixHeightAndroid(e) {
            l.log(a.LogTraceArea.Keyboard, "KeyboardAwareStore.setCustomKeyboardFixHeightAndroid: " + e),
            this._customKeyboardHeightFixAndroid = e,
            this.trigger()
        }
        getResizeMode() {
            return this._resizeMode
        }
        getResizeModeNoSubscription() {
            return this._resizeMode
        }
        getUpdateInfo() {
            return this._lastUpdateInfo
        }
        getCustomKeyboardHeightAndroid() {
            return this._isCustomKeyboardVisibleAndroid ? this._customKeyboardHeightFixAndroid : 0
        }
        isKeyboardSeen() {
            return this._lastUpdateInfo.height > 0 || this._customAndroidKeyboardVisible()
        }
        usingIPadHardwareKeyboard() {
            return !1
        }
        _updateNativeKeyboardHeights(e) {
            if (0 === e.height)
                return;
            if (!u.HasStarted(c.default))
                return;
            const t = c.default.getUserPreferencesLocalNoSubscription().nativeKeyboardHeights
              , i = d.default.getDeviceOrientation(r.MainRootViewId);
            i !== o.DeviceOrientation.Portrait || t && t.potraitHeight && e.height === t.potraitHeight || c.default.setUserPreferencesLocal({
                nativeKeyboardHeights: {
                    potraitHeight: e.height,
                    landscapeHeight: t ? t.landscapeHeight : 0
                }
            }),
            i !== o.DeviceOrientation.Landscape || t && t.landscapeHeight && e.height === t.landscapeHeight || c.default.setUserPreferencesLocal({
                nativeKeyboardHeights: {
                    potraitHeight: t ? t.potraitHeight : 0,
                    landscapeHeight: e.height
                }
            })
        }
    }
    ;
    n.__decorate([s.autoSubscribe], h.prototype, "getResizeMode", null),
    n.__decorate([s.autoSubscribe], h.prototype, "getUpdateInfo", null),
    n.__decorate([s.autoSubscribe], h.prototype, "getCustomKeyboardHeightAndroid", null),
    n.__decorate([s.autoSubscribe], h.prototype, "isKeyboardSeen", null),
    n.__decorate([s.autoSubscribe], h.prototype, "usingIPadHardwareKeyboard", null),
    h = n.__decorate([s.AutoSubscribeStore], h),
    e.exports = new h
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(72)
      , r = i(7)
      , a = i(6)
      , l = i(327)
      , c = i(2)
      , d = i(210)
      , u = i(3)
      , g = i(150)
      , h = i(53);
    class p extends s.GenericRestClient {
        _blockRequestUntil(e) {
            const t = a.default.getConfigSettingsNoSubscription().chat.maxSimultaneousRESTRequests;
            if (t) {
                const e = g.getNetworkType()
                  , i = t.maxRequestsByNetworkType && t.maxRequestsByNetworkType[e] || t.defaultMaxRequests;
                i && i !== s.SimpleWebRequestOptions.MaxSimultaneousRequests && (s.SimpleWebRequestOptions.MaxSimultaneousRequests = i,
                u.log(c.LogTraceArea.GenericUnsafe, "Updated max simultaneous REST requests to " + i + " because current network type is " + o.Types.DeviceNetworkType[e]))
            }
            if (e.mustHaveValidSkypeToken && !h.default.hasUsableSkypeToken())
                return u.log(c.LogTraceArea.GenericUnsafe, "Blocking GenericRestClient call until valid SkypeToken arrives..."),
                h.default.performWhenValidSkypeTokenArrives()
        }
        performRequest(e, t) {
            const i = {
                timeout: e.timeout,
                priority: e.priority,
                retries: e.retries
            };
            return this._performApiCall(e.path, e.method, e.passedData, n.extend(i, t))
        }
        _performApiCall(e, t, i, o) {
            return super._performApiCall(e, t, i, o).then(e=>{
                if (null !== e.body)
                    return e;
                const {checkCorruptNullBody: t} = a.default.getConfigSettingsNoSubscription().restClient;
                if (!t)
                    return e;
                const i = e.headers["content-length"]
                  , o = Number(i);
                if (n.isNaN(o) || 0 === o || 4 === o)
                    return e;
                if (24 === o && "gzip" === e.headers["content-encoding"])
                    return e;
                let s = this.constructor.name;
                if (!s) {
                    const e = /function (.{1,})\(/.exec(this.constructor.toString());
                    s = e && e.length > 1 ? e[1] : ""
                }
                u.track(new d.CorruptNullBodyEvent(i,s,e.method,e.statusCode,e.headers.contextid,e.headers.date,e.responseParsingException ? e.responseParsingException.message : void 0));
                const l = Object.assign(Object.assign({}, e), {
                    timedOut: !1,
                    canceled: !1,
                    invalidNullBody: !0
                });
                return r.Rejected(l)
            }
            )
        }
        performRequestBackground(e, t, i, o) {
            const s = {
                timeout: i.timeout,
                priority: i.priority,
                retries: i.retries
            };
            return this._performApiCallBackground({
                backgroundType: e,
                backgroundContext: t,
                apiPath: i.path,
                action: i.method,
                postData: i.passedData,
                requestOptions: n.extend(s, o)
            })
        }
        _performApiCallBackground(e) {
            let t = n.defaults({}, e.requestOptions, this._defaultOptions);
            t.mustHaveValidSkypeToken && (h.default.hasUsableSkypeToken() || u.error(c.LogTraceArea.GenericUnsafe, "API is supposed to have a valid skypetoken but does not"));
            const i = !t.overrideGetHeaders && !t.headers
              , o = n.extend({}, i ? this._getHeaders(t) : void 0, t.overrideGetHeaders, t.headers, t.augmentHeaders);
            t.contentType || (t.contentType = n.isString(e.postData) ? "form" : "json");
            const r = t.excludeEndpointUrl ? e.apiPath : this._endpointUrl + e.apiPath
              , a = {
                subscriberType: e.backgroundType,
                context: e.backgroundContext,
                action: e.action,
                url: r,
                headers: o,
                acceptType: s.SimpleWebRequest.mapContentType(t.acceptType || "json"),
                contentType: s.SimpleWebRequest.mapContentType(t.contentType),
                downloadToUri: e.downloadGetToUri,
                downloadToPublicFolder: !!e.downloadToPublicFolder,
                downloadPublicFolderUseSkypeFolder: !!e.downloadPublicFolderUseSkypeFolder,
                filename: e.filename,
                priority: t.priority,
                withCredentials: t.withCredentials,
                timeout: t.timeout,
                progressTimeout: t.progressTimeout,
                resumable: t.resumable,
                resumableUploadStatusUrl: t.resumableUploadStatusUrl,
                resumableAttemptsSoFar: t.resumableAttemptsSoFar
            };
            if (e.postData) {
                const t = e.postData.uri;
                n.isObject(e.postData) && t ? a.postFileUri = t : a.postData = e.postData
            }
            return l.default.startTransfer(a)
        }
    }
    t.SkypeRestClient = p
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(221)
      , s = i(0);
    function r(e, t, i, n) {
        const o = e;
        let r = !1;
        t.disabled && (r = !0);
        const a = r ? void 0 : t.onPress;
        if (t.onContextMenu && (n.onContextMenu = t.onContextMenu,
        delete i.onContextMenu),
        a)
            o._isMaybeListItemPressed = !1,
            o._maybeListItemOnPress || (o._maybeListItemOnPress = e=>{
                o._isMaybeListItemPressed = !0
            }
            ),
            o._maybeLitItemOrigOnPress !== a && (o._maybeListItemWrappedOnPress = (e,t)=>{
                (s.UserInterface.isNavigatingWithKeyboard() || o._isMaybeListItemPressed || t) && (o._isMaybeListItemPressed = !1,
                a && a(e))
            }
            ,
            o._maybeLitItemOrigOnPress = a);
        else {
            if (!o._maybeLitItemOrigOnPress)
                return;
            delete o._isMaybeListItemPressed,
            delete o._maybeLitItemOrigOnPress,
            delete o._maybeListItemOnPress,
            delete o._maybeListItemWrappedOnPress
        }
        i.onPress = o._maybeListItemOnPress,
        n.onPress = o._maybeListItemWrappedOnPress
    }
    function a(e, t, i, n) {
        const o = e
          , s = t.onLongPress;
        t.onContextMenu && (n.onContextMenu = t.onContextMenu,
        delete i.onContextMenu),
        s && (o._isMaybeListItemPressed = !1,
        o._maybeListItemOnLongPress || (o._maybeListItemOnLongPress = e=>{
            0
        }
        ),
        i.onLongPress = o._maybeListItemOnLongPress)
    }
    class l extends s.Component {
        constructor() {
            super(...arguments),
            this._onRef = e=>{
                this._ref = e || void 0
            }
        }
        render() {
            const e = this._processProps(this.props)
              , t = e.Component;
            return s.createElement(t, Object.assign({
                ref: this._onRef
            }, e.props))
        }
        requestFocus() {
            this._focus ? this._focus() : this._ref && this._ref.requestFocus()
        }
        _processProps(e) {
            let t, i;
            if (this.context.onListItemDetails) {
                i = n.clone(e);
                const o = !!e.keepOriginalProps;
                delete i.ref,
                delete i.keepOriginalProps,
                o || delete i.tabIndex;
                const s = {};
                t = this.processProps(e, o, i, s),
                this._focus = this.context.onListItemDetails(s)
            }
            return {
                Component: t || this.DefaultComponent,
                props: i || e
            }
        }
    }
    l.contextTypes = {
        onListItemDetails: o.func
    };
    t.MaybeListItem = {
        View: class extends l {
            constructor() {
                super(...arguments),
                this.DefaultComponent = s.View
            }
            processProps(e, t, i, n) {
                return e.accessibilityTraits && (n.accessibilityTrait = e.accessibilityTraits instanceof Array ? e.accessibilityTraits[0] : e.accessibilityTraits,
                t || delete i.accessibilityTraits),
                e.accessibilityLabel && (n.accessibilityLabel = e.accessibilityLabel,
                t || delete i.accessibilityLabel),
                e.importantForAccessibility && (n.importantForAccessibility = e.importantForAccessibility,
                t || delete i.importantForAccessibility),
                r(this, e, i, n),
                a(this, e, i, n),
                e.onFocus && (n.onFocus = e.onFocus,
                delete i.onFocus),
                e.onBlur && (n.onBlur = e.onBlur,
                delete i.onBlur),
                e.onMouseEnter && (n.onHoverStart = e.onMouseEnter,
                delete i.onMouseEnter),
                i.onMouseLeave && (n.onHoverEnd = i.onMouseLeave,
                delete i.onMouseLeave),
                s.View
            }
        }
        ,
        Button: class extends l {
            constructor() {
                super(...arguments),
                this.DefaultComponent = s.Button
            }
            processProps(e, t, i, n) {
                return e.accessibilityTraits && (n.accessibilityTrait = e.accessibilityTraits instanceof Array ? e.accessibilityTraits[0] : e.accessibilityTraits,
                t || delete i.accessibilityTraits),
                e.accessibilityLabel && (n.accessibilityLabel = e.accessibilityLabel,
                t || delete i.accessibilityLabel),
                e.importantForAccessibility && (n.importantForAccessibility = e.importantForAccessibility,
                t || delete i.importantForAccessibility),
                r(this, e, i, n),
                a(this, e, i, n),
                e.onFocus && (n.onFocus = e.onFocus,
                delete i.onFocus),
                e.onBlur && (n.onBlur = e.onBlur,
                delete i.onBlur),
                e.onHoverStart && (n.onHoverStart = e.onHoverStart,
                delete i.onHoverStart),
                i.onHoverEnd && (n.onHoverEnd = i.onHoverEnd,
                delete i.onHoverEnd),
                t ? s.Button : s.View
            }
        }
    },
    t.default = t.MaybeListItem
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2428)
      , s = i(164)
      , r = i(0)
      , a = i(6)
      , l = i(197)
      , c = i(61)
      , d = i(10)
      , u = i(2)
      , g = i(2429)
      , h = i(3)
      , p = i(121)
      , m = i(4)
      , S = i(32)
      , C = i(22)
      , y = i(18)
      , f = "answerOrStartCall"
      , _ = "addToCallOrConversation"
      , b = "toggleCameraOrStartCall";
    t.MacShortcutsCommon = [{
        shortcut: u.KeyboardShortcut.OpenNotificationPanel,
        keyCombination: {
            keyCode: p.O,
            shiftKey: !0,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenContactsPanel,
        keyCombination: {
            keyCode: p.C,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.SendFeedback,
        keyCombination: {
            keyCode: p.O,
            metaKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NavigateToRecents,
        keyCombination: {
            keyCode: p.ONE,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NavigateToHistory,
        keyCombination: {
            keyCode: p.Y,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ShowConversationProfile,
        keyCombination: {
            keyCode: p.I,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.AddPeopleToConversation,
        keyCombination: {
            keyCode: p.A,
            metaKey: !0,
            shiftKey: !0
        },
        shortcutAlias: _
    }, {
        shortcut: u.KeyboardShortcut.StartVideoCall,
        keyCombination: {
            keyCode: p.K,
            metaKey: !0,
            shiftKey: !0
        },
        shortcutAlias: b
    }, {
        shortcut: u.KeyboardShortcut.MarkAsUnread,
        keyCombination: {
            keyCode: p.U,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleLeftPanel,
        keyCombination: {
            keyCode: p.ONE,
            ctrlKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.EditMessage,
        keyCombination: {
            keyCode: p.E,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.EnableMultipleSelectMessages,
        keyCombination: {
            keyCode: p.L,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.FocusMessageComposer,
        keyCombination: {
            keyCode: p.E,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleMicrophone,
        keyCombination: {
            keyCode: p.M,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleCamera,
        keyCombination: {
            keyCode: p.K,
            metaKey: !0,
            shiftKey: !0
        },
        shortcutAlias: b
    }, {
        shortcut: u.KeyboardShortcut.AddPeopleToCall,
        keyCombination: {
            keyCode: p.A,
            metaKey: !0,
            shiftKey: !0
        },
        shortcutAlias: _
    }, {
        shortcut: u.KeyboardShortcut.HangupOrRejectCall,
        keyCombination: {
            keyCode: p.H,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.AnnounceMuteStatus,
        keyCombination: {
            keyCode: p.M,
            metaKey: !0,
            shiftKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.AnnounceSelfVideoOnOffStatus,
        keyCombination: {
            keyCode: p.K,
            metaKey: !0,
            shiftKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ArchiveConversation,
        keyCombination: {
            keyCode: p.E,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.CallDebugPanel,
        keyCombination: {
            keyCode: p.D,
            metaKey: !0,
            shiftKey: !0
        }
    }],
    t.MacShortcuts = [...t.MacShortcutsCommon, {
        shortcut: u.KeyboardShortcut.OpenAppSettings,
        keyCombination: {
            keyCode: p.COMMA,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenHelpInABrowser,
        keyCombination: {
            keyCode: p.H,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.StartNewConversation,
        keyCombination: {
            keyCode: p.N,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenThemePicker,
        keyCombination: {
            keyCode: p.T,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleTheme,
        keyCombination: {
            keyCode: p.T,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.TakeCallSnapshot,
        keyCombination: {
            keyCode: p.S,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenDialpad,
        keyCombination: {
            keyCode: p.TWO,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NewGroup,
        keyCombination: {
            keyCode: p.G,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleGallery,
        keyCombination: {
            keyCode: p.G,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.StartAudioCall,
        keyCombination: {
            keyCode: p.R,
            metaKey: !0,
            shiftKey: !0
        },
        shortcutAlias: f
    }, {
        shortcut: u.KeyboardShortcut.AcceptIncomingCall,
        keyCombination: {
            keyCode: p.R,
            metaKey: !0,
            shiftKey: !0
        },
        shortcutAlias: f
    }, {
        shortcut: u.KeyboardShortcut.SendFile,
        keyCombination: {
            keyCode: p.F,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NavigateToPreviousConversation,
        keyCombination: {
            keyCode: p.TAB,
            shiftKey: !0,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NavigateToNextConversation,
        keyCombination: {
            keyCode: p.TAB,
            shiftKey: !1,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ResizeVideoPreview,
        keyCombination: {
            keyCode: p.J,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.CloseSplitViewConversation,
        keyCombination: {
            keyCode: p.W,
            metaKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.Quit,
        keyCombination: {
            keyCode: p.Q,
            metaKey: !0
        }
    }],
    t.MacShortcutsWeb = [...t.MacShortcutsCommon, {
        shortcut: u.KeyboardShortcut.OpenAppSettings,
        keyCombination: {
            keyCode: p.COMMA,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.StartNewConversation,
        keyCombination: {
            keyCode: p.N,
            shiftKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenHelpInABrowser,
        keyCombination: {
            keyCode: p.H,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenDialpad,
        keyCombination: {
            keyCode: p.TWO,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NewGroup,
        keyCombination: {
            keyCode: p.G,
            metaKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.StartAudioCall,
        keyCombination: {
            keyCode: p.R,
            altKey: !0,
            shiftKey: !0
        },
        shortcutAlias: f
    }, {
        shortcut: u.KeyboardShortcut.AcceptIncomingCall,
        keyCombination: {
            keyCode: p.R,
            altKey: !0,
            shiftKey: !0
        },
        shortcutAlias: f
    }, {
        shortcut: u.KeyboardShortcut.ResizeVideoPreview,
        keyCombination: {
            keyCode: p.J,
            altKey: !0,
            shiftKey: !0
        }
    }],
    t.WindowsAndLinuxShortcutsCommon = [{
        shortcut: u.KeyboardShortcut.OpenNotificationPanel,
        keyCombination: {
            keyCode: p.I,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenContactsPanel,
        keyCombination: {
            keyCode: p.TWO,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NavigateToRecents,
        keyCombination: {
            keyCode: p.ONE,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NavigateToHistory,
        keyCombination: {
            keyCode: p.Y,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.AddPeopleToConversation,
        keyCombination: {
            keyCode: p.A,
            ctrlKey: !0,
            shiftKey: !0
        },
        shortcutAlias: _
    }, {
        shortcut: u.KeyboardShortcut.StartVideoCall,
        keyCombination: {
            keyCode: p.K,
            ctrlKey: !0,
            shiftKey: !0
        },
        shortcutAlias: b
    }, {
        shortcut: u.KeyboardShortcut.StartAudioCall,
        keyCombination: {
            keyCode: p.P,
            ctrlKey: !0,
            shiftKey: !0
        },
        shortcutAlias: f
    }, {
        shortcut: u.KeyboardShortcut.MarkAsUnread,
        keyCombination: {
            keyCode: p.U,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleLeftPanel,
        keyCombination: {
            keyCode: p.ONE,
            ctrlKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.EnableMultipleSelectMessages,
        keyCombination: {
            keyCode: p.L,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.FocusMessageComposer,
        keyCombination: {
            keyCode: p.E,
            altKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleMicrophone,
        keyCombination: {
            keyCode: p.M,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleCamera,
        keyCombination: {
            keyCode: p.K,
            ctrlKey: !0,
            shiftKey: !0
        },
        shortcutAlias: b
    }, {
        shortcut: u.KeyboardShortcut.AcceptIncomingCall,
        keyCombination: {
            keyCode: p.P,
            ctrlKey: !0,
            shiftKey: !0
        },
        shortcutAlias: f
    }, {
        shortcut: u.KeyboardShortcut.AddPeopleToCall,
        keyCombination: {
            keyCode: p.A,
            ctrlKey: !0,
            shiftKey: !0
        },
        shortcutAlias: _
    }, {
        shortcut: u.KeyboardShortcut.HangupOrRejectCall,
        keyCombination: {
            keyCode: p.H,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ArchiveConversation,
        keyCombination: {
            keyCode: p.E,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.AnnounceMuteStatus,
        keyCombination: {
            keyCode: p.M,
            ctrlKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.AnnounceSelfVideoOnOffStatus,
        keyCombination: {
            keyCode: p.K,
            ctrlKey: !0,
            shiftKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.CallDebugPanel,
        keyCombination: {
            keyCode: p.D,
            altKey: !0,
            shiftKey: !0
        }
    }],
    t.WindowsShortcuts = [...t.WindowsAndLinuxShortcutsCommon, {
        shortcut: u.KeyboardShortcut.OpenAppSettings,
        keyCombination: {
            keyCode: p.COMMA,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenHelpInABrowser,
        keyCombination: {
            keyCode: p.H,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.StartNewConversation,
        keyCombination: {
            keyCode: p.N,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenThemePicker,
        keyCombination: {
            keyCode: p.T,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleTheme,
        keyCombination: {
            keyCode: p.T,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.TakeCallSnapshot,
        keyCombination: {
            keyCode: p.S,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenDialpad,
        keyCombination: {
            keyCode: p.D,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NewGroup,
        keyCombination: {
            keyCode: p.G,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ToggleGallery,
        keyCombination: {
            keyCode: p.G,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.SendFeedback,
        keyCombination: {
            keyCode: p.O,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ShowConversationProfile,
        keyCombination: {
            keyCode: p.P,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.SendFile,
        keyCombination: {
            keyCode: p.F,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NavigateToPreviousConversation,
        keyCombination: {
            keyCode: p.TAB,
            shiftKey: !0,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NavigateToNextConversation,
        keyCombination: {
            keyCode: p.TAB,
            shiftKey: !1,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ResizeVideoPreview,
        keyCombination: {
            keyCode: p.J,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.CloseSplitViewConversation,
        keyCombination: {
            keyCode: p.W,
            ctrlKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.Quit,
        keyCombination: {
            keyCode: p.Q,
            ctrlKey: !0
        }
    }],
    t.WindowsAndLinuxShortcutsWeb = [...t.WindowsAndLinuxShortcutsCommon, {
        shortcut: u.KeyboardShortcut.OpenAppSettings,
        keyCombination: {
            keyCode: p.COMMA,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.StartNewConversation,
        keyCombination: {
            keyCode: p.N,
            altKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenHelpInABrowser,
        keyCombination: {
            keyCode: p.H,
            altKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.OpenDialpad,
        keyCombination: {
            keyCode: p.D,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.NewGroup,
        keyCombination: {
            keyCode: p.G,
            ctrlKey: !0,
            shiftKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ShowConversationProfile,
        keyCombination: {
            keyCode: p.P,
            ctrlKey: !0,
            altKey: !0
        }
    }, {
        shortcut: u.KeyboardShortcut.ResizeVideoPreview,
        keyCombination: {
            keyCode: p.J,
            altKey: !0,
            shiftKey: !0
        }
    }];
    class v {
        constructor() {
            this._handlers = {},
            this._shouldSubscribeToKeyboardEvents = !0,
            this._subscribedToEscapeKeyEvents = !1,
            this._escapeHandlers = [],
            this._shortcutsMap = {},
            this._extendedShortcutsMap = {},
            this._onKeyUp = e=>{
                if (e.keyCode === p.ESCAPE)
                    for (let t = this._escapeHandlers.length - 1; t >= 0; t--) {
                        const i = this._escapeHandlers[t];
                        if (i && i(e, d.MainRootViewId))
                            return e.stopPropagation(),
                            !0
                    }
                return !1
            }
            ,
            this._onKeyDown = e=>{
                let t;
                const i = this._getKeyboardShortcut(e);
                for (let e = 0; e < i.length; e++) {
                    const n = this._handlers[this._getShortcutMapKey(i[e].shortcut)];
                    if (n) {
                        t = n;
                        break
                    }
                }
                if (t) {
                    const i = (t,i)=>{
                        if (t && t.length)
                            for (let n = t.length - 1; n >= 0; n--)
                                if (t[n](e, i)) {
                                    e.stopPropagation && e.stopPropagation(),
                                    e.preventDefault && e.preventDefault();
                                    break
                                }
                    }
                    ;
                    return C.default.isUsingSplitViewNoSubscription() ? s.default.getLastActiveSplitView().then(e=>{
                        const n = e && e.isActive && e.id ? e.id : d.MainRootViewId;
                        t && i(t, n)
                    }
                    , e=>{
                        h.log(u.LogTraceArea.Navigation, "getLastActiveSplitView() failed. error: " + e),
                        t && i(t, d.MainRootViewId)
                    }
                    ) : i(t, d.MainRootViewId),
                    !0
                }
                return !1
            }
            ,
            this._getSearchInConversationKeyCombination = ()=>y.getPlatformType() === u.PlatformType.OSX ? {
                keyCode: p.F,
                metaKey: !0
            } : {
                keyCode: p.F,
                ctrlKey: !0
            },
            this._getSearchKeyCombination = ()=>y.getPlatformType() === u.PlatformType.OSX ? {
                keyCode: p.F,
                metaKey: !0,
                shiftKey: !0
            } : {
                keyCode: p.F,
                ctrlKey: !0,
                shiftKey: !0
            },
            this._makeMacShortcuts = ()=>{
                const e = [...t.MacShortcutsWeb];
                return e.push({
                    shortcut: u.KeyboardShortcut.Search,
                    keyCombination: this._getSearchKeyCombination()
                }, {
                    shortcut: u.KeyboardShortcut.SearchInConversation,
                    keyCombination: this._getSearchInConversationKeyCombination()
                }),
                e.push({
                    shortcut: u.KeyboardShortcut.OpenKeyboardShortcuts,
                    keyCombination: {
                        keyCode: p.BACKSLASH,
                        metaKey: !0
                    }
                }),
                e
            }
            ,
            this._makeWindowsOrLinuxShortcuts = ()=>{
                const e = [...t.WindowsAndLinuxShortcutsWeb];
                return e.push({
                    shortcut: u.KeyboardShortcut.Search,
                    keyCombination: this._getSearchKeyCombination()
                }, {
                    shortcut: u.KeyboardShortcut.SearchInConversation,
                    keyCombination: this._getSearchInConversationKeyCombination()
                }),
                e.push({
                    shortcut: u.KeyboardShortcut.OpenKeyboardShortcuts,
                    keyCombination: {
                        keyCode: p.FORWARDSLASH,
                        ctrlKey: !0
                    }
                }),
                e
            }
            ,
            this._constructShortcuts(),
            this._shouldSubscribeToKeyboardEvents && (m.localeChangedEvent.subscribe(()=>{
                this._extendedShortcutsMap = {}
            }
            ),
            r.Input.keyDownEvent.subscribe(this._onKeyDown))
        }
        _constructShortcuts() {
            h.log(u.LogTraceArea.KeyboardShortcuts, "_constructShortcuts was called"),
            this._shortcuts = y.getPlatformType() === u.PlatformType.OSX ? this._makeMacShortcuts() : this._makeWindowsOrLinuxShortcuts();
            const e = {};
            n.each(this._shortcuts, t=>{
                e[t.shortcut] = t
            }
            ),
            this._shortcutsMap = e
        }
        keyCombinationForKeyboardShortcut(e) {
            const t = this._shortcutsMap[e];
            return t ? t.keyCombination : void 0
        }
        acceleratorForKeyboardShortcut(e) {
            const t = this.keyCombinationForKeyboardShortcut(e);
            if (t) {
                const e = v._acceleratorCommandParts(t);
                return v._joinCommands(e, "+")
            }
        }
        compactShortcutStringForKeyboardShortcut(e) {
            const t = this.keyCombinationForKeyboardShortcut(e);
            if (t) {
                const e = v._commandParts(t);
                return v._joinCommands(e, "+")
            }
        }
        shortcutListItemForShortcut(e) {
            let t = this._extendedShortcutsMap[e];
            if (!t && this._shortcutsMap[e]) {
                const i = v._actionDescriptionForShortcut(e)
                  , n = v._commandParts(this._shortcutsMap[e].keyCombination)
                  , o = v._joinCommands(n)
                  , s = v._constructCommand(this._shortcutsMap[e].keyCombination, !0);
                i && o && (t = Object.assign(Object.assign({}, this._shortcutsMap[e]), {
                    action: i,
                    command: o,
                    accessibleCommand: s,
                    commandParts: n
                }),
                this._extendedShortcutsMap[e] = t)
            }
            return t
        }
        addHandler(e, t) {
            if (this._shouldSubscribeToKeyboardEvents && l.default.canUseKeyboardShortcut(e)) {
                h.log(u.LogTraceArea.KeyboardShortcuts, "Adding handler for " + u.KeyboardShortcut[e]);
                const i = this._getShortcutMapKey(e);
                this._handlers[i] ? this._handlers[i].push(t) : this._handlers[i] = [t],
                h.log(u.LogTraceArea.KeyboardShortcuts, "Handler count for shortcut " + u.KeyboardShortcut[e] + " count: " + this._handlers[i].length)
            }
        }
        removeHandler(e, t) {
            if (this._shouldSubscribeToKeyboardEvents) {
                h.log(u.LogTraceArea.KeyboardShortcuts, "Removing handler for " + u.KeyboardShortcut[e]);
                const i = this._getShortcutMapKey(e)
                  , o = n.remove(this._handlers[i], e=>e === t)
                  , s = this._handlers[i] ? this._handlers[i].length : 0;
                return h.log(u.LogTraceArea.KeyboardShortcuts, "Handler count for shortcut " + u.KeyboardShortcut[e] + " count: " + s),
                s || delete this._handlers[i],
                !n.isEmpty(o)
            }
            return !1
        }
        addEscapeHandler(e) {
            this._subscribedToEscapeKeyEvents || (h.log(u.LogTraceArea.KeyboardShortcuts, "Subscribing to Escape key events"),
            r.Input.keyUpEvent.subscribe(this._onKeyUp),
            this._subscribedToEscapeKeyEvents = !0),
            this._escapeHandlers.push(e)
        }
        removeEscapeHandler(e) {
            this._escapeHandlers = n.filter(this._escapeHandlers, t=>t !== e),
            n.isEmpty(this._escapeHandlers) && this._subscribedToEscapeKeyEvents && (h.log(u.LogTraceArea.KeyboardShortcuts, "Unsubscribing from Escape key events"),
            r.Input.keyUpEvent.unsubscribe(this._onKeyUp),
            this._subscribedToEscapeKeyEvents = !1)
        }
        addSystemHandler(e, t) {
            if (!this._shouldSubscribeToKeyboardEvents || !l.default.canUseKeyboardShortcut(e))
                return;
            if (this.addHandler(e, t),
            !a.default.getS4LNativePlatformsEcsConfig().enableSystemHotKey || !S.default.getUserPreferencesLocal().enableSystemHotKeys || !c.UICapabilities.systemHotKeysSupported())
                return;
            const i = this.keyCombinationForKeyboardShortcut(e)
              , n = this.acceleratorForKeyboardShortcut(e);
            o.default.hotKeyCallback = t=>{
                const i = this._onKeyDown(t);
                return h.track(new g.GlobalHotkeyInvokedEvent(u.KeyboardShortcut[e],n)),
                i
            }
            ;
            const s = o.default.registerHotKey(i, n);
            void 0 === i || s || h.warn(u.LogTraceArea.KeyboardShortcuts, "Failed to register system handler"),
            h.track(new g.GlobalHotkeyRegisteredEvent(s,u.KeyboardShortcut[e],n))
        }
        removeSystemHandler(e, t) {
            if (!this._shouldSubscribeToKeyboardEvents)
                return;
            if (!this.removeHandler(e, t) || !a.default.getS4LNativePlatformsEcsConfig().enableSystemHotKey || !c.UICapabilities.systemHotKeysSupported())
                return;
            const i = this.keyCombinationForKeyboardShortcut(e)
              , n = this.acceleratorForKeyboardShortcut(e)
              , s = o.default.unRegisterHotKey(i, n);
            void 0 === i || s || h.warn(u.LogTraceArea.KeyboardShortcuts, "Failed to unregister system handler"),
            h.track(new g.GlobalHotkeyUnregisteredEvent(s,u.KeyboardShortcut[e],n))
        }
        hasRegisteredMultipleHandlers(e) {
            const t = this._getShortcutMapKey(e)
              , i = this._handlers[t];
            return !!(i && i.length > 1)
        }
        generateTooltipLabelWithShortcutForCondition(e, t, i) {
            const n = this.compactShortcutStringForKeyboardShortcut(t);
            return !n || void 0 !== i && !0 !== i ? e : `${e}\n(${n})`
        }
        _getKeyboardShortcut(e) {
            return this._shortcuts ? this._shortcuts.filter(t=>{
                const i = t.keyCombination;
                return e.keyCode === i.keyCode && !!e.ctrlKey == !!i.ctrlKey && !!e.shiftKey == !!i.shiftKey && !!e.altKey == !!i.altKey && !!e.metaKey == !!i.metaKey
            }
            ) : []
        }
        _getShortcutMapKey(e) {
            const t = this._shortcutsMap[e];
            return "keyboardShortcut_" + ((t ? t.shortcutAlias : void 0) || e)
        }
        static _actionDescriptionForShortcut(e) {
            switch (e) {
            case u.KeyboardShortcut.OpenNotificationPanel:
                return m.getString("KeyboardShortcuts.OpenNotificationPanel");
            case u.KeyboardShortcut.OpenAppSettings:
                return m.getString("KeyboardShortcuts.OpenAppSettings");
            case u.KeyboardShortcut.OpenHelpInABrowser:
                return m.getString("KeyboardShortcuts.OpenHelpInABrowser");
            case u.KeyboardShortcut.OpenDialpad:
                return m.getString("KeyboardShortcuts.OpenDialpad");
            case u.KeyboardShortcut.StartNewConversation:
                return m.getString("KeyboardShortcuts.StartNewConversation");
            case u.KeyboardShortcut.NewGroup:
                return m.getString("KeyboardShortcuts.NewGroup");
            case u.KeyboardShortcut.OpenContactsPanel:
                return m.getString("KeyboardShortcuts.OpenContactsPanel");
            case u.KeyboardShortcut.SendFeedback:
                return m.getString("KeyboardShortcuts.SendFeedback");
            case u.KeyboardShortcut.OpenThemePicker:
                return m.getString("KeyboardShortcuts.OpenThemePicker");
            case u.KeyboardShortcut.NavigateToRecents:
            case u.KeyboardShortcut.NavigateToHistory:
                return m.getString("KeyboardShortcuts.NavigateToRecents");
            case u.KeyboardShortcut.ShowConversationProfile:
                return m.getString("KeyboardShortcuts.ShowConversationProfile");
            case u.KeyboardShortcut.AddPeopleToConversation:
                return m.getString("KeyboardShortcuts.AddPeopleToConversation");
            case u.KeyboardShortcut.SendFile:
                return m.getString("KeyboardShortcuts.SendFile");
            case u.KeyboardShortcut.StartVideoCall:
                return m.getString("KeyboardShortcuts.StartVideoCall");
            case u.KeyboardShortcut.StartAudioCall:
                return m.getString("KeyboardShortcuts.StartAudioCall");
            case u.KeyboardShortcut.ToggleGallery:
                return m.getString("KeyboardShortcuts.ToggleGallery");
            case u.KeyboardShortcut.MarkAsUnread:
                return m.getString("KeyboardShortcuts.MarkAsUnread");
            case u.KeyboardShortcut.HangupOrRejectCall:
                return m.getString("KeyboardShortcuts.HangupOrRejectCall");
            case u.KeyboardShortcut.ToggleMicrophone:
                return m.getString("KeyboardShortcuts.ToggleMicrophone");
            case u.KeyboardShortcut.ToggleCamera:
                return m.getString("KeyboardShortcuts.ToggleCamera");
            case u.KeyboardShortcut.AcceptIncomingCall:
                return m.getString("KeyboardShortcuts.AcceptIncomingCall");
            case u.KeyboardShortcut.AddPeopleToCall:
                return m.getString("KeyboardShortcuts.AddPeopleToCall");
            case u.KeyboardShortcut.Search:
                return m.getString("KeyboardShortcuts.Search");
            case u.KeyboardShortcut.SearchInConversation:
                return m.getString("KeyboardShortcuts.SearchInConversation");
            case u.KeyboardShortcut.ToggleTheme:
                return m.getString("KeyboardShortcuts.ToggleTheme");
            case u.KeyboardShortcut.EditMessage:
                return m.getString("KeyboardShortcuts.EditMessage");
            case u.KeyboardShortcut.EnableMultipleSelectMessages:
                return m.getString("KeyboardShortcuts.EnableMultipleSelectMessages");
            case u.KeyboardShortcut.TakeCallSnapshot:
                return m.getString("KeyboardShortcuts.TakeCallSnapshot");
            case u.KeyboardShortcut.ArchiveConversation:
                return m.getString("KeyboardShortcuts.ArchiveConversation");
            case u.KeyboardShortcut.OpenMainWindow:
                return m.getString("KeyboardShortcuts.OpenMainWindow");
            case u.KeyboardShortcut.Refresh:
                return m.getString("KeyboardShortcuts.Refresh");
            case u.KeyboardShortcut.ZoomIn:
                return m.getString("KeyboardShortcuts.ZoomIn");
            case u.KeyboardShortcut.ZoomOut:
                return m.getString("KeyboardShortcuts.ZoomOut");
            case u.KeyboardShortcut.ResetZoom:
                return m.getString("KeyboardShortcuts.ResetZoom");
            case u.KeyboardShortcut.OpenKeyboardShortcuts:
                return m.getString("KeyboardShortcuts.OpenKeyboardShortcuts");
            case u.KeyboardShortcut.FocusMessageComposer:
                return m.getString("KeyboardShortcuts.FocusMessageComposer");
            case u.KeyboardShortcut.AnnounceMuteStatus:
                return m.getString("KeyboardShortcuts.AnnounceMuteStatus");
            case u.KeyboardShortcut.AnnounceSelfVideoOnOffStatus:
                return m.getString("KeyboardShortcuts.AnnounceSelfVideoOnOffStatus");
            case u.KeyboardShortcut.NavigateToNextConversation:
                return m.getString("KeyboardShortcuts.NextConversationLabel");
            case u.KeyboardShortcut.NavigateToPreviousConversation:
                return m.getString("KeyboardShortcuts.PreviousConversationLabel");
            case u.KeyboardShortcut.ResizeVideoPreview:
                return m.getString("CallPanel.ResizeCameraPreviewText");
            case u.KeyboardShortcut.FocusScreenSharingToolbar:
                return m.getString("KeyboardShortcuts.FocusScreenSharingToolbar");
            case u.KeyboardShortcut.CloseSplitViewConversation:
                return m.getString("KeyboardShortcuts.CloseSplitViewConversation");
            case u.KeyboardShortcut.Quit:
                return m.getString("KeyboardShortcuts.Quit")
            }
        }
        static _commandParts(e, t=!1) {
            const i = y.getPlatformType() === u.PlatformType.OSX
              , o = [];
            return e.ctrlKey && o.push(v._keyDescriptor(i ? p.CONTROL : p.CTRL, t)),
            e.altKey && o.push(v._keyDescriptor(i ? p.OPTION : p.ALT, t)),
            e.metaKey && o.push(v._keyDescriptor(p.COMMAND, t)),
            e.shiftKey && o.push(v._keyDescriptor(p.SHIFT, t)),
            e.keyCode && o.push(v._keyDescriptor(e.keyCode, t)),
            n.compact(o)
        }
        static _acceleratorCommandParts(e) {
            const t = y.getPlatformType() === u.PlatformType.OSX
              , i = [];
            return e.ctrlKey && i.push("Control"),
            e.altKey && i.push(t ? "Option" : "Alt"),
            e.metaKey && i.push("Command"),
            e.shiftKey && i.push("Shift"),
            e.keyCode && i.push(v._keyAcceleratorCode(e.keyCode)),
            n.compact(i)
        }
        static _constructCommand(e, t=!1) {
            const i = v._commandParts(e, t);
            return v._joinCommands(i, t ? " " : " + ")
        }
        static _joinCommands(e, t) {
            return n.join(e, t || " + ")
        }
        static _keyAcceleratorCode(e) {
            switch (e) {
            case p.PLUS:
                return "Plus";
            case p.SPACE:
                return "Space";
            case p.TAB:
                return "Tab";
            case p.DELETE:
                return "Delete";
            case p.INSERT:
                return "Insert";
            case p.ENTER:
                return "Enter";
            case p.UP:
                return "Up";
            case p.DOWN:
                return "Down";
            case p.LEFT:
                return "Left";
            case p.RIGHT:
                return "Right";
            case p.ESCAPE:
                return "Escape";
            case p.PAGEUP:
                return "PageUp";
            case p.PAGEDOWN:
                return "PageDown"
            }
            return v._keyDescriptor(e, !1)
        }
        static _keyDescriptor(e, t=!1) {
            switch (e) {
            case p.A:
                return "A";
            case p.B:
                return "B";
            case p.C:
                return "C";
            case p.D:
                return "D";
            case p.E:
                return "E";
            case p.F:
                return "F";
            case p.G:
                return "G";
            case p.H:
                return "H";
            case p.I:
                return "I";
            case p.J:
                return "J";
            case p.K:
                return "K";
            case p.L:
                return "L";
            case p.M:
                return "M";
            case p.N:
                return "N";
            case p.O:
                return "O";
            case p.P:
                return "P";
            case p.Q:
                return "Q";
            case p.R:
                return "R";
            case p.S:
                return "S";
            case p.T:
                return "T";
            case p.U:
                return "U";
            case p.V:
                return "V";
            case p.W:
                return "W";
            case p.X:
                return "X";
            case p.Y:
                return "Y";
            case p.Z:
                return "Z";
            case p.ZERO:
                return "0";
            case p.ONE:
                return "1";
            case p.TWO:
                return "2";
            case p.THREE:
                return "3";
            case p.FOUR:
                return "4";
            case p.FIVE:
                return "5";
            case p.SIX:
                return "6";
            case p.SEVEN:
                return "7";
            case p.EIGHT:
                return "8";
            case p.NINE:
                return "9";
            case p.LEFT:
                return t ? m.getString("KeyboardShortcuts.LeftArrow") : "←";
            case p.RIGHT:
                return t ? m.getString("KeyboardShortcuts.RightArrow") : "→";
            case p.UP:
                return t ? m.getString("KeyboardShortcuts.UpArrow") : "↑";
            case p.DOWN:
                return t ? m.getString("KeyboardShortcuts.DownArrow") : "↓";
            case p.TAB:
                return m.getString("KeyboardShortcuts.TabKey");
            case p.SHIFT:
                return m.getString("KeyboardShortcuts.ShiftKey");
            case p.ESCAPE:
                return m.getString("KeyboardShortcuts.EscapeKey");
            case p.DELETE:
                return m.getString("KeyboardShortcuts.DeleteKey");
            case p.SPACE:
                return m.getString("KeyboardShortcuts.SpaceKey");
            case p.PAGEUP:
                return m.getString("KeyboardShortcuts.PageUpKey");
            case p.PAGEDOWN:
                return m.getString("KeyboardShortcuts.PageDownKey");
            case p.COMMA:
                return t ? m.getString("KeyboardShortcuts.CommaKey") : ",";
            case p.PLUS:
                return t ? m.getString("KeyboardShortcuts.PlusKey") : "+";
            case p.MINUS:
                return t ? m.getString("KeyboardShortcuts.MinusKey") : "-";
            case p.BACKSLASH:
                return "\\";
            case p.FORWARDSLASH:
                return "/";
            case p.COMMAND:
                return t || y.getPlatformType() !== u.PlatformType.OSX ? m.getString("KeyboardShortcuts.CommandKey") : "⌘";
            case p.CONTROL:
            case p.CTRL:
                return t || y.getPlatformType() === u.PlatformType.OSX ? m.getString("KeyboardShortcuts.ControlKey") : m.getString("KeyboardShortcuts.ControlKeyShort");
            case p.RETURN:
            case p.ENTER:
                return y.getPlatformType() === u.PlatformType.OSX ? m.getString("KeyboardShortcuts.ReturnKey") : m.getString("KeyboardShortcuts.EnterKey");
            case p.ALT:
            case p.OPTION:
                return y.getPlatformType() === u.PlatformType.OSX ? m.getString("KeyboardShortcuts.OptionKey") : m.getString("KeyboardShortcuts.AltKey")
            }
        }
    }
    t.KeyboardShortcuts = v,
    t.default = new v
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(36)
      , r = i(235)
      , a = i(46)
      , l = i(161)
      , c = i(16)
      , d = i(10)
      , u = i(30)
      , g = i(100)
      , h = i(2)
      , p = i(101)
      , m = i(551)
      , S = i(96)
      , C = i(20)
      , y = i(274)
      , f = i(39)
      , _ = i(159)
      , b = i(483)
      , v = i(1019)
      , T = i(1020);
    var P, A;
    !function(e) {
        e[e.Cancel = 0] = "Cancel",
        e[e.CancelRejected = 1] = "CancelRejected",
        e[e.ClearQuote = 2] = "ClearQuote",
        e[e.ContentClicked = 3] = "ContentClicked",
        e[e.Copy = 4] = "Copy",
        e[e.CopyLink = 5] = "CopyLink",
        e[e.Delete = 6] = "Delete",
        e[e.Edit = 7] = "Edit",
        e[e.Forward = 8] = "Forward",
        e[e.MarkMessageUnread = 9] = "MarkMessageUnread",
        e[e.Quote = 10] = "Quote",
        e[e.SelectMessages = 11] = "SelectMessages",
        e[e.ShareFile = 12] = "ShareFile",
        e[e.DismissActionMenu = 13] = "DismissActionMenu",
        e[e.RetryFailed = 14] = "RetryFailed",
        e[e.DragDropFromConversationToRecentLists = 15] = "DragDropFromConversationToRecentLists",
        e[e.ShowReportedMessage = 16] = "ShowReportedMessage",
        e[e.AddBookmark = 17] = "AddBookmark",
        e[e.RemoveBookmark = 18] = "RemoveBookmark"
    }(P = t.MessageActionType || (t.MessageActionType = {})),
    function(e) {
        e.StreamItem = "streamItem",
        e.MessageStream = "messageStream",
        e.StreamItemAccesory = "streamItemAccessory",
        e.StreamItemDesktopContextMenu = "streamItemDesktopContextMenu",
        e.StreamItemActionMenu = "streamItemActionMenu",
        e.StreamItemPopup = "streamItemPopup",
        e.StreamItemMultipleMessages = "_streamItemMultipleMessages",
        e.DocumentViewer = "documentViewer",
        e.MessageComposer = "MessageComposer",
        e.LocationViewer = "locationViewer",
        e.PostingService = "postingService",
        e.FileNode = "fileNode",
        e.BookmarksViewer = "bookmarksViewer"
    }(t.MessageActionOrigin || (t.MessageActionOrigin = {})),
    function(e) {
        e[e.KeyboardCopy = 0] = "KeyboardCopy",
        e[e.KeyboardPaste = 1] = "KeyboardPaste"
    }(A = t.KeyboardActionType || (t.KeyboardActionType = {}));
    class k extends f.TelemetryEventBase {
        constructor(e) {
            super(),
            this._conversationId = e,
            this._isGroupConversation = c.isGroupConversation(this._conversationId),
            this._isEncryptedConversation = c.isEncryptedThread(this._conversationId),
            this._isBotConversation = c.isOneOnOneConversation(this._conversationId) && c.isAgent(this._conversationId),
            this._isBookmarkConversation = c.isBookmarkConversation(this._conversationId);
            const t = u.default.getConversation(this._conversationId);
            this._conversationMembersCount = t ? t.getMemberCount() : 0,
            this._isMeetNowThread = !!t && t.isMeetNowThread()
        }
        _useOldAttributeNames() {
            return !1
        }
        getAttributes() {
            const e = this._useOldAttributeNames() ? {
                Bot_Conversation: this._isBotConversation,
                Conversation_Members_Number: this._conversationMembersCount,
                Group_Conversation: this._isGroupConversation,
                IsEncryptedConversation: this._isEncryptedConversation
            } : {
                IsBotConversation: this._isBotConversation,
                ConversationMembersCount: this._conversationMembersCount,
                IsGroupConversation: this._isGroupConversation,
                IsEncryptedConversation: this._isEncryptedConversation
            };
            return this._isBookmarkConversation && (e.IsBookmarkConversation = this._isBookmarkConversation),
            this._isMeetNowThread && (e.IsMeetNowThread = this._isMeetNowThread),
            o.assign({}, super.getAttributes(), e)
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = _.getTrackableConversationId(this._conversationId);
            return t && (e[this._useOldAttributeNames() ? "Conversation_Id" : "ConversationId"] = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.ConversationTelemetryBase = k;
    class I extends k {
        constructor(e, t) {
            super(t),
            this._message = e,
            this._messageType = _.getMessageTypeName(this._message, C.getSkypeMri(), t),
            this._messageRawType = _.getMessageRawTypeName(this._message, C.getSkypeMri(), t),
            this._message instanceof y ? this._messageCorrelationId = r.getCorrelationIdFromMessageParts(this._message.creator, this._message.conversationId, _.getClientMessageId(this._message)) : this._messageCorrelationId = r.getCorrelationIdFromMessageParts(c.skypeIdToMri(C.getSkypeId()), t, this._message.clientmessageid);
            const i = this._message instanceof y ? this._message.creator : c.skypeIdToMri(C.getSkypeId());
            this._isOwnMessage = C.isMyMri(i)
        }
        getCorrelationAttributes() {
            const e = this._useOldAttributeNames() ? {
                Message_Correlation_Id: this._messageCorrelationId
            } : {
                MessageCorrelationId: this._messageCorrelationId
            };
            return o.assign({}, super.getCorrelationAttributes(), e)
        }
        getAttributes() {
            const e = this._useOldAttributeNames() ? {
                Message_Type: this._messageType,
                Message_RawType: this._messageRawType,
                Own_Message: this._isOwnMessage
            } : {
                MessageType: this._messageType,
                MessageRawType: this._messageRawType,
                IsOwnMessage: this._isOwnMessage
            };
            return this._message instanceof y && this._message.hasAlbumId() ? e.AlbumId = this._message.getAlbumId() : this._message.properties && this._message.properties[a.MessageProperties.AlbumId] && (e.AlbumId = this._message.properties[a.MessageProperties.AlbumId].toString()),
            o.assign({}, super.getAttributes(), e)
        }
    }
    t.MessageTelemetryBase = I;
    class w extends I {
        constructor(e, t, i, n, o, s) {
            super(t, e),
            this._originalMessageTime = i,
            this._origin = n,
            this._action = o,
            this._docId = s,
            this._timeToAction = Math.round((this._eventCreationTime - this._originalMessageTime) / 1e3)
        }
        getEventName() {
            return "messaging_action"
        }
        getAttributes() {
            return o.assign({}, super.getAttributes(), {
                Action: P[this._action],
                Origin: this._origin,
                IsOwnMessage: this._isOwnMessage,
                TimeToActionDuration: this._timeToAction,
                DocId: this._docId || ""
            })
        }
    }
    t.MessageActionTelemetry = w;
    t.ForwardedMessageTelemetry = class extends w {
        constructor(e, t, i, n, o, s) {
            super(e, t, i, n, o),
            this._destinationsConversationType = s,
            this._skypeConversationCount = 0,
            this._privateConversationCount = 0,
            this._smsConversationCount = 0,
            this._computeConversationTypes()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.SkypeConversationCount = this._skypeConversationCount,
            e.PrivateConversationCount = this._privateConversationCount,
            e.SmsConversationCount = this._smsConversationCount,
            e
        }
        _computeConversationTypes() {
            this._destinationsConversationType && o.each(this._destinationsConversationType, e=>{
                c.isEncryptedThread(e) ? this._privateConversationCount++ : c.isPhoneMri(e) ? this._smsConversationCount++ : this._skypeConversationCount++
            }
            )
        }
    }
    ;
    t.ShareFileMessageTelemetry = class extends w {
        constructor(e, t, i, n, o, s, r, a) {
            super(e, t, i, n, o),
            this._fileExtension = s,
            this._wasShared = r,
            this._error = a
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsShared = this._wasShared,
            e.Error = this._error || "",
            e.FileExtension = this._fileExtension,
            e
        }
    }
    ;
    t.QuotesEventTelemetry = class extends w {
        constructor(e, t, i, n, o, s) {
            super(e, t, i, n, o),
            this._quotesTriggerType = s
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.QuotesTriggerType = b.QuotesTriggerType[this._quotesTriggerType],
            e
        }
    }
    ;
    t.KeyboardMessagesTelemetry = class extends k {
        constructor(e, t) {
            super(e),
            this._attributes = this._constructAttributes(t)
        }
        getEventName() {
            return "messaging_action"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), this._attributes)
        }
        _constructAttributes(e) {
            return {
                Action: A[e.actionType],
                MessagesCount: e.messagesCount
            }
        }
    }
    ;
    t.SelectedMessagesTelemetry = class extends k {
        constructor(e, t, i, n, o) {
            super(e),
            this._toConversationCount = t,
            this._selectedMessages = i,
            this._selectedMessagesActionType = n,
            this._disabledActions = o,
            this._currentAttributes = this._computeAllAttributes()
        }
        getEventName() {
            return "messaging_action"
        }
        _computeAllAttributes() {
            const e = {
                Action: P[P.SelectMessages],
                SelectedMessagesCount: this._selectedMessages.length,
                SelectedMessagesAction: b.SelectedMessagesActionType[this._selectedMessagesActionType]
            };
            this._toConversationCount && (e.ForwardToConversationCount = this._toConversationCount);
            const t = {};
            return o.each(this._selectedMessages, e=>{
                const i = "SelectedMessageType:" + _.getMessageTypeName(e.message, C.getSkypeMri(), this._conversationId);
                t[i] = o.isUndefined(t[i]) ? 1 : t[i] + 1
            }
            ),
            o.assign(e, t),
            e.SelectedMessagesDisabledCopy = this._disabledActions.disabledCopy,
            e.SelectedMessagesDisabledRemove = this._disabledActions.disabledRemove,
            e.SelectedMessagesDisabledForward = this._disabledActions.disabledForward,
            e
        }
        getAttributes() {
            const e = super.getAttributes();
            return o.assign(e, this._currentAttributes),
            e
        }
    }
    ;
    t.MessageContentClicked = class extends I {
        constructor(e) {
            super(e, e.conversationId),
            this._serverMessageId = e.getOriginalServerId() || "",
            this._cmid = _.getClientMessageId(this._message) || ""
        }
        getEventName() {
            return "message_consumed"
        }
        getCorrelationAttributes() {
            const e = super.getCorrelationAttributes();
            return e.Client_Message_Id = this._cmid,
            e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Clicked_Timestamp = this._eventCreationTime,
            e.Server_Message_Id = this._serverMessageId,
            e.Action = "contentClicked",
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    ;
    t.MessageSendTimeout = class extends I {
        constructor(e, t) {
            super(e, t)
        }
        getEventName() {
            return "messaging_send_delayed"
        }
    }
    ;
    t.MessageRead = class extends I {
        getEventName() {
            return "message_read"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.MessageType = this._messageType,
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    ;
    t.MessageReadLie = class extends I {
        getEventName() {
            return "message_read_lie"
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    ;
    var N, M, E;
    t.MessageSent = class extends I {
        constructor(e, t, i, n, o, s, r, a, l, c, d, u, h, p, m, S, C) {
            super(t, e),
            this._isReceiverShortCircuit = i,
            this._rawContentLength = n,
            this._postSource = o,
            this._registrationId = s,
            this._endpointId = r,
            this._receiverMri = a,
            this._receiverUserId = l,
            this._oneOnOneThreadId = c,
            this._nonBlocking = d,
            this._rootViewType = u,
            this._deviceOrientation = h,
            this._isMediaPipOpened = p,
            this._messageComposerAction = m,
            this._messageSentContentType = S,
            this._mediaDurationInMs = C;
            const y = v.transformUnicodeEmojis(g.decodeFromContent(this._message.content));
            this._numberOfEmoticons = y.getNumberOfEmoticons(),
            this._numberOfDiverseEmoticons = y.getNumberOfDiverseEmoticons(),
            this._numberOfNativeEmojis = y.getNumberOfUnicodeEmoji(),
            this._numberOfDirectMentions = y.getNumberOfDirectMentions(),
            this._hasAllMention = y.hasAllMention(),
            this._webLinks = y.getWebLinks(),
            this._hasWikiMarkup = y.hasWikiMarkup();
            const f = this._message;
            this._clientMessageId = f.clientmessageid,
            this._applyMessageTypeOverrideIfNeeded(y)
        }
        getEventName() {
            return "message_sent"
        }
        getEventPriority() {
            return n.AWTEventPriority.High
        }
        getAttributes() {
            const e = {
                CharacterCount: this._rawContentLength,
                EmoticonCount: this._numberOfEmoticons,
                DiverseEmoticonCount: this._numberOfDiverseEmoticons,
                IsReceiverShortCircuit: this._isReceiverShortCircuit,
                NativeEmojiCount: this._numberOfNativeEmojis,
                SendTimestamp: this._eventCreationTime,
                DirectMentionCount: this._numberOfDirectMentions,
                HasAllMention: this._hasAllMention,
                URLCount: o.size(this._webLinks),
                IsNonBlocking: !!this._nonBlocking,
                PostSource: h.PostSource[this._postSource],
                HasWikiMarkup: this._hasWikiMarkup,
                DeviceOrientation: s.DeviceOrientation[this._deviceOrientation]
            };
            return this._clientMessageId && (e.ClientMessageId = this._clientMessageId),
            this._endpointId && (e.EndpointId = this._endpointId),
            this._registrationId && (e.RegistrationId = this._registrationId),
            this._oneOnOneThreadId && (e.OneOnOneThreadId = this._oneOnOneThreadId),
            this._rootViewType && (e.RootViewType = d.RootViewType[this._rootViewType]),
            o.isUndefined(this._isMediaPipOpened) || (e.IsMediaPipOpened = this._isMediaPipOpened),
            o.isUndefined(this._messageComposerAction) || (e.MessageComposerAction = M[this._messageComposerAction]),
            o.isUndefined(this._messageSentContentType) || (e.MessageSentContentType = E[this._messageSentContentType]),
            o.isUndefined(this._mediaDurationInMs) || (e.MediaDurationInMs = this._mediaDurationInMs),
            this._addWellKnownDomainAttributes(e),
            o.assign({}, super.getAttributes(), e)
        }
        getPiiAttributes() {
            return o.assign({}, super.getPiiAttributes(), {
                ReceiverMri: {
                    value: this._receiverMri || "",
                    piiKind: n.AWTPiiKind.Identity
                },
                ReceiverUserId: {
                    value: this._receiverUserId || "",
                    piiKind: n.AWTPiiKind.Identity
                }
            })
        }
        _addWellKnownDomainAttributes(e) {
            let t = 0;
            o.each(this._webLinks, e=>{
                T.default.isYoutubeUrl(e) && t++
            }
            ),
            t > 0 && (e.YoutubeURLCount = t)
        }
        _applyMessageTypeOverrideIfNeeded(e) {
            if (_.getMessageTypeGroup(this._message) === a.MessageTypeGroups.SwiftCard) {
                const t = e.getFirstUriObjectChild(S.SwiftUriObjectNode);
                if (t) {
                    t.getCardType() === p.imageContentTypes.gif && (this._messageType = "Gif")
                }
            }
        }
    }
    ,
    function(e) {
        e[e.JumpToEnd = 0] = "JumpToEnd",
        e[e.ReadReceiptsViewed = 1] = "ReadReceiptsViewed",
        e[e.MonkeySeeMonkeyDo = 2] = "MonkeySeeMonkeyDo"
    }(N = t.MessagePanelActionType || (t.MessagePanelActionType = {}));
    class x extends f.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._conversationId = e,
            this._actionType = t,
            this._isGroupConversation = c.isGroupConversation(this._conversationId);
            const i = u.default.getConversation(this._conversationId);
            this._conversationMembersCount = i ? i.getMemberCount() : 0
        }
        getEventName() {
            return "messaging_panel"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = N[this._actionType],
            e.IsGroupConversation = this._isGroupConversation,
            e.ConversationMembersCount = this._conversationMembersCount,
            e
        }
    }
    t.JumpToEnd = class extends x {
        constructor(e, t, i) {
            super(e, N.JumpToEnd),
            this._jumpedFrom = t,
            this._unreadCounts = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.JumpedFrom = this._jumpedFrom ? this._jumpedFrom : "DB_LOAD",
            e.UnreadCount = this._unreadCounts,
            e
        }
    }
    ;
    t.ReadReceiptsViewed = class extends x {
        constructor(e, t, i) {
            super(i, N.ReadReceiptsViewed),
            this._peopleCountOnMark = e,
            this._peopleCountTotal = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ReadByMarkCount = this._peopleCountOnMark,
            e.ReadByTotalCount = this._peopleCountTotal,
            e
        }
    }
    ;
    t.MonkeySeeMonkeyDo = class extends x {
        constructor(e, t) {
            super(e, N.MonkeySeeMonkeyDo),
            this._isShown = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.WasMonkeyShown = this._isShown,
            e
        }
    }
    ;
    t.ShareContactsTelemetry = class extends k {
        constructor(e, t, i, n, o) {
            super(t),
            this._entryPoint = e,
            this.conversationId = t,
            this._numberOfPSTNContactsShares = i,
            this._numberOfSkypeContactsShares = n,
            this._usedSearch = o
        }
        getEventName() {
            return "messaging_share_contacts"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.EntryPoint = m.ShareContactOrigin[this._entryPoint],
            e.SharedPSTNContactsCount = this._numberOfPSTNContactsShares,
            e.SharedSkypeContactsCount = this._numberOfSkypeContactsShares,
            e.HasUsedSearch = this._usedSearch,
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    ;
    t.AddContactsTelemetry = class extends k {
        constructor(e, t) {
            super(t),
            this._origin = e,
            this.conversationId = t
        }
        getEventName() {
            return "messaging_add_contacts"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AddContactsOrigin = l.AddMemberToThreadSource[this._origin],
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    ,
    function(e) {
        e[e.Paste = 0] = "Paste",
        e[e.NoPaste = 1] = "NoPaste",
        e[e.PastePlainText = 2] = "PastePlainText",
        e[e.PasteHtmlText = 3] = "PasteHtmlText",
        e[e.PasteLink = 4] = "PasteLink",
        e[e.PasteEscapedLink = 5] = "PasteEscapedLink"
    }(M = t.MessageComposerAction || (t.MessageComposerAction = {})),
    function(e) {
        e[e.NoText = 0] = "NoText",
        e[e.PlainText = 1] = "PlainText",
        e[e.MarkupText = 2] = "MarkupText",
        e[e.Link = 3] = "Link",
        e[e.Audio = 4] = "Audio"
    }(E = t.MessageComposerSentContentType || (t.MessageComposerSentContentType = {}));
    t.MessageComposerTelemetry = class extends k {
        constructor(e, t, i) {
            super(e),
            this._userCancelled = t,
            this._action = i
        }
        getEventName() {
            return "messaging_composer"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.UserCancelled = this._userCancelled,
            e.Action = M[this._action],
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    ;
    t.MessagesFetched = class extends k {
        constructor(e, t, i, n) {
            super(e),
            this._fetchedMessages = t,
            this._syncedBackwards = i,
            this._duration = n
        }
        getEventName() {
            return "messaging_extra_fetch"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.FetchedMessages = this._fetchedMessages,
            e.IsSyncedBackwards = this._syncedBackwards,
            e.Duration = this._duration,
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(3)
      , s = i(236)
      , r = i(106);
    t.ScenarioName = r.ScenarioName;
    const a = i(39)
      , l = i(2375)
      , c = i(9);
    class d extends s.default {
        constructor(e, t, i={}, n, o=!1) {
            super(e, t, i, n),
            this._shouldSendIntermediateStepsOnFinal = o
        }
        _shouldSendSampledTelemetry() {
            if (void 0 !== this._shouldSendScenarioTelemetry)
                return this._shouldSendScenarioTelemetry;
            if (this._scenarioName === r.ScenarioName[r.ScenarioName.Search])
                return this._shouldSendScenarioTelemetry = !0,
                this._shouldSendScenarioTelemetry;
            if (n.isEmpty(a.SampledEvents))
                return !0;
            const e = "scenario_" + this._scenarioName
              , t = a.SampledEvents[e];
            return n.isNumber(t) ? (this._shouldSendScenarioTelemetry = c.sampleForPercentage(t),
            this._shouldSendScenarioTelemetry) : (this._shouldSendScenarioTelemetry = !0,
            this._shouldSendScenarioTelemetry)
        }
        extendProperties(e) {
            n.assign(this._properties, e)
        }
        _markStep(e, t, i, s, r, a, c) {
            super._markStep(e, t, i, s, r, a, c);
            const d = ["started", "finished", "failed"];
            if (this._shouldSendSampledTelemetry() && !s) {
                n.some(d, t=>e === t) || (e = this._scenarioName + "_" + e);
                const t = {
                    step_duration: n.last(this._markedSteps).stepDuration,
                    step_name: e
                };
                if (n.assign(t, this._properties),
                a) {
                    this._shouldSendIntermediateStepsOnFinal && n.each(this._markedSteps, e=>{
                        t[e.name + "_step_duration"] = e.stepDuration,
                        t[e.name + "_total_duration"] = e.totalDuration
                    }
                    );
                    const e = n.find(this._markedSteps, e=>e.isTarget);
                    e && (t.target_duration_ms = e.totalDuration),
                    t.total_duration = this._totalDuration,
                    t.is_final = !0
                }
                o.track(new l.default(this._scenarioName,this._scenarioId || "",t,()=>this._shouldSendSampledTelemetry(),this._experimentConfigIds || ""))
            }
        }
    }
    t.default = d
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(10)
      , s = i(5)
      , r = i(8)
      , a = i(23)
      , l = i(12)
      , c = s.lazyProperties({
        linkUnderline: ()=>n.Styles.createTextStyle({
            textDecorationLine: "underline"
        }),
        linkBlue: ()=>n.Styles.createTextStyle({
            color: r.Color.blue
        }),
        linkWhite: ()=>n.Styles.createTextStyle({
            color: r.Color.white
        })
    });
    class d extends l.default {
        constructor() {
            super(...arguments),
            this._onTextElementRef = e=>{
                this._textElement = e || void 0
            }
        }
        requestFocus() {
            this.isComponentMounted() && this._textElement && this._textElement.requestFocus && this._textElement.requestFocus()
        }
        blur() {
            this.isComponentMounted() && this._textElement && this._textElement.blur && this._textElement.blur()
        }
        render() {
            const e = this._useAccessibleTheme()
              , t = [];
            switch (this.props.linkTextStyle) {
            case o.LinkTextStyle.BodyText:
                t.push(a.bodyFontStyle(this._currentTheme));
                break;
            case o.LinkTextStyle.BodyTextSmall:
                t.push(a.bodyFontStyle(this._currentTheme, o.BodyTextSize.SmallDeprecated));
                break;
            case o.LinkTextStyle.BodyTextBold:
                t.push(a.bodyBoldFontStyle(this._currentTheme));
                break;
            case o.LinkTextStyle.Caption:
                t.push(a.captionFontStyle(this._currentTheme))
            }
            if ((this.props.underline || e) && t.push(c.linkUnderline),
            this.props.white)
                t.push(c.linkWhite);
            else if (this.props.blue && !e)
                t.push(c.linkBlue);
            else if (this.props.textThemeColor)
                switch (this.props.textThemeColor) {
                case o.TextThemeColor.Primary:
                    t.push(this._themeStyles.primaryTextColorStyle);
                    break;
                case o.TextThemeColor.Secondary:
                    t.push(this._themeStyles.secondaryTextColorStyle);
                    break;
                case o.TextThemeColor.Disabled:
                    t.push(this._themeStyles.disabledTextColorStyle);
                    break;
                case o.TextThemeColor.Destructive:
                    t.push(this._themeStyles.destructiveTextColorStyle)
                }
            return this.props.style && t.push(this.props.style),
            n.createElement(n.Link, Object.assign({}, this.props, {
                style: t,
                ref: this._onTextElementRef
            }), this.props.children)
        }
    }
    t.default = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(104)
      , s = i(0)
      , r = i(52)
      , a = i(3);
    class l {
        constructor(e) {
            this.params = e
        }
    }
    t.MiniToastMessage = l;
    t.default = new class {
        constructor() {
            this._bottomMarginEntries = [],
            this.showToastEvent = new r.default,
            this._currentMessages = [],
            this._keyCount = 0,
            this._bottomMargin = 0,
            this._defaultBottomMargin = 0,
            this._baseBottomMargin = 0
        }
        scheduleMessage(e) {
            this._currentMessages.push(new l(e)),
            this._showToastMessage()
        }
        scheduleTextMessage(e, t, i) {
            const n = t || "key" + this._keyCount++;
            this.scheduleMessage({
                key: n,
                textMessage: e,
                rootViewId: i
            })
        }
        removeToastMessage(e) {
            this._displayedMessage && this._displayedMessage.params.key === e ? this.toastDismissed(e, !0) : n.remove(this._currentMessages, t=>t.params.key === e)
        }
        toastDismissed(e, t=!1) {
            (!e || this._displayedMessage && this._displayedMessage.params.key === e) && (this._displayedMessage = void 0),
            this._showToastMessage(t)
        }
        setBottomMarginDefault(e) {
            a.log(o.LogTraceArea.GenericUnsafe, "MiniToastService:setBottomMarginDefault - " + e),
            this._defaultBottomMargin = e,
            this._updateBottomMargin()
        }
        addOrUpdateBottomMargin(e, t) {
            a.log(o.LogTraceArea.GenericUnsafe, "MiniToastService:addOrUpdateBottomMargin - " + e),
            this._addMarginListEntry({
                key: e,
                bottomMargin: t
            }),
            this._updateBottomMargin()
        }
        removeBottomMargin(e) {
            const t = n.findIndex(this._bottomMarginEntries, t=>t.key === e);
            -1 !== t && (a.log(o.LogTraceArea.GenericUnsafe, "MiniToastService:removeBottomMargin - " + e),
            this._bottomMarginEntries.splice(t, 1),
            this._updateBottomMargin())
        }
        setBottomMarginBase(e) {
            this._baseBottomMargin = e
        }
        _addMarginListEntry(e) {
            const t = n.findIndex(this._bottomMarginEntries, t=>t.key === e.key);
            -1 !== t ? (a.log(o.LogTraceArea.GenericUnsafe, "MiniToastService: Modified old entry - " + e.key),
            this._bottomMarginEntries[t] = e) : (a.log(o.LogTraceArea.GenericUnsafe, "MiniToastService: Pushed new entry - " + e.key),
            this._bottomMarginEntries.push(e))
        }
        _updateBottomMargin() {
            const e = n.last(this._bottomMarginEntries)
              , t = e ? e.bottomMargin : this._defaultBottomMargin;
            this._bottomMargin !== t && (a.log(o.LogTraceArea.GenericUnsafe, "MiniToastService: updating bottom margin " + t),
            this._bottomMargin = t,
            this._displayedMessage && this.showToastEvent.fire(this._displayedMessage, this._totalBottomInset()))
        }
        _showToastMessage(e=!1) {
            const t = n.head(this._currentMessages)
              , i = s.App.getActivationState() === s.Types.AppActivationState.Active;
            (this._displayedMessage || t || e) && i && !this._displayedMessage && (this.showToastEvent.fire(t, this._totalBottomInset()),
            this._currentMessages.shift(),
            this._displayedMessage = t)
        }
        _totalBottomInset() {
            return this._baseBottomMargin + this._bottomMargin
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(36)
      , o = i(6)
      , s = i(61)
      , r = i(4)
      , a = i(109)
      , l = i(9);
    function c(e) {
        return !!e && (e === a.Theme.AccessibleDark || e === a.Theme.ColorfulDark || e === a.Theme.MonoDark || e === a.Theme.ClassicDarkDeprecated || e === a.Theme.DelphiDark)
    }
    function d(e) {
        return !!e && (e === a.Theme.Accessible || e === a.Theme.AccessibleDark)
    }
    function u(e) {
        switch (e) {
        case a.Theme.Colorful:
            return a.Theme.ColorfulDark;
        case a.Theme.Mono:
            return a.Theme.MonoDark;
        case a.Theme.Accessible:
            return a.Theme.AccessibleDark;
        case a.Theme.ClassicDeprecated:
            return a.Theme.ClassicDarkDeprecated;
        case a.Theme.Delphi:
            return a.Theme.DelphiDark;
        case a.Theme.ColorfulDark:
            return a.Theme.Colorful;
        case a.Theme.MonoDark:
            return a.Theme.Mono;
        case a.Theme.AccessibleDark:
            return a.Theme.Accessible;
        case a.Theme.ClassicDarkDeprecated:
            return a.Theme.ClassicDeprecated;
        case a.Theme.DelphiDark:
            return a.Theme.Delphi;
        default:
            return l.switchStatementExhaustiveChecking(e)
        }
    }
    function g(e, t) {
        return void 0 !== t && (t === n.OSTheme.Dark && c(e) || t === n.OSTheme.Light && !c(e))
    }
    t.isDarkTheme = c,
    t.isAccessibleTheme = d,
    t.isMonoTheme = function(e) {
        return !!e && (e === a.Theme.Mono || e === a.Theme.MonoDark)
    }
    ,
    t.isDelphiTheme = function(e) {
        return !!e && (e === a.Theme.Delphi || e === a.Theme.DelphiDark)
    }
    ,
    t.isClassicTheme = function(e) {
        return !!e && (e === a.Theme.ClassicDeprecated || e === a.Theme.ClassicDarkDeprecated || e === a.Theme.Delphi || e === a.Theme.DelphiDark)
    }
    ,
    t.isColorfulTheme = function(e) {
        return !!e && (e === a.Theme.Colorful || e === a.Theme.ColorfulDark)
    }
    ,
    t.matchingLightOrDarkTheme = u,
    t.matchingLightTheme = function(e) {
        switch (e) {
        case a.Theme.ColorfulDark:
            return a.Theme.Colorful;
        case a.Theme.MonoDark:
            return a.Theme.Mono;
        case a.Theme.AccessibleDark:
            return a.Theme.Accessible;
        case a.Theme.ClassicDarkDeprecated:
            return a.Theme.ClassicDeprecated;
        case a.Theme.DelphiDark:
            return a.Theme.Delphi;
        default:
            return e
        }
    }
    ,
    t.themeMatchesOSTheme = g,
    t.convertThemeToDelphiTheme = function(e) {
        return d(e) ? c(e) ? a.Theme.DelphiDark : a.Theme.Delphi : e
    }
    ,
    t.convertOSThemeToTheme = function(e, t) {
        if (void 0 !== t)
            return g(e, t) ? e : u(e)
    }
    ,
    t.getAccessibilityLabel = function(e) {
        let t;
        switch (e) {
        case a.Theme.Accessible:
        case a.Theme.AccessibleDark:
            t = "ColorThemeDialog.HighContrastThemeTitle";
            break;
        case a.Theme.Mono:
        case a.Theme.MonoDark:
            t = "ColorThemeDialog.ClassicThemeTitle";
            break;
        case a.Theme.ClassicDeprecated:
        case a.Theme.ClassicDarkDeprecated:
        case a.Theme.Delphi:
        case a.Theme.DelphiDark:
            t = "ColorThemeDialog.BlueThemeTitle";
            break;
        case a.Theme.Colorful:
        case a.Theme.ColorfulDark:
            t = "ColorThemeDialog.ColorThemeTitle";
            break;
        default:
            t = l.switchStatementExhaustiveChecking(e)
        }
        return r.getString(t) + " " + r.getString("AccessibilityLabel.SelectedControlLabel")
    }
    ,
    t.systemThemeEnabledAndChanges = function() {
        return s.UICapabilities.systemThemeSupported() && o.default.getS4LUiFeatures().systemThemeEnabled
    }
    ,
    t.systemThemeEnabled = function() {
        return s.UICapabilities.systemThemeSupported() && o.default.getS4LUiFeaturesNoSubscription().systemThemeEnabled
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(481);
    n.__exportStar(i(481), t),
    t.default = o.default
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(72)
      , s = i(7)
      , r = i(48)
      , a = i(2)
      , l = i(141);
    t.TaskTypeFlags = l.TaskTypeFlags;
    const c = i(3)
      , d = i(74)
      , u = i(105)
      , g = i(21)
      , h = i(29);
    class p {
        constructor(e=!1) {
            this._test_allowTimerUpdates = e,
            this._refreshers = {},
            this._dbOnlyRefreshers = {},
            this._isReadyForRefreshes = !1,
            this._loadedCache = !1,
            this._recalcNextUpdate = ()=>{
                this._recalcNextUpdateInternal()
            }
            ,
            this._recalcNextUpdateInternal = ()=>{
                if (!this._loadedCache || !this._isReadyForRefreshes)
                    return;
                this._timer && (h.clearExpiration(this._timer),
                this._timer = void 0);
                const e = Date.now();
                let t;
                n.each(this._refreshers, (i,n)=>{
                    if (!i.callback)
                        return;
                    if (!i.interval && !i.nextExecution)
                        return;
                    if (i.currentlyRunning)
                        return;
                    let o = i.nextExecution || (i.lastRefresh || 0) + (i.interval || 0);
                    if (o <= e) {
                        if (c.log(a.LogTraceArea.GenericUnsafe, `InfoRefreshService: firing [${n}] [nextExecution=${i.nextExecution}][lastRefresh=${i.lastRefresh}] [interval=${i.interval}]`),
                        this._performCallback(i, n),
                        i.currentlyRunning)
                            return;
                        o = i.nextExecution || (i.lastRefresh || 0) + (i.interval || 0)
                    }
                    (!t || o < t) && (t = o)
                }
                ),
                t && (this._timer = h.setExpiration(this._recalcNextUpdate, t))
            }
            ,
            g.RegisterStartupable(this, "InfoRefreshService", [d.default])
        }
        startup() {
            const e = d.default.getData(r.InternalKeys.InfoRefreshServiceCache);
            return n.each(e, (e,t)=>{
                this._refreshers[t] ? this._refreshers[t].lastRefresh = e : this._dbOnlyRefreshers[t] = e
            }
            ),
            u.default.performAfterUIStarted(()=>{
                this._isReadyForRefreshes = !0,
                this._recalcNextUpdate()
            }
            ),
            this._loadedCache = !0,
            s.Resolved()
        }
        setRefreshOptions(e, t) {
            this._refreshers[e] ? n.extend(this._refreshers[e], t) : (this._refreshers[e] = n.clone(t),
            e in this._dbOnlyRefreshers && (this._refreshers[e].lastRefresh = this._dbOnlyRefreshers[e],
            delete this._dbOnlyRefreshers[e])),
            this._recalcNextUpdate()
        }
        fireEarly(e) {
            this._fireEarlyInternal(e)
        }
        _fireEarlyInternal(e) {
            const t = this._refreshers[e];
            t && !t.currentlyRunning && (c.log(a.LogTraceArea.GenericUnsafe, `InfoRefreshService: fireEarly [${e}]`),
            this._performCallback(t, e))
        }
        fireAllEarly() {
            n.each(this._refreshers, (e,t)=>{
                e.callback && this.fireEarly(t)
            }
            )
        }
        _performCallback(e, t) {
            e.callback,
            e.currentlyRunning = !0;
            const i = ()=>{
                s.Resolved().then(()=>{
                    const t = e.failureBackoff ? 1 + e.failureBackoff.getIncrementCount() : 0;
                    return e.callback(t)
                }
                ).finally(()=>{
                    e.currentlyRunning = !1
                }
                ).then(()=>{
                    e.failureBackoff = void 0,
                    e.nextExecution = void 0,
                    e.lastRefresh = Date.now(),
                    this._saveCache()
                }
                , ()=>{
                    e.failureBackoff ? e.failureBackoff.calculateNext() : e.failureBackoff = new o.ExponentialTime(5e3,18e5),
                    e.nextExecution = Date.now() + e.failureBackoff.getTime()
                }
                ).finally(()=>{
                    this._recalcNextUpdate()
                }
                )
            }
            ;
            e.taskTypeFlags ? l.default.queueIdleTask("InfoRefreshService Task [" + t + "]", e.taskTypeFlags, i) : i()
        }
        _saveCache() {
            let e = n.mapValues(this._refreshers, e=>e.lastRefresh || 0);
            n.each(this._dbOnlyRefreshers, (t,i)=>{
                e[i] = t
            }
            ),
            d.default.putData(r.InternalKeys.InfoRefreshServiceCache, e)
        }
    }
    t.Test_InfoRefreshService = p,
    t.default = new p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(7)
      , r = i(121);
    let a = new class {
        measureLayoutRelativeToWindow(e) {
            const t = this.maybeMountedAnchor(e());
            return t ? n.UserInterface.measureLayoutRelativeToWindow(t) : s.Rejected("Anchor component undefined or unmounted.")
        }
        measureLayoutRelativeToAncestor(e, t) {
            const i = this.maybeMountedAnchor(e())
              , o = this.maybeMountedAnchor(t());
            return i && o ? n.UserInterface.measureLayoutRelativeToAncestor(i, o) : s.Rejected("Anchor and/or ancestor undefined or unmounted.")
        }
        maybeMountedAnchor(e) {
            if (!(e instanceof o.ComponentBase) || e.isComponentMounted())
                return e
        }
        maybeHandleKeyPress(e, t) {
            return (e.keyCode === r.SPACE || e.keyCode === r.ENTER) && (e.stopPropagation(),
            e.preventDefault(),
            t(),
            !0)
        }
    }
    ;
    t.default = a
}
, , , , , , , function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(33)
      , s = i(2370)
      , r = i(0)
      , a = i(13)
      , l = i(52)
      , c = i(7)
      , d = i(6)
      , u = i(2)
      , g = i(141)
      , h = i(3)
      , p = i(778)
      , m = i(21)
      , S = i(39)
      , C = i(248)
      , y = {
        [r.Types.DeviceNetworkType.Unknown]: !0,
        [r.Types.DeviceNetworkType.Wifi]: !0
    };
    let f = class extends a.StoreBase {
        constructor() {
            super(),
            this.connectivityChangedEvent = new l.default,
            this._reportedConnected = !0,
            this._reportedNetworkType = r.Types.DeviceNetworkType.Unknown,
            this._passedConnectivityCheck = !0,
            this._connectivityCheckInProgress = !1,
            this._canBypassNetworkAvailability = !1,
            m.RegisterStartupable(this, "ReportedConnectivityStore")
        }
        startup() {
            let e = !1;
            return r.Network.connectivityChangedEvent.subscribe(t=>{
                e = !0,
                this._passedConnectivityCheck = !0,
                this._connectivityCheckInProgress = !1,
                this._fetchNetworkType(),
                this._reportedConnectivityChanged(t)
            }
            ),
            this._fetchNetworkType(),
            r.Network.isConnected().then(t=>{
                e || (e = !0,
                this._reportedConnectivityChanged(t),
                t && this._performConnectivityCheck(),
                g.default.updateAppState({
                    networkingAvailable: this.isNetworkingAvailable()
                }))
            }
            ),
            this.subscribe(()=>{
                g.default.updateAppState({
                    networkingAvailable: this.isNetworkingAvailable()
                })
            }
            ),
            c.Resolved()
        }
        isNetworkConnected() {
            return this._reportedConnected || this._canBypassNetworkAvailability
        }
        isNetworkingAvailable() {
            return this.isNetworkConnected() && this._passedConnectivityCheck
        }
        getNetworkType() {
            return this._reportedNetworkType
        }
        getPassedConnectivityCheck() {
            return this._passedConnectivityCheck
        }
        runConnectivityCheck() {
            this._performConnectivityCheck()
        }
        forcePassedConnectivityCheck() {
            this._connectivityCheckInProgress = !1,
            this._passedConnectivityCheck || (this._passedConnectivityCheck = !0,
            this.trigger())
        }
        _performConnectivityCheck() {
            if (this._connectivityCheckInProgress)
                return void h.log(u.LogTraceArea.ReportedConnectivityStore, "Captive portal check already in progress");
            if (!s.default.isDetectionSupported())
                return void h.log(u.LogTraceArea.ReportedConnectivityStore, "Captive portal check not supported");
            let e;
            this._connectivityCheckInProgress = !0,
            void 0 !== this._fetchNetworkDefer ? (h.log(u.LogTraceArea.ReportedConnectivityStore, "Captive portal waiting for network type"),
            e = this._fetchNetworkDefer.promise()) : e = c.Resolved(this._reportedNetworkType),
            e.then(e=>{
                if (!y[e])
                    return h.log(u.LogTraceArea.ReportedConnectivityStore, "Network does not support captive portal"),
                    void this.forcePassedConnectivityCheck();
                const t = d.default.getConfigSettingsNoSubscription().captivePortalDetection;
                t.enabled ? (h.log(u.LogTraceArea.ReportedConnectivityStore, "Performing connectivity/captive portal check with fetch"),
                s.default.getClient(t).checkConnectivity().then(e=>{
                    if (!this._connectivityCheckInProgress)
                        return;
                    h.log(u.LogTraceArea.ReportedConnectivityStore, "Captive portal check finished; connected: " + (e.connected ? "Yes" : "No") + "; Status code: " + e.statusCode + "; Response length: " + e.responseLength);
                    const t = this._reportedConnected
                      , i = this._passedConnectivityCheck;
                    this._passedConnectivityCheck !== e.connected && (this._passedConnectivityCheck = e.connected,
                    e.connected && !this._reportedConnected ? this._reportedConnectivityChanged(!0) : this.trigger());
                    const n = new p.CaptivePortalCheckEvent(e.connected,t,i);
                    h.track(n)
                }
                ).catch(e=>{
                    if (!this._connectivityCheckInProgress)
                        return;
                    h.log(u.LogTraceArea.ReportedConnectivityStore, "Captive portal check failed, defaulting to success", o.pii.Omit(e));
                    const t = this._reportedConnected
                      , i = this._passedConnectivityCheck;
                    this.forcePassedConnectivityCheck();
                    const n = new p.CaptivePortalCheckFailureEvent(t,i,e && e.statusText,!(!e || !e.timedOut));
                    h.track(n);
                    const s = new C.DevDebug("CaptivePortalCheck",e.toString());
                    h.track(s)
                }
                ).finally(()=>{
                    this._connectivityCheckInProgress = !1
                }
                )) : this.forcePassedConnectivityCheck()
            }
            ).catch(e=>{
                h.error(u.LogTraceArea.ReportedConnectivityStore, "Captive portal waited for network type, got error"),
                this._connectivityCheckInProgress = !1
            }
            )
        }
        _reportedConnectivityChanged(e) {
            this._reportedConnected !== e && (h.log(u.LogTraceArea.ReportedConnectivityStore, "connectivity has changed: Connected = " + e),
            e && this._performConnectivityCheck(),
            this._reportedConnected = e,
            this.connectivityChangedEvent.fire(this._reportedConnected),
            this.trigger())
        }
        _fetchNetworkType() {
            const e = Date.now();
            this._fetchNetworkLastStartedAt = e,
            void 0 === this._fetchNetworkDefer && (this._fetchNetworkDefer = c.Defer()),
            c.all([r.Network.getType(), s.default.canBypassNetworkAvailability()]).then(([e,t])=>{
                this._reportedNetworkType = e,
                this._canBypassNetworkAvailability = t,
                S.ReportedNetworkType = e,
                h.log(u.LogTraceArea.ReportedConnectivityStore, " _fetchNetworkType() type: " + r.Types.DeviceNetworkType[e])
            }
            ).catch(()=>{
                h.log(u.LogTraceArea.ReportedConnectivityStore, "Failed to get Network type"),
                this._reportedNetworkType = r.Types.DeviceNetworkType.Unknown,
                S.ReportedNetworkType = r.Types.DeviceNetworkType.Unknown
            }
            ).finally(()=>{
                void 0 !== this._fetchNetworkDefer && e >= this._fetchNetworkLastStartedAt && (this._fetchNetworkDefer.resolve(this._reportedNetworkType),
                this._fetchNetworkDefer = void 0)
            }
            )
        }
        test_reset() {
            this._reportedConnected = !0,
            this._reportedNetworkType = r.Types.DeviceNetworkType.Unknown,
            this._passedConnectivityCheck = !0,
            this._connectivityCheckInProgress = !1
        }
    }
    ;
    n.__decorate([a.autoSubscribe], f.prototype, "isNetworkConnected", null),
    n.__decorate([a.autoSubscribe], f.prototype, "isNetworkingAvailable", null),
    n.__decorate([a.autoSubscribe], f.prototype, "getNetworkType", null),
    n.__decorate([a.autoSubscribe], f.prototype, "getPassedConnectivityCheck", null),
    f = n.__decorate([a.AutoSubscribeStore], f),
    e.exports = new f
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(5)
      , r = i(14)
      , a = s.lazyProperties({
        hoverStyle: ()=>n.Styles.createViewStyle({
            opacity: .8
        })
    });
    class l extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._onHoverStart = e=>{
                this.isComponentMounted() && (this.props.onHoverStart && this.props.onHoverStart(e),
                this.setState({
                    isHovering: !0
                }))
            }
            ,
            this._onHoverEnd = e=>{
                this.isComponentMounted() && (this.props.onHoverEnd && this.props.onHoverEnd(e),
                this.setState({
                    isHovering: !1
                }))
            }
        }
        requestFocus() {
            this.isComponentMounted() && this._focusableElement && this._focusableElement.requestFocus && this._focusableElement.requestFocus()
        }
        blur() {
            this.isComponentMounted() && this._focusableElement && this._focusableElement.blur && this._focusableElement.blur()
        }
        _baseStyle() {
            const e = [this.props.style];
            return this.state.isHovering && !this.props.disableHoverOpacityStyles && e.push(a.hoverStyle),
            e
        }
        _baseProps() {
            return Object.assign(Object.assign({}, this.props), {
                style: this._baseStyle()
            })
        }
    }
    t.HoverableView = class extends l {
        constructor() {
            super(...arguments),
            this._onFocusableComponentRef = e=>{
                this._focusableElement = e || void 0
            }
        }
        _baseStyle() {
            return [super._baseStyle(), this.props.disableCursor ? void 0 : r.pointerCursor, this.state.isHovering ? this.props.hoverStyle : void 0]
        }
        render() {
            return n.createElement(n.View, Object.assign({}, this._baseProps(), {
                onMouseEnter: this._onHoverStart,
                onMouseLeave: this._onHoverEnd,
                ref: this._onFocusableComponentRef
            }), this.props.children)
        }
    }
    ;
    t.HoverableButton = class extends l {
        constructor() {
            super(...arguments),
            this._onFocusableComponentRef = e=>{
                this._focusableElement = e || void 0
            }
        }
        _baseStyle() {
            return [super._baseStyle(), this.state.isHovering ? this.props.hoverStyle : void 0]
        }
        render() {
            return n.createElement(n.Button, Object.assign({}, this._baseProps(), {
                onHoverStart: this._onHoverStart,
                onHoverEnd: this._onHoverEnd,
                ref: this._onFocusableComponentRef
            }), this.props.children)
        }
    }
    ;
    t.HoverableLink = class extends l {
        constructor() {
            super(...arguments),
            this._onFocusableComponentRef = e=>{
                this._focusableElement = e || void 0
            }
        }
        _baseStyle() {
            return [super._baseStyle(), this.state.isHovering ? this.props.hoverStyle : void 0]
        }
        render() {
            return n.createElement(n.Link, Object.assign({}, this._baseProps(), {
                onHoverStart: this._onHoverStart,
                onHoverEnd: this._onHoverEnd,
                ref: this._onFocusableComponentRef
            }), this.props.children)
        }
    }
    ,
    t.default = l
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = (i(0),
    i(13))
      , s = i(7)
      , r = (i(89),
    i(79))
      , a = i(116)
      , l = i(2)
      , c = i(3)
      , d = i(150)
      , u = i(21)
      , g = i(29);
    var h;
    !function(e) {
        e[e.DisconnectedNoNetworkingReported = 1] = "DisconnectedNoNetworkingReported",
        e[e.DisconnectedButNetworkingPossible = 2] = "DisconnectedButNetworkingPossible",
        e[e.Connected = 3] = "Connected",
        e[e.PossibleCaptivePortal = 4] = "PossibleCaptivePortal"
    }(h = t.ConnectionStatus || (t.ConnectionStatus = {}));
    let p = class extends o.StoreBase {
        constructor() {
            super(),
            this._actualStatus = h.DisconnectedButNetworkingPossible,
            this._reportedStatus = h.Connected,
            this._appActive = !1,
            u.RegisterStartupable(this, "NetworkConnectionStore", [d])
        }
        startup() {
            return d.subscribe(()=>{
                this._recalc()
            }
            ),
            r.subscriptionStateChanged.subscribe(()=>{
                u.HasStarted(this) && this._recalc()
            }
            ),
            this._appActive = !0,
            this._recalc(),
            s.Resolved()
        }
        getConnectionStatus() {
            return this._reportedStatus
        }
        isConnected() {
            return this._reportedStatus === h.Connected
        }
        _recalc() {
            let e;
            const t = r.getSubscriptionState()
              , i = r.getLongPollResult();
            c.log(l.LogTraceArea.NetworkConnectionStore, "Chat Service subscription state: " + a.SubscriptionState[t] + "; Long poll result: " + a.LongPollResult[i]),
            t === a.SubscriptionState.CreatedActive ? (e = h.Connected,
            d.getPassedConnectivityCheck() || d.forcePassedConnectivityCheck()) : i === a.LongPollResult.FailureErrorCode || d.isNetworkConnected() ? (e = h.DisconnectedButNetworkingPossible,
            d.getPassedConnectivityCheck() || (e = h.PossibleCaptivePortal)) : e = h.DisconnectedNoNetworkingReported,
            e !== this._actualStatus && (c.log(l.LogTraceArea.NetworkConnectionStore, "Status changed from: " + h[this._actualStatus] + ", to: " + h[e]),
            this._actualStatus = e,
            this._cancelDebounceCatchup(),
            this._appActive ? this._checkCatchup() : c.log(l.LogTraceArea.NetworkConnectionStore, "The app is not active, we do not need to report the status change"))
        }
        _checkCatchup() {
            this._reportedStatus === h.Connected && this._actualStatus === h.DisconnectedButNetworkingPossible ? this._debounceCatchup(5e3) : this._reportedStatus === h.DisconnectedButNetworkingPossible && this._actualStatus === h.Connected || this._actualStatus === h.DisconnectedNoNetworkingReported ? this._debounceCatchup(1e3) : this._catchUp()
        }
        _cancelDebounceCatchup() {
            this._disconnectedDebounceTimer && (g.clearTimeout(this._disconnectedDebounceTimer),
            this._disconnectedDebounceTimer = void 0,
            c.log(l.LogTraceArea.NetworkConnectionStore, "_cancelDebounceCatchup"))
        }
        _debounceCatchup(e) {
            this._cancelDebounceCatchup(),
            c.log(l.LogTraceArea.NetworkConnectionStore, "_debounceCatchup Scheduled: Last Status = " + h[this._reportedStatus] + ", New status = " + h[this._actualStatus]),
            this._disconnectedDebounceTimer = g.setTimeout(()=>{
                this._disconnectedDebounceTimer = void 0,
                c.log(l.LogTraceArea.NetworkConnectionStore, "_debounceCatchup Fulfilled: Last Status = " + h[this._reportedStatus] + ", New Status = " + h[this._actualStatus]),
                this._catchUp()
            }
            , e)
        }
        _catchUp() {
            this._reportedStatus !== this._actualStatus && (this._reportedStatus = this._actualStatus,
            this._actualStatus === h.DisconnectedButNetworkingPossible && d.getPassedConnectivityCheck() && d.runConnectivityCheck(),
            this.trigger(),
            c.log(l.LogTraceArea.NetworkConnectionStore, "Catching up and setting state to " + h[this._actualStatus]))
        }
        test_reset() {
            this._cancelDebounceCatchup(),
            this._actualStatus = h.DisconnectedButNetworkingPossible,
            this._reportedStatus = h.Connected
        }
    }
    ;
    n.__decorate([o.autoSubscribe], p.prototype, "getConnectionStatus", null),
    n.__decorate([o.autoSubscribe], p.prototype, "isConnected", null),
    p = n.__decorate([o.AutoSubscribeStore], p),
    t.default = new p
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(46)
      , o = i(16)
      , s = i(30)
      , r = i(648)
      , a = i(100)
      , l = i(96)
      , c = i(20)
      , d = i(25);
    function u(e, t, i) {
        let o = e.messagetype;
        const s = n.getMessageTypeGroup(e);
        if (s === n.MessageTypeGroups.Audio) {
            if (o = "Audio",
            !n.isDeletedMessage(e)) {
                const n = h(e, t, i);
                n.type === d.UploadFileType.AudioMessage && (o = "AudioMessage",
                "voicemail.wav" === n.decoded.getNameForUI().toLowerCase() && (o = "VoiceMail"))
            }
        } else if (s === n.MessageTypeGroups.Video) {
            if (!n.isDeletedMessage(e)) {
                h(e, t, i).type === d.UploadFileType.VideoMessage && (o = "VideoMessage")
            }
        } else
            o === n.MessageTypes.UriObject ? o = n.MessageTypeGroups[n.getRenderingKindForUriObject(e)] : o === n.MessageTypes.Mms && (o = n.MessageTypeGroups[n.getMessageTypeGroup(e)]);
        return o
    }
    function g(e, t, i) {
        let o = "";
        const s = n.getMessageTypeGroup(e);
        switch (s) {
        case n.MessageTypeGroups.Text:
            o = "Text";
            break;
        case n.MessageTypeGroups.SMS:
            o = "SMS";
            break;
        case n.MessageTypeGroups.Audio:
            if (o = "Audio",
            !n.isDeletedMessage(e)) {
                const n = h(e, t, i);
                n.type === d.UploadFileType.AudioMessage && (o = "AudioMessage",
                "voicemail.wav" === n.decoded.getNameForUI().toLowerCase() && (o = "VoiceMail"))
            }
            break;
        case n.MessageTypeGroups.Picture:
            o = "Photo";
            break;
        case n.MessageTypeGroups.UriFile:
            o = "File";
            break;
        case n.MessageTypeGroups.Video:
            if (o = "Video",
            !n.isDeletedMessage(e)) {
                h(e, t, i).type === d.UploadFileType.VideoMessage && (o = "VideoMessage")
            }
            break;
        case n.MessageTypeGroups.Moji:
            o = "Moji";
            break;
        case n.MessageTypeGroups.Sticker:
            o = "Sticker";
            break;
        case n.MessageTypeGroups.ScheduledCallInvite:
            o = "ScheduledCallInvite";
            break;
        case n.MessageTypeGroups.Calling:
            o = n.MessageTypeGroups[s];
            break;
        case n.MessageTypeGroups.SwiftCard:
            o = "Swift Message";
            break;
        case n.MessageTypeGroups.Location:
            o = "Location";
            break;
        case n.MessageTypeGroups.MoneyCard:
            o = e.messagetype === n.MessageTypes.Money ? "Money Message" : "Money Request Message";
            break;
        case n.MessageTypeGroups.Poll:
            o = "Poll";
            break;
        case n.MessageTypeGroups.Engagement:
            o = "Engagement";
            break;
        case n.MessageTypeGroups.MediaAlbum:
            o = "MediaAlbum";
            break;
        case n.MessageTypeGroups.Translation:
            o = "Translation";
            break;
        default:
            console.warn("Unhandled message type for MessageSentEvent:" + e.messagetype + ", making a guess"),
            o = n.MessageTypeGroups[s]
        }
        return o
    }
    function h(e, t, i) {
        const n = a.decode(e, t, i).getFirstUriObjectChild(l.UriObjectFileNode);
        return n ? {
            type: n.getFileType(),
            decoded: n
        } : {
            type: void 0
        }
    }
    t.getClientMessageId = function(e) {
        return e.getLatestRelevantClientMessageId()
    }
    ,
    t.getMessageRawTypeName = u,
    t.getMessageTypeName = g,
    t.shouldTrackMessage = function(e, t) {
        return !(!t || !t.percentage) && Number(e) / 0x10000000000000000 < t.percentage / 100
    }
    ,
    t.getCommonAttributesMessageSent = function(e, t, i, n, s, r) {
        return e.Group_Conversation = o.isGroupConversation(t),
        e.IsEncryptedConversation = o.isEncryptedThread(t),
        e.Send_Timestamp = i,
        e.Message_Type = g(n, c.getSkypeMri(), t),
        e.Message_RawType = u(n, c.getSkypeMri(), t),
        e.Conversation_Members_Number = s,
        e.Entry_Point = "Chat View",
        e.Character_Count = r,
        e.Bot_Conversation = o.isOneOnOneConversation(t) && o.isAgent(t),
        e
    }
    ,
    t.getTrackableConversationId = function(e) {
        var t;
        return null === (t = s.default.getConversation(e)) || void 0 === t ? void 0 : t.getTrackableConversationId()
    }
    ,
    t.getConversationTypeForTelemetry = function(e) {
        return o.isEncryptedThread(e) ? r.ConversationType.Encrypted : o.isConversationWithPhoneNumber(e) ? r.ConversationType.PSTN : o.isAgent(e) ? r.ConversationType.Bot : o.isOneOnOneConversation(e) ? r.ConversationType.OneOnOneSkype : o.isGroupConversation(e) ? r.ConversationType.Group : r.ConversationType.Other
    }
    ,
    t.getMessageTypeGroup = function(e) {
        return n.getMessageTypeGroup(e)
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.Settings = 1] = "Settings",
        e[e.KeyboardShortcut = 2] = "KeyboardShortcut",
        e[e.Onboarding = 3] = "Onboarding",
        e[e.PopCard = 4] = "PopCard",
        e[e.GroupConvSettings = 5] = "GroupConvSettings",
        e[e.ThemeDialogPage = 6] = "ThemeDialogPage",
        e[e.NoCallsItem = 7] = "NoCallsItem",
        e[e.SyncAddressBookSearchItem = 8] = "SyncAddressBookSearchItem",
        e[e.LocalContactsTab = 9] = "LocalContactsTab",
        e[e.ChatsEmptyState = 10] = "ChatsEmptyState",
        e[e.DeepLink = 11] = "DeepLink",
        e[e.ChatsFinishSetupPrompt = 12] = "ChatsFinishSetupPrompt",
        e[e.DesktopActionPicker = 13] = "DesktopActionPicker",
        e[e.UserProfilePage = 14] = "UserProfilePage"
    }(t.DialogNavOrigin || (t.DialogNavOrigin = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.CancelOrBack = 1] = "CancelOrBack",
        e[e.Submit = 2] = "Submit",
        e[e.Skip = 3] = "Skip",
        e[e.AllowAccessNextButton = 4] = "AllowAccessNextButton",
        e[e.Close = 5] = "Close"
    }(t.DialogNavExit || (t.DialogNavExit = {}))
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(52)
      , r = i(556)
      , a = i(148)
      , l = i(42)
      , c = i(58)
      , d = i(43)
      , u = i(2)
      , g = i(3)
      , h = i(121)
      , p = i(5)
      , m = i(4)
      , S = i(24)
      , C = i(8)
      , y = i(432)
      , f = i(14)
      , _ = i(15)
      , b = p.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            flex: 1,
            backgroundColor: C.Color.gray400
        }),
        titleText: ()=>o.Styles.createTextStyle({
            color: C.Color.white,
            textAlign: "center",
            paddingVertical: 16
        }),
        contentText: ()=>o.Styles.createTextStyle({
            color: C.Color.white,
            textAlign: "center",
            paddingVertical: 16
        }),
        contentTextLeftAligned: ()=>o.Styles.createTextStyle({
            textAlign: "left"
        }),
        contentContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            paddingHorizontal: 16
        }),
        buttonContainer: ()=>o.Styles.createViewStyle({
            alignItems: "stretch"
        }),
        horizontalButtonContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "row"
        }),
        buttonsContainerFullSize: ()=>o.Styles.createViewStyle({
            backgroundColor: C.Color.white
        }),
        button: ()=>o.Styles.createButtonStyle({
            justifyContent: "center",
            alignItems: "center",
            borderColor: C.Color.black,
            borderTopWidth: 1,
            paddingVertical: 16,
            flex: 1
        }),
        buttonText: ()=>o.Styles.createTextStyle({
            color: C.Color.white,
            textAlign: "center",
            marginHorizontal: 12
        }),
        buttonTextHover: ()=>o.Styles.createTextStyle({
            color: C.Color.gray300
        }),
        buttonTextFullSize: ()=>o.Styles.createTextStyle({
            color: C.Color.gray400
        })
    });
    class v extends d.default {
        constructor() {
            super(...arguments),
            this._closeAnimationEvent = new s.default,
            this._buttonPressHandled = !1,
            this._renderButton = (e,t)=>{
                const i = [b.button]
                  , n = [b.buttonText];
                return e.buttonStyle && i.push(e.buttonStyle),
                e.textStyle && n.push(e.textStyle),
                this.props.fullScreen && n.push(b.buttonTextFullSize),
                t !== this.state.hoverButtonIndex || e.isDisabled || n.push(b.buttonTextHover),
                o.createElement(o.Button, {
                    style: i,
                    onHoverStart: ()=>this.setState({
                        hoverButtonIndex: t
                    }),
                    onHoverEnd: this._onHoverEnd,
                    onPress: t=>this._onButtonPress(t, e),
                    key: t,
                    disabled: e.isDisabled,
                    accessibilityLabel: e.text,
                    ref: e.ref,
                    autoFocus: e.autoFocus
                }, o.createElement(_.BodyText, {
                    bold: e.isSubmit,
                    style: n,
                    disableThemeSubscription: !0
                }, e.text))
            }
            ,
            this._onHoverEnd = ()=>{
                this.setState({
                    hoverButtonIndex: -1
                })
            }
            ,
            this._onClickOutside = ()=>{
                this.props.onClickOutside && this.props.onClickOutside(),
                this.props.closeOnClickOutside && this._getCloseAnimationEvent().fire(()=>{
                    c.default.dismissModal(this.props.dialogId, this._getRootViewId(), this.props.useScopedModalId)
                }
                )
            }
            ,
            this._onKeyUp = e=>{
                let t;
                return e.keyCode === h.ESCAPE ? n.each(this.props.buttons, e=>{
                    e.isCancel && (t = e)
                }
                ) : e.keyCode !== h.ENTER || o.UserInterface.isNavigatingWithKeyboard() || n.each(this.props.buttons, e=>{
                    !e.isDisabled && e.isSubmit && (t = e)
                }
                ),
                t ? (this._completeButtonPress(t),
                g.log(u.LogTraceArea.GenericUnsafe, "onKeyUp: true componentId: SimpleDialog"),
                !0) : (g.log(u.LogTraceArea.GenericUnsafe, "onKeyUp: false componentId: SimpleDialog"),
                !1)
            }
            ,
            this._onBack = ()=>{
                let e;
                return n.each(this.props.buttons, t=>{
                    t.isCancel && (e = t)
                }
                ),
                e ? (this._completeButtonPress(e),
                g.log(u.LogTraceArea.HardwareBackButton, "goBack: true componentId: SimpleDialog"),
                !0) : (g.log(u.LogTraceArea.HardwareBackButton, "goBack: false componentId: SimpleDialog"),
                !1)
            }
        }
        _buildState(e, t) {
            const i = S.default.getWidth(this._getRootViewId());
            return t ? {
                hoverButtonIndex: -1,
                screenWidth: i
            } : {
                screenWidth: i
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            a.subscribe(this._onBack),
            o.Input.keyUpEvent.subscribe(this._onKeyUp)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            a.unsubscribe(this._onBack),
            o.Input.keyUpEvent.unsubscribe(this._onKeyUp)
        }
        render() {
            let e, t;
            if (this.props.text) {
                const t = !0;
                if (e = o.createElement(_.PanelHeader, {
                    style: b.titleText,
                    accessibilityHidden: !!t,
                    disableThemeSubscription: !0
                }, this.props.text),
                t) {
                    const t = l.default.headerAccessibilityInfo(this.props.text);
                    e = o.createElement(o.View, {
                        accessibilityLabel: t.accessibilityLabel,
                        importantForAccessibility: o.Types.ImportantForAccessibility.Yes,
                        accessibilityTraits: t.accessibilityTraits,
                        autoFocus: !1
                    }, e)
                }
            }
            if (this.props.simpleContent) {
                const e = [b.contentText];
                this.props.leftAlignContent && e.push(b.contentTextLeftAligned),
                t = o.createElement(_.BodyText, {
                    style: e,
                    autoFocus: !1,
                    disableThemeSubscription: !0
                }, this.props.simpleContent)
            }
            const i = n.map(this.props.buttons, this._renderButton)
              , s = [b.buttonContainer];
            this.props.fullScreen && s.push(b.buttonsContainerFullSize),
            this.props.buttonAlignment && this.props.buttonAlignment === r.SimpleDialogButtonAlignment.HorizontalStack && s.push(b.horizontalButtonContainer);
            const a = this.props.buttons && this.props.buttons.length > 0 ? o.createElement(o.View, {
                style: s
            }, i) : void 0
              , c = [this.props.fullScreen ? f.flexOne : b.container];
            this.props.containerStyle && c.push(this.props.containerStyle);
            const d = this.props.anchor ? {
                fillColor: C.Color.gray400,
                strokeColor: C.Color.gray400
            } : void 0;
            return o.createElement(y, {
                modalWidth: this.props.maxWidth || Math.min(this.state.screenWidth - 32, 450),
                modalHeight: this.props.maxHeight,
                horizontalPadding: this.props.horizontalPadding,
                onClickOutside: this._onClickOutside,
                closeAnimationEvent: this._getCloseAnimationEvent(),
                fullSize: this.props.fullScreen,
                modalTitle: this.props.accessibilityLabel || m.getString("Global.DialogAccessibilityLabel"),
                anchor: this.props.anchor,
                popupColorInfo: d,
                suppressDismissalEvents: this.props.suppressModalDismissalEvents
            }, o.createElement(o.View, {
                style: c
            }, e, o.createElement(o.View, {
                style: this.props.fullScreen || this.props.useFullSizeContainer ? f.flexOne : b.contentContainer
            }, this.props.children, t), a))
        }
        _getCloseAnimationEvent() {
            return this.props.closeAnimationEvent || this._closeAnimationEvent
        }
        _onButtonPress(e, t) {
            e.stopPropagation(),
            this._completeButtonPress(t)
        }
        _completeButtonPress(e) {
            this._buttonPressHandled || (e.onPress && e.onPress(),
            this._getCloseAnimationEvent().fire(()=>{
                c.default.dismissModal(this.props.dialogId, this._getRootViewId(), this.props.useScopedModalId)
            }
            ),
            this._buttonPressHandled = !0)
        }
    }
    t.SimpleDialog = v
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1)
      , s = i(760)
      , r = i(2)
      , a = i(39);
    class l extends a.TelemetryEventBase {
        getEventName() {
            return "profile"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    class c extends l {
        constructor(e) {
            super(),
            this._updateLocation = e
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.UpdateLocation = r.AvatarUpdateLocation[this._updateLocation],
            e
        }
    }
    class d extends a.TelemetryEventBase {
        getEventName() {
            return "customStatus"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.MeControlOpened = class extends l {
        getActionName() {
            return "MeControlOpened"
        }
    }
    ;
    t.GetSkypeAppButtonClicked = class extends l {
        constructor(e) {
            super(),
            this._isSuccess = e
        }
        getActionName() {
            return "GetSkypeAppButtonClicked"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IsSuccess = this._isSuccess,
            e
        }
    }
    ;
    t.ProfileOpened = class extends l {
        constructor(e, t) {
            super(),
            this._type = e,
            this._origin = t
        }
        getActionName() {
            return "ProfileOpened"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Type = r.ProfileType[this._type],
            e.Origin = r.ProfileOpenOrigin[this._origin],
            e
        }
    }
    ;
    t.MessageProfileButtonClicked = class extends l {
        constructor(e) {
            super(),
            this._profileType = e
        }
        getActionName() {
            return "MessageProfileButtonClicked"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ProfileType = r.ProfileType[this._profileType],
            e
        }
    }
    ;
    t.CallProfileButtonClicked = class extends l {
        constructor(e) {
            super(),
            this._profileType = e
        }
        getActionName() {
            return "CallProfileButtonClicked"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ProfileType = r.ProfileType[this._profileType],
            e
        }
    }
    ;
    t.PhoneCallProfileButtonClicked = class extends l {
        getActionName() {
            return "PhoneCallProfileButtonClicked"
        }
    }
    ;
    t.SendMoneyProfileButtonClicked = class extends l {
        getActionName() {
            return "SendMoneyProfileButtonClicked"
        }
    }
    ;
    t.SendMoneyGroupProfileButtonClicked = class extends l {
        getActionName() {
            return "SendMoneyGroupProfileButtonClicked"
        }
    }
    ;
    t.ManageMyProfileOnlineClicked = class extends l {
        getActionName() {
            return "ManageMyProfileOnlineClicked"
        }
    }
    ;
    t.MyMicrosoftAccountLinkClicked = class extends l {
        getActionName() {
            return "MyMicrosoftAccountLinkClicked"
        }
    }
    ;
    t.CloseMyAccountClicked = class extends l {
        getActionName() {
            return "CloseMyAccountClicked"
        }
    }
    ;
    t.CloseMyAccountInfoLinkClicked = class extends l {
        getActionName() {
            return "CloseMyAccountInfoLinkClicked"
        }
    }
    ;
    t.CloseMyAccountStopped = class extends l {
        getActionName() {
            return "CloseMyAccountStopped"
        }
    }
    ;
    t.ManageMyAccountOnlineClicked = class extends l {
        getActionName() {
            return "ManageMyAccountOnlineClicked"
        }
    }
    ;
    t.MyUserNameEdited = class extends l {
        constructor(e, t, i, n, o) {
            super(),
            this._isSuccess = e,
            this._errorStatusCode = t,
            this._duration = i,
            this._isMigrated = n,
            this._origin = o
        }
        getActionName() {
            return "MyUserNameEdited"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IsSuccess = this._isSuccess,
            n.isUndefined(this._errorStatusCode) || (e.ErrorCode = this._errorStatusCode),
            n.isUndefined(this._duration) || (e.Duration = this._duration),
            n.isUndefined(this._isMigrated) || (e.IsMigratedToV2 = this._isMigrated),
            n.isUndefined(this._origin) || (e.Origin = r.NameUpdateLocation[this._origin]),
            e
        }
    }
    ;
    t.MyMoodEdited = class extends l {
        constructor(e, t, i, n, o, s) {
            super(),
            this._charCount = e,
            this._updateLocation = t,
            this._isSuccess = i,
            this._errorStatusCode = n,
            this._duration = o,
            this._isMigrated = s
        }
        getActionName() {
            return "MyMoodEdited"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.MoodCharCount = this._charCount,
            e.UpdateLocation = r.MoodMessageUpdateLocation[this._updateLocation],
            e.IsSuccess = this._isSuccess,
            n.isUndefined(this._errorStatusCode) || (e.ErrorCode = this._errorStatusCode),
            n.isUndefined(this._duration) || (e.Duration = this._duration),
            n.isUndefined(this._isMigrated) || (e.IsMigratedToV2 = this._isMigrated),
            e
        }
    }
    ;
    t.ContactNickNameEdited = class extends l {
        constructor(e, t, i, n) {
            super(),
            this._updateOrigin = e,
            this._isSuccess = t,
            this._errorStatusCode = i,
            this._duration = n
        }
        getActionName() {
            return "ContactNickNameEdited"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = r.ContactNickNameUpdateOrigin[this._updateOrigin],
            e.IsSuccess = this._isSuccess,
            n.isUndefined(this._errorStatusCode) || (e.ErrorCode = this._errorStatusCode),
            this._duration && (e.Duration = this._duration),
            e
        }
    }
    ;
    t.MyAvatarChanged = class extends c {
        constructor(e) {
            super(e)
        }
        getActionName() {
            return "MyAvatarChanged"
        }
    }
    ;
    t.MyAvatarRemoved = class extends c {
        constructor(e) {
            super(e)
        }
        getActionName() {
            return "MyAvatarRemoved"
        }
    }
    ;
    t.AvatarMenuButtonClicked = class extends l {
        constructor(e, t, i, n) {
            super(),
            this._type = e,
            this._origin = t,
            this._hasProfilePic = i,
            this._avatarPolicy = n
        }
        getActionName() {
            return "AvatarMenuButtonClicked"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ButtonType = r.AvatarMenuButtons[this._type],
            e.Origin = r.AvatarPickerOrigin[this._origin],
            e.HasProfilePic = this._hasProfilePic,
            e.AvatarPolicy = s.flow(o.camelCase, o.upperFirst)(this._avatarPolicy),
            e
        }
    }
    ;
    t.CreateTranslatedChatWithUserClicked = class extends l {
        getActionName() {
            return "CreateTranslatedChatWithUserClicked"
        }
    }
    ;
    t.AvatarPolicyChanged = class extends l {
        constructor(e, t, i, n) {
            super(),
            this._avatarPolicy = e,
            this._origin = t,
            this._isSuccess = i,
            this._errorStatusCode = n
        }
        getActionName() {
            return "AvatarPolicyChanged"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.AvatarPolicy = s.flow(o.camelCase, o.upperFirst)(this._avatarPolicy),
            e.Origin = r.AvatarPolicyChangeOrigin[this._origin],
            e.IsSuccess = this._isSuccess,
            n.isUndefined(this._errorStatusCode) || (e.ErrorCode = this._errorStatusCode),
            e
        }
    }
    ;
    t.SettingsTelemetry = class extends l {
        constructor(e) {
            super(),
            this._origin = e
        }
        getActionName() {
            return "SettingsAccessed"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = r.SettingsOrigin[this._origin],
            e
        }
    }
    ;
    t.AvatarChanged = class extends l {
        constructor(e, t, i, n=r.AvatarChangeError.NoError, o, s) {
            super(),
            this._origin = e,
            this._isSuccess = t,
            this._isUserAvatar = i,
            this._errorType = n,
            this._errorStatusCode = o,
            this._isMigrated = s
        }
        getActionName() {
            return "AvatarChanged"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = r.AvatarPickerOrigin[this._origin],
            e.IsSuccess = this._isSuccess,
            e.IsUserAvatar = this._isUserAvatar,
            e.ErrorType = r.AvatarChangeError[this._errorType],
            n.isUndefined(this._errorStatusCode) || (e.ErrorCode = this._errorStatusCode),
            n.isUndefined(this._isMigrated) || (e.IsMigratedToV2 = this._isMigrated),
            e
        }
    }
    ;
    t.AvatarRemoved = class extends l {
        constructor(e, t, i, n, o) {
            super(),
            this._origin = e,
            this._isSuccess = t,
            this._isUserAvatar = i,
            this._errorStatusCode = n,
            this._isMigrated = o
        }
        getActionName() {
            return "AvatarRemoved"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = r.AvatarPickerOrigin[this._origin],
            e.IsSuccess = this._isSuccess,
            e.IsUserAvatar = this._isUserAvatar,
            n.isUndefined(this._errorStatusCode) || (e.ErrorCode = this._errorStatusCode),
            n.isUndefined(this._isMigrated) || (e.IsMigratedToV2 = this._isMigrated),
            e
        }
    }
    ;
    t.AvatarLoadError = class extends l {
        constructor(e, t, i, n) {
            super(),
            this._isUser = e,
            this._isConnector = t,
            this._isAgent = i,
            this._isPstn = n
        }
        getActionName() {
            return "AvatarLoadError"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IsUser = void 0 !== this._isUser ? this._isUser : "Unknown",
            e.IsConnector = void 0 !== this._isConnector ? this._isConnector : "Unknown",
            e.IsAgent = void 0 !== this._isAgent ? this._isAgent : "Unknown",
            e.IsPstn = void 0 !== this._isPstn ? this._isPstn : "Unknown",
            e
        }
    }
    ;
    t.ProfileFetchRequestEvent = class extends l {
        constructor(e, t, i, n, o) {
            super(),
            this._isSuccess = e,
            this._numProfilesToFetch = t,
            this._numProfilesFetched = i,
            this._errorStatusCode = n,
            this._errorMessage = o
        }
        getActionName() {
            return "ProfileFetchRequestEvent"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IsSuccess = this._isSuccess,
            n.isUndefined(this._numProfilesToFetch) || (e.NumProfilesToFetch = this._numProfilesToFetch),
            n.isUndefined(this._numProfilesFetched) || (e.NumProfilesFetched = this._numProfilesFetched),
            n.isUndefined(this._errorStatusCode) || (e.ErrorCode = this._errorStatusCode),
            n.isUndefined(this._errorMessage) || (e.ErrorMessage = this._errorMessage),
            e
        }
    }
    ;
    t.ProfileFetchResponseError = class extends l {
        constructor(e, t, i) {
            super(),
            this._errorStatusCode = e,
            this._count = t,
            this._isProfileColorFetch = i
        }
        getActionName() {
            return "ProfileFetchResponseError"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ErrorCode = this._errorStatusCode,
            e.ErrorCount = this._count,
            e.IsProfileColorFetch = this._isProfileColorFetch,
            e
        }
    }
    ;
    t.CustomStatusMessageCleared = class extends d {
        getActionName() {
            return "CustomStatusMessageCleared"
        }
    }
    ;
    t.CustomStatusEditorOpened = class extends d {
        getActionName() {
            return "CustomStatusEditorOpened"
        }
    }
    ;
    t.CustomStatusEditorBackPressed = class extends d {
        getActionName() {
            return "CustomStatusEditorBackPressed"
        }
    }
    ;
    t.CustomStatusEditorDonePressed = class extends d {
        getActionName() {
            return "CustomStatusEditorDonePressed"
        }
    }
    ;
    t.CustomStatusEditorEmoticonPickerPressed = class extends d {
        getActionName() {
            return "CustomStatusEditorEmoticonPickerPressed"
        }
    }
    ;
    t.CustomStatusInputGotFocus = class extends d {
        getActionName() {
            return "CustomStatusInputGotFocus"
        }
    }
    ;
    t.CustomStatusUpdated = class extends d {
        constructor(e, t, i, n) {
            super(),
            this._isFromSuggestedStatus = e,
            this._chosenSuggestedStatus = t,
            this._totalEmoticonInStatus = i,
            this._prevToNewMoodMessageCharDiffCount = n
        }
        getActionName() {
            return "CustomStatusEdited"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IsFromSuggestedStatus = this._isFromSuggestedStatus,
            e.ChosenSuggestedStatus = this._chosenSuggestedStatus,
            e.TotalEmoticonInStatus = this._totalEmoticonInStatus,
            e.PrevToNewMoodMessageCharDiffCount = this._prevToNewMoodMessageCharDiffCount,
            e
        }
    }
    ;
    var u;
    t.AvatarActionMenu = class extends l {
        constructor(e, t, i) {
            super(),
            this._origin = e,
            this._command = t,
            this._isVisible = i
        }
        getActionName() {
            return "AvatarActionMenu"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = r.AvatarPickerOrigin[this._origin],
            e.Command = this._command,
            e.IsVisible = this._isVisible,
            e
        }
    }
    ,
    function(e) {
        e[e.OpenProfile = 0] = "OpenProfile",
        e[e.ShowActionCard = 1] = "ShowActionCard",
        e[e.Update = 2] = "Update",
        e[e.Copy = 3] = "Copy",
        e[e.Verify = 4] = "Verify",
        e[e.ShowOnSkype = 5] = "ShowOnSkype",
        e[e.DeleteFromSkype = 6] = "DeleteFromSkype",
        e[e.AddToSkype = 7] = "AddToSkype",
        e[e.AddToMsa = 8] = "AddToMsa",
        e[e.UpdateMsa = 9] = "UpdateMsa",
        e[e.Navigate = 10] = "Navigate",
        e[e.AddMsaAvatar = 11] = "AddMsaAvatar",
        e[e.RemoveMsaAvatar = 12] = "RemoveMsaAvatar",
        e[e.LaterMsaAvatar = 13] = "LaterMsaAvatar"
    }(u = t.MeProfileAction || (t.MeProfileAction = {}));
    t.MeProfileActionEvent = class extends l {
        constructor(e, t, i, n, o) {
            super(),
            this._command = e,
            this._type = t,
            this._isVisible = i,
            this._isSuccess = n,
            this._errorStatusCode = o
        }
        getActionName() {
            return "MeProfileAction"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Command = u[this._command],
            e.Type = this._type,
            n.isUndefined(this._isVisible) || (e.IsVisible = this._isVisible),
            n.isUndefined(this._isSuccess) || (e.IsSuccess = this._isSuccess),
            n.isUndefined(this._errorStatusCode) || (e.ErrorCode = this._errorStatusCode),
            e
        }
    }
    ;
    t.MyProfileFetch = class extends l {
        constructor(e) {
            super(),
            this._fetchSettings = e
        }
        getActionName() {
            return "MyProfileFetch"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IsSuccess = this._fetchSettings.isSuccess,
            e.IsV2 = this._fetchSettings.isV2,
            e.IsMigrationSuggested = this._fetchSettings.isMigrationSuggested,
            e.IsMigratedToV2 = this._fetchSettings.isMigratedToV2,
            n.isUndefined(this._fetchSettings.errorStatusCode) || (e.ErrorCode = this._fetchSettings.errorStatusCode),
            n.isUndefined(this._fetchSettings.origin) || (e.Origin = r.MyProfileFetchOrigin[this._fetchSettings.origin]),
            e
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Light = 1] = "Light",
        e[e.Dark = 2] = "Dark"
    }(t.BarStyleTheme || (t.BarStyleTheme = {}))
}
, , , function(e, t, i) {
    "use strict";
    const n = i(157)
      , o = i(0)
      , s = i(63)
      , r = i(65)
      , a = i(61)
      , l = i(10)
      , c = i(4)
      , d = i(18)
      , u = i(25)
      , g = i(9);
    e.exports = new class {
        getDeniedPrompt(e) {
            const t = this.getDeniedPromptKey(e);
            return t ? c.getString(t) : void 0
        }
        getDeniedPromptKey(e) {
            switch (e) {
            case u.PermissionType.Camera:
                return d.isElectronOsx() ? "CapturePermissions.PermissionCameraDeniedPromptMac" : n.BrowserEnvironment.isChrome() ? "CapturePermissions.PermissionCameraDeniedPromptChrome" : n.BrowserEnvironment.isEdge() ? "CapturePermissions.PermissionCameraDeniedPromptEdge" : n.BrowserEnvironment.isCallingSupportedSafari() ? "CapturePermissions.PermissionCameraDeniedPromptSafari" : void 0;
            case u.PermissionType.CameraRoll:
            case u.PermissionType.WriteCameraRoll:
                0;
                break;
            case u.PermissionType.Microphone:
                return d.isElectronOsx() ? "CapturePermissions.PermissionMicrophoneDeniedPromptMac" : n.BrowserEnvironment.isChrome() ? "CapturePermissions.PermissionMicrophoneDeniedPromptChrome" : n.BrowserEnvironment.isEdge() ? "CapturePermissions.PermissionMicrophoneDeniedPromptEdge" : n.BrowserEnvironment.isCallingSupportedSafari() ? "CapturePermissions.PermissionMicrophoneDeniedPromptSafari" : void 0;
            case u.PermissionType.MicrophoneAndCamera:
                if (d.isElectronOsx())
                    return "CapturePermissions.PermissionMicrophoneAndCameraDeniedPromptMac";
                break;
            case u.PermissionType.Contacts:
            case u.PermissionType.Notifications:
                0;
                break;
            case u.PermissionType.Location:
            case u.PermissionType.LocationAlways:
            case u.PermissionType.Calendar:
                0;
                break;
            case u.PermissionType.ScreenRecording:
                if (d.isElectronOsx())
                    return "CapturePermissions.PermissionScreenRecordingDeniedPrompt";
                break;
            case u.PermissionType.DrawOver:
            case u.PermissionType.ReadPhoneState:
            case u.PermissionType.ReadSms:
            case u.PermissionType.SendSms:
            case u.PermissionType.ReceiveSms:
            case u.PermissionType.BackgroundExecution:
                break;
            default:
                g.switchStatementExhaustiveChecking(e)
            }
        }
        _getDeniedPromptWithSettings(e) {
            switch (e) {
            case u.PermissionType.Location:
            case u.PermissionType.LocationAlways:
                0
            }
            return this.getDeniedPrompt(e)
        }
        getPrePrompt(e) {
            switch (e) {
            case u.PermissionType.Camera:
                return c.getString("CapturePermissions.PermissionCameraPrePrompt");
            case u.PermissionType.CameraRoll:
            case u.PermissionType.WriteCameraRoll:
                return c.getString("CapturePermissions.PermissionCameraRollPrePrompt");
            case u.PermissionType.Microphone:
                return c.getString("CapturePermissions.PermissionMicrophonePrePrompt");
            case u.PermissionType.Contacts:
                return c.getString("CapturePermissions.PermissionContactsPrePrompt");
            case u.PermissionType.Location:
            case u.PermissionType.LocationAlways:
                return c.getString("CapturePermissions.PermissionLocationPrePrompt");
            case u.PermissionType.Calendar:
                return c.getString("CapturePermissions.PermissionCalendarPrePrompt");
            case u.PermissionType.ScreenRecording:
                return c.getString("CapturePermissions.PermissionScreenRecordingPrePrompt")
            }
        }
        getPromptTitle(e) {
            switch (e) {
            case u.PermissionType.Camera:
                return c.getString("CapturePermissions.PermissionCamera");
            case u.PermissionType.CameraRoll:
            case u.PermissionType.WriteCameraRoll:
                return c.getString("CapturePermissions.PermissionCameraRoll");
            case u.PermissionType.Microphone:
                return c.getString("CapturePermissions.PermissionMicrophone");
            case u.PermissionType.MicrophoneAndCamera:
                return c.getString("CapturePermissions.PermissionMicrophoneAndCamera");
            case u.PermissionType.Contacts:
                return c.getString("CapturePermissions.PermissionContacts");
            case u.PermissionType.Notifications:
                return c.getString("CapturePermissions.PermissionNotifications");
            case u.PermissionType.Location:
            case u.PermissionType.LocationAlways:
                return c.getString("CapturePermissions.PermissionLocation");
            case u.PermissionType.Calendar:
                return c.getString("CapturePermissions.PermissionCalendar");
            case u.PermissionType.ScreenRecording:
                return c.getString("CapturePermissions.PermissionScreenRecording");
            case u.PermissionType.ReadPhoneState:
            case u.PermissionType.ReadSms:
            case u.PermissionType.SendSms:
            case u.PermissionType.ReceiveSms:
            case u.PermissionType.DrawOver:
            case u.PermissionType.BackgroundExecution:
                return "";
            default:
                return g.switchStatementExhaustiveChecking(e)
            }
        }
        descriptorForPermissionType(e) {
            switch (e) {
            case u.PermissionType.Camera:
                return "Camera";
            case u.PermissionType.CameraRoll:
                return "CameraRoll";
            case u.PermissionType.WriteCameraRoll:
                return "WriteCameraRoll";
            case u.PermissionType.Microphone:
                return "Mic";
            case u.PermissionType.MicrophoneAndCamera:
                return "MicAndCamera";
            case u.PermissionType.Contacts:
                return "Contacts";
            case u.PermissionType.Notifications:
                return "Notifications";
            case u.PermissionType.Location:
            case u.PermissionType.LocationAlways:
                return "Location";
            case u.PermissionType.BackgroundExecution:
                return "BackgroundExecution";
            case u.PermissionType.Calendar:
                return "Calendar";
            case u.PermissionType.ScreenRecording:
                return "ScreenRecording";
            case u.PermissionType.SendSms:
            case u.PermissionType.ReceiveSms:
            case u.PermissionType.ReadSms:
            case u.PermissionType.ReadPhoneState:
            case u.PermissionType.DrawOver:
                break;
            default:
                g.switchStatementExhaustiveChecking(e)
            }
        }
        showDeniedPromptWithSettingsOption(e, t, i) {
            e === u.PermissionType.Camera ? this._showDeniedWebEscalationPromptWithImage(t, u.PermissionType.Camera) : e === u.PermissionType.Microphone && n.BrowserEnvironment.isCallingSupportedSafari() ? this._showDeniedWebEscalationPromptWithImage(t, u.PermissionType.Microphone) : this._showDeniedPrompt(e, !0, t, i)
        }
        getDeniedImageSourceBrowser() {
            if (this._isSupportedBrowserForCalling())
                return n.BrowserEnvironment.isChrome() ? s.Collection.WEB_CHROME_PERMISSIONS : n.BrowserEnvironment.isCallingSupportedSafari() ? s.Collection.WEB_SAFARI_PERMISSIONS_DENIED : s.Collection.WEB_EDGE_PERMISSIONS
        }
        getDeniedTextDuringCallBrowser(e) {
            if (!this._isSupportedBrowserForCalling())
                return;
            let t;
            switch (e) {
            case u.PermissionType.Camera:
                t = "AugmentedPermissions.CameraDeficiencyMainDisplayTextEdge",
                n.BrowserEnvironment.isChrome() ? t = "AugmentedPermissions.CameraDeficiencyMainDisplayTextChrome" : n.BrowserEnvironment.isCallingSupportedSafari() && (t = "AugmentedPermissions.CameraDeficiencyMainDisplayTextSafari");
                break;
            case u.PermissionType.Microphone:
                t = "AugmentedPermissions.MicrophoneDeficiencyMainDisplayTextEdge",
                n.BrowserEnvironment.isChrome() ? t = "AugmentedPermissions.MicrophoneDeficiencyMainDisplayTextChrome" : n.BrowserEnvironment.isCallingSupportedSafari() && (t = "AugmentedPermissions.MicrophoneDeficiencyMainDisplayTextSafari");
                break;
            case u.PermissionType.MicrophoneAndCamera:
                t = "AugmentedPermissions.MicrophoneAndCameraDeficiencyMainDisplayTextEdge",
                n.BrowserEnvironment.isChrome() ? t = "AugmentedPermissions.MicrophoneAndCameraDeficiencyMainDisplayTextChrome" : n.BrowserEnvironment.isCallingSupportedSafari() && (t = "AugmentedPermissions.MicrophoneAndCameraDeficiencyMainDisplayTextSafari")
            }
            return t ? c.getString(t) : void 0
        }
        _isSupportedBrowserForCalling() {
            return n.BrowserEnvironment.isChrome() || n.BrowserEnvironment.isEdge || n.BrowserEnvironment.isCallingSupportedSafari()
        }
        _getImageResizeMode() {
            return n.BrowserEnvironment.isCallingSupportedSafari() ? l.ImageResizeModeEnum.contain : l.ImageResizeModeEnum.cover
        }
        _getTitleForEscalation(e) {
            return e === u.PermissionType.Camera ? c.getString("AugmentedPermissions.VideoEscalationPromptTitle") : e === u.PermissionType.Microphone ? c.getString("AugmentedPermissions.MicEscalationPromptTitle") : ""
        }
        _showDeniedWebEscalationPromptWithImage(e, t) {
            const i = [{
                text: c.getString("Global.CancelLabel")
            }]
              , n = this.getDeniedImageSourceBrowser()
              , o = this.getDeniedTextDuringCallBrowser(t);
            if (!n || !o)
                return;
            const s = {
                width: 420,
                height: 200,
                source: n
            };
            r.default.showCustomAlertWithOptions({
                rootViewId: e,
                buttons: i,
                imageSource: s,
                accessibilityTitle: o,
                dialogTitle: this._getTitleForEscalation(t),
                dialogText: o,
                imageResizeMode: this._getImageResizeMode()
            })
        }
        _showDeniedPrompt(e, t, i, n) {
            const s = this.getPromptTitle(e)
              , l = t ? this._getDeniedPromptWithSettings(e) : this.getDeniedPrompt(e);
            let d = [{
                text: c.getString("Global.CancelLabel")
            }];
            (t && a.UICapabilities.systemSettingsDeepLinkSupported() || t && n) && d.push({
                text: c.getString("CapturePermissions.AlertSettingsButtonTitle"),
                onPress: n || (()=>{
                    o.Linking.openUrl("app-settings:")
                }
                )
            }),
            r.default.showWithOptions({
                title: s,
                dialogAccessibilityTitle: l || s,
                message: l,
                buttons: d,
                rootViewId: i,
                useFocussedWindowFallback: !0
            })
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(2559)
      , r = (i(0),
    i(13))
      , a = i(7)
      , l = i(6)
      , c = i(48)
      , d = i(1054)
      , u = i(2)
      , g = i(3)
      , h = i(74)
      , p = i(155)
      , m = i(21);
    let S = class extends r.StoreBase {
        constructor() {
            super(),
            this._reportedIsUsingGogoNetwork = !1,
            m.RegisterStartupable(this, "InFlightConnectionStore", [h.default, p.default])
        }
        startup() {
            return a.Resolved()
        }
        isUsingGogoNetwork() {
            return this._reportedIsUsingGogoNetwork
        }
        isUsingGogoNetworkNoSubscription() {
            return this._reportedIsUsingGogoNetwork
        }
        _updateGogoConfig() {
            return this._gogoSettings = l.default.getConfigSettingsNoSubscription().gogo,
            this._onGogoNetworkChanged(),
            this._refreshSSID(!0)
        }
        _refreshSSID(e=!1) {
            if (!this._gogoSettings.enabled)
                return a.Resolved();
            if (!p.default.isConnected())
                return a.Resolved();
            return s.default.getSSID().then(t=>{
                (t !== this._lastKnownSSID || e) && (this._lastKnownSSID = t,
                this._refreshIsOnGoGoSSID(o.includes(this._gogoSettings.ssid, t)))
            }
            ).catch(()=>{
                this._lastKnownSSID = void 0,
                this._refreshIsOnGoGoSSID(!1)
            }
            )
        }
        _refreshIsOnGoGoSSID(e) {
            this._isOnGoGoSSID !== e && (this._isOnGoGoSSID = e,
            g.log(u.LogTraceArea.InFlightConnectionStore, "isOnGoGoSSID = " + this._isOnGoGoSSID),
            h.default.putData(c.InternalKeys.IsOnGoGoSSID, this._isOnGoGoSSID),
            this._refreshECSService())
        }
        _refreshECSService() {
            g.log(u.LogTraceArea.InFlightConnectionStore, "Refreshing ECS"),
            d.default.requestUpdate()
        }
        _onGogoNetworkChanged() {
            const e = this._gogoSettings.enabled && this._gogoSettings.isOnGogoIpRange;
            this._reportedIsUsingGogoNetwork !== e && (g.log(u.LogTraceArea.InFlightConnectionStore, "_onGogoNetworkChanged: isGogoEnabled = " + this._gogoSettings.enabled + " isOnGogoIpRange = " + this._gogoSettings.isOnGogoIpRange),
            this._reportedIsUsingGogoNetwork = e,
            this.trigger())
        }
    }
    ;
    n.__decorate([r.autoSubscribe], S.prototype, "isUsingGogoNetwork", null),
    n.__decorate([r.disableWarnings], S.prototype, "isUsingGogoNetworkNoSubscription", null),
    S = n.__decorate([r.AutoSubscribeStore], S),
    t.default = new S
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(1);
    const n = i(25);
    t.getLocalizeParamForGender = function(e) {
        return e === n.eGender.Male ? "male" : e === n.eGender.Female ? "female" : "other"
    }
    ,
    t.normalizeLocale = function(e) {
        return e.toLowerCase()
    }
}
, , function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(1)
      , s = i(70)
      , r = i(13)
      , a = i(7)
      , l = i(48)
      , c = i(2)
      , d = i(142)
      , u = i(3)
      , g = i(74)
      , h = i(38)
      , p = i(32)
      , m = i(429)
      , S = i(427)
      , C = i(75)
      , y = i(165)
      , f = i(21)
      , _ = i(25);
    let b = class extends r.StoreBase {
        constructor() {
            super(),
            this._needToFetchIncludeMeInSearchOption = !0,
            this._needToFetchAvatarPolicy = !0,
            this.SyncAddressBookPrivacySettingKey = "SyncAddressBook",
            this._refreshOptions = ()=>a.all([this._fetchAvatarPolicy(), this._fetchIncludeMeInSearchPrivacyOption()]).then(o.noop),
            f.RegisterStartupable(this, "PrivacyOptionsStore", [g.default, p.default, C.default])
        }
        startup() {
            const e = !!g.default.getData(l.InternalKeys.SyncAddressBookEnabled);
            this._syncAddressBookEnabled = e;
            const t = p.default.getUserPreferencesLocal();
            return t.forceAddressBookSyncNextStartup && C.default.permissionStatus(_.PermissionType.Contacts) !== s.PermissionStatus.Granted && p.default.setUserPreferencesLocal({
                forceAddressBookSyncNextStartup: !1
            }),
            this._includeMeInSearchEnabled = t.includeMeInSearchEnabled,
            this._searchPrivacyOptions = t.searchPrivacyOptions || {
                searchable: !1,
                recommendable: !1
            },
            this._avatarPolicy = t.avatarPolicy,
            d.default.setRefreshOptions("PrivacyOptionsStore", {
                interval: 864e5,
                taskTypeFlags: d.TaskTypeFlags.UsesNetworking,
                callback: this._refreshOptions
            }),
            a.Resolved()
        }
        refreshNow() {
            f.EnsureStarted(this).then(()=>{
                d.default.fireEarly("PrivacyOptionsStore")
            }
            )
        }
        _fetchIncludeMeInSearchPrivacyOption() {
            return this._needToFetchIncludeMeInSearchOption = !1,
            m.default.getIncludeMeInSearchPrivacyOption().then(e=>{
                e.searchable === this._includeMeInSearchEnabled && h.default(this._searchPrivacyOptions, e) || (p.default.setUserPreferencesLocal({
                    includeMeInSearchEnabled: e.searchable,
                    searchPrivacyOptions: e
                }),
                this._searchPrivacyOptions = e,
                this._includeMeInSearchEnabled = e.searchable,
                this.trigger("IncludeInSearch"))
            }
            ).catch(e=>{
                this._needToFetchIncludeMeInSearchOption = !0
            }
            )
        }
        getIncludeMeInSearchPrivacyOption() {
            return this._needToFetchIncludeMeInSearchOption ? (this._fetchIncludeMeInSearchPrivacyOption(),
            this._searchPrivacyOptions) : this._searchPrivacyOptions
        }
        setIncludeMeInSearchPrivacyOption(e) {
            if (h.default(this._searchPrivacyOptions, e))
                return;
            const {searchable: t, recommendable: i} = e;
            p.default.setUserPreferencesLocal({
                includeMeInSearchEnabled: t,
                searchPrivacyOptions: e
            }),
            this._includeMeInSearchEnabled = t,
            this._searchPrivacyOptions = e,
            this.trigger("IncludeInSearch"),
            m.default.setIncludeMeInSearchPrivacyOption(e).catch(e=>{
                u.log(c.LogTraceArea.GenericUnsafe, "Failed to set IncludeMeInSearch privacy option", e),
                this._searchPrivacyOptions = {
                    searchable: !t,
                    recommendable: !i
                },
                this._includeMeInSearchEnabled = !t,
                this.trigger("IncludeInSearch")
            }
            )
        }
        getSyncAddressBookPrivacySetting() {
            return C.default.permissionStatus(_.PermissionType.Contacts) === s.PermissionStatus.Granted && this._syncAddressBookEnabled
        }
        setSyncAddressBookPrivacySetting(e) {
            const t = this._syncAddressBookEnabled;
            this._syncAddressBookEnabled = e,
            g.default.putData(l.InternalKeys.SyncAddressBookEnabled, e),
            t !== e && this.trigger("SyncAddressBook")
        }
        _fetchAvatarPolicy() {
            return this._needToFetchAvatarPolicy = !1,
            m.default.getAvatarPolicy().then(e=>{
                this._avatarPolicy !== e && (p.default.setUserPreferencesLocal({
                    avatarPolicy: e
                }),
                this._avatarPolicy = e,
                this.trigger("AvatarVisibility"))
            }
            ).catch(e=>{
                this._needToFetchAvatarPolicy = !0
            }
            )
        }
        getAvatarPolicy() {
            return this._needToFetchAvatarPolicy ? (this._fetchAvatarPolicy(),
            this._avatarPolicy) : this._avatarPolicy
        }
        setAvatarPolicy(e, t) {
            if (this._avatarPolicy === e)
                return;
            const i = this._avatarPolicy;
            this._avatarPolicy = e,
            this.trigger("AvatarVisibility"),
            m.default.setAvatarPolicy(e).then(i=>{
                p.default.setUserPreferencesLocal({
                    avatarPolicy: e
                }),
                u.track(new y.AvatarPolicyChanged(e,t,!0))
            }
            ).catch(n=>{
                u.track(new y.AvatarPolicyChanged(e,t,!1,n.statusCode)),
                u.log(c.LogTraceArea.GenericUnsafe, "Failed to set AvatarPolicy privacy option", n),
                this._avatarPolicy = i,
                this.trigger("AvatarVisibility")
            }
            )
        }
        test_reset() {
            this._avatarPolicy = S.OptionsServiceAvatarPolicyValueType.BUDDIES_OR_AUTHORIZED_CAN_SEE,
            this._needToFetchAvatarPolicy = !0,
            this._includeMeInSearchEnabled = !1,
            this._needToFetchIncludeMeInSearchOption = !0
        }
    }
    ;
    n.__decorate([r.autoSubscribeWithKey("IncludeInSearch")], b.prototype, "getIncludeMeInSearchPrivacyOption", null),
    n.__decorate([r.autoSubscribeWithKey("SyncAddressBook")], b.prototype, "getSyncAddressBookPrivacySetting", null),
    n.__decorate([r.autoSubscribeWithKey("AvatarVisibility")], b.prototype, "getAvatarPolicy", null),
    b = n.__decorate([r.AutoSubscribeStore], b),
    e.exports = new b
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(10)
      , s = i(24);
    i(37);
    class r {
        static measureWindow(e) {
            return s.default.windowDimensionsNoSubscription(e)
        }
        static measureScreen(e) {
            return n.UserInterface.measureWindow(e === o.MainRootViewId ? void 0 : e)
        }
        static windowHeightWithoutStatusBar(e) {
            return this.measureWindow(e).height
        }
    }
    t.WindowDimensionUtils = r,
    t.default = r
}
, function(e, t, i) {
    "use strict";
    const n = i(86);
    e.exports = n.NativeUtils
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(763)
      , r = i(38)
      , a = i(4)
      , l = i(8)
      , c = /^#[0-9A-F]{6}$/i;
    var d;
    !function(e) {
        e[e.Blue = 1] = "Blue",
        e[e.Fuschia = 2] = "Fuschia",
        e[e.Mint = 3] = "Mint",
        e[e.Orange = 4] = "Orange",
        e[e.Rose = 5] = "Rose",
        e[e.Yellow = 6] = "Yellow",
        e[e.Rainbow = 7] = "Rainbow"
    }(d = t.SerializedColorByNumber || (t.SerializedColorByNumber = {}));
    const u = {
        key: "rainbow",
        colors: [l.Color.pink, l.Color.orange, l.Color.blue]
    }
      , g = {
        [d.Blue]: {
            key: "blue",
            colors: [l.Color.blurpleDark, l.Color.blurpleLight],
            primaryAccent: l.Color.blurpleDark,
            secondaryAccent: l.Color.blurpleLight
        },
        [d.Fuschia]: {
            key: "fuschia",
            colors: [l.Color.purpleDark, l.Color.purpleLight],
            primaryAccent: l.Color.purpleDark,
            secondaryAccent: l.Color.purpleLight
        },
        [d.Mint]: {
            key: "mint",
            colors: [l.Color.blueDark, l.Color.blueLight],
            primaryAccent: l.Color.blueDark,
            secondaryAccent: l.Color.blueDark
        },
        [d.Orange]: {
            key: "orange",
            colors: [l.Color.pinkDark, l.Color.pinkLight],
            primaryAccent: l.Color.pinkDark,
            secondaryAccent: l.Color.pinkDark
        },
        [d.Rose]: {
            key: "rose",
            colors: [l.Color.pinkDark, l.Color.pinkLight],
            primaryAccent: l.Color.pinkDark,
            secondaryAccent: l.Color.pinkDark
        },
        [d.Yellow]: {
            key: "yellow",
            colors: [l.Color.orangeDark, l.Color.orangeLight],
            primaryAccent: l.Color.orangeDark,
            secondaryAccent: l.Color.orangeDark
        },
        [d.Rainbow]: u
    };
    t.delphiColorInfo = {
        key: "delphi",
        colors: [l.Color.blueDark, l.Color.blueLight],
        reverseGradientOrder: !0,
        primaryAccent: l.Color.blueDark,
        secondaryAccent: l.Color.blueDark
    };
    const h = {
        blue: d.Blue,
        fuschia: d.Fuschia,
        mint: d.Mint,
        orange: d.Orange,
        rose: d.Rose,
        yellow: d.Yellow,
        rainbow: d.Rainbow
    };
    let p = {};
    function m() {
        return v()[d.Blue]
    }
    function S(e) {
        return e >= 1 && e <= 7 ? v()[e] : m()
    }
    function C(e, t) {
        if (t) {
            if (e.secondaryAccent)
                return e.secondaryAccent
        } else if (e.primaryAccent)
            return e.primaryAccent;
        const i = e.colors;
        return t ? i[i.length - 1] : i[0]
    }
    function y(e) {
        return e.reverseGradientOrder ? e.colors.slice().reverse() : e.colors
    }
    t.getDefaultUnknownColorInfo = m,
    t.getDefaultColorInfo = function(e) {
        return S(function(e) {
            if (!e)
                return 0;
            let t = 5381;
            const i = e.length;
            for (let n = 0; n < i; n++) {
                const i = e.charCodeAt(n);
                t = 33 * t ^ i
            }
            return t >>> 0
        }(e) % 6 + 1)
    }
    ,
    t.getColorInfoForSerializedColor = S,
    t.backgroundColorStyleForColorInfo = function(e, t=!1) {
        const i = C(e, t);
        let n = p[i];
        return n || (n = o.Styles.createViewStyle({
            backgroundColor: i
        }, !1),
        p[i] = n),
        n
    }
    ,
    t.accentColor = C,
    t.localizedColorNameForColorInfo = function(e) {
        switch (e.key) {
        case "blue":
            return a.getString("Colors.Blue");
        case "fuschia":
            return a.getString("Colors.Fuschia");
        case "mint":
            return a.getString("Colors.Mint");
        case "orange":
            return a.getString("Colors.Orange");
        case "rose":
            return a.getString("Colors.Rose");
        case "yellow":
            return a.getString("Colors.Yellow");
        case "rainbow":
            return a.getString("Colors.Rainbow");
        case f:
            return a.getString("Colors.Custom")
        }
        return ""
    }
    ,
    t.gradientColorsForSerializedColor = function(e) {
        return y(S(e))
    }
    ,
    t.gradientColorsForColorInfo = y,
    t.subtleGradientColorsForColorInfo = function(e) {
        return y(e)
    }
    ,
    t.isMatchingColorInfo = function(e, t) {
        return !!e && h[e.key] === t
    }
    ,
    t.isCustomColor = function(e) {
        return !!e && !(e.key in h) && "delphi" !== e.key
    }
    ;
    const f = "cust";
    function _(e, t) {
        return {
            key: f,
            hsvs: e,
            colors: n.map(e, e=>s.rgbToColorString(s.hsvToRgb(e))),
            reverseGradientOrder: t
        }
    }
    function b(e) {
        return !!e && (!!(void 0 !== e.hue && n.isNumber(e.hue) && e.hue >= 0 && e.hue <= 1) && (!!(void 0 !== e.saturation && n.isNumber(e.saturation) && e.saturation >= .7 && e.saturation <= 1) && !!(void 0 !== e.value && n.isNumber(e.value) && e.value >= .2 && e.value <= 1)))
    }
    function v() {
        return g
    }
    t.genFromHsvs = _,
    t.serializeColorInfo = function(e) {
        const t = n.findKey(v(), (t,i)=>r.default(t, e));
        return t || (e.hsvs || (e.hsvs = n.map(e.colors, e=>s.rgbToHsv(s.colorStringToRgb(e)))),
        "hsv_" + n.map(e.hsvs, e=>e.hue + "," + e.saturation + "," + e.value).join("_") + (e.reverseGradientOrder ? "_reverse" : ""))
    }
    ,
    t.deserializeColorInfo = function(e) {
        if (!e)
            return m();
        let t = v()[e];
        if (t)
            return t;
        const i = h[e];
        if (i) {
            let e = v()[i];
            if (e)
                return e
        }
        const o = e.split("_");
        if ("hsv" === o[0] && o.length >= 2) {
            let e, t = !1;
            "reverse" === n.last(o) ? (e = o.slice(1, o.length - 1),
            t = !0) : e = o.slice(1, o.length);
            let i = !1;
            const s = [];
            if (n.each(e, e=>{
                try {
                    const t = e.split(",")
                      , i = {
                        hue: Number(t[0]),
                        saturation: Number(t[1]),
                        value: Number(t[2])
                    };
                    if (b(i))
                        return s.push(i),
                        !0
                } catch (e) {}
                return i = !0,
                !1
            }
            ),
            !i)
                return _(s, t)
        }
        if ("cust" === o[0] && o.length >= 2) {
            let e, t = !1;
            if ("reverse" === n.last(o) ? (e = o.slice(1, o.length - 1),
            t = !0) : e = o.slice(1, o.length),
            e.length && n.every(e, e=>c.test(e)))
                return 1 === e.length && e.push(e[0]),
                {
                    key: f,
                    colors: e,
                    reverseGradientOrder: t
                }
        }
        return m()
    }
    ,
    t.validateHsvColor = b
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(16)
      , s = i(2)
      , r = i(20)
      , a = i(55);
    class l {
        canNavigateInApp() {
            return !r.isGuestUser()
        }
        canForwardMessage() {
            return !r.isGuestUser()
        }
        canBookmarkMessage() {
            return !r.isGuestUser()
        }
        canUseKeyboardShortcut(e) {
            return !r.isGuestUser() || n.includes(l._allowedGuestKeyboardShortcuts, e)
        }
        canStartConversationWith(e) {
            return !o.isGuestUserMri(e)
        }
        canAddContact(e) {
            return !o.isGuestUserMri(e)
        }
        canAddCortanaBotAsContact() {
            return !r.isGuestUser()
        }
        canUseQuickSignOn() {
            return !r.isGuestUser()
        }
        allowGroupInteractionBetweenBlockedParticipants(e, t) {
            return o.isGuestUserMri(e) || o.isGuestUserMri(t)
        }
        preserveOtherStoredAccounts() {
            return r.isGuestUser()
        }
        eligibleLeftNavViewModes() {
            if (r.isGuestUser())
                return l._eligibleLeftNavModesForGuestUsers
        }
    }
    l._allowedGuestKeyboardShortcuts = [s.KeyboardShortcut.AcceptIncomingCall, s.KeyboardShortcut.EditMessage, s.KeyboardShortcut.EnableMultipleSelectMessages, s.KeyboardShortcut.HangupOrRejectCall, s.KeyboardShortcut.MarkAsUnread, s.KeyboardShortcut.OpenAppSettings, s.KeyboardShortcut.OpenHelpInABrowser, s.KeyboardShortcut.SearchInConversation, s.KeyboardShortcut.SendFeedback, s.KeyboardShortcut.SendFile, s.KeyboardShortcut.TakeCallSnapshot, s.KeyboardShortcut.ToggleCamera, s.KeyboardShortcut.ToggleGallery, s.KeyboardShortcut.ToggleMicrophone],
    l._eligibleLeftNavModesForGuestUsers = [a.LeftNavViewMode.None, a.LeftNavViewMode.ConversationInCall],
    t.default = new l
}
, , , function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(52)
      , a = i(7)
      , l = i(6)
      , c = i(1477)
      , d = i(1068)
      , u = i(2)
      , g = i(3)
      , h = i(503)
      , p = i(4)
      , m = i(32)
      , S = i(20)
      , C = i(21)
      , y = i(29);
    let f = class extends s.StoreBase {
        constructor() {
            super(),
            this._updateStatus = d.NoUpdates,
            this._isWindowMaximized = !1,
            this._shouldShowUpdateBadge = !1,
            this._shouldShowUpdateReminder = !1,
            this._isMandatoryUpdate = !1,
            this._ignoreLocaleChange = !1,
            this._areConversationNavigationMenuItemsVisible = !1,
            this._shouldHavePasteAsPlainTextOption = !1,
            this.onMandatoryUpdate = new r.default,
            this.onNavigateToAboutPage = new r.default,
            this.onNavigateToSettings = new r.default,
            this.onNavigateToAVSettings = new r.default,
            this.onNavigateToProfile = new r.default,
            this.onNavigateToMeControl = new r.default,
            this.onNavigateToSearch = new r.default,
            this.onNavigateToFeedback = new r.default,
            this.onNavigateToSkypeURI = new r.default,
            this.onNavigateToSupport = new r.default,
            this.onNavigateToStatus = new r.default,
            this.onNavigateToPreviousConversation = new r.default,
            this.onNavigateToNextConversation = new r.default,
            this.onPresenceChange = new r.default,
            this.onNewConversation = new r.default,
            this.onNewGroupConversation = new r.default,
            this.onNewCall = new r.default,
            this.onSignOut = new r.default,
            this._onLogin = e=>{
                e && this._handleSkypeURI()
            }
            ,
            this._setMandatoryUpdate = ()=>{
                g.log(u.LogTraceArea.ElectronStateStore, "Setting update as Mandatory."),
                this._isMandatoryUpdate = !0,
                this.trigger()
            }
            ,
            this._setRedBadge = ()=>{
                this._shouldShowUpdateReminder = !0,
                this.trigger()
            }
            ,
            this._setShowUpdateBadge = ()=>{
                this._shouldShowUpdateBadge = !0,
                this.trigger()
            }
            ,
            this._handleSkypeURI = ()=>{
                if (!this._api)
                    return;
                const e = this._api.ipcProvider.app.getCurrentSkypeURI.send();
                e && this.onNavigateToSkypeURI.fire(e)
            }
            ,
            C.RegisterStartupable(this, "ElectronStateStore"),
            S.userLoggedInUpdatedEvent.subscribe(this._onLogin)
        }
        startup() {
            return "undefined" != typeof window && void 0 !== window.electronApi && (this._api = window.electronApi,
            this._registerHandlers()),
            a.Resolved()
        }
        checkForUpdates() {
            this._api && this._api.ipcProvider.appUpdate.checkForUpdates.send()
        }
        getUpdateStatus() {
            return this._updateStatus
        }
        setUpdateStatus(e) {
            this._updateStatus = e,
            this.trigger()
        }
        getIsWindowMaximized() {
            return this._isWindowMaximized
        }
        setIsWindowMaximized(e) {
            this._isWindowMaximized = e,
            this.trigger()
        }
        shouldShowUpdateBadge() {
            return this._shouldShowUpdateBadge
        }
        shouldShowUpdateReminder() {
            return this._shouldShowUpdateReminder
        }
        isMandatoryUpdate() {
            return this._isMandatoryUpdate
        }
        resetLocaleToSystem() {
            this._api && (this._ignoreLocaleChange = !0,
            this._api.ipcProvider.localisation.resetLocale.invoke().then(e=>{
                p.setSystemLocale(e)
            }
            ))
        }
        acknowledgeAppExit() {
            this._api && this._api.ipcProvider.app.exitAckApp.send()
        }
        getAppSettings() {
            if (this._api)
                return this._api.ipcProvider.app.getSettings.send()
        }
        changeAppSettings(e) {
            this._api && this._api.ipcProvider.app.changeSettings.send(e)
        }
        isAutoStartSupported() {
            return !!this._api && this._api.ipcProvider.app.isAutoStartSupported.send()
        }
        canControlAutoStart() {
            return !1
        }
        _getShouldHavePasteAsPlainTextHelper() {
            let e = !1
              , t = !1;
            return ({local: i, ecs: n})=>{
                e = o.isNil(i) ? e : i,
                t = o.isNil(n) ? t : n;
                const s = e && t;
                this._shouldHavePasteAsPlainTextOption !== s && (this._shouldHavePasteAsPlainTextOption = s,
                window.electronApi.ipcProvider.clipboard.setPasteAsPlainTextOption.send(this._shouldHavePasteAsPlainTextOption))
            }
        }
        _registerHandlers() {
            if (!this._api)
                return;
            const e = this._getShouldHavePasteAsPlainTextHelper();
            m.default.subscribe(()=>{
                const {pasteAsQuotesEnabled: t} = m.default.getUserPreferencesLocalNoSubscription();
                e({
                    local: t
                })
            }
            ),
            l.default.subscribe(()=>{
                const {enableKeyboardNavigationBetweenConversations: t, enableMultiMessageQuoteOnKeyboard: i, enableHandlingHyperlinkOnPaste: n} = l.default.getS4LMessagingFeaturesNoSubscription();
                this._areConversationNavigationMenuItemsVisible !== t && (this._areConversationNavigationMenuItemsVisible = t,
                window.electronApi.ipcProvider.applicationMenu.setConversationNavigationMenuItemsVisible.send(this._areConversationNavigationMenuItemsVisible)),
                e({
                    ecs: n || i
                })
            }
            ),
            p.localeChangedEvent.subscribe(e=>{
                !this._ignoreLocaleChange && this._api && this._api.ipcProvider.localisation.setLocale.invoke(e),
                this._ignoreLocaleChange = !1
            }
            ),
            this._api.ipcProvider.appUpdate.checkingForUpdate.on(()=>{
                this.setUpdateStatus(d.Checking)
            }
            ),
            this._api.ipcProvider.appUpdate.updateNotAvailable.on(()=>{
                this.setUpdateStatus(d.NoUpdates)
            }
            ),
            this._api.ipcProvider.appUpdate.updateAvailable.on(()=>{
                this.setUpdateStatus(d.UpdateAvailable)
            }
            ),
            this._api.ipcProvider.appUpdate.updateDownloaded.on(e=>{
                if (g.log(u.LogTraceArea.ElectronStateStore, "New update downloaded", e),
                e && e.releaseDate && e.releaseName && e.releaseNotes && e.updateURL) {
                    if (this._setShowUpdateBadge(),
                    this.setUpdateStatus(d.UpdateDownloaded),
                    -1 !== e.releaseName.indexOf("mandatory") && (this._setMandatoryUpdate(),
                    this.onMandatoryUpdate.fire()),
                    !this._expirationId) {
                        const t = Date.parse(e.releaseDate) + 12096e5;
                        g.log(u.LogTraceArea.ElectronStateStore, "Setting reminder red badge alert for upgrade", new Date(t).toUTCString()),
                        this._expirationId = y.setExpiration(this._setRedBadge, t)
                    }
                } else
                    g.log(u.LogTraceArea.ElectronStateStore, "Empty update object received.")
            }
            ),
            this._api.ipcProvider.appUpdate.updateError.on(()=>{
                this.setUpdateStatus(d.Error)
            }
            ),
            this._api.ipcProvider.window.onMaximized.on(()=>{
                this.setIsWindowMaximized(!0)
            }
            ),
            this._api.ipcProvider.window.onUnmaximized.on(()=>{
                this.setIsWindowMaximized(!1)
            }
            ),
            this._api.ipcProvider.app.onSkypeURI.on(this._handleSkypeURI),
            this._api.ipcProvider.applicationMenu.about.on(this.onNavigateToAboutPage.fire),
            this._api.ipcProvider.applicationMenu.openSettings.on(this.onNavigateToSettings.fire),
            this._api.ipcProvider.applicationMenu.openAvSettings.on(this.onNavigateToAVSettings.fire),
            this._api.ipcProvider.applicationMenu.openProfile.on(this.onNavigateToProfile.fire),
            this._api.ipcProvider.applicationMenu.openMeControl.on(this.onNavigateToMeControl.fire),
            this._api.ipcProvider.applicationMenu.searchSkype.on(this.onNavigateToSearch.fire),
            this._api.ipcProvider.applicationMenu.reportProblem.on(this.onNavigateToFeedback.fire),
            this._api.ipcProvider.applicationMenu.new1on1Chat.on(this.onNewConversation.fire),
            this._api.ipcProvider.applicationMenu.newGroupChat.on(this.onNewGroupConversation.fire),
            this._api.ipcProvider.applicationMenu.newCall.on(this.onNewCall.fire),
            this._api.ipcProvider.applicationMenu.signOut.on(this.onSignOut.fire),
            this._api.ipcProvider.applicationMenu.privacy.on(()=>h.openPrivacy()),
            this._api.ipcProvider.applicationMenu.terms.on(()=>h.openTerms()),
            this._api.ipcProvider.applicationMenu.skypeSupport.on(this.onNavigateToSupport.fire),
            this._api.ipcProvider.applicationMenu.skypeStatus.on(this.onNavigateToStatus.fire),
            this._api.ipcProvider.applicationMenu.previousConversation.on(()=>{
                g.log(u.LogTraceArea.ElectronStateStore, "menu-previous-conversation triggered"),
                this.onNavigateToPreviousConversation.fire()
            }
            ),
            this._api.ipcProvider.applicationMenu.nextConversation.on(()=>{
                g.log(u.LogTraceArea.ElectronStateStore, "menu-next-conversation triggered"),
                this.onNavigateToNextConversation.fire()
            }
            ),
            this._api.ipcProvider.applicationMenu.presenceChange.on(e=>{
                let t = c.mapElectronPresenceToUserStatus(e);
                g.log(u.LogTraceArea.ElectronStateStore, `Updating presence to ${e} - ${t}`),
                this.onPresenceChange.fire(t)
            }
            ),
            this._api.ipcProvider.app.settingsChanged.on(()=>{
                this.trigger()
            }
            )
        }
    }
    ;
    n.__decorate([s.autoSubscribe], f.prototype, "getUpdateStatus", null),
    n.__decorate([s.autoSubscribe], f.prototype, "getIsWindowMaximized", null),
    n.__decorate([s.autoSubscribe], f.prototype, "shouldShowUpdateBadge", null),
    n.__decorate([s.autoSubscribe], f.prototype, "shouldShowUpdateReminder", null),
    n.__decorate([s.autoSubscribe], f.prototype, "isMandatoryUpdate", null),
    n.__decorate([s.autoSubscribe], f.prototype, "getAppSettings", null),
    n.__decorate([s.autoSubscribe], f.prototype, "isAutoStartSupported", null),
    n.__decorate([s.autoSubscribe], f.prototype, "canControlAutoStart", null),
    f = n.__decorate([s.AutoSubscribeStore], f),
    e.exports = new f
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(6)
      , a = i(99)
      , l = i(88)
      , c = i(10)
      , d = i(300)
      , u = i(2)
      , g = i(3)
      , h = i(22);
    var p;
    !function(e) {
        e[e.IncomingCall = 0] = "IncomingCall",
        e[e.Notification = 1] = "Notification",
        e[e.CallRecorder = 2] = "CallRecorder",
        e[e.LocalCallMediaCapturer = 3] = "LocalCallMediaCapturer",
        e[e.RemoteCallMediaCapturer = 4] = "RemoteCallMediaCapturer",
        e[e.CallConnectionQuality = 5] = "CallConnectionQuality",
        e[e.IncomingVideoDisabled = 6] = "IncomingVideoDisabled",
        e[e.NetworkConnection = 7] = "NetworkConnection",
        e[e.SpokenLanguageConflictResolution = 8] = "SpokenLanguageConflictResolution",
        e[e.CameraDeniedToast = 9] = "CameraDeniedToast",
        e[e.WebFeedback = 10] = "WebFeedback",
        e[e.Translation = 11] = "Translation",
        e[e.TeamsInterop = 12] = "TeamsInterop"
    }(p = t.ToastType || (t.ToastType = {}));
    let m = class extends s.StoreBase {
        constructor() {
            super(...arguments),
            this._toasts = [],
            this._toastId = 1,
            this._hasPresentedWebFeedbackToast = !1
        }
        addNotificationToast(e, t) {
            return this._addToast(p.Notification, p.Notification, e, t)
        }
        addIncomingCallToast(e, t, i) {
            const n = this._addToast(p.IncomingCall, p.IncomingCall, e, i);
            return n && l.default.markAnswerCallStep(e.callId, a.AnswerCallStep.NotifyingCallee, e.conversationMri, t, {
                CalleeNotifiedIn: a.AnswerCallNotificationLocation.InAppBanner
            }),
            n
        }
        addCameraDeniedToast(e) {
            return this._addToast(p.CameraDeniedToast, p.CameraDeniedToast, e, this._maybeRootViewId(e.conversationMri))
        }
        addCallRecorderToast(e) {
            return this._addToast(p.CallRecorder, p.CallRecorder, e, this._maybeRootViewId(e.conversationMri))
        }
        addRemoteCallMediaCapturedToast(e) {
            return this._addToast(p.RemoteCallMediaCapturer, p.RemoteCallMediaCapturer, e, this._maybeRootViewId(e.conversationMri))
        }
        addLocalCallMediaCapturedToast(e) {
            return this._addToast(p.LocalCallMediaCapturer, p.LocalCallMediaCapturer, e, this._maybeRootViewId(e.conversationMri))
        }
        addCallConnectionQualityToast(e) {
            return this._addToast(p.CallConnectionQuality, p.CallConnectionQuality, e, this._maybeRootViewId(e.conversationMri))
        }
        addIncomingVideoDisabledToast(e) {
            return this._addToast(p.IncomingVideoDisabled, p.IncomingVideoDisabled, e, this._maybeRootViewId(e.conversationMri))
        }
        addNetworkConnectionToast(e) {
            return this._addToast(p.NetworkConnection, p.NetworkConnection, e, c.MainRootViewId)
        }
        addSpokenLanguageConflictResolutionToast(e) {
            return this._addToast(p.SpokenLanguageConflictResolution, p.SpokenLanguageConflictResolution, e, this._maybeRootViewId(e.conversationMri))
        }
        addTeamsInteropToast(e) {
            return this._addToast(p.TeamsInterop, p.TeamsInterop, e, this._maybeRootViewId(e.conversationMri))
        }
        addTranslationInCallToast(e) {
            return this._addToast(p.Translation, p.Translation, e, this._maybeRootViewId(e.conversationMri))
        }
        addWebFeebackToast(e) {
            if (r.default.getS4LUiFeaturesNoSubscription().enableWebFeedbackBanner && -1 === o.findIndex(this._toasts, e=>e.type === p.WebFeedback) && !this._hasPresentedWebFeedbackToast)
                return this._hasPresentedWebFeedbackToast = !0,
                this._addToast(p.WebFeedback, p.WebFeedback, e, c.MainRootViewId)
        }
        _addToast(e, t, i, n) {
            g.log(u.LogTraceArea.Navigation, "CompositeToastStore._addToast type: " + e);
            const s = [p.IncomingCall, p.CallRecorder, p.CallConnectionQuality, p.IncomingVideoDisabled, p.SpokenLanguageConflictResolution, p.CameraDeniedToast, p.TeamsInterop, p.Translation];
            if (o.includes(s, e) && this._hasToastForCallId(e, i))
                return void g.log(u.LogTraceArea.Navigation, "CompositeToastStore._addToast type: " + e + " callId: " + i.callId + " already exists");
            const r = {
                type: e,
                order: t,
                id: this._toastId++,
                state: i,
                rootViewId: n
            }
              , a = o.findIndex(this._toasts, e=>e.order > t);
            if (-1 === a && this._toasts.length < 3)
                this._toasts.push(r);
            else {
                if (!(-1 !== a && a < 3))
                    return void g.log(u.LogTraceArea.Navigation, `Ignoring toast type: ${e} order ${t} as store is full`);
                this._toasts.splice(a, 0, r),
                this._toasts.splice(3, 1)
            }
            return this.trigger(),
            r.id
        }
        _hasToastForCallId(e, t) {
            return !!o.find(this._toasts, i=>i.type === e && i.state.callId === t.callId)
        }
        removeToast(e, t, i) {
            const n = o.find(this._toasts, t=>t.id === e);
            if (n && !o.isUndefined(t) && n.state) {
                const e = n.state;
                e.action && e.action(t, i)
            }
            o.remove(this._toasts, t=>t.id === e).length && this.trigger()
        }
        removeAll() {
            this._toasts = [],
            this.trigger()
        }
        updateToast(e, t) {
            const i = o.find(this._toasts, t=>t.id === e);
            return !!i && (i.state = t,
            this.trigger(e),
            !0)
        }
        getToasts(e) {
            return o.filter(this._toasts, t=>t.rootViewId === e || t.rootViewId === c.MainRootViewId)
        }
        getToast(e) {
            return o.find(this._toasts, t=>t.id === e)
        }
        _maybeRootViewId(e) {
            return e && h.default.isUsingSplitViewNoSubscription() ? d.default.rootViewIdForConversationMri(e) : c.MainRootViewId
        }
    }
    ;
    n.__decorate([s.autoSubscribe], m.prototype, "getToasts", null),
    n.__decorate([s.autoSubscribe, n.__param(0, s.key)], m.prototype, "getToast", null),
    m = n.__decorate([s.AutoSubscribeStore], m),
    t.default = new m
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(2)
      , r = i(39);
    i(159);
    class a extends r.TelemetryEventBase {
        constructor(e, t, i, n, o, s) {
            super(),
            this._newEndpointId = e,
            this._existingEndpointId = t,
            this._pushSubscriptionId = i,
            this._edfRegistrationId = n,
            this._reason = o,
            this._tcid = s
        }
        getEventName() {
            return "fundamentals_missing_push_sub"
        }
        getAttributes() {
            return o.assign({}, super.getAttributes(), {
                NewEndpointId: this._newEndpointId,
                EndpointId: this._existingEndpointId,
                PushSubscriptionId: this._pushSubscriptionId,
                EdfRegistrationId: this._edfRegistrationId || "",
                Reason: this._reason || "",
                CSContextId: this._tcid ? this._tcid.contextId : "",
                CSDate: this._tcid ? this._tcid.date : ""
            })
        }
    }
    t.MissingPushSubscription = a;
    class l extends r.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._origin = e,
            this._additionalAttributes = t
        }
        getEventName() {
            return "fundamentals_email_skype_id"
        }
        getAttributes() {
            const e = super.getAttributes();
            return o.extend(e, this._additionalAttributes),
            e.SkypeIdSource = s.ConversationFakedOrigin[this._origin],
            e
        }
    }
    t.EmailLikeSkypeId = l;
    class c extends r.TelemetryEventBase {
        constructor(e) {
            super(),
            this._errorInfo = e
        }
        getEventName() {
            return "fundamentals_database_error"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                WebSQLCode: this._errorInfo.webSqlCode,
                SQLiteCode: this._errorInfo.sqliteCode,
                Message: this._errorInfo.sanitizedErrorMessage
            })
        }
    }
    t.DatabaseErrorEvent = c;
    class d extends r.TelemetryEventBase {
        constructor(e, t, i, n, o, s, r) {
            super(),
            this._contentLengthHeader = e,
            this._restClientName = t,
            this._method = i,
            this._statusCode = n,
            this._contextId = o,
            this._serverTime = s,
            this._responseParsingError = r
        }
        getEventName() {
            return "fundamentals_corrupt_null_body"
        }
        getAttributes() {
            const e = super.getAttributes();
            return this._restClientName && (e.RestClientName = this._restClientName),
            e.ContentLengthHeader = String(this._contentLengthHeader),
            e.Method = this._method,
            e.StatusCode = this._statusCode,
            this._contextId && (e.context_id = this._contextId),
            this._serverTime && (e.ServerTime = this._serverTime),
            this._responseParsingError && (e.ResponseParsingError = this._responseParsingError),
            e
        }
    }
    t.CorruptNullBodyEvent = d;
    class u extends r.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._providerName = e,
            this._timeToOpen = t
        }
        getEventName() {
            return "fundamentals_db_debug"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ProviderName = this._providerName,
            e.TimeToOpen = this._timeToOpen,
            e
        }
    }
    t.DatabaseDebugEvent = u;
    class g extends r.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._tableSize = e,
            this._oldestSentTimestamp = t
        }
        getEventName() {
            return "fundamentals_aria_limit"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.TableSize = this._tableSize,
            e.OldestSent = this._oldestSentTimestamp,
            e
        }
    }
    t.AriaGetEventsLimitReached = g;
    class h extends r.TelemetryEventBase {
        constructor(e, t="") {
            super(),
            this._trackingName = e,
            this._data = t
        }
        getEventName() {
            return "fundamentals_debug"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Name = this._trackingName,
            e.Data = this._data,
            e
        }
    }
    t.FundamentalsDebugEvent = h;
    t.FundamentalsMessagePushDebug = class extends h {
        constructor(e, t, i, n="", o="") {
            super("MessagePushDebug"),
            this._clientMessageId = e,
            this._correlationId = t,
            this._step = i,
            this._error = n,
            this._result = o
        }
        shouldSend() {
            return !1
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ProcessingStep = this._step,
            e.ClientMessageId = this._clientMessageId,
            e.MessageCorrelationId = this._correlationId,
            e.PushProcessingError = this._error,
            e.ProcessingResult = this._result,
            e
        }
        getEventPriority() {
            return n.AWTEventPriority.High
        }
    }
    ;
    class p extends r.TelemetryEventBase {
        constructor(e, t, i, n, o, s) {
            super(),
            this._restClient = e,
            this._scenario = t,
            this._requestId = i,
            this._statusCode = n,
            this._statusText = o,
            this._chatServiceTcidData = s
        }
        getEventName() {
            return "fundamentals_empty_body_debug"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.RestClient = this._restClient,
            e.Scenario = this._scenario,
            e.RequestId = this._requestId || "",
            e.StatusCode = this._statusCode,
            e.StatusText = this._statusText || "",
            e.TcidData = this._chatServiceTcidData ? JSON.stringify(this._chatServiceTcidData) : "",
            e
        }
    }
    t.FundamentalsDebugEmptyBodyEvent = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(78)
      , r = i(16)
      , a = i(188)
      , l = i(39)
      , c = i(159);
    var d, u, g, h, p, m, S, C;
    !function(e) {
        e[e.BackButton = 1] = "BackButton",
        e[e.CampaignBlocked = 2] = "CampaignBlocked",
        e[e.ChatServiceBlockedMessage = 3] = "ChatServiceBlockedMessage",
        e[e.EngagementContentDisabled = 4] = "EngagementContentDisabled",
        e[e.EngagementPushContentDisabled = 5] = "EngagementPushContentDisabled",
        e[e.EscKey = 6] = "EscKey",
        e[e.FeatureDisabled = 7] = "FeatureDisabled",
        e[e.InvalidCampaignId = 8] = "InvalidCampaignId",
        e[e.InvalidColor = 9] = "InvalidColor",
        e[e.InvalidLink = 10] = "InvalidLink",
        e[e.InvalidSkypeId = 11] = "InvalidSkypeId",
        e[e.InvalidSkypeIdPlaceholder = 12] = "InvalidSkypeIdPlaceholder",
        e[e.NoticeBulkSizeExceeded = 13] = "NoticeBulkSizeExceeded",
        e[e.NoticeClientVersionMismatch = 14] = "NoticeClientVersionMismatch",
        e[e.NoticeCompleted = 15] = "NoticeCompleted",
        e[e.NoticeDelivered = 16] = "NoticeDelivered",
        e[e.NoticeDiscardedOnFirstRun = 17] = "NoticeDiscardedOnFirstRun",
        e[e.NoticeDismiss = 18] = "NoticeDismiss",
        e[e.NoticeExperimentNotAllocated = 19] = "NoticeExperimentNotAllocated",
        e[e.NoticeExperimentVariantMismatch = 20] = "NoticeExperimentVariantMismatch",
        e[e.NoticeExpired = 21] = "NoticeExpired",
        e[e.NoticeInvalidPlaceholder = 22] = "NoticeInvalidPlaceholder",
        e[e.NoticeMissingContent = 23] = "NoticeMissingContent",
        e[e.NoticeParseError = 24] = "NoticeParseError",
        e[e.NoticeReceived = 25] = "NoticeReceived",
        e[e.NoticeReceivedControl = 26] = "NoticeReceivedControl",
        e[e.NoticeTapButton = 27] = "NoticeTapButton",
        e[e.NoticeTapCard = 28] = "NoticeTapCard",
        e[e.NoticeTimeout = 29] = "NoticeTimeout",
        e[e.NoticeUnsupportedContentType = 30] = "NoticeUnsupportedContentType",
        e[e.NoticeUnsupportedValidForPeriod = 31] = "NoticeUnsupportedValidForPeriod",
        e[e.NoticeUnsupportedDelayForPeriod = 32] = "NoticeUnsupportedDelayForPeriod",
        e[e.NoticeEnqueued = 33] = "NoticeEnqueued",
        e[e.NoticeDequeued = 34] = "NoticeDequeued",
        e[e.NoticeWrongLanguage = 35] = "NoticeWrongLanguage",
        e[e.NoticeWrongPlatform = 36] = "NoticeWrongPlatform",
        e[e.PlaceholderWithoutSkypeId = 37] = "PlaceholderWithoutSkypeId",
        e[e.PopCardBulkSizeExceeded = 38] = "PopCardBulkSizeExceeded",
        e[e.PopCardClientVersionMismatch = 39] = "PopCardClientVersionMismatch",
        e[e.PopCardCompleted = 40] = "PopCardCompleted",
        e[e.PopCardDelivered = 41] = "PopCardDelivered",
        e[e.PopCardDiscardedOnFirstRun = 42] = "PopCardDiscardedOnFirstRun",
        e[e.PopCardDismiss = 43] = "PopCardDismiss",
        e[e.PopCardDisplay = 44] = "PopCardDisplay",
        e[e.PopCardExpand = 45] = "PopCardExpand",
        e[e.PopCardExperimentNotAllocated = 46] = "PopCardExperimentNotAllocated",
        e[e.PopCardExperimentVariantMismatch = 47] = "PopCardExperimentVariantMismatch",
        e[e.PopCardExpired = 48] = "PopCardExpired",
        e[e.PopCardInvalidPlaceholder = 49] = "PopCardInvalidPlaceholder",
        e[e.PopCardMissingContent = 50] = "PopCardMissingContent",
        e[e.PopCardParseError = 51] = "PopCardParseError",
        e[e.PopCardReceived = 52] = "PopCardReceived",
        e[e.PopCardReceivedControl = 53] = "PopCardReceivedControl",
        e[e.PopCardSuppressed = 54] = "PopCardSuppressed",
        e[e.PopCardTapButton = 55] = "PopCardTapButton",
        e[e.PopCardTapCard = 56] = "PopCardTapCard",
        e[e.PopCardTimeout = 57] = "PopCardTimeout",
        e[e.PopCardUnsupportedValidForPeriod = 58] = "PopCardUnsupportedValidForPeriod",
        e[e.PopCardUnsupportedDelayForPeriod = 59] = "PopCardUnsupportedDelayForPeriod",
        e[e.PopCardEnqueued = 60] = "PopCardEnqueued",
        e[e.PopCardDequeued = 61] = "PopCardDequeued",
        e[e.PopCardWrongLanguage = 62] = "PopCardWrongLanguage",
        e[e.PopCardWrongPlatform = 63] = "PopCardWrongPlatform",
        e[e.PostMessage = 64] = "PostMessage",
        e[e.PushNotificationClientVersionMismatch = 65] = "PushNotificationClientVersionMismatch",
        e[e.PushNotificationDelivered = 66] = "PushNotificationDelivered",
        e[e.PushNotificationDismissedDueToActivity = 67] = "PushNotificationDismissedDueToActivity",
        e[e.PushNotificationDismissedOnFeatureCategory = 68] = "PushNotificationDismissedOnFeatureCategory",
        e[e.PushNotificationDisplayed = 69] = "PushNotificationDisplayed",
        e[e.PushNotificationDisplayFailed = 70] = "PushNotificationDisplayFailed",
        e[e.PushNotificationExperimentNotAllocated = 71] = "PushNotificationExperimentNotAllocated",
        e[e.PushNotificationExperimentVariantMismatch = 72] = "PushNotificationExperimentVariantMismatch",
        e[e.PushNotificationParseError = 73] = "PushNotificationParseError",
        e[e.PushNotificationReceived = 74] = "PushNotificationReceived",
        e[e.PushNotificationReceivedControl = 75] = "PushNotificationReceivedControl",
        e[e.PushNotificationSuppressed = 76] = "PushNotificationSuppressed",
        e[e.PushNotificationTap = 77] = "PushNotificationTap",
        e[e.PushNotificationTimestampParsingError = 78] = "PushNotificationTimestampParsingError",
        e[e.PushNotificationWrongLanguage = 79] = "PushNotificationWrongLanguage",
        e[e.SignoutSurveyDismiss = 80] = "SignoutSurveyDismiss",
        e[e.SkypeIdBlocked = 81] = "SkypeIdBlocked",
        e[e.UnableToResolveUserProfile = 82] = "UnableToResolveUserProfile",
        e[e.UnexpectedValidationResult = 83] = "UnexpectedValidationResult",
        e[e.UnsupportedPersistencyMode = 84] = "UnsupportedPersistencyMode",
        e[e.UnsupportedValidUntilTimestamp = 85] = "UnsupportedValidUntilTimestamp",
        e[e.UntrustedActionUri = 86] = "UntrustedActionUri",
        e[e.UntrustedLinkUri = 87] = "UntrustedLinkUri"
    }(d = t.EngagementTelemetryEventType || (t.EngagementTelemetryEventType = {})),
    function(e) {
        e[e.OriginInvalid = 1] = "OriginInvalid",
        e[e.OriginValid = 2] = "OriginValid",
        e[e.Invalid = 3] = "Invalid",
        e[e.WebViewNotReady = 4] = "WebViewNotReady",
        e[e.Sent = 5] = "Sent"
    }(u = t.EngagementPostMessageReason || (t.EngagementPostMessageReason = {})),
    function(e) {
        e[e.BotMessageServiceConvSyncFailBricked = 1] = "BotMessageServiceConvSyncFailBricked",
        e[e.BotMessageServiceConvSyncFailNoMeta = 2] = "BotMessageServiceConvSyncFailNoMeta",
        e[e.BotMessageServiceConvSyncFailNoProgress = 3] = "BotMessageServiceConvSyncFailNoProgress",
        e[e.BotMessageServiceUnsupportedMessageType = 4] = "BotMessageServiceUnsupportedMessageType",
        e[e.BotMessageServiceWaitingMessage = 5] = "BotMessageServiceWaitingMessage",
        e[e.ChatServiceBlockedMessage = 6] = "ChatServiceBlockedMessage",
        e[e.InvalidPayload = 7] = "InvalidPayload",
        e[e.TelemetryObjectNotFound = 8] = "TelemetryObjectNotFound",
        e[e.InvalidPlatformListInPayload = 9] = "InvalidPlatformListInPayload",
        e[e.InvalidClientVersionInPayload = 10] = "InvalidClientVersionInPayload"
    }(g = t.EngagementMessageTelemetryEventType || (t.EngagementMessageTelemetryEventType = {})),
    function(e) {
        e[e.Notification = 1] = "Notification",
        e[e.PopCard = 2] = "PopCard",
        e[e.PopCardToast = 3] = "PopCardToast",
        e[e.QuietPopCard = 4] = "QuietPopCard",
        e[e.WebView = 5] = "WebView"
    }(h = t.ActionOrigin || (t.ActionOrigin = {})),
    function(e) {
        e[e.ApplicationActive = 1] = "ApplicationActive",
        e[e.CallInProgress = 2] = "CallInProgress",
        e[e.CoachMarkShown = 3] = "CoachMarkShown",
        e[e.GenericModalOpened = 4] = "GenericModalOpened",
        e[e.HubNotVisible = 5] = "HubNotVisible",
        e[e.NotOnLandingPage = 6] = "NotOnLandingPage",
        e[e.OnboardingInProgress = 7] = "OnboardingInProgress",
        e[e.PopCardModalOpen = 8] = "PopCardModalOpen",
        e[e.PopCardToggled = 9] = "PopCardToggled",
        e[e.QuietCard = 10] = "QuietCard",
        e[e.UserStatusBusy = 11] = "UserStatusBusy",
        e[e.WebViewOpened = 12] = "WebViewOpened",
        e[e.SurfaceDisabled = 13] = "SurfaceDisabled",
        e[e.EngagementTypeFilterEnabled = 14] = "EngagementTypeFilterEnabled"
    }(p = t.SuppressReason || (t.SuppressReason = {})),
    function(e) {
        e[e.TipsAndTricks = 0] = "TipsAndTricks",
        e[e.TipsAndTricksPush = 1] = "TipsAndTricksPush",
        e[e.EmailMissedMessageReminders = 2] = "EmailMissedMessageReminders",
        e[e.EmailMissedCallReminders = 3] = "EmailMissedCallReminders"
    }(m = t.EngagementSettingsSource || (t.EngagementSettingsSource = {})),
    function(e) {
        e[e.TPUM = 1] = "TPUM",
        e[e.InApp = 2] = "InApp"
    }(S = t.EngagementPushSource || (t.EngagementPushSource = {})),
    function(e) {
        e[e.OpenDialog = 0] = "OpenDialog",
        e[e.CloseDialog = 1] = "CloseDialog",
        e[e.DismissDialog = 2] = "DismissDialog"
    }(C = t.EngagementShareableContentAction || (t.EngagementShareableContentAction = {}));
    class y extends l.TelemetryEventBase {
        constructor(e) {
            super(),
            this.props = e
        }
        getAttributes() {
            let e = super.getAttributes();
            if (e.Action = d[this.props.eventType] || "UnknownAction",
            e.CampaignId = this.props.campaignId || "UnknownCampaign",
            e.IsOfflineTargeted = this.props.offlineTargeted || !1,
            this.props.actionOrigin && (e.ActionOrigin = h[this.props.actionOrigin]),
            this.props.campaignTrackId && (e.CampaignTrackId = this.props.campaignTrackId),
            this.props.contentLanguage && (e.ContentLanguage = this.props.contentLanguage),
            this.props.contentPlatforms && (e.ContentPlatforms = s.chain(this.props.contentPlatforms, s.map(e=>a.EngagementPlatformType[e]), s.sortBy(), s.uniq(), s.join(","))),
            this.props.suppressReason && (e.SuppressReason = p[this.props.suppressReason]),
            this.props.deliveryTime && this.props.sentTime && (e.DeliveryTime = this.props.deliveryTime,
            e.SentTime = this.props.sentTime,
            e.DeliveryDuration = this.props.deliveryTime - this.props.sentTime),
            o.isNumber(this.props.buttonIndex) && (e.ButtonIndex = this.props.buttonIndex),
            this.props.messageId && (e.MessageId = this.props.messageId),
            this.props.messageCorrelationId && (e.MessageCorrelationId = this.props.messageCorrelationId),
            this.props.actionUri && (e.ActionUri = this.props.actionUri),
            !o.isUndefined(this.props.userStatus)) {
                const t = r.encodeStatus(this.props.userStatus);
                t && (e.UserStatus = t)
            }
            if (this.props.hubLocation && (e.HubLocation = this.props.hubLocation),
            this.props.engagementTelemetryAttributes) {
                const t = "T_";
                o.each(this.props.engagementTelemetryAttributes, (i,n)=>{
                    e[t + o.upperFirst(n)] = i
                }
                )
            }
            return this.props.postMessageReason && (e.PostMessageReason = u[this.props.postMessageReason]),
            this.props.delayForPeriod && (e.DelayForPeriod = this.props.delayForPeriod),
            e
        }
    }
    t.EngagementTelemetryEventBase = y;
    class f extends l.TelemetryEventBase {
        constructor(e) {
            super(),
            this.props = e
        }
        getEventName() {
            return "engagement_message"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = g[this.props.eventType] || "UnknownAction",
            this.props.messageType && (e.MessageType = this.props.messageType),
            this.props.messageCorrelationId && (e.MessageCorrelationId = this.props.messageCorrelationId),
            this.props.messageId && (e.MessageId = this.props.messageId),
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            if (this.props.conversationId) {
                const t = c.getTrackableConversationId(this.props.conversationId);
                t && (e.ConversationId = {
                    value: t,
                    piiKind: n.AWTPiiKind.Identity
                })
            }
            return e
        }
    }
    t.EngagementMessageTelemetryEvent = f;
    t.EngagementFeedbackTelemetryEvent = class extends y {
        getEventName() {
            return "engagement_feedback_event"
        }
    }
    ;
    t.EngagementPopCardTelemetryEvent = class extends y {
        getEventName() {
            return "engagement_popcard_event"
        }
    }
    ;
    t.EngagementNoticeTelemetryEvent = class extends y {
        getEventName() {
            return "engagement_notice_event"
        }
    }
    ;
    t.EngagementPushNotificationTelemetryEvent = class extends y {
        constructor(e) {
            super(e),
            this.props = e
        }
        getEventName() {
            return "engagement_push_notification_event"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Source = this.props.source ? S[this.props.source] : S[S.TPUM],
            this.props.lastAppActiveTimeTimestamp && (e.LastAppActiveTimeTimestamp = this.props.lastAppActiveTimeTimestamp),
            this.props.lastActivityCheckTimestamp && (e.LastActivityCheckTimestamp = this.props.lastActivityCheckTimestamp),
            this.props.lastActivityCheckParsedTimestamp && (e.LastActivityCheckParsedTimestamp = this.props.lastActivityCheckParsedTimestamp),
            e
        }
        getLoggedOutSendingPolicy() {
            return l.TelemetryEventLoggedOutPolicy.SendNow
        }
    }
    ;
    class _ extends l.TelemetryEventBase {
        constructor(e) {
            super(),
            this.props = e
        }
        getEventName() {
            return "engagement_settings"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Source = m[this.props.source],
            e.IsToggled = this.props.isToggled,
            e
        }
    }
    t.EngagementSettingsTelemetryEvent = _;
    class b extends l.TelemetryEventBase {
        constructor(e) {
            super(),
            this.props = e
        }
        getEventName() {
            return "engagement_shareable_content"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = C[this.props.action],
            e.CampaignId = this.props.campaignId,
            e.TextInputEnabled = this.props.wasTextMsgEnabled,
            e.CarouselEnabled = this.props.wasCarouselEnabled,
            e.OneClickSendEnabled = this.props.wasOneClickSendEnabled,
            e.HasShareButton = !!this.props.hasShareButton,
            e.ContentReshare = !!this.props.isContentReshare,
            e.SharesCount = this.props.shareCounts || 0,
            e.HasUsedSearch = !!this.props.hasUsedSearch,
            e.HasUsedCarousel = !!this.props.hasUsedCarousel,
            e.HasSharedTextMsg = !!this.props.hasSharedTextMsg,
            e.CardsShareCount = this.props.cardsShareCount || 0,
            this.props.cardsShared && (e.CardsShared = o.toString(o.sortBy(this.props.cardsShared))),
            e
        }
    }
    t.EngagementShareableContentEvent = b
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(6)
      , r = i(48)
      , a = i(2)
      , l = i(3)
      , c = i(74)
      , d = i(21);
    class u {
        constructor() {
            this._set = !1
        }
        reset() {
            this._set = !1,
            this._value = void 0,
            this._defer = void 0
        }
        internal_set(e) {
            if (this._value = e,
            this._set = !0,
            this._defer) {
                const e = this._defer;
                this._defer = void 0,
                e.resolve(void 0)
            }
        }
        get() {
            return this._value
        }
        waitUntilSet() {
            return this._set ? o.Resolved() : (this._defer || (this._defer = o.Defer()),
            this._defer.promise())
        }
    }
    t.default = new class {
        constructor() {
            this._cache = {},
            this._initialized = !1,
            this.CallingFingerprintId = new u,
            this.CallingNodeId = new u,
            this.InternalCallingRegistrationId = new u,
            this.ChatServiceSessionInfo = new u,
            this.EdfRegistrationId = new u,
            this._saveToDB = e=>(l.log(a.LogTraceArea.GenericUnsafe, this._initialized ? "Saving SharedId cache to db." : "SharedId updated, will be saved on startup"),
            this._initialized ? c.default.putData(r.InternalKeys.SharedIdServiceCache, this._cache, e) : o.Resolved()),
            this._saveToDbDebounced = n.debounce(this._saveToDB, 100),
            d.RegisterStartupable(this, "SharedIdService", [c.default])
        }
        startup() {
            let e, t = !1;
            s.default.getConfigSettingsNoSubscription().calling.disableSharedIdCache || (e = c.default.getDataExclusive(r.InternalKeys.SharedIdServiceCache) || {},
            l.log(a.LogTraceArea.GenericUnsafe, n.isEmpty(e) ? "No SharedId cache found" : "Loaded SharedId cache from db."),
            n.some(this._cache) && (l.log(a.LogTraceArea.GenericUnsafe, "Merging SharedId cache"),
            e = n.merge(e, this._cache),
            t = !0),
            this._cache = e),
            this._cache.callingFingerprintId && this.CallingFingerprintId.internal_set(this._cache.callingFingerprintId.value),
            this._cache.callingNodeId && this.CallingNodeId.internal_set(this._cache.callingNodeId.value),
            this._cache.internalCallingRegistrationId && this.InternalCallingRegistrationId.internal_set(this._cache.internalCallingRegistrationId.value),
            this._cache.pnhRegistrationId && this.EdfRegistrationId.internal_set(this._cache.pnhRegistrationId.value),
            this._cache.chatServiceSessionInfo && this.ChatServiceSessionInfo.internal_set(this._cache.chatServiceSessionInfo.value),
            this._initialized = !0;
            let i = !1;
            if (!this._cache.chatServiceSessionInfo) {
                const e = c.default.getDataExclusive(r.InternalKeys.ChatServiceSessionInfo_deprecated);
                e && (i = !0,
                this._cache.chatServiceSessionInfo = {
                    value: e
                },
                this.ChatServiceSessionInfo.internal_set(e))
            }
            return i || t ? (this._saveToDbDebounced.cancel(),
            r.default.openTransaction([r.Stores.InternalData], !0).then(e=>(this._saveToDbDebounced.cancel(),
            o.all([this._saveToDB(e), i ? c.default.deleteKeys([r.InternalKeys.ChatServiceSessionInfo_deprecated], e) : void 0]).then(()=>{
                e.markCompleted()
            }
            )))) : o.Resolved()
        }
        setCallingFingerprintId(e) {
            this._cache.callingFingerprintId && e === this._cache.callingFingerprintId.value || (this.CallingFingerprintId.internal_set(e),
            this._cache.callingFingerprintId = {
                value: e
            },
            this._saveToDbDebounced())
        }
        setCallingNodeId(e) {
            this._cache.callingNodeId && e === this._cache.callingNodeId.value || (this.CallingNodeId.internal_set(e),
            this._cache.callingNodeId = {
                value: e
            },
            this._saveToDbDebounced())
        }
        setInternalCallingRegistrationId(e) {
            this._cache.internalCallingRegistrationId && e === this._cache.internalCallingRegistrationId.value || (this.InternalCallingRegistrationId.internal_set(e),
            this._cache.internalCallingRegistrationId = {
                value: e
            },
            this._saveToDbDebounced())
        }
        setEdfRegistrationId(e) {
            this._cache.pnhRegistrationId && e === this._cache.pnhRegistrationId.value || (this.EdfRegistrationId.internal_set(e),
            this._cache.pnhRegistrationId = {
                value: e
            },
            this._saveToDbDebounced())
        }
        setChatServiceSessionInfo(e) {
            this._cache.chatServiceSessionInfo && e === this._cache.chatServiceSessionInfo.value || (this.ChatServiceSessionInfo.internal_set(e),
            this._cache.chatServiceSessionInfo = {
                value: e
            },
            this._saveToDbDebounced())
        }
        deleteIds(e, t) {
            return e.callingNodeId && (this.CallingNodeId.reset(),
            this._cache.callingNodeId = void 0),
            e.callingFingerprintId && (this.CallingFingerprintId.reset(),
            this._cache.callingFingerprintId = void 0),
            e.internalCallingRegistrationId && (this.InternalCallingRegistrationId.reset(),
            this._cache.internalCallingRegistrationId = void 0),
            e.edfRegistrationId && (this.EdfRegistrationId.reset(),
            this._cache.pnhRegistrationId = void 0),
            e.chatServiceSessionInfo && (this.ChatServiceSessionInfo.reset(),
            this._cache.chatServiceSessionInfo = void 0),
            t ? this._saveToDB() : o.Resolved(void 0)
        }
        test_getIds() {
            return {
                callingNodeId: this.CallingNodeId,
                callingFingerprintId: this.CallingFingerprintId,
                internalCallingRegistrationId: this.InternalCallingRegistrationId,
                edfRegistrationId: this.EdfRegistrationId,
                chatServiceSessionInfo: this.ChatServiceSessionInfo
            }
        }
        test_reset(e=!1) {
            this.deleteIds({
                callingFingerprintId: !0,
                callingNodeId: !0,
                internalCallingRegistrationId: !0,
                edfRegistrationId: !0,
                chatServiceSessionInfo: !0
            }, e),
            this._initialized = !1
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(2)
      , r = i(3)
      , a = i(20)
      , l = i(19);
    const c = new class {
        constructor() {
            this._logoutInfos = []
        }
        registerForLogout(e, t) {
            n.find(this._logoutInfos, t=>t.logoutable === e) || this._logoutInfos.push({
                logoutable: e,
                name: t
            })
        }
        logoutAll(e, t, i) {
            if (!a.hasSkypeId())
                return o.Resolved();
            if (a.hasLogoutStarted())
                return o.Rejected("Cannot call logout twice");
            a.logoutUser(),
            r.log(s.LogTraceArea.GenericUnsafe, "LogoutContainer: logoutAll causeId: " + e);
            const c = this._logoutInfos.length;
            return o.all(n.map(this._logoutInfos, (n,o)=>(r.log(s.LogTraceArea.GenericUnsafe, "LogoutContainer: Logging out " + n.name + " causeId: " + e + " [" + (o + 1) + "/" + c + "]"),
            n.logoutable.logout(e, t, i).catch(e=>{
                r.log(s.LogTraceArea.GenericUnsafe, "LogoutContainer: " + n.name + " errored: " + l.errorAsString(e))
            }
            ).finally(()=>{
                r.log(s.LogTraceArea.GenericUnsafe, "LogoutContainer: " + n.name + " logout complete [" + (o + 1) + "/" + c + "]")
            }
            )))).then(n.noop)
        }
        test_getRegisteredLogoutable(e) {
            return n.find(this._logoutInfos, t=>t.logoutable === e)
        }
    }
    ;
    t.default = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(57)
      , r = i(16)
      , a = i(10)
      , l = i(30)
      , c = i(2)
      , d = i(3)
      , u = i(565)
      , g = i(55)
      , h = i(97)
      , p = i(282)
      , m = i(34)
      , S = i(107)
      , C = i(9)
      , y = i(388)
      , f = [g.MainStageNavViewMode.DesktopContentPanel, g.MainStageNavViewMode.Call];
    class _ {
        static conversationNavigationDirection(e) {
            return e && (e instanceof g.MobileHubNavigationContext || e instanceof g.AlertsHubNavigationContext || e instanceof g.SearchNavigationContext || e instanceof g.ContactsPanelV2NavigationContext || e instanceof g.ConversationParticipantsNavigationContext || e instanceof g.CreateConversationNavigationContext || e instanceof g.ActiveNowPanelNavigationContext || e instanceof g.DiscoverPeoplePanelNavigationContext || e instanceof g.ArchivedConversationsPanelNavigationContext) ? S.StackNavigationDirection.Push : S.StackNavigationDirection.Present
        }
        static convertCompositeNavContextToStackNavContextStack(e) {
            d.log(c.LogTraceArea.Navigation, "NavigationUtils._convertCompositeNavContextToStackNavContextStack");
            const t = []
              , i = new g.SimpleSplitNavigationContext({});
            d.log(c.LogTraceArea.Navigation, "NavigationUtils: convert to stack nav, adding hub");
            const o = new g.MobileHubNavigationContext({
                hubTab: g.HubTab.Recents
            });
            if (t.push(o),
            !e)
                return i.setNavStack(t),
                i;
            if (e) {
                const i = e.getLeftNavigationContext();
                if (i) {
                    const e = i.getConversationsListContext();
                    o.state.hubTab = e.state.currentTab
                }
                const s = n.last(e.getNavStack());
                if (s instanceof g.DesktopContentPanelNavigationContext) {
                    const e = _._convertDesktopContentContext(s);
                    e && t.push(e)
                }
            }
            return i.setNavStack(t),
            i
        }
        static convertStackNavContextToCompositeSplitNavContext(e) {
            const t = C.newCauseId();
            d.log(c.LogTraceArea.Navigation, "NavigationUtils.convertStackNavContextToCompositeSplitNavContext causeId: " + t);
            let i, o = _.createRootCompositeSplitViewContext(t), s = !1;
            const r = e ? e.getNavStack() : [];
            if (!s && n.includes(f, g.MainStageNavViewMode.Call)) {
                const e = n.findLast(r, e=>e instanceof g.CallNavigationContext);
                i = e ? e.state.conversationId : void 0,
                e && (d.log(c.LogTraceArea.Navigation, "NavigationUtils: convert to composite nav, adding Call, callId: " + e.state.callId),
                o.setNavStack([e]),
                s = !0)
            }
            if (!s && n.includes(f, g.MainStageNavViewMode.DesktopContentPanel)) {
                const e = n.findLast(r, e=>e instanceof g.MobileContentPanelNavigationContext)
                  , t = e ? e.getConversationContext() : void 0;
                if (i = t ? t.state.conversationId : void 0,
                t && i) {
                    d.log(c.LogTraceArea.Navigation, "NavigationUtils: convert to composite nav, adding DesktopContentPanel, conversationId: " + m.mriOrId(i));
                    const e = new g.DesktopContentPanelNavigationContext({});
                    e.setConversationContext(t.state),
                    o.setNavStack([e]),
                    s = !0
                }
            }
            if (!s) {
                d.log(c.LogTraceArea.Navigation, "NavigationUtils: convert to composite nav, adding WelcomeScreen");
                const e = new g.WelcomeScreenContext({});
                o.setNavStack([e])
            }
            const a = new g.LeftNavigationViewContext({
                viewMode: g.LeftNavViewMode.None
            });
            this.setLeftNavViewMode(a, this.defaultLeftNavViewMode(void 0, n.last(o.getNavStack())), t),
            o.setMasterContext(a);
            let l = g.HubTab.Recents;
            const u = n.findLast(r, e=>e instanceof g.MobileHubNavigationContext);
            u && !n.isUndefined(u.state.hubTab) && (l = u.state.hubTab);
            const h = a.getConversationsListContext();
            return h.state.currentTab = l,
            h.state.selectedConversationId = i,
            o
        }
        static createRootCompositeSplitViewContext(e) {
            d.log(c.LogTraceArea.Navigation, "NavigationUtils.createRootCompositeSplitViewContext causeId: " + e);
            const t = new g.RootCompositeSplitViewContext({})
              , i = t.getLeftNavigationContext();
            return i && _.setLeftNavViewMode(i, i.state.viewMode, e),
            t
        }
        static defaultLeftNavViewMode(e, t, i) {
            return (t instanceof g.CallNavigationContext || t instanceof u.MeetNowNavigationContext) && !i ? g.LeftNavViewMode.None : g.LeftNavViewMode.Recents
        }
        static deriveViewModeFromRightNavContext(e) {
            return e ? e instanceof g.GalleryNavigationContext ? g.RightSidebarViewMode.Gallery : e instanceof g.SendMoneyPanelNavigationContext ? g.RightSidebarViewMode.SendMoney : e instanceof g.FindPanelNavigationContext ? g.RightSidebarViewMode.Find : e instanceof g.InAppBrowserNavigationContext ? g.RightSidebarViewMode.InAppBrowser : g.RightSidebarViewMode.Other : g.RightSidebarViewMode.None
        }
        static shouldNavigationContextPartReplaceExisting(e, t) {
            if (e instanceof g.MobileHubNavigationContext && t instanceof g.MobileHubNavigationContext)
                return !0;
            if (e instanceof g.MobileContentPanelNavigationContext && t instanceof g.MobileContentPanelNavigationContext) {
                if (t.state.shouldReplaceCurrentContext)
                    return !0;
                const i = e.getConversationContext()
                  , n = t.getConversationContext();
                if ((i ? i.state.conversationId : void 0) === (n ? n.state.conversationId : void 0))
                    return !0
            }
            return e instanceof g.CallNavigationContext && t instanceof g.CallNavigationContext && e.state.conversationMri === t.state.conversationMri || e instanceof g.DetailsNavigationContext && t instanceof g.DetailsNavigationContext && e.state.mri === t.state.mri
        }
        static considerNavContextsEqual(e, t) {
            if (e instanceof g.MobileHubNavigationContext && t instanceof g.MobileHubNavigationContext)
                return !0;
            if (e instanceof g.MobileContentPanelNavigationContext && t instanceof g.MobileContentPanelNavigationContext) {
                const i = t.getConversationContext()
                  , n = e.getConversationContext();
                if (i && n && n.state.conversationId === i.state.conversationId && n.state.scrollToTimestamp === i.state.scrollToTimestamp && n.state.forceRefreshFocus === i.state.forceRefreshFocus && n.state.selectedNumberForSMS === i.state.selectedNumberForSMS)
                    return d.log(c.LogTraceArea.Navigation, "NavigationUtils.considerNavContextsEqual found matching MobileContentPanelNavigationContext conversationId: " + m.mriOrId(n.state.conversationId)),
                    !0
            }
            return e instanceof g.CallNavigationContext && t instanceof g.CallNavigationContext && e.state.callId === t.state.callId ? (d.log(c.LogTraceArea.Navigation, "NavigationUtils.considerNavContextsEqual found matching CallNavigationContext callId: " + e.state.callId),
            !0) : t.id === e.id
        }
        static shouldResetToHubAndConversation(e, t) {
            return e instanceof g.CallNavigationContext && t instanceof g.MobileContentPanelNavigationContext
        }
        static stackNavigationDirection(e, t) {
            return p.default.transitionHintForPopCard() ? S.StackNavigationDirection.Present : n.isUndefined(e.state.navigationDirection) ? e instanceof g.CaptureComboNavigationContext || e instanceof g.ConversationMediaViewerPanelContext || e instanceof g.InAppBrowserNavigationContext || e instanceof g.MediaPickerNavigationContext || e instanceof g.PSTNCountrySelectorNavigationContext || e instanceof g.SkypeNumberCountryAreaSelectorNavigationContext || e instanceof g.SkypeNumberPrefixSelectorNavigationContext || e instanceof g.SearchNavigationContext || e instanceof g.AlertsHubNavigationContext || e instanceof g.QuickCallNavigationContext ? S.StackNavigationDirection.Present : e instanceof g.MobileContentPanelNavigationContext ? _.conversationNavigationDirection(t) : e instanceof g.SyncAddressBookContext || e instanceof g.PeopleYouMayKnowNoticeContext || e instanceof g.ThemeContext ? e.state.isFirstLogin ? S.StackNavigationDirection.Push : S.StackNavigationDirection.Present : e instanceof g.ConversationParticipantsNavigationContext && t && t instanceof g.MobileHubNavigationContext || e instanceof g.CreateConversationNavigationContext && t && t instanceof g.MobileHubNavigationContext ? S.StackNavigationDirection.Present : S.StackNavigationDirection.Push : e.state.navigationDirection
        }
        static mainStageViewModeForNavContext(e) {
            return e instanceof g.WelcomeScreenContext ? g.MainStageNavViewMode.WelcomeScreen : e instanceof g.DesktopContentPanelNavigationContext ? g.MainStageNavViewMode.DesktopContentPanel : e instanceof g.CallNavigationContext ? g.MainStageNavViewMode.Call : e instanceof g.ForcedUpgradeContext ? g.MainStageNavViewMode.ForcedUpgradeScreen : void 0
        }
        static maybeUpdateDesktopNavContext(e, t) {
            d.log(c.LogTraceArea.Navigation, "NavigationUtils.maybeUpdateDesktopNavContext, causeId " + t);
            let i = e;
            if (e instanceof g.ConversationNavigationContext) {
                d.log(c.LogTraceArea.Navigation, "NavigationUtils.maybeUpdateDesktopNavContext: updating desktop conversation context, causeId " + t);
                const n = new g.DesktopContentPanelNavigationContext({});
                n.setConversationContext(e.state),
                i = n
            }
            return i
        }
        static rightSideBarNavigatorId(e) {
            return e === a.MainRootViewId ? a.MainRootViewId : h.RightSidebarNavigatorPrefix + e
        }
        static mainContentNavigatorIdForComponentContext(e) {
            const t = this.rootViewIdForComponentContext(e);
            return this.mainContentNavigatorIdForRootViewId(t)
        }
        static rootViewIdForComponentContext(e) {
            return e && e.rootViewId ? e.rootViewId : a.MainRootViewId
        }
        static rightSideBarNavigatorIdForComponentContext(e) {
            const t = this.rootViewIdForComponentContext(e);
            return this.rightSideBarNavigatorIdForRootViewId(t)
        }
        static rightSideBarNavigatorIdForRootViewId(e) {
            let t = S.StackNavigatorId.DesktopSidebar;
            if (y.default.isSplitViewSupported()) {
                const i = _.rightSideBarNavigatorId(e);
                i && (t = i)
            }
            return t
        }
        static modalNavigatorIdForComponentContext(e) {
            const t = this.rootViewIdForComponentContext(e);
            return this.modalNavigatorIdForRootViewId(t)
        }
        static modalNavigatorIdForRootViewId(e) {
            return e !== a.MainRootViewId && e.startsWith(h.ModalNavigatorPrefix) ? e : h.ModalNavigatorPrefix + e
        }
        static mainContentNavigatorIdForRootViewId(e) {
            let t = S.StackNavigatorId.DesktopContent;
            if (y.default.isSplitViewSupported()) {
                const i = e !== a.MainRootViewId ? h.MainContentNavigatorPrefix + e : void 0;
                i && (t = i)
            }
            return t
        }
        static searchViewModeContext(e) {
            let t = g.LeftNavViewMode.Recents;
            return e.state.viewMode && e.state.viewMode !== g.LeftNavViewMode.ConversationInCall && (t = e.state.viewMode),
            t
        }
        static getValidConversationIdForNavigation(e, t, i=c.NavigationConversationOrigin.Unknown) {
            if (d.log(c.LogTraceArea.Navigation, "NavigationUtils: getValidConversationIdForNavigation, desiredConvId = " + m.mriOrId(e) + " causeId: " + t + " origin: " + i),
            e && r.isPhoneMri(e))
                return s.default.ensureConversationLoadedOrFaked(e, c.ConversationFakedOrigin.Navigation).then(()=>e);
            let n;
            return n = e ? r.isOneOnOneConversation(e) || r.isBookmarkConversation(e) ? s.default.ensureConversationLoadedOrFaked(e, c.ConversationFakedOrigin.Navigation).then(()=>e) : s.default.ensureConversationLoaded(e).then(()=>e) : o.Resolved(void 0),
            n.then(e=>{
                if (e && l.default.ableToViewConversation(e))
                    return d.log(c.LogTraceArea.Navigation, "NavigationUtils: ableToViewConversation, navConvId = " + m.mriOrId(e) + " causeId: " + t),
                    e;
                d.log(c.LogTraceArea.Navigation, "NavigationUtils: NOT ableToViewConversation, navConvId = " + m.mriOrId(e) + " causeId: " + t),
                d.log(c.LogTraceArea.Navigation, "NavigationUtils: no valid conversationId, causeId: " + t)
            }
            )
        }
        static baseSettingsGroup() {
            return g.SettingsGroup.AccountAndProfile
        }
        static setEligibleLeftNavViewModes(e, t) {
            const i = C.newCauseId();
            d.log(c.LogTraceArea.Navigation, "NavigationUtils.setEligibleLeftNavViewModes viewModes: " + e + " causeId: " + i),
            this._eligibleLeftNavViewModes = e,
            t && this.setLeftNavViewMode(t, t.state.viewMode, i)
        }
        static setLeftNavViewMode(e, t, i) {
            if (this._eligibleLeftNavViewModes) {
                const o = n.includes(this._eligibleLeftNavViewModes, t) ? t : g.LeftNavViewMode.None;
                d.log(c.LogTraceArea.Navigation, "NavigationUtils.setLeftNavViewMode viewMode: " + t + " filteredViewMode: " + o + " causeId: " + i),
                e.setViewMode(o)
            } else
                d.log(c.LogTraceArea.Navigation, "NavigationUtils.setLeftNavViewMode viewMode: " + t + " causeId: " + i),
                e.setViewMode(t);
            return h.CompositeNavigationType.LeftSidebar
        }
        static navigationTypesToTriggerKeys(e) {
            return n.uniq(e.map(e=>{
                switch (e) {
                case h.CompositeNavigationType.Default:
                case h.CompositeNavigationType.MainContent:
                case h.CompositeNavigationType.LeftSidebar:
                    return h.TriggerKeys.NavigationAndTabs;
                case h.CompositeNavigationType.RightSidebar:
                    return h.TriggerKeys.DesktopSidebar;
                case h.CompositeNavigationType.Modal:
                    return h.TriggerKeys.ModalNavigation
                }
            }
            ))
        }
        static _convertDesktopContentContext(e) {
            const t = e.getConversationContext();
            if (t && t.state.conversationId) {
                d.log(c.LogTraceArea.Navigation, "NavigationUtils: convert to stack nav, adding conversation: " + m.mriOrId(t.state.conversationId));
                const e = new g.MobileContentPanelNavigationContext({});
                return e.setConversationContext(t.state),
                e
            }
        }
    }
    t.default = _
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(117)
      , s = i(86)
      , r = i(0)
      , a = i(189)
      , l = i(2)
      , c = i(27)
      , d = i(3)
      , u = i(5)
      , g = (i(4),
    i(54))
      , h = i(8)
      , p = i(11)
      , m = i(12)
      , S = i(135)
      , C = i(9);
    var y, f;
    !function(e) {
        e[e.Default = 0] = "Default",
        e[e.Small = 1] = "Small",
        e[e.Tiny = 2] = "Tiny",
        e[e.FAB = 3] = "FAB"
    }(y = t.ActionButtonSize || (t.ActionButtonSize = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.IconOpacity = 1] = "IconOpacity"
    }(f = t.ActionButtonAnimationType || (t.ActionButtonAnimationType = {}));
    const _ = p.IconSize.size24
      , b = p.IconSize.size20
      , v = p.IconSize.size16
      , T = u.lazyProperties({
        container: ()=>r.Styles.createViewStyle({
            height: 60,
            width: 60,
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible"
        }),
        containerSmall: ()=>r.Styles.createViewStyle({
            height: 44,
            width: 44,
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible"
        }),
        containerTiny: ()=>r.Styles.createViewStyle({
            height: 44,
            width: 44,
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible"
        }),
        containerFAB: ()=>r.Styles.createViewStyle({
            height: 64,
            width: 64,
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible"
        }),
        backgroundView: ()=>r.Styles.createViewStyle({
            position: "absolute",
            height: 60,
            width: 60,
            borderRadius: 30,
            top: 0,
            left: 0,
            alignItems: "center",
            justifyContent: "center"
        }),
        backgroundViewSmall: ()=>r.Styles.createViewStyle({
            position: "absolute",
            height: 40,
            width: 40,
            borderRadius: 20,
            top: 2,
            left: 2,
            alignItems: "center",
            justifyContent: "center"
        }),
        backgroundViewTiny: ()=>r.Styles.createViewStyle({
            position: "absolute",
            height: 30,
            width: 30,
            borderRadius: 15,
            top: 7,
            left: 7,
            alignItems: "center",
            justifyContent: "center"
        }),
        backgroundViewFAB: ()=>r.Styles.createViewStyle({
            position: "absolute",
            height: 56,
            width: 56,
            borderRadius: 28,
            top: 4,
            left: 4,
            alignItems: "center",
            justifyContent: "center"
        }),
        thickBorder: ()=>r.Styles.createViewStyle({
            borderWidth: 2
        }),
        backgroundNoBorder: ()=>r.Styles.createViewStyle({
            borderColor: h.Color.transparent,
            borderWidth: 0
        }),
        iconViewDisabled: ()=>r.Styles.createTextStyle({
            opacity: .5
        }),
        sendIconView: ()=>r.Styles.createTextStyle({
            marginLeft: 2
        }),
        sendIconViewRTL: ()=>r.Styles.createTextStyle({
            marginRight: 2
        }),
        flippedView: ()=>r.Styles.createViewStyle({
            transform: [{
                scaleX: -1
            }]
        }),
        shadow: ()=>r.Styles.createViewStyle({
            overflow: "visible",
            shadowColor: h.Color.black,
            shadowOpacity: .25,
            shadowRadius: 2,
            shadowOffset: {
                height: 2,
                width: 0
            },
            elevation: 2
        })
    });
    class P extends m.default {
        constructor() {
            super(...arguments),
            this._pressed = !1,
            this._animatedIconOpacityAnimatedValue = new r.Animated.Value(1),
            this._animatedIconOpacityAnimatedStyle = r.Styles.createAnimatedViewStyle({
                opacity: this._animatedIconOpacityAnimatedValue
            }),
            this._onHoverStart = e=>{
                this.setState({
                    isHovering: !0
                }),
                this._intOnPressIn(!1, ()=>{
                    this.props.onHoverStart && this.props.onHoverStart(e)
                }
                )
            }
            ,
            this._onHoverEnd = e=>{
                this.setState({
                    isHovering: !1
                }),
                this._intOnPressOut(!0),
                this.props.onHoverEnd && this.props.onHoverEnd(e)
            }
            ,
            this._onPressIn = ()=>{
                this._intOnPressIn(!0)
            }
            ,
            this._onPressOut = ()=>{
                this._intOnPressOut(!0)
            }
            ,
            this._onButtonRef = e=>{
                this._button = e || void 0
            }
            ,
            this._onAnimatedViewRef = e=>{
                this._animatedView = e || void 0
            }
        }
        _buildState(e, t) {
            const i = {
                gradientColors: e.backgroundColor ? void 0 : e.userColor ? a.gradientColorsForColorInfo(e.userColor) : g.getGradientColors()
            };
            return t && (i.isHovering = !1),
            i
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.animateOnMount && this._internalUpdateButton(1, 1)
        }
        _intOnPressIn(e, t) {
            this.props.disabled || (this._updateButton(!0, e),
            this._pressed = !0,
            t && t())
        }
        _intOnPressOut(e) {
            this._pressed && (this._updateButton(!1, e),
            this._pressed = !1)
        }
        _updateButton(e, t=!0) {
            const i = this.props.animationType === f.IconOpacity
              , n = e ? .8 : 1
              , o = e && !i ? .9 : 1;
            this._internalUpdateButton(n, o, t)
        }
        _internalUpdateButton(e, t, i=!0) {
            if (!this._animatedView)
                return;
            this._animation && this._animation.stop();
            const n = this.props.animationType === f.IconOpacity;
            if (i) {
                const i = C.newCauseId();
                d.log(l.LogTraceArea.SXAnimated, "ActionButton._internalUpdateButton causeId: " + i);
                const o = this._animatedView.getAnimation({
                    scale: {
                        toValue: t,
                        easing: s.Easing.SkypeExpoInOut5,
                        duration: s.timing.Duration.Tiny
                    }
                }, i);
                this._animation = n ? s.parallel([o, s.timing.easeOut({
                    value: this._animatedIconOpacityAnimatedValue,
                    toValue: e,
                    duration: s.timing.Duration.Short,
                    useNativeDriver: !0
                })]) : o,
                this._animation.start(()=>{
                    delete this._animation
                }
                )
            }
        }
        requestFocus() {
            this._button && this._button.requestFocus()
        }
        _useAccessibleTheme() {
            return this.props.themeOverride ? S.isAccessibleTheme(this.props.themeOverride) : super._useAccessibleTheme()
        }
        render() {
            let e, t, i = [];
            switch (this.props.size) {
            case y.Small:
                t = [T.backgroundViewSmall],
                i.push(T.containerSmall),
                e = T.containerSmall;
                break;
            case y.Tiny:
                t = [T.backgroundViewTiny],
                i.push(T.containerTiny),
                e = T.containerTiny;
                break;
            case y.FAB:
                if (this.props.experimentalStyle) {
                    const n = r.Styles.createViewStyle({
                        backgroundColor: this._themeColors.primaryBackgroundColor,
                        borderWidth: 2,
                        borderColor: g.getGradientColorsNoSubscription()[0]
                    }, !1);
                    t = [T.backgroundViewFAB, T.shadow, n],
                    i.push(T.containerFAB),
                    e = T.containerFAB;
                    break
                }
                if (this.props.useSolidStyle) {
                    const n = r.Styles.createViewStyle({
                        backgroundColor: g.getPrimaryColorNoSubscription()
                    }, !1);
                    t = [T.backgroundViewFAB, T.shadow, n],
                    i.push(T.containerFAB),
                    e = T.containerFAB;
                    break
                }
                t = [T.backgroundViewFAB, T.shadow],
                i.push(T.containerFAB),
                e = T.containerFAB;
                break;
            default:
            case y.Default:
                t = [T.backgroundView],
                i.push(T.container),
                e = T.container
            }
            this.props.style && i.push(this.props.style);
            let a, l, d = [];
            a = this.props.iconSize ? this.props.iconSize : this.props.size === y.Tiny ? v : this.props.useSmallIcon ? b : _,
            l = this.props.iconColor ? this.props.iconColor : this.props.deselected ? this._themeColors.headerIconColor : this._useAccessibleTheme() ? this._themeColors.primaryBackgroundColor : h.Color.white,
            this.props.icon === p.SkypeIcon.Send && d.push(this.props.flipIcon ? T.sendIconViewRTL : T.sendIconView),
            this.props.iconOffset && d.push(r.Styles.createViewStyle({
                top: this.props.iconOffset.y,
                left: this.props.iconOffset.x
            }, !1)),
            this.props.experimentalStyle && (l = this._useAccessibleTheme() ? this._themeColors.primaryIconColor : g.getGradientColorsNoSubscription()[0]),
            this.props.disabled && 1 === this.props.disabledOpacity && d.push(T.iconViewDisabled);
            const u = {
                icon: this.props.icon,
                size: a,
                color: l
            };
            let m;
            m = this.props.animationType === f.IconOpacity ? r.createElement(c.AnimatedIconView, Object.assign({}, u, {
                style: [d, this._animatedIconOpacityAnimatedStyle]
            })) : r.createElement(c.IconView, Object.assign({}, u, {
                style: d
            })),
            this.props.flipIcon && (m = r.createElement(r.View, {
                style: T.flippedView
            }, m));
            const S = this.props.borderColor ? r.Styles.createViewStyle({
                borderColor: this.props.borderColor,
                borderWidth: 1
            }, !1) : void 0;
            let C;
            if (this.props.backgroundColor)
                C = r.createElement(r.View, {
                    style: [...t, S, r.Styles.createViewStyle({
                        backgroundColor: this.props.backgroundColor
                    }, !1)]
                }, m);
            else if (this.props.deselected)
                C = r.createElement(r.View, {
                    style: [...t, S, this._themeStyles.buttonBackgroundColorStyle]
                }, m);
            else if (this.props.experimentalStyle) {
                const e = [...t];
                this._useAccessibleTheme() && e.push(this._themeStyles.viewBorderStyle, this._themeStyles.primaryBackgroundColorStyle, T.thickBorder),
                C = r.createElement(r.View, {
                    style: e
                }, m)
            } else if (this._useAccessibleTheme()) {
                const e = [...t, this._themeStyles.primaryViewColorStyle, this._themeStyles.primaryBorderColorStyle, T.thickBorder];
                this.props.hideBorder && e.push(T.backgroundNoBorder),
                C = r.createElement(r.View, {
                    style: e
                }, m)
            } else if (this.props.useSolidStyle)
                C = r.createElement(r.View, {
                    style: t
                }, m);
            else if (this.state.gradientColors) {
                const e = [...t];
                if (this.state.isHovering) {
                    const e = r.Styles.createViewStyle({
                        backgroundColor: n.last(this.state.gradientColors)
                    }, !1);
                    C = r.createElement(r.View, {
                        style: [...t, e]
                    }, m)
                } else
                    C = r.createElement(o.GradientView, {
                        style: e,
                        colors: this.state.gradientColors,
                        direction: o.GradientDirection.BOTTOM_RIGHT
                    }, m)
            }
            let P = this.props.accessibilityTraits || [r.Types.AccessibilityTrait.Button]
              , A = this.props.accessibilityLabel || this.props.title;
            return this.props.disabled && (n.isArray(P) ? P.push(r.Types.AccessibilityTrait.Disabled) : P = [P, r.Types.AccessibilityTrait.Disabled]),
            r.createElement(s.View, {
                ref: this._onAnimatedViewRef,
                style: i,
                scale: this.props.animateOnMount ? .2 : void 0,
                opacity: this.props.animateOnMount ? .5 : void 0
            }, r.createElement(r.Button, {
                style: e,
                autoFocus: this.props.autoFocus,
                title: this.props.title,
                onPress: this.props.disabled ? void 0 : this.props.onPress,
                onFocus: this.props.disabled ? void 0 : this.props.onFocus,
                onPressIn: this._onPressIn,
                onPressOut: this._onPressOut,
                onHoverStart: this._onHoverStart,
                onHoverEnd: this._onHoverEnd,
                onLongPress: this.props.disabled ? void 0 : this.props.onLongPress,
                disabled: this.props.disabled || this.props.showActivityIndicator,
                disabledOpacity: this.props.disabledOpacity,
                accessibilityLabel: A,
                accessibilityTraits: P,
                importantForAccessibility: this.props.importantForAccessibility,
                tabIndex: this.props.tabIndex,
                disableTouchOpacityAnimation: !0,
                ref: this._onButtonRef
            }, C))
        }
    }
    t.ActionButton = P,
    t.default = P
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.DefaultHeight = 660,
    t.DefaultWidth = 480,
    t.DefaultHeightForNewProfile = 724,
    t.DefaultWidthForNewProfile = 450,
    t.DefaultSplitMasterWidth = 250,
    t.DefaultSplitSettingsWidth = 455,
    t.DefaultSplitViewWidth = 700,
    t.DefaultSplitViewWidthForNewProfile = t.DefaultSplitMasterWidth + t.DefaultSplitSettingsWidth,
    t.CompactWidth = 400,
    t.CompactHeight = 500
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(36)
      , s = i(658)
      , r = i(659)
      , a = i(0)
      , l = i(58)
      , c = i(43)
      , d = i(1031)
      , u = i(80)
      , g = i(5)
      , h = i(24)
      , p = i(8)
      , m = i(14)
      , S = p.Color.gray50
      , C = p.Color.white
      , y = g.lazyProperties({
        popupContainer: ()=>a.Styles.createButtonStyle({
            overflow: "visible",
            backgroundColor: p.Color.transparent
        }),
        popupInnerContainer: ()=>a.Styles.createViewStyle({
            flex: -1,
            overflow: "visible"
        }),
        popupPadding: ()=>a.Styles.createViewStyle({
            paddingTop: 1,
            paddingBottom: 6,
            paddingLeft: 0,
            paddingRight: 6
        }),
        popupPaddingContentStretchTopBottom: ()=>a.Styles.createViewStyle({
            paddingTop: 0,
            paddingBottom: 6,
            paddingLeft: 2,
            paddingRight: 2
        }),
        popupPaddingContentStretchLeftRight: ()=>a.Styles.createViewStyle({
            paddingTop: 2,
            paddingBottom: 2,
            paddingLeft: 0,
            paddingRight: 6
        }),
        popupPaddingTop: ()=>a.Styles.createViewStyle({
            paddingTop: 6,
            paddingBottom: 1,
            paddingLeft: 3.5,
            paddingRight: 3.5
        }),
        popupPaddingTopStretchContents: ()=>a.Styles.createViewStyle({
            paddingTop: 6,
            paddingBottom: 0,
            paddingLeft: 2,
            paddingRight: 2
        }),
        popupPaddingRight: ()=>a.Styles.createViewStyle({
            paddingTop: 3.5,
            paddingBottom: 3.5,
            paddingLeft: 1,
            paddingRight: 6
        }),
        popupPaddingRightStretchContents: ()=>a.Styles.createViewStyle({
            paddingTop: 2,
            paddingBottom: 2,
            paddingLeft: 0,
            paddingRight: 6
        }),
        popupPaddingLeft: ()=>a.Styles.createViewStyle({
            paddingTop: 3.5,
            paddingBottom: 3.5,
            paddingLeft: 6,
            paddingRight: 1
        }),
        popupPaddingLeftStretchContents: ()=>a.Styles.createViewStyle({
            paddingTop: 2,
            paddingBottom: 2,
            paddingLeft: 6,
            paddingRight: 0
        }),
        popupPaddingBottom: ()=>a.Styles.createViewStyle({
            paddingTop: 1,
            paddingBottom: 6,
            paddingLeft: 3.5,
            paddingRight: 3.5
        }),
        popupPaddingBottomStretchContents: ()=>a.Styles.createViewStyle({
            paddingTop: 0,
            paddingBottom: 6,
            paddingLeft: 2,
            paddingRight: 2
        }),
        borderSvg: ()=>a.Styles.createImageStyle({
            position: "absolute",
            left: 0,
            top: 0,
            overflow: "visible"
        }),
        overflowHidden: ()=>a.Styles.createViewStyle({
            overflow: "hidden"
        })
    });
    class f extends c.default {
        constructor() {
            super(...arguments),
            this._arbitrateFocus = e=>d.arbitrateModalOrPopupFocus("SXPopup", e),
            this._handleContextMenu = e=>{
                this.props.disableContextMenu && (e.preventDefault(),
                e.stopPropagation())
            }
            ,
            this._onPress = e=>{
                e.preventDefault(),
                e.stopPropagation()
            }
        }
        _buildState(e, t) {
            t && l.default.validatePopupOffset(e.offset);
            const i = t=>n.isUndefined(t) ? n.isUndefined(e.borderRadius) ? 3 : e.borderRadius : t;
            this._borderBottomLeftRadius = i(e.borderBottomLeftRadius),
            this._borderBottomRightRadius = i(e.borderBottomRightRadius),
            this._borderTopLeftRadius = i(e.borderTopLeftRadius),
            this._borderTopRightRadius = i(e.borderTopRightRadius),
            this._popupBeakHeight = n.isUndefined(e.popupBeakHeight) ? 5 : e.popupBeakHeight,
            this._popupBeakWidth = n.isUndefined(e.popupBeakWidth) ? 15 : e.popupBeakWidth,
            this._fillColor = e.fillColor || C,
            this._fillOpacity = e.fillOpacity || 1,
            this._strokeColor = e.strokeColor || S,
            this._strokeOpacity = e.strokeOpacity || 1,
            this._shadow = e.shadow || "0px 6px 16px rgba(0, 0, 0, 0.1)";
            const s = this._getRootViewId();
            return {
                svgPathDef: this._buildSvgPath(e),
                svgStyle: this._buildSvgStyle(e),
                isPortraitMode: h.default.getDeviceOrientation(s) === o.DeviceOrientation.Portrait
            }
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.props.onOrientationChanged && t.isPortraitMode !== this.state.isPortraitMode && this.props.onOrientationChanged()
        }
        render() {
            let e, t = [y.popupInnerContainer, y.popupPadding];
            this.props.contentStretchAcrossWidth ? t.push(y.popupPaddingContentStretchTopBottom) : this.props.contentStretchAcrossHeight && t.push(y.popupPaddingContentStretchLeftRight);
            const i = this._isAnchorPositionBottom(this.props)
              , o = this._isAnchorPositionTop(this.props)
              , l = this._isAnchorPositionRight(this.props)
              , c = this._isAnchorPositionLeft(this.props);
            if (this.props.popupWidth > 0 && this.props.popupHeight > 0) {
                this.props.contentStretchAcrossWidth || this.props.contentStretchAcrossHeight ? i ? t.push(y.popupPaddingTopStretchContents) : o ? t.push(y.popupPaddingBottomStretchContents) : l ? t.push(y.popupPaddingLeftStretchContents) : t.push(y.popupPaddingRightStretchContents) : l ? t.push(y.popupPaddingLeft) : i ? t.push(y.popupPaddingTop) : o ? t.push(y.popupPaddingBottom) : t.push(y.popupPaddingRight);
                let d = [y.borderSvg, this.state.svgStyle]
                  , g = this.props.popupHeight
                  , h = this.props.popupWidth;
                if (this.props.paddingInPopupCanvas && ((o || i) && g > this.props.paddingInPopupCanvas ? (g -= this.props.paddingInPopupCanvas,
                d.push(a.Styles.createImageStyle({
                    marginTop: o ? this.props.paddingInPopupCanvas : void 0,
                    marginBottom: i ? this.props.paddingInPopupCanvas : void 0
                }, !1))) : (l || c) && h > this.props.paddingInPopupCanvas && (h -= this.props.paddingInPopupCanvas,
                d.push(a.Styles.createImageStyle({
                    marginRight: l ? this.props.paddingInPopupCanvas : void 0,
                    marginLeft: c ? this.props.paddingInPopupCanvas : void 0
                }, !1)))),
                n.isUndefined(this.props.blurBackgroundStyle))
                    e = a.createElement(r.ImageSvg, {
                        style: d,
                        webShadow: this.props.hideShadow ? void 0 : this._shadow,
                        width: h,
                        height: g
                    }, a.createElement(r.SvgPath, {
                        strokeColor: this._strokeColor,
                        strokeWidth: this._strokeOpacity,
                        strokeOpacity: this._strokeOpacity,
                        fillColor: this._fillColor,
                        fillOpacity: this._fillOpacity,
                        d: this.state.svgPathDef
                    }));
                else {
                    const t = this._staticBackgroundStyle(h, g, !0);
                    e = a.createElement(u.default, {
                        style: [d, t, y.overflowHidden]
                    }, a.createElement(s.BlurView, {
                        style: m.flexOne,
                        blurStyle: this.props.blurBackgroundStyle
                    }))
                }
            }
            const d = [y.popupContainer];
            this.props.containerStyle && d.push(this.props.containerStyle),
            this.props.offset && d.push(a.Styles.createViewStyle({
                transform: [{
                    translateX: this.props.offset.x
                }, {
                    translateY: this.props.offset.y
                }]
            }, !1));
            const g = this.props.popupAccessibilityTitle;
            return a.createElement(a.View, {
                onPress: this._onPress,
                importantForAccessibility: this.props.importantForAccessibility,
                onContextMenu: this._handleContextMenu,
                style: d,
                disableTouchOpacityAnimation: !0
            }, e, a.createElement(a.View, {
                style: t,
                accessibilityId: "SXPopup",
                accessibilityLabel: g,
                accessibilityTraits: a.Types.AccessibilityTrait.Dialog,
                restrictFocusWithin: !this.props.allowFocusOutside,
                tabIndex: -1,
                autoFocus: !this.props.skipPopupAutoFocus,
                arbitrateFocus: this._arbitrateFocus
            }, this.props.children))
        }
        _staticBackgroundStyle(e, t, i=!1) {
            return a.Styles.createViewStyle({
                width: e,
                height: t,
                borderWidth: i ? void 0 : this._strokeOpacity,
                borderColor: i ? void 0 : this._strokeColor,
                backgroundColor: i ? void 0 : this._fillColor,
                borderBottomLeftRadius: this._borderBottomLeftRadius,
                borderBottomRightRadius: this._borderBottomRightRadius,
                borderTopLeftRadius: this._borderTopLeftRadius,
                borderTopRightRadius: this._borderTopRightRadius
            }, !1)
        }
        _isAnchorPositionTop(e) {
            return "top" === e.anchorPosition
        }
        _isAnchorPositionBottom(e) {
            return "bottom" === e.anchorPosition
        }
        _isAnchorPositionRight(e) {
            return "right" === e.anchorPosition
        }
        _isAnchorPositionLeft(e) {
            return "left" === e.anchorPosition
        }
        _buildSvgPath(e) {
            let t = 0
              , i = 0
              , n = e.popupWidth
              , o = e.popupHeight
              , s = !0
              , r = e.anchorOffset;
            const a = this._isAnchorPositionTop(e)
              , l = this._isAnchorPositionBottom(e)
              , c = this._isAnchorPositionRight(e)
              , d = this._isAnchorPositionLeft(e);
            return e.paddingInPopupCanvas && ((a || l) && e.popupHeight > e.paddingInPopupCanvas ? o = e.popupHeight - e.paddingInPopupCanvas : (c || d) && e.popupWidth > e.paddingInPopupCanvas && (n = e.popupWidth - e.paddingInPopupCanvas)),
            d ? (n -= this._popupBeakHeight,
            r -= 2.5,
            i += 2.5,
            o -= 2.5,
            s = !1) : c ? (t += this._popupBeakHeight,
            r -= 2.5,
            i += 2.5,
            o -= 2.5,
            s = !1) : a ? (o -= this._popupBeakHeight,
            r -= 2.5,
            t += 2.5,
            n -= 2.5) : l && (i += this._popupBeakHeight,
            r -= 2.5,
            t += 2.5,
            n -= 2.5),
            r = s ? Math.min(r, n - this._popupBeakWidth / 2) : Math.min(r, o - this._popupBeakWidth / 2),
            this._genLineSegment(t + this._borderTopLeftRadius, i, "M") + this._genStraightLineSegmentWithOptionalBeak(n - t - this._borderTopRightRadius - this._borderTopLeftRadius, 0, l, r - this._borderTopLeftRadius - this._popupBeakWidth / 2, s, 1, -1) + this._genLineSegment(this._borderTopRightRadius, 0, "c") + this._genLineSegment(this._borderTopRightRadius, this._borderTopRightRadius) + this._genLineSegment(this._borderTopRightRadius, this._borderTopRightRadius) + this._genStraightLineSegmentWithOptionalBeak(0, o - i - this._borderBottomRightRadius - this._borderTopRightRadius, d, r - this._borderTopRightRadius - this._popupBeakWidth / 2, s, 1, 1) + this._genLineSegment(0, this._borderBottomRightRadius, "c") + this._genLineSegment(-this._borderBottomRightRadius, this._borderBottomRightRadius) + this._genLineSegment(-this._borderBottomRightRadius, this._borderBottomRightRadius) + this._genStraightLineSegmentWithOptionalBeak(t - n + this._borderBottomLeftRadius + this._borderBottomRightRadius, 0, a, n - this._borderBottomRightRadius - (t + r + this._popupBeakWidth / 2), s, -1, 1) + this._genLineSegment(-this._borderBottomLeftRadius, 0, "c") + this._genLineSegment(-this._borderBottomLeftRadius, -this._borderBottomLeftRadius) + this._genLineSegment(-this._borderBottomLeftRadius, -this._borderBottomLeftRadius) + this._genStraightLineSegmentWithOptionalBeak(0, i - o + this._borderBottomLeftRadius + this._borderTopLeftRadius, c, o - this._borderBottomLeftRadius - (i + r + this._popupBeakWidth / 2), s, -1, -1) + this._genLineSegment(0, -this._borderTopLeftRadius, "c") + this._genLineSegment(this._borderTopLeftRadius, -this._borderTopLeftRadius) + this._genLineSegment(this._borderTopLeftRadius, -this._borderTopLeftRadius) + "z"
        }
        _genLineSegment(e, t, i="") {
            return i + e + "," + t + " "
        }
        _genStraightLineSegmentWithOptionalBeak(e, t, i, n, o, s, r) {
            let a = "";
            if (i)
                if (o) {
                    let t = n * s
                      , i = e - (n + this._popupBeakWidth) * s;
                    a = this._genLineSegment(t, 0, "l") + this._genLineSegment(this._popupBeakWidth / 2 * s, this._popupBeakHeight * r, "l") + this._genLineSegment(this._popupBeakWidth / 2 * s, -this._popupBeakHeight * r, "l") + this._genLineSegment(i, 0, "l")
                } else {
                    let e = n * r
                      , i = t - (n + this._popupBeakWidth) * r;
                    a = this._genLineSegment(0, e, "l") + this._genLineSegment(this._popupBeakHeight * s, this._popupBeakWidth / 2 * r, "l") + this._genLineSegment(-this._popupBeakHeight * s, this._popupBeakWidth / 2 * r, "l") + this._genLineSegment(0, i, "l")
                }
            else
                a = this._genLineSegment(e, t, "l");
            return a
        }
        _buildSvgStyle(e) {
            if (!e.popupWidth || !e.popupHeight)
                return;
            const t = this._isAnchorPositionBottom(e)
              , i = this._isAnchorPositionTop(e)
              , n = this._isAnchorPositionRight(e)
              , o = this._isAnchorPositionLeft(e);
            let s = e.popupHeight
              , r = e.popupWidth;
            return e.paddingInPopupCanvas && ((i || t) && s > e.paddingInPopupCanvas ? s -= e.paddingInPopupCanvas : (n || o) && r > e.paddingInPopupCanvas && (r -= e.paddingInPopupCanvas)),
            a.Styles.createImageStyle({
                width: r,
                height: s
            }, !1)
        }
    }
    e.exports = f
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(0)
      , s = i(13);
    let r = class extends s.StoreBase {
        constructor() {
            super(),
            this._isNavigatingWithKeyboard = o.UserInterface.isNavigatingWithKeyboard(),
            o.UserInterface.keyboardNavigationEvent.subscribe(e=>{
                this._isNavigatingWithKeyboard = e,
                this.trigger()
            }
            )
        }
        isNavigatingWithKeyboard() {
            return this._isNavigatingWithKeyboard
        }
    }
    ;
    n.__decorate([s.autoSubscribe], r.prototype, "isNavigatingWithKeyboard", null),
    r = n.__decorate([s.AutoSubscribeStore], r),
    t.default = new r
}
, , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(5)
      , s = i(168)
      , r = i(8)
      , a = i(109);
    class l {
        static _buildTheme(e) {
            const t = {
                primaryTextColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.primaryTextColor
                }),
                headerTextColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.headerTextColor
                }),
                secondaryTextColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.secondaryTextColor
                }),
                tertiaryTextColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.tertiaryTextColor
                }),
                textHoverColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.textHoverColor
                }),
                buttonTextColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.buttonTextColor
                }),
                primaryViewColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.primaryTextColor
                }),
                secondaryViewColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.secondaryTextColor
                }),
                dividerColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.dividerColor
                }),
                dividerForButtonsColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.primaryTextColor
                }),
                dividerBorderColorStyle: ()=>n.Styles.createViewStyle({
                    borderColor: e.dividerColor
                }),
                headerShadowColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.headerShadowColor
                }),
                headerShadowBorderColorStyle: ()=>n.Styles.createViewStyle({
                    borderColor: e.headerShadowColor
                }),
                bubbleColorSelfStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.bubbleColorSelf
                }),
                bubbleTextColorSelfStyle: ()=>n.Styles.createTextStyle({
                    color: e.bubbleTextColorSelf
                }),
                primaryIconColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.primaryIconColor
                }),
                headerIconColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.headerIconColor
                }),
                iconHoverColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.iconHoverColor
                }),
                destructiveTextColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.destructiveTextColor
                }),
                destructiveTextHoverColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.destructiveTextHoverColor
                }),
                disclosureArrowColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.disclosureArrowColor
                }),
                rowHighlightViewStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.rowHighlightColor
                }),
                rowHoverViewStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.rowHoverColor
                }),
                secondaryRowHighlightViewStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.secondaryRowHighlightColor
                }),
                secondaryRowHoverViewStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.secondaryRowHoverColor
                }),
                secondaryDividerBorderStyle: ()=>n.Styles.createViewStyle({
                    borderColor: e.secondaryDividerColor
                }),
                searchBoxColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.searchBoxColor
                }),
                searchPlaceholderTextColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.searchPlaceholderTextColor
                }),
                searchHeaderColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.searchHeaderColor
                }),
                primaryBackgroundColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.primaryBackgroundColor
                }),
                primaryBackgroundColorTextStyle: ()=>n.Styles.createTextStyle({
                    color: e.primaryBackgroundColor
                }),
                primaryBorderColorStyle: ()=>n.Styles.createViewStyle({
                    borderColor: e.primaryBackgroundColor
                }),
                secondaryBackgroundColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.secondaryBackgroundColor
                }),
                disabledTextColorStyle: ()=>n.Styles.createTextStyle({
                    color: e.disabledTextColor
                }),
                messageStreamBackgroundColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.messageStreamBackgroundColor
                }),
                tabIndicatorColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.tabIndicatorColor
                }),
                popoverBackgroundColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.popoverBackgroundColor
                }),
                pillBorderColorStyle: ()=>n.Styles.createViewStyle({
                    borderColor: e.pillBorderColor
                }),
                toggleBorderColorStyle: ()=>n.Styles.createViewStyle({
                    borderColor: e.toggleBorderColor
                }),
                buttonBackgroundColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.buttonBackgroundColor
                }),
                buttonBackgroundHoverColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.buttonBackgroundHoverColor
                }),
                viewBorderStyle: ()=>n.Styles.createViewStyle({
                    borderColor: e.dividerColor,
                    borderWidth: 1
                }),
                cardColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.cardColor
                }),
                updateCard: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.updateCardBackgroundColor
                }),
                updateCardHover: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.updateCardBackgroundHoverColor
                }),
                mandatoryUpdateCard: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.mandatoryUpdateCardBackgroundColor
                }),
                mandatoryUpdateCardHover: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.mandatoryUpdateCardBackgroundHoverColor
                }),
                sliderHandleColorStyle: ()=>n.Styles.createViewStyle({
                    backgroundColor: e.sliderHandleColor
                })
            };
            return e.bubbleColorOther && (t.bubbleColorOtherStyle = ()=>n.Styles.createViewStyle({
                backgroundColor: e.bubbleColorOther
            })),
            e.bubbleTextColorOther && (t.bubbleTextColorOtherStyle = ()=>n.Styles.createTextStyle({
                color: e.bubbleTextColorOther
            })),
            e.bubbleColorBot && (t.bubbleColorBotStyle = ()=>n.Styles.createViewStyle({
                backgroundColor: e.bubbleColorBot
            })),
            e.bubbleTextColorBot && (t.bubbleTextColorBotStyle = ()=>n.Styles.createTextStyle({
                color: e.bubbleTextColorBot
            })),
            e.primaryBadgeColor && (t.primaryBadgeColorStyle = ()=>n.Styles.createViewStyle({
                backgroundColor: e.primaryBadgeColor
            })),
            e.secondaryBadgeColor && (t.secondaryBadgeColorStyle = ()=>n.Styles.createViewStyle({
                backgroundColor: e.secondaryBadgeColor
            })),
            e.primaryBadgeTextColor && (t.primaryBadgeTextColorStyle = ()=>n.Styles.createTextStyle({
                color: e.primaryBadgeTextColor
            })),
            e.notificationColor && (t.notificationColorStyle = ()=>n.Styles.createViewStyle({
                backgroundColor: e.notificationColor
            })),
            e.linkTextColor && (t.linkTextColorStyle = ()=>n.Styles.createTextStyle({
                color: e.linkTextColor
            })),
            e.messageComposerBackgroundColor && (t.messageComposerBackgroundStyle = ()=>n.Styles.createViewStyle({
                backgroundColor: e.messageComposerBackgroundColor
            })),
            e.bubbleReactionColorOther && (t.bubbleReactionColorOtherStyle = ()=>n.Styles.createTextStyle({
                color: e.bubbleReactionColorOther
            })),
            o.lazyProperties(t)
        }
        static buildHighContrastThemeColors(e) {
            return {
                useCompactLayout: !0,
                useInitialsForConversationIcon: !0,
                defaultStatusBarBackgroundColor: e.windowColor,
                defaultStatusBarTheme: s.BarStyleTheme.Default,
                primaryBackgroundColor: e.windowColor,
                secondaryBackgroundColor: e.windowColor,
                uwpMenuBarColor: e.windowColor,
                webFooterColor: e.windowColor,
                primaryTextColor: e.textColor,
                headerTextColor: e.textColor,
                secondaryTextColor: e.textColor,
                tertiaryTextColor: e.textColor,
                textHoverColor: e.highlightTextColor,
                buttonTextColor: e.buttonTextColor,
                dividerColor: e.textColor,
                headerShadowColor: e.textColor,
                bubbleColorSelf: e.windowColor,
                bubbleTextColorSelf: e.textColor,
                bubbleColorBot: e.windowColor,
                bubbleTextColorBot: e.textColor,
                messageComposerBackgroundColor: e.windowColor,
                primaryIconColor: e.buttonTextColor,
                headerIconColor: e.buttonTextColor,
                iconDisabledColor: e.grayTextColor,
                iconHoverColor: e.highlightTextColor,
                destructiveTextColor: e.textColor,
                destructiveTextHoverColor: e.highlightTextColor,
                disclosureArrowColor: e.textColor,
                rowHighlightColor: e.highlightColor,
                rowHoverColor: e.highlightColor,
                secondaryRowHighlightColor: e.highlightColor,
                secondaryRowHoverColor: e.highlightColor,
                secondaryDividerColor: e.textColor,
                searchBoxColor: e.windowColor,
                searchPlaceholderTextColor: e.textColor,
                searchHeaderColor: e.windowColor,
                disabledTextColor: e.grayTextColor,
                messageStreamBackgroundColor: e.windowColor,
                tabIndicatorColor: e.textColor,
                popoverBackgroundColor: e.windowColor,
                pillBorderColor: e.buttonFaceColor,
                toggleBorderColor: e.buttonFaceColor,
                buttonBackgroundColor: e.buttonFaceColor,
                buttonBackgroundHoverColor: e.highlightColor,
                cardColor: e.windowColor,
                secondaryBadgeColor: e.windowColor,
                updateCardBackgroundColor: e.windowColor,
                updateCardBackgroundHoverColor: e.highlightColor,
                mandatoryUpdateCardBackgroundColor: e.windowColor,
                mandatoryUpdateCardBackgroundHoverColor: e.highlightColor,
                sliderHandleColor: e.buttonFaceColor,
                adaptiveCardBackgroundColor: e.windowColor,
                adaptiveCardBorderColor: e.textColor,
                adaptiveCardButtonBackgroundColor: e.buttonFaceColor,
                adaptiveCardButtonBackgroundHoverColor: e.highlightColor,
                adaptiveCardButtonBackgroundExpandedColor: e.windowColor,
                adaptiveCardDefaultTextColor: e.textColor,
                adaptiveCardDarkTextColor: e.textColor,
                adaptiveCardLightTextColor: e.textColor,
                adaptiveCardInputUnselectedBorderColor: e.textColor
            }
        }
        static themeColorsForTheme(e) {
            switch (e) {
            case a.Theme.Accessible:
                return l._themeColors.accessible;
            case a.Theme.Mono:
                return l._themeColors.mono;
            case a.Theme.AccessibleDark:
                return l._themeColors.accessibleDarkV2;
            case a.Theme.ColorfulDark:
                return l._themeColors.colorfulDark;
            case a.Theme.MonoDark:
                return l._themeColors.monoDark;
            case a.Theme.ClassicDeprecated:
            case a.Theme.Delphi:
                return l._themeColors.delphi;
            case a.Theme.ClassicDarkDeprecated:
            case a.Theme.DelphiDark:
                return l._themeColors.delphiDark;
            case a.Theme.Colorful:
            default:
                return l._themeColors.default
            }
        }
        static themeStylesForTheme(e) {
            switch (e) {
            case a.Theme.Accessible:
                return l._themeStyles.accessible;
            case a.Theme.Mono:
                return l._themeStyles.mono;
            case a.Theme.AccessibleDark:
                return l._themeStyles.accessibleDark;
            case a.Theme.ColorfulDark:
                return l._themeStyles.colorfulDark;
            case a.Theme.MonoDark:
                return l._themeStyles.monoDark;
            case a.Theme.ClassicDeprecated:
            case a.Theme.Delphi:
                return l._themeStyles.delphi;
            case a.Theme.ClassicDarkDeprecated:
            case a.Theme.DelphiDark:
                return l._themeStyles.delphiDark;
            case a.Theme.Colorful:
            default:
                return l._themeStyles.default
            }
        }
        static _buildThemeStyles() {
            return o.lazyProperties({
                default: ()=>l._buildTheme(l._themeColors.default),
                mono: ()=>l._buildTheme(l._themeColors.mono),
                accessible: ()=>l._buildTheme(l._themeColors.accessible),
                accessibleDark: ()=>l._buildTheme(l._themeColors.accessibleDarkV2),
                colorfulDark: ()=>l._buildTheme(l._themeColors.colorfulDark),
                monoDark: ()=>l._buildTheme(l._themeColors.monoDark),
                delphi: ()=>l._buildTheme(l._themeColors.delphi),
                delphiDark: ()=>l._buildTheme(l._themeColors.delphiDark)
            })
        }
    }
    l._lightThemeCommon = {
        updateCardBackgroundColor: r.Color.desktopUpgradeNotificationGreen,
        updateCardBackgroundHoverColor: r.Color.desktopUpgradeNotificationGreenHover,
        mandatoryUpdateCardBackgroundColor: r.Color.desktopMandatoryUpgradeNotificationRed,
        mandatoryUpdateCardBackgroundHoverColor: r.Color.desktopMandatoryUpgradeNotificationRedHover,
        adaptiveCardBackgroundColor: r.Color.white,
        adaptiveCardBorderColor: r.Color.gray100,
        adaptiveCardButtonBackgroundColor: r.Color.gray50,
        adaptiveCardButtonBackgroundHoverColor: r.Color.gray100,
        adaptiveCardButtonBackgroundExpandedColor: r.Color.gray200,
        adaptiveCardDefaultTextColor: r.Color.gray400,
        adaptiveCardDarkTextColor: r.Color.black,
        adaptiveCardLightTextColor: r.Color.gray300,
        adaptiveCardInputUnselectedBorderColor: r.Color.gray300
    },
    l._themeColorsDefault = Object.assign({
        useCompactLayout: !0,
        useInitialsForConversationIcon: !0,
        defaultStatusBarBackgroundColor: r.Color.white,
        defaultStatusBarTheme: s.BarStyleTheme.Dark,
        primaryBackgroundColor: r.Color.white,
        secondaryBackgroundColor: r.Color.gray50,
        uwpMenuBarColor: r.Color.gray100,
        webFooterColor: r.Color.gray400,
        primaryTextColor: r.Color.gray400,
        headerTextColor: r.Color.gray400,
        secondaryTextColor: r.Color.gray300,
        tertiaryTextColor: r.Color.gray200,
        textHoverColor: r.Color.gray300,
        buttonTextColor: r.Color.gray400,
        dividerColor: r.Color.gray200,
        headerShadowColor: r.Color.shadow,
        bubbleColorSelf: r.Color.gray50,
        bubbleTextColorSelf: r.Color.gray400,
        bubbleColorBot: r.Color.gray50,
        bubbleTextColorBot: r.Color.gray400,
        messageComposerBackgroundColor: r.Color.gray50,
        primaryIconColor: r.Color.gray400,
        headerIconColor: r.Color.gray400,
        iconDisabledColor: r.Color.gray300,
        iconHoverColor: r.Color.gray400Overlay70,
        destructiveTextColor: r.Color.red,
        destructiveTextHoverColor: r.Color.pink,
        disclosureArrowColor: r.Color.gray200,
        rowHighlightColor: r.Color.gray50,
        rowHoverColor: r.Color.gray50Overlay50,
        secondaryRowHighlightColor: r.Color.white,
        secondaryRowHoverColor: r.Color.leftNavRowHoverColor,
        secondaryDividerColor: r.Color.black,
        searchBoxColor: r.Color.gray50,
        searchPlaceholderTextColor: r.Color.gray300,
        searchHeaderColor: r.Color.gray50,
        disabledTextColor: r.Color.gray300,
        messageStreamBackgroundColor: r.Color.white,
        tabIndicatorColor: r.Color.black,
        popoverBackgroundColor: r.Color.white,
        pillBorderColor: r.Color.gray100,
        toggleBorderColor: r.Color.gray200,
        buttonBackgroundColor: r.Color.gray50,
        buttonBackgroundHoverColor: r.Color.gray100,
        cardColor: r.Color.gray50,
        secondaryBadgeColor: r.Color.gray300,
        sliderHandleColor: r.Color.gray200
    }, l._lightThemeCommon),
    l._darkThemeColorsDefault = {
        useCompactLayout: !0,
        useInitialsForConversationIcon: !0,
        defaultStatusBarBackgroundColor: r.Color.darkThemeBackground,
        defaultStatusBarTheme: s.BarStyleTheme.Light,
        primaryBackgroundColor: r.Color.darkThemeBackground,
        secondaryBackgroundColor: r.Color.darkThemeSecondaryBackground,
        uwpMenuBarColor: r.Color.black,
        webFooterColor: r.Color.gray400,
        headerTextColor: r.Color.white,
        primaryTextColor: r.Color.gray100,
        secondaryTextColor: r.Color.darkThemeSecondaryTextColor,
        tertiaryTextColor: r.Color.gray300,
        textHoverColor: r.Color.gray200,
        buttonTextColor: r.Color.gray100,
        dividerColor: r.Color.gray400,
        headerShadowColor: r.Color.gray400,
        bubbleColorSelf: r.Color.gray400,
        bubbleTextColorSelf: r.Color.white,
        bubbleColorBot: r.Color.gray400,
        bubbleTextColorBot: r.Color.white,
        messageComposerBackgroundColor: r.Color.gray400,
        primaryIconColor: r.Color.darkThemeSecondaryTextColor,
        headerIconColor: r.Color.white,
        iconDisabledColor: r.Color.gray300,
        iconHoverColor: r.Color.gray200Overlay60,
        destructiveTextColor: r.Color.red,
        destructiveTextHoverColor: r.Color.pink,
        disclosureArrowColor: r.Color.gray300,
        rowHighlightColor: r.Color.gray400,
        rowHoverColor: r.Color.gray400Overlay50,
        secondaryRowHighlightColor: r.Color.gray400,
        secondaryRowHoverColor: r.Color.gray400Overlay50,
        secondaryDividerColor: r.Color.white,
        searchBoxColor: r.Color.gray400,
        searchPlaceholderTextColor: r.Color.darkThemeSecondaryTextColor,
        searchHeaderColor: r.Color.gray400,
        disabledTextColor: r.Color.gray300,
        messageStreamBackgroundColor: r.Color.darkThemeBackground,
        tabIndicatorColor: r.Color.gray100,
        popoverBackgroundColor: r.Color.black,
        pillBorderColor: r.Color.gray300,
        toggleBorderColor: r.Color.gray300,
        buttonBackgroundColor: r.Color.gray400,
        buttonBackgroundHoverColor: r.Color.black,
        popupBorderColor: r.Color.gray400,
        primaryBadgeTextColor: r.Color.white,
        cardColor: r.Color.gray400,
        secondaryBadgeColor: r.Color.gray300,
        sliderHandleColor: r.Color.gray300,
        updateCardBackgroundColor: r.Color.gray400Overlay70,
        updateCardBackgroundHoverColor: r.Color.gray400Overlay80,
        mandatoryUpdateCardBackgroundColor: r.Color.gray400Overlay70,
        mandatoryUpdateCardBackgroundHoverColor: r.Color.gray400Overlay70,
        adaptiveCardBackgroundColor: r.Color.gray400,
        adaptiveCardBorderColor: r.Color.adaptiveCardDarkThemeBorder,
        adaptiveCardButtonBackgroundColor: r.Color.gray400,
        adaptiveCardButtonBackgroundHoverColor: r.Color.gray400Overlay80,
        adaptiveCardButtonBackgroundExpandedColor: r.Color.gray400Overlay50,
        adaptiveCardDefaultTextColor: r.Color.gray200,
        adaptiveCardDarkTextColor: r.Color.gray300,
        adaptiveCardLightTextColor: r.Color.white,
        adaptiveCardInputUnselectedBorderColor: r.Color.gray300
    },
    l._themeColors = {
        default: l._themeColorsDefault,
        mono: l._themeColorsDefault,
        delphi: Object.assign(Object.assign({}, l._themeColorsDefault), {
            bubbleColorOther: r.Color.delphiBubbleColorOther,
            bubbleTextColorOther: r.Color.delphiBubbleText,
            bubbleReactionColorOther: r.Color.gray300Overlay80,
            bubbleColorSelf: r.Color.delphiBubbleColorSelf,
            bubbleTextColorSelf: r.Color.delphiBubbleText,
            bubbleColorBot: r.Color.delphiBubbleColorBot,
            bubbleTextColorBot: r.Color.delphiBubbleText,
            secondaryBackgroundColor: r.Color.delphiSecondaryBackgroundColor,
            secondaryRowHighlightColor: r.Color.delphiSecondaryRowHighlightColor,
            secondaryRowHoverColor: r.Color.delphiSecondaryRowHoverColor,
            messageComposerBackgroundColor: r.Color.delphiMessageComposerBackgroundColor,
            primaryTextColor: r.Color.delphiPrimaryTextColor
        }),
        accessible: Object.assign({
            useCompactLayout: !0,
            useInitialsForConversationIcon: !0,
            defaultStatusBarBackgroundColor: r.Color.white,
            defaultStatusBarTheme: s.BarStyleTheme.Default,
            primaryBackgroundColor: r.Color.white,
            secondaryBackgroundColor: r.Color.white,
            uwpMenuBarColor: r.Color.white,
            webFooterColor: r.Color.gray400,
            primaryTextColor: r.Color.gray400,
            headerTextColor: r.Color.gray400,
            secondaryTextColor: r.Color.gray400,
            tertiaryTextColor: r.Color.gray400,
            textHoverColor: r.Color.gray300,
            buttonTextColor: r.Color.gray400,
            dividerColor: r.Color.gray400,
            headerShadowColor: r.Color.shadow,
            bubbleColorBot: r.Color.gray50,
            bubbleTextColorBot: r.Color.gray400,
            bubbleColorSelf: r.Color.gray50,
            bubbleTextColorSelf: r.Color.gray400,
            bubbleColorOther: r.Color.gray400,
            messageComposerBackgroundColor: r.Color.gray50,
            primaryIconColor: r.Color.gray400,
            headerIconColor: r.Color.gray400,
            iconDisabledColor: r.Color.gray300,
            iconHoverColor: r.Color.gray400Overlay70,
            primaryBadgeColor: r.Color.gray400,
            secondaryBadgeColor: r.Color.gray400,
            primaryBadgeTextColor: r.Color.white,
            destructiveTextColor: r.Color.gray400,
            destructiveTextHoverColor: r.Color.gray300,
            disclosureArrowColor: r.Color.gray400,
            secondaryDividerColor: r.Color.black,
            searchBoxColor: r.Color.gray50,
            searchPlaceholderTextColor: r.Color.gray400,
            searchHeaderColor: r.Color.gray100,
            disabledTextColor: r.Color.gray300,
            messageStreamBackgroundColor: r.Color.white,
            tabIndicatorColor: r.Color.black,
            popoverBackgroundColor: r.Color.white,
            notificationColor: r.Color.black,
            pillBorderColor: r.Color.gray100,
            toggleBorderColor: r.Color.gray200,
            buttonBackgroundColor: r.Color.gray50,
            buttonBackgroundHoverColor: r.Color.gray100,
            cardColor: r.Color.gray50,
            secondaryRowHighlightColor: r.Color.gray100,
            secondaryRowHoverColor: r.Color.gray50,
            rowHighlightColor: r.Color.gray100,
            rowHoverColor: r.Color.gray50,
            sliderHandleColor: r.Color.white
        }, l._lightThemeCommon),
        accessibleDark: Object.assign(Object.assign({}, l._darkThemeColorsDefault), {
            bubbleColorOther: r.Color.gray50,
            bubbleTextColorOther: r.Color.gray400
        }),
        accessibleDarkV2: Object.assign(Object.assign({}, l._darkThemeColorsDefault), {
            primaryBackgroundColor: r.Color.black,
            secondaryBackgroundColor: r.Color.black,
            uwpMenuBarColor: r.Color.black,
            webFooterColor: r.Color.gray400,
            primaryTextColor: r.Color.white,
            headerTextColor: r.Color.white,
            secondaryTextColor: r.Color.gray50,
            tertiaryTextColor: r.Color.gray50,
            bubbleColorOther: r.Color.gray50,
            bubbleTextColorOther: r.Color.gray400,
            primaryBadgeColor: r.Color.white,
            secondaryBadgeColor: r.Color.white,
            primaryBadgeTextColor: r.Color.gray400,
            disclosureArrowColor: r.Color.gray50,
            messageStreamBackgroundColor: r.Color.black,
            primaryIconColor: r.Color.white,
            headerIconColor: r.Color.white,
            iconDisabledColor: r.Color.gray100,
            iconHoverColor: r.Color.gray100,
            dividerColor: r.Color.gray100,
            headerShadowColor: r.Color.gray100,
            messageComposerBackgroundColor: r.Color.gray400,
            sliderHandleColor: r.Color.black
        }),
        delphiDark: Object.assign(Object.assign({}, l._darkThemeColorsDefault), {
            bubbleColorOther: r.Color.delphiDarkBubbleColorOther,
            bubbleTextColorOther: r.Color.delphiDarkBubbleText,
            bubbleColorSelf: r.Color.delphiDarkBubbleColorSelf,
            bubbleTextColorSelf: r.Color.delphiDarkBubbleText,
            bubbleColorBot: r.Color.delphiDarkBubbleColorBot,
            bubbleTextColorBot: r.Color.delphiDarkBubbleText,
            messageStreamBackgroundColor: r.Color.black,
            primaryTextColor: r.Color.delphiDarkPrimaryTextColor,
            secondaryTextColor: r.Color.delphiDarkSecondaryTextColor,
            primaryBackgroundColor: r.Color.classicDarkPrimaryBackground,
            secondaryBackgroundColor: r.Color.classicDarkSecondaryBackground,
            secondaryRowHighlightColor: r.Color.classicDarkBubbleSelf,
            secondaryRowHoverColor: r.Color.classicDarkBubbleOther,
            buttonBackgroundColor: r.Color.classicDarkBubbleSelf,
            primaryIconColor: r.Color.classicDarkBubbleTextSelf,
            headerIconColor: r.Color.classicDarkBubbleTextSelf
        }),
        delphiDarkMobile: Object.assign(Object.assign({}, l._darkThemeColorsDefault), {
            bubbleColorOther: r.Color.classicDarkBubbleOther,
            bubbleTextColorOther: r.Color.classicDarkBubbleTextOther,
            bubbleColorSelf: r.Color.classicDarkBubbleSelf,
            bubbleTextColorSelf: r.Color.classicDarkBubbleTextSelf,
            bubbleColorBot: r.Color.classicDarkBubbleOther,
            bubbleTextColorBot: r.Color.classicDarkBubbleTextOther
        }),
        colorfulDark: l._darkThemeColorsDefault,
        monoDark: l._darkThemeColorsDefault
    },
    l._themeStyles = l._buildThemeStyles(),
    e.exports = l
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = (i(0),
    i(89),
    i(2))
      , s = i(3)
      , r = i(106);
    t.ScenarioName = r.ScenarioName;
    const a = i(29)
      , l = i(9);
    class c {
        constructor(e, t, i={}, n) {
            this._properties = i,
            this._experimentConfigIds = n,
            this._totalDuration = 0,
            this._isResolved = !1,
            this._isInvalidated = !1,
            this._markedSteps = [],
            this._secondaryScenarios = {},
            this._duplicateStepMarking = !1,
            this._scenarioName = r.ScenarioName[e],
            this.reset(t)
        }
        setScenarioTimeout(e, t=5e3) {
            this._timeoutTimerId = a.setTimeout(()=>{
                this._timeoutTimerId = void 0,
                e() && this.fail("timeout")
            }
            , t)
        }
        reset(e) {
            this._cleanup(),
            this._scenarioId = e || l.newGuid(),
            this._lastAutomaticTimestamp = void 0,
            this._totalDuration = 0,
            this._isResolved = !1,
            this._isInvalidated = !1,
            this._markedSteps = [],
            this._secondaryScenarios = {}
        }
        _cleanup() {
            this._cleanupScenarioTimeout(),
            this._appStateSub && (this._appStateSub.unsubscribe(),
            this._appStateSub = void 0)
        }
        _cleanupScenarioTimeout() {
            this._timeoutTimerId && (a.clearTimeout(this._timeoutTimerId),
            this._timeoutTimerId = void 0)
        }
        invalidateWhenBackgrounded() {}
        hasStarted() {
            return void 0 !== this._lastAutomaticTimestamp
        }
        getCurrentDuration() {
            return void 0 === this._lastAutomaticTimestamp ? 0 : this._totalDuration + (Date.now() - this._lastAutomaticTimestamp)
        }
        isStepMarked(e) {
            return n.some(this._markedSteps, t=>t.name === e)
        }
        start(e, t) {
            this._isResolved || this._markStep("started", e, 0, !1, !1, !1, t)
        }
        resume(e) {
            this._isResolved || (this._lastAutomaticTimestamp = e)
        }
        markStepCompleted(e, t, i, n=!1) {
            this._isInvalidated || this._markStep(e, t, i, n, !1, !1)
        }
        markPerfTargetStepCompleted(e, t, i) {
            this._isInvalidated || this._markStep(e, t, i, !1, !0, !1)
        }
        _markStep(e, t, i, o, s, r, a) {
            const l = Date.now()
              , c = void 0 === i ? l - this._lastAutomaticTimestamp : i;
            this._totalDuration += c,
            this._lastAutomaticTimestamp = void 0 === a ? l : a,
            this._markedSteps.push({
                name: e,
                stepDuration: c,
                totalDuration: this._totalDuration,
                isTraceOnly: o,
                isTarget: s,
                isFinal: r
            }),
            o || (n.assign(this._properties, t),
            r || (this._properties["step_name_" + e.toLowerCase()] = c))
        }
        finish(e, t) {
            this._isInvalidated || this._reportFinalEvent("finished", e, t)
        }
        fail(e, t) {
            if (this._isInvalidated)
                return;
            let i = n.clone(t) || {};
            i.error_description = e || "",
            this._reportFinalEvent("failed", i)
        }
        invalidate(e) {
            e && this._reportFinalEvent(e),
            this._cleanup(),
            this._isInvalidated = !0
        }
        setDuplicateStepMarkingEnabled(e=!0) {
            this._duplicateStepMarking = e
        }
        _reportFinalEvent(e, t, i) {
            if (this._isResolved)
                return;
            const r = n.some(this._markedSteps, e=>e.isTarget);
            if (this._markStep(e, t, i, !1, !r, !0),
            this._cleanup(),
            this._isResolved = !0,
            s.isTraceEnabled(o.LogTraceArea.ScenarioTracker)) {
                const e = n.last(this._markedSteps)
                  , t = e ? e.totalDuration : 0
                  , i = "Id: " + this._scenarioId + "; Name: " + this._scenarioName + "\n" + n.map(this._properties, (e,t)=>`\tContext_${t}: ${e}\n`).join("") + n.map(this._markedSteps, e=>`\tPERF_${this._scenarioName}_${e.name} : ${e.stepDuration} ms | ${e.totalDuration} ms` + (e.isTarget ? " (TARGET)" : "") + "\n").join("") + `\tPERF_${this._scenarioName}_Total : ${t} ms`;
                s.log(o.LogTraceArea.ScenarioTracker, i)
            }
        }
        renameScenario(e) {
            this._scenarioName = r.ScenarioName[e]
        }
        spawnSecondaryScenario(e, t) {
            this._checkSecondaryScenario(e);
            let i = new c(e,this._scenarioId,void 0,void 0);
            return t && i.setScenarioTimeout(()=>!0, t),
            this._secondaryScenarios[r.ScenarioName[e]] = i,
            i
        }
        getSecondaryScenario(e) {
            return this._checkSecondaryScenario(e),
            this._secondaryScenarios[r.ScenarioName[e]]
        }
        _checkSecondaryScenario(e) {
            let t = this._secondaryScenarios[r.ScenarioName[e]];
            t && t._isResolved && delete this._secondaryScenarios[r.ScenarioName[e]]
        }
        isResolved() {
            return this._isResolved
        }
        hasUnresolvedSecondaryScenarios() {
            return !n.isEmpty(this._secondaryScenarios)
        }
    }
    t.default = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(16)
      , s = i(654)
      , r = i(3);
    var a, l, c, d, u, g, h, p;
    !function(e) {
        e[e.AcceptButton = 0] = "AcceptButton",
        e[e.ActiveNowPanel = 1] = "ActiveNowPanel",
        e[e.AddContactPanel = 2] = "AddContactPanel",
        e[e.AddTranslatorBot = 3] = "AddTranslatorBot",
        e[e.ChatWave = 4] = "ChatWave",
        e[e.DiscoverPanel = 5] = "DiscoverPanel",
        e[e.FavoriteContextMenu = 6] = "FavoriteContextMenu",
        e[e.FavoriteToggle = 7] = "FavoriteToggle",
        e[e.MoreContactsPanel = 8] = "MoreContactsPanel",
        e[e.NewConversation = 9] = "NewConversation",
        e[e.NewCall = 10] = "NewCall",
        e[e.ProfileBigButton = 11] = "ProfileBigButton",
        e[e.ProfileSmallButton = 12] = "ProfileSmallButton",
        e[e.SearchItem = 13] = "SearchItem",
        e[e.AddPhoneNumberPanel = 14] = "AddPhoneNumberPanel",
        e[e.AddContactContextMenu = 15] = "AddContactContextMenu"
    }(a = t.AddContactOrigin || (t.AddContactOrigin = {})),
    function(e) {
        e[e.Profile = 0] = "Profile",
        e[e.BotChatSettingsPanel = 1] = "BotChatSettingsPanel",
        e[e.ConversationsListItem = 2] = "ConversationsListItem",
        e[e.ManageConnectedPeople = 3] = "ManageConnectedPeople",
        e[e.AddPhoneNumberPanel = 4] = "AddPhoneNumberPanel"
    }(l = t.DeleteContactOrigin || (t.DeleteContactOrigin = {})),
    function(e) {
        e[e.AddPhoneNumberPanel = 0] = "AddPhoneNumberPanel"
    }(c = t.UpdateContactOrigin || (t.UpdateContactOrigin = {})),
    function(e) {
        e[e.GroupProfile = 0] = "GroupProfile",
        e[e.ChatShareLinkButton = 1] = "ChatShareLinkButton",
        e[e.MyProfile = 2] = "MyProfile",
        e[e.AddToGroupPanel = 3] = "AddToGroupPanel"
    }(t.ShareInviteOrigin || (t.ShareInviteOrigin = {})),
    function(e) {
        e[e.Greet = 0] = "Greet",
        e[e.Message = 1] = "Message",
        e[e.None = 2] = "None"
    }(d = t.GreetActionType || (t.GreetActionType = {})),
    function(e) {
        e[e.Retry = 0] = "Retry",
        e[e.Fetch = 1] = "Fetch"
    }(u = t.PresenceActions || (t.PresenceActions = {})),
    function(e) {
        e[e.Contact = 0] = "Contact",
        e[e.Conversation = 1] = "Conversation"
    }(g = t.FavoriteActionType || (t.FavoriteActionType = {})),
    function(e) {
        e[e.AcceptInvite = 0] = "AcceptInvite",
        e[e.DeclineInvite = 1] = "DeclineInvite",
        e[e.Favorite = 2] = "Favorite",
        e[e.Unfavorite = 3] = "Unfavorite",
        e[e.Add = 4] = "Add",
        e[e.Delete = 5] = "Delete",
        e[e.Greet = 6] = "Greet",
        e[e.Block = 7] = "Block",
        e[e.Unblock = 8] = "Unblock",
        e[e.GetContacts = 9] = "GetContacts",
        e[e.GetInvites = 10] = "GetInvites",
        e[e.RemoveDevice = 11] = "RemoveDevice",
        e[e.Presence = 12] = "Presence",
        e[e.Update = 13] = "Update",
        e[e.MergeContactWithPstnContact = 14] = "MergeContactWithPstnContact",
        e[e.SyncABContactsRefreshClicked = 15] = "SyncABContactsRefreshClicked"
    }(h || (h = {})),
    function(e) {
        e[e.Success = 0] = "Success",
        e[e.Error = 1] = "Error"
    }(p || (p = {}));
    t.ContactsTelemetryHelper = new class {
        acceptInviteSuccess(e) {
            const t = this._getBaseAttributes(h.AcceptInvite, p.Success)
              , i = this._getBasePiiAttributes(e);
            this._track(t, i)
        }
        mergeContactWithPstnContact(e) {
            const t = this._getBaseAttributes(h.MergeContactWithPstnContact, p.Success)
              , i = this._getBasePiiAttributes(e);
            this._track(t, i)
        }
        acceptInviteError(e, t) {
            const i = this._getBaseAttributes(h.AcceptInvite, p.Error)
              , n = this._getBasePiiAttributes(e);
            this._setError(i, t),
            this._track(i, n)
        }
        declineInviteSuccess(e) {
            const t = this._getBaseAttributes(h.DeclineInvite, p.Success)
              , i = this._getBasePiiAttributes(e);
            this._track(t, i)
        }
        declineInviteError(e, t) {
            const i = this._getBaseAttributes(h.DeclineInvite, p.Error)
              , n = this._getBasePiiAttributes(e);
            this._setError(i, t),
            this._track(i, n)
        }
        addContactSuccess(e, t) {
            const i = this._getBaseAttributes(h.Add, p.Success)
              , n = this._getBasePiiAttributes(e);
            i.Origin = a[t],
            i.IsPstn = o.isPhoneMri(e),
            this._track(i, n)
        }
        addContactError(e, t, i) {
            const n = this._getBaseAttributes(h.Add, p.Error)
              , s = this._getBasePiiAttributes(e);
            n.Origin = a[t],
            n.IsPstn = o.isPhoneMri(e),
            this._setError(n, i),
            this._track(n, s)
        }
        updateContactSuccess(e, t) {
            const i = this._getBaseAttributes(h.Update, p.Success)
              , n = this._getBasePiiAttributes(e);
            i.Origin = c[t],
            i.IsPstn = o.isPhoneMri(e),
            this._track(i, n)
        }
        updateContactError(e, t, i) {
            const n = this._getBaseAttributes(h.Update, p.Error)
              , s = this._getBasePiiAttributes(e);
            n.Origin = c[t],
            n.IsPstn = o.isPhoneMri(e),
            this._setError(n, i),
            this._track(n, s)
        }
        blockContactSuccess(e) {
            const t = this._getBaseAttributes(h.Block, p.Success)
              , i = this._getBasePiiAttributes(e);
            this._track(t, i)
        }
        blockContactError(e, t) {
            const i = this._getBaseAttributes(h.Block, p.Error)
              , n = this._getBasePiiAttributes(e);
            this._setError(i, t),
            this._track(i, n)
        }
        unblockContactSuccess(e) {
            const t = this._getBaseAttributes(h.Unblock, p.Success)
              , i = this._getBasePiiAttributes(e);
            this._track(t, i)
        }
        unblockContactError(e, t) {
            const i = this._getBaseAttributes(h.Unblock, p.Error)
              , n = this._getBasePiiAttributes(e);
            this._setError(i, t),
            this._track(i, n)
        }
        deleteContactSuccess(e, t) {
            const i = this._getBaseAttributes(h.Delete, p.Success)
              , n = this._getBasePiiAttributes(e);
            i.Origin = l[t],
            this._track(i, n)
        }
        deleteContactError(e, t, i) {
            const n = this._getBaseAttributes(h.Delete, p.Error)
              , o = this._getBasePiiAttributes(e);
            n.Origin = l[t],
            this._setError(n, i),
            this._track(n, o)
        }
        favoriteSuccess(e, t, i) {
            const n = this._getBaseAttributes(h.Favorite, p.Success)
              , o = this._getBasePiiAttributes(e);
            n.IsGroup = i,
            n.Type = g[t],
            this._track(n, o)
        }
        favoriteError(e, t, i, n) {
            const o = this._getBaseAttributes(h.Favorite, p.Error)
              , s = this._getBasePiiAttributes(e);
            o.IsGroup = i,
            o.Type = g[t],
            this._setError(o, n),
            this._track(o, s)
        }
        unfavoriteSuccess(e, t, i) {
            const n = this._getBaseAttributes(h.Unfavorite, p.Success)
              , o = this._getBasePiiAttributes(e);
            n.IsGroup = i,
            n.Type = g[t],
            this._track(n, o)
        }
        unfavoriteError(e, t, i, n) {
            const o = this._getBaseAttributes(h.Unfavorite, p.Error)
              , s = this._getBasePiiAttributes(e);
            o.IsGroup = i,
            o.Type = g[t],
            this._setError(o, n),
            this._track(o, s)
        }
        getContactsSuccess(e, t, i, n, o, s, r=0) {
            const a = this._getBaseAttributes(h.GetContacts, p.Success);
            a.NumContacts = e,
            a.NumBlockedContacts = t,
            a.SyncType = i ? "Full" : "Delta",
            a.Duration = o,
            a.IsFromServer = s,
            a.RetryCount = r,
            void 0 !== n && (a.DeltaSyncETag = n),
            this._track(a, {})
        }
        getContactsError(e, t, i, n, o) {
            const s = this._getBaseAttributes(h.GetContacts, p.Error);
            s.SyncType = o ? "Full" : "Delta",
            s.Duration = t,
            s.IsFromServer = i,
            s.RetryCount = n,
            this._setError(s, e),
            this._track(s, {})
        }
        getInvitesSuccess(e, t) {
            const i = this._getBaseAttributes(h.GetInvites, p.Success);
            i.Duration = e,
            i.IsFromServer = t,
            this._track(i, {})
        }
        getInvitesError(e, t, i) {
            const n = this._getBaseAttributes(h.GetInvites, p.Error);
            n.Duration = t,
            n.IsFromServer = i,
            this._setError(n, e),
            this._track(n, {})
        }
        removeDeviceError(e) {
            const t = this._getBaseAttributes(h.RemoveDevice, p.Error);
            this._setError(t, e),
            this._track(t, {})
        }
        greetContact(e, t) {
            const i = this._getBaseAttributes(h.Greet, p.Success)
              , n = this._getBasePiiAttributes(e);
            i.GreetActionType = d[t],
            this._track(i, n)
        }
        fetchContactPresenceFailure(e, t, i, n, o=0, s=0) {
            const r = this._getBaseAttributes(h.Presence, p.Error);
            r.PresenceFetchActionType = u[e],
            r.IsAllContactFetch = t,
            r.RetryCount = o,
            r.FailedUserCount = s,
            i && (r.ErrorCode = i),
            n && (r.ErrorMessage = n),
            this._track(r, {})
        }
        syncABContactsRefreshClicked() {
            const e = this._getBaseAttributes(h.SyncABContactsRefreshClicked, p.Success);
            this._track(e, {})
        }
        _getBaseAttributes(e, t) {
            const i = {};
            return i.Action = h[e],
            i.Status = p[t],
            i
        }
        _getBasePiiAttributes(e) {
            const t = {}
              , i = o.getSkypeIdFromMri(e);
            return i && (t.ContactSkypeId = {
                value: i,
                piiKind: n.AWTPiiKind.Identity
            }),
            t
        }
        _setError(e, t) {
            void 0 !== t.statusCode && (e.ErrorCode = t.statusCode),
            void 0 !== t.statusText && (e.ErrorMessage = t.statusText)
        }
        _track(e, t) {
            r.track(new s.ContactsTelemetryEvent(e,t))
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(3)
      , r = i(34);
    !function(e) {
        e.ACTION_DEFAULT = "_default_",
        e.CHAT_CATEGORY_IDENTIFIER = "ChatCategoryIdentifier",
        e.CHAT_ACTION_THUMBSUP_IDENTIFIER = "ChatActionThumbsUpIdentifier",
        e.CHAT_ACTION_REPLY_IDENTIFIER = "ChatActionReplyIdentifier",
        e.CHAT_ACTION_MARK_AS_READ_IDENTIFIER = "ChatActionMarkAsReadIdentifier",
        e.CHAT_ACTION_THUMBSUP_ICON = "notification_action_like",
        e.CHAT_ACTION_REPLY_ICON = "notification_action_reply",
        e.E2EE_CATEGORY_IDENTIFIER = "E2eeCategoryIdentifier",
        e.CHAT_ERROR_CATEGORY_IDENTIFIER = "ChatErrorCategoryIdentifier",
        e.CALL_CATEGORY_IDENTIFIER = "CallCategoryIdentifier",
        e.CALL_ACTION_ACCEPT_IDENTIFIER = "CallActionAcceptIdentifier",
        e.CALL_ACTION_REJECT_IDENTIFIER = "CallActionRejectIdentifier",
        e.CALL_ACTION_DEFAULT = "_default_",
        e.CALL_ACTION_ACCEPT_ICON = "notification_action_call",
        e.CALL_ACTION_REJECT_ICON = "call_btn_end",
        e.MISSED_CALL_CATEGORY_IDENTIFIER = "MissedCallCategoryIdentifier",
        e.MISSED_CALL_BACK_IDENTIFIER = "MissedCallBackIdentifier",
        e.MISSED_CALL_DEFAULT = "_default_",
        e.MISSED_P2P_CALL_CATEGORY_IDENTIFIER = "MissedP2PCallCategoryIdentifier",
        e.GO_LIVE_CATEGORY_IDENTIFIER = "GoLiveCategoryIdentifier",
        e.GO_LIVE_ACTION_JOIN_IDENTIFIER = "GoLiveJoinIdentifier",
        e.GO_LIVE_ACTION_DEFAULT = "_default_",
        e.CALLBACK_REMINDER_CATEGORY_IDENTIFIER = "CallbackReminderCategoryIdentifier",
        e.CALLBACK_REMINDER_ACTION_CALL_IDENTIFIER = "CallbackReminderCallIdentifier",
        e.CALLBACK_REMINDER_ACTION_DEFAULT = "_default_",
        e.DELETE_IDENTIFIER = "DeleteNotificationIdentifier",
        e.NOTIFICATION_FROM_BUBBLE = "notificationFromBubble",
        e.CLEAR_NOTIFICATION_BUBBLE_CONTEXT = "clearNotificationBubbleContext",
        e.INBOUND_VIDEO_CALL_IDENTIFIER = "InboundVideoCallIndentifier",
        e.LOGOUT_REMINDER_IDENTIFIER = "LogoutReminderIdentifier",
        e.SIGNOUT_REMINDER_IDENTIFIER = "SignOutReminderIdentifier",
        e.SIGNIN_REMINDER_IDENTIFIER = "SignInReminderIdentifier",
        e.SCHEDULED_CALL_INVITE = "ScheduledCallInvite",
        e.SCHEDULED_CALL_INVITE_EDIT = "ScheduledCallInviteEdit",
        e.SCHEDULED_CALL_INVITE_ACCEPT = "ScheduledCallInviteAccept",
        e.SCHEDULED_CALL_INVITE_DECLINE = "ScheduledCallInviteDecline",
        e.SCHEDULED_CALL_INVITE_RESPONSE = "ScheduledCallInviteResponse",
        e.SCHEDULED_CALL_PREREMINDER = "ScheduledCallPreReminder",
        e.SCHEDULED_CALL_REMINDER = "ScheduledCallReminder",
        e.POLL_PREREMINDER = "PollPreReminder",
        e.POLL_REMINDER = "PollReminder",
        e.AUTH_BACKGROUND_REFRESH_CATEGORY_IDENTIFIER = "AuthBackgroundRefreshIdentifier",
        e.PRESENCE_CHANGE_IDENTIFIER = "PresenceChangeIdentifier"
    }(t.LocalNotificationIds || (t.LocalNotificationIds = {})),
    t.descriptionForWarmCallDisposition = function(e) {
        switch (e) {
        case o.WarmCallNotificationDisposition.Wasted:
            return "Wasted";
        case o.WarmCallNotificationDisposition.AlreadyRunning:
            return "AlreadyRunning";
        case o.WarmCallNotificationDisposition.FollowedByNonWarmPush:
            return "FollowedByNonWarmPush";
        case o.WarmCallNotificationDisposition.FollowedByForegrounding:
            return "FollowedByForegrounding";
        case o.WarmCallNotificationDisposition.FollowedByCall:
            return "FollowedByCall";
        default:
            return "Unknown"
        }
    }
    ,
    t.prepareDataForNotification = function(e) {
        return n.omitBy(e, e=>!e)
    }
    ,
    t.printNotificationTrace = function(e, t) {
        s.log(o.LogTraceArea.Notifications, "Notification id: " + r.mriOrId(e.id) + " origin: " + t + " enableVibration: " + e.enableVibration + " enableLight: " + e.enableLight + " silent:" + e.silent + " sound:" + e.sound + " grouped: " + (e.groupedNotifications ? e.groupedNotifications.length : "No"))
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(6)
      , s = i(176)
      , r = i(2)
      , a = i(428)
      , l = i(326)
      , c = i(3)
      , d = i(4)
      , u = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
    t.FileSizeInformation = class {
    }
    ;
    class g {
        static formatFileSize(e, t=2) {
            let i = e;
            i < 0 && (i = 0,
            c.warn(r.LogTraceArea.FileSizeHelpers, "Invalid byte size passed: " + e));
            let o = t > 0 ? t : 0;
            if (o < 0 && (o = 0,
            c.warn(r.LogTraceArea.FileSizeHelpers, "Invalid decimal places passed: " + t)),
            0 === i)
                return {
                    value: 0,
                    unit: u[0],
                    formattedString: d.getString("FileSizeHelpers.0Bytes")
                };
            if (1 === i)
                return {
                    value: 1,
                    unit: u[0],
                    formattedString: d.getString("FileSizeHelpers.1Byte")
                };
            const s = Math.floor(Math.log(i) / Math.log(1024));
            let a = u[s];
            if (n.isUndefined(a))
                return c.warn(r.LogTraceArea.FileSizeHelpers, "Invalid byte size passed (too big): " + e),
                {
                    value: void 0,
                    unit: void 0,
                    formattedString: "too big"
                };
            const g = parseFloat((i / Math.pow(1024, s)).toFixed(o));
            return {
                value: g,
                unit: a,
                formattedString: d.getString("FileSizeHelpers.SizeDescription", {
                    size: l.toStringWithFormattedDecimalSeparator(g),
                    unit: d.getStringUnsafe("FileSizeHelpers." + a)
                })
            }
        }
        static getMaximumLimitsForType(e) {
            const t = s.getUploadContentId(e)
              , i = o.default.getAsyncMediaFeatures().storage_limits;
            if (t in i)
                return i[t];
            c.log(r.LogTraceArea.FileSizeHelpers, "Unknown limits for UploadFileType: " + e + ", StorageLimits: " + JSON.stringify(i) + ", uploadType: " + e + ", uploadContentId: " + t)
        }
        static getMaximumFileSizeForType(e) {
            const t = g.getMaximumLimitsForType(e);
            return t && t.size || 1 / 0
        }
        static getAmsUploadFileSize(e) {
            let t = e.amsUploadFullData.file.size;
            return !n.isNumber(t) && e.amsFullDataCacheInfo && (t = a.default.getSize(e.amsFullDataCacheInfo.name)),
            t
        }
    }
    t.default = g
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(506)
      , s = i(179)
      , r = i(678)
      , a = i(39);
    var l;
    !function(e) {
        e[e.ClickNewMeetNow = 1] = "ClickNewMeetNow",
        e[e.ShowEducationalScreen = 2] = "ShowEducationalScreen",
        e[e.ClickContinueOnEducationalScreen = 3] = "ClickContinueOnEducationalScreen",
        e[e.MeetNowPanelReady = 4] = "MeetNowPanelReady"
    }(t.CreateMeetNowStep || (t.CreateMeetNowStep = {})),
    function(e) {
        e[e.NavigateToConversation = 0] = "NavigateToConversation",
        e[e.Exit = 1] = "Exit"
    }(l = t.MeetNowJoinPanelResult || (t.MeetNowJoinPanelResult = {}));
    class c extends a.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._callId = e,
            this._meetNowParameters = t
        }
        getEventName() {
            return "calling_meet_now"
        }
        getAttributes() {
            const e = super.getAttributes();
            e.Action = this.getActionName(),
            this._meetNowParameters.origin && (e.Origin = s.MeetNowOrigin[this._meetNowParameters.origin]),
            this._callId && (e.CallId = this._callId),
            this._meetNowParameters.partner && (e.Partner = this._meetNowParameters.partner),
            this._meetNowParameters.windowsExpId && (e.Exp = this._meetNowParameters.windowsExpId),
            this._meetNowParameters.correlationId && (e.CorrelationId = this._meetNowParameters.correlationId);
            const t = r.default.getMeetNowSessionId();
            return t && (e.SessionId = t),
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return this._meetNowParameters.convId && (e.ConversationId = {
                value: this._meetNowParameters.convId,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.MeetNowTelemetryEventBase = c;
    t.MeetNowUriReceivedEvent = class extends c {
        constructor(e) {
            r.default.setNewMeetNowSessionId(),
            super(void 0, o.default.getMeetNowParametersFromUri(e))
        }
        getActionName() {
            return "MeetNowUriReceived"
        }
    }
    ;
    t.MeetNowDeeplinkProcessedEvent = class extends c {
        constructor(e) {
            super(void 0, e)
        }
        getActionName() {
            return "MeetNowDeeplinkProcessed"
        }
    }
    ;
    t.MeetNowErrorEvent = class extends c {
        constructor(e, t, i) {
            super(void 0, e),
            this._error = t,
            this._errorCode = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.MeetNowError = this._error,
            this._errorCode && (e.MeetNowErrorCode = this._errorCode),
            e
        }
        getActionName() {
            return "MeetNowError"
        }
    }
    ;
    t.MeetNowClickEvent = class extends c {
        constructor(e, t, i) {
            super(e, t),
            this._clickType = i
        }
        getActionName() {
            return "MeetNowClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ClickType = s.MeetNowClickType[this._clickType],
            e
        }
    }
    ;
    t.MeetNowLobbyMounted = class extends c {
        constructor(e, t) {
            super(e, t)
        }
        getActionName() {
            return "MeetNowLobbyMounted"
        }
        getAttributes() {
            return super.getAttributes()
        }
    }
    ;
    t.MeetNowClosePanelEvent = class extends c {
        constructor(e, t, i, n) {
            super(e, t),
            this._closeOrigin = i,
            this._userActionsCount = n
        }
        getActionName() {
            return "MeetNowClosePanel"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CloseOrigin = s.MeetNowClosePanelOrigin[this._closeOrigin],
            e.UserActionsCount = this._userActionsCount,
            e
        }
    }
    ;
    t.MeetNowJoinLinkPanelMountedEvent = class extends c {
        constructor(e) {
            super(void 0, e)
        }
        getActionName() {
            return "MeetNowJoinLinkPanelMounted"
        }
    }
    ;
    t.MeetNowJoinLinkPanelInputSendEvent = class extends c {
        constructor(e, t, i) {
            super(void 0, i),
            this._linkType = e,
            this._isInputValid = t
        }
        getActionName() {
            return "MeetNowJoinLinkPanelInputSend"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.LinkType = this._linkType,
            e.IsInputValid = this._isInputValid,
            e
        }
    }
    ;
    t.MeetNowCreatedOnJoinLinkPanelEvent = class extends c {
        constructor(e) {
            super(void 0, e)
        }
        getActionName() {
            return "MeetNowCreatedOnJoinLinkPanel"
        }
    }
    ;
    t.MeetNowJoinLinkPanelClosedEvent = class extends c {
        constructor(e, t, i) {
            super(void 0, e),
            this._errorCount = t,
            this._result = i
        }
        getActionName() {
            return "MeetNowJoinLinkPanelClosed"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorCount = this._errorCount,
            e.Result = l[this._result],
            e
        }
    }
    ;
    t.MeetNowAddSkypeContactEvent = class extends c {
        constructor(e, t, i) {
            super(e, t),
            this._countSkypeContactAdded = i
        }
        getActionName() {
            return "MeetNowAddSkypeContact"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CountSkypeContactAdded = this._countSkypeContactAdded,
            e
        }
    }
    ;
    t.MeetNowMeetingNameChanged = class extends c {
        constructor(e) {
            super(void 0, e)
        }
        getActionName() {
            return "MeetNowMeetingNameChanged"
        }
    }
    ;
    t.MeetNowUserNameChanged = class extends c {
        constructor(e) {
            super(void 0, e)
        }
        getActionName() {
            return "MeetNowUserNameChanged"
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(7)
      , r = i(65)
      , a = i(6)
      , l = i(79)
      , c = i(57)
      , d = i(16)
      , u = i(10)
      , g = i(227)
      , h = i(2)
      , p = i(3)
      , m = i(4)
      , S = i(20)
      , C = i(17)
      , y = i(22)
      , f = i(97)
      , _ = i(2614)
      , b = i(1505)
      , v = i(107)
      , T = i(19)
      , P = i(25)
      , A = i(9)
      , k = [f.WizardSteps.setConvInfo, f.WizardSteps.setConvParticipants];
    class I extends b.default {
        constructor(e) {
            super(e),
            void 0 === e.convId && void 0 === e.wizardSteps && this.extendContext({
                wizardSteps: k
            }),
            void 0 !== e.convId || e.creating1on1Conversation || this.extendContext({
                newGroupTelemetryScenario: new _.default
            })
        }
        goBack() {
            const e = A.newCauseId();
            p.log(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator.goBack currentStepIndex: " + this._currentStepIndex + " causeId: " + e),
            n.isUndefined(this._currentStepIndex) ? p.warn(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator.goBack called without initializing this._currentStepIndex causeId: " + e) : this._currentStepIndex < 0 ? p.warn(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator.goBack called with a negative value for this._currentStepIndex causeId: " + e) : (y.default.isUsingStackNavigationContext() || 0 === this._currentStepIndex ? this._closePanel(this._currentStepIndex, e) : this._navigateToPanel(this._currentStepIndex - 1, e),
            0 === this._currentStepIndex && (p.log(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator.goBack, finish causeId: " + e),
            this._context.newGroupTelemetryScenario && this._context.newGroupTelemetryScenario.markFunnelDropped(),
            this.finish(!1)),
            this._currentStepIndex--)
        }
        goNext() {
            const e = A.newCauseId();
            p.log(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator.goNext, causeId: " + e),
            n.isUndefined(this._currentStepIndex) ? p.warn(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator.goNext called without initializing this._currentStepIndex causeId: " + e) : (this._currentStepIndex++,
            this._context.wizardSteps && n.isNumber(this._context.wizardSteps[this._currentStepIndex]) ? this._navigateToPanel(this._currentStepIndex, e) : this._context.convId ? this._context.stayOnCurrentScreenOnceFinished ? (this._closePanel(this._currentStepIndex - 1, e),
            this.finish(!0)) : c.default.ensureConversationLoadedOrFaked(this._context.convId, h.ConversationFakedOrigin.CreateChatScenario).then(t=>{
                this._navigateToConversation({
                    causeId: e,
                    convId: this._context.convId,
                    origin: this._context.navigationOrigin,
                    isNewConversation: !0
                }),
                this.finish(!0)
            }
            ) : this._initiateConversationCreation().then(()=>{
                this._context.newGroupTelemetryScenario && this._context.newGroupTelemetryScenario.finish();
                let e = this._context.creating1on1Conversation ? "CreateOrModifyChatScenarioNavigator.ConversationOpenedAccessibilityLabel" : "CreateOrModifyChatScenarioNavigator.GroupCreatedAccessibilityLabel";
                o.Accessibility.announceForAccessibility(m.getString(e, {
                    conversationName: this._context.convName || ""
                })),
                this.finish(!0)
            }
            ).catch(t=>{
                if (this._context.newGroupTelemetryScenario) {
                    const e = t && t.errorMessage
                      , i = t && t.errorCode
                      , n = t && t.statusText
                      , o = t && t.statusCode
                      , s = e || i || n || o ? void 0 : JSON.stringify(t);
                    this._context.newGroupTelemetryScenario.fail(e, i, o, n, s)
                }
                p.warn(h.LogTraceArea.GenericUnsafe, "initiateConversationCreation failed: " + T.errorAsString(t)),
                C.navigateToHub(e),
                this._rootViewId && r.default.showErrorAlert(m.getString("CreateOrModifyChatScenarioNavigator.CreateConversationError"), this._rootViewId),
                this.finish(!1)
            }
            ))
        }
        goEnd() {
            this.finish(!0)
        }
        start(e) {
            super.start(e);
            const t = A.newCauseId();
            p.log(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator.start, causeId: " + t),
            n.isEmpty(this._context.wizardSteps),
            this._currentStepIndex = 0,
            this._context.newGroupTelemetryScenario && this._context.newGroupTelemetryScenario.start(a.default.getS4LUiExperimentalConfigString(), this._context.navigationOrigin, n.map(this.context.wizardSteps, e=>f.WizardSteps[e]).toString()),
            this._navigateToPanel(this._currentStepIndex, t)
        }
        _navigateToPanel(e, t) {
            const i = this._context.wizardSteps && this._context.wizardSteps[e];
            switch (p.log(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator._navigateToPanel stepIndex: " + e + " wizardStep: " + i + " causeId: " + t),
            i) {
            case f.WizardSteps.setConvInfo:
                C.navigateToSetConversationInfoPanel(this, {
                    rootViewId: this._rootViewId || u.MainRootViewId
                }, this._context.presentedFromSuperComposer ? v.StackNavigationDirection.Push : void 0);
                break;
            case f.WizardSteps.setConvParticipants:
                C.navigateToSetConversationParticipantsPanel(this, !!this._context.creating1on1Conversation && !!this._context.useSuperComposerFor1on1Conversation, {
                    rootViewId: this._rootViewId || u.MainRootViewId
                }, this._context.presentedFromSuperComposer ? v.StackNavigationDirection.Push : void 0)
            }
        }
        _closePanel(e, t) {
            switch (p.log(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator._closePanel, causeId: " + t),
            this._context.wizardSteps && this._context.wizardSteps[e]) {
            case f.WizardSteps.setConvInfo:
                C.closeSetConversationInfoPanel(t, {
                    rootViewId: this._rootViewId || u.MainRootViewId
                });
                break;
            case f.WizardSteps.setConvParticipants:
                C.closeSetConversationParticipantsPanel(t, {
                    rootViewId: this._rootViewId || u.MainRootViewId
                })
            }
        }
        _getPotentialExistingConversation(e) {
            return this.context.convName || this._context.createCellularSmsConversation ? s.Resolved([]) : g.ConversationUtils.getPotentialExistingConversations(e, !0)
        }
        _initiateConversationCreation() {
            const e = A.newCauseId();
            p.log(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator._initiateConversationCreation, causeId: " + e);
            const t = this._context.invitedUsersMris || [];
            return this._getPotentialExistingConversation(t).then(i=>{
                if (!n.isEmpty(i))
                    return this._context.newGroupTelemetryScenario && (this._context.newGroupTelemetryScenario.setParticipantCount(t.length),
                    this._context.newGroupTelemetryScenario.setExistingConversationFound(),
                    this._context.newGroupTelemetryScenario.markFunnelCompleted()),
                    c.default.ensureConversationLoadedOrFaked(i[0].id, h.ConversationFakedOrigin.CreateChatScenario).then(t=>{
                        this._navigateToConversation({
                            convId: i[0].id,
                            origin: this._context.navigationOrigin,
                            causeId: e
                        })
                    }
                    );
                if (this._context.creating1on1Conversation) {
                    const i = t[0];
                    return c.default.ensureConversationLoadedOrFaked(i, h.ConversationFakedOrigin.CreateChatScenario).then(t=>{
                        this._navigateToConversation({
                            convId: i,
                            origin: this._context.navigationOrigin,
                            isNewConversation: t,
                            causeId: e
                        })
                    }
                    )
                }
                const o = {};
                o[S.getSkypeMri()] = P.ThreadMemberAccessType.Admin;
                const s = this._context.navigationOrigin === h.NavigationConversationOrigin.NewModeratedGroup
                  , r = {};
                let a;
                return n.each(this._context.invitedUsersMris, e=>{
                    r[e] = d.isPhoneMri(e) || s ? P.ThreadMemberAccessType.User : P.ThreadMemberAccessType.Admin
                }
                ),
                this._context.newGroupTelemetryScenario && (this._context.newGroupTelemetryScenario.setParticipantCount(n.keys(r).length),
                this._context.newGroupTelemetryScenario.markFunnelCompleted()),
                g.ConversationUtils.createConversation(o, r, this._context.navigationOrigin, this._context.convName, s).then(e=>(a = e.threadId,
                g.ConversationUtils.setConversationProps(a, this._context.convColor, this._context.convAvatar))).then(()=>(this._context.newGroupTelemetryScenario && (this._context.newGroupTelemetryScenario.markConversationCreated(),
                this.extendContext({
                    convId: a
                })),
                c.default.ensureConversationLoadedOrFaked(a, h.ConversationFakedOrigin.CreateChatScenario).then(t=>{
                    this._maybeGenerateJoinLink(t, a),
                    this._navigateToConversation({
                        causeId: e,
                        convId: a,
                        origin: this._context.navigationOrigin,
                        isNewConversation: !0
                    })
                }
                )))
            }
            )
        }
        _maybeGenerateJoinLink(e, t) {
            this.context.shareLink && !e && a.default.getS4LMessagingFeaturesNoSubscription().enableNewConversationCreation && l.setJoinEnabled(t, !0)
        }
        _navigateToConversation(e) {
            p.log(h.LogTraceArea.Navigation, "CreateOrModifyChatScenarioNavigator._navigateToConversation, causeId: " + e.causeId),
            C.navigateToConversation(e),
            y.default.isUsingStackNavigationContext() || C.closeGenericDesktopModal(e.causeId, {
                rootViewId: this._rootViewId || u.MainRootViewId
            })
        }
    }
    t.default = I
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(19)
      , s = i(18)
      , r = i(39);
    !function(e) {
        e.ShowFreeTrial = "show_free_trial",
        e.ClickFreeTrial = "click_free_trial"
    }(t.PurchaseFlowStep || (t.PurchaseFlowStep = {}));
    class a extends r.TelemetryEventBase {
        getEventName() {
            return "s4l_payments"
        }
        getAriaTenantTokenOverride() {
            return s.getAriaCommerceTenantToken()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    !function(e) {
        e.IsReady = "isReady",
        e.NotReady = "notReady",
        e.RequestPaymentSuccess = "requestPaymentSuccess",
        e.RequestPaymentFail = "requestPaymentFail"
    }(t.GPayStep || (t.GPayStep = {}));
    t.GooglePayStep = class extends a {
        constructor(e, t, i) {
            super(),
            this._props = {},
            this._props.step = e,
            this._props.errorCode = null != t ? t : "",
            this._props.errorMessage = null != i ? i : ""
        }
        getActionName() {
            return "gpay_step"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._props)
        }
    }
    ;
    t.PaymentStep = class extends a {
        constructor(e, t={}) {
            super(),
            this._props = t,
            this._props.step = e
        }
        getActionName() {
            return "payment_step"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._props)
        }
    }
    ;
    t.PurchaseStep = class extends a {
        constructor(e, t={}) {
            super(),
            this._props = t,
            this._props.step = e
        }
        getActionName() {
            return "purchase_step"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._props)
        }
    }
    ;
    class l extends a {
        constructor(e, t, i, n, o, s) {
            super(),
            this._timeSpent = e,
            this._buttonType = t,
            this._isNative = i,
            this._product = n,
            this._productCurrency = o,
            this._appStoreCountry = s
        }
        getActionName() {
            return "buy_credit_click"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.TimeSpent = this._timeSpent / 1e3,
            e.ButtonType = this._buttonType,
            e.IsNative = this._isNative,
            e.Product = this._product,
            e.ProductCurrency = this._productCurrency || "",
            e.AppStoreCountry = this._appStoreCountry || "",
            e
        }
    }
    t.Purchase = l;
    t.SubscriptionPurchase = class extends l {
        getActionName() {
            return "buy_subscription_click"
        }
    }
    ;
    t.SkypeNumberPurchase = class extends l {
        constructor(e, t, i, n, o, s, r, a, l) {
            super(e, t, i, n, o, s),
            this._snCountryRegion = r,
            this._snArea = a,
            this._snPrefix = l
        }
        getActionName() {
            return "buy_skypenumber_click"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.CountryRegion = o.toUpper(this._snCountryRegion) || "",
            e.Area = o.toUpper(this._snArea) || "",
            e.Prefix = this._snPrefix || "",
            e
        }
    }
    ;
    class c extends a {
        constructor(e) {
            super(),
            this.payload = e
        }
        getActionName() {
            return "purchase_dialog_open"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.DialogId = this.payload.dialogId,
            e
        }
    }
    t.PurchaseConfirmationDialog = c;
    t.PurchaseConfirmationDialogClick = class extends c {
        constructor(e) {
            super(e),
            this.payload = e
        }
        getActionName() {
            return "purchase_dialog_click"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ConfirmationDuration = this.payload.confirmationDuration / 1e3,
            e.ButtonType = this.payload.buttonType,
            e
        }
    }
    ;
    t.NativeProductFetch = class extends a {
        constructor(e, t, i) {
            super(),
            this._duration = e,
            this._isSuccess = t,
            this._error = i
        }
        getActionName() {
            return "fetch_native_product"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Duration = this._duration,
            e.IsSuccess = this._isSuccess,
            this._error && (e.Error = this._error),
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e) {
            super(),
            this._startupTime = e
        }
        getEventName() {
            return "startupComplete"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.StartupTime = this._startupTime,
            e
        }
    }
    t.StartupComplete = s;
    class r extends o.TelemetryEventBase {
        constructor(e, t=!0, i=!1) {
            super(),
            this._userCount = e,
            this._success = t,
            this._cancelled = i
        }
        getEventName() {
            return "inviteUser"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Cancelled = this._cancelled,
            e.Status = this._success ? "Success" : "Failure",
            e.Count = this._userCount,
            e
        }
    }
    t.InviteUser = r;
    class a extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._domain = e,
            this._origin = t
        }
        getEventName() {
            return "unsafe_domain"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Origin: this._origin,
                Domain: this._domain
            })
        }
    }
    t.UnsafeDomain = a;
    class l extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._trackingName = e,
            this._data = t
        }
        getEventName() {
            return "dev_debug"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Name = this._trackingName,
            e.Data = this._data,
            e
        }
        shouldSend() {
            return !1
        }
    }
    t.DevDebug = l;
    class c extends o.TelemetryEventBase {
        constructor(e) {
            super(),
            this._trackingName = e
        }
        getEventName() {
            return "dev_alert"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Name = this._trackingName,
            e
        }
    }
    t.DevAlert = c;
    class d extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._tenant = e,
            this._data = t
        }
        getEventName() {
            return "rt_log"
        }
        getAriaTenantTokenOverride() {
            return this._tenant
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._data)
        }
    }
    t.LogUploadEvent = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(113)
      , o = i(39);
    var s, r, a;
    !function(e) {
        e[e.ReadReceipts = 0] = "ReadReceipts",
        e[e.ReactionPushNotifications = 1] = "ReactionPushNotifications",
        e[e.DisplayUrlPreviews = 2] = "DisplayUrlPreviews",
        e[e.OpenLinksInSkype = 3] = "OpenLinksInSkype",
        e[e.SendMessageWithEnter = 4] = "SendMessageWithEnter",
        e[e.PasteAsQuote = 5] = "PasteAsQuote",
        e[e.LastMessageAuthorAvatar = 6] = "LastMessageAuthorAvatar",
        e[e.FontSize = 7] = "FontSize",
        e[e.FileDownloadPathDesktop = 8] = "FileDownloadPathDesktop",
        e[e.ChatNotificationsWhileDND = 9] = "ChatNotificationsWhileDND",
        e[e.CallNotificationsWhileDND = 10] = "CallNotificationsWhileDND",
        e[e.EnableSubtitlesForAllCalls = 11] = "EnableSubtitlesForAllCalls",
        e[e.OnlyShowSubtitlesForOtherParticipants = 12] = "OnlyShowSubtitlesForOtherParticipants",
        e[e.AutoDownloadFiles = 13] = "AutoDownloadFiles",
        e[e.PicturePrefetch = 14] = "PicturePrefetch",
        e[e.ChatNotifications = 15] = "ChatNotifications"
    }(s = t.MessagingSettings || (t.MessagingSettings = {})),
    function(e) {
        e[e.Settings = 0] = "Settings"
    }(r = t.FontSizeChangeOrigin || (t.FontSizeChangeOrigin = {}));
    class l extends o.TelemetryEventBase {
        constructor(e) {
            super(),
            this._setting = e
        }
        getEventName() {
            return "messaging_settings"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Setting = s[this._setting],
            e
        }
    }
    class c extends l {
        constructor(e, t) {
            super(t),
            this._didEnable = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.DidEnable = this._didEnable,
            e
        }
    }
    t.MessagingToggleSetting = c,
    function(e) {
        e[e.UserAction = 0] = "UserAction",
        e[e.OptIn = 1] = "OptIn",
        e[e.UserStatusUpdate = 2] = "UserStatusUpdate",
        e[e.OptOut = 3] = "OptOut"
    }(a = t.ReadReceiptsSettingOrigin || (t.ReadReceiptsSettingOrigin = {}));
    t.ReadReceiptsToggleSetting = class extends c {
        constructor(e, t) {
            super(e, s.ReadReceipts),
            this._origin = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = a[this._origin],
            e
        }
    }
    ;
    t.ReactionPushNotificationsToggleSetting = class extends c {
        constructor(e) {
            super(e, s.ReactionPushNotifications)
        }
    }
    ;
    t.DisplayUrlPreviewsToggleSetting = class extends c {
        constructor(e) {
            super(e, s.DisplayUrlPreviews)
        }
    }
    ;
    t.OpenLinksInSkype = class extends c {
        constructor(e) {
            super(e, s.OpenLinksInSkype)
        }
    }
    ;
    t.SendMessageWithEnterToggleSetting = class extends c {
        constructor(e) {
            super(e, s.SendMessageWithEnter)
        }
    }
    ;
    t.PasteAsQuoteToggleSetting = class extends c {
        constructor(e) {
            super(e, s.PasteAsQuote)
        }
    }
    ;
    t.LastMessageAuthorAvatarToggleSetting = class extends c {
        constructor(e) {
            super(e, s.LastMessageAuthorAvatar)
        }
    }
    ;
    t.FileDownloadPathDesktopSetting = class extends l {
        constructor() {
            super(s.FileDownloadPathDesktop)
        }
    }
    ;
    t.FontSizeSetting = class extends l {
        constructor(e, t) {
            super(s.FontSize),
            this._size = e,
            this._origin = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.FontSizeValue = n.MessageStreamFontSize[this._size],
            e.Origin = r[this._origin],
            e
        }
    }
    ;
    t.CallNotificationsWhileDNDToggleSetting = class extends c {
        constructor(e) {
            super(e, s.CallNotificationsWhileDND)
        }
    }
    ;
    t.ChatNotificationsWhileDNDToggleSetting = class extends c {
        constructor(e) {
            super(e, s.ChatNotificationsWhileDND)
        }
    }
    ;
    t.EnableSubtitlesForAllCallsSetting = class extends c {
        constructor(e) {
            super(e, s.EnableSubtitlesForAllCalls)
        }
    }
    ;
    t.OnlyShowSubtitlesForOtherParticipants = class extends c {
        constructor(e) {
            super(e, s.OnlyShowSubtitlesForOtherParticipants)
        }
    }
    ;
    t.AutoDownloadFilesToggleSetting = class extends c {
        constructor(e) {
            super(e, s.AutoDownloadFiles)
        }
    }
    ;
    t.PicturePrefetchToggleSetting = class extends l {
        constructor(e) {
            super(s.PicturePrefetch),
            this._mode = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Mode = this._mode,
            e
        }
    }
    ;
    t.ChatNotificationsToggleSetting = class extends c {
        constructor(e, t) {
            super(e, s.ChatNotifications),
            this._disableChatNotificationsPeriod = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return this._disableChatNotificationsPeriod && (e.DisableChatNotificationsPeriod = this._disableChatNotificationsPeriod),
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(7)
      , r = i(6)
      , a = i(10)
      , l = i(419)
      , c = i(32)
      , d = i(21);
    var u;
    !function(e) {
        e[e.Left = 0] = "Left",
        e[e.Right = 1] = "Right"
    }(u = t.SideBar || (t.SideBar = {}));
    let g = class extends o.StoreBase {
        constructor() {
            super(),
            this._leftSideBarWidth = a.SideBarWidths.base,
            this._rightSideBarWidth = a.SideBarWidths.base,
            this._rightSideBarFloating = !1,
            d.RegisterStartupable(this, "SideBarWidthStore", [c.default])
        }
        startup() {
            return this._leftEnabled = this._resizingEnabled(u.Left),
            this._leftSideBarWidth = this._currentSideBarWidth(u.Left),
            this._rightEnabled = this._resizingEnabled(u.Right),
            this._rightSideBarWidth = this._currentSideBarWidth(u.Right),
            r.default.subscribe(()=>{
                const e = this._resizingEnabled(u.Left)
                  , t = this._resizingEnabled(u.Right);
                e === this._leftEnabled && t === this._rightEnabled || (this._leftEnabled = e,
                this.putWidth(u.Left, this._currentSideBarWidth(u.Left), !1),
                this._rightEnabled = t,
                this.putWidth(u.Right, this._currentSideBarWidth(u.Right), !1),
                this.trigger())
            }
            ),
            s.Resolved()
        }
        putWidth(e, t, i=!0) {
            let n = !1;
            e === u.Left ? this._leftSideBarWidth !== t && (this._leftSideBarWidth = t,
            n = i,
            c.default.setUserPreferencesLocal({
                leftPanelExpandedWidth: t
            })) : e === u.Right && this._rightSideBarWidth !== t && (this._rightSideBarWidth = t,
            n = i,
            c.default.setUserPreferencesLocal({
                rightPanelExpandedWidth: t
            })),
            n && this.trigger()
        }
        putRightSideBarFloating(e) {
            this._rightSideBarFloating !== e && (this._rightSideBarFloating = e,
            this.trigger())
        }
        getWidth(e=u.Left, t=!0) {
            return this._intGetWidth(e, t)
        }
        getWidthNoSubscription(e=u.Left, t=!0) {
            return this._intGetWidth(e, t)
        }
        resizingEnabled(e) {
            return e === u.Left ? this._leftEnabled : e === u.Right && this._rightEnabled
        }
        rightSideBarFloating() {
            return this._rightSideBarFloating
        }
        rightSideBarFloatingNoSubscription() {
            return this._rightSideBarFloating
        }
        _intGetWidth(e, t=!0) {
            switch (e) {
            case u.Left:
                return this._leftSideBarWidth;
            case u.Right:
                return t || !this._rightSideBarFloating ? this._rightSideBarWidth : 0
            }
            return a.SideBarWidths.base
        }
        _resizingEnabled(e) {
            return e === u.Left ? r.default.getS4LUiFeatures().leftSideBarResizeMode > l.SideBarResizeMode.None : !!u.Right
        }
        _currentSideBarWidth(e) {
            return e === u.Left ? this._leftEnabled && c.default.getUserPreferencesLocal().leftPanelExpandedWidth || a.SideBarWidths.base : e === u.Right && this._rightEnabled && c.default.getUserPreferencesLocal().rightPanelExpandedWidth || a.SideBarWidths.base
        }
    }
    ;
    n.__decorate([o.autoSubscribe], g.prototype, "getWidth", null),
    n.__decorate([o.disableWarnings], g.prototype, "getWidthNoSubscription", null),
    n.__decorate([o.autoSubscribe], g.prototype, "resizingEnabled", null),
    n.__decorate([o.autoSubscribe], g.prototype, "rightSideBarFloating", null),
    n.__decorate([o.disableWarnings], g.prototype, "rightSideBarFloatingNoSubscription", null),
    g = n.__decorate([o.AutoSubscribeStore], g);
    let h = new g;
    t.default = h
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(116)
      , r = i(151)
      , a = i(27)
      , l = i(5)
      , c = i(22)
      , d = i(8)
      , u = i(23)
      , g = i(11)
      , h = i(92)
      , p = i(67)
      , m = i(201)
      , S = l.lazyProperties({
        userPresent: ()=>o.Styles.createTextStyle({
            backgroundColor: d.Color.available
        }),
        userAway: ()=>o.Styles.createTextStyle({
            backgroundColor: d.Color.away
        }),
        userDnd: ()=>o.Styles.createTextStyle({
            backgroundColor: d.Color.red
        }),
        userInvisible: ()=>o.Styles.createTextStyle({
            backgroundColor: d.Color.gray300
        }),
        userIdle: ()=>o.Styles.createTextStyle({
            backgroundColor: d.Color.available
        })
    });
    class C {
        static getStyles(e, t) {
            let i, s, r = e + "_" + (n.isUndefined(t) ? "none" : t);
            if (C._cachedIconStyles[r])
                return C._cachedIconStyles[r];
            e <= p.UserIconSize.Size24 ? (i = 8,
            s = -2) : e >= p.UserIconSize.Size100 ? (i = 15,
            s = e / 8 - 7) : (i = Math.min(10, Math.floor(e / 4)),
            s = e >= p.UserIconSize.Size60 ? i / 5 : -1);
            return C._cachedIconStyles[r] = {
                containerStyle: o.Styles.createViewStyle({
                    width: e,
                    height: e,
                    justifyContent: "center",
                    overflow: "visible"
                }),
                iconStyle: o.Styles.createViewStyle({
                    width: e,
                    height: e,
                    alignItems: "center"
                }),
                iconRoundStyle: o.Styles.createViewStyle({
                    width: e,
                    height: e,
                    alignItems: "center",
                    borderRadius: e / 2
                }),
                iconRoundedRectStyle: o.Styles.createViewStyle({
                    width: e,
                    height: e,
                    alignItems: "center",
                    borderRadius: Math.ceil(e / 6)
                }),
                image: o.Styles.createImageStyle({
                    width: e,
                    height: e,
                    borderRadius: e / 2
                }),
                imageRoundedRect: o.Styles.createImageStyle({
                    width: e,
                    height: e,
                    borderRadius: n.isUndefined(t) ? Math.ceil(e / 6) : t
                }),
                userStatus: o.Styles.createViewStyle({
                    position: "absolute",
                    bottom: s,
                    right: s,
                    borderRadius: (i + 4) / 2,
                    borderColor: d.Color.white,
                    borderStyle: "solid",
                    borderWidth: 2,
                    width: i + 4,
                    height: i + 4,
                    alignItems: "center",
                    justifyContent: "center"
                }, !1),
                userStatusHover: o.Styles.createViewStyle({
                    borderRadius: (i + 4) / 2,
                    width: i + 4,
                    height: i + 4,
                    alignItems: "center",
                    justifyContent: "center"
                }, !1),
                privateConversationBadge: o.Styles.createViewStyle({
                    position: "absolute",
                    bottom: 0,
                    right: 0,
                    borderRadius: 22,
                    borderColor: d.Color.white,
                    borderStyle: "solid",
                    borderWidth: 2,
                    width: 44,
                    height: 44,
                    alignItems: "center",
                    justifyContent: "center"
                }, !1),
                presenceSize: i
            },
            C._cachedIconStyles[r]
        }
        static getFontSizeStyles(e, t) {
            const i = Math.ceil(e / (e <= p.UserIconSize.Size40 ? 3 : 4));
            let n = C._cachedFontSizeStyles[i];
            return n || (n = o.Styles.createTextStyle({
                fontSize: i,
                font: u.font.uiDisplayBold,
                color: d.Color.white
            }, !1),
            C._cachedFontSizeStyles[i] = n),
            [n, o.Styles.createTextStyle({
                color: t
            }, !1)]
        }
        static getBlockedOverlayStyles(e) {
            const t = Math.min(18, Math.floor(e / 3));
            if (C._cachedBlockedOverlayStyles[t])
                return C._cachedBlockedOverlayStyles[t];
            return C._cachedBlockedOverlayStyles[t] = {
                blockedStyle: o.Styles.createViewStyle({
                    position: "absolute",
                    bottom: 0,
                    right: 0,
                    borderRadius: (t + 4) / 2,
                    backgroundColor: d.Color.white,
                    borderColor: d.Color.white,
                    borderStyle: "solid",
                    borderWidth: 2,
                    width: t + 4,
                    height: t + 4,
                    alignItems: "center",
                    justifyContent: "center"
                }),
                blockedSize: t
            },
            C._cachedBlockedOverlayStyles[t]
        }
        static getBackgroundColor(e) {
            return h.useAccessibleThemeNoSubscription() ? d.Color.accessibleBackground : c.default.isUsingStackNavigationContextNoSubscription() ? e ? d.Color.gray400 : d.Color.gray50 : e ? d.Color.gray400 : d.Color.gray100
        }
        static getCachedBackgroundColorStyle(e, t) {
            let i;
            return i = e || this.getBackgroundColor(t),
            this._backgroundColorStyleCache[i] || (this._backgroundColorStyleCache[i] = o.Styles.createViewStyle({
                backgroundColor: i
            })),
            this._backgroundColorStyleCache[i]
        }
        static getCachedBorderColorStyle(e) {
            return e || (e = d.Color.blue),
            this._borderColorStyleCache[e] || (this._borderColorStyleCache[e] = o.Styles.createViewStyle({
                borderColor: e,
                borderWidth: 2,
                borderStyle: "solid"
            })),
            this._borderColorStyleCache[e]
        }
        static getCachedIconColorStyle(e) {
            return e || (e = d.Color.blue),
            this._iconColorStyleCache[e] || (this._iconColorStyleCache[e] = o.Styles.createTextStyle({
                color: e
            })),
            this._iconColorStyleCache[e]
        }
        static getIconColor(e) {
            return e || (e = d.Color.blue),
            e
        }
        static getCachedPresenceBorderColorStyle(e) {
            return this._cachedPresenceBorderStyles[e] || (this._cachedPresenceBorderStyles[e] = o.Styles.createViewStyle({
                borderColor: e
            })),
            this._cachedPresenceBorderStyles[e]
        }
        static renderPresenceIcon(e, t, i, o) {
            if (!n.isUndefined(e))
                return this.getPresenceIcon(e, t.userStatus, t.presenceSize, i, o)
        }
        static getPresenceIcon(e, t, i, l, c) {
            let u, h;
            if (n.isUndefined(e))
                return;
            switch (m.maskedUserStatus(e)) {
            case s.UserStatus.Online:
                u = S.userPresent;
                break;
            case s.UserStatus.Busy:
                u = S.userDnd,
                h = g.SkypeIcon.PresenceDND;
                break;
            case s.UserStatus.Away:
                u = S.userAway,
                h = g.SkypeIcon.PresenceAway;
                break;
            case s.UserStatus.Offline:
            case s.UserStatus.Hidden:
                u = S.userInvisible,
                h = g.SkypeIcon.PresenceInvisible;
                break;
            case s.UserStatus.Idle:
                u = S.userIdle,
                h = g.SkypeIcon.PresenceInvisible;
                break;
            default:
                return
            }
            const p = [t, u];
            l && p.push(C.getCachedPresenceBorderColorStyle(l));
            const y = h ? o.createElement(a.default, {
                icon: h,
                size: i,
                color: d.Color.white
            }) : void 0;
            return o.createElement(r.HoverableView, {
                style: p,
                title: c,
                key: "presence",
                importantForAccessibility: o.Types.ImportantForAccessibility.NoHideDescendants,
                accessibilityTraits: o.Types.AccessibilityTrait.None,
                tabIndex: -1
            }, y)
        }
        static getIconSize(e=p.AvatarIconSize.Size40) {
            switch (e) {
            case p.AvatarIconSize.Size24:
                return {
                    user: p.UserIconSize.Size24,
                    conversation: p.ConversationIconSize.Size24
                };
            case p.AvatarIconSize.Size36:
                return {
                    user: p.UserIconSize.Size36,
                    conversation: p.ConversationIconSize.Size36
                };
            case p.AvatarIconSize.Size50:
                return {
                    user: p.UserIconSize.Size50,
                    conversation: p.ConversationIconSize.Size50
                };
            case p.AvatarIconSize.Size60:
                return {
                    user: p.UserIconSize.Size60,
                    conversation: p.ConversationIconSize.Size60
                };
            default:
            case p.AvatarIconSize.Size40:
                return {
                    user: p.UserIconSize.Size40,
                    conversation: p.ConversationIconSize.Size40
                }
            }
        }
    }
    C._backgroundColorStyleCache = {},
    C._borderColorStyleCache = {},
    C._iconColorStyleCache = {},
    C._cachedPresenceBorderStyles = {},
    C._cachedIconStyles = {},
    C._cachedFontSizeStyles = {},
    C._cachedBlockedOverlayStyles = {},
    e.exports = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(16)
      , o = i(101)
      , s = i(520)
      , r = i(25)
      , a = i(39);
    class l extends a.TelemetryEventBase {
        constructor(e, t, i, o) {
            super(),
            this._mediaBarItem = e,
            this._isActive = t,
            this._conversationId = i,
            this._origin = o,
            this._isGroupConversation = n.isGroupConversation(this._conversationId),
            this._isEncryptedConversation = n.isEncryptedThread(this._conversationId)
        }
        getEventName() {
            return "messaging_media_bar"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.MediaBarItem = this._mediaBarItem,
            e.IsActive = this._isActive,
            e.IsGroupConversation = this._isGroupConversation,
            e.IsEncryptedConversation = this._isEncryptedConversation,
            e.Origin = s.MediaBarItemOrigin[this._origin],
            e
        }
    }
    var c;
    t.MediaBarItemPressed = l,
    function(e) {
        e[e.MediaPickerItem = 0] = "MediaPickerItem",
        e[e.FilePickerItem = 1] = "FilePickerItem",
        e[e.MessageComposer = 2] = "MessageComposer",
        e[e.DesktopGalleryPanel = 3] = "DesktopGalleryPanel",
        e[e.GalleryMediaList = 4] = "GalleryMediaList",
        e[e.DragAndDropToMessagePanel = 5] = "DragAndDropToMessagePanel",
        e[e.DragAndDropToRecentConversationsLists = 6] = "DragAndDropToRecentConversationsLists",
        e[e.DragAndDropToAvatarPicker = 7] = "DragAndDropToAvatarPicker",
        e[e.DragAndDropToGallery = 8] = "DragAndDropToGallery",
        e[e.CapturePreview = 9] = "CapturePreview",
        e[e.MediaPreview = 10] = "MediaPreview"
    }(c = t.FilePickerOrigin || (t.FilePickerOrigin = {}));
    class d extends a.TelemetryEventBase {
        constructor(e, t, i, n) {
            super(),
            this._origin = e,
            this._limitValue = t,
            this._wasOverLimit = i,
            this._filesExtensions = n
        }
        getEventName() {
            return "messaging_file_picker"
        }
        getAttributes() {
            let e = super.getAttributes();
            e.Origin = c[this._origin],
            e.LimitValue = this._limitValue,
            e.WasOverLimit = this._wasOverLimit;
            const t = {}
              , i = this._filesExtensions.length;
            for (let e = 0; e < i; e++) {
                const i = this._filesExtensions[e].toLowerCase()
                  , n = o.getFileType(i)
                  , s = r.UploadFileType[n] + "Count";
                t.hasOwnProperty(s) || (t[s] = 0),
                t[s]++
            }
            return e = Object.assign(Object.assign({}, e), t),
            e.TotalCount = i,
            e
        }
    }
    t.FilesSentViaPicker = d;
    class u extends a.TelemetryEventBase {
        getEventName() {
            return "messaging_audio_message_cancel"
        }
    }
    t.AudioMessageCancelEvent = u
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(18)
      , s = i(39);
    var r, a;
    !function(e) {
        e[e.ContactsIcon = 0] = "ContactsIcon",
        e[e.SettingsButton = 1] = "SettingsButton",
        e[e.CallButton = 2] = "CallButton",
        e[e.SmsButton = 3] = "SmsButton",
        e[e.SaveContactButton = 4] = "SaveContactButton"
    }(r = t.DialerPanelClickTarget || (t.DialerPanelClickTarget = {})),
    function(e) {
        e[e.SaveContactButtonShow = 0] = "SaveContactButtonShow",
        e[e.SaveContactSuceeded = 1] = "SaveContactSuceeded",
        e[e.SaveContactCancelled = 2] = "SaveContactCancelled"
    }(a = t.SaveContactFlowStep || (t.SaveContactFlowStep = {}));
    class l extends s.TelemetryEventBase {
        getEventName() {
            return "s4l_dialpad"
        }
        getAriaTenantTokenOverride() {
            return o.getAriaCommerceTenantToken()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.NavigateToDialpad = class extends l {
        constructor(e, t=!1) {
            super(),
            this._navigationSource = e,
            this._usePrefilledNumber = t
        }
        getActionName() {
            return "NavigateToDialpad"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.NavigationSource = n.DialerNavigationSource[this._navigationSource],
            e.UsePrefilledNumber = this._usePrefilledNumber,
            e
        }
    }
    ;
    t.PasteNumber = class extends l {
        getActionName() {
            return "PasteNumber"
        }
    }
    ;
    t.StartCall = class extends l {
        constructor(e) {
            super(),
            this._phoneNumberOrigin = e
        }
        getActionName() {
            return "StartCall"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.PhoneNumberOrigin = this._phoneNumberOrigin,
            e
        }
    }
    ;
    t.EmergencyNumber = class extends l {
        getActionName() {
            return "EmergencyNumber"
        }
    }
    ;
    t.EmergencyCall = class extends l {
        getActionName() {
            return "EmergencyCall"
        }
    }
    ;
    t.EmergencyCallFailed = class extends l {
        getActionName() {
            return "EmergencyCallFailed"
        }
    }
    ;
    t.EmergencyCallDefaultCountryChanged = class extends l {
        constructor(e) {
            super(),
            this._country = e
        }
        getActionName() {
            return "EmergencyCallDefaultCountryChanged"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Country = this._country,
            e
        }
    }
    ;
    t.DialerPanelComponentClick = class extends l {
        constructor(e, t) {
            super(),
            this._target = e,
            this._userEntitlementsSummary = t
        }
        getActionName() {
            return "DialerPanelComponentClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Target = r[this._target],
            this._userEntitlementsSummary && (e.UserEntitlementsSummary = this._userEntitlementsSummary),
            e
        }
    }
    ;
    t.SaveContactDialpadFlowStep = class extends l {
        constructor(e) {
            super(),
            this._step = e
        }
        getActionName() {
            return a[this._step]
        }
    }
    ;
    t.ContactSelected = class extends l {
        constructor(e) {
            super(),
            this._inputLength = e
        }
        getActionName() {
            return "ContactSelected"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.InputLength = this._inputLength,
            e
        }
    }
    ;
    t.DefaultCountryStored = class extends l {
        constructor(e, t) {
            super(),
            this._countryOld = e,
            this._countryNew = t
        }
        getActionName() {
            return "DefaultCountryStored"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CountryOld = this._countryOld,
            e.CountryNew = this._countryNew,
            e
        }
    }
    ;
    t.TasterImageShown = class extends l {
        getActionName() {
            return "TasterImageShown"
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Time = 0] = "Time",
        e[e.Unread = 1] = "Unread",
        e[e.Active = 2] = "Active"
    }(t.RecentsSortBy || (t.RecentsSortBy = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Compact = 1] = "Compact",
        e[e.ExtraCompact = 2] = "ExtraCompact"
    }(t.RowSize || (t.RowSize = {}))
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(16)
      , s = i(2)
      , r = i(97)
      , a = i(180)
      , l = i(39);
    class c extends l.TelemetryEventBase {
        constructor(e) {
            super(),
            this._to = e
        }
        getEventName() {
            return "all_navigation"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.NavigationType = this.getNavDestinationType(),
            this._to && (e.NavigationTo = this._to),
            e
        }
    }
    t.NavigationTab = class extends c {
        constructor(e) {
            super(e)
        }
        getNavDestinationType() {
            return "TabView"
        }
    }
    ;
    t.NavigationConversation = class extends c {
        constructor(e, t, i, n, s, r) {
            let a = "OneOnOne";
            t ? a = "Cortana" : o.isGroupConversation(e) ? a = "Group" : o.isEncryptedThread(e) ? a = "E2EE" : o.isAgent(e) ? a = "Bot" : o.isSkypeIdMri(e) && -1 !== e.indexOf("@") ? a = "SkypeIdLooksLikeEmail" : o.isBookmarkConversation(e) && (a = "Bookmarks"),
            super(a),
            this._origin = i,
            this._browserOrigin = n,
            this._millisecSinceLastConv = s ? Date.now() - s : -1,
            this._conversationsInGroup = r
        }
        getNavDestinationType() {
            return "Conversation"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._getOwnAttributes())
        }
        _getOwnAttributes() {
            let e = {};
            return n.isUndefined(this._origin) || (e.Origin = s.NavigationConversationOrigin[this._origin]),
            n.isUndefined(this._browserOrigin) || (e.BrowserOrigin = s.BrowserOrigin[this._browserOrigin]),
            !n.isUndefined(this._conversationsInGroup) && this._conversationsInGroup && (e.ConversationTypesForUserCount = this._conversationsInGroup),
            e.TimeSinceLastConv = this._millisecSinceLastConv,
            e
        }
    }
    ;
    t.NavigationCallInvalidMri = class extends c {
        constructor(e, t) {
            super("CallInvalidMri"),
            this._isMriInvalid = o.isSkypeIdMri(e) && -1 !== e.indexOf("@"),
            this._origin = t
        }
        shouldSend() {
            return !!this._isMriInvalid && super.shouldSend()
        }
        getNavDestinationType() {
            return "CallInvalidMri"
        }
        getAttributes() {
            const e = super.getAttributes();
            return this._origin && (e.Origin = s.NavigationCallOrigin[this._origin]),
            e
        }
    }
    ;
    class d extends l.TelemetryEventBase {
        constructor(e) {
            super(),
            this._origin = e
        }
        getEventName() {
            return "all_notification_settings_menu_click"
        }
        getAttributes() {
            const e = super.getAttributes();
            return this._origin && (e.Origin = r.NavigationSettingsOrigin[this._origin]),
            e
        }
    }
    t.NavigationNotificationSettings = d;
    class u extends l.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._target = e,
            this._isFailure = t
        }
        getEventName() {
            return "feedback_navigation"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Target = this._target,
            e.IsFailure = this._isFailure ? "true" : "false",
            e
        }
    }
    t.NavigationHelpAndFeedbackLink = u;
    class g extends l.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._to = r.NavigationSettingsItem[e],
            this._origin = r.NavigationSettingsOrigin[t],
            this._telemetryCorrelationId = i
        }
        getEventName() {
            return "all_feedback_menu_click"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.NavigationType = "SettingsMenu",
            this._origin && (e.Origin = this._origin),
            this._to && (e.NavigationTo = this._to),
            this._telemetryCorrelationId && (e.TelemetryCorrelationId = this._telemetryCorrelationId),
            e
        }
    }
    t.NavigationHelpAndFeedback = g;
    class h extends g {
        constructor(e, t, i) {
            super(e, r.NavigationSettingsOrigin.LandingScreen, i),
            this._landingScreenVariant = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CheckAccountSectionVariant = a.OnboardingCheckAccountSectionVariant[this._landingScreenVariant],
            e
        }
    }
    t.CheckAccountClick = class extends h {
        constructor(e, t) {
            super(r.NavigationSettingsItem.CheckAccount, e, t)
        }
    }
    ;
    t.AccountReadMoreClick = class extends h {
        constructor(e, t) {
            super(r.NavigationSettingsItem.AccountReadMore, e, t)
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(52)
      , s = i(7)
      , r = i(2)
      , a = i(1012)
      , l = i(142)
      , c = i(3)
      , d = i(770)
      , u = i(21)
      , g = i(19)
      , h = i(248)
      , p = i(29);
    !function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.UserInvolved = 100] = "UserInvolved",
        e[e.Preview = 200] = "Preview",
        e[e.Image = 300] = "Image",
        e[e.Video = 400] = "Video"
    }(t.CacheEvictionKind || (t.CacheEvictionKind = {}));
    t.default = new class {
        constructor() {
            this.cacheUpdated = new o.default,
            this._dontPerformEviction = !1,
            u.RegisterStartupable(this, "FileCacheService", [a.default, l.default])
        }
        startup() {
            return this._cache = a.default.getCache("FileCache"),
            this._cache.cacheUpdated.subscribe(e=>{
                this.cacheUpdated.fire(e)
            }
            ),
            this.isLocalCacheSupported() && l.default.setRefreshOptions("FileCacheService", {
                interval: 432e5,
                callback: ()=>{
                    if (this._cache)
                        return this._cache.cleanupMissingFilesAndMetadata()
                }
                ,
                nextExecution: Date.now(),
                taskTypeFlags: l.TaskTypeFlags.CpuIntensive
            }),
            s.Resolved()
        }
        isLocalCacheSupported() {
            return a.default.isLocalCacheSupported()
        }
        isKnown(e) {
            return !!this._cache && !!this._cache.getMeta(e)
        }
        getLocalUri(e) {
            if (this._cache)
                return this._cache.getUri(e)
        }
        save(e, t, i, n, o, r, a) {
            if (!this._cache)
                return s.Rejected("FileCacheService not started.");
            const {uniqueFilename: l, baseFilename: c} = this._getUniqueSanitizedFilenameInfo(i)
              , d = {
                originalFilename: i,
                originalBaseFilename: c,
                evictionKind: r,
                evictionRank: a,
                extension: this._getOriginalExtension(i)
            };
            return this._cache.addFile(e, t, l, n, o, d).then(()=>{
                this._checkFilesFitInCache()
            }
            )
        }
        remove(e) {
            return this._cache ? this._cache.removeFile(e) : s.Rejected("FileCacheService not started.")
        }
        _checkFilesFitInCache() {
            if (this._dontPerformEviction)
                return;
            if (!this._cache)
                return;
            const e = this._cache.getTotalSize();
            if (e > 25e7) {
                const t = n.filter(this._cache.getAllMeta(), e=>e.context && !!e.context.evictionKind)
                  , i = n.groupBy(t, e=>e.context.evictionKind)
                  , o = n.sortBy(i, (e,t)=>-t);
                let a = e - 2e8;
                const l = [];
                n.each(o, e=>{
                    const t = n.sortBy(e, e=>e.context.evictionRank);
                    return n.each(t, e=>{
                        if (e.size)
                            return l.push(e.id),
                            a -= e.size || 0,
                            a > 0
                    }
                    ),
                    a > 0
                }
                ),
                c.log(r.LogTraceArea.GenericUnsafe, "Evicting ids: " + l.join(", "));
                const d = n.map(l, e=>{
                    if (this._cache)
                        return this._cache.removeFile(e).catch(t=>{
                            const i = this._cache ? this._cache.CacheName : "FileCache";
                            c.log(r.LogTraceArea.GenericUnsafe, "Ignoring error during size cleanup: cacheName: " + i + ", id: " + e + ", error: " + g.errorAsString(t))
                        }
                        )
                }
                );
                this._dontPerformEviction = !0,
                s.all(d).always(()=>p.sleep(3e4).always(()=>{
                    this._dontPerformEviction = !1,
                    this._checkFilesFitInCache()
                }
                ))
            }
        }
        _getOriginalExtension(e) {
            const t = e.lastIndexOf(".");
            return -1 === t ? "" : e.substr(t + 1)
        }
        _getUniqueSanitizedFilenameInfo(e) {
            const t = d.lossyForUserFile(e)
              , i = t.lastIndexOf(".")
              , o = -1 === i ? t : t.substring(0, i)
              , s = -1 === i ? "" : t.substr(i)
              , r = o.replace(/(-\d+)+$/, "")
              , a = r.toLowerCase()
              , l = n.filter(this._cache ? this._cache.getAllMeta() : [], e=>e.context.originalBaseFilename.toLowerCase() === a)
              , u = t.toLowerCase()
              , g = n.every(l, e=>e.filename.toLowerCase() !== u);
            if (!l.length || g)
                return {
                    uniqueFilename: t,
                    baseFilename: r
                };
            const p = n.keyBy(l, e=>e.filename.toLowerCase())
              , m = 2 + l.length;
            for (let e = 1; e < m; e++) {
                const t = o + ("-" + e) + s;
                if (!p[t.toLowerCase()])
                    return {
                        uniqueFilename: t,
                        baseFilename: r
                    }
            }
            return c.track(new h.DevAlert("FileCache failed to generate unique filename")),
            {
                uniqueFilename: o + "-" + Date.now() + s,
                baseFilename: r
            }
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(104)
      , s = i(65)
      , r = i(31)
      , a = i(126)
      , l = i(265)
      , c = i(172)
      , d = i(3)
      , u = i(4)
      , g = i(17)
      , h = i(55)
      , p = i(22)
      , m = i(64)
      , S = i(214)
      , C = i(236)
      , y = i(9);
    var f;
    function _(e, t, i, l) {
        const g = function() {
            if (c.default.isUsingGogoNetworkNoSubscription())
                return f.isUsingGogoNetwork;
            const e = r.default.CallingStore.getConnectedAndNotOnHoldCallId();
            if (e && a.default.disableCaptureAndChanges(e))
                return f.isProvidingInCallVideo;
            return
        }();
        if (g) {
            if (!i && g === f.isUsingGogoNetwork)
                return void d.log(o.LogTraceArea.Navigation, "CaptureNavigationActions: navigateToCaptureComboModalWithParams cancelled, gogo network detected");
            if (g === f.isProvidingInCallVideo && !e.mediaPickerOnly) {
                if (l) {
                    const t = n.clone(e);
                    return t.mediaPickerOnly = !0,
                    t.disableMediaPicker = !1,
                    t
                }
                return d.log(o.LogTraceArea.Navigation, "CaptureNavigationActions: navigateToCaptureComboModalWithParams cancelled, providing in call video"),
                void s.default.showOKAlert(u.getString("CapturePanel.NoCameraWarning"), void 0, S.default.rootViewIdForComponentContext(t))
            }
        }
        return e
    }
    function b(e) {
        if (e.pressTime) {
            let t = new C.default(C.ScenarioName.ShowCameraViewfinder);
            t.start(void 0, e.pressTime),
            t.markStepCompleted("navigateToCaptureComboWithParams"),
            l.default.setPerfScenario(C.ScenarioName.ShowCameraViewfinder, t)
        }
    }
    !function(e) {
        e[e.isUsingGogoNetwork = 1] = "isUsingGogoNetwork",
        e[e.isProvidingInCallVideo = 2] = "isProvidingInCallVideo"
    }(f || (f = {})),
    t.navigateToCaptureComboModalWithParams = function(e, t, i, s, r) {
        const a = _(e, t, !!s, !!r);
        if (!a)
            return;
        n.isUndefined(a.cameraMode) || l.default.setCameraMode(a.cameraMode),
        b(a);
        const c = y.newCauseId();
        d.log(o.LogTraceArea.Navigation, "NavigationActions: navigateToCaptureComboModalWithParams causeId: " + c),
        g.navigateAssertingUIStarted(()=>{
            g.launchModalEvent.fire({
                context: new h.CaptureComboNavigationContext(a),
                onDismiss: i,
                rootViewId: S.default.rootViewIdForComponentContext(t),
                causeId: c
            })
        }
        )
    }
    ,
    t.navigateToCaptureComboWithParams = function(e, t, i, s, r) {
        const a = _(e, t, !!s, !!r);
        a && (b(a),
        g.navigateAssertingUIStarted(()=>{
            const e = y.newCauseId();
            d.log(o.LogTraceArea.Navigation, "NavigationActions: navigateToCaptureComboWithParams, causeId: " + e);
            const t = new h.CaptureComboNavigationContext(a);
            if (p.default.isUsingStackNavigationContext()) {
                if (n.last(m.default.getCurrentNavigationStack())instanceof h.CaptureComboNavigationContext)
                    return void (i && i());
                i && g.setStackNavigationCompleteCallback(i),
                m.default.navigateToView(t, e)
            }
        }
        ))
    }
    ,
    t.closeCaptureCombo = function(e, t) {
        d.log(o.LogTraceArea.Navigation, "NavigationActions: closeCaptureCombo,  causeId: " + e),
        p.default.isUsingStackNavigationContext() ? n.last(m.default.getCurrentNavigationStack())instanceof h.CaptureComboNavigationContext && g.navigateBack(e, t) : g.navigateToDefaultConversation()
    }
    ,
    t.navigateToCapturePreviewModalWithParams = function(e, t, i) {
        const n = y.newCauseId();
        d.log(o.LogTraceArea.Navigation, "NavigationActions.navigateToCapturePreviewModalWithParams, causeId: " + n),
        g.navigateAssertingUIStarted(()=>{
            g.launchModalEvent.fire({
                context: new h.CapturePreviewNavigationContext(e),
                rootViewId: S.default.rootViewIdForComponentContext(t),
                causeId: n,
                modalId: i
            })
        }
        )
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(1097)
      , r = i(13)
      , a = i(7)
      , l = i(61)
      , c = i(337);
    t.CameraMode = c.CameraMode,
    t.FlashMode = c.FlashMode;
    const d = i(2)
      , u = i(3)
      , g = i(236)
      , h = i(24)
      , p = i(21);
    var m;
    !function(e) {
        e[e.CurrentFlashMode = 0] = "CurrentFlashMode",
        e[e.CurrentCameraMode = 1] = "CurrentCameraMode",
        e[e.CurrentZoomLevel = 2] = "CurrentZoomLevel",
        e[e.SupportedCameras = 3] = "SupportedCameras",
        e[e.HasFlash = 4] = "HasFlash",
        e[e.HasBackTelephotoCamera = 5] = "HasBackTelephotoCamera",
        e[e.MaxZoom = 6] = "MaxZoom",
        e[e.AsyncCaptureStatusKey = 7] = "AsyncCaptureStatusKey",
        e[e.CameraAvailable = 8] = "CameraAvailable",
        e[e.DesktopVIMStatus = 9] = "DesktopVIMStatus"
    }(m = t.TriggerKeys || (t.TriggerKeys = {}));
    let S = class extends r.StoreBase {
        constructor() {
            super(),
            this._currentFlashMode = "off",
            this._currentCameraMode = "back",
            this._preferredCameraMode = "back",
            this._currentZoomLevel = 1,
            this._maxZoom = 1,
            this._hasBackTelephotoCamera = !1,
            this._supportedCameras = 0,
            this._hasFlash = !1,
            this._isCameraAvailable = !0,
            this._visibleCapturePanelIDs = [],
            this._perfScenarios = {},
            p.RegisterStartupable(this, "CaptureSettingsStore", [h.default])
        }
        startup() {
            return this._isCameraAvailable = l.UICapabilities.cameraSupported() && !h.default.isSplitScreenIPad(),
            u.log(d.LogTraceArea.Capture, "CaptureSettingsStore startup, isCameraAvailable: " + this._isCameraAvailable),
            this._splitScreenSubscriptionToken = h.default.subscribe(()=>{
                const e = l.UICapabilities.cameraSupported() && !h.default.isSplitScreenIPad();
                e !== this._isCameraAvailable && (u.log(d.LogTraceArea.Capture, "CaptureSettingsStore, update isCameraAvailable: " + e),
                this._isCameraAvailable = e,
                this.trigger(m.CameraAvailable))
            }
            , h.TriggerKeys.SplitScreenIPad),
            s.DefaultCamera.getDefaultCamera(this._preferredCameraMode).then(e=>{
                this.setupCamera(e)
            }
            ),
            a.Resolved()
        }
        destroy() {
            this._splitScreenSubscriptionToken && (h.default.unsubscribe(this._splitScreenSubscriptionToken),
            this._splitScreenSubscriptionToken = void 0)
        }
        getCurrentFlashMode() {
            return this.convertStringToFlashModeEnum(this._currentFlashMode)
        }
        getCurrentCameraMode() {
            return this.convertStringToCameraModeEnum(this._currentCameraMode)
        }
        getCurrentZoomLevel() {
            return this._currentZoomLevel
        }
        getSupportedCameras() {
            return this._supportedCameras
        }
        hasFlash() {
            return this._hasFlash
        }
        hasBackTelephotoCamera() {
            return this._hasBackTelephotoCamera
        }
        maxZoom() {
            return this._maxZoom
        }
        isCameraAvailable() {
            return this._isCameraAvailable
        }
        isCameraAvailableNoSubscription() {
            return this._isCameraAvailable
        }
        setSupportedCameras(e) {
            this._supportedCameras = e,
            this.trigger(m.SupportedCameras)
        }
        setIsCameraAvailable(e) {
            this._isCameraAvailable = e,
            this.trigger(m.CameraAvailable)
        }
        setupCamera(e) {
            if ("none" === e)
                this.setIsCameraAvailable(!1);
            else {
                let t = this.convertStringToCameraModeEnum(e);
                this.setCameraMode(t)
            }
        }
        setHasFlash(e) {
            e !== this._hasFlash && (this._hasFlash = e,
            this.trigger(m.HasFlash))
        }
        setCameraMode(e) {
            e !== this.getCurrentCameraMode() && (this._currentCameraMode = this.convertCameraModeEnumToString(e),
            this.trigger(m.CurrentCameraMode))
        }
        getDefaultCamera(e) {
            return a.fromThenable(s.DefaultCamera.getDefaultCamera(e))
        }
        updateSettings(e) {
            e && (e.supportedCameras().then(e=>this.setSupportedCameras(e)),
            e.getDefaultCamera(this._preferredCameraMode).then(e=>this.setupCamera(e)),
            e.hasBackTelephotoCamera().then(e=>this.setHasBackTelephotoCamera(e)),
            e.getMaxZoom().then(e=>this.setMaxZoom(e)),
            e.hasFlash().then(e=>this.setHasFlash(e)))
        }
        setHasBackTelephotoCamera(e) {
            this._hasBackTelephotoCamera = e,
            this.trigger(m.HasBackTelephotoCamera)
        }
        setMaxZoom(e) {
            this._maxZoom = e,
            this.trigger(m.MaxZoom)
        }
        setPerfScenario(e, t) {
            this._perfScenarios[g.ScenarioName[e]] = t
        }
        getPerfScenario(e) {
            return this._perfScenarios[g.ScenarioName[e]]
        }
        maybeGetAndClearPerfScenario(e) {
            const t = this._perfScenarios[g.ScenarioName[e]];
            return delete this._perfScenarios[g.ScenarioName[e]],
            t
        }
        toggleCamera() {
            if (this._supportedCameras > 1) {
                const e = "front" === this._currentCameraMode ? "back" : "front";
                this._currentCameraMode = e,
                this.trigger(m.CurrentCameraMode)
            }
        }
        getCameraToggleMode() {
            if (this._supportedCameras > 1) {
                const e = "front" === this._currentCameraMode ? "back" : "front";
                return this.convertStringToCameraModeEnum(e)
            }
            return c.CameraMode.None
        }
        setZoomLevel(e) {
            this._currentZoomLevel = e,
            this.trigger(m.CurrentZoomLevel)
        }
        toggleFlash() {
            if (this._hasFlash) {
                const e = "off" === this._currentFlashMode ? "on" : "off";
                this._currentFlashMode = e,
                this.trigger(m.CurrentFlashMode)
            }
        }
        convertStringToCameraModeEnum(e) {
            switch (e) {
            case "front":
                return c.CameraMode.Front;
            case "back":
            default:
                return c.CameraMode.Back
            }
        }
        setAsyncCaptureStatus(e, t) {
            let i = o.findIndex(this._visibleCapturePanelIDs, t=>t === e);
            if (-1 === i) {
                if (t)
                    return i = this._visibleCapturePanelIDs.push(e) - 1,
                    this.trigger(m.AsyncCaptureStatusKey),
                    void u.log(d.LogTraceArea.GenericUnsafe, "CaptureSettingsStore visible capture panel " + e + " added (now " + this._visibleCapturePanelIDs.length + ")")
            } else if (!t)
                return this._visibleCapturePanelIDs.splice(i, 1),
                this.trigger(m.AsyncCaptureStatusKey),
                void u.log(d.LogTraceArea.GenericUnsafe, "CaptureSettingsStore visible capture panel " + e + " removed (now " + this._visibleCapturePanelIDs.length + ")")
        }
        isInAsyncCapture() {
            return 0 !== this._visibleCapturePanelIDs.length
        }
        convertStringToFlashModeEnum(e) {
            switch (e) {
            case "on":
                return c.FlashMode.On;
            case "off":
            default:
                return c.FlashMode.Off
            }
        }
        convertCameraModeEnumToString(e) {
            switch (e) {
            case c.CameraMode.Front:
                return "front";
            case c.CameraMode.Back:
            default:
                return "back"
            }
        }
        convertFlashModeEnumToString(e) {
            switch (e) {
            case c.FlashMode.On:
                return "on";
            case c.FlashMode.Off:
            default:
                return "off"
            }
        }
        test_resetFields() {
            this._currentFlashMode = "off",
            this._currentCameraMode = "back",
            this._preferredCameraMode = "back",
            this._currentZoomLevel = 1,
            this._supportedCameras = 0,
            this._hasFlash = !1,
            this._isCameraAvailable = !0,
            this._visibleCapturePanelIDs = []
        }
    }
    ;
    n.__decorate([r.autoSubscribeWithKey(m.CurrentFlashMode)], S.prototype, "getCurrentFlashMode", null),
    n.__decorate([r.autoSubscribeWithKey(m.CurrentCameraMode)], S.prototype, "getCurrentCameraMode", null),
    n.__decorate([r.autoSubscribeWithKey(m.CurrentZoomLevel)], S.prototype, "getCurrentZoomLevel", null),
    n.__decorate([r.autoSubscribeWithKey(m.SupportedCameras)], S.prototype, "getSupportedCameras", null),
    n.__decorate([r.autoSubscribeWithKey(m.HasFlash)], S.prototype, "hasFlash", null),
    n.__decorate([r.autoSubscribeWithKey(m.HasBackTelephotoCamera)], S.prototype, "hasBackTelephotoCamera", null),
    n.__decorate([r.autoSubscribeWithKey(m.MaxZoom)], S.prototype, "maxZoom", null),
    n.__decorate([r.autoSubscribeWithKey(m.CameraAvailable)], S.prototype, "isCameraAvailable", null),
    n.__decorate([r.disableWarnings], S.prototype, "isCameraAvailableNoSubscription", null),
    n.__decorate([r.autoSubscribeWithKey(m.AsyncCaptureStatusKey)], S.prototype, "isInAsyncCapture", null),
    S = n.__decorate([r.AutoSubscribeStore], S),
    t.default = new S
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(97)
      , s = i(39);
    var r, a, l, c, d;
    !function(e) {
        e[e.Opened = 0] = "Opened",
        e[e.Closed = 1] = "Closed",
        e[e.TabsSwitched = 2] = "TabsSwitched",
        e[e.AddContactPanelOpened = 3] = "AddContactPanelOpened",
        e[e.ShowActiveNow = 4] = "ShowActiveNow",
        e[e.ShowAllMyContacts = 5] = "ShowAllMyContacts"
    }(r = t.ContactsPanelAction || (t.ContactsPanelAction = {})),
    function(e) {
        e[e.V1 = 0] = "V1",
        e[e.V2 = 1] = "V2"
    }(a = t.ContactsPanelVersion || (t.ContactsPanelVersion = {})),
    function(e) {
        e[e.ContactsPanel = 0] = "ContactsPanel",
        e[e.ContactsPanelV2 = 1] = "ContactsPanelV2",
        e[e.HubTabPeople = 2] = "HubTabPeople",
        e[e.SearchResultListAddContactButton = 3] = "SearchResultListAddContactButton",
        e[e.DesktopNewActionPicker = 4] = "DesktopNewActionPicker",
        e[e.LandingScreen = 5] = "LandingScreen"
    }(l = t.AddContactPanelOrigin || (t.AddContactPanelOrigin = {})),
    function(e) {
        e[e.AddContactsPanel = 0] = "AddContactsPanel",
        e[e.DialpadPanel = 1] = "DialpadPanel",
        e[e.ContactListAdd = 2] = "ContactListAdd",
        e[e.ContactListEdit = 3] = "ContactListEdit",
        e[e.UserCard = 4] = "UserCard"
    }(t.AddPhoneNumberPanelOrigin || (t.AddPhoneNumberPanelOrigin = {})),
    function(e) {
        e[e.Shown = 0] = "Shown",
        e[e.Clicked = 1] = "Clicked",
        e[e.Dismissed = 2] = "Dismissed"
    }(c = t.BannerAction || (t.BannerAction = {})),
    function(e) {
        e[e.ContactsPrivacy = 0] = "ContactsPrivacy",
        e[e.SyncAddressBook = 1] = "SyncAddressBook"
    }(d = t.BannerType || (t.BannerType = {}));
    class u extends s.TelemetryEventBase {
        getEventName() {
            return "people_contacts_panel"
        }
    }
    t.ContactsPanelEvent = class extends u {
        constructor(e, t, i, n, o) {
            super(),
            this._action = e,
            this._version = t,
            this._tab = i,
            this._hasSyncedAddressBook = n,
            this._isShowingActiveNow = o
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = r[this._action],
            e.Version = a[this._version],
            e.Tab = this._getTabName(this._tab),
            n.isUndefined(this._isShowingActiveNow) || (e.IsShowingActiveNow = this._isShowingActiveNow),
            n.isUndefined(this._hasSyncedAddressBook) || (e.HasSyncedAB = this._hasSyncedAddressBook),
            e
        }
        _getTabName(e) {
            return this._version === a.V2 ? o.ContactsPanelV2[e] : o.ContactsPanel[e]
        }
    }
    ;
    t.AddContactPanelEvent = class extends u {
        constructor(e) {
            super(),
            this._origin = e
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = r[r.AddContactPanelOpened],
            e.Origin = l[this._origin],
            e
        }
    }
    ;
    t.ContactsPanelBannerEvent = class extends u {
        constructor(e, t) {
            super(),
            this._type = e,
            this._action = t
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.BannerType = d[this._type],
            e.Action = c[this._action],
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(24)
      , s = i(136)
      , r = i(18)
      , a = 2 * s.SearchInputHeight.default
      , l = 2 * s.SearchInputHeight.small
      , c = s.SearchInputHeight.default + s.SearchInputHeight.iOS
      , d = s.SearchInputHeight.small + s.SearchInputHeight.iOS
      , u = s.SearchInputHeight.default
      , g = s.SearchInputHeight.default
      , h = a
      , p = s.SearchInputHeight.small
      , m = s.SearchInputHeight.small
      , S = l
      , C = s.SearchInputHeight.iOS
      , y = s.SearchInputHeight.default
      , f = c
      , _ = s.SearchInputHeight.iOS
      , b = s.SearchInputHeight.small
      , v = d;
    t.default = class {
        static collapsedHeight(e) {
            const t = o.default.isSmallDeviceNoSubscription(e);
            return this.useIOSSearchStyles() ? t ? b : y : t ? m : g
        }
        static expandedHeight(e) {
            const t = o.default.isSmallDeviceNoSubscription(e);
            return this.useIOSSearchStyles() ? t ? v : f : t ? S : h
        }
        static collapsableHeight(e) {
            const t = o.default.isSmallDeviceNoSubscription(e);
            return this.useIOSSearchStyles() ? t ? _ : C : t ? p : u
        }
        static useIOSSearchStyles() {
            return r.getPlatformType() === n.PlatformType.iOS
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(68)
      , s = i(38);
    class r {
        equals(e) {
            if (e === this)
                return !0;
            if (!e.isImmutable() != !this.isImmutable())
                return !1;
            return s.default(this, e)
        }
        static comparator(e, t) {
            if (e === t)
                return !0;
            if (null === e || null === t)
                return !1;
            const i = typeof e;
            if (i !== typeof t)
                return !1;
            if ("object" !== i)
                return e != e && t != t;
            if (e instanceof r)
                return t instanceof r && e.equals(t);
            if (t instanceof r)
                return !1;
            if (o.isValidElement(e))
                return !!o.isValidElement(t) && (e.key === t.key && e.type === t.type && !r.comparator(e.props, t.props) && !r.comparator(e.state, t.state));
            if (n.isArray(e)) {
                const i = e.length;
                if (!n.isArray(t) || i !== t.length)
                    return !1;
                if (0 === i)
                    return !0;
                if (!r.comparator(e[0], t[0]))
                    return !1;
                for (let n = i - 1; n > 0; n--)
                    if (!r.comparator(e[n], t[n]))
                        return !1;
                return !0
            }
            for (let i in e)
                if (e.hasOwnProperty(i)) {
                    if (!t.hasOwnProperty(i))
                        return !1;
                    if (!r.comparator(e[i], t[i]))
                        return !1
                }
            for (let i in t)
                if (t.hasOwnProperty(i) && !e.hasOwnProperty(i))
                    return !1;
            return !0
        }
    }
    t.default = r
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(482)
      , s = i(160)
      , r = i(2)
      , a = i(25)
      , l = i(39)
      , c = i(483)
      , d = i(109);
    class u extends l.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._origin = e,
            this._onboardingDisplayOrder = t,
            this._onboardingStepsCount = i,
            this._navExit = s.DialogNavExit.Unknown,
            this._isNewUser = !1,
            this._isUpgradedFromDelphi = !1
        }
        getExit() {
            return this._navExit
        }
        setExit(e) {
            this._navExit = e
        }
        setIsNewUser(e) {
            this._isNewUser = e
        }
        setIsUpgradedFromDelphi(e) {
            this._isUpgradedFromDelphi = e
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Origin: s.DialogNavOrigin[this._origin],
                Duration: Date.now() - this._eventCreationTime,
                OnboardingDisplayOrder: void 0 !== this._onboardingDisplayOrder ? this._onboardingDisplayOrder : -1,
                OnboardingStepsCount: void 0 !== this._onboardingStepsCount ? this._onboardingStepsCount : -1,
                Exit: s.DialogNavExit[this._navExit],
                IsNewUser: this._isNewUser,
                IsUpgradedFromDelphi: this._isUpgradedFromDelphi
            })
        }
    }
    class g extends u {
        constructor() {
            super(...arguments),
            this._onboardingTrackingAttributes = {}
        }
        setOnboardingAttributes(e) {
            this._onboardingTrackingAttributes = e
        }
        getOnboardingAttributes() {
            return this._onboardingTrackingAttributes
        }
    }
    t.OnboardingDialogEvent = g;
    t.ThemeDialogEvent = class extends g {
        constructor() {
            super(...arguments),
            this._didToggleLightDarkTab = !1,
            this._didFlipThroughOptions = !1,
            this._didSelectNewTheme = !1
        }
        getEventName() {
            return "settings_themeDialog"
        }
        markDidToggleLightDarkTab() {
            this._didToggleLightDarkTab = !0
        }
        markDidFlipThroughOptions() {
            this._didFlipThroughOptions = !0
        }
        markDidSelectNewTheme() {
            this._didSelectNewTheme = !0
        }
        setFinalTheme(e) {
            this._finalTheme = e
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                DidToggleLightDarkTab: this._didToggleLightDarkTab,
                DidFlipThroughOptions: this._didFlipThroughOptions,
                DidSelectNewTheme: this._didSelectNewTheme,
                FinalTheme: void 0 !== this._finalTheme ? d.Theme[this._finalTheme] : ""
            })
        }
    }
    ;
    t.UserProfileDialogEvent = class extends g {
        getEventName() {
            return "settings_userProfileDialog"
        }
    }
    ;
    var h;
    t.AvatarPickerDialogEvent = class extends g {
        constructor() {
            super(...arguments),
            this._didHaveInitialAvatar = !1,
            this._didHaveFinalAvatar = !1,
            this._didSetNewAvatar = !1,
            this._didRemoveAvatar = !1,
            this._didRequestCameraPermission = !1,
            this._didGrantCameraPermission = !1,
            this._didRequestCameraRollPermission = !1,
            this._didGrantCameraRollPermission = !1,
            this._didUseCommonAvatarPicker = !1
        }
        getEventName() {
            return "settings_avatarPickerDialog"
        }
        didHaveInitialAvatar() {
            return this._didHaveInitialAvatar
        }
        markDidHaveInitialAvatar() {
            this._didHaveInitialAvatar = !0
        }
        markDidHaveFinalAvatar() {
            this._didHaveFinalAvatar = !0
        }
        markDidSetNewAvatar() {
            this._didSetNewAvatar = !0
        }
        markDidRemoveAvatar() {
            this._didRemoveAvatar = !0
        }
        setAvatarSource(e) {
            this._avatarSource = e
        }
        markDidUseCommonAvatarPicker() {
            this._didUseCommonAvatarPicker = !0
        }
        markPermissionRequested(e) {
            switch (e) {
            case a.PermissionType.CameraRoll:
                this._didRequestCameraRollPermission = !0;
                break;
            case a.PermissionType.Camera:
                this._didRequestCameraPermission = !0
            }
        }
        markPermissionGranted(e, t) {
            switch (e) {
            case a.PermissionType.CameraRoll:
                this._didGrantCameraRollPermission = t;
                break;
            case a.PermissionType.Camera:
                this._didGrantCameraPermission = t
            }
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                DidHaveInitialAvatar: this._didHaveInitialAvatar,
                DidHaveFinalAvatar: this._didHaveFinalAvatar,
                DidSetNewAvatar: this._didSetNewAvatar,
                DidRemoveAvatar: this._didRemoveAvatar,
                DidUseCommonAvatarPicker: this._didUseCommonAvatarPicker,
                AvatarSource: void 0 !== this._avatarSource ? r.AvatarDataSource[this._avatarSource] : r.AvatarDataSource[r.AvatarDataSource.Unknown],
                DidRequestCameraPermission: this._didRequestCameraPermission,
                DidGrantCameraPermission: this._didGrantCameraPermission,
                DidRequestCameraRollPermission: this._didRequestCameraRollPermission,
                DidGrantCameraRollPermission: this._didGrantCameraRollPermission
            })
        }
    }
    ,
    function(e) {
        e[e.V1 = 0] = "V1",
        e[e.V3 = 1] = "V3",
        e[e.V4_FirstBlank = 2] = "V4_FirstBlank",
        e[e.V4_FirstWithInfo = 3] = "V4_FirstWithInfo",
        e[e.V4_FirstWithPreprompt = 4] = "V4_FirstWithPreprompt"
    }(h = t.PromptPermissionDialogVersion || (t.PromptPermissionDialogVersion = {}));
    t.PromptPermissionDialogEvent = class extends g {
        constructor(e, t, i, n) {
            super(e, i, n),
            this._version = t,
            this._didAlreadyPromptNotificationsPermission = !1,
            this._didAlreadyPromptMicPermission = !1,
            this._didAlreadyPromptCameraPermission = !1,
            this._didRequestNotificationsPermission = !1,
            this._didRequestMicPermission = !1,
            this._didRequestCameraPermission = !1,
            this._didGrantNotificationsPermission = !1,
            this._didGrantMicPermission = !1,
            this._didGrantCameraPermission = !1,
            this._didNotificationPermissionRequestFailed = !1,
            this._didVisitPrivacyStatement = !1,
            this._didSeeLearnMoreButton = !1
        }
        getEventName() {
            return "settings_promptPermissionDialog"
        }
        markWhetherSystemPromptsHaveAlreadyBeenDisplayed(e, t, i) {
            this._didAlreadyPromptNotificationsPermission = !e,
            this._didAlreadyPromptMicPermission = !t,
            this._didAlreadyPromptCameraPermission = !i
        }
        markPermissionGranted(e, t) {
            switch (e) {
            case a.PermissionType.Notifications:
                this._didGrantNotificationsPermission = t;
                break;
            case a.PermissionType.Microphone:
                this._didGrantMicPermission = t;
                break;
            case a.PermissionType.Camera:
                this._didGrantCameraPermission = t
            }
        }
        markPermissionRequested(e) {
            switch (e) {
            case a.PermissionType.Notifications:
                this._didRequestNotificationsPermission = !0;
                break;
            case a.PermissionType.Microphone:
                this._didRequestMicPermission = !0;
                break;
            case a.PermissionType.Camera:
                this._didRequestCameraPermission = !0
            }
        }
        markNotificationPermissionRequestFailed() {
            this._didNotificationPermissionRequestFailed = !0
        }
        markDidVisitPrivacyStatement() {
            this._didVisitPrivacyStatement = !0
        }
        markDidSeeLearnMoreButton() {
            this._didSeeLearnMoreButton = !0
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                DidAlreadyPropmptNotificationsPermission: this._didAlreadyPromptNotificationsPermission,
                DidAlreadyPropmptMicPermission: this._didAlreadyPromptMicPermission,
                DidAlreadyPropmptCameraPermission: this._didAlreadyPromptCameraPermission,
                DidRequestNotificationsPermission: this._didRequestNotificationsPermission,
                DidRequestMicPermission: this._didRequestMicPermission,
                DidRequestCameraPermission: this._didRequestCameraPermission,
                DidGrantNotificationsPermission: this._didGrantNotificationsPermission,
                DidGrantMicPermission: this._didGrantMicPermission,
                DidGrantCameraPermission: this._didGrantCameraPermission,
                DidNotificationPermissionRequestFailed: this._didNotificationPermissionRequestFailed,
                DialogVersion: h[this._version],
                DidVisitPrivacyStatement: this._didVisitPrivacyStatement,
                DidSeeLearnMoreButton: this._didSeeLearnMoreButton
            })
        }
    }
    ;
    t.AVSettingsDialogEvent = class extends g {
        constructor(e, t, i, n) {
            super(t, i, n),
            this._settingsMode = e,
            this._didChangeCameraSetting = !1,
            this._didChangeMicSetting = !1,
            this._didChangeSpeakerSetting = !1,
            this._didChangeRingingDeviceSetting = !1,
            this._didAdjustMicrophone = !1,
            this._didChangeMicAutoAdjustment = !1,
            this._shouldAutoAdjustMic = !1,
            this._didPerformAudioTest = !1,
            this._didPerformTestCall = !1,
            this._didChangeSpeakerVolume = !1
        }
        getEventName() {
            return "settings_avSettingsDialog"
        }
        markDidChangeCameraSetting() {
            this._didChangeCameraSetting = !0
        }
        markDidChangeMicSetting() {
            this._didChangeMicSetting = !0
        }
        markDidChangeSpeakerSetting() {
            this._didChangeSpeakerSetting = !0
        }
        markDidChangeRingingDeviceSetting() {
            this._didChangeRingingDeviceSetting = !0
        }
        markDidAdjustMicrophone() {
            this._didAdjustMicrophone = !0
        }
        markDidChangeMicrophoneAutoAdjustment(e) {
            this._didChangeMicAutoAdjustment = !0,
            this._shouldAutoAdjustMic = e
        }
        markAudioTestPerformed() {
            this._didPerformAudioTest = !0
        }
        markTestCallPerformed() {
            this._didPerformTestCall = !0
        }
        markDidChangeSpeakerVolume() {
            this._didChangeSpeakerVolume = !0
        }
        getAttributes() {
            return n.extend({}, super.getAttributes(), this.getOnboardingAttributes(), {
                DialogType: o.SettingsMode[this._settingsMode],
                DidChangeCameraSetting: this._didChangeCameraSetting,
                DidChangeMicSetting: this._didChangeMicSetting,
                DidChangeSpeakerSetting: this._didChangeSpeakerSetting,
                DidChangeSpeakerVolume: this._didChangeSpeakerVolume,
                DidChangeRingingDeviceSetting: this._didChangeRingingDeviceSetting,
                DidAdjustMicrophone: this._didAdjustMicrophone,
                DidChangeMicAutoAdjustment: this._didChangeMicAutoAdjustment,
                ShouldAutoAdjustMic: this._shouldAutoAdjustMic,
                DidPerformAudioTest: this._didPerformAudioTest,
                DidPerformTestCall: this._didPerformTestCall
            })
        }
    }
    ;
    class p extends l.TelemetryEventBase {
        constructor(e) {
            super(),
            this._notificationSettings = e
        }
        getEventName() {
            return "all_notification_settings_change"
        }
        getAttributes() {
            let e = super.getAttributes();
            return n.forOwn(this._notificationSettings, (t,i)=>{
                this._setAttributeIfDefined(e, n.upperFirst(i), t)
            }
            ),
            e
        }
        _setAttributeIfDefined(e, t, i) {
            n.isUndefined(i) || (e[t] = i)
        }
    }
    t.NotificationSettingsChangeTelemetry = p;
    class m extends l.TelemetryEventBase {
        constructor() {
            super()
        }
        getEventName() {
            return "all_settings"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ComponentName = this.getComponentName(),
            e.Action = this.getActionName(),
            e
        }
    }
    t.CallingSettingsEvent = class extends m {
        constructor(e, t) {
            super(),
            this._setting = e,
            this._enabled = t
        }
        getActionName() {
            return "Set"
        }
        getComponentName() {
            return c.ComponentName.Calling
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Setting: this._setting,
                IsEnabled: this._enabled
            })
        }
    }
    ;
    t.NoiseSuppressionSettingsEvent = class extends m {
        constructor(e, t, i, n) {
            super(),
            this._isInCall = e,
            this._oldValue = t,
            this._newValue = i,
            this._origin = n
        }
        getActionName() {
            return "NoiseSuppressionChange"
        }
        getComponentName() {
            return c.ComponentName.Calling
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                IsInCall: this._isInCall,
                OldValue: this._oldValue,
                NewValue: this._newValue,
                Origin: this._origin
            })
        }
    }
    ;
    t.SplitViewTelemetryEvent = class extends m {
        constructor(e) {
            super(),
            this._enabled = e
        }
        getActionName() {
            return "Set"
        }
        getComponentName() {
            return c.ComponentName.Views
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                IsEnabled: this._enabled
            })
        }
    }
    ;
    t.GlobalShortcutsSettingTelemetryEvent = class extends m {
        constructor(e) {
            super(),
            this._enabled = e
        }
        getActionName() {
            return "Set"
        }
        getComponentName() {
            return c.ComponentName.Hotkeys
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                IsEnabled: this._enabled
            })
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(426)
      , r = i(235)
      , a = i(46)
      , l = i(116)
      , c = i(16)
      , d = i(158)
      , u = i(2)
      , g = i(20)
      , h = i(488)
      , p = i(18)
      , m = i(39)
      , S = i(159)
      , C = i(489);
    class y extends m.TelemetryEventBase {
        getAriaTenantTokenOverride() {
            return p.getAriaTelemetryTenantToken()
        }
        shouldSend() {
            const e = this.getTelemetryConfig();
            return !!e && e.enabled
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                DeviceInfo_Os_Version: p.getOSVersion(),
                Client_Name: "SkypeX"
            })
        }
        getEventTraceMode() {
            return m.TelemetryTraceMode.EventName
        }
    }
    class f extends y {
        constructor(e, t, i, n, o, s, r, a) {
            super(),
            this._conversationId = e,
            this._cmid = t,
            this._creator = i,
            this._registrationId = n,
            this._chatServiceEndpointInfo = o,
            this._chatServiceSubscriptionState = s,
            this._serverMessageId = r,
            this._hasAnyCall = a
        }
        shouldSend() {
            if (!super.shouldSend())
                return !1;
            if (!this._cmid)
                return !1;
            const e = this.getTelemetryConfig();
            return S.shouldTrackMessage(this._cmid, e)
        }
        getCorrelationAttributes() {
            return {
                Message_Correlation_Id: r.getCorrelationIdFromMessageParts(this._creator, this._conversationId, this._cmid)
            }
        }
        getAttributes() {
            const e = 1 / (this.getTelemetryConfig().percentage / 100);
            return o.assign({}, super.getAttributes(), {
                Client_Message_Id: this._cmid || "",
                Event_Sampling_Value: e,
                Registration_Id: this._registrationId || "",
                Endpoint_Id: this._chatServiceEndpointInfo && this._chatServiceEndpointInfo.id || "",
                EndpointExists: !!this._chatServiceEndpointInfo && this._chatServiceEndpointInfo.exists,
                PushSubscriptionId: this._chatServiceEndpointInfo && this._chatServiceEndpointInfo.pushSubscriptionId || "",
                PollSubscriptionState: l.SubscriptionState[this._chatServiceSubscriptionState],
                Server_Message_Id: this._serverMessageId || "",
                IsAnyCallOngoing: this._hasAnyCall
            })
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = S.getTrackableConversationId(this._conversationId);
            return t && (e.Conversation_Id = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    class _ extends y {
        shouldSend() {
            if (super.shouldSend()) {
                if (void 0 === this._shouldRandomlySend) {
                    const e = this.getTelemetryConfig();
                    this._shouldRandomlySend = 100 * d.random() < e.percentage
                }
                return this._shouldRandomlySend
            }
            return !1
        }
    }
    t.KpiMessageSent = class extends f {
        constructor(e, t, i, n, o, s, r, a, l, d, u, h, p, m, S, C, y, f, _, b) {
            super(e, t.clientmessageid, c.skypeIdToMri(g.getSkypeId()), l, d, u, m, C),
            this._message = t,
            this._conversationMemberCount = i,
            this._queueTime = n,
            this._blockedTime = o,
            this._sendingTime = s,
            this._retryCount = r,
            this._rawContentLength = a,
            this._contextId = h,
            this._date = p,
            this._presenceAttributes = S,
            this._backgroundedTime = y,
            this._hasAppStart = f,
            this._connectionType = _,
            this._triggeredBy = b
        }
        getEventName() {
            return "kpi_message_sent"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.kpi_message_sent
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Sending_Time = this._sendingTime,
            e.Queue_Time = this._queueTime,
            e.Blocked_Time = this._blockedTime,
            e.Retry_Count = this._retryCount,
            e.context_id = this._contextId,
            e.date = this._date,
            e.BackgroundedTime = this._backgroundedTime,
            e.HasAppRestart = this._hasAppStart,
            e.ConnectionType = u.ChatServiceConnectionType[this._connectionType],
            e.TriggeredBy = h.PostingTrigger[this._triggeredBy],
            e = S.getCommonAttributesMessageSent(e, this._conversationId, this._eventCreationTime, this._message, this._conversationMemberCount, this._rawContentLength),
            this._message.properties && this._message.properties[a.MessageProperties.AlbumId] && (e.AlbumId = this._message.properties[a.MessageProperties.AlbumId].toString()),
            o.assign({}, e, this._presenceAttributes)
        }
        getEventPriority() {
            return n.AWTEventPriority.High
        }
    }
    ;
    t.KpiMessageDelivered = class extends f {
        constructor(e, t, i, n, o, s, r, a, l, c, d, u, g, h) {
            super(e.conversationId, n, e.creator, o, s, r, e.getOriginalServerId(), u),
            this._message = e,
            this._messageOrigin = t,
            this._notificationResult = i,
            this._presenceAttributes = a,
            this._messageAlreadySeen = l,
            this._presenceStatus = c,
            this._presenceStatusOrigin = d,
            this._originsCount = g,
            this._correlationVector = h
        }
        shouldSend() {
            return !this._message.isMessageLie() && !this._message.isPropertyLie() && (this._messageOrigin === u.MessageOrigin.ChatSync || this._messageOrigin === u.MessageOrigin.LongPoll || this._messageOrigin === u.MessageOrigin.PushNotification) && super.shouldSend()
        }
        getEventName() {
            return "kpi_message_delivered"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.kpi_message_delivered
        }
        getAttributes() {
            const e = Number(this._message.getLatestServerMessageVersion())
              , t = e ? this._eventCreationTime - e : ""
              , i = o.assign({}, super.getAttributes(), {
                Group_Conversation: c.isGroupConversation(this._message.conversationId),
                IsEncryptedConversation: c.isEncryptedThread(this._message.conversationId),
                Delivery_Timestamp: this._eventCreationTime,
                Message_Id: this._message.getOriginalServerId() || "",
                Message_Origin: u.MessageOrigin[this._messageOrigin],
                My_Message: g.isMyMri(this._message.creator),
                Notification_Result: u.MessageProcessResult[this._notificationResult],
                My_Status: l.UserStatus[this._presenceStatus],
                My_Status_Origin: C.UserPresenceChangeOrigin[this._presenceStatusOrigin],
                MessageAlreadySeen: void 0 === this._messageAlreadySeen ? "" : this._messageAlreadySeen,
                DeliveryDelay: t,
                Time_From_Startup: Date.now() - p.getAppInitTime(),
                Message_Type: S.getMessageTypeName(this._message, this._message.creator, this._message.conversationId),
                OriginsCount: this._originsCount,
                MessageRawType: S.getMessageRawTypeName(this._message, this._message.creator, this._message.conversationId)
            }, this._presenceAttributes);
            return this._message.hasAlbumId() && (i.AlbumId = this._message.getAlbumId()),
            this._correlationVector && (i.CorrelationVector = this._correlationVector),
            i
        }
    }
    ;
    t.KpiActivityStarted = class extends y {
        constructor(e) {
            super(),
            this._params = e
        }
        getEventName() {
            return "kpi_inapp_activity_start"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.kpi_inapp_activity_start
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return this._params.startUiParams.conversationId && (e.ConversationId = {
                value: this._params.startUiParams.conversationId,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
        getAttributes() {
            const e = o.assign(super.getAttributes(), {
                Foreground_Start_Time: this._params.startTime,
                Entry_Point: u.AppEntryPoint[this._params.entryPoint],
                IsCortanaEligible: this._params.isCortanaEligible,
                IsCortanaOptIn: this._params.isCortanaOptIn,
                IsSuggestionsEnabled: this._params.isSuggestionsEnabled,
                NetworkMCCCode: this._params.mccCode || "",
                NetworkMNCCode: this._params.mncCode || ""
            })
              , {meetNowAction: t, meetNowSource: i, correlationId: n} = this._params.startUiParams;
            return t && (e.MeetNowAction = t),
            i && (e.MeetNowSource = i),
            n && (e.CorrelationId = n),
            e
        }
    }
    ;
    t.KpiAppStart = class extends y {
        getEventName() {
            return "kpi_client_init"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.kpi_client_init
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Init_Timestamp: p.getAppInitTime()
            })
        }
    }
    ;
    t.KpiChatSync = class extends _ {
        constructor() {
            super(...arguments),
            this._backgrounded = !1
        }
        getEventName() {
            return "kpi_chatsync_complete"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.kpi_chatsync_complete
        }
        getAttributes() {
            const e = o.assign(super.getAttributes(), {
                from_timestamp: this._eventCreationTime,
                to_timestamp: this._endTime,
                sync_time: this._endTime - this._eventCreationTime,
                ran_in_background: this._backgrounded
            });
            return this._syncData && o.assign(e, {
                synced_conversations: this._syncData.conversationsCount,
                synced_messages: this._syncData.messagesCount,
                is_first_sync: this._syncData.isFirstSync,
                is_full_sync: this._syncData.isFullSync
            }),
            e
        }
        endSync(e) {
            this._endTime = Date.now(),
            this._syncData = e
        }
        markBackgrounded() {
            this._backgrounded = !0
        }
    }
    ;
    t.KpiChatSyncFailure = class extends _ {
        constructor(e) {
            super(),
            this._responseCode = e
        }
        getEventName() {
            return "kpi_chatsync_failed"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.kpi_chatsync_failed
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                response_code: this._responseCode
            })
        }
    }
    ;
    t.KpiLongPoll = class extends _ {
        constructor(e, t, i, n=!0, o) {
            super(),
            this._events = e,
            this._origin = t,
            this._requestDuration = i,
            this._processedEvents = n,
            this._activeTimeout = o
        }
        getEventName() {
            return "kpi_longpoll_complete"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.kpi_longpoll_complete
        }
        getAttributes() {
            const e = {
                Origin: u.ChatEventOrigin[this._origin],
                EventCountTotal: this._events.length,
                RequestDuration: this._requestDuration,
                DidProcessEvents: this._processedEvents
            };
            return o.isUndefined(this._activeTimeout) || (e.ActiveTimeout = this._activeTimeout),
            o.each(this._events, t=>{
                const i = "EventCount" + this._getNormalizedResourceType(t);
                e[i] ? e[i] = e[i] + 1 : e[i] = 1
            }
            ),
            o.assign({}, super.getAttributes(), e)
        }
        _getNormalizedResourceType(e) {
            switch (e.resourceType) {
            case "CustomUserProperties":
            case "ConversationUpdate":
            case "ThreadUpdate":
            case "NewMessage":
            case "MessageUpdate":
            case "EndpointPresence":
            case "UserPresence":
            case "ReadReceipt":
            case "SignalRelay":
                return e.resourceType;
            default:
                return "Unknown"
            }
        }
    }
    ;
    t.KpiLongPollFailure = class extends _ {
        constructor(e, t, i, n=!0, o) {
            super(),
            this._responseCode = e,
            this._origin = t,
            this._requestDuration = i,
            this._processedEvents = n,
            this._activeTimeout = o
        }
        getEventName() {
            return "kpi_longpoll_failed"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.kpi_longpoll_failed
        }
        getAttributes() {
            const e = {
                Origin: u.ChatEventOrigin[this._origin],
                ResponseCode: this._responseCode,
                RequestDuration: this._requestDuration,
                DidProcessEvents: this._processedEvents
            };
            return o.isUndefined(this._activeTimeout) || (e.ActiveTimeout = this._activeTimeout),
            o.assign({}, super.getAttributes(), e)
        }
    }
    ;
    t.FileSent = class extends y {
        constructor(e, t, i, n, o, s, r) {
            super(),
            this._conversationIds = e,
            this._source = t,
            this._extension = i,
            this._fileSize = n,
            this._viewId = o,
            this._documentId = s,
            this._messagesForPosting = r,
            this._failureReason = u.MessagingFailureReason.None,
            this._uploadStartTime = -1,
            this._uploadDuration = -1
        }
        getEventName() {
            return "file_sent"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.file_sent
        }
        getCorrelationAttributes() {
            return super.getCorrelationAttributes()
        }
        getAttributes() {
            const e = o.keys(this._messagesForPosting)
              , t = super.getAttributes()
              , i = e[0];
            return t.Message_Type = S.getMessageTypeName(this._messagesForPosting[i], g.getSkypeMri(), i),
            t.Size = this._fileSize ? this._fileSize : -1,
            t.Source = u.PostSource[this._source],
            t.Success = this._success,
            t.UploadDuration = this._uploadDuration,
            t.Extension = this._extension,
            t.NumOfConvs = this._conversationIds.length,
            t.Reason = u.MessagingFailureReason[this._failureReason],
            t.ViewId = this._viewId,
            t.DocId = this._documentId,
            t.FinishedAttemptsCount = this._finishedAttemptsSoFar || "",
            t.ResponseStatusCode = this._responseStatusCode || "",
            t
        }
        setSuccess(e, t, i, n, o, s) {
            this._success = e,
            this._failureReason = t,
            this._finishedAttemptsSoFar = i,
            this._responseStatusCode = n,
            this._uploadStartTime = o,
            this._uploadDuration = s
        }
    }
    ;
    t.FileReceived = class extends y {
        constructor(e, t, i) {
            super(),
            this._uri = e,
            this._size = t,
            this._extension = i,
            this._downloadDuration = -1,
            this._downloadStartTime = -1
        }
        getEventName() {
            return "file_received"
        }
        getTelemetryConfig() {
            return m.TelemetryConfig.file_received
        }
        getAttributes() {
            const e = new s(this._uri);
            let t = void 0;
            return this._downloadDuration > 0 && this._size && (t = 1e3 * this._size / (1024 * this._downloadDuration)),
            o.assign(super.getAttributes(), {
                URI: this._uri || "",
                Success: this._success || "",
                DownloadDuration: this._downloadDuration,
                Intent: this._intent ? u.MediaDownloadIntent[this._intent] : "",
                MediaProfile: this._mediaProfile || "",
                Extension: this._extension || "",
                ViewId: e.getViewId() || "",
                DocId: e.getDocumentId() || "",
                FailureReason: u.MessagingFailureReason[this._failureReason],
                Size: this._size || "",
                DownloadSpeed: t || "",
                FinishedAttemptsCount: this._finishedAttemptsSoFar || "",
                ResponseStatusCode: this._responseStatusCode || "",
                ErrorInfo: this._errorInfo || ""
            })
        }
        setSuccess(e, t=u.MessagingFailureReason.None, i=1, n, o="") {
            this._success = e,
            this._failureReason = t,
            this._finishedAttemptsSoFar = i,
            this._responseStatusCode = n,
            this._errorInfo = o
        }
        setIntent(e) {
            this._intent = e
        }
        setMediaProfile(e) {
            this._mediaProfile = e
        }
        startDownload() {
            this._downloadStartTime = Date.now()
        }
        endDownload() {
            this._downloadDuration = Date.now() - this._downloadStartTime
        }
        setDownloadDuration(e) {
            this._downloadDuration = e
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(70)
      , s = i(2)
      , r = i(39)
      , a = i(9);
    class l extends r.TelemetryEventBase {
        getEventName() {
            return "caap_cortana"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.CortanaMessagePerformanceEvent = class extends l {
        constructor(e, t, i) {
            super(),
            this._isOutOfBound = e,
            this._messageDelay = t,
            this._messageType = i
        }
        getActionName() {
            return "MessagePerformance"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ResponseTime = this._messageDelay,
            e.ResponseType = this._messageType,
            e.IsOutOfBound = this._isOutOfBound,
            e
        }
    }
    ;
    t.CortanaInteractionEvent = class extends l {
        constructor(e) {
            super(),
            this._entryPoint = e
        }
        getActionName() {
            return "CortanaDiscovered"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.EntryPoint = s.CortanaEntryPoint[this._entryPoint],
            e
        }
    }
    ;
    class c extends l {
        constructor(e, t, i) {
            super(),
            this._isCortanaOptedIn = e,
            this._actionName = t,
            this._clientTag = i
        }
        getActionName() {
            return "Interactions"
        }
        getCommonCortanaActionsAttributes(e) {
            let t = Object.assign({}, e);
            return t.IsCortanaOptIn = this._isCortanaOptedIn,
            t["Action.Id"] = this._clientTag ? this._clientTag : a.newGuid(),
            t["Action.Name"] = s.CortanaActionType[this._actionName],
            t["Action.Type"] = "Start",
            t
        }
        getAttributes() {
            return this.getCommonCortanaActionsAttributes(super.getAttributes())
        }
    }
    t.CortanaActionsEvent = c;
    t.CortanaAuthEvent = class extends l {
        constructor(e, t) {
            super(),
            this._authStep = e,
            this._origin = t
        }
        getActionName() {
            return "AuthFlow"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AuthenticationStep = s.CortanaAuthStep[this._authStep],
            e.Origin = s.CortanaAuthOrigin[this._origin],
            e
        }
    }
    ;
    t.CortanaFirstRunEvent = class extends l {
        constructor(e, t) {
            super(),
            this._entryPoint = e,
            this._duration = t
        }
        getActionName() {
            return "FirstRun"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.FirstRunStep = s.CortanaEntryPoint[this._entryPoint],
            e.DurationNeeded = this._duration,
            e
        }
    }
    ;
    t.CortanaErrorEvent = class extends l {
        constructor(e, t, i, n) {
            super(),
            this._authStep = e,
            this._errorCode = t,
            this._errorDescription = i,
            this._duration = n
        }
        getActionName() {
            return "Error"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AuthenticationStep = s.CortanaAuthStep[this._authStep],
            e.ErrorCode = this._errorCode || "Unknown",
            e.ErrorMessage = this._errorDescription || "",
            n.isUndefined(this._duration) || (e.DurationNeeded = this._duration),
            e
        }
    }
    ;
    t.CortanaCardActionsEvent = class extends c {
        constructor(e, t, i, n) {
            super(e, t),
            this._serviceTag = i,
            this._serviceTraceId = n
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ServiceTag = this._serviceTag || "",
            e.ServiceTraceId = this._serviceTraceId,
            e
        }
    }
    ;
    t.NegativeFeedbackClickedEvent = class extends c {
        constructor(e, t, i=!0) {
            super(e, s.CortanaActionType.NegativeFeedbackClicked),
            this._serviceTag = t,
            this._inContext = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ServiceTag = this._serviceTag || "",
            e.IsInContext = this._inContext,
            e
        }
    }
    ;
    t.MessageEvent = class extends c {
        constructor(e, t, i, n, o, s) {
            super(e, t),
            this._messageType = i,
            this._serviceTag = n,
            this._serviceTraceId = o,
            this._flightNames = s
        }
        getCommonMessageAttributes(e) {
            let t = Object.assign({}, e);
            return t.MessageType = this._messageType,
            t.ServiceTag = this._serviceTag || "",
            t.ServiceTraceId = this._serviceTraceId || "",
            t.FlightNames = this._flightNames || "",
            t
        }
        getAttributes() {
            return this.getCommonMessageAttributes(super.getAttributes())
        }
    }
    ;
    t.CortanaMessageSentEvent = class extends c {
        constructor(e, t, i, n) {
            super(e, s.CortanaActionType.MessageSent, n),
            this._hasLocation = i
        }
        getCortanaMessageSentAttributes(e) {
            return Object.assign(Object.assign({}, e), {
                HasLocation: this._hasLocation
            })
        }
        getAttributes() {
            return this.getCortanaMessageSentAttributes(super.getAttributes())
        }
    }
    ;
    class d extends c {
        constructor(e, t, i, n, o, s, r) {
            super(e, t),
            this._suggestionType = i,
            this._intent = n,
            this._suggestionCategory = o,
            this._serviceTag = s,
            this._flightNames = r
        }
        getCommonSuggestedActionsAttributes(e) {
            let t = Object.assign({}, e);
            return t.ServiceTag = this._serviceTag || "",
            t.SuggestionType = this._suggestionType,
            t.SuggestionIntent = this._intent || "",
            t.SuggestionCategory = this._suggestionCategory || "",
            t.FlightNames = this._flightNames || "",
            t
        }
        getAttributes() {
            return this.getCommonSuggestedActionsAttributes(super.getAttributes())
        }
    }
    t.CortanaSuggestedActionsEvent = d;
    t.SuggestionClickedEvent = class extends d {
        constructor(e, t, i, n, o, r, a, l, c) {
            super(e, s.CortanaActionType.SuggestionClicked, t, i, n, o, r),
            this._inContext = a,
            this._suggestionPosition = l,
            this._imBackPosition = c
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsInContext = this._inContext,
            e.SuggestionPosition = this._suggestionPosition,
            n.isUndefined(this._imBackPosition) || (e.ImBackPosition = this._imBackPosition),
            e
        }
    }
    ;
    t.SuggestionRenderedEvent = class extends d {
        constructor(e, t, i, o, r, a, l, c) {
            super(e, s.CortanaActionType.SuggestionsRendered, n.join(t), n.join(i), n.join(o), r, a),
            this._inContext = l,
            this._suggestionCount = c
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.SuggestionCount = this._suggestionCount,
            e.IsInContext = !!this._inContext,
            e
        }
    }
    ;
    var u;
    t.SuggestedCardSharedByUserEvent = class extends d {
        constructor(e, t, i, n, o, r) {
            super(e, s.CortanaActionType.SuggestedCardShared, t, i, n, o),
            this._sharedCardPositions = r
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.SharedCardPositions = n.join(this._sharedCardPositions),
            e
        }
    }
    ,
    function(e) {
        e[e.Start = 0] = "Start",
        e[e.Stop = 1] = "Stop",
        e[e.Sync = 2] = "Sync",
        e[e.RefreshToken = 3] = "RefreshToken"
    }(u = t.CortanaSignalsOperation || (t.CortanaSignalsOperation = {}));
    t.ReminderCreationStartedByUserEvent = class extends d {
        constructor(e, t, i, n, o, s, r) {
            super(e, t, i, void 0, n, o, s),
            this._reminderDateTime = r
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ReminderDateTime = this._reminderDateTime || "",
            e
        }
    }
    ;
    t.CortanaSignalsEvent = class extends l {
        constructor(e, t) {
            super(),
            this._operation = e,
            this._locationAlwaysPermission = t
        }
        getActionName() {
            return "CortanaSignals"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Operation = u[this._operation],
            e.LocationAlwaysPermission = o.PermissionStatus[this._locationAlwaysPermission],
            e
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(86)
      , s = i(0)
      , r = i(1467)
      , a = i(52)
      , l = i(7)
      , c = i(2)
      , d = i(5)
      , u = i(8)
      , g = i(18);
    var h;
    !function(e) {
        e[e.Hub = 0] = "Hub",
        e[e.Content = 1] = "Content",
        e[e.Search = 2] = "Search",
        e[e.ContactsPanel = 3] = "ContactsPanel",
        e[e.Other = 4] = "Other"
    }(h = t.RouteType || (t.RouteType = {}));
    const p = d.lazyProperties({
        transparentCard: ()=>s.Styles.createViewStyle({
            backgroundColor: u.Color.transparent
        })
    });
    t.HorizontalGestureResponseDistance = 44,
    t.ConversationHorizontalGestureResponseDistance = 120,
    t.VerticalGestureResponseDistance = 150;
    let m = new class {
        constructor() {
            this._transitionInfoId = 0,
            this._transitionInfoEvent = new a.default
        }
        transitionInfoEvent() {
            return this._transitionInfoEvent
        }
        isNavigationAnimationFinished() {
            if (!this._transitionInfo || this._transitionInfo && !this._transitionInfo.inProgress)
                return l.Resolved();
            const e = l.Defer()
              , t = this.transitionInfoEvent().subscribe(i=>{
                i.inProgress || (t.unsubscribe(),
                e.resolve(void 0))
            }
            );
            return e.promise()
        }
        transitionHint() {
            return this._transitionHint
        }
        transitionHintForPopCard() {
            if (this._transitionHint && this._transitionHint.forPopCard)
                return this._transitionHint
        }
        setTransitionHint(e) {
            this._transitionHint = e
        }
        onNavigationStarted(e, t, i) {
            this._transitionInfo = {
                key: this._transitionInfoId++,
                inProgress: !0,
                toRoute: t,
                fromRoute: i,
                progress: e
            },
            this._transitionInfoEvent.fire(this._transitionInfo)
        }
        onNavigationCompleted() {
            this._transitionInfo && (this._transitionInfo.inProgress = !1,
            this._transitionInfoEvent.fire(this._transitionInfo))
        }
        floatFromRight(e) {
            if (g.getPlatformType() === c.PlatformType.iOS) {
                const t = {
                    direction: r.Types.NavigatorSceneConfigType.FloatFromRight,
                    gestureResponseDistance: e,
                    customSceneConfig: {
                        transitionSpec: {
                            duration: 366,
                            easing: o.Easing.SkypeExpoOut5
                        },
                        transitionStyle: (e,t)=>({
                            inputRange: [e - 1, e, e + .99, e + 1],
                            opacityOutput: [1, 1, .3, 0],
                            scaleOutput: [1, 1, 1, 1],
                            translateXOutput: [t.width, 0, -t.width / 4, -t.width / 4],
                            translateYOutput: [0, 0, 0, 0]
                        })
                    }
                };
                return n.isUndefined(e) || (t.gestureResponseDistance = e),
                t
            }
            const t = {
                direction: r.Types.NavigatorSceneConfigType.FloatFromRight
            };
            return n.isUndefined(e) || (t.gestureResponseDistance = e),
            t
        }
        floatFromBottom(e) {
            const t = {
                direction: r.Types.NavigatorSceneConfigType.FloatFromBottom,
                customSceneConfig: {
                    transitionSpec: {
                        duration: 366,
                        easing: o.Easing.SkypeExpoOut5
                    },
                    transitionStyle: (e,t)=>({
                        inputRange: [e - 1, e, e + .99, e + 1],
                        opacityOutput: [1, 1, .3, 0],
                        scaleOutput: [1, 1, .95, .95],
                        translateXOutput: [0, 0, 0, 0],
                        translateYOutput: [t.height, 0, -10, -10]
                    })
                }
            };
            return n.isUndefined(e) || (t.gestureResponseDistance = e),
            t
        }
        floatFromBottomNoScale(e=!1) {
            return {
                direction: r.Types.NavigatorSceneConfigType.FloatFromBottom,
                gestureResponseDistance: 100,
                customSceneConfig: {
                    hideShadow: e,
                    cardStyle: e ? p.transparentCard : void 0,
                    transitionSpec: {
                        duration: 366,
                        easing: o.Easing.SkypeExpoOut5
                    },
                    transitionStyle: (e,t)=>({
                        inputRange: [e - 1, e, e + 1],
                        opacityOutput: [1, 1, 1],
                        scaleOutput: [1, 1, 1],
                        translateXOutput: [0, 0, 0],
                        translateYOutput: [t.height, 0, 0]
                    })
                }
            }
        }
        topQuickFade() {
            return {
                gestureResponseDistance: 0,
                direction: r.Types.NavigatorSceneConfigType.FloatFromBottom,
                customSceneConfig: {
                    hideShadow: !0,
                    transitionSpec: {
                        duration: 366,
                        easing: o.Easing.SkypeExpoOut5
                    },
                    transitionStyle: (e,t)=>({
                        inputRange: [e - 1, e, e + .99, e + 1],
                        opacityOutput: [0, 1, 1, 0],
                        scaleOutput: [1, 1, 1, 1],
                        translateXOutput: [0, 0, 0, 0],
                        translateYOutput: [-15, 0, 0, 0]
                    })
                }
            }
        }
        popCardsQuickFade() {
            return {
                gestureResponseDistance: 0,
                direction: r.Types.NavigatorSceneConfigType.FloatFromBottom,
                customSceneConfig: {
                    hideShadow: !0,
                    transitionSpec: {
                        duration: 366,
                        easing: o.Easing.SkypeExpoOut5
                    },
                    transitionStyle: (e,t)=>({
                        inputRange: [e - 1, e - .5, e, e + .99, e + 1],
                        opacityOutput: [0, 0, 1, 1, 0],
                        scaleOutput: [1, 1, 1, 1, 1],
                        translateXOutput: [0, 0, 0, 0, 0],
                        translateYOutput: [0, 0, 0, 0, 0]
                    })
                }
            }
        }
        noTransition(e=!0) {
            return {
                gestureResponseDistance: 0,
                direction: r.Types.NavigatorSceneConfigType.FloatFromBottom,
                customSceneConfig: {
                    hideShadow: !e,
                    cardStyle: e ? void 0 : p.transparentCard,
                    transitionSpec: {
                        duration: e ? 1 : 0,
                        easing: o.Easing.Linear
                    },
                    transitionStyle: (t,i)=>({
                        inputRange: [t - 1, t, t + .99, t + 1],
                        opacityOutput: [1, 1, 1, e ? 0 : 1],
                        scaleOutput: [1, 1, 1, 1],
                        translateXOutput: [0, 0, 0, 0],
                        translateYOutput: [0, 0, 0, 0]
                    })
                }
            }
        }
        fade() {
            return {
                direction: r.Types.NavigatorSceneConfigType.FadeWithSlide
            }
        }
        sceneConfigForSearchTransition() {
            return {
                direction: r.Types.NavigatorSceneConfigType.FloatFromBottom,
                gestureResponseDistance: 0,
                customSceneConfig: {
                    hideShadow: !0,
                    cardStyle: p.transparentCard,
                    transitionSpec: {
                        duration: o.timing.Duration.Default,
                        easing: o.Easing.SkypeExpoOut5
                    },
                    transitionStyle: (e,t)=>({
                        inputRange: [e - 1, e - .05, e + .05, e + 1],
                        opacityOutput: [0, 1, 1, 0],
                        scaleOutput: [1, 1, 1, 1],
                        translateXOutput: [0, 0, 0, 0],
                        translateYOutput: [0, 0, 0, 0]
                    })
                }
            }
        }
        isHubContentTransition() {
            return !!(this._transitionInfo && this._transitionInfo.fromRoute && this._transitionInfo.toRoute) && (!!this._areUniqueRouteTypes(this._transitionInfo.fromRoute, this._transitionInfo.toRoute) && (this._isHubOrContentRoute(this._transitionInfo.fromRoute) && this._isHubOrContentRoute(this._transitionInfo.toRoute)))
        }
        isHubSearchTransition() {
            return !!(this._transitionInfo && this._transitionInfo.fromRoute && this._transitionInfo.toRoute) && (!!this._areUniqueRouteTypes(this._transitionInfo.fromRoute, this._transitionInfo.toRoute) && (this._isHubOrSearchRoute(this._transitionInfo.fromRoute) && this._isHubOrSearchRoute(this._transitionInfo.toRoute)))
        }
        isContactsPanelSearchTransition() {
            return !!(this._transitionInfo && this._transitionInfo.fromRoute && this._transitionInfo.toRoute) && (!!this._areUniqueRouteTypes(this._transitionInfo.fromRoute, this._transitionInfo.toRoute) && (this._isContactsPanelOrSearchRoute(this._transitionInfo.fromRoute) && this._isContactsPanelOrSearchRoute(this._transitionInfo.toRoute)))
        }
        isSearchTransition() {
            return !!(this._transitionInfo && this._transitionInfo.fromRoute && this._transitionInfo.toRoute) && (!!this._areUniqueRouteTypes(this._transitionInfo.fromRoute, this._transitionInfo.toRoute) && (this._isRouteType(this._transitionInfo.toRoute, [h.Search]) || this._isRouteType(this._transitionInfo.fromRoute, [h.Search])))
        }
        _areUniqueRouteTypes(e, t) {
            return (e ? e.type : h.Other) !== (t ? t.type : h.Other)
        }
        _isHubOrSearchRoute(e) {
            return this._isRouteType(e, [h.Hub, h.Search])
        }
        _isHubOrContentRoute(e) {
            return this._isRouteType(e, [h.Hub, h.Content])
        }
        _isContactsPanelOrSearchRoute(e) {
            return this._isRouteType(e, [h.ContactsPanel, h.Search])
        }
        _isRouteType(e, t) {
            return n.includes(t, e.type)
        }
        test_reset() {
            this._transitionInfo = void 0
        }
    }
    ;
    t.default = m
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1)
      , s = i(760)
      , r = i(137)
      , a = i(595)
      , l = i(19)
      , c = i(18)
      , d = i(39);
    class u extends d.TelemetryEventBase {
        getEventName() {
            return "s4l_offers"
        }
        getAriaTenantTokenOverride() {
            return c.getAriaCommerceTenantToken()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.PromotionDetailsReceived = class extends u {
        constructor(e, t, i) {
            super(),
            this._offerType = e,
            this._goLink = t,
            this._inAppAllowed = i
        }
        getActionName() {
            return "PromotionDetailsReceived"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.OfferType = this._offerType,
            e.InAppAllowed = n.isUndefined(this._inAppAllowed) ? "undefined" : this._inAppAllowed,
            e.GoLink = this._goLink,
            e
        }
    }
    ;
    t.PurchaseContinuationPanelOpened = class extends u {
        constructor(e, t) {
            super(),
            this._offerType = e,
            this._campaignRef = t
        }
        getActionName() {
            return "PurchaseContinuationPanelOpened"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.OfferType = this._offerType,
            e.CampaignRef = this._campaignRef || "",
            e
        }
    }
    ;
    t.RecommendedSubscriptionsLoaded = class extends u {
        constructor(e, t, i) {
            super(),
            this._cardsToShow = e,
            this._defaultOpened = t,
            this._totalRecOffers = i
        }
        getActionName() {
            return "RecommendedSubscriptionsLoaded"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CardsToShowCount = void 0 !== this._cardsToShow ? this._cardsToShow : "",
            e.TotalCardsCount = void 0 !== this._totalRecOffers ? this._totalRecOffers : "",
            e.isDefaultOpened = void 0 !== this._defaultOpened ? this._defaultOpened : "",
            e
        }
    }
    ;
    t.ButtonClicked = class extends u {
        constructor(e, t, i, n, o, s) {
            super(),
            this._cardType = e,
            this._location = t,
            this._offerType = i,
            this._campaignRef = n,
            this._cardsToShow = o,
            this._defaultOpened = s
        }
        getActionName() {
            return "ContinueButtonClicked"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CardType = this._getBackwardsCompatibleCardTypeAttribute(),
            e.Location = r.Location[this._location],
            e.OfferType = this._offerType || "",
            e.CampaignRef = this._campaignRef || "",
            e.CardsToShowCount = void 0 !== this._cardsToShow ? this._cardsToShow : "",
            e.isDefaultOpened = void 0 !== this._defaultOpened ? this._defaultOpened : "",
            e
        }
        _getBackwardsCompatibleCardTypeAttribute() {
            switch (this._location) {
            case r.Location.BalancePanel:
                switch (this._cardType) {
                case r.CardType.CallingRecommended:
                    return "BalanceRecommended";
                case r.CardType.Credit:
                case r.CardType.CreditSingle:
                    return "BalanceCredit";
                default:
                    return "Balance" + r.CardType[this._cardType]
                }
            case r.Location.ContinuePurchase:
                switch (this._cardType) {
                case r.CardType.CallingPersonal:
                    return "ContinueCallingRecommended";
                case r.CardType.CallingRecommended:
                    return "ContinueCallingPopular";
                case r.CardType.Credit:
                case r.CardType.CreditSingle:
                    return "ContinueCredit";
                default:
                    return "Continue" + r.CardType[this._cardType]
                }
            default:
                return r.Location[this._location] + r.CardType[this._cardType]
            }
        }
    }
    ;
    t.OffersIntroductionButtonClick = class extends u {
        constructor(e) {
            super(),
            this._step = e
        }
        getActionName() {
            return "OffersIntroductionButtonClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Step = this._step,
            e
        }
    }
    ;
    t.CreditOfferOptionClick = class extends u {
        constructor(e, t, i) {
            super(),
            this._creditOffer = e,
            this._isStacked = t,
            this._creditPickerSize = i
        }
        getActionName() {
            return "CreditOfferOptionClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CreditOffer = this._creditOffer,
            e.IsStacked = this._isStacked,
            e.CreditPickerSize = this._creditPickerSize,
            e
        }
    }
    ;
    t.BuyCreditOfferOptionClick = class extends u {
        constructor(e, t, i, n, o, s) {
            super(),
            this._creditOffer = e,
            this._buttonType = t,
            this._isStacked = i,
            this._creditPickerSize = n,
            this._location = o,
            this._wasCreditPickerUsed = s
        }
        getActionName() {
            return "BuyCreditOfferOptionClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CreditOffer = this._creditOffer,
            e.ButtonType = this._buttonType,
            e.IsStacked = this._isStacked,
            e.CreditPickerSize = this._creditPickerSize,
            e.WasCreditPickerUsed = this._wasCreditPickerUsed,
            e.Location = r.Location[this._location],
            e
        }
    }
    ;
    t.CreditPickerRenderingError = class extends u {
        getActionName() {
            return "CreditPickerRenderingError"
        }
    }
    ;
    t.SkypeNumberTelemetry = class extends u {
        constructor(e, t, i, n) {
            super(),
            this._subtype = e,
            this._action = t,
            this._location = i,
            this._fromBuyToFetchDuration = n
        }
        getActionName() {
            return "SkypeNumber" + a.SkypeNumberTelemetryOrigin[this._subtype] + this._actionType()
        }
        _actionType() {
            return this._action ? s.flow(o.camelCase, o.upperFirst)(this._action) : ""
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Location = void 0 !== this._location ? r.Location[this._location] : "",
            e.FromBuyToFetchDuration = void 0 !== this._fromBuyToFetchDuration ? this._fromBuyToFetchDuration : "",
            e
        }
    }
    ;
    t.SkypeNumberPanelOpened = class extends u {
        constructor(e) {
            super(),
            this._location = e
        }
        getActionName() {
            return "SkypeNumberPanelOpened"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Location = r.Location[this._location],
            e
        }
    }
    ;
    t.SkypeNumberPurchaseFlowClick = class extends u {
        constructor(e, t) {
            super(),
            this._buttonClicked = e,
            this._defaultClick = t
        }
        getActionName() {
            return "SkypeNumberPurchaseFlowClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ButtonClicked = this._buttonClicked,
            void 0 !== this._defaultClick && (e.DefaultClick = this._defaultClick),
            e
        }
    }
    ;
    t.SkypeNumberPurchaseFlowOptionClick = class extends u {
        constructor(e) {
            super(),
            this._skypeNumberOption = e
        }
        getActionName() {
            return "SkypeNumberPurchaseFlowOptionClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.SkypeNumberOption = this._skypeNumberOption,
            e
        }
    }
    ;
    t.SkypeNumberPurchaseFlowOptionSelected = class extends u {
        constructor(e, t, i, n) {
            super(),
            this._skypeNumberOption = e,
            this._optionSelectedCountryRegion = t,
            this._optionSelectedArea = i,
            this._optionSelectedPrefix = n
        }
        getActionName() {
            return "SkypeNumberPurchaseFlowOptionSelected"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.SkypeNumberOption = this._skypeNumberOption,
            e.OptionSelectedCountryRegion = l.toUpper(this._optionSelectedCountryRegion) || "",
            e.OptionSelectedArea = l.toUpper(this._optionSelectedArea) || "",
            e.OptionSelectedPrefix = this._optionSelectedPrefix || "",
            e
        }
    }
    ;
    t.LoadingFinished = class extends u {
        constructor(e, t) {
            super(),
            this._duration = e,
            this._location = t
        }
        getActionName() {
            return "LoadingFinished"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Duration = this._duration,
            e.Location = r.Location[this._location],
            e
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(407)
      , r = i(842)
      , a = i(2)
      , l = i(3)
      , c = i(1545)
      , d = i(9);
    class u {
        static showWithBuilders(e) {
            const t = d.newCauseId();
            l.log(a.LogTraceArea.GenericUnsafe, "CustomActionMenuUtils.showWithBuilders, causeId: " + t);
            const i = o.createElement(c.default, {
                rowBuilders: e.builders,
                colorThemeOverride: e.colorThemeOverride
            })
              , r = s.default.getMenuItemHeight();
            let g = 0;
            n.each(e.builders, e=>{
                g += e.props.rowHeight || r
            }
            );
            const h = Object.assign(Object.assign({}, e), {
                menuId: e.menuId || this.menuId(),
                menuHeight: g,
                content: i
            });
            u.showWithContent(h, t)
        }
        static showWithContent(e, t) {
            l.log(a.LogTraceArea.GenericUnsafe, "CustomActionMenuUtils.showWithContent, causeId: " + t),
            r.default.show(e, t)
        }
        static menuId() {
            return "custommenu" + this._menuCount++
        }
        static close(e, t) {
            l.log(a.LogTraceArea.GenericUnsafe, "CustomActionMenuUtils.close, causeId: " + t),
            r.default.close(e, t)
        }
        static closeIfNeeded(e, t) {
            const i = r.default.isCustomActionMenuShownNoSubscription();
            l.log(a.LogTraceArea.GenericUnsafe, "CustomActionMenuUtils.closeIfNeeded menuShown: " + i + " causeId: " + t),
            i && this.close(e, t)
        }
    }
    t.default = u,
    u._menuCount = 0
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(70)
      , s = i(0)
      , r = i(160)
      , a = i(2)
      , l = i(180)
      , c = i(180)
      , d = i(39);
    class u extends d.TelemetryEventBase {
        constructor() {
            super(...arguments),
            this._onboardingTrackingAttributes = {}
        }
        setOnboardingAttributes(e) {
            this._onboardingTrackingAttributes = e
        }
        getOnboardingAttributes() {
            return this._onboardingTrackingAttributes
        }
        getAttributes() {
            return n.extend({}, super.getAttributes(), this.getOnboardingAttributes())
        }
    }
    class g extends u {
        constructor(e) {
            super(),
            this._dialogOrigin = e
        }
        getEventName() {
            return "onboarding_setup"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e.DialogOrigin = r.DialogNavOrigin[this._dialogOrigin],
            e
        }
    }
    t.SetupWizardStarted = class extends g {
        constructor(e, t, i, n, o, s, r, a) {
            super(e),
            this._appState = t,
            this._stringifiedSteps = i,
            this._notificationsPermission = n,
            this._cameraPermission = o,
            this._microphonePermission = s,
            this._contactsPermission = r,
            this._scenarioId = a
        }
        getActionName() {
            return "started"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.AppState = s.Types.AppActivationState[this._appState],
            e.StepSequence = this._stringifiedSteps,
            e.NotificationsPermission = o.PermissionStatus[this._notificationsPermission],
            e.CameraPermission = o.PermissionStatus[this._cameraPermission],
            e.MicrophonePermission = o.PermissionStatus[this._microphonePermission],
            e.ContactsPermission = o.PermissionStatus[this._contactsPermission],
            e.ScenarioId = this._scenarioId,
            e
        }
    }
    ;
    t.AvatarChanged = class extends g {
        constructor(e, t, i, n) {
            super(n),
            this._success = e,
            this._avatarChangeType = t,
            this._durationInMs = i
        }
        getActionName() {
            return "avatar_changed"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                ChangeType: a.AvatarChangeType[this._avatarChangeType],
                Success: this._success,
                Duration: this._durationInMs
            })
        }
    }
    ;
    t.SetupWizardFinished = class extends g {
        constructor(e, t, i, n, o, s) {
            super(t),
            this._duration = e,
            this._firstOccurence = i,
            this._scenarioId = n,
            this._success = o,
            this._stringifiedSteps = s
        }
        getActionName() {
            return "finished"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Duration = this._duration,
            e.FirstOccurence = this._firstOccurence,
            e.ScenarioId = this._scenarioId,
            e.Success = this._success,
            e.StepSequence = this._stringifiedSteps,
            e
        }
    }
    ;
    t.BugReportedInWizard = class extends g {
        constructor(e) {
            super(e)
        }
        getActionName() {
            return "bugReportedInWizard"
        }
    }
    ;
    t.SetupWizardClickedOutside = class extends g {
        constructor(e) {
            super(e)
        }
        getActionName() {
            return "clickedOutside"
        }
        getAttributes() {
            return super.getAttributes()
        }
    }
    ;
    class h extends d.TelemetryEventBase {
        constructor() {
            super(...arguments),
            this._onboardingTrackingAttributes = {}
        }
        setOnboardingAttributes(e) {
            this._onboardingTrackingAttributes = e
        }
        getOnboardingAttributes() {
            return this._onboardingTrackingAttributes
        }
        getEventName() {
            return "onboarding_postsetup"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e = n.merge([], e, this.getOnboardingAttributes()),
            e
        }
    }
    var p, m, S;
    !function(e) {
        e[e.LandingScreenStandard = 0] = "LandingScreenStandard",
        e[e.LandingScreenForNewUsers = 1] = "LandingScreenForNewUsers"
    }(p = t.TutorialLaunchOrigin || (t.TutorialLaunchOrigin = {}));
    t.TutorialLaunched = class extends h {
        constructor(e, t) {
            super(),
            this._origin = e,
            this._isRestarted = t
        }
        getActionName() {
            return "tutorialLaunched"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = p[this._origin],
            e.IsRestarted = this._isRestarted,
            e
        }
    }
    ,
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.NoCalls = 1] = "NoCalls",
        e[e.NoRecentConversations = 2] = "NoRecentConversations"
    }(m = t.EmptyStateOrigin || (t.EmptyStateOrigin = {}));
    t.DisplayedEmptyStateCta = class extends h {
        constructor(e) {
            super(),
            this._origin = e
        }
        getActionName() {
            return "emptyStateCtaDisplayed"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Origin: m[this._origin]
            })
        }
    }
    ;
    t.WelcomeViewWithProfileUpdateDisplayed = class extends h {
        getActionName() {
            return "welcomeViewWithProfileUpdateDisplayed"
        }
    }
    ;
    t.WelcomeViewWithCardsDisplayed = class extends h {
        getActionName() {
            return "welcomeViewWithCardsDisplayed"
        }
    }
    ;
    t.FinishSetupPromptClicked = class extends h {
        getActionName() {
            return "finishSetupPromptClicked"
        }
    }
    ,
    function(e) {
        e[e.FirstMessageReceived = 0] = "FirstMessageReceived",
        e[e.FirstCallAnswered = 1] = "FirstCallAnswered"
    }(S = t.OnboardingActivityType || (t.OnboardingActivityType = {}));
    t.OnboardingActivityDone = class extends h {
        constructor(e) {
            super(),
            this._activityType = e
        }
        getActionName() {
            return "activityDone"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ActivityType = S[this._activityType],
            e
        }
    }
    ;
    class C extends d.TelemetryEventBase {
        constructor() {
            super(...arguments),
            this._onboardingTrackingAttributes = {}
        }
        setOnboardingAttributes(e) {
            this._onboardingTrackingAttributes = e
        }
        getOnboardingAttributes() {
            return this._onboardingTrackingAttributes
        }
        getEventName() {
            return "onboarding_homescreen"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e = n.merge([], e, this.getOnboardingAttributes()),
            e.Action = this.getActionName(),
            e
        }
    }
    t.LandingPageShown = class extends C {
        getActionName() {
            return "LandingPageShown"
        }
    }
    ;
    t.StartNewConversationClicked = class extends C {
        getActionName() {
            return "StartNewConversationClicked"
        }
    }
    ;
    class y extends C {
        constructor(e) {
            super(),
            this._variant = e
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Variant = c.OnboardingCheckAccountSectionVariant[this._variant],
            e
        }
    }
    t.SwitchAccountClicked = class extends y {
        getActionName() {
            return "SwitchAccountClick"
        }
    }
    ;
    t.CheckAccountSectionUnknownSignId = class extends y {
        constructor(e, t) {
            super(e),
            this._originalVariant = t
        }
        getActionName() {
            return "CheckAccountSectionUnknownSignId"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.OriginalVariant = c.OnboardingCheckAccountSectionVariant[this._originalVariant],
            e
        }
    }
    ;
    t.LandingPageWithCardsTelemetryEvent = class extends u {
        constructor(e) {
            super(),
            this.props = e
        }
        getEventName() {
            return "onboarding_landing_page_with_cards"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CardName = l.LandingPageCardId[this.props.cardId],
            this.props.componentMounted && (e.Mounted = this.props.componentMounted),
            this.props.actionPerformed && (e.ActionPerformed = this.props.actionPerformed),
            this.props.wasAppUpdated && (e.WasAppUpdated = this.props.wasAppUpdated),
            e
        }
    }
    ;
    t.UserProfileChange = class extends g {
        constructor(e) {
            super(e.origin),
            this._props = e
        }
        getActionName() {
            return "user_profile_change"
        }
        getAttributes() {
            const e = super.getAttributes();
            return this._props.addPhoneNumber && (e.DidChooseAddPhoneNumber = this._props.addPhoneNumber),
            this._props.addEmail && (e.DidChooseAddEmail = this._props.addEmail),
            e
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.Web = 1] = "Web",
        e[e.Email = 2] = "Email",
        e[e.Skype = 3] = "Skype",
        e[e.Tel = 4] = "Tel",
        e[e.CallTo = 5] = "CallTo",
        e[e.VoipAudio = 6] = "VoipAudio",
        e[e.VoipVideo = 7] = "VoipVideo",
        e[e.Messaging = 8] = "Messaging",
        e[e.SkypeWin = 9] = "SkypeWin",
        e[e.Meetnow = 10] = "Meetnow"
    }(t.UrlType || (t.UrlType = {}))
}
, , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(2)
      , r = i(3)
      , a = i(1471)
      , l = i(129);
    var c, d;
    !function(e) {
        e[e.ColdStartup = 0] = "ColdStartup",
        e[e.AppStateChange = 1] = "AppStateChange",
        e[e.Push = 2] = "Push",
        e[e.LocalNotification = 3] = "LocalNotification",
        e[e.TrouterMessage = 4] = "TrouterMessage"
    }(c = t.AppWakeupReason || (t.AppWakeupReason = {})),
    function(e) {
        e[e.Unknown = 1] = "Unknown",
        e[e.Push = 2] = "Push",
        e[e.Recents = 3] = "Recents",
        e[e.Chat = 4] = "Chat",
        e[e.IncomingRing = 5] = "IncomingRing",
        e[e.Dialpad = 6] = "Dialpad"
    }(d = t.StartupContext || (t.StartupContext = {}));
    t.default = new class {
        constructor() {
            this._startupContext = d.Unknown,
            this._startupPhasesCompleted = [],
            this._startupScenario = new l.default(l.ScenarioName.AppStartupIntent,void 0,void 0,void 0,!0),
            this._startupScenario.setDuplicateStepMarkingEnabled(!0)
        }
        appColdStartup(e) {
            a.appColdStartup(e),
            this._startupScenario.start(void 0, e),
            this._setScenarioTimeout(),
            this._maybeMarkStep("ColdStartup")
        }
        startupPhaseEnded(e, t, i) {
            a.logStartupPerfDuration(e, t, void 0, i),
            this._startupPhasesCompleted[e] = !0,
            this._maybeMarkStep("Phase" + e, this._shouldOverrideDuration(e) ? t : void 0, i ? {
                intentBased: i
            } : void 0)
        }
        checkingAppState(e) {
            this._fullStartupCompleted() || (this._shouldResetScenario(e) && this._reset(),
            this._maybeRestartScenario(),
            this._maybeMarkStep("CheckAppState", void 0, {
                reason: c[e]
            }))
        }
        startedProcessingLocalNotification(e) {
            this._fullStartupCompleted() || (this._maybeRestartScenario(),
            this._maybeMarkStep("StartedProcessingLocalNotification", void 0, {
                eventType: e
            }))
        }
        startedProcessingPush(e) {
            this._fullStartupCompleted() || (this._isScenarioValid([d.Unknown]) && o.App.getActivationState() === o.Types.AppActivationState.Background ? (this._setStartupContext(d.Push, !1),
            this._maybeMarkStep("StartedProcessingPush", void 0, {
                eventType: e
            })) : this._shouldResetScenario(c.Push) && this._reset())
        }
        pushProcessingComplete() {
            this._isScenarioValid([d.Push]) && (this._maybeMarkStep("PushProcessingComplete"),
            this._sendStartupTelemetry())
        }
        incomingCallPush() {
            this._setStartupContext(d.IncomingRing),
            this._maybeRestartScenario(),
            this._maybeMarkStep("IncomingCallPush")
        }
        notifyingCallee(e) {
            this._setStartupContext(d.IncomingRing),
            this._maybeRestartScenario(),
            this._maybeMarkStep("NotifyingCallee", void 0, e),
            this._sendStartupTelemetry()
        }
        displayIncomingCallNotification() {
            this._setStartupContext(d.IncomingRing),
            this._maybeRestartScenario(),
            this._maybeMarkStep("DisplayIncomingCallNotification")
        }
        presentIncomingRing() {
            this._setStartupContext(d.IncomingRing),
            this._maybeRestartScenario(),
            this._maybeMarkStep("PresentIncomingRing")
        }
        callPanelRendered() {
            this._isScenarioValid([d.IncomingRing]) ? (this._maybeMarkStep("CallPanelRendered"),
            this._sendStartupTelemetry()) : this._reset()
        }
        willNavigateToRecents() {
            this._setStartupContext(d.Recents),
            this._maybeRestartScenario(),
            this._maybeMarkStep("WillNavigateToRecents")
        }
        recentsWillMount() {
            this._maybeMarkStep("RecentsWillMount"),
            a.phase6Start()
        }
        conversationListPanelRendered() {
            this._isScenarioValid([d.Recents, d.Unknown, d.Push]) && (this._setStartupContext(d.Recents),
            this._maybeMarkStep("ConversationListPanelRendered"))
        }
        recentsRendered() {
            a.phase6End(),
            this._isScenarioValid([d.Recents, d.Unknown, d.Push]) ? (this._setStartupContext(d.Recents),
            this._maybeMarkStep("RecentsRendered"),
            this._sendStartupTelemetry()) : this._reset()
        }
        willNavigateToChat() {
            this._setStartupContext(d.Chat),
            this._maybeRestartScenario(),
            this._maybeMarkStep("WillNavigateToChat")
        }
        messageStreamRendered() {
            this._isScenarioValid([d.Chat]) ? (this._maybeMarkStep("MessaggeStreamRendered"),
            this._sendStartupTelemetry()) : this._reset()
        }
        willNavigateToDialpad() {
            this._setStartupContext(d.Dialpad),
            this._maybeRestartScenario(),
            this._maybeMarkStep("WillNavigateToDialpad")
        }
        dialpadRendered() {
            this._isScenarioValid([d.Dialpad]) ? (this._maybeMarkStep("DialpadRendered"),
            this._sendStartupTelemetry()) : this._reset()
        }
        _shouldOverrideDuration(e) {
            return e <= 3
        }
        _maybeMarkStep(e, t, i) {
            this._isScenarioValid() && (this._startupScenario.markStepCompleted(e, Object.assign(Object.assign({}, this._getAttributes()), i), t, !0),
            r.log(s.LogTraceArea.Startup, l.ScenarioName[l.ScenarioName.AppStartupIntent] + " mark step: " + e + " " + JSON.stringify(i)))
        }
        _isScenarioValid(e) {
            return this._startupScenario.hasStarted() && !this._startupScenario.isResolved() && (!e || n.includes(e, this._startupContext))
        }
        _fullStartupCompleted() {
            return !!this._startupPhasesCompleted[5]
        }
        _setStartupContext(e, t=!0) {
            this._fullStartupCompleted() || (this._startupContext === d.Unknown || t) && (r.log(s.LogTraceArea.Startup, "Setting startup telemetry context " + d[e]),
            this._startupContext = e)
        }
        _maybeRestartScenario() {
            this._fullStartupCompleted() || this._startupScenario.hasStarted() || (this._startupScenario.start(),
            this._setScenarioTimeout())
        }
        _shouldResetScenario(e) {
            return (this._startupContext === d.Push || this._startupContext === d.Unknown) && e !== c.ColdStartup
        }
        _reset() {
            this._startupScenario.reset()
        }
        _getAttributes() {
            return {
                AppState: o.App.getActivationState(),
                StartupContext: d[this._startupContext],
                ColdStartup: this._startupScenario.isStepMarked("ColdStartup")
            }
        }
        _sendStartupTelemetry() {
            this._isScenarioValid() && (this._startupScenario.finish(this._getAttributes()),
            this._startupScenario.reset())
        }
        _setScenarioTimeout() {
            this._startupScenario.setScenarioTimeout(()=>(this._startupScenario.fail("TimedOut", this._getAttributes()),
            this._reset(),
            !1), 6e4)
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(357)
      , s = i(1484)
      , r = i(52)
      , a = i(7)
      , l = i(61)
      , c = i(2)
      , d = i(3)
      , u = i(19)
      , g = i(18);
    class h {
        constructor(e, t, i, o, s) {
            this._soundDescription = e,
            this._setOutputVolume = t,
            this._getOutputDevice = i,
            this._getOutputVolume = o,
            this._instanceId = ++h._nextInstanceId,
            this._piiFilenames = ["Skype_Dtmf_0", "Skype_Dtmf_1", "Skype_Dtmf_2", "Skype_Dtmf_3", "Skype_Dtmf_4", "Skype_Dtmf_5", "Skype_Dtmf_6", "Skype_Dtmf_7", "Skype_Dtmf_8", "Skype_Dtmf_9"],
            this._nextPlayerToken = 0,
            this._players = {},
            s.subscribe(e=>{
                n.each(this._players, t=>{
                    this._updateOutputDevice(t, e),
                    this._updateOutputVolume(t, {}, e)
                }
                )
            }
            )
        }
        _description() {
            const e = n.includes(this._piiFilenames, this.filename) ? "<pii:DtmfTone>" : this.filename;
            return `SoundPlayer[${this._instanceId}:${e}]`
        }
        _methodLog(e, t) {
            return `${this._description()}.${e} causeId: ${t}`
        }
        _audioPlayerEntryLog(e, t, i) {
            return `${this._description()}[${t.token}].${e} causeId: ${i}`
        }
        get filename() {
            return this._soundDescription.name + "." + this._soundDescription.extension
        }
        playOnce(e, t) {
            return d.log(c.LogTraceArea.AudioPlayer, this._methodLog("playOnce", e)),
            this._createPlayer(t, e).then(t=>{
                const i = a.Defer();
                let n = t.player.endedEvent.subscribe(()=>{
                    if (!n)
                        return;
                    d.log(c.LogTraceArea.AudioPlayer, this._audioPlayerEntryLog("playOnce", t, e) + " Finished"),
                    this.dispose(t.token, e);
                    const o = n;
                    n = void 0,
                    o.unsubscribe(),
                    i.resolve(void 0)
                }
                );
                return t.player.play(!1, !1),
                i.promise()
            }
            )
        }
        playRepeating(e, t) {
            return d.log(c.LogTraceArea.AudioPlayer, this._methodLog("playRepeating", e)),
            this._createPlayer(t, e).then(e=>(e.player.play(!0, !1),
            e.token))
        }
        dispose(e, t) {
            const i = this._players[e];
            i ? (d.log(c.LogTraceArea.AudioPlayer, this._audioPlayerEntryLog("dispose", i, t)),
            i.player.stop(),
            i.player.release(),
            delete this._players[e]) : d.warn(c.LogTraceArea.AudioPlayer, this._methodLog("dispose", t) + " No player found token: " + e)
        }
        _createPlayer(e, t) {
            const i = ++this._nextPlayerToken;
            d.log(c.LogTraceArea.AudioPlayer, this._methodLog("_createPlayer", t) + " token: " + i + " options: " + (e ? JSON.stringify(e) : "none"));
            const n = {
                token: i,
                player: s.Audio.openFile(g.getSoundPath(this.filename), this._soundDescription.type)
            };
            this._players[i] = n;
            const o = e && e.unmute;
            return this._updateOutputVolume(n, {
                force: !0,
                unmute: o
            }, t),
            this._updateOutputMuted(n, {
                force: !0,
                unmute: o
            }, t),
            this._updateOutputDevice(n, t, !0).always(()=>n)
        }
        _updateOutputDevice(e, t, i) {
            const n = this._getOutputDevice(!!this._soundDescription.secondary);
            return !n || n.id === this._deviceId && !i ? a.Resolved() : (d.log(c.LogTraceArea.AudioPlayer, this._audioPlayerEntryLog("_updateOutputDevice", e, t)),
            a.fromThenable(e.player.setOutputDevice(n.id, n.browserId)).then(()=>{
                d.log(c.LogTraceArea.AudioPlayer, this._audioPlayerEntryLog("_updateOutputDevice", e, t) + " Set device: " + n.id),
                this._deviceId = n.id
            }
            , i=>d.warn(c.LogTraceArea.AudioPlayer, this._audioPlayerEntryLog("_updateOutputDevice", e, t) + " Failed to set device " + u.errorAsString(i))))
        }
        _updateOutputVolume(e, t, i) {
            let n = this._getOutputVolume();
            (n !== this._volume || t.force) && (t.unmute && (this._soundDescription.secondary ? n = .5 : (n = n > 0 ? n : .5,
            this._setOutputVolume(n))),
            d.log(c.LogTraceArea.AudioPlayer, this._audioPlayerEntryLog("_updateOutputVolume", e, i) + " volume: " + n + " unmute: " + !!t.unmute),
            this._volume = n,
            e.player.setVolume(n))
        }
        _updateOutputMuted(e, t, i) {
            let s = e.player.getMuted();
            n.isUndefined(t.unmute) || t.unmute && s && !t.force || (t.unmute && (!this._soundDescription.secondary && l.CallingCapabilities.unmuteDeviceSupported() && o.default.unmuteSpeaker(),
            e.player.setMuted(!1)),
            d.log(c.LogTraceArea.AudioPlayer, this._audioPlayerEntryLog("_updateOutputMuted", e, i) + " unmute: " + !!t.unmute))
        }
    }
    t.SoundPlayer = h,
    h._nextInstanceId = 0;
    class p {
        constructor() {
            this._sounds = {},
            this._outputConfigurationChanged = new r.default,
            this._setOutputVolume = e=>{
                if (this._callbacks)
                    return l.CallingCapabilities.speakerVolumeControlSupported() ? this._callbacks.setOutputVolume(100 * e) : 1
            }
            ,
            this._getOutputVolume = ()=>this._callbacks && l.CallingCapabilities.speakerVolumeControlSupported() ? this._callbacks.getOutputVolume() / 100 : 1,
            this._getOutputDevice = e=>{
                if (this._callbacks)
                    return this._callbacks.getOutputDevice(e)
            }
        }
        setCallbacks(e) {
            this._callbacks && (this._volumeToken.unsubscribe(),
            this._deviceToken.unsubscribe(),
            this._volumeToken = void 0,
            this._deviceToken = void 0),
            this._callbacks = e,
            this._volumeToken = this._callbacks.onVolumeChanged.subscribe(()=>this._outputConfigurationChanged.fire("SoundPlayerCallbacks.Volume")),
            this._deviceToken = this._callbacks.onDeviceChanged.subscribe(()=>this._outputConfigurationChanged.fire("SoundPlayerCallbacks.Device"))
        }
        static _keyForSoundDescription(e) {
            return e.name + (e.secondary ? "_additional" : "")
        }
        _getOrCreateSound(e) {
            const t = p._keyForSoundDescription(e);
            let i = this._sounds[t];
            return i || (i = new h(e,this._setOutputVolume,this._getOutputDevice,this._getOutputVolume,this._outputConfigurationChanged),
            this._sounds[t] = i),
            i
        }
        get SkypeCallConnecting() {
            return this._getOrCreateSound({
                name: "Skype_Call_Connecting",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Ringtone,
                maybeLoud: !0
            })
        }
        get SkypeCallDialing() {
            return this._getOrCreateSound({
                name: "Skype_Call_Dialing",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Ringtone
            })
        }
        get SkypeCallEnded() {
            return this._getOrCreateSound({
                name: "Skype_Call_Ended",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Default
            })
        }
        get SkypeCallError() {
            return this._getOrCreateSound({
                name: "Skype_Error",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Ringtone
            })
        }
        get SkypeCallReconnected() {
            return this._getOrCreateSound({
                name: "Skype_Call_Reconnected",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Ringtone,
                maybeLoud: !0
            })
        }
        get SkypeCallRingback() {
            return this._getOrCreateSound({
                name: "Skype_Call_Ringback",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Ringtone
            })
        }
        get SkypeCallRinging() {
            return this._getOrCreateSound({
                name: "Skype_Call_Ringing",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Ringtone
            })
        }
        get SkypeCallRingingSecondary() {
            return this._getOrCreateSound({
                name: "Skype_Call_Ringing",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Ringtone,
                secondary: !0
            })
        }
        get SkypeCameraCapture() {
            return this._getOrCreateSound({
                name: "Skype_Camera_Capture",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Default,
                maybeLoud: !0
            })
        }
        get SkypeConfirmation() {
            return this._getOrCreateSound({
                name: "Skype_Confirmation",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Default
            })
        }
        get SkypeIncomingVideoAvailable() {
            return this._getOrCreateSound({
                name: "Skype_Incoming_Video_Available",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeDtmf0() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_0",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf1() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_1",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf2() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_2",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf3() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_3",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf4() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_4",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf5() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_5",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf6() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_6",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf7() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_7",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf8() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_8",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmf9() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_9",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmfPound() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_pound",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeDtmfStar() {
            return this._getOrCreateSound({
                name: "Skype_Dtmf_star",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System,
                maybeLoud: !0
            })
        }
        get SkypeError() {
            return this._getOrCreateSound({
                name: "Skype_Error",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Default
            })
        }
        get SkypeFileTransferComplete() {
            return this._getOrCreateSound({
                name: "Skype_File_Transfer_Complete",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeFileTransferFailed() {
            return this._getOrCreateSound({
                name: "Skype_File_Transfer_Failed",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeFileTransferIncoming() {
            return this._getOrCreateSound({
                name: "Skype_File_Transfer_Incoming",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeInAppNotification() {
            return this._getOrCreateSound({
                name: "Skype_In_App_Notification",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeLogin() {
            return this._getOrCreateSound({
                name: "Skype_Login",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Default
            })
        }
        get SkypeMessageSent() {
            return this._getOrCreateSound({
                name: "Skype_Message_Sent",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeMiscClickpop() {
            return this._getOrCreateSound({
                name: "Skype_Misc_Clickpop",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeMoneyReceived() {
            return this._getOrCreateSound({
                name: "Skype_Money_Received",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeMsgReceived() {
            return this._getOrCreateSound({
                name: "Skype_Msg_Received",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeNotification() {
            return this._getOrCreateSound({
                name: "Skype_Notification",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeShutter() {
            return this._getOrCreateSound({
                name: "Skype_Shutter",
                extension: "m4a",
                type: s.AudioPlayerSoundType.System
            })
        }
        get SkypeVideoMsgRecord() {
            return this._getOrCreateSound({
                name: "Skype_Video_Msg_Record",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Default
            })
        }
        get SkypeVideoMsgStop() {
            return this._getOrCreateSound({
                name: "Skype_Video_Msg_Stop",
                extension: "m4a",
                type: s.AudioPlayerSoundType.Default
            })
        }
    }
    t.default = new p
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = (i(6),
    i(43))
      , r = i(1082)
      , a = i(38)
      , l = i(5)
      , c = i(73)
      , d = i(8)
      , u = l.lazyProperties({
        wrapper: ()=>o.Styles.createViewStyle({
            flex: 1,
            overflow: "visible"
        }),
        targetOnly: ()=>o.Styles.createViewStyle({
            position: "absolute",
            height: 1,
            width: 1
        }),
        target: ()=>o.Styles.createViewStyle({
            height: 1,
            width: 1,
            position: "absolute",
            backgroundColor: d.Color.transparent
        })
    });
    class g extends s.default {
        constructor() {
            super(...arguments),
            this._contextMenuAnchorX = new o.Animated.Value(0),
            this._contextMenuAnchorY = new o.Animated.Value(0),
            this._contextMenuStyle = o.Styles.createAnimatedViewStyle({
                top: this._contextMenuAnchorY,
                left: this._contextMenuAnchorX
            }),
            this._getMenuTarget = ()=>this._menuTarget,
            this._onMenuTargetRef = e=>{
                this._menuTarget = e || void 0
            }
        }
        _buildState(e, t=!1) {
            return {
                position: r.default.getAnchorPosition()
            }
        }
        requestFocus() {}
        componentDidMount() {
            super.componentDidMount(),
            h.addMenuTargetCallback(this._getRootViewId(), this._getMenuTarget),
            this.state.position && (this._contextMenuAnchorX.setValue(this.state.position.x),
            this._contextMenuAnchorY.setValue(this.state.position.y))
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            t.position && !a.default(t.position, this.state.position) && (this._contextMenuAnchorX.setValue(t.position.x),
            this._contextMenuAnchorY.setValue(t.position.y))
        }
        render() {
            return o.createElement(o.Animated.View, {
                ref: this._onMenuTargetRef,
                style: [u.target, this._contextMenuStyle]
            })
        }
    }
    t.DesktopContextMenuTarget = g;
    class h extends s.default {
        constructor() {
            super(...arguments),
            this.showContextMenu = e=>{
                if (!this.isComponentMounted())
                    return;
                const t = this._getRootViewId();
                if (this.state.isShowingMenu)
                    h.dismissContextMenu(t);
                else if (this.props.getMenuItems) {
                    const e = !1;
                    h._showContextMenu(t, {
                        getMenuItems: this.props.getMenuItems,
                        onItemSelected: this.props.onItemSelected,
                        onDismiss: ()=>{
                            this.props.onDismiss && this.props.onDismiss(),
                            this.isComponentMounted() && this.setState({
                                isShowingMenu: !1
                            })
                        }
                    }) && !e && this.setState({
                        isShowingMenu: !0
                    })
                }
            }
            ,
            this._handleClick = e=>{
                e.stopPropagation && e.stopPropagation(),
                e.preventDefault && e.preventDefault(),
                this._handleOnContextMenu(e)
            }
            ,
            this._handleOnContextMenu = e=>{
                this.isComponentMounted() && (r.default.setAnchorPosition({
                    x: e.pageX || 0,
                    y: e.pageY || 0
                }),
                n.defer(()=>this.showContextMenu(e)))
            }
        }
        static dismissContextMenu(e) {
            c.default.dismiss("context-menu", e)
        }
        static addMenuTargetCallback(e, t) {
            this._menuTargetAnchors["menutarget_" + e] = t
        }
        static getMenuTargetCallback(e) {
            return this._menuTargetAnchors["menutarget_" + e] || (()=>{}
            )
        }
        _buildState(e, t=!1) {
            return t ? {
                isShowingMenu: !1
            } : {}
        }
        show(e) {
            this._handleClick(e)
        }
        showOnTap(e) {
            this._handleOnContextMenu(e)
        }
        render() {
            const e = this.props.isAnimated ? this.props.renderAsText ? o.Animated.Text : o.Animated.View : this.props.renderAsText ? o.Text : o.View
              , t = [this.props.targetOnly ? u.targetOnly : u.wrapper, this.props.wrapperStyle];
            return o.createElement(e, {
                style: t,
                onContextMenu: this.props.wrapperOnly ? void 0 : this._handleClick,
                onPress: this.props.wrapperOnly ? void 0 : this.props.onPress,
                onLongPress: this.props.wrapperOnly ? void 0 : this.props.onLongPress
            }, this.props.children)
        }
        static _showContextMenu(e, t) {
            if (t.getMenuItems) {
                const i = {
                    anchor: h.getMenuTargetCallback(e),
                    useTheme: !0,
                    popupDisableContextMenu: !0,
                    popupBeakSize: {
                        height: 0,
                        width: 0
                    },
                    positionPriorities: ["bottom", "right", "left", "top"]
                }
                  , n = r.default.getAnchorPosition();
                return c.default.showWithOptions({
                    id: "context-menu",
                    config: i,
                    getMenuItems: t.getMenuItems,
                    handleMenuCommand: e=>{
                        t.onItemSelected && t.onItemSelected(e)
                    }
                    ,
                    delay: 1,
                    onDismiss: ()=>{
                        t.onDismiss && t.onDismiss()
                    }
                    ,
                    rootViewId: e,
                    invokingEvent: n ? {
                        pageX: n.x,
                        pageY: n.y
                    } : void 0
                })
            }
            return !1
        }
    }
    t.default = h,
    h._menuTargetAnchors = {},
    h.showContextMenu = (e,t,i)=>{
        e.stopPropagation && e.stopPropagation(),
        e.preventDefault && e.preventDefault(),
        r.default.setAnchorPosition({
            x: e.pageX || 0,
            y: e.pageY || 0
        }),
        n.defer(()=>h._showContextMenu(t, i))
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(386)
      , s = i(385)
      , r = i(6)
      , a = i(2)
      , l = i(1560)
      , c = i(3)
      , d = i(4)
      , u = i(254);
    var g;
    !function(e) {
        e[e.Image = 1] = "Image",
        e[e.Video = 2] = "Video"
    }(g = t.FilePickerAcceptType || (t.FilePickerAcceptType = {}));
    t.FilePickerUtils = class {
        static showSingleFilePicker(e, t, i, n) {
            o.default.show(this._fillMissingOptions(n), t, i, t=>{
                c.warn(a.LogTraceArea.FilePicker, "Single file picker used to select more than one item."),
                t.forEach(t=>e(t))
            }
            )
        }
        static showOpenDialog(e, t) {
            o.default.showOpenDialog(e, t)
        }
        static getFileDownloadPath() {
            return o.default.getFileDownloadPath()
        }
        static getFileUri(e, t) {
            return r.default.getS4LMessagingFeaturesNoSubscription().enableCustomFileDownloadLocation && t ? s.join(t, e) : e
        }
        static showMultiFilesPicker(e, t, i, s, r, a) {
            let d = this._getFileLimit(a);
            const g = (u.FilePickerOrigin.FilePickerItem,
            d);
            o.default.show(this._fillMissingOptions(i, !0), s, r, i=>{
                let o = i.length > g;
                o ? l.show(s) : i.forEach(t=>e(t)),
                c.track(new u.FilesSentViaPicker(t,g,o,n.map(i, e=>e.extension)))
            }
            )
        }
        static isDocumentPickerSupported() {
            return o.default.isDocumentPickerSupported()
        }
        static cleanUp(e) {
            o.default.cleanUp(e)
        }
        static showDocumentPicker(e, t, i, n) {
            o.default.isDocumentPickerSupported() && o.default.showDocumentPicker(i=>this._callbackWrapper(i, u.FilePickerOrigin.FilePickerItem, e, t, n), i)
        }
        static _callbackWrapper(e, t, i, o, s) {
            const r = this._getFileLimit(s);
            let a = e.length > r;
            a ? l.show(o) : e.forEach(e=>i(e)),
            c.track(new u.FilesSentViaPicker(t,r,a,n.map(e, e=>e.extension)))
        }
        static _fillMissingOptions(e, t) {
            return {
                title: d.getString("FilePicker.SelectImageTitle"),
                cancelButtonTitle: d.getString("Global.CancelLabel"),
                chooseFromLibraryButtonTitle: d.getString("FilePicker.LibraryOptionTitle"),
                takePhotoButtonTitle: d.getString("FilePicker.CameraOptionTitle"),
                maxWidth: e && e.maxSize || 4096,
                maxHeight: e && e.maxSize || 4096,
                quality: e && e.quality || .7,
                allowsEditing: e && e.allowEditing || !1,
                acceptImage: e && e.acceptType === g.Image,
                acceptVideo: e && e.acceptType === g.Video,
                allowMultipleSelection: t || !1,
                allowsFileChoosing: e && e.allowsFileChoosing || !1
            }
        }
        static _getFileLimit(e) {
            const t = r.default.getS4LMessagingFeaturesNoSubscription().limitForFilePicker;
            return e ? t - e || 0 : t
        }
    }
}
, , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(10)
      , s = i(77)
      , r = i(27)
      , a = i(5)
      , l = (i(4),
    i(123))
      , c = i(66)
      , d = i(11)
      , u = i(14)
      , g = i(15)
      , h = i(12)
      , p = a.lazyProperties({
        buttonStyle: ()=>n.Styles.createButtonStyle({
            flexDirection: "row",
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "flex-start",
            minHeight: o.ListItem.small.regularHeight
        }),
        iconStyleMargin: ()=>n.Styles.createTextStyle({
            marginRight: 10
        }),
        spinnerStyle: ()=>n.Styles.createViewStyle({
            marginLeft: 2,
            marginRight: 12
        })
    });
    class m extends h.default {
        constructor() {
            super(...arguments),
            this._onComponentRef = e=>{
                this._componentRef = e || void 0
            }
            ,
            this._onHoverStart = e=>{
                this.setState({
                    isHovering: !0
                })
            }
            ,
            this._onHoverEnd = e=>{
                this.setState({
                    isHovering: !1
                })
            }
        }
        _buildState(e, t) {
            return t ? {
                isHovering: !1
            } : {}
        }
        requestFocus() {
            this._componentRef && this._componentRef.requestFocus()
        }
        render() {
            const e = this.state.isHovering && !this.props.disabled && !this.props.disableHover
              , t = this.props.style ? [p.buttonStyle, this.props.style] : p.buttonStyle
              , i = [u.flexOne];
            e && i.push(this._themeStyles.textHoverColorStyle);
            const a = this.props.subtitle ? n.createElement(g.Subtitle, {
                colorThemeOverride: this._currentTheme
            }, this.props.subtitle) : void 0
              , h = this.props.hideDivider ? void 0 : n.createElement(s, null);
            let m;
            m = this.props.showSpinner ? n.createElement(c.default, {
                size: o.SXActivityIndicatorSize.ExtraSmall,
                tintColor: this._themeColors.primaryTextColor,
                style: p.spinnerStyle
            }) : n.createElement(r.default, {
                icon: this.props.icon,
                color: e ? this._themeColors.iconHoverColor : this._themeColors.primaryIconColor,
                size: this.props.iconSize ? this.props.iconSize : d.IconSize.size24,
                style: [p.iconStyleMargin, this.props.iconStyle]
            });
            let S = this.props.accessibilityLabel || this.props.title;
            this.props.disabled;
            const C = this.props.useRegularFont ? g.BodyText : g.RowTitle
              , y = this.props.renderAsListItem ? l.default.Button : n.Button;
            return n.createElement(n.View, {
                ref: this._onComponentRef,
                style: u.noncollapsibleView
            }, n.createElement(y, {
                ref: this.props.buttonRef,
                style: t,
                onPress: this.props.onPress,
                onLongPress: this.props.onLongPress,
                onPressIn: this.props.onPressIn,
                onPressOut: this.props.onPressOut,
                title: this.props.title,
                onHoverStart: this._onHoverStart,
                onHoverEnd: this._onHoverEnd,
                accessibilityLabel: S,
                accessibilityTraits: this.props.accessibilityTraits,
                tabIndex: this.props.tabIndex,
                disabled: this.props.disabled
            }, m, n.createElement(C, {
                style: i,
                numberOfLines: 2,
                colorThemeOverride: this._currentTheme
            }, this.props.title), a), h)
        }
    }
    e.exports = m
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = (i(0),
    i(351))
      , s = i(65)
      , r = i(6)
      , a = i(153)
      , l = i(16)
      , c = i(229)
      , d = i(333)
      , u = i(30)
      , g = i(3)
      , h = i(4)
      , p = i(32)
      , m = i(62)
      , S = i(17)
      , C = i(55)
      , y = i(22)
      , f = i(1667)
      , _ = i(261)
      , b = i(1177)
      , v = i(73)
      , T = (i(29),
    "archived")
      , P = "time"
      , A = "unread"
      , k = "active"
      , I = "compactToggle"
      , w = "markAllRead"
      , N = "markAllNotificationsRead"
      , M = "showCategoriesToggle";
    class E {
        static showOptionsMenu(e, t, i, n) {
            const o = E._getMenuItems(e);
            this._intShowMenu(o, e, t, i, n)
        }
        static showDesktopTabOptionsMenu(e, t, i, n) {
            const o = E._getTabMenuItems(e);
            this._intShowMenu(o, e, t, i, n)
        }
        static showAllConversations() {
            d.default.setConversationsListMode(d.ConversationsListMode.AllConversations),
            this._sendEvent(f.RecentConversationsFilterAction.ShowAllConversations)
        }
        static showArchivedConversations() {
            y.default.isUsingStackNavigationContextNoSubscription() ? S.navigateToMobileArchivedConversationsPanel() : d.default.setConversationsListMode(d.ConversationsListMode.ArchivedConversations),
            this._sendEvent(f.RecentConversationsFilterAction.ShowArchivedConversations)
        }
        static sortByTime() {
            p.default.setUserPreferencesLocal({
                recentsSortedBy: _.RecentsSortBy.Time
            }),
            this._sendEvent(f.RecentConversationsFilterAction.SortByTime)
        }
        static sortByUnread() {
            p.default.setUserPreferencesLocal({
                recentsSortedBy: _.RecentsSortBy.Unread
            }),
            this._sendEvent(f.RecentConversationsFilterAction.SortByUnread)
        }
        static sortByActive() {
            p.default.setUserPreferencesLocal({
                recentsSortedBy: _.RecentsSortBy.Active
            }),
            this._sendEvent(f.RecentConversationsFilterAction.SortByActive)
        }
        static setRowSizeToDefault() {
            const e = {
                recentsRowSize: _.RowSize.Default
            };
            r.default.getS4LNativePlatformsEcsConfig().enableRemoteClientAppearancePreferences && m.default.setUserAppearancePreferencesForCurrentPlatform(e),
            p.default.setUserPreferencesLocal(e),
            this._sendEvent(f.RecentConversationsFilterAction.RowSizeDefault)
        }
        static setRowSizeToCompact(e) {
            const t = this.extraCompactLayoutEnabled() && !e ? _.RowSize.ExtraCompact : _.RowSize.Compact;
            r.default.getS4LNativePlatformsEcsConfig().enableRemoteClientAppearancePreferences && m.default.setUserAppearancePreferencesForCurrentPlatform({
                recentsRowSize: t
            }),
            p.default.setUserPreferencesLocal({
                recentsRowSize: t
            }),
            this._sendEvent(f.RecentConversationsFilterAction.RowSizeCompact)
        }
        static recentRowSizeAndChanges() {
            let e = this._getRecentsRowSize();
            const t = this.extraCompactLayoutEnabled();
            return e !== _.RowSize.ExtraCompact || t ? e === _.RowSize.Compact && t && !this.regularCompactLayoutEnabled() && (e = _.RowSize.ExtraCompact) : e = _.RowSize.Compact,
            e || _.RowSize.Default
        }
        static nonRecentRowSizeAndChanges() {
            let e = this.recentRowSizeAndChanges();
            return (e !== _.RowSize.Compact || this.regularCompactLayoutEnabled()) && (e !== _.RowSize.ExtraCompact || this.extraCompactLayoutEnabled()) || (e = void 0),
            e
        }
        static useExtraCompactLayoutAndChanges() {
            return this.recentRowSizeAndChanges() === _.RowSize.ExtraCompact
        }
        static useAnyCompactLayoutAndChanges() {
            return this.recentRowSizeAndChanges() === _.RowSize.Compact || this.recentRowSizeAndChanges() === _.RowSize.ExtraCompact
        }
        static extraCompactLayoutEnabled() {
            return r.default.getS4LUiFeatures().enableExtraCompactLayout
        }
        static lastMessageAuthorAvatarEnabled() {
            return r.default.getS4LMessagingFeatures().enableLastMessageAuthorAvatarOverGroupIcon
        }
        static regularCompactLayoutEnabled() {
            return r.default.getS4LUiFeatures().enableRegularCompactLayout
        }
        static recentConversationsReorderingEnabled() {
            return r.default.getS4LMessagingFeatures().enableRecentConversationSorting
        }
        static showCategories() {
            this.recentConversationsReorderingEnabled() && u.default.sortRecentConversationsListByFavorites(),
            p.default.setUserPreferencesLocal({
                recentsShowCategories: !0
            }),
            this._sendEvent(f.RecentConversationsFilterAction.ShowCategories)
        }
        static hideCategories() {
            this.recentConversationsReorderingEnabled() && u.default.sortRecentConversationsListByTimestamp(),
            p.default.setUserPreferencesLocal({
                recentsShowCategories: !1
            }),
            this._sendEvent(f.RecentConversationsFilterAction.HideCategories)
        }
        static markAllConversationsRead() {
            E._markAllRead(!1),
            this._sendEvent(f.RecentConversationsFilterAction.MarkAllConversationsRead)
        }
        static _getRecentsRowSize() {
            const e = r.default.getS4LNativePlatformsEcsConfig().enableRemoteClientAppearancePreferences
              , t = p.default.getUserPreferencesLocal()
              , i = e ? m.default.getUserAppearancePreferencesForCurrentPlatform() : {};
            return i && i.recentsRowSize ? i.recentsRowSize : t.recentsRowSize
        }
        static _getRecentsRowSizeNoSubscription() {
            const e = r.default.getS4LNativePlatformsEcsConfigNoSubscription().enableRemoteClientAppearancePreferences
              , t = p.default.getUserPreferencesLocalNoSubscription()
              , i = e ? m.default.getUserAppearancePreferencesForCurrentPlatformNoSubscription() : {};
            return i && i.recentsRowSize ? i.recentsRowSize : t.recentsRowSize
        }
        static _intShowMenu(e, t, i, o, s) {
            if (e.length > 0) {
                const r = {
                    anchor: i || (()=>{}
                    ),
                    buttons: e,
                    title: n.isUndefined(t) ? h.getString("MobileRecentsFilter.ManageChats") : void 0
                };
                v.default.showWithActionMenuConfig({
                    options: r,
                    callback: e=>this._onHandleMenuCommand(e, o, i),
                    maintainAnchor: !0,
                    rootViewId: o,
                    invokingEvent: s
                })
            }
        }
        static _sendEvent(e) {
            g.track(new f.RecentConversationsFilterEvent(e))
        }
        static _markAllRead(e) {
            const t = n.keys(c.default.getConversationsWithUnreadCounts());
            n.each(t, t=>{
                const i = t;
                l.isHighlightsThread(i) === e && a.markConversationRead(i)
            }
            )
        }
        static _getMenuItems(e) {
            const t = []
              , i = n.isUndefined(e);
            if (u.default.getArchivedConversations().length > 0 && t.push({
                text: h.getString("MobileRecentsFilter.HiddenChats"),
                command: T
            }),
            i && (t.push({
                text: h.getString("MobileRecentsFilter.Recent"),
                command: P
            }),
            t.push({
                text: h.getString("MobileRecentsFilter.Unread"),
                command: A
            }),
            t.push({
                text: h.getString("MobileRecentsFilter.Active"),
                command: k
            })),
            i || e === C.HubTab.Recents) {
                const e = n.keys(c.default.getConversationsWithUnreadCounts());
                n.filter(e, e=>!l.isHighlightsThread(e)).length > 0 && t.push({
                    text: h.getString("MobileRecentsFilter.MarkRead"),
                    command: w
                });
                const i = E.shouldShowCategories() ? "DesktopRecentsFilter.HideFavorites" : "DesktopRecentsFilter.ShowFavorites";
                t.push({
                    text: h.getString(i),
                    command: M
                })
            }
            if (e === C.HubTab.Notifications && o.default.hasUnreadAlerts(!0) && t.push({
                text: h.getString("MobileRecentsFilter.MarkRead"),
                command: N
            }),
            i) {
                let e;
                const i = this._getRecentsRowSizeNoSubscription();
                e = i === _.RowSize.Compact || i === _.RowSize.ExtraCompact ? h.getString("MobileRecentsFilter.DisableCompactLayout") : h.getString("MobileRecentsFilter.EnableCompactLayout"),
                t.push({
                    text: e,
                    command: I
                })
            }
            return t
        }
        static _getTabMenuItems(e) {
            const t = [];
            if (e === C.HubTab.Recents) {
                const e = n.keys(c.default.getConversationsWithUnreadCounts());
                n.filter(e, e=>!l.isHighlightsThread(e)).length > 0 && t.push({
                    text: h.getString("MobileRecentsFilter.MarkRead"),
                    command: w
                })
            }
            return e === C.HubTab.Notifications && o.default.hasUnreadAlerts(!0) && t.push({
                text: h.getString("MobileRecentsFilter.MarkRead"),
                command: N
            }),
            t
        }
        static _getMenuItemAnnouncement(e) {
            switch (e) {
            case T:
                return h.getString("MobileRecentsFilter.HiddenChats");
            case P:
                return h.getString("MobileRecentsFilter.Recent");
            case A:
                return h.getString("MobileRecentsFilter.Unread");
            case k:
                return h.getString("MobileRecentsFilter.Active");
            case I:
                return h.getString("MobileRecentsFilter.CompactToggle");
            case w:
            case N:
                return h.getString("MobileRecentsFilter.MarkRead");
            case M:
                return E.shouldShowCategories() ? "DesktopRecentsFilter.HideFavorites" : "DesktopRecentsFilter.ShowFavorites"
            }
        }
        static showMarkAllReadConfirmationDialog(e) {
            const t = [{
                text: h.getString("Global.CancelLabel"),
                isCancel: !0
            }, {
                text: h.getString("MarkConversationsReadConfirmationDialog.MarkReadButtonTitle"),
                isSubmit: !0,
                onPress: ()=>E.markAllConversationsRead()
            }]
              , i = h.getString("MarkConversationsReadConfirmationDialog.DialogTitle")
              , n = h.getString("MarkConversationsReadConfirmationDialog.MarkReadDialogContent");
            s.default.showWithOptions({
                title: i,
                dialogAccessibilityTitle: n,
                message: n,
                buttons: t,
                rootViewId: e
            })
        }
        static test_getRecentsRowSize() {
            return this._getRecentsRowSize()
        }
        static test_getRecentsRowSizeNoSubscription() {
            return this._getRecentsRowSizeNoSubscription()
        }
    }
    t.default = E,
    E.shouldShowCategories = ()=>{
        const e = p.default.getUserPreferencesLocal().recentsShowCategories;
        return void 0 === e || e
    }
    ,
    E._onHandleMenuCommand = (e,t,i)=>{
        switch (e) {
        case T:
            E.showArchivedConversations();
            break;
        case P:
            E.sortByTime();
            break;
        case A:
            E.sortByUnread();
            break;
        case k:
            E.sortByActive();
            break;
        case I:
            const e = new b.RemoteUserAppearanceTelemetryEvent;
            e.setDidUpdateRecentsRowSize(),
            g.track(e);
            const i = E._getRecentsRowSizeNoSubscription();
            i === _.RowSize.Compact || i === _.RowSize.ExtraCompact ? E.setRowSizeToDefault() : E.setRowSizeToCompact();
            break;
        case w:
            E.showMarkAllReadConfirmationDialog(t);
            break;
        case N:
            o.default.markAllAsRead();
            break;
        case M:
            E.shouldShowCategories() ? E.hideCategories() : E.showCategories();
            break;
        case v.SXActionMenuCancel:
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1330)
      , s = i(175)
      , r = i(4);
    let a = "en-us"
      , l = i(771)
      , c = new o("en-us")
      , d = {};
    const u = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
      , g = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function h(e, t) {
        return d[t] || (d[t] = c.compile(t)),
        d[t]({
            d: e.getDate(),
            dd: n.padStart(e.getDate().toString(), 2, "0"),
            ddd: r.getStringUnsafe("DayAbbreviatedName." + u[e.getDay()]),
            dddd: r.getStringUnsafe("DayLongName." + u[e.getDay()]),
            h: p(e),
            hh: n.padStart(p(e).toString(), 2, "0"),
            H: e.getHours(),
            HH: n.padStart(e.getHours().toString(), 2, "0"),
            m: e.getMinutes(),
            mm: n.padStart(e.getMinutes().toString(), 2, "0"),
            M: e.getMonth() + 1,
            MM: n.padStart((e.getMonth() + 1).toString(), 2, "0"),
            MMM: r.getStringUnsafe("MonthAbbreviatedName." + g[e.getMonth()]),
            MMMM: r.getStringUnsafe("MonthLongName." + g[e.getMonth()]),
            s: e.getSeconds(),
            ss: n.padStart(e.getSeconds().toString(), 2, "0"),
            tt: e.getHours() / 12 >= 1 ? l.Time.PMFormat : l.Time.AMFormat,
            yy: n.padStart(e.getFullYear().toString(), 4, "0").substr(2),
            yyyy: n.padStart(e.getFullYear().toString(), 4, "0")
        })
    }
    function p(e) {
        const t = e.getHours() % 12;
        return 0 === t ? 12 : t
    }
    t.setLocale = function(e) {
        let t = s.normalizeLocale(e);
        if (t === a)
            return;
        let n = function(e) {
            let t = void 0;
            switch (e) {
            case "ar-ae":
                t = i(2252);
                break;
            case "ar-eg":
                t = i(2253);
                break;
            case "ar-iq":
                t = i(2254);
                break;
            case "ar-kw":
                t = i(2255);
                break;
            case "ar-sa":
                t = i(973);
                break;
            case "ar-us":
                t = i(2256);
                break;
            case "az-az":
                t = i(2257);
                break;
            case "bg-bg":
                t = i(974);
                break;
            case "ca-es":
                t = i(1409);
                break;
            case "cs-cz":
                t = i(975);
                break;
            case "da-dk":
                t = i(976);
                break;
            case "de-at":
                t = i(2258);
                break;
            case "de-ch":
                t = i(2259);
                break;
            case "de-de":
                t = i(977);
                break;
            case "el-gr":
                t = i(978);
                break;
            case "en-ae":
                t = i(2260);
                break;
            case "en-af":
                t = i(2261);
                break;
            case "en-al":
                t = i(2262);
                break;
            case "en-at":
                t = i(2263);
                break;
            case "en-au":
                t = i(2264);
                break;
            case "en-bd":
                t = i(2265);
                break;
            case "en-be":
                t = i(2266);
                break;
            case "en-bg":
                t = i(2267);
                break;
            case "en-bh":
                t = i(2268);
                break;
            case "en-br":
                t = i(2269);
                break;
            case "en-ca":
                t = i(2270);
                break;
            case "en-ch":
                t = i(2271);
                break;
            case "en-cn":
                t = i(2272);
                break;
            case "en-co":
                t = i(2273);
                break;
            case "en-de":
                t = i(2274);
                break;
            case "en-dk":
                t = i(2275);
                break;
            case "en-ee":
                t = i(2276);
                break;
            case "en-eg":
                t = i(2277);
                break;
            case "en-es":
                t = i(2278);
                break;
            case "en-fi":
                t = i(2279);
                break;
            case "en-fr":
                t = i(2280);
                break;
            case "en-gb":
                t = i(2281);
                break;
            case "en-ge":
                t = i(2282);
                break;
            case "en-gr":
                t = i(2283);
                break;
            case "en-hk":
                t = i(2284);
                break;
            case "en-id":
                t = i(2285);
                break;
            case "en-ie":
                t = i(2286);
                break;
            case "en-il":
                t = i(2287);
                break;
            case "en-in":
                t = i(2288);
                break;
            case "en-iq":
                t = i(2289);
                break;
            case "en-it":
                t = i(2290);
                break;
            case "en-jo":
                t = i(2291);
                break;
            case "en-jp":
                t = i(2292);
                break;
            case "en-kh":
                t = i(2293);
                break;
            case "en-kr":
                t = i(2294);
                break;
            case "en-kw":
                t = i(2295);
                break;
            case "en-lb":
                t = i(2296);
                break;
            case "en-lk":
                t = i(2297);
                break;
            case "en-lt":
                t = i(2298);
                break;
            case "en-lv":
                t = i(2299);
                break;
            case "en-mx":
                t = i(2300);
                break;
            case "en-my":
                t = i(2301);
                break;
            case "en-ng":
                t = i(2302);
                break;
            case "en-nl":
                t = i(2303);
                break;
            case "en-no":
                t = i(2304);
                break;
            case "en-nz":
                t = i(2305);
                break;
            case "en-ph":
                t = i(2306);
                break;
            case "en-pk":
                t = i(2307);
                break;
            case "en-pl":
                t = i(2308);
                break;
            case "en-pt":
                t = i(2309);
                break;
            case "en-qa":
                t = i(2310);
                break;
            case "en-ro":
                t = i(2311);
                break;
            case "en-rs":
                t = i(2312);
                break;
            case "en-ru":
                t = i(2313);
                break;
            case "en-sa":
                t = i(2314);
                break;
            case "en-se":
                t = i(2315);
                break;
            case "en-sg":
                t = i(2316);
                break;
            case "en-si":
                t = i(2317);
                break;
            case "en-th":
                t = i(2318);
                break;
            case "en-u":
                t = i(2319);
                break;
            case "en-vn":
                t = i(2320);
                break;
            case "en-za":
                t = i(2321);
                break;
            case "es-ar":
                t = i(2322);
                break;
            case "es-cl":
                t = i(2323);
                break;
            case "es-co":
                t = i(2324);
                break;
            case "es-cr":
                t = i(2325);
                break;
            case "es-ec":
                t = i(2326);
                break;
            case "es-es":
                t = i(979);
                break;
            case "es-gt":
                t = i(2327);
                break;
            case "es-mx":
                t = i(2328);
                break;
            case "es-pe":
                t = i(2329);
                break;
            case "es-us":
                t = i(2330);
                break;
            case "es-uy":
                t = i(2331);
                break;
            case "es-ve":
                t = i(2332);
                break;
            case "et-ee":
                t = i(980);
                break;
            case "fa-ir":
                t = i(2333);
                break;
            case "fi-fi":
                t = i(981);
                break;
            case "fr-be":
                t = i(2334);
                break;
            case "fr-ca":
                t = i(2335);
                break;
            case "fr-ch":
                t = i(2336);
                break;
            case "fr-dz":
                t = i(2337);
                break;
            case "fr-fr":
                t = i(982);
                break;
            case "fr-us":
                t = i(2338);
                break;
            case "he-il":
                t = i(983);
                break;
            case "hi-in":
                t = i(984);
                break;
            case "hr-hr":
                t = i(985);
                break;
            case "hu-hu":
                t = i(986);
                break;
            case "id-id":
                t = i(987);
                break;
            case "it-ch":
                t = i(2339);
                break;
            case "it-it":
                t = i(988);
                break;
            case "ja-jp":
                t = i(989);
                break;
            case "ja-us":
                t = i(2340);
                break;
            case "ka-ge":
                t = i(2341);
                break;
            case "ko-kr":
                t = i(990);
                break;
            case "lt-lt":
                t = i(991);
                break;
            case "lv-lv":
                t = i(992);
                break;
            case "mk-mk":
                t = i(2342);
                break;
            case "ms-my":
                t = i(993);
                break;
            case "nb-no":
                t = i(994);
                break;
            case "nl-be":
                t = i(2343);
                break;
            case "nl-nl":
                t = i(995);
                break;
            case "pl-gb":
                t = i(2344);
                break;
            case "pl-pl":
                t = i(996);
                break;
            case "pt-br":
                t = i(997);
                break;
            case "pt-pt":
                t = i(2345);
                break;
            case "ro-md":
                t = i(2346);
                break;
            case "ro-ro":
                t = i(998);
                break;
            case "ru-am":
                t = i(2347);
                break;
            case "ru-az":
                t = i(2348);
                break;
            case "ru-by":
                t = i(2349);
                break;
            case "ru-gb":
                t = i(2350);
                break;
            case "ru-ge":
                t = i(2351);
                break;
            case "ru-il":
                t = i(2352);
                break;
            case "ru-kz":
                t = i(2353);
                break;
            case "ru-lv":
                t = i(2354);
                break;
            case "ru-md":
                t = i(2355);
                break;
            case "ru-ru":
                t = i(999);
                break;
            case "ru-ua":
                t = i(2356);
                break;
            case "ru-us":
                t = i(2357);
                break;
            case "sk-sk":
                t = i(1e3);
                break;
            case "sl-si":
                t = i(1001);
                break;
            case "sr-latn-rs":
                t = i(1002);
                break;
            case "sv-se":
                t = i(1003);
                break;
            case "th-th":
                t = i(1004);
                break;
            case "tr-az":
                t = i(2358);
                break;
            case "tr-tr":
                t = i(1005);
                break;
            case "uk-ua":
                t = i(1006);
                break;
            case "uk-us":
                t = i(2359);
                break;
            case "vi-jp":
                t = i(2360);
                break;
            case "vi-us":
                t = i(2361);
                break;
            case "vi-vn":
                t = i(1007);
                break;
            case "zh-cn":
                t = i(1008);
                break;
            case "zh-hk":
                t = i(2362);
                break;
            case "zh-tw":
                t = i(1408)
            }
            return t
        }(t);
        n || ("zh-hant" === t.substr(0, 7) ? n = i(1408) : (n = function(e) {
            switch (e) {
            case "sa":
                return i(973);
            case "de":
                return i(977);
            case "us":
                return i(771);
            case "es":
                return i(979);
            case "ee":
                return i(980);
            case "fr":
                return i(982);
            case "il":
                return i(983);
            case "in":
                return i(984);
            case "it":
                return i(988);
            case "jp":
                return i(989);
            case "nl":
                return i(995);
            case "br":
                return i(997);
            case "tr":
                return i(1005);
            case "ru":
                return i(999);
            case "cn":
                return i(1008);
            case "bg":
                return i(974);
            case "hr":
                return i(985);
            case "cz":
                return i(975);
            case "dk":
                return i(976);
            case "fi":
                return i(981);
            case "gr":
                return i(978);
            case "hu":
                return i(986);
            case "id":
                return i(987);
            case "kr":
                return i(990);
            case "lv":
                return i(992);
            case "lt":
                return i(991);
            case "my":
                return i(993);
            case "no":
                return i(994);
            case "pl":
                return i(996);
            case "ro":
                return i(998);
            case "rs":
                return i(1002);
            case "sk":
                return i(1e3);
            case "si":
                return i(1001);
            case "se":
                return i(1003);
            case "th":
                return i(1004);
            case "ua":
                return i(1006);
            case "vn":
                return i(1007)
            }
            return
        }(t.substr(3, 2)),
        n || (n = function(e) {
            let t = void 0;
            switch (e) {
            case "ar":
                t = i(973);
                break;
            case "de":
                t = i(977);
                break;
            case "en":
                t = i(771);
                break;
            case "es":
            case "gl":
            case "eu":
                t = i(979);
                break;
            case "et":
                t = i(980);
                break;
            case "fr":
                t = i(982);
                break;
            case "he":
            case "iw":
                t = i(983);
                break;
            case "hi":
                t = i(984);
                break;
            case "it":
                t = i(988);
                break;
            case "ja":
                t = i(989);
                break;
            case "nl":
                t = i(995);
                break;
            case "pt":
                t = i(997);
                break;
            case "tr":
                t = i(1005);
                break;
            case "ru":
                t = i(999);
                break;
            case "zh":
                t = i(1008);
                break;
            case "bg":
                t = i(974);
                break;
            case "ca":
                t = i(1409);
                break;
            case "hr":
                t = i(985);
                break;
            case "cs":
                t = i(975);
                break;
            case "da":
                t = i(976);
                break;
            case "fi":
                t = i(981);
                break;
            case "el":
                t = i(978);
                break;
            case "hu":
                t = i(986);
                break;
            case "id":
                t = i(987);
                break;
            case "ko":
                t = i(990);
                break;
            case "lv":
                t = i(992);
                break;
            case "lt":
                t = i(991);
                break;
            case "ms":
                t = i(993);
                break;
            case "nb":
                t = i(994);
                break;
            case "pl":
                t = i(996);
                break;
            case "ro":
                t = i(998);
                break;
            case "sr":
                t = i(1002);
                break;
            case "sk":
                t = i(1e3);
                break;
            case "sl":
                t = i(1001);
                break;
            case "sv":
                t = i(1003);
                break;
            case "th":
                t = i(1004);
                break;
            case "uk":
                t = i(1006);
                break;
            case "vi":
                t = i(1007)
            }
            return t
        }(t.substr(0, 2))))),
        n ? l = n : (t = "en-us",
        l = i(771)),
        d = {},
        c = new o(t),
        a = t
    }
    ,
    t.getDateLong = function(e) {
        return h(e, l.Date.LongDateFormat)
    }
    ,
    t.getDateShort = function(e) {
        return h(e, l.Date.ShortDateFormat)
    }
    ,
    t.getTimeLong = function(e) {
        return h(e, l.Time.LongTimeFormat)
    }
    ,
    t.getTimeShort = function(e) {
        return h(e, l.Time.ShortTimeFormat)
    }
    ,
    t.getDayName = function(e) {
        return h(e, "{dddd}")
    }
    ,
    t.getDayAbbreviatedName = function(e) {
        return h(e, "{ddd}")
    }
    ,
    t.getDayAndMonth = function(e) {
        return h(e, l.Date.DayAndMonthFormat)
    }
    ,
    t.getMonthAndYear = function(e) {
        return h(e, "{MMMM} {yyyy}")
    }
    ,
    t.getMonthAndDateAbbreviatedName = function(e) {
        return h(e, "{MMM} {d}")
    }
    ,
    t.getYear = function(e) {
        return h(e, "{yyyy}")
    }
    ,
    t.getDayAndMonthLong = function(e) {
        return h(e, "{MMMM} {d}")
    }
    ,
    t.toStringWithFormattedDecimalSeparator = function(e, t, i) {
        let n = e.toString();
        if (i && (n = e.toFixed(i)),
        t) {
            let e = n.split(".");
            e[1] = function(e, t) {
                let i = e;
                for (let n = e.length; n < t; n += 1)
                    i += "0";
                return i
            }(e[1] || "", t),
            n = e.join(".")
        }
        return n.replace(".", l.Number.DecimalSeparator)
    }
    ,
    t.getISO8601Date = function(e) {
        return h(e, "{yyyy}{MM}{dd}")
    }
    ,
    t.getISO8601Time = function(e) {
        return h(e, "{HH}{mm}{ss}")
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(1415)
      , r = i(72)
      , a = i(7)
      , l = i(6)
      , c = i(2)
      , d = i(428)
      , u = i(643)
      , g = i(3)
      , h = i(74)
      , p = i(649)
      , m = i(21)
      , S = i(19)
      , C = i(1013)
      , y = i(777)
      , f = i(9);
    var _;
    !function(e) {
        e.supportsUrlRequest = function(e) {
            return !1
        }
    }(_ || (_ = {})),
    t.Test_CheckUrlRequest = _,
    t.default = new class {
        constructor() {
            this._deferredTransferQueue = [],
            m.RegisterStartupable(this, "BackgroundTransferService", [h.default, d.default, p.default, C.default])
        }
        startup() {
            return this._transfers = {},
            this._webRequests = {},
            this._subscribers = {},
            this._progressSubscribers = {},
            this._cachedProgressForTransfer = {},
            this._transferResponseQueueSubscription && (this._transferResponseQueueSubscription.unsubscribe(),
            this._transferResponseQueueSubscription = void 0),
            p.default.subscribe(y.BackgroundTransferActionType, (e,t)=>{
                const i = f.newCauseId();
                g.log(c.LogTraceArea.BackgroundTransferService, "start transfer(s), restored from db: " + t + ", causeId: " + i),
                o.each(e, e=>{
                    g.log(c.LogTraceArea.BackgroundTransferService, "Tracking Transfer: " + e.id + ": " + e.action + " " + n.pii.Omit(e.url)),
                    e.androidDownloadToPublicFolderWithName && (e.downloadToPublicFolderWithName = e.androidDownloadToPublicFolderWithName),
                    e.downloadToPublicFolderWithName && (e.downloadToPublicFolder = !0,
                    e.filename = e.downloadToPublicFolderWithName),
                    this._shouldCancelRequestOnRestart(e) ? this._cancelTransfer(e, i) : (this._transferNeedsRestartAcrossSessions(e) && (e.started = !1,
                    p.default.updateAction(e)),
                    this._transfers[e.id] = e,
                    this._reportProgress(e.id, 0, e.finished, e.finishSuccess),
                    this._checkForNeededWork(e.id))
                }
                ),
                t && (this._transferResponseQueueSubscription || (this._transferResponseQueueSubscription = C.default.event_response.subscribe(()=>{
                    this._handleResponses()
                }
                )),
                this._handleResponses())
            }
            ),
            C.default.event_progress.subscribe((e,t)=>{
                this._reportProgress(e, t, !1, !1)
            }
            ),
            a.Resolved()
        }
        test_reset() {
            this._subscribers = {}
        }
        test_getDeferredTransferCount() {
            return this._deferredTransferQueue.length
        }
        _handleResponses() {
            const e = C.default.drainResponseQueue();
            o.each(e, e=>{
                const {id: t, success: i, response: n} = e
                  , o = this._getResponseBody(n.body, n.headers["content-type"])
                  , s = e.success ? void 0 : e.response.error;
                this._finishedTransfer(t, i, n.statusCode, void 0, n.headers, o, s)
            }
            )
        }
        _getResponseBody(e, t) {
            return !t || "json" !== t && -1 === t.indexOf("application/json") ? e : S.parseJsonWithDefault(e, {})
        }
        _shouldCancelRequestOnRestart(e) {
            return e.started && !1
        }
        _transferNeedsRestartAcrossSessions(e) {
            return !(!e.started || e.finished) && (!this._supportsTransfersAcrossSessions(e) || !C.default.wasTransferIdKnownDuringStartup(e.id))
        }
        _supportsTransfersAcrossSessions(e) {
            return _.supportsUrlRequest(e)
        }
        subscribe(e, t) {
            this._subscribers[e] = t,
            this._seeIfAnythingNeedsDoing()
        }
        startTransfer(e) {
            let t = e;
            return t.started = !1,
            t.finished = !1,
            p.default.persistAndStartAction(y.BackgroundTransferActionType, t).id
        }
        _endTransfer(e) {
            delete this._transfers[e],
            delete this._cachedProgressForTransfer[e],
            p.default.removeAction(e);
            const t = this._deferredTransferQueue.shift();
            t && t.resolve(void 0)
        }
        cancelTransfer(e, t) {
            g.log(c.LogTraceArea.BackgroundTransferService, "Canceling Background Transfer: " + e + ", causeId: " + t);
            let i = this._transfers[e];
            i && this._cancelTransfer(i, t)
        }
        _cancelTransfer(e, t) {
            if (this._endTransfer(e.id),
            e.started) {
                _.supportsUrlRequest(e) && s.default.cancel(e.id);
                const i = this._webRequests[e.id];
                i && (g.log(c.LogTraceArea.BackgroundTransferService, "BTS aborting in-flight webrequest: " + e.id + ", causeId: " + t),
                i.abort(),
                delete this._webRequests[e.id])
            }
            this._reportProgress(e.id, 0, !0, !1)
        }
        transferIsTracked(e) {
            return !!e && !!this._transfers[e]
        }
        _checkForNeededWork(e) {
            let t = this._transfers[e];
            if (!t.started) {
                if (_.supportsUrlRequest(t)) {
                    const i = o.clone(t.headers);
                    let n;
                    (t.postData || t.postFileUri || t.contentType) && (n = r.SimpleWebRequest.mapContentType(t.contentType || "json"));
                    const c = r.SimpleWebRequest.mapContentType(t.acceptType || "json")
                      , d = t.postData ? r.SimpleWebRequest.mapBody(t.postData, n) : void 0;
                    if (!d || o.isString(d)) {
                        const r = t.postFileUri ? u.FileUploadCacheUtils.getAbsoluteFromLocalCacheUri(t.postFileUri) : void 0
                          , g = l.default.getS4LMessagingFeaturesNoSubscription().backgroundTransfersInFlightLimit;
                        let h;
                        if (g && o.size(this._transfers) > g) {
                            const e = a.Defer();
                            h = e.promise(),
                            this._deferredTransferQueue.push(e)
                        } else
                            h = a.Resolved();
                        h.then(()=>{
                            t = this._transfers[e],
                            t && s.default.send(e, t.action, t.url, {
                                headers: i,
                                acceptType: c,
                                contentType: n,
                                sendFileUri: r,
                                sendData: d,
                                downloadToUri: t.downloadToUri,
                                filename: t.filename,
                                downloadToPublicFolder: t.downloadToPublicFolder,
                                downloadPublicFolderUseSkypeFolder: t.downloadPublicFolderUseSkypeFolder,
                                withCredentials: t.withCredentials,
                                timeout: t.timeout || void 0,
                                progressTimeout: t.progressTimeout,
                                resumable: t.resumable,
                                resumableUploadStatusUrl: t.resumableUploadStatusUrl,
                                resumableAttemptsSoFar: t.resumableAttemptsSoFar,
                                quarantineDownloadedFile: l.default.getS4LNativePlatformsEcsConfigNoSubscription().enableMacOSQuarantineFlagForDownloadedFiles
                            })
                        }
                        ),
                        t.started = !0
                    }
                }
                if (!t.started) {
                    t.headers,
                    t.postFileUri;
                    {
                        const i = {
                            overrideGetHeaders: t.headers,
                            acceptType: t.acceptType,
                            contentType: t.contentType,
                            sendData: t.postData,
                            onProgress: t=>{
                                this._reportProgress(e, t.total ? t.loaded / t.total : 0, !1, !1)
                            }
                            ,
                            priority: t.priority,
                            timeout: t.timeout,
                            withCredentials: !!t.withCredentials
                        };
                        let n = new r.SimpleWebRequest(t.action,t.url,i);
                        this._webRequests[e] = n,
                        n.start().then(t=>{
                            this._finishedTransfer(e, !0, t.statusCode, t.statusText, t.headers, t.body)
                        }
                        , t=>{
                            this._finishedTransfer(e, !1, t.statusCode, t.statusText, t.headers, t.body, t.timedOut ? "Timeout" : t.canceled ? "Canceled" : void 0)
                        }
                        )
                    }
                }
                t.started = !0,
                p.default.updateAction(t)
            }
            if (!t.finished)
                return;
            const i = this._subscribers[t.subscriberType];
            if (i) {
                const n = {
                    body: t.responseData,
                    headers: t.responseHeaders || {},
                    method: t.action,
                    statusCode: t.statusCode || 0,
                    statusText: t.statusText || "",
                    url: t.url,
                    errorInfo: t.errorInfo
                };
                i(e, t.context, !!t.finishSuccess, n, t.headers || {}, t.subscriberType),
                this._endTransfer(t.id)
            }
        }
        _seeIfAnythingNeedsDoing() {
            const e = o.keys(this._transfers);
            o.each(e, e=>{
                this._checkForNeededWork(e)
            }
            )
        }
        _finishedTransfer(e, t, i, o, s, r, a) {
            delete this._webRequests[e];
            const l = this._transfers[e];
            g.log(c.LogTraceArea.BackgroundTransferService, "Transfer Completed: " + e + ", Worked: " + t + ", StatusCode: " + i + ", StatusText: " + o + ", known: " + !!l + (a ? ", Failure: " + n.pii.Omit(a) : "")),
            l && (l.finished = !0,
            l.finishSuccess = t,
            l.statusCode = i,
            l.statusText = o,
            l.responseHeaders = s,
            l.responseData = r,
            l.errorInfo = a,
            p.default.updateAction(l),
            this._reportProgress(e, t ? 1 : 0, !0, t),
            this._checkForNeededWork(e))
        }
        subscribeToProgress(e, t) {
            this._progressSubscribers[e] ? this._progressSubscribers[e].push(t) : this._progressSubscribers[e] = [t]
        }
        unsubscribeFromProgress(e, t) {
            o.pull(this._progressSubscribers[e], t),
            0 === this._progressSubscribers[e].length && delete this._progressSubscribers[e]
        }
        getProgress(e) {
            return this._cachedProgressForTransfer[e]
        }
        _reportProgress(e, t, i, n) {
            const s = {
                progress: t,
                finished: i,
                success: !!n
            }
              , r = !!this._transfers[e];
            if (r && (this._cachedProgressForTransfer[e] = s,
            !this._progressSubscribers[e]))
                return;
            g.log(c.LogTraceArea.BackgroundTransferServiceDebug, "Progress report: " + e + ", progress: " + t.toFixed(4) + ", finished: " + i + ", success: " + n + ", known: " + r);
            const a = o.clone(this._progressSubscribers[e]);
            o.each(a, t=>t(e, s))
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(431)
      , r = i(6)
      , a = i(276)
      , l = i(209)
      , c = i(39);
    var d, u, g, h, p, m, S;
    !function(e) {
        e[e.Guest = 0] = "Guest",
        e[e.SignIn = 1] = "SignIn",
        e[e.SignUp = 2] = "SignUp",
        e[e.SsoSignIn = 3] = "SsoSignIn",
        e[e.QsoSignIn = 4] = "QsoSignIn",
        e[e.Interrupt = 5] = "Interrupt",
        e[e.WAM = 6] = "WAM",
        e[e.MigratedCredentials = 7] = "MigratedCredentials",
        e[e.SkypeWebLogin = 8] = "SkypeWebLogin",
        e[e.Unknown = 9] = "Unknown"
    }(d = t.AppEntryMethod || (t.AppEntryMethod = {}));
    class C extends c.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._isFirstTimeSignIn = e,
            this._isAppAutoStartEnabled = t,
            this._isAppLaunchMinimizedEnabled = i
        }
        shouldSendUaid() {
            return !1
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.SISUExpID = r.default.dangerouslyGetS4LSisuFeatures().sisuExpId,
            this.shouldSendUaid() && (e.UAID = a.sisuUaid),
            void 0 !== this._isFirstTimeSignIn && (e.IsFirstTimeSignIn = this._isFirstTimeSignIn),
            void 0 !== this._isAppAutoStartEnabled && (e.IsAppAutoStartEnabled = this._isAppAutoStartEnabled),
            void 0 !== this._isAppLaunchMinimizedEnabled && (e.IsAppLaunchMinimizedEnabled = this._isAppLaunchMinimizedEnabled),
            e
        }
        getLoggedOutSendingPolicy() {
            return c.TelemetryEventLoggedOutPolicy.SendNow
        }
    }
    class y extends C {
        getEventName() {
            return "sisu_welcome_screen"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.WelcomeScreenLoaded = class extends y {
        getActionName() {
            return "WelcomeScreenLoaded"
        }
    }
    ;
    t.GetStartedPanelLoaded = class extends y {
        getActionName() {
            return "GetStartedPanelLoaded"
        }
    }
    ;
    t.LetsGoButtonClicked = class extends y {
        getActionName() {
            return "LetsGoButtonClicked"
        }
    }
    ;
    t.NeedHelpClicked = class extends y {
        getActionName() {
            return "NeedHelpClicked"
        }
    }
    ;
    t.NeedHelpLinkOpened = class extends y {
        getActionName() {
            return "NeedHelpLinkOpened"
        }
    }
    ;
    t.LoginFlowStarted = class extends y {
        getActionName() {
            return "LoginFlowStarted"
        }
        shouldSendUaid() {
            return !0
        }
    }
    ;
    t.CreateAccountFlowStarted = class extends y {
        getActionName() {
            return "CreateAccountFlowStarted"
        }
        shouldSendUaid() {
            return !0
        }
    }
    ;
    t.CreateAccountFlowCanceled = class extends y {
        constructor(e) {
            super(),
            this._isMsaSignUpWebViewLoaded = e
        }
        getActionName() {
            return "CreateAccountFlowCanceled"
        }
        shouldSendUaid() {
            return !0
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                IsMSASignUpWebViewLoaded: this._isMsaSignUpWebViewLoaded
            })
        }
    }
    ;
    t.AppEntryEvent = class extends C {
        constructor(e, t, i, n, o) {
            super(t),
            this._method = e,
            this._isNeedHelpClicked = i,
            this._timeToEntry = n,
            this._hasWAMAccount = o
        }
        getEventName() {
            return "sisu_app_entry"
        }
        getAttributes() {
            const e = o.assign(super.getAttributes(), {
                Method: d[this._method],
                WasNeedHelpClicked: this._isNeedHelpClicked || !1
            });
            return void 0 !== this._hasWAMAccount && (e.WasOfferedWithWAM = !!this._hasWAMAccount),
            this._timeToEntry && (e.TimeToEntry = this._timeToEntry),
            e
        }
        getLoggedOutSendingPolicy() {
            return c.TelemetryEventLoggedOutPolicy.WaitForUserId
        }
    }
    ;
    t.MsaSignUpFunnelEvent = class extends C {
        constructor(e, t, i, n, o) {
            super(n),
            this._funnelPageName = e,
            this._timeToArrive = t,
            this._errorCode = i,
            this._isNeedHelpClicked = o,
            this._timeToArrive > 36e5 && (this._timeToArrive = -1)
        }
        getEventName() {
            return "sisu_msa_signup_funnel"
        }
        shouldSendUaid() {
            return !0
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                FunnelPageName: this._funnelPageName,
                ErrorCode: this._errorCode ? this._errorCode : "None",
                TimeToStepDuration: this._timeToArrive,
                WasNeedHelpClicked: this._isNeedHelpClicked || !1
            })
        }
    }
    ;
    t.MsaSignInFunnelEvent = class extends C {
        constructor(e, t, i, n, o) {
            super(n),
            this._funnelPageName = e,
            this._timeToArrive = t,
            this._errorCode = i,
            this._isNeedHelpClicked = o,
            this._timeToArrive > 36e5 && (this._timeToArrive = -1)
        }
        getEventName() {
            return "sisu_msa_signin_funnel"
        }
        shouldSendUaid() {
            return !0
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                FunnelPageName: this._funnelPageName,
                ErrorCode: this._errorCode ? this._errorCode : "None",
                TimeToStepDuration: this._timeToArrive,
                WasNeedHelpClicked: this._isNeedHelpClicked || !1
            })
        }
    }
    ;
    class f extends C {
        getEventName() {
            return "sisu_msa_interrupt_handler"
        }
        shouldSendUaid() {
            return !0
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.MSAInterruptHandlerStarted = class extends f {
        getActionName() {
            return "RefreshTokenStored"
        }
    }
    ;
    t.MSAInterruptHandlerSwitched = class extends f {
        getActionName() {
            return "UserSwitchedAccounts"
        }
    }
    ;
    t.MSAInterruptHandlerSignedIn = class extends f {
        getActionName() {
            return "UserSignedIn"
        }
    }
    ;
    class _ extends C {
        getEventName() {
            return "sisu_sso_screen"
        }
        shouldSendUaid() {
            return !0
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    class b extends _ {
        constructor(e) {
            super(),
            this._tokenProviderPackageId = e
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                ProviderPackageId: this._tokenProviderPackageId ? this._tokenProviderPackageId : ""
            })
        }
    }
    t.SsoTokenSignIn = class extends b {
        getActionName() {
            return "SsoTokenSignIn"
        }
    }
    ;
    t.SsoTokenAutoRefreshed = class extends b {
        getActionName() {
            return "SsoTokenAutoRefreshed"
        }
    }
    ;
    t.SsoTokenInterrupted = class extends b {
        getActionName() {
            return "SsoTokenInterrupted"
        }
    }
    ;
    t.SsoTokenSignedIn = class extends b {
        getActionName() {
            return "SsoTokenSignedIn"
        }
    }
    ,
    function(e) {
        e[e.OAuthError = 0] = "OAuthError",
        e[e.WebViewError = 1] = "WebViewError",
        e[e.NavigationDeadEnd = 2] = "NavigationDeadEnd",
        e[e.AutoRefreshError = 3] = "AutoRefreshError",
        e[e.InterruptError = 4] = "InterruptError",
        e[e.UserSwitched = 5] = "UserSwitched"
    }(u = t.RefreshTokenErrorCode || (t.RefreshTokenErrorCode = {}));
    t.RefreshTokenError = class extends C {
        constructor(e, t, i, n) {
            super(),
            this._errorCode = e,
            this._tokenSource = t,
            this._errorName = i,
            this._errorMessage = n
        }
        getEventName() {
            return "sisu_refreshtoken_error"
        }
        shouldSendUaid() {
            return !0
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ErrorCode = u[this._errorCode],
            this._tokenSource && (e.TokenSource = l.MsaTokenSource[this._tokenSource]),
            this._errorName && (e.ErrorName = this._errorName),
            this._errorMessage && (e.ErrorMessage = this._errorMessage),
            e
        }
    }
    ,
    function(e) {
        e[e.Manual = 0] = "Manual",
        e[e.SsoSignIn = 1] = "SsoSignIn",
        e[e.QsoSignIn = 2] = "QsoSignIn",
        e[e.Interrupt = 3] = "Interrupt",
        e[e.WAM = 4] = "WAM",
        e[e.MigratedCredentials = 5] = "MigratedCredentials",
        e[e.Unknown = 6] = "Unknown",
        e[e.Guest = 7] = "Guest"
    }(g = t.AppEntryStartMethod || (t.AppEntryStartMethod = {}));
    t.AppEntryStartEvent = class extends C {
        constructor(e, t) {
            super(t),
            this._method = e
        }
        getEventName() {
            return "sisu_app_entry_start"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Method = g[this._method],
            e
        }
    }
    ,
    function(e) {
        e[e.SessionConnected = 0] = "SessionConnected",
        e[e.DefaultMsaAttached = 1] = "DefaultMsaAttached",
        e[e.AppUpdate = 2] = "AppUpdate",
        e[e.MaintenanceWindowStart = 3] = "MaintenanceWindowStart"
    }(h = t.BackgroundTriggers || (t.BackgroundTriggers = {}));
    class v extends c.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._isFirstTimeSignIn = e,
            this._backgroundTrigger = t
        }
        getEventName() {
            return "sisu_auto_signin"
        }
        getAttributes() {
            let e = super.getAttributes();
            return void 0 !== this._isFirstTimeSignIn && (e.IsFirstTimeSignIn = this._isFirstTimeSignIn),
            e.Action = this.getActionName(),
            void 0 !== this._backgroundTrigger && (e.BackgroundTrigger = h[this._backgroundTrigger]),
            e
        }
        getLoggedOutSendingPolicy() {
            return c.TelemetryEventLoggedOutPolicy.SendNow
        }
    }
    !function(e) {
        e[e.MSA = 0] = "MSA",
        e[e.WAM = 1] = "WAM",
        e[e.AAD = 2] = "AAD"
    }(p = t.LoginMethod || (t.LoginMethod = {}));
    t.AutoSignExtraSignInStarted = class extends v {
        constructor(e, t) {
            super(t),
            this._loginMethod = e
        }
        getActionName() {
            return "ExtraSignInStarted"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.LoginMethod = p[this._loginMethod],
            e
        }
    }
    ;
    t.AutoSignInStarted = class extends v {
        getActionName() {
            return "AutoSignInStarted"
        }
    }
    ;
    t.AutoSignInCancelled = class extends v {
        getActionName() {
            return "AutoSignInCancelled"
        }
    }
    ;
    t.AutoSignInServerConfigFetchFailed = class extends v {
        getActionName() {
            return "AutoSignInServerConfigFetchFailed"
        }
    }
    ;
    t.AutoSignInDisabledByECS = class extends v {
        getActionName() {
            return "AutoSignInDisabledByECS"
        }
    }
    ;
    t.AutoSignInDatabaseInitializationFailed = class extends v {
        getActionName() {
            return "AutoSignInDatabaseInitializationFailed"
        }
    }
    ;
    t.AutoSignInCallingStoreInitializationFailed = class extends v {
        getActionName() {
            return "AutoSignInCallingStoreInitializationFailed"
        }
    }
    ;
    t.AutoSignInPushRegistrationFailed = class extends v {
        getActionName() {
            return "AutoSignInPushRegistrationFailed"
        }
    }
    ;
    t.AutoSignInSkypeTokenFetchFailed = class extends v {
        getActionName() {
            return "AutoSignInSkypeTokenFetchFailed"
        }
    }
    ;
    t.AutoSignInNoUserNameInStorage = class extends v {
        getActionName() {
            return "AutoSignInNoUserNameInStorage"
        }
    }
    ;
    t.AutoSignInUserNameRetrievalFromStorageFailed = class extends v {
        getActionName() {
            return "AutoSignInUserNameRetrievalFromStorageFailed"
        }
    }
    ;
    t.AutoSignInTelemetryServiceInitializationFailed = class extends v {
        getActionName() {
            return "AutoSignInTelemetryServiceInitializationFailed"
        }
    }
    ;
    t.AutoSignInCompleted = class extends v {
        getActionName() {
            return "AutoSignInCompleted"
        }
    }
    ,
    function(e) {
        e[e.AccountPicker = 0] = "AccountPicker",
        e[e.MeetNow = 1] = "MeetNow"
    }(m = t.WAMSignInSource || (t.WAMSignInSource = {}));
    t.WAMCacheInvalidated = class extends v {
        getActionName() {
            return "WAMCacheInvalidated"
        }
    }
    ;
    t.WAMLoginFailure = class extends v {
        constructor(e) {
            super(e)
        }
        getActionName() {
            return "WAMLoginFailure"
        }
    }
    ;
    t.WAMInterruptEncountered = class extends v {
        getActionName() {
            return "WAMInterruptEncountered"
        }
    }
    ;
    t.WAMLoginCompleted = class extends v {
        constructor(e) {
            super(e)
        }
        getActionName() {
            return "WAMLoginCompleted"
        }
    }
    ;
    class T extends v {
        constructor(e, t=!1, i, n) {
            super(e),
            this._isRefreshRequest = t,
            this._correlationId = i,
            this._signInSource = n
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IsRefreshRequest = this._isRefreshRequest,
            void 0 === this._signInSource || this._isRefreshRequest || (e.SignInSource = m[this._signInSource]),
            this._correlationId && (e.WamCorrelationId = this._correlationId),
            e
        }
    }
    t.WAMTokenRequested = class extends T {
        constructor(e, t=!1, i, n) {
            super(e, t, i, n)
        }
        getActionName() {
            return "WAMTokenRequested"
        }
    }
    ;
    t.WAMTokenRetrieved = class extends T {
        constructor(e, t=!1, i, n) {
            super(e, t, i, n)
        }
        getActionName() {
            return "WAMTokenRetrieved"
        }
    }
    ;
    t.WAMTokenRetrievalFailure = class extends T {
        constructor(e, t, i, n, o=!1, s, r) {
            super(e, o, s, r),
            this._errorCode = t,
            this._errorMessage = i,
            this._hResult = n
        }
        getActionName() {
            return "WAMTokenRetrievalFailure"
        }
        getAttributes() {
            let e = super.getAttributes();
            return void 0 !== this._errorCode && (e.ErrorCode = this._errorCode),
            this._errorMessage && (e.ErrorMessage = this._errorMessage),
            this._hResult && (e.HResult = s.TokenRequestHRESULT[this._hResult]),
            e
        }
    }
    ,
    function(e) {
        e[e.MSA = 0] = "MSA",
        e[e.Skype = 1] = "Skype",
        e[e.UWP_MSA = 2] = "UWP_MSA",
        e[e.M3_MSA = 3] = "M3_MSA"
    }(t.MigratedT1CredentialsType || (t.MigratedT1CredentialsType = {})),
    function(e) {
        e[e.Fetched = 0] = "Fetched",
        e[e.Migrated = 1] = "Migrated",
        e[e.Failed = 2] = "Failed",
        e[e.ForcedFetched = 3] = "ForcedFetched",
        e[e.ForcedFailed = 4] = "ForcedFailed"
    }(S = t.MigratedT1CredentialsStep || (t.MigratedT1CredentialsStep = {}));
    class P extends c.TelemetryEventBase {
        constructor(e, t, i, n, o, s) {
            super(),
            this._type = e,
            this._step = t,
            this._wlidErrorCode = i,
            this._t1Username = n,
            this._errStatusCode = o,
            this._errShortName = s
        }
        getEventName() {
            return "sisu_migrated_t1_credentials"
        }
        getAttributes() {
            const e = o.assign({}, super.getAttributes(), {
                Type: this._type,
                Step: this._step
            });
            return this._wlidErrorCode && (e.WLIDErrorCode = this._wlidErrorCode),
            this._errStatusCode && (e.WebErrorStatusCode = this._errStatusCode),
            this._errShortName && (e.WebErrorShortName = this._errShortName),
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return e.UsernameHash = {
                value: this._t1Username || "",
                piiKind: n.AWTPiiKind.Identity
            },
            e
        }
        getLoggedOutSendingPolicy() {
            return this._step === S[S.Migrated] ? c.TelemetryEventLoggedOutPolicy.WaitForUserId : c.TelemetryEventLoggedOutPolicy.SendNow
        }
    }
    t.MigratedT1Credentials = P;
    class A extends c.TelemetryEventBase {
        getEventName() {
            return "sisu_converged_msa"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Action: this.getActionName()
            })
        }
    }
    t.ConvergedMsaEventBase = A;
    t.MsaConvergenceCallInterruptAvoided = class extends A {
        getActionName() {
            return "CallInterruptAvoided"
        }
    }
    ;
    t.MsaConvergenceNotificationInterruptAvoided = class extends A {
        getActionName() {
            return "NotificationInterruptAvoided"
        }
    }
    ;
    t.MsaConvergenceBackgroundInterruptAvoided = class extends A {
        getActionName() {
            return "BackgroundInterruptAvoided"
        }
    }
    ;
    t.MsaConvergenceUnexpectedRetrySuccess = class extends A {
        getActionName() {
            return "UnexpectedRetrySuccess"
        }
    }
    ;
    class k extends c.TelemetryEventBase {
        constructor(e) {
            super(),
            this._lastRefreshTime = e
        }
        getEventName() {
            return "sisu_auth_background_refresh"
        }
        getAttributes() {
            const e = o.assign(super.getAttributes(), {
                Action: this.getActionName()
            });
            return this._lastRefreshTime && (e.LastRefreshTime = this._lastRefreshTime),
            e
        }
    }
    t.AuthBackgroundRefreshScheduledEvent = class extends k {
        getActionName() {
            return "RefreshScheduled"
        }
    }
    ;
    t.AuthBackgroundRefreshUpdateTriggeredEvent = class extends k {
        getActionName() {
            return "UpdateTriggered"
        }
    }
    ;
    t.AuthBackgroundRefreshHasValidTokenEvent = class extends k {
        getActionName() {
            return "HasValidToken"
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(16)
      , s = i(39);
    var r, a;
    !function(e) {
        e[e.UserProfile = 0] = "UserProfile",
        e[e.GroupProfile = 1] = "GroupProfile",
        e[e.AddToGroup = 2] = "AddToGroup",
        e[e.AddContact = 3] = "AddContact",
        e[e.MoreContactsPanel = 4] = "MoreContactsPanel",
        e[e.MessageStream = 5] = "MessageStream",
        e[e.DesktopNewActionPicker = 6] = "DesktopNewActionPicker",
        e[e.NewChatInvite = 7] = "NewChatInvite",
        e[e.QuickCallPanel = 8] = "QuickCallPanel",
        e[e.CallRosterPanel = 9] = "CallRosterPanel",
        e[e.LandingScreen = 10] = "LandingScreen",
        e[e.MeProfile = 11] = "MeProfile",
        e[e.Unknown = 12] = "Unknown"
    }(r = t.InviteLinkOrigin || (t.InviteLinkOrigin = {})),
    function(e) {
        e[e.NotRecognized = 0] = "NotRecognized",
        e[e.Recognized = 1] = "Recognized",
        e[e.TimedOut = 2] = "TimedOut"
    }(a = t.FingerPrintResult || (t.FingerPrintResult = {}));
    class l extends s.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._inviteLink = e,
            this._mri = t,
            this._origin = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = r[this._origin],
            e.InviteType = o.isThread(this._mri) ? "group" : "user",
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return e.InviteLink = {
                value: this._inviteLink,
                piiKind: n.AWTPiiKind.Uri
            },
            e
        }
    }
    !function(e) {
        e.Clipboard = "clipboard",
        e.Email = "email",
        e.Native = "native",
        e.QR = "qr"
    }(t.ShareType || (t.ShareType = {}));
    t.InviteSharedEvent = class extends l {
        constructor(e, t, i, n) {
            super(e, t, n),
            this._shareType = i
        }
        getEventName() {
            return "people_invite_link_shared"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ShareType = this._shareType,
            e
        }
    }
    ;
    class c extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._result = e
        }
        getEventName() {
            return "people_device_fingerprint_checked"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Result = a[this._result],
            e
        }
    }
    t.FingerPrintCheckEvent = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        getEventName() {
            return "caap_bot"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.BotInteraction = class extends s {
        constructor(e) {
            super(),
            this._interaction = e
        }
        getActionName() {
            return n.BotsInteraction[this._interaction]
        }
    }
    ;
    t.BotProfileInteraction = class extends s {
        constructor(e, t, i) {
            super(),
            this._botId = e,
            this._botName = t,
            this._isViewingProfile = i
        }
        getActionName() {
            return this._isViewingProfile ? n.BotsInteraction[n.BotsInteraction.ViewBotProfile] : n.BotsInteraction[n.BotsInteraction.CloseBotProfile]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.BotID = this._botId,
            e.BotName = this._botName,
            e
        }
    }
    ;
    t.BotCategoryMoreInteraction = class extends s {
        constructor(e) {
            super(),
            this._category = e
        }
        getActionName() {
            return n.BotsInteraction[n.BotsInteraction.ClickMoreForCategory]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Category = this._category,
            e
        }
    }
    ;
    t.BotChatInteraction = class extends s {
        constructor(e, t, i, n) {
            super(),
            this._botId = e,
            this._botName = t,
            this._isBotAContact = i,
            this._originatingPanel = n
        }
        getActionName() {
            return n.BotsInteraction[n.BotsInteraction.ClickChatWithBot]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.BotID = this._botId,
            e.BotName = this._botName,
            e.IsBotAContact = this._isBotAContact,
            e.OriginatingPanel = n.BotsOriginatingPanel[this._originatingPanel],
            e
        }
    }
    ;
    t.BotContactInteraction = class extends s {
        constructor(e, t, i) {
            super(),
            this._botInteraction = e,
            this._botId = t,
            this._botName = i
        }
        getActionName() {
            return n.BotsInteraction[this._botInteraction]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.BotID = this._botId,
            e.BotName = this._botName,
            e
        }
    }
    ;
    t.BotMessageInteraction = class extends s {
        constructor(e, t) {
            super(),
            this._botId = e,
            this._botName = t
        }
        getActionName() {
            return n.BotsInteraction[n.BotsInteraction.MessageBot]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.BotID = this._botId,
            e.BotName = this._botName,
            e
        }
    }
    ;
    t.BotShareInteraction = class extends s {
        constructor(e, t, i) {
            super(),
            this._botId = e,
            this._botName = t,
            this._originatingPanel = i
        }
        getActionName() {
            return n.BotsInteraction[n.BotsInteraction.ClickShareBot]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.BotID = this._botId,
            e.BotName = this._botName,
            e.OriginatingPanel = n.BotsOriginatingPanel[this._originatingPanel],
            e
        }
    }
    ;
    t.AutoAddBotExperiment = class extends s {
        constructor(e) {
            super(),
            this._botId = e
        }
        getActionName() {
            return n.BotsInteraction[n.BotsInteraction.AutoAddBot]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.BotID = this._botId,
            e
        }
    }
}
, , , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(27)
      , r = i(5)
      , a = i(4)
      , l = i(54)
      , c = i(8)
      , d = i(11)
      , u = i(49)
      , g = i(12)
      , h = r.lazyProperties({
        selectionToggle: ()=>o.Styles.createViewStyle({
            flex: 0,
            alignSelf: "center",
            width: 24,
            height: 24,
            borderRadius: 12,
            borderWidth: 1,
            borderStyle: "solid",
            marginRight: 10,
            alignItems: "center",
            justifyContent: "center"
        }),
        selectionToggleOn: ()=>o.Styles.createViewStyle({
            borderColor: c.Color.transparent
        })
    });
    class p extends g.default {
        _buildState(e, t) {
            let i = {
                primaryColor: e.disable ? this._themeColors.disabledTextColor : e.selectionColor || l.getPrimaryColor() || c.Color.blue
            };
            return t && (this._toggleBackgroundColorValue = new o.Animated.Value(e.isOn ? 1 : 0),
            i.showTick = e.isOn),
            i
        }
        componentMounting(e) {
            super.componentMounting(e),
            this._animatedSelectionStyle = o.Styles.createAnimatedViewStyle({
                backgroundColor: this._toggleBackgroundColorValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [this._themeColors.primaryBackgroundColor, this._useAccessibleTheme() ? this._themeColors.tabIndicatorColor : e.primaryColor]
                })
            })
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this.state.primaryColor === t.primaryColor && this.props.colorThemeOverride === e.colorThemeOverride || this._updateAnimatedStyles(t)
        }
        componentDidUpdate(e, t, i) {
            if (super.componentDidUpdate(e, t, i),
            this.props.isOn !== e.isOn) {
                this.props.isOn || this.setState({
                    showTick: !1
                });
                const e = ()=>{
                    this.props.isOn && this.isComponentMounted() && this.setState({
                        showTick: !0
                    })
                }
                ;
                this.props.disableSelectionAnimation ? (this._toggleBackgroundColorValue.setValue(this.props.isOn ? 1 : 0),
                e()) : o.Animated.timing(this._toggleBackgroundColorValue, {
                    toValue: this.props.isOn ? 1 : 0,
                    duration: 250,
                    easing: o.Animated.Easing.Linear()
                }).start(()=>{
                    e()
                }
                )
            }
        }
        _updateAnimatedStyles(e) {
            const t = this._useAccessibleTheme() ? this._themeColors.tabIndicatorColor : e.primaryColor;
            this._animatedSelectionStyle = o.Styles.createAnimatedViewStyle({
                backgroundColor: this._toggleBackgroundColorValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [this._themeColors.primaryBackgroundColor, t]
                })
            })
        }
        _updateCurrentTheme(e, t) {
            const i = super._updateCurrentTheme(e, t);
            return i && this.state && this._updateAnimatedStyles(this.state),
            i
        }
        render() {
            let e = this.props.falseLabel || a.getString("ToggleSwitch.OffText");
            this.props.isOn && (e = this.props.trueLabel || a.getString("ToggleSwitch.OnText"));
            const t = [h.selectionToggle, this._themeStyles.toggleBorderColorStyle];
            this.state.showTick && (t.push(h.selectionToggleOn),
            this.props.selectionBorderColor && t.push(o.Styles.createViewStyle({
                borderColor: this.props.selectionBorderColor
            }, !1))),
            this._animatedSelectionStyle && t.push(this._animatedSelectionStyle),
            this._useAccessibleTheme() && t.push(this._themeStyles.dividerBorderColorStyle);
            const i = this._useAccessibleTheme() && this._themeColors.primaryBadgeTextColor && !this.props.disable ? this._themeColors.primaryBadgeTextColor : c.Color.white
              , r = this._getContext().iconCollection
              , l = u.okIconByFontCollection(r)
              , g = n.isUndefined(this.props.importantForAccessibility) || this.props.importantForAccessibility === o.Types.ImportantForAccessibility.Yes;
            return o.createElement(o.Animated.View, {
                style: [t, this.props.style],
                accessibilityLabel: g ? e : void 0,
                importantForAccessibility: this.props.importantForAccessibility
            }, o.createElement(s.default, {
                icon: this.state.showTick ? l : d.SkypeIcon.Blank,
                size: 24,
                color: i,
                padding: 6,
                iconCollection: r
            }))
        }
    }
    e.exports = p
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.None = 0] = "None",
        e[e.User = 1] = "User",
        e[e.Group = 2] = "Group",
        e[e.Bot = 3] = "Bot",
        e[e.Connector = 4] = "Connector"
    }(t.DetailsPanelViewMode || (t.DetailsPanelViewMode = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.AddToContact = 1] = "AddToContact"
    }(t.DetailsPanelOrigin || (t.DetailsPanelOrigin = {})),
    t.DetailsPanelHeaderSizes = {
        scrollOffsetMobile: 100,
        scrollOffsetDesktop: 148,
        avatarOffsetPixels: 20,
        headerReplacementPadding: 65,
        headerReplacementPaddingModal: 24,
        headerPadding: 20
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    var n;
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const o = i(26)
      , s = i(33)
      , r = i(1)
      , a = i(70)
      , l = i(13)
      , c = i(7)
      , d = i(952)
      , u = i(422)
      , g = i(6)
      , h = i(139)
      , p = i(78)
      , m = i(57)
      , S = i(16)
      , C = i(48)
      , y = i(71)
      , f = i(202)
      , _ = i(188)
      , b = i(881)
      , v = i(2)
      , T = i(141)
      , P = i(3)
      , A = i(32)
      , k = i(62)
      , I = i(20)
      , w = i(75)
      , N = i(580)
      , M = i(455)
      , E = i(34)
      , x = i(21)
      , D = i(25)
      , L = i(45);
    let R = n = class extends l.StoreBase {
        constructor() {
            super(),
            this._recentAlerts = [],
            this._loadingAlertsFromDb = !1,
            this._unreadAlertCount = 0,
            this._approximatedUnreadAlertCount = 0,
            this.addMissedCallbackReminderAlert = e=>{
                P.log(v.LogTraceArea.AlertsStore, "addMissedCallbackReminderAlert, calleeMri: " + s.pii.Omit(e));
                const t = d.default.fromScratch(u.AlertType.MissedCallbackReminder, Date.now(), !1, void 0, {
                    missedCallbackReminderCalleeMri: e
                });
                this._recentAlerts.push(t),
                this._pruneAndSortRecentAlerts()
            }
            ,
            x.RegisterStartupable(this, "AlertsStore", [h.default, m.default, k.default, A.default, L])
        }
        startup() {
            return this._recentAlerts = [],
            this._loadingAlertsFromDb = !1,
            this._loadingAlertsFromDbPromise = void 0,
            this._unreadAlertCount = 0,
            this._approximatedUnreadAlertCount = 0,
            this._updateUnreadAlertsCount().then(()=>{
                this._blockedMriStoreSub && h.default.unsubscribe(this._blockedMriStoreSub),
                this._blockedMriStoreSub = h.default.subscribe(e=>{
                    this._loadAndPruneRecentAlerts().then(()=>{
                        const e = r.partition(this._recentAlerts, e=>e.alertType === u.AlertType.HighlightsFollowRequest && h.default.isMriBlocked(e.highlightsFollowInfo.otherUserMri));
                        e[0].length > 0 && (C.default.removeAlerts(e[0]),
                        this._approximatedUnreadAlertCount -= n._countUnreadAlerts(e[0]),
                        this._recentAlerts = e[1],
                        this._unreadAlertCount = n._countUnreadAlerts(this._recentAlerts),
                        this._checkReferenceCounting(),
                        this.trigger())
                    }
                    )
                }
                ),
                this._chatServiceAlertsUpdatedSub && this._chatServiceAlertsUpdatedSub.unsubscribe(),
                this._chatServiceAlertsUpdatedSub = m.default.alertsUpdated.subscribe(e=>{
                    this._areAlertsLoadedInMemory().then(t=>{
                        const i = n._countUnreadAlerts(e.adds) - n._countUnreadAlerts(e.deletes) + n._countUnreadAlerts(r.map(e.updates, e=>e.updated)) - n._countUnreadAlerts(r.map(e.updates, e=>e.original));
                        this._approximatedUnreadAlertCount += i,
                        t ? (r.each(e.deletes, e=>{
                            r.remove(this._recentAlerts, t=>e.guid === t.guid)
                        }
                        ),
                        r.each(e.updates, e=>{
                            r.remove(this._recentAlerts, t=>e.updated.guid === t.guid)
                        }
                        ),
                        this._recentAlerts.push(...e.adds),
                        this._recentAlerts.push(...r.map(e.updates, e=>e.updated)),
                        this._pruneAndSortRecentAlerts()) : (this._unreadAlertCount = this._approximatedUnreadAlertCount,
                        0 !== i && (P.log(v.LogTraceArea.AlertsStore, "Alerts updated from ChatService, change: " + i + ", total: " + this._unreadAlertCount),
                        this.trigger()))
                    }
                    )
                }
                ),
                this._myUserPreferencesStoreSub && k.default.unsubscribe(this._myUserPreferencesStoreSub),
                this._myUserPreferencesStoreSub = k.default.subscribe(()=>{
                    this._updateUnreadAlertsCount()
                }
                , k.TriggerKeys.AlertsLastReadTime),
                this._myUserPreferencesLocalSub && A.default.unsubscribe(this._myUserPreferencesLocalSub),
                this._myUserPreferencesLocalSub = A.default.subscribe(()=>{
                    f.default.isEngagementContentEnabled() || this.trigger()
                }
                ),
                T.default.queueIdleTask("AlertsStore Pruning", T.TaskTypeFlags.CpuIntensive, ()=>{
                    this._loadingAlertsFromDbPromise || C.default.countAlerts().then(e=>{
                        e > 80 && this._loadAndPruneRecentAlerts()
                    }
                    )
                }
                ),
                this._popCardStoreSub && this._popCardStoreSub.unsubscribe(),
                this._popCardStoreSub = M.default.updatedCardState.subscribe((e,t)=>{
                    e !== N.PopCardState.Completed && e !== N.PopCardState.Dismissed || this._loadAndPruneRecentAlerts().then(()=>{
                        let e = 0;
                        r.each(t, (t,i)=>this._addPopCardsAlert(i, t, this._generateUniqueIdFromCorrelationAndArrayPosition(e++, t.messageCorrelationId))),
                        this._pruneAndSortRecentAlerts()
                    }
                    )
                }
                ),
                this._noticeMessageReceivedSub && this._noticeMessageReceivedSub.unsubscribe(),
                this._noticeMessageReceivedSub = b.noticeMessageReceived.subscribe(e=>{
                    this._loadAndPruneRecentAlerts().then(()=>{
                        let t = 0;
                        r.each(e, e=>this._addNoticeAlert(e, this._generateUniqueIdFromCorrelationAndArrayPosition(t++, e.messageCorrelationId))),
                        this._pruneAndSortRecentAlerts()
                    }
                    )
                }
                ),
                this._noticeMessageOpenedSub && this._noticeMessageOpenedSub.unsubscribe(),
                this._noticeMessageOpenedSub = b.noticeMessageOpened.subscribe(e=>{
                    r.each(this._recentAlerts, (t,i)=>!t.noticeMessageInfo || t.noticeMessageInfo.guid !== e || (this._recentAlerts[i] = t.applyRead(!0),
                    !1)),
                    this._pruneAndSortRecentAlerts()
                }
                ),
                this._appConfigStoreSub && g.default.unsubscribe(this._appConfigStoreSub),
                this._permissionsStorePromptSub && w.default.unsubscribe(this._permissionsStorePromptSub),
                this._permissionsStorePromptSub = w.default.subscribe(()=>{
                    this.maybeAddOrRemoveNotificationPermissionAlert()
                }
                , w.TriggerKeys.NotificationsPrompt),
                this._permissionsStorePermissionChangedSub && w.default.unsubscribe(this._permissionsStorePermissionChangedSub),
                this._permissionsStorePermissionChangedSub = w.default.subscribe(()=>{
                    this.maybeAddOrRemoveNotificationPermissionAlert()
                }
                , D.PermissionType.Notifications)
            }
            )
        }
        _generateUniqueIdFromCorrelationAndArrayPosition(e, t) {
            return e ? `${t}_${e}` : t
        }
        _addOrUpdateAlert(e, t, i) {
            this._loadAndPruneRecentAlerts().then(()=>{
                const n = ()=>{
                    const t = d.default.fromScratch(e, Date.now(), i);
                    C.default.putAlerts([t]),
                    this._recentAlerts.push(t)
                }
                ;
                if (t) {
                    const t = r.remove(this._recentAlerts, t=>t.alertType === e);
                    r.isEmpty(t) || C.default.removeAlerts(t),
                    n()
                } else {
                    let t = !1;
                    r.each(this._recentAlerts, (n,o)=>{
                        if (n.alertType === e) {
                            const e = n.applyRead(i);
                            this._recentAlerts[o] = e,
                            C.default.putAlerts([e]),
                            t = !0
                        }
                    }
                    ),
                    t || n()
                }
                this._pruneAndSortRecentAlerts()
            }
            )
        }
        _addOrUpdateNotificationPermissionAlert(e, t) {
            this._addOrUpdateAlert(u.AlertType.NotificationPermission, e, t)
        }
        _isNotificationPermissionGranted() {
            return w.default.permissionStatus(D.PermissionType.Notifications) === a.PermissionStatus.Granted
        }
        _shouldDisplayNotificationPermissionAlert() {
            return !this._isNotificationPermissionGranted() && w.default.isNotificationsPromptDismissed()
        }
        _addPopCardsAlert(e, t, i) {
            const o = u.AlertType.Engagement
              , s = r.remove(this._recentAlerts, t=>t.alertType === o && (!t.popCardInfo || t.popCardInfo.guid === e));
            if (r.isEmpty(s) || (C.default.removeAlerts(s),
            this._approximatedUnreadAlertCount -= n._countUnreadAlerts(s)),
            o === u.AlertType.Engagement) {
                if (!!M.default.getCardCount(N.PopCardTarget.All, void 0, void 0, e)) {
                    const n = p.chain(s, p.filter(t=>!!t.popCardInfo && t.popCardInfo.guid === e), p.first())
                      , r = {
                        guid: e,
                        title: t.alertTitle,
                        subtitle: t.alertSubtitle,
                        iconUrl: t.iconUrl,
                        actionUri: t.alertActionUri,
                        actionTarget: t.alertActionTarget,
                        campaignId: t.alertCampaignId,
                        isQuietCard: t.isQuietCard,
                        userTagging: t.userTagging,
                        placeholders: t.placeholders,
                        messageCorrelationId: t.messageCorrelationId,
                        engagementTelemetryAttributes: t.engagementTelemetryAttributes,
                        persistencyMode: t.persistencyMode || _.EngagementMessagePersistencyMode.None,
                        validUntil: t.validUntil,
                        showOnlyTitle: t.showOnlyTitle
                    }
                      , a = d.default.fromScratch(o, n ? n.alertTime : Date.now(), !!t.shown, void 0, {
                        popCardInfo: r,
                        guid: i || t.messageCorrelationId
                    });
                    C.default.putAlerts([a]),
                    this._recentAlerts.push(a)
                }
            }
        }
        _addNoticeAlert(e, t) {
            let i = e.attachments && e.attachments[0];
            if (!i || !i.content)
                return void P.error(v.LogTraceArea.AlertsStore, "Notice content missing, guid:", e.guid);
            let n = i.content.buttons && i.content.buttons.length && i.content.buttons[0]
              , o = i.content.mainActionUri || n && n.actionUri
              , s = i.content.mainActionTarget || n && n.actionTarget;
            if (!o)
                return void P.error(v.LogTraceArea.AlertsStore, "Notice URI action missing, guid:", e.guid);
            const r = {
                guid: e.guid,
                title: i.content.title,
                text: i.content.text,
                iconUrl: i.iconUrl,
                buttonTitle: n ? n.title : void 0,
                buttonActionUri: n ? n.actionUri : void 0,
                buttonActionTarget: n && n.actionTarget || _.ActionTarget.Default,
                modalTitle: i.content.modalTitle,
                mainActionUri: o,
                mainActionTarget: s || _.ActionTarget.Default,
                campaignId: e.campaignId,
                contentType: i.contentType,
                skypeId: i.skypeId,
                showStatusIndicator: !!i.showStatusIndicator,
                placeholders: e.placeholders,
                messageCorrelationId: e.messageCorrelationId,
                engagementTelemetryAttributes: e.telemetry,
                userTagging: e.userTagging,
                persistencyMode: e.persistencyMode || _.EngagementMessagePersistencyMode.None,
                validUntil: f.default.calculateMessageValidUntilProperty(e.validUntilTimestamp, e.validForPeriod),
                showOnlyTitle: e.showOnlyTitle
            }
              , a = d.default.fromScratch(u.AlertType.Notice, Date.now(), !1, void 0, {
                noticeMessageInfo: r,
                guid: t || e.messageCorrelationId
            });
            C.default.putAlerts([a]),
            this._recentAlerts.push(a)
        }
        _checkReferenceCounting() {
            this._approximatedUnreadAlertCount !== this._unreadAlertCount && P.warn(v.LogTraceArea.AlertsStore, "Alerts counting off. Expected: " + this._approximatedUnreadAlertCount + ", Actual: " + this._unreadAlertCount)
        }
        _updateUnreadAlertsCount() {
            return this._areAlertsLoadedInMemory().then(e=>e ? c.Resolved(n._countUnreadAlerts(this._recentAlerts)) : C.default.countUnreadAlertsSinceTime(k.default.getAlertsLastReadTime() || 0)).then(e=>{
                this._approximatedUnreadAlertCount = e,
                this._unreadAlertCount !== e && (P.log(v.LogTraceArea.AlertsStore, "_updateUnreadAlertsCount, new total: " + this._unreadAlertCount),
                this._unreadAlertCount = e,
                this.trigger())
            }
            )
        }
        getRecentAlerts(e=u.AlertTypeFilter.All) {
            this._loadAndPruneRecentAlerts();
            let t = []
              , i = [];
            r.each(this._recentAlerts, e=>{
                n._hideAlert(e) || e.isRemovedHighlightsFollowRequest() || (e.isHighlightsFollowRequest() ? t.push(e) : i.push(e))
            }
            );
            const o = r.concat(t, i);
            return e !== u.AlertTypeFilter.All ? r.filter(o, t=>{
                switch (e) {
                case u.AlertTypeFilter.HighPriorityMessages:
                    return t.alertType === u.AlertType.HighPriorityMessage;
                case u.AlertTypeFilter.Reactions:
                    return t.alertType === u.AlertType.Reaction || t.alertType === u.AlertType.AdditionalReaction
                }
            }
            ) : o
        }
        isLoadingAlertsFromDb() {
            return this._loadingAlertsFromDb
        }
        getUnreadAlertsCount() {
            return Math.max(0, this._unreadAlertCount)
        }
        hasUnreadAlerts(e=!1) {
            return e ? r.some(this.getRecentAlerts(), e=>!e.isRead) : this.getUnreadAlertsCount() > 0
        }
        slashCommand_refresh() {
            this._loadAndPruneRecentAlerts().then(()=>{
                C.default.removeAlerts(this._recentAlerts),
                this._recentAlerts = [],
                this._unreadAlertCount = 0,
                this._approximatedUnreadAlertCount = 0,
                this.trigger()
            }
            )
        }
        _areAlertsLoadedInMemory() {
            return this._loadingAlertsFromDbPromise ? this._loadingAlertsFromDbPromise.then(()=>!0) : c.Resolved(!1)
        }
        _shouldPruneEngagementAlertEntry(e) {
            const t = e.alertType === u.AlertType.Notice ? e.noticeMessageInfo : void 0
              , i = e.alertType === u.AlertType.Engagement ? e.popCardInfo : void 0;
            if (t || i) {
                const e = Date.now();
                if (t && t.validUntil && e > t.validUntil || i && i.validUntil && e > i.validUntil) {
                    if (i) {
                        const e = M.default.getCardsById([i.guid]);
                        r.each(e, e=>M.default.deletePopCard(e, !1))
                    }
                    return !0
                }
                if (t && t.persistencyMode === _.EngagementMessagePersistencyMode.Persistent || i && i.persistencyMode === _.EngagementMessagePersistencyMode.Persistent)
                    return !1
            }
            return i && i.guid ? !M.default.getCardCount(void 0, void 0, void 0, i.guid) : !!t && !!e.isRead
        }
        _loadAndPruneRecentAlerts() {
            if (this._loadingAlertsFromDbPromise)
                return this._loadingAlertsFromDbPromise;
            const e = g.default.getS4LMessagingFeatures().enableMediaAlbums;
            return this._loadingAlertsFromDb = !0,
            this._loadingAlertsFromDbPromise = C.default.getAlerts().then(t=>{
                const i = r.filter(t, t=>t.alertType === u.AlertType.Engagement || t.alertType === u.AlertType.Notice ? this._shouldPruneEngagementAlertEntry(t) : t.alertType === u.AlertType.OnboardingX || (t.alertType === u.AlertType.CoachMarks || (t.alertType === u.AlertType.NotificationPermission && !this._shouldDisplayNotificationPermissionAlert() || !(!t.message || !t.message.isAlbum() || e))));
                i.length && C.default.removeAlerts(i),
                this._recentAlerts = t;
                let n = [];
                r.each(this._recentAlerts, (e,t)=>{
                    if (e.alertType !== u.AlertType.HighlightsFollowRequest || e.highlightsFollowInfo.followState !== u.HighlightsFollowAlertState.Follow)
                        return;
                    const i = S.getHighlightsThreadMriForSkypeId(I.getSkypeId());
                    if (!i)
                        return;
                    const o = m.default.getConversationMetaFromMemoryCache(i);
                    if (!o || !o.conv.isUserMember(e.highlightsFollowInfo.otherUserMri))
                        return;
                    P.log(v.LogTraceArea.AlertsStore, "Forcing HL follow alert for " + E.mriOrId(e.highlightsFollowInfo.otherUserMri) + " to AcceptedByMe");
                    const s = {
                        otherUserMri: e.highlightsFollowInfo.otherUserMri,
                        followState: u.HighlightsFollowAlertState.AcceptedByMe
                    }
                      , r = e.updateHighlightsFollowStatus(e.alertTime, !!e.isRead, e.message, s);
                    this._recentAlerts[t] = r,
                    n.push(r)
                }
                ),
                n.length > 0 && C.default.putAlerts(n),
                this._pruneAndSortRecentAlerts()
            }
            ),
            this._loadingAlertsFromDbPromise
        }
        _pruneAndSortRecentAlerts() {
            const e = y.add(Date.now(), 0, -u.AlertsConstants.DaysOfAlertsToDisplay)
              , t = r.partition(this._recentAlerts, t=>t.alertType === u.AlertType.Notice || t.alertType === u.AlertType.Engagement ? !this._shouldPruneEngagementAlertEntry(t) : t.alertType !== u.AlertType.HighlightsSkypeChannel && t.alertType !== u.AlertType.HighlightsSkypeChannelSecondary && t.alertType !== u.AlertType.HighlightsFollowRequest && !t.isHighlightsFollowRequest() && (!(t.alertType === u.AlertType.NotificationPermission && !this._shouldDisplayNotificationPermissionAlert()) && t.alertTime > e));
            let i = t[1]
              , o = t[0];
            o.sort(n._compareAlerts);
            for (let e = 40; e < o.length; )
                o[e].isHighlightsFollowRequest() ? e++ : (i.push(o[e]),
                o.splice(e, 1));
            i.length > 0 && (P.log(v.LogTraceArea.AlertsStore, "Pruning " + i.length + " stale alerts from database"),
            C.default.removeAlerts(i),
            this._approximatedUnreadAlertCount -= n._countUnreadAlerts(i)),
            this._recentAlerts = o,
            this._loadingAlertsFromDb = !1,
            this._unreadAlertCount = n._countUnreadAlerts(this._recentAlerts),
            m.default.setAlertsTrackedByAlertsStore(this._recentAlerts),
            P.log(v.LogTraceArea.AlertsStore, "Alerts pruned, new total: " + this._unreadAlertCount + ", approx: " + this._approximatedUnreadAlertCount),
            this._checkReferenceCounting(),
            this.trigger()
        }
        static _countUnreadAlerts(e) {
            const t = k.default.getAlertsLastReadTime() || 0;
            return r.sumBy(e, e=>!e.isRead && e.alertTime > t && !n._hideAlert(e) ? 1 : 0)
        }
        static _compareAlerts(e, t) {
            return e.alertType !== u.AlertType.NotificationPermission && t.alertType !== u.AlertType.NotificationPermission || e.alertType === t.alertType ? e.alertTime < t.alertTime ? 1 : e.alertTime > t.alertTime ? -1 : e.guid < t.guid ? 1 : -1 : e.alertType === u.AlertType.NotificationPermission ? -1 : 1
        }
        static _hideAlert(e) {
            return e.alertType === u.AlertType.HighlightComment || e.alertType === u.AlertType.HighlightsFollowRequest || e.alertType === u.AlertType.HighlightsSkypeChannel || e.alertType === u.AlertType.HighlightsSkypeChannelSecondary || (e.alertType !== u.AlertType.Reaction && e.alertType !== u.AlertType.AdditionalReaction || !e.message ? e.alertType === u.AlertType.CoachMarks ? !f.default.isEngagementContentEnabled() : !(e.alertType !== u.AlertType.ScheduledCall || !e.message) && h.default.isMriBlocked(e.message.conversationId) : S.isHighlightsThread(e.message.conversationId))
        }
        clearAlertsPanelCount() {
            return P.log(v.LogTraceArea.AlertsStore, "Clearing alerts panel count"),
            this._areAlertsLoadedInMemory().then(e=>{
                if (e) {
                    const e = r.maxBy(this._recentAlerts, e=>e.alertTime);
                    return c.Resolved(e ? e.alertTime : 0)
                }
                return C.default.getMostRecentAlertTime()
            }
            ).then(e=>{
                e !== (k.default.getAlertsLastReadTime() || 0) && (P.log(v.LogTraceArea.AlertsStore, "Setting alerts last read time to " + e),
                k.default.setAlertsLastReadTime(e))
            }
            )
        }
        markAsRead(e) {
            P.log(v.LogTraceArea.AlertsStore, "Mark one as read, guid: " + e),
            this._recentAlerts = r.map(this._recentAlerts, t=>t.guid === e ? t.applyRead(!0) : t),
            this.trigger()
        }
        markAllAsRead() {
            if (P.log(v.LogTraceArea.AlertsStore, "Marking all alerts as read"),
            r.isEmpty(this._recentAlerts))
                return;
            const e = [];
            r.each(this._recentAlerts, (t,i)=>{
                if (!t.isRead) {
                    const n = t.applyRead(!0);
                    this._recentAlerts[i] = n,
                    e.push(n)
                }
            }
            ),
            r.isEmpty(e) || (this._unreadAlertCount = 0,
            C.default.putAlerts(e),
            this.trigger())
        }
        maybeAddOrRemoveNotificationPermissionAlert() {
            this._shouldDisplayNotificationPermissionAlert() ? this._addOrUpdateNotificationPermissionAlert(!0, !1) : this._pruneAndSortRecentAlerts()
        }
        test_getApproximatedUnreadAlertsCount() {
            return this._approximatedUnreadAlertCount
        }
        test_getAllRawAlerts() {
            return this._recentAlerts
        }
        test_shouldPruneEngagementAlertEntry(e) {
            return this._shouldPruneEngagementAlertEntry(e)
        }
        test_pruneAndSortRecentAlerts() {
            this._pruneAndSortRecentAlerts()
        }
        test_cleanSubscriptions() {
            this._blockedMriStoreSub = void 0,
            this._chatServiceAlertsUpdatedSub = void 0,
            this._myUserPreferencesStoreSub = void 0,
            this._popCardStoreSub = void 0,
            this._noticeMessageReceivedSub = void 0,
            this._noticeMessageOpenedSub = void 0,
            this._permissionsStorePromptSub = void 0,
            this._permissionsStorePermissionChangedSub = void 0,
            this._appConfigStoreSub = void 0,
            this._myUserPreferencesLocalSub = void 0
        }
    }
    ;
    o.__decorate([l.autoSubscribe], R.prototype, "getRecentAlerts", null),
    o.__decorate([l.autoSubscribe], R.prototype, "isLoadingAlertsFromDb", null),
    o.__decorate([l.autoSubscribe], R.prototype, "getUnreadAlertsCount", null),
    o.__decorate([l.autoSubscribe], R.prototype, "hasUnreadAlerts", null),
    R = n = o.__decorate([l.AutoSubscribeStore], R),
    t.default = new R
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    !function(e) {
        e.AlertsPanel = "alertsPanel",
        e.ConversationList = "conversationList"
    }(t.NativeAdPlacementName || (t.NativeAdPlacementName = {}));
    class o extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this.props = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getAction(),
            e.PlacementId = this.props.placementId,
            e.PlacementName = this.props.placementName,
            e.AdsGuid = this.props.adsGuid,
            e.NaExperimentName = this.props.naExperimentName,
            e.AdsProvider = this.props.provider,
            e
        }
        getEventName() {
            return "monetization_ads"
        }
    }
    class s extends o {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AdGuid = this.props.adGuid,
            e
        }
    }
    class r extends o {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AdsElapsedTime = this.props.elapsedTime,
            e
        }
    }
    class a extends s {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AdElapsedTime = this.props.elapsedTime,
            e
        }
    }
    t.NativeAdsEligibilityEvent = class extends o {
        getAction() {
            return "UserIsAdsEligible"
        }
    }
    ;
    t.NativeAdsEligibilityErrorEvent = class extends o {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "AdsEligibilityCheckFailed"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorCode = this.props.errorCode,
            e.ErrorMessage = this.props.errorMessage,
            e
        }
    }
    ;
    t.NativeAdsEligibilityForcedEvent = class extends o {
        getAction() {
            return "AdsEligibilityForced"
        }
    }
    ;
    t.NativeAdsPlacementNotVisibleEvent = class extends o {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "PlacementNotVisible"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsFirstRequest = this.props.isFirstRequest,
            e
        }
    }
    ;
    t.NativeAdsLoadedEvent = class extends r {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "AdsLoaded"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.NewAdsCount = this.props.newAdsCount,
            e
        }
    }
    ;
    t.NativeAdsErrorEvent = class extends r {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "AdsError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorCode = this.props.errorCode,
            e.ErrorMessage = this.props.errorMessage,
            e
        }
    }
    ;
    t.NativeAdDisplayErrorEvent = class extends a {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "AdDisplayError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorCode = this.props.errorCode,
            e.ErrorMessage = this.props.errorMessage,
            e
        }
    }
    ;
    t.NativeAdDisplayRegisteredEvent = class extends a {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsVisibleOnLoad = this.props.isVisibleOnLoad,
            e
        }
        getAction() {
            return "AdDisplayRegistered"
        }
    }
    ;
    t.NativeAdImpressionLoggedEvent = class extends s {
        getAction() {
            return "AdImpressionLogged"
        }
    }
    ;
    t.NativeAdDisplayedEvent = class extends a {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsVisibleOnLoad = this.props.isVisibleOnLoad,
            e
        }
        getAction() {
            return "AdDisplayed"
        }
    }
    ;
    t.NativeAdsHideEvent = class extends o {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.RemainingHidingTime = this.props.remainingHidingTime,
            e.OnStartup = this.props.onStartup,
            e
        }
        getAction() {
            return "AdsHide"
        }
    }
    ;
    t.NativeAdsUnhideEvent = class extends o {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.OnStartup = this.props.onStartup,
            e
        }
        getAction() {
            return "AdsUnhideOnStartup"
        }
    }
    ;
    t.NativeAdCtaClickEvent = class extends s {
        getAction() {
            return "AdCtaClicked"
        }
    }
    ;
    t.NativeAdChoicesClickEvent = class extends s {
        getAction() {
            return "AdChoicesClicked"
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39)
      , s = i(9);
    class r extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._durationInMs = e,
            this._isStackMode = t
        }
        shouldSend() {
            const e = o.SampledPerfEvents[this.getScenarioName()];
            return !n.isNumber(e) || s.sampleForPercentage(e)
        }
        getEventName() {
            return "perf"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Scenario = this.getScenarioName(),
            e.Duration = this._durationInMs || "",
            e.DisplayMode = this._isStackMode ? "Stack" : "Composite",
            e
        }
    }
    t.PerfEventBase = r;
    class a extends r {
        constructor(e, t, i, n) {
            super(t, !1),
            this._phase = e,
            this._durationInMsSincePreviousPhase = i,
            this._durationInMsSinceForegrounded = n
        }
        shouldSend() {
            return n.isUndefined(a._shouldSend) && (a._shouldSend = super.shouldSend()),
            a._shouldSend
        }
        getScenarioName() {
            return "StartupPerfPhase" + this._phase
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.DurationSinceForegrounded = n.isUndefined(this._durationInMsSinceForegrounded) ? -1 : this._durationInMsSinceForegrounded,
            e.DurationSincePreviousPhase = this._durationInMsSincePreviousPhase,
            e
        }
    }
    t.PerfStartupPhase = a,
    a._shouldSend = void 0;
    t.PerfCameraPhoto = class extends r {
        getScenarioName() {
            return "CameraPhoto"
        }
    }
    ;
    t.PerfPictureViewerThumbLoaded = class extends r {
        getScenarioName() {
            return "PictureViewerThumbLoaded"
        }
    }
    ;
    t.PerfPictureViewerFullLoaded = class extends r {
        getScenarioName() {
            return "PictureViewerFullLoaded"
        }
    }
    ;
    t.SearchPanelRendered = class extends r {
        getScenarioName() {
            return "SearchPanelRendered"
        }
    }
    ;
    t.SearchPanelZeroTermResultsRendered = class extends r {
        getScenarioName() {
            return "SearchPanelZeroTermResultsRendered"
        }
    }
    ;
    t.ContactsPanelRendered = class extends r {
        getScenarioName() {
            return "ContactsPanelRendered"
        }
    }
    ;
    t.ContactsPanelPeopleZeroTermResultsRendered = class extends r {
        getScenarioName() {
            return "ContactsPanelPeopleZeroTermResultsRendered"
        }
    }
    ;
    t.ContactsPanelSkypeZeroTermResultsRendered = class extends r {
        getScenarioName() {
            return "ContactsPanelSkypeZeroTermResultsRendered"
        }
    }
    ;
    t.ContactsPanelActiveNowZeroTermResultsRendered = class extends r {
        getScenarioName() {
            return "ContactsPanelActiveNowZeroTermResultsRendered"
        }
    }
    ;
    t.ContactsPanelLocalContactsZeroTermResultsRendered = class extends r {
        getScenarioName() {
            return "ContactsPanelActiveNowZeroTermResultsRendered"
        }
    }
    ;
    t.ContactsPanelAllContactsZeroTermResultsRendered = class extends r {
        getScenarioName() {
            return "ContactsPanelAllContactsZeroTermResultsRendered"
        }
    }
    ;
    t.ContactsPanelV2FullyRendered = class extends r {
        constructor(e, t, i, n, o) {
            super(e, t),
            this._initialTab = i,
            this._hasSyncedContacts = n,
            this._isActiveNowFilterSelected = o
        }
        getScenarioName() {
            return "ContactsPanelV2FullyRendered"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.InitialTab = this._initialTab,
            e.HasSyncedContacts = this._hasSyncedContacts,
            e.IsActiveNowFilterSelected = this._isActiveNowFilterSelected,
            e
        }
    }
    ;
    t.LocalAddressBookGotLocalContacts = class extends r {
        constructor(e, t, i, n) {
            super(e, t),
            this._numLocalContacts = i,
            this._isInitialSync = n
        }
        getScenarioName() {
            return "LocalAddressBookGotLocalContacts"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.NumLocalContacts = this._numLocalContacts,
            e.IsInitialSync = this._isInitialSync,
            e
        }
    }
    ;
    t.LocalAddressBookCalculatedAllHashes = class extends r {
        getScenarioName() {
            return "LocalAddressBookCalculatedAllHashes"
        }
    }
    ;
    t.LocalAddressBookFinishedProcessing = class extends r {
        getScenarioName() {
            return "LocalAddressBookFinishedProcessing"
        }
    }
    ;
    t.PublicDirectoryServiceCallSent = class extends r {
        getScenarioName() {
            return "PublicDirectoryServiceCallSent"
        }
    }
    ;
    t.PublicDirectoryResultsReceived = class extends r {
        getScenarioName() {
            return "PublicDirectoryResultsReceived"
        }
    }
    ;
    t.PublicDirectoryResultsNotReceived = class extends r {
        constructor(e, t, i, n) {
            super(e, !1),
            this._errorCode = t,
            this._errorMessage = i,
            this._isNetworkAvailable = n
        }
        getScenarioName() {
            return "PublicDirectoryResultsNotReceived"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorCode = this._errorCode,
            e.ErrorMessage = this._errorMessage,
            e.IsNetworkAvailable = this._isNetworkAvailable,
            e
        }
    }
    ;
    t.PublicDirectoryResultsRendered = class extends r {
        getScenarioName() {
            return "PublicDirectoryResultsRendered"
        }
    }
    ;
    class l extends r {
        constructor(e, t, i, n) {
            super(e, t),
            this._API = i,
            this._searchLimit = n
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.API = this._API,
            e.SearchLimit = this._searchLimit,
            e
        }
    }
    t.MessageSearchServiceCallSent = class extends l {
        constructor(e, t, i, n) {
            super(e, t, i, n)
        }
        getScenarioName() {
            return "MessageSearchServiceCallSent"
        }
    }
    ;
    t.MessageSearchResultsReceived = class extends l {
        constructor(e, t, i, n) {
            super(e, t, i, n)
        }
        getScenarioName() {
            return "MessageSearchResultsReceived"
        }
    }
    ;
    t.MessageSearchResultsNotReceived = class extends l {
        constructor(e, t, i, n, o, s, r, a) {
            super(e, t, i, n),
            this._errorCode = o,
            this._errorMessage = s,
            this._isNetworkAvailable = r,
            this._isZeroTermSearch = a
        }
        getScenarioName() {
            return "MessageSearchResultsNotReceived"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorCode = this._errorCode,
            e.ErrorMessage = this._errorMessage,
            e.IsNetworkAvailable = this._isNetworkAvailable,
            e.IsZeroTermSearch = this._isZeroTermSearch,
            e
        }
    }
    ;
    t.MessageSearchResultsRendered = class extends r {
        getScenarioName() {
            return "MessageSearchResultsRendered"
        }
    }
    ;
    t.MediaSearchResultsReceived = class extends r {
        getScenarioName() {
            return "MediaSearchResultsReceived"
        }
    }
    ;
    t.MediaSearchResultsRendered = class extends r {
        getScenarioName() {
            return "MediaSearchResultsRendered"
        }
    }
    ;
    t.ComposerEmoticonLoaded = class extends r {
        getScenarioName() {
            return "ComposerEmoticonLoaded"
        }
    }
    ;
    t.ConvDbSearchCallSent = class extends r {
        getScenarioName() {
            return "ConvDbSearchCallSent"
        }
    }
    ;
    t.ConvDbSearchResultsReceived = class extends r {
        getScenarioName() {
            return "ConvDbSearchResultsReceived"
        }
    }
    ;
    t.ConvDbSearchResultsNotReceived = class extends r {
        constructor(e, t) {
            super(e, !1),
            this._errorMessage = t
        }
        getScenarioName() {
            return "ConvDbSearchResultsNotReceived"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorMessage = this._errorMessage,
            e
        }
    }
    ;
    t.ConvDbSearchResultsRendered = class extends r {
        getScenarioName() {
            return "ConvDbSearchResultsRendered"
        }
    }
    ;
    t.PeopleRecommendationsFetched = class extends r {
        constructor(e, t, i, n, o, s) {
            super(e, !1),
            this._requestId = t,
            this._successful = i,
            this._count = n,
            this._statusCode = o,
            this._error = s
        }
        getScenarioName() {
            return "PeopleRecommendationsFetched"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.RequestId = this._requestId,
            e.Successful = this._successful,
            e.StatusCode = this._statusCode ? this._statusCode : -1,
            e.Count = this._count ? this._count : -1,
            e.Error = this._error || "",
            e
        }
    }
    ;
    t.BotsSearchServiceCallSent = class extends r {
        getScenarioName() {
            return "BotsSearchServiceCallSent"
        }
    }
    ;
    t.BotsSearchResultsReceived = class extends r {
        getScenarioName() {
            return "BotsSearchResultsReceived"
        }
    }
    ;
    t.BotsSearchResultsNotReceived = class extends r {
        constructor(e, t, i, n) {
            super(e, !1),
            this._errorCode = t,
            this._errorMessage = i,
            this._isNetworkAvailable = n
        }
        getScenarioName() {
            return "BotsSearchResultsNotReceived"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorCode = this._errorCode,
            e.ErrorMessage = this._errorMessage,
            e.IsNetworkAvailable = this._isNetworkAvailable,
            e
        }
    }
    ;
    t.BotsSearchResultsRendered = class extends r {
        getScenarioName() {
            return "BotsSearchResultsRendered"
        }
    }
    ;
    t.AllPeopleSearchResultsReceived = class extends r {
        getScenarioName() {
            return "AllPeopleSearchResultsReceived"
        }
    }
    ;
    t.AllPeopleSearchResultsRendered = class extends r {
        getScenarioName() {
            return "AllPeopleSearchResultsRendered"
        }
    }
    ;
    t.AllPeopleSearchResultsNotReceived = class extends r {
        constructor(e, t) {
            super(e, !1),
            this._errorMessage = t
        }
        getScenarioName() {
            return "AllPeopleSearchResultsNotReceived"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ErrorMessage = this._errorMessage,
            e
        }
    }
    ;
    t.SearchPerformanceTelemetryEvent = class extends r {
        constructor(e, t, i) {
            super(e, t),
            this._queryLength = i
        }
        getScenarioName() {
            return "SearchPerformance"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.QueryLength = this._queryLength,
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(0)
      , r = i(52)
      , a = i(7)
      , l = i(78)
      , c = i(10)
      , d = i(2)
      , u = i(3)
      , g = i(38)
      , h = i(22)
      , p = i(24)
      , m = i(21)
      , S = i(168)
      , C = i(8)
      , y = i(92)
      , f = i(135);
    var _;
    !function(e) {
        e[e.Fade = 0] = "Fade",
        e[e.Slide = 1] = "Slide"
    }(_ = t.ShowHideTransition || (t.ShowHideTransition = {}));
    const b = {
        hidden: {
            hide: !1,
            showHideTransition: _.Slide
        },
        backgroundColor: {
            color: C.Color.white,
            animated: !1
        },
        translucent: !1,
        barStyle: {
            style: S.BarStyleTheme.Dark,
            animated: !0
        },
        networkActivityIndicatorVisible: !1
    };
    t.default = new class {
        constructor() {
            this._statusBarStyleList = [],
            this._statusBarHiddenInLandscape = !1,
            this._defaultStatusBarStyle = b,
            this.statusBarUpdated = new r.default,
            m.RegisterStartupable(this, "StatusBarManager", [p.default])
        }
        startup() {
            return s.StatusBar.isOverlay() && (this._statusBarHiddenInLandscape = p.default.getDeviceOrientation(c.MainRootViewId) === o.DeviceOrientation.Landscape && h.default.isUsingStackNavigationContext(),
            p.default.subscribe(()=>{
                this._updateStatusBarWithOrientation()
            }
            , p.TriggerKeys.Orientation),
            h.default.subscribe(()=>{
                this._updateStatusBarWithOrientation()
            }
            , h.TriggerKeys.NavContextType)),
            this._updateStatusBarWithOrientation(),
            a.Resolved()
        }
        statusBarHiddenInLandscape() {
            return this._statusBarHiddenInLandscape
        }
        addOrUpdateStyle(e, t, i=!1) {
            this._addStatusBarStyleListEntry({
                key: e,
                style: t
            }),
            this._mergeAndUpdateStatusBarStyles(i)
        }
        removeStyle(e) {
            const t = n.findIndex(this._statusBarStyleList, t=>t.key === e);
            -1 !== t && (u.log(d.LogTraceArea.StatusBarManager, "StatusBarManager: Popping style for " + e),
            this._statusBarStyleList.splice(t, 1),
            this._mergeAndUpdateStatusBarStyles())
        }
        setDefaultStatusBarStyle(e, t) {
            const i = n.clone(this._defaultStatusBarStyle);
            i.barStyle = {
                style: t,
                animated: !0
            },
            i.backgroundColor = {
                color: e,
                animated: !0
            },
            this._defaultStatusBarStyle = i,
            this._mergeAndUpdateStatusBarStyles()
        }
        _updateStatusBarWithOrientation() {
            (h.default.isUsingStackNavigationContext() || this._statusBarHiddenInLandscape) && (this._statusBarHiddenInLandscape = !(!s.StatusBar.isOverlay() || !h.default.isUsingStackNavigationContext()) && p.default.getDeviceOrientation(c.MainRootViewId) === o.DeviceOrientation.Landscape,
            this._statusBarHiddenInLandscape ? (this._currentStatusBarStyle.hidden = {
                hide: !0,
                showHideTransition: _.Slide
            },
            s.StatusBar.setHidden(!0, "slide"),
            this.statusBarUpdated.fire(!0)) : this._mergeAndUpdateStatusBarStyles())
        }
        _addStatusBarStyleListEntry(e) {
            const t = n.findIndex(this._statusBarStyleList, t=>t.key === e.key);
            if (-1 !== t) {
                const i = this._statusBarStyleList[t];
                n.merge(i.style, e.style),
                u.log(d.LogTraceArea.StatusBarManager, "StatusBarManager: Modified old style - " + e.key)
            } else
                u.log(d.LogTraceArea.StatusBarManager, "StatusBarManager: Pushed new style - " + e.key),
                this._statusBarStyleList.push(e)
        }
        _mergeAndUpdateStatusBarStyles(e=!1) {
            const t = l.chain(this._statusBarStyleList, l.map(e=>e.style), l.reduce((e,t)=>n.merge(e, t), this._defaultStatusBarStyle));
            this._setStatusBarStyles(t, e)
        }
        _setStatusBarStyles(e, t=!1) {
            !t && this._currentStatusBarStyle && g.default(this._currentStatusBarStyle.hidden, e.hidden) || (this._statusBarHiddenInLandscape ? e.hidden.hide = !0 : (s.StatusBar.setHidden(e.hidden.hide, this._getShowHideTransition(e.hidden.showHideTransition)),
            this.statusBarUpdated.fire(e.hidden.hide))),
            !t && this._currentStatusBarStyle && g.default(this._currentStatusBarStyle.backgroundColor, e.backgroundColor) || s.StatusBar.setBackgroundColor(e.backgroundColor.color, e.backgroundColor.animated),
            !t && this._currentStatusBarStyle && g.default(this._currentStatusBarStyle.translucent, e.translucent) || s.StatusBar.setTranslucent(e.translucent),
            !t && this._currentStatusBarStyle && g.default(this._currentStatusBarStyle.barStyle, e.barStyle) || s.StatusBar.setBarStyle(this._getBarStyleTheme(e.barStyle.style), e.barStyle.animated),
            !t && this._currentStatusBarStyle && g.default(this._currentStatusBarStyle.networkActivityIndicatorVisible, e.networkActivityIndicatorVisible) || s.StatusBar.setNetworkActivityIndicatorVisible(e.networkActivityIndicatorVisible),
            this._currentStatusBarStyle = n.cloneDeep(e)
        }
        _getShowHideTransition(e) {
            switch (e) {
            case _.Fade:
                return "fade";
            case _.Slide:
            default:
                return "slide"
            }
        }
        _getBarStyleTheme(e) {
            switch (e) {
            case S.BarStyleTheme.Default:
                return this._defaultBarStyle();
            case S.BarStyleTheme.Light:
                return "light-content";
            case S.BarStyleTheme.Dark:
                return "dark-content";
            default:
                return "default"
            }
        }
        _defaultBarStyle() {
            return "default"
        }
        _isDarkTheme() {
            let e;
            return e = y.colorTheme(),
            f.isDarkTheme(e)
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    var o, s, r;
    !function(e) {
        e[e.ManageSearchOpened = 0] = "ManageSearchOpened",
        e[e.AppearInSearchResultsInteraction = 1] = "AppearInSearchResultsInteraction",
        e[e.AppearInSuggestionResults = 2] = "AppearInSuggestionResults",
        e[e.AppearInSearchResults = 3] = "AppearInSearchResults",
        e[e.ReceiveContactSuggestions = 4] = "ReceiveContactSuggestions",
        e[e.PhoneDiscoverability = 5] = "PhoneDiscoverability"
    }(o || (o = {})),
    function(e) {
        e[e.ApplicationSettings = 0] = "ApplicationSettings",
        e[e.AboutPeopleYouMayKnowPanel = 1] = "AboutPeopleYouMayKnowPanel"
    }(s = t.ManageSearchOrigin || (t.ManageSearchOrigin = {})),
    function(e) {
        e[e.ApplicationSettings = 0] = "ApplicationSettings",
        e[e.DeepLink = 1] = "DeepLink",
        e[e.UserProfile = 2] = "UserProfile"
    }(r = t.PhoneDiscoverabilityOrigin || (t.PhoneDiscoverabilityOrigin = {}));
    class a extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "settings_privacy"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = o[this._action],
            e
        }
    }
    t.ManageSearchOpenedEvent = class extends a {
        constructor(e) {
            super(o.ManageSearchOpened),
            this._origin = e
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = s[this._origin],
            e
        }
    }
    ;
    t.ReceiveContactSuggestionsEvent = class extends a {
        constructor(e, t) {
            super(o.ReceiveContactSuggestions),
            this._grantedPermissions = e,
            this._origin = t
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.DidGrantPermission = this._grantedPermissions,
            e.Origin = s[this._origin],
            e
        }
    }
    ;
    t.AppearInSuggestionsEvent = class extends a {
        constructor(e, t) {
            super(o.AppearInSuggestionResults),
            this._grantedPermissions = e,
            this._origin = t
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.DidGrantPermission = this._grantedPermissions,
            e.Origin = s[this._origin],
            e
        }
    }
    ;
    t.AppearInSearchEvent = class extends a {
        constructor(e, t) {
            super(o.AppearInSearchResults),
            this._grantedPermissions = e,
            this._origin = t
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.DidGrantPermission = this._grantedPermissions,
            e.Origin = s[this._origin],
            e
        }
    }
    ;
    t.PhoneNumberDiscoverabilityPrivacyEvent = class extends a {
        constructor(e, t, i) {
            super(o.PhoneDiscoverability),
            this._grantedPermissions = e,
            this._origin = t,
            this._error = i
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.DidGrantPermission = this._grantedPermissions || "",
            e.Origin = r[this._origin],
            this._error && (e.ErrorStatusCode = this._error.errorStatusCode,
            e.ErrorMessage = this._error.errorMessage),
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(99)
      , o = i(2)
      , s = i(3)
      , r = i(9);
    t.CallRosterSessionManager = new class {
        createSession(e, t) {
            if (this._session) {
                const t = r.newCauseId();
                s.log(o.LogTraceArea.Calling, "Before creating new session,End old callRosterSession  and  for callId: " + e + " causeId: " + t),
                this.completeSession()
            }
            return this._session = new n.CallRosterSession(e,t),
            this._session
        }
        completeSession() {
            this._session && (s.track(this._session),
            this._session = void 0)
        }
        cancelSession() {
            this._session && (this._session.setIsCanceled(!0),
            this.completeSession())
        }
        getActiveSession() {
            return this._session
        }
        updateCallRosterTelemetry(e, t, i) {
            const n = this.getActiveSession();
            n ? n && i(n) : s.warn(o.LogTraceArea.Calling, "There is no Active callRosterSession for callId: " + e + " causeId: " + t)
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(252)
      , o = (i(314),
    i(0))
      , s = i(13)
      , r = (i(2),
    i(3),
    i(118))
      , a = i(22);
    i(14);
    class l extends s.ComponentBase {
        getViewStyle() {
            return this.props.style
        }
        _handleLayout(e) {
            this.props.onLayout && this.props.onLayout(e)
        }
    }
    class c extends l {
        constructor() {
            super(...arguments),
            this._viewHeight = 0,
            this._onLayout = e=>{
                super._handleLayout(e),
                this._viewHeight = e.height
            }
        }
        _buildState(e, t) {
            return {
                resizeMode: r.getResizeMode(),
                keyboardUpdateInfo: r.getUpdateInfo(),
                isUsingStackNavigation: a.default.isUsingStackNavigationContext()
            }
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            this._keyboardWillChangeFrameSubscription = n.default.onKeyboardEvent(n.VirtualKeyboardEvent.keyboardWillChangeFrame, this._handleKeyboardWillChangeFrame.bind(this))
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._keyboardWillChangeFrameSubscription && this._keyboardWillChangeFrameSubscription.remove()
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            t.keyboardUpdateInfo !== this.state.keyboardUpdateInfo && t.resizeMode === n.KeyboardAwareResizeMode.Default && n.default.onKeyboardLayoutAnimation(t.keyboardUpdateInfo)
        }
        getViewStyle() {
            let e = [super.getViewStyle()];
            return this.state.resizeMode === n.KeyboardAwareResizeMode.Default && e.push(this._getPoppedKeyboardStyle(this.state.keyboardUpdateInfo.height)),
            e
        }
        _getPoppedKeyboardStyle(e) {
            return c._styleCache[e] || (c._styleCache[e] = o.Styles.createViewStyle({
                paddingBottom: e
            }, !1)),
            c._styleCache[e]
        }
        _handleKeyboardWillChangeFrame(e) {
            let t;
            t = e.endCoordinates.screenY >= this._viewHeight || e.endCoordinates.screenY + e.endCoordinates.height < this._viewHeight - 10 ? 0 : this.state.isUsingStackNavigation ? e.endCoordinates.height : this._viewHeight - e.endCoordinates.screenY,
            o.App.getActivationState() !== o.Types.AppActivationState.Active && 0 !== t && this.state.isUsingStackNavigation || r.setUpdateInfo({
                height: t,
                duration: e.duration,
                easing: e.easing
            })
        }
        render() {
            return o.createElement(o.View, Object.assign({}, this.props, {
                onLayout: this._onLayout,
                style: this.getViewStyle()
            }), this.props.children)
        }
    }
    c._styleCache = {};
    t.default = class extends l {
        render() {
            return o.createElement(o.View, Object.assign({}, this.props, {
                style: this.getViewStyle()
            }), this.props.children)
        }
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(36)
      , s = i(7)
      , r = i(2)
      , a = i(3)
      , l = i(19);
    i(59);
    const c = new class {
        constructor() {
            this._orientationList = []
        }
        addOrUpdateOrientationLock(e, t, i=!1) {
            return s.Resolved(void 0)
        }
        addOrUpdateOrientationLockNoTabletCheck(e, t) {
            return s.Resolved(void 0)
        }
        removeOrientationLock(e) {
            const t = n.findIndex(this._orientationList, t=>t.key === e);
            -1 !== t && (a.log(r.LogTraceArea.GenericUnsafe, "MobileOrientationLockManager: Popping orientation entry for " + e),
            this._orientationList.splice(t, 1),
            this._updateOrientationLock())
        }
        _addOrientationListEntry(e) {
            const t = n.findIndex(this._orientationList, t=>t.key === e.key);
            -1 !== t ? (this._orientationList[t] = e,
            a.log(r.LogTraceArea.GenericUnsafe, "MobileOrientationLockManager: Modified old orientation entry - " + e.key)) : (a.log(r.LogTraceArea.GenericUnsafe, "MobileOrientationLockManager: Pushed new orientation entry - " + e.key),
            this._orientationList.push(e))
        }
        _updateOrientationLock() {
            const e = n.last(this._orientationList);
            return e && e.orientation !== o.DeviceOrientation.Unlocked ? (a.log(r.LogTraceArea.GenericUnsafe, "MobileOrientationLockManager: lock orientation " + e.orientation),
            o.default.lockOrientation(e.orientation).then(n.noop, e=>{
                a.warn(r.LogTraceArea.GenericUnsafe, "MobileOrientationLockManager lockOrientation failed: " + l.errorAsString(e))
            }
            )) : (a.log(r.LogTraceArea.GenericUnsafe, "MobileOrientationLockManager: unlocking orientation"),
            o.default.unlockOrientation().then(n.noop, e=>{
                a.warn(r.LogTraceArea.GenericUnsafe, "MobileOrientationLockManager unlockOrientation failed: " + l.errorAsString(e))
            }
            ))
        }
    }
    ;
    e.exports = c
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(334)
      , s = i(18)
      , r = i(39);
    !function(e) {
        e.ShowButton = "show",
        e.ClickButton = "click"
    }(t.SubscriptionUpgradeFlowStep || (t.SubscriptionUpgradeFlowStep = {})),
    function(e) {
        e.InfoScreen = "info_screen",
        e.MainScreen = "main_screen"
    }(t.ContentShowSource || (t.ContentShowSource = {})),
    function(e) {
        e.SubscriptionSearchButton = "SubscriptionSearchButton",
        e.SubscriptionResetSearchButton = "SubscriptionResetSearchButton"
    }(t.SubscriptionSearchComponentClickTarget || (t.SubscriptionSearchComponentClickTarget = {}));
    class a extends r.TelemetryEventBase {
        getEventName() {
            return "s4l_entitlement"
        }
        getAriaTenantTokenOverride() {
            return s.getAriaCommerceTenantToken()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    class l extends r.TelemetryEventBase {
        getEventName() {
            return "s4l_entitlement_polling"
        }
        getAriaTenantTokenOverride() {
            return s.getAriaCommerceTenantToken()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.ServicesFetching = class extends a {
        constructor(e) {
            super(),
            this._servicesFetchingTime = e
        }
        getActionName() {
            return "ServicesFetching"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Duration = this._servicesFetchingTime,
            e
        }
    }
    ;
    t.RatesFetching = class extends a {
        constructor(e) {
            super(),
            this._ratesFetchingTime = e
        }
        getActionName() {
            return "RatesFetching"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Duration = this._ratesFetchingTime,
            e
        }
    }
    ;
    t.OrderPollNotificationReceived = class extends a {
        constructor(e) {
            super(),
            this._reason = e
        }
        getActionName() {
            return "OrderPollNotificationReceived"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Reason = o.EntitlementRequestReason[this._reason],
            e
        }
    }
    ;
    t.OrderNotificationOrEntitlementsUpdated = class extends a {
        constructor(e, t, i, n, o, s) {
            super(),
            this._reason = e,
            this._failed = t,
            this._didBalanceUpdate = i,
            this._didSubscriptionsUpdate = n,
            this._didSkypeNumbersUpdate = o,
            this._consumeTime = s
        }
        getActionName() {
            return "OrderNotificationOrEntitlementsUpdated"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ConsumeTime = this._consumeTime,
            e.DidConsumeFail = this._failed,
            e.DidBalanceUpdate = this._didBalanceUpdate,
            e.DidSubscriptionsUpdate = this._didSubscriptionsUpdate,
            e.DidSkypeNumbersUpdate = this._didSkypeNumbersUpdate,
            e.Reason = o.EntitlementRequestReason[this._reason],
            e
        }
    }
    ;
    t.BalanceStatePollNotificationReceived = class extends l {
        constructor(e) {
            super(),
            this._reason = e
        }
        getActionName() {
            return "BalanceStatePollNotificationReceived"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Reason = o.EntitlementRequestReason[this._reason],
            e
        }
    }
    ;
    t.BalanceStatePollNotificationConsumed = class extends l {
        constructor(e, t, i, n, o, s) {
            super(),
            this._reason = e,
            this._failed = t,
            this._didBalanceUpdate = i,
            this._didSubscriptionsUpdate = n,
            this._didSkypeNumbersUpdate = o,
            this._consumeTime = s
        }
        getActionName() {
            return "BalanceStatePollNotificationConsumed"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ConsumeTime = this._consumeTime,
            e.DidConsumeFail = this._failed,
            e.DidBalanceUpdate = this._didBalanceUpdate,
            e.DidSubscriptionsUpdate = this._didSubscriptionsUpdate,
            e.DidSkypeNumbersUpdate = this._didSkypeNumbersUpdate,
            e.Reason = o.EntitlementRequestReason[this._reason],
            e
        }
    }
    ;
    t.EntitlementIntegrationError = class extends a {
        constructor(e, t, i) {
            super(),
            this._step = e,
            this._description = t,
            this._props = i
        }
        getActionName() {
            return "EntitlementIntegrationError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Step = this._step,
            e.Description = this._description,
            n.assign(e, this._props || {})
        }
    }
    ;
    t.PushEtagExpired = class extends a {
        constructor(e, t) {
            super(),
            this._currentEtag = e,
            this._pushEtag = t,
            this._getEtagDiff = ()=>{
                let e = this._currentEtag.replace(/\D/g, "")
                  , t = this._pushEtag.replace(/\D/g, "")
                  , i = 0;
                for (let n = e.length - 1; n >= 0; n--) {
                    i += (parseInt(e.charAt(n) || "0", 10) - parseInt(t.charAt(n) || "0", 10)) * Math.pow(10, e.length - n - 1)
                }
                return i
            }
        }
        getActionName() {
            return "PushEtagExpired"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CurrentEtag = this._currentEtag,
            e.PushEtag = this._pushEtag,
            e.EtagDiff = String(this._getEtagDiff()),
            e
        }
    }
    ;
    t.ReactivationStep = class extends a {
        constructor(e) {
            super(),
            this._reactivationActionStep = e
        }
        getActionName() {
            return "ReactivationStep"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Step = this._reactivationActionStep,
            e
        }
    }
    ;
    t.BalanceStateNavigation = class extends a {
        constructor(e, t, i) {
            super(),
            this._navigationSource = e,
            this._entitlements = t,
            this._contentShown = i
        }
        getActionName() {
            return "BalanceStateNavigation"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.NavigationSource = this._navigationSource,
            e.EntitlementsCombination = this._entitlements,
            e.ContentShown = this._contentShown,
            e
        }
    }
    ;
    t.BalanceStatePanelComponentClick = class extends a {
        constructor(e) {
            super(),
            this._target = e
        }
        getActionName() {
            return "BalanceStatePanelComponentClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Target = this._target,
            e
        }
    }
    ;
    t.SubscriptionDetailsLinkClick = class extends a {
        constructor(e) {
            super(),
            this._subscriptionId = e
        }
        getActionName() {
            return "SubscriptionDetailsLinkClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.SubscriptionId = this._subscriptionId,
            e
        }
    }
    ;
    t.SubscriptionUpgrade = class extends a {
        constructor(e, t, i, n) {
            super(),
            this._flowStep = e,
            this._originSubscriptionId = t,
            this._upgradeSubscriptionId = i,
            this._minutesLeft = n
        }
        getActionName() {
            return "SubscriptionUpgrade"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Step = this._flowStep,
            e.OriginSubscriptionId = this._originSubscriptionId,
            e.UpgradeSubscriptionId = this._upgradeSubscriptionId,
            e.OriginSubscriptionMinutesLeft = this._minutesLeft,
            e
        }
    }
    ;
    t.SubscriptionSearchComponentClick = class extends a {
        constructor(e, t) {
            super(),
            this._target = e,
            this._countryCode = t
        }
        getActionName() {
            return "SubscriptionSearchComponentClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Target = this._target,
            this._countryCode && (e.SearchedCountry = this._countryCode),
            e
        }
    }
    ;
    t.SubscriptionSearchAction = class extends a {
        constructor(e) {
            super(),
            this._countryCode = e
        }
        getActionName() {
            return "SubscriptionSearchAction"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.SearchedCountry = this._countryCode,
            e
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    var s, r;
    !function(e) {
        e[e.CallVideo = 0] = "CallVideo",
        e[e.CallAudio = 1] = "CallAudio",
        e[e.AddContact = 2] = "AddContact",
        e[e.InterruptScenario = 3] = "InterruptScenario",
        e[e.ViewProfile = 4] = "ViewProfile",
        e[e.OnKeyPressToStartMessage = 5] = "OnKeyPressToStartMessage",
        e[e.MessageAction = 6] = "MessageAction",
        e[e.AddContactFromDiscoverPanel = 7] = "AddContactFromDiscoverPanel",
        e[e.SendMessage = 8] = "SendMessage"
    }(s = t.Actions || (t.Actions = {})),
    function(e) {
        e[e.SearchToConversation = 0] = "SearchToConversation",
        e[e.RecommendationFromRecentsToConversation = 1] = "RecommendationFromRecentsToConversation",
        e[e.RecommendationFromContactsToConversation = 2] = "RecommendationFromContactsToConversation",
        e[e.Unknown = 3] = "Unknown"
    }(r = t.Scenarios || (t.Scenarios = {}));
    class a extends o.TelemetryEventBase {
        constructor(e) {
            super(),
            this._userAction = e
        }
        getEventName() {
            return "people_user_actions"
        }
        getAttributes() {
            let e = super.getAttributes();
            return n.isUndefined(this._userAction.name) || (e.Action = s[this._userAction.name]),
            n.isUndefined(this._userAction.duration) || (e.Duration = this._userAction.duration),
            n.isUndefined(this._userAction.scenario) || (e.Scenario = r[this._userAction.scenario]),
            n.isUndefined(this._userAction.firstSuccessfulSearch) || (e.IsFirstSuccessfulSearch = this._userAction.firstSuccessfulSearch),
            n.each(this._userAction.additionalAttributes, (t,i)=>{
                e[i] = t
            }
            ),
            e
        }
    }
    t.UserActionsTelemetryEvent = a
}
, , , function(e, t, i) {
    "use strict";
    i(33),
    i(1139);
    const n = i(0)
      , o = i(65)
      , s = i(6)
      , r = i(148)
      , a = i(2760)
      , l = (i(58),
    i(10))
      , c = i(2761)
      , d = i(81)
      , u = i(2)
      , g = i(2762)
      , h = i(3)
      , p = i(363)
      , m = i(5)
      , S = i(503)
      , C = i(341)
      , y = i(694)
      , f = i(4)
      , _ = i(132)
      , b = i(32)
      , v = i(17)
      , T = (i(44),
    i(306))
      , P = (i(19),
    i(41))
      , A = i(8)
      , k = i(18)
      , I = i(23)
      , w = i(15)
      , N = i(12)
      , M = i(109)
      , E = i(92)
      , x = i(1053)
      , D = i(35)
      , L = m.lazyProperties({
        dialog: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        headerText: ()=>n.Styles.createTextStyle({
            paddingTop: 30,
            paddingBottom: 10,
            marginLeft: 20
        }),
        textInputContainer: ()=>n.Styles.createViewStyle({
            borderRadius: 10,
            marginLeft: 20,
            marginRight: 20
        }),
        textInput: ()=>n.Styles.createTextInputStyle({
            padding: 6,
            borderRadius: 10,
            font: I.font.uiDisplayRegular,
            fontSize: I.controlFontSize.body,
            wordBreak: "break-word",
            backgroundColor: A.Color.transparent,
            height: 180,
            textAlignVertical: "top"
        }),
        buttonContainer: ()=>n.Styles.createViewStyle({
            alignItems: "stretch"
        }),
        sendButton: ()=>n.Styles.createButtonStyle({
            marginLeft: 20,
            marginRight: 20,
            marginTop: 10
        }),
        checkboxAndTextContainer: ()=>n.Styles.createViewStyle({
            marginLeft: 20,
            justifyContent: "center",
            marginBottom: 16
        }),
        checkboxView: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignSelf: "flex-start",
            paddingTop: 6
        }),
        checkboxLabel: ()=>n.Styles.createTextStyle({
            paddingTop: 4,
            flex: -1,
            marginLeft: -4
        }),
        linksContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignItems: "flex-end",
            justifyContent: "center",
            flexDirection: "row",
            marginBottom: 20,
            marginTop: 50
        }),
        linkDivider: ()=>n.Styles.createTextStyle({
            marginLeft: 8,
            marginRight: 8
        })
    });
    class R extends N.default {
        constructor() {
            super(...arguments),
            this._openTerms = ()=>{
                S.openTerms()
            }
            ,
            this._openPrivacy = ()=>{
                S.openPrivacy()
            }
            ,
            this._onScrollViewRef = e=>{
                this._scrollView = e || void 0
            }
            ,
            this._onFocus = e=>{
                this._scrollView && this._scrollView.setScrollTop(100, !1)
            }
            ,
            this._onPressSendButton = e=>{
                e.stopPropagation(),
                this._sendProblemReport()
            }
            ,
            this._onCancelButtonPress = e=>{
                e.stopPropagation(),
                y.LoadingDialog.dismiss("reportingAProblem", this._getRootViewId())
            }
            ,
            this._onChangeText = e=>{
                this.setState({
                    problemText: e
                })
            }
            ,
            this._onPressAttachLogsCheckboxButton = e=>{
                e.stopPropagation(),
                this.setState({
                    isAttachLogsAndScreenshotChecked: !this.state.isAttachLogsAndScreenshotChecked
                })
            }
            ,
            this._onPressShakeToSendFeedbackCheckboxButton = e=>{
                e.stopPropagation(),
                this.setState({
                    isShakeAndSendChecked: !this.state.isShakeAndSendChecked
                }),
                b.default.setUserPreferencesLocal({
                    disableShakeAndSend: this.state.isShakeAndSendChecked
                })
            }
            ,
            this._onBack = ()=>(this._dismiss(),
            h.log(u.LogTraceArea.HardwareBackButton, "goBack: true componentId: ReportAProblemDialog"),
            !0),
            this._dismiss = ()=>{
                c.default.closeModel(this._getRootViewId())
            }
        }
        static _showReportProblemDialog(e, t) {
            h.log(u.LogTraceArea.BRB, "Showing feedback dialog."),
            this._showReportAProblemDialogHelper(t, void 0, e)
        }
        static canReportFeedback(e) {
            return e || s.default.getOnboardingFeatures().features.enableReportProblemDirectly || s.default.getOnboardingFeatures().enableReportProblemViaBot
        }
        static reportProblem(e, t, i, n) {
            s.default.getOnboardingFeatures().features.enableReportProblemDirectly ? this._showReportProblemDialog(i, t) : s.default.getOnboardingFeatures().enableReportProblemViaBot ? g.showFeedbackDialog(t, i, n) : e && this.openFeedbackUrl(s.default.getConfigSettings().feedbackAndProblemGoParam.problem, f.getString("ReportAProblemDialog.Title"), t, !0)
        }
        static openFeedbackUrl(e, t, i, n=!1) {
            const o = e
              , r = !D.default.isUrlValid(o);
            let a = D.default.addUrlParameter(o, "lang", f.getLocale(), r);
            a = D.default.addUrlParameter(a, "p", k.getSkypePlatformId().toString(), r),
            a = D.default.addUrlParameter(a, "v", k.getAppVersion(), r),
            a = D.default.addUrlParameter(a, "eTag", encodeURIComponent(s.default.getCachedEcsConfigEtag()), r),
            a = D.default.addUrlParameter(a, "e", x.UIFactor[x.UIFactorHelper.getUIFactor()], r),
            a = D.default.addUrlParameter(a, "theme", M.Theme[E.colorTheme()], r),
            a = T.addSsoFlagToUrl(a, r);
            let l = {};
            n && (l = {
                tcg: this._triggerULUploadAndGetCorrelationId()
            }),
            v.navigateToHelpAndFeedbackLink(a, "", t, i, l)
        }
        static _triggerULUploadAndGetCorrelationId() {
            const e = k.getSessionId() + "_" + Date.now();
            return h.log(u.LogTraceArea.SkypeFeedback, "SendFeedback: log submitting event. logCorrelationId: " + e),
            e
        }
        static _showReportAProblemDialogHelper(e, t, i) {
            const o = n.createElement(R, {
                screenshotUri: t,
                vsoTags: i
            });
            d.dismissAll(),
            c.default.displayModalWithConfig({
                title: f.getString("ReportAProblemDialog.Title"),
                content: o,
                isPopup: !0,
                modalHeight: 596,
                modalWidth: 480,
                rootViewId: e
            })
        }
        _buildState(e, t) {
            let i = {};
            return t && (i.isAttachLogsAndScreenshotChecked = s.default.getConfigSettings().feedback.sendLogsByDefault,
            i.isShakeAndSendChecked = !b.default.isShakeAndSendDisabled(),
            i.problemText = ""),
            i
        }
        componentDidMount() {
            super.componentDidMount(),
            r.subscribe(this._onBack)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            r.unsubscribe(this._onBack)
        }
        render() {
            return n.createElement(p.default, {
                style: [L.dialog, this._themeStyles.primaryBackgroundColorStyle]
            }, void 0, n.createElement(n.ScrollView, {
                ref: this._onScrollViewRef,
                keyboardShouldPersistTaps: !0
            }, n.createElement(w.Header, {
                size: 4,
                style: L.headerText,
                numberOfLines: 2
            }, f.getString("ReportAProblemDialog.Header")), n.createElement(n.View, {
                style: L.checkboxAndTextContainer
            }, n.createElement(n.View, {
                style: L.checkboxView,
                onPress: this._onPressAttachLogsCheckboxButton,
                accessibilityTraits: n.Types.AccessibilityTrait.None,
                accessibilityLabel: this._getCheckboxAccessibilityLabel(f.getString("ReportAProblemDialog.AttachLogsAndScreenCheckbox"), this.state.isAttachLogsAndScreenshotChecked)
            }, n.createElement(C, {
                isOn: this.state.isAttachLogsAndScreenshotChecked
            }), n.createElement(w.BodyText, {
                style: L.checkboxLabel
            }, f.getString("ReportAProblemDialog.AttachLogsAndScreenCheckbox"))), void 0), n.createElement(n.View, {
                style: [L.textInputContainer, this._themeStyles.rowHighlightViewStyle]
            }, n.createElement(n.TextInput, {
                autoCorrect: !0,
                value: this.state.problemText,
                style: [L.textInput, this._themeStyles.primaryTextColorStyle],
                multiline: !0,
                onFocus: this._onFocus,
                onChangeText: this._onChangeText,
                placeholder: f.getString("ReportAProblemDialog.Placeholder"),
                placeholderTextColor: this._themeColors.secondaryTextColor,
                autoCapitalize: "sentences",
                maxLength: 1e3,
                clearButtonMode: "never"
            })), n.createElement(n.View, {
                style: L.buttonContainer
            }, n.createElement(P, {
                style: L.sendButton,
                buttonStyle: l.SXButtonStyle.ThemeFill,
                onPress: this._onPressSendButton,
                disabled: 0 === this.state.problemText.length,
                title: f.getString("ReportAProblemDialog.SendButton")
            })), n.createElement(n.View, {
                style: L.linksContainer
            }, n.createElement(n.Button, {
                onPress: this._openTerms
            }, n.createElement(w.Subtitle, null, f.getString("ReportAProblemDialog.TermsOfUseButton"))), n.createElement(w.Subtitle, {
                style: L.linkDivider
            }, "|"), n.createElement(n.Button, {
                onPress: this._openPrivacy
            }, n.createElement(w.Subtitle, null, f.getString("ReportAProblemDialog.PrivacyAndCookiePolicyButton"))))))
        }
        _getCheckboxAccessibilityLabel(e, t) {
            const i = this._getCheckboxCheckedState(t);
            return f.getString("ReportAProblemDialog.AccLabelCheckbox", {
                checkboxTitle: e,
                state: i
            })
        }
        _getCheckboxCheckedState(e) {
            return e ? f.getString("ReportAProblemDialog.AccLabelCheckboxChecked") : f.getString("ReportAProblemDialog.AccLabelCheckboxUnchecked")
        }
        _sendProblemReport() {
            this._dismiss(),
            y.LoadingDialog.show({
                dialogId: "reportingAProblem",
                dialogText: f.getString("ReportAProblemDialog.ReportingProblem"),
                showActivityIndicator: !0,
                buttonText: f.getString("Global.CancelLabel"),
                onButtonPress: this._onCancelButtonPress,
                showCancelButton: !0
            }, this._getRootViewId());
            let e = {
                ReportTitle: this.state.problemText,
                ReportDescription: this.state.problemText,
                feedbackSendLogsAndScreenshot: this.state.isAttachLogsAndScreenshotChecked,
                screenShotUri: this.props.screenshotUri,
                vsoTags: this.props.vsoTags
            };
            a.default.sendBRB(e).then(()=>{
                _.default.scheduleTextMessage(f.getString("ReportAProblemDialog.ProblemReportedSuccessfully"), void 0, this._getRootViewId())
            }
            , e=>{
                o.default.showErrorAlert(e, this._getRootViewId())
            }
            ).finally(()=>{
                y.LoadingDialog.dismiss("reportingAProblem", this._getRootViewId())
            }
            )
        }
    }
    e.exports = R
}
, , , function(e, t, i) {
    "use strict";
    const n = i(26)
      , o = i(1)
      , s = i(13);
    let r = class extends s.StoreBase {
        constructor() {
            super(...arguments),
            this._lastPendingAnimationHandle = 1,
            this._pendingAnimations = []
        }
        isAnimationPending() {
            return this._pendingAnimations.length > 0
        }
        createPendingAnimation() {
            const e = this._lastPendingAnimationHandle++
              , t = {
                handle: e,
                startTime: Date.now()
            };
            this._pendingAnimations.push(t),
            1 === this._pendingAnimations.length && (s.StoreBase.pushTriggerBlock(),
            this.trigger());
            o.head(this._pendingAnimations);
            return e
        }
        clearPendingAnimation(e) {
            this._pendingAnimations = o.filter(this._pendingAnimations, t=>t.handle !== e),
            0 === this._pendingAnimations.length && (s.StoreBase.popTriggerBlock(),
            this.trigger())
        }
    }
    ;
    n.__decorate([s.autoSubscribe], r.prototype, "isAnimationPending", null),
    r = n.__decorate([s.AutoSubscribeStore], r);
    let a = new r;
    e.exports = a
}
, , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(776);
    t.lazyStartupable = function(e) {
        return n.lazyNew(e)
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(164)
      , s = (i(6),
    i(16))
      , r = i(225)
      , a = i(38)
      , l = i(32)
      , c = i(97);
    t.default = class {
        static isSplitViewSupported() {
            return o.default.splitViewSupported
        }
        static getWindowPreferences(e) {
            return l.default.getUserPreferencesForConversationLocal(e).windowPreferences
        }
        static getDefaultWindowPreferences() {
            return {
                position: c.SplitViewDefaultWindowDimensions,
                isMaximized: !1
            }
        }
        static getDefaultModalPreferences() {
            return {
                position: {
                    width: r.DefaultHeight,
                    height: r.DefaultWidth,
                    x: void 0,
                    y: void 0
                },
                isMaximized: !1
            }
        }
        static getAuxiliaryWindowPreferences(e) {
            var t;
            return null === (t = l.default.getUserPreferencesLocal().auxiliaryWindowPrefs) || void 0 === t ? void 0 : t[e]
        }
        static storeAuxiliaryWindowPreferences(e, t) {
            if (!t)
                return;
            const i = l.default.getUserPreferencesLocal().auxiliaryWindowPrefs || {}
              , o = !n.isEmpty(i) && i[e] ? i[e] : {};
            a.default(o, t) || l.default.setUserPreferencesLocal({
                auxiliaryWindowPrefs: {
                    [e]: t
                }
            })
        }
        static storeWindowPreferences(e, t, i) {
            if (!t || !s.isMri(e))
                return;
            const o = l.default.getUserPreferencesLocal().conversationPrefs || {}
              , r = !n.isEmpty(o) && o[e] ? o[e] : {}
              , c = {
                position: t,
                isMaximized: i
            };
            a.default(r.windowPreferences, c) || l.default.setUserPreferencesLocal({
                conversationPrefs: {
                    [e]: {
                        windowPreferences: c
                    }
                }
            })
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(178)
      , s = i(7)
      , r = i(6)
      , a = i(2)
      , l = i(3);
    var c;
    !function(e) {
        e[e.AudioMessageComposer = 0] = "AudioMessageComposer",
        e[e.AudioPlayer = 1] = "AudioPlayer",
        e[e.CapturePanel = 2] = "CapturePanel",
        e[e.CapturePreview = 3] = "CapturePreview",
        e[e.Moji = 4] = "Moji",
        e[e.SwiftVideo = 5] = "SwiftVideo",
        e[e.VideoViewer = 6] = "VideoViewer"
    }(c = t.AudioManagerSource || (t.AudioManagerSource = {}));
    t.default = class {
        constructor(e) {
            this._source = e,
            this._requestSequence = 0
        }
        static initialize() {
            o.default.setConfig({
                cmc: r.default.getS4LCMCFeatures(),
                audio: r.default.getSkypeAudioLibraryFeatures()
            }),
            r.default.subscribe(()=>{
                o.default.setConfig({
                    cmc: r.default.getS4LCMCFeatures(),
                    audio: r.default.getSkypeAudioLibraryFeatures()
                })
            }
            )
        }
        hasToken() {
            return !n.isUndefined(this._token)
        }
        requestMode(e, t) {
            const i = ++this._requestSequence;
            let r, d;
            return n.isUndefined(this._token) ? (r = "request(" + e + ")",
            d = o.default.requestMode(e, t)) : (r = "exchange(" + this._token + ", " + e + ")",
            d = o.default.exchangeMode(this._token, e, t)),
            l.log(a.LogTraceArea.AudioManagerClient, "(" + c[this._source] + ").requestMode calling AudioManager." + r + ". causeId: " + t),
            d.then(e=>i === this._requestSequence ? (l.log(a.LogTraceArea.AudioManagerClient, "(" + c[this._source] + ").requestMode completed with token " + e + ". causeId: " + t),
            this._token = e,
            s.Resolved(!0)) : (l.log(a.LogTraceArea.AudioManagerClient, "(" + c[this._source] + ").requestMode completed with token " + e + " - aborting because of subsequent request. causeId: " + t),
            o.default.release(e, t),
            s.Resolved(!1)))
        }
        release(e) {
            this._requestSequence++,
            l.log(a.LogTraceArea.AudioManagerClient, "(" + c[this._source] + ").release(" + this._token + "). causeId: " + e),
            n.isUndefined(this._token) || (o.default.release(this._token, e),
            this._token = void 0)
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2565)
      , o = {
        key: "default",
        parameters: {
            color: "#000000",
            rgbColor: "[0, 0, 0, 0]"
        }
    };
    class s {
        get SPLASH_LOADER() {
            return {
                key: "SPLASH_LOADER",
                source: n.SPLASH_LOADER,
                intrinsicSize: {
                    width: 375,
                    height: 375
                }
            }
        }
        get SPLASH_LOADER_NEXT() {
            return {
                key: "SPLASH_LOADER_NEXT",
                source: n.SPLASH_LOADER_NEXT,
                intrinsicSize: {
                    width: 160,
                    height: 160
                }
            }
        }
        get CAPTURE_PHOTO() {
            return {
                key: "CAPTURE_PHOTO",
                source: n.CAPTURE_PHOTO,
                intrinsicSize: {
                    width: 117,
                    height: 117
                }
            }
        }
        get CAPTURE_RECORD_PROGRESS_60_SECONDS() {
            return {
                key: "CAPTURE_RECORD_PROGRESS_60_SECONDS",
                source: n.CAPTURE_RECORD_PROGRESS_60_SECONDS,
                intrinsicSize: {
                    width: 80,
                    height: 80
                }
            }
        }
        get CIRCLE_SPINNER() {
            return {
                key: "CIRCLE_SPINNER",
                source: n.CIRCLE_SPINNER,
                defaultTemplateContext: o,
                intrinsicSize: {
                    width: 200,
                    height: 200
                }
            }
        }
        get CIRCLE_SPINNER_80() {
            return {
                key: "CIRCLE_SPINNER_80",
                source: n.CIRCLE_SPINNER_80,
                defaultTemplateContext: o,
                intrinsicSize: {
                    width: 80,
                    height: 80
                }
            }
        }
        get CIRCLE_SPINNER_40() {
            return {
                key: "CIRCLE_SPINNER_40",
                source: n.CIRCLE_SPINNER_40,
                defaultTemplateContext: o,
                intrinsicSize: {
                    width: 40,
                    height: 40
                }
            }
        }
        get CIRCLE_STEP0() {
            return {
                key: "CIRCLE_STEP0",
                source: n.CIRCLE_STEP0,
                defaultTemplateContext: o,
                intrinsicSize: {
                    width: 200,
                    height: 200
                }
            }
        }
        get CIRCLE_STEP1() {
            return {
                key: "CIRCLE_STEP1",
                source: n.CIRCLE_STEP1,
                defaultTemplateContext: o,
                intrinsicSize: {
                    width: 200,
                    height: 200
                }
            }
        }
        get CIRCLE_STEP2() {
            return {
                key: "CIRCLE_STEP2",
                source: n.CIRCLE_STEP2,
                defaultTemplateContext: o,
                intrinsicSize: {
                    width: 200,
                    height: 200
                }
            }
        }
        get CIRCLE_STEP3() {
            return {
                key: "CIRCLE_STEP3",
                source: n.CIRCLE_STEP3,
                defaultTemplateContext: o,
                intrinsicSize: {
                    width: 200,
                    height: 200
                }
            }
        }
        get CIRCLE_STEP4() {
            return {
                key: "CIRCLE_STEP4",
                source: n.CIRCLE_STEP4,
                defaultTemplateContext: o,
                intrinsicSize: {
                    width: 200,
                    height: 200
                }
            }
        }
        get PAGINATION() {
            return {
                key: "PAGINATION",
                source: n.PAGINATION,
                intrinsicSize: {
                    width: 20,
                    height: 20
                }
            }
        }
        get ONBOARDING_SYNC_ADDRESSBOOK() {
            return {
                key: "ONBOARDING_SYNC_ADDRESSBOOK",
                source: n.ONBOARDING_SYNC_ADDRESSBOOK,
                intrinsicSize: {
                    width: 375,
                    height: 300
                }
            }
        }
        get CELEBRATION_ICBC() {
            return {
                key: "CELEBRATION_ICBC",
                source: n.CELEBRATION_ICBC,
                intrinsicSize: {
                    width: 2500,
                    height: 2e3
                }
            }
        }
        get CELEBRATION_ICBC_PORTRAIT() {
            return {
                key: "CELEBRATION_ICBC_PORTRAIT",
                source: n.CELEBRATION_ICBC_PORTRAIT,
                intrinsicSize: {
                    width: 750,
                    height: 1334
                }
            }
        }
    }
    t.SXAnimations = s,
    t.default = new s
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(7)
      , a = i(48)
      , l = i(675)
      , c = i(566)
      , d = i(141)
      , u = i(21);
    let g = class extends s.StoreBase {
        constructor() {
            super(),
            this._fileTrackerMetadata = {},
            this._backgroundEffectFileTrackerMetadata = {},
            this._startupDone = !1,
            this.getBackgroundEffectPrefix = e=>`${l.BACKGROUND_EFFECT_FILE_PREFIX}${e}`,
            this.removeTrackedFile = e=>{
                this._removeFile(e)
            }
            ,
            this._removeFile = e=>{
                a.default.removeFileTrackerMetadata([e]),
                delete this._fileTrackerMetadata[e],
                e.startsWith(l.BACKGROUND_EFFECT_FILE_PREFIX) && delete this._backgroundEffectFileTrackerMetadata[e],
                this.trigger(e)
            }
            ,
            u.RegisterStartupable(this, "FileDownloadStore")
        }
        startup() {
            let e = [];
            return d.default.queueIdleTask("FileDownloadStore", d.TaskTypeFlags.CpuIntensive, ()=>{
                a.default.getAllFileTrackerMetadata().then(t=>{
                    r.all(o.map(t, t=>{
                        const i = {
                            fileUri: t.localUri,
                            fileSizeInBytes: t.sizeInBytes,
                            lastUpdatedTime: t.lastUpdatedTimestamp
                        };
                        return r.fromThenable(c.fileExists(i).then(i=>{
                            i ? (this._addFileInformationEntry(t),
                            e.push(t.id)) : a.default.removeFileTrackerMetadata([t.id])
                        }
                        ))
                    }
                    )).then(()=>{
                        this._startupDone = !0,
                        this.trigger(e.concat(o.keys(this._fileTrackerMetadata)))
                    }
                    )
                }
                )
            }
            ),
            r.Resolved()
        }
        _addFileInformationEntry(e, t=!1) {
            var i;
            this._fileTrackerMetadata[e.id] || ((null === (i = e.id) || void 0 === i ? void 0 : i.startsWith(l.BACKGROUND_EFFECT_FILE_PREFIX)) && (this._backgroundEffectFileTrackerMetadata[e.id] = e),
            this._fileTrackerMetadata[e.id] = e,
            this._startupDone && this.trigger(e.id),
            t && a.default.putFileTrackerMetadata([e]))
        }
        canTrackFiles() {
            return !1
        }
        getLocalUri(e) {
            if (this._startupDone && e) {
                const t = this._fileTrackerMetadata[e];
                if (t) {
                    const i = {
                        fileUri: t.localUri,
                        fileSizeInBytes: t.sizeInBytes,
                        lastUpdatedTime: t.lastUpdatedTimestamp
                    };
                    return c.fileExists(i).then(t=>{
                        t || this._removeFile(e)
                    }
                    ),
                    t.localUri
                }
            }
        }
        getAllBackgroundEffectsFiles() {
            return this._backgroundEffectFileTrackerMetadata
        }
        addFileInformationForTracking(e, t, i, n) {
            t && c.getFileInformation(t).then(o=>{
                if (!o)
                    return;
                const s = e.startsWith(l.BACKGROUND_EFFECT_FILE_PREFIX) ? this.getBackgroundEffectPrefix(t) : e
                  , r = Object.assign({
                    localFileName: i,
                    localUri: t,
                    sizeInBytes: o.fileSizeInBytes,
                    id: s,
                    lastUpdatedTimestamp: o.lastUpdatedTime
                }, n);
                this._addFileInformationEntry(r, !0)
            }
            )
        }
    }
    ;
    n.__decorate([s.disableWarnings], g.prototype, "canTrackFiles", null),
    n.__decorate([s.autoSubscribe, n.__param(0, s.key)], g.prototype, "getLocalUri", null),
    n.__decorate([s.autoSubscribe], g.prototype, "getAllBackgroundEffectsFiles", null),
    g = n.__decorate([s.AutoSubscribeStore], g),
    t.default = new g
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(27)
      , s = i(5)
      , r = i(341)
      , a = i(4)
      , l = i(54)
      , c = i(22)
      , d = i(1542)
      , u = i(23)
      , g = i(11)
      , h = i(14)
      , p = i(15)
      , m = i(12)
      , S = i(457);
    var C;
    !function(e) {
        e[e.Default = 1] = "Default",
        e[e.Toggle = 2] = "Toggle",
        e[e.Checkbox = 3] = "Checkbox",
        e[e.Alert = 4] = "Alert"
    }(C = t.CustomActionMenuRowType || (t.CustomActionMenuRowType = {}));
    const y = s.lazyProperties({
        frameStackNav: ()=>n.Styles.createViewStyle({
            minHeight: 80
        }),
        frameCompositeNav: ()=>n.Styles.createViewStyle({
            minHeight: 60
        }),
        innerContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignItems: "center",
            marginHorizontal: 10,
            paddingVertical: 10
        }),
        innerContainerBottomBorder: ()=>n.Styles.createViewStyle({
            borderBottomWidth: 1
        }),
        innerContainerDesktop: ()=>n.Styles.createViewStyle({
            marginHorizontal: 15
        }),
        icon: ()=>n.Styles.createTextStyle({
            paddingRight: 14,
            textAlign: "center"
        }),
        accessoryIcon: ()=>n.Styles.createTextStyle({
            marginLeft: 8
        }),
        image: ()=>n.Styles.createViewStyle({
            paddingRight: 14,
            width: g.IconSize.size24,
            height: g.IconSize.size24
        }),
        titleRow: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center"
        }),
        subtitle: ()=>n.Styles.createTextStyle({
            lineHeight: 22
        }),
        rightSideText: ()=>n.Styles.createTextStyle({
            flexShrink: 0,
            textAlign: "right"
        }),
        newLabel: ()=>n.Styles.createTextStyle({
            marginRight: 5,
            marginLeft: -2
        })
    });
    class f extends m.default {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                this.props.onRowPress && this.props.onRowPress(this.props.itemId)
            }
            ,
            this._onContainerRef = e=>{
                var t, i;
                this._containerRef = e || void 0,
                null === (i = (t = this.props).onRef) || void 0 === i || i.call(t, this._containerRef)
            }
            ,
            this._onMouseEnter = ()=>{
                this.isComponentMounted() && (this.state.isHovered || this.setState({
                    isHovered: !0
                }))
            }
            ,
            this._onMouseLeave = ()=>{
                this.isComponentMounted() && this.state.isHovered && this.setState({
                    isHovered: !1
                })
            }
        }
        _buildState(e, t) {
            return {
                isUsingStackNav: c.default.isUsingStackNavigationContext(),
                userColor: l.getPrimaryColor()
            }
        }
        render() {
            const e = this.props.rowType === C.Alert && !this._useAccessibleTheme();
            let t;
            if (this.props.subtitleText || this.props.keepSpaceForSubtitle) {
                const i = this.state.isUsingStackNav ? p.BodyText : p.Caption
                  , o = [y.subtitle, h.noncollapsibleView];
                this._useAccessibleTheme() ? o.push(this._themeStyles.secondaryTextColorStyle) : e || this.props.treatAsLink ? o.push(n.Styles.createTextStyle({
                    color: this.state.userColor
                }, !1)) : o.push(this._themeStyles.secondaryTextColorStyle);
                const s = {
                    style: o,
                    disableThemeSubscription: !0,
                    size: this.state.isUsingStackNav ? p.BodyTextSize.SmallDeprecated : void 0
                };
                t = n.createElement(i, Object.assign({}, s), this.props.subtitleText)
            }
            const i = this._showRightSideText() ? n.createElement(p.Caption, {
                style: y.rightSideText
            }, this.props.rightSideText) : void 0;
            let s;
            if (this.props.rowType === C.Checkbox)
                s = n.createElement(r, {
                    isOn: !!this.props.isSelected
                });
            else if (this.props.rowType === C.Toggle)
                s = n.createElement(S.default, {
                    isOn: !!this.props.isSelected,
                    disableInteraction: !!this.props.disabled,
                    overlayColorAndroid: this.props.toggleOverlayColorAndroid
                });
            else if (this.props.accessoryIcon) {
                let t = e ? this.state.userColor : this._themeColors.secondaryTextColor;
                this.props.accessoryIconColor && (t = this.props.accessoryIconColor),
                s = n.createElement(o.default, {
                    style: y.accessoryIcon,
                    size: this.props.accessoryIconSize || g.IconSize.size20,
                    color: t,
                    icon: this.props.accessoryIcon
                })
            }
            const l = [];
            this.props.rowHeight ? l.push(n.Styles.createViewStyle({
                height: this.props.rowHeight
            }, !1)) : l.push(this.state.isUsingStackNav ? y.frameStackNav : y.frameCompositeNav),
            this.state.isHovered && l.push(this.props.hoverStyle ? this.props.hoverStyle : this._themeStyles.rowHoverViewStyle),
            this.props.style && l.push(this.props.style);
            const c = [y.innerContainer];
            if (!this.props.hideBorder && !e) {
                const e = this.props.borderColor ? n.Styles.createViewStyle({
                    borderColor: this.props.borderColor
                }, !1) : this._themeStyles.dividerBorderColorStyle;
                c.push(e, y.innerContainerBottomBorder)
            }
            this.state.isUsingStackNav || c.push(y.innerContainerDesktop),
            this.props.containerStyleOverride && c.push(this.props.containerStyleOverride);
            const m = [h.transparentBackground, h.flexNegativeOne];
            e && !t ? m.push(this.state.isUsingStackNav ? u.fontStyle.body : u.fontStyle.caption) : this.state.isUsingStackNav ? m.push(u.fontStyle.secondaryButton) : this.props.titleStyle && m.push(this.props.titleStyle);
            const f = e ? n.Styles.createTextStyle({
                color: this.state.userColor
            }, !1) : this._themeStyles.primaryTextColorStyle;
            m.push(this.props.titleTextColor ? n.Styles.createTextStyle({
                color: this.props.titleTextColor
            }, !1) : f);
            const _ = this.props.rowType && this.props.rowType === C.Toggle && this.props.isNew && n.createElement(d.default, {
                style: y.newLabel
            });
            let b;
            if (this.props.icon) {
                const t = _ ? [y.icon, n.Styles.createTextStyle({
                    paddingRight: 8
                }, !1)] : y.icon;
                let i = e ? this.state.userColor : this._themeColors.primaryIconColor;
                this.props.iconColor && (i = this.props.iconColor),
                b = n.createElement(o.default, {
                    style: t,
                    size: this.props.iconSize || g.IconSize.size24,
                    color: i,
                    icon: this.props.icon
                })
            } else
                this.props.imageSource && (b = n.createElement(n.Image, {
                    style: y.image,
                    source: this.props.imageSource
                }));
            const v = this.props.onRowPress ? n.Button : n.View;
            let T, P = this.props.accessibilityLabel;
            if (!this._useLinkTrait() && this.props.treatAsLink && (P = P || this.props.titleText + (this.props.subtitleText ? ", " + this.props.subtitleText : ""),
            P && (P += ", " + a.getString("Browser.OpenUrlInBrowserTitle"))),
            this.props.isSelected && !this.props.suppressSelectedAccessibilityLabel && (P += ", " + a.getString("Global.SelectedAccessibilityLabel")),
            e) {
                const e = [h.absoluteFill, n.Styles.createViewStyle({
                    backgroundColor: this.state.userColor,
                    opacity: .2
                }, !1)];
                T = n.createElement(n.View, {
                    style: e
                })
            }
            const A = this.props.titleText ? n.createElement(n.Text, {
                style: m
            }, this.props.titleText) : void 0;
            return n.createElement(v, {
                style: l,
                ref: this._onContainerRef,
                onPress: this.props.onRowPress ? this._onPress : void 0,
                accessibilityLabel: this.props.accessibilityLabel,
                accessibilityTraits: this._useLinkTrait() ? n.Types.AccessibilityTrait.Link : void 0,
                disabled: !!this.props.disabled,
                title: this.props.tooltip
            }, T, n.createElement(n.View, {
                style: c,
                onMouseEnter: this._onMouseEnter,
                onMouseLeave: this._onMouseLeave
            }, b, _, n.createElement(n.View, {
                style: h.flexOne
            }, n.createElement(n.View, {
                style: y.titleRow
            }, A, i), t), s))
        }
        requestFocus() {
            this._containerRef && this._containerRef.requestFocus()
        }
        _showRightSideText() {
            return this.props.rightSideText && (!this.props.rowType || this.props.rowType === C.Default || this.props.rowType === C.Alert)
        }
        _useLinkTrait() {
            return this.props.treatAsLink && !0
        }
        static getMenuItemHeight() {
            return 1 + (c.default.isUsingStackNavigationContextNoSubscription() ? 80 : 60)
        }
    }
    t.default = f,
    f.buildRow = e=>n.createElement(f, Object.assign({}, e))
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(572)
      , s = i(2)
      , r = i(716)
      , a = i(39);
    var l, c;
    !function(e) {
        e[e.Photo = 0] = "Photo",
        e[e.Video = 1] = "Video",
        e[e.Document = 2] = "Document",
        e[e.Whiteboard = 3] = "Whiteboard"
    }(l = t.MediaType || (t.MediaType = {})),
    function(e) {
        e[e.Camera = 0] = "Camera",
        e[e.Gallery = 1] = "Gallery"
    }(c = t.CameraMode || (t.CameraMode = {}));
    class d extends a.TelemetryEventBase {
        constructor() {
            super()
        }
        getEventName() {
            return "camera_action"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            r.isOfficeLensTelemetryActive() && (e.IsOfficeLens = !0),
            e
        }
    }
    t.NavigationCaptureScreen = class extends d {
        constructor(e, t) {
            super(),
            this._navFrom = e,
            this._isGroupConversation = t
        }
        getActionName() {
            return "NavigationCaptureScreen"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                NavFrom: s.CaptureNavFrom[this._navFrom],
                GroupConversation: this._isGroupConversation
            })
        }
    }
    ;
    t.CameraVisibleTime = class extends d {
        constructor(e, t) {
            super(),
            this._startTime = e,
            this._endTime = t
        }
        getActionName() {
            return "CameraVisibleTime"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                VisibleTimeMs: this._endTime - this._startTime
            })
        }
    }
    ;
    t.SprinklesOverlayRequested = class extends d {
        getActionName() {
            return "SprinklesOverlayRequested"
        }
    }
    ;
    t.MarkupAdded = class extends d {
        constructor(e, t, i, n, o, s, r, a, l, c) {
            super(),
            this._entryPoint = e,
            this._ink = t,
            this._text = i,
            this._stickers = n,
            this._overlay = o,
            this._lens = s,
            this._filter = r,
            this._stickerIds = a,
            this._crop = l,
            this._rotate = c
        }
        getActionName() {
            return "MarkupAdded"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.EntryPoint = s.PostSource[this._entryPoint],
            e.Ink = this._ink || !1,
            e.Text = this._text || !1,
            e.Sticker = this._stickers || !1,
            e.Overlay = this._overlay || !1,
            e.Lens = this._lens || !1,
            e.Filter = this._filter || !1,
            e.StickerIds = this._stickerIds ? this._stickerIds.join() : "",
            this._crop && (e.Crop = this._crop),
            this._rotate && (e.Rotate = this._rotate),
            e
        }
    }
    ;
    t.VideoReencode = class extends d {
        constructor(e) {
            super(),
            this._videoDuration = e,
            this._startTime = 0,
            this._reencodeDuration = 0,
            this._success = !1,
            this._error = "",
            this._startTime = Date.now()
        }
        getActionName() {
            return "VideoReencode"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Duration: this._reencodeDuration,
                Success: this._success,
                VideoDuration: this._videoDuration,
                Error: this._error
            })
        }
        setStatus(e, t="") {
            this._success = e,
            this._error = t,
            this._reencodeDuration = this._startTime > 0 ? Date.now() - this._startTime : 0
        }
    }
    ;
    t.SprinklesStep = class extends d {
        constructor(e, t, i) {
            super(),
            this._step = e,
            this._duration = t,
            this._statusCode = i
        }
        getActionName() {
            return "SprinklesStep"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Step: s.SprinklesSteps[this._step],
                Duration: this._duration,
                StatusCode: this._statusCode || ""
            })
        }
    }
    ;
    class u extends d {
        constructor(e) {
            super(),
            this._source = e
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Source: this._source
            })
        }
    }
    t.CameraFailureEvent = class extends u {
        constructor(e, t, i) {
            super(t),
            this._failureReason = e,
            this._failureDetails = i
        }
        getActionName() {
            return "CameraFailure"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                FailureReason: this._failureReason,
                FailureDetails: this._failureDetails || ""
            })
        }
    }
    ;
    t.CameraWarningEvent = class extends u {
        constructor(e, t) {
            super(t),
            this._message = e
        }
        getActionName() {
            return "CameraWarning"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Message: this._message
            })
        }
    }
    ;
    t.CameraFirstFrame = class extends u {
        constructor(e, t) {
            super(t),
            this._duration = Date.now() - e
        }
        getActionName() {
            return "CameraFirstFrame"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Duration: this._duration
            })
        }
    }
    ;
    t.CameraStartedEvent = class extends u {
        constructor(e, t, i, n) {
            super(i),
            this._success = e,
            this._failureReason = t,
            this._errorCode = n
        }
        getActionName() {
            return "CameraStarted"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Success = this._success,
            this._failureReason && (e.FailureReason = this._failureReason,
            this._errorCode && (e.ErrorCode = this._errorCode)),
            e
        }
    }
    ;
    t.CameraCaptureEvent = class extends u {
        constructor(e, t, i, n, o, s, r=1) {
            super(o),
            this._captureEventName = e,
            this._success = t,
            this._failureReason = i,
            this._resolution = n,
            this._mediaType = s,
            this._mediaCount = r
        }
        getActionName() {
            return this._captureEventName
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Success = this._success,
            void 0 !== this._failureReason && (e.FailureReason = this._failureReason),
            void 0 !== this._resolution && (e.CaptureResolution = this._resolution),
            void 0 !== this._mediaType && (e.MediaType = l[this._mediaType]),
            e.MediaCount = this._mediaCount,
            e
        }
    }
    ;
    t.CameraInitEvent = class extends d {
        constructor(e, t, i) {
            super(),
            this._moduleName = e,
            this._hardwareLevel = t,
            this._fallback = i
        }
        getActionName() {
            return "CameraInit"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                ModuleName: this._moduleName,
                HardwareLevel: this._hardwareLevel,
                IsFallback: this._fallback
            })
        }
    }
    ;
    t.QRCodeScan = class extends d {
        constructor(e) {
            super(),
            this._scanState = e
        }
        getActionName() {
            return "QRCodeScan"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                QRCodeScanState: o.QRCodeScanState[this._scanState]
            })
        }
    }
    ;
    t.ColorFilterFailureEvent = class extends d {
        constructor(e) {
            super(),
            this._failure = e
        }
        getActionName() {
            return "ColorFilterFailure"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Failure: this._failure
            })
        }
    }
    ;
    t.ColorFilterRenderDurationEvent = class extends d {
        constructor(e) {
            super(),
            this._renderDuration = e
        }
        getActionName() {
            return "ColorFilterRenderDuration"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                RenderDuration: this._renderDuration
            })
        }
    }
    ;
    t.CameraModeEvent = class extends d {
        constructor(e) {
            super(),
            this._mode = e
        }
        getActionName() {
            return "CameraMode"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                CameraMode: c[this._mode]
            })
        }
    }
    ;
    t.CameraFlowCompleteEvent = class extends d {
        constructor(e, t, i) {
            super(),
            this._canceled = e,
            this._mediaType = t,
            this._mediaCount = i
        }
        getActionName() {
            return "CameraFlowComplete"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Canceled = this._canceled,
            void 0 !== this._mediaType && (e.MediaType = l[this._mediaType]),
            void 0 !== this._mediaCount && (e.MediaCount = this._mediaCount),
            e
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.None = 0] = "None",
        e[e.Resize = 1] = "Resize",
        e[e.ResizeOnCommit = 2] = "ResizeOnCommit"
    }(t.SideBarResizeMode || (t.SideBarResizeMode = {})),
    function(e) {
        e.Bing = "bing",
        e.Fan = "fan",
        e.Msn = "msn",
        e.MeetNow = "meetnow"
    }(t.AdsProvider || (t.AdsProvider = {})),
    function(e) {
        e.ListItem = "listItem",
        e.ListItemNarrow = "listItemNarrow",
        e.PanelBanner = "panelBanner"
    }(t.AdsType || (t.AdsType = {})),
    function(e) {
        e.Favourites = "favourites",
        e.Recents = "recents",
        e.None = "none"
    }(t.AdsListGroupType || (t.AdsListGroupType = {}))
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(2090)
      , s = i(7)
      , r = i(2091)
      , a = i(2092)
      , l = i(39);
    e.exports = new class {
        constructor() {
            this._initialized = !1,
            this._initializeDeferral = s.Defer(),
            this._preStartupEventQueue = [],
            this._userIdPopulatedDefer = s.Defer()
        }
        isInitialized() {
            return this._initialized
        }
        initialize(e, t) {
            this._sinks = e,
            s.all(n.map(this._sinks, e=>e.initializeAndPause(t))).always(()=>{
                if (this._initialized = !0,
                this._initializeDeferral.resolve(void 0),
                l.TelemetryConfig) {
                    const e = this._preStartupEventQueue;
                    this._preStartupEventQueue = [],
                    n.each(e, e=>this.addEvent(e))
                }
            }
            ),
            o.default.onTelemetryEvent(e=>{
                this.addEvent(new a.NativeTelemetryEvent(e))
            }
            )
        }
        startUsingUserId() {
            if (this.isInitialized()) {
                if (n.each(this._sinks, e=>e.startUsingUserId()),
                this._userIdPopulatedDefer) {
                    let e = this._userIdPopulatedDefer;
                    this._userIdPopulatedDefer = void 0,
                    e.resolve(void 0)
                }
            } else
                this._initializeDeferral.promise().then(()=>{
                    this.startUsingUserId()
                }
                )
        }
        waitUntilUserIdPopulated() {
            return this._userIdPopulatedDefer ? this._userIdPopulatedDefer.promise() : s.Resolved()
        }
        performWhenServiceInitialized() {
            return this.isInitialized() ? s.Resolved() : this._initializeDeferral.promise()
        }
        flush() {
            return this.isInitialized() ? s.all(n.map(this._sinks, e=>e.flush())).then(n.noop) : this._initializeDeferral.promise().then(()=>this.flush())
        }
        pause() {
            this.isInitialized() ? n.each(this._sinks, e=>e.pause()) : this._initializeDeferral.promise().then(()=>{
                this.pause()
            }
            )
        }
        resume() {
            this.isInitialized() ? n.each(this._sinks, e=>e.resume()) : this._initializeDeferral.promise().then(()=>{
                this.resume()
            }
            )
        }
        setTelemetryConfig(e, t, i, o, s, a, c) {
            if (l.TelemetryConfig = e,
            l.TelemetryETag = t,
            l.TelemetryConfigExpiration = e.sendEcsExpirationTime ? i : void 0,
            l.TelemetryIsAnonymous = o,
            l.SampledEvents = s,
            l.SampledPerfEvents = a,
            l.ExperimentMappings = new r.default(c),
            this.isInitialized()) {
                const e = this._preStartupEventQueue;
                this._preStartupEventQueue = [],
                n.each(e, e=>this.addEvent(e))
            }
        }
        addEvent(e) {
            if (!l.TelemetryConfig || !this.isInitialized())
                return void this._preStartupEventQueue.push(e);
            const t = e.shouldSend();
            n.each(this._sinks, (i,n)=>{
                i.supportsEventSampling() && !t || i.respondsTo(e) && i.consumeEvent(e)
            }
            )
        }
        test_getInitializeDeferral() {
            return this._initializeDeferral
        }
        test_reset() {
            this._sinks = [],
            this._preStartupEventQueue = [],
            this._initialized = !1,
            this._initializeDeferral = s.Defer()
        }
        test_preStartupEventQueue() {
            return this._preStartupEventQueue
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.AlertsConstants = {
        DaysOfAlertsToDisplay: 7
    },
    t.AlertMenuItemCommand = {
        all: "all",
        highPriority: "highpriority",
        reactions: "reactions",
        markAllRead: "markallread",
        settings: "settings"
    },
    function(e) {
        e[e.HighPriorityMessage = 1] = "HighPriorityMessage",
        e[e.Reaction = 2] = "Reaction",
        e[e.AdditionalReaction = 3] = "AdditionalReaction",
        e[e.HighlightsFollowRequest = 4] = "HighlightsFollowRequest",
        e[e.HighlightComment = 5] = "HighlightComment",
        e[e.OnboardingX = 6] = "OnboardingX",
        e[e.Engagement = 7] = "Engagement",
        e[e.CoachMarks = 8] = "CoachMarks",
        e[e.Notice = 9] = "Notice",
        e[e.HighlightsSkypeChannel = 10] = "HighlightsSkypeChannel",
        e[e.HighlightsSkypeChannelSecondary = 11] = "HighlightsSkypeChannelSecondary",
        e[e.NotificationPermission = 12] = "NotificationPermission",
        e[e.ScheduledCall = 13] = "ScheduledCall",
        e[e.MissedCallbackReminder = 14] = "MissedCallbackReminder"
    }(t.AlertType || (t.AlertType = {})),
    function(e) {
        e[e.Follow = 1] = "Follow",
        e[e.AcceptedByOther = 2] = "AcceptedByOther",
        e[e.Removed = 3] = "Removed",
        e[e.AcceptedByMe = 4] = "AcceptedByMe"
    }(t.HighlightsFollowAlertState || (t.HighlightsFollowAlertState = {})),
    function(e) {
        e[e.All = 0] = "All",
        e[e.HighPriorityMessages = 1] = "HighPriorityMessages",
        e[e.Reactions = 2] = "Reactions"
    }(t.AlertTypeFilter || (t.AlertTypeFilter = {}))
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.IncomingUnknown = 0] = "IncomingUnknown",
        e[e.IncomingContactListChange = 6] = "IncomingContactListChange",
        e[e.IncomingProfileChange = 20] = "IncomingProfileChange",
        e[e.IncomingAvatarChange = 21] = "IncomingAvatarChange",
        e[e.IncomingS4BCall = 105] = "IncomingS4BCall",
        e[e.IncomingNGCCall = 107] = "IncomingNGCCall",
        e[e.IncomingP2PCall = 108] = "IncomingP2PCall",
        e[e.IncomingNGCGroupCall = 109] = "IncomingNGCGroupCall",
        e[e.IncomingNGCStopRinger = 110] = "IncomingNGCStopRinger",
        e[e.IncomingNGCPSTNCall = 111] = "IncomingNGCPSTNCall",
        e[e.IncomingGoLiveStart = 112] = "IncomingGoLiveStart",
        e[e.IncomingGoLiveStop = 113] = "IncomingGoLiveStop",
        e[e.IncomingWarmCall = 117] = "IncomingWarmCall",
        e[e.IncomingNGCEncryptedCall = 118] = "IncomingNGCEncryptedCall",
        e[e.IncomingChatMessage = 200] = "IncomingChatMessage",
        e[e.IncomingChatGroupMessage = 201] = "IncomingChatGroupMessage",
        e[e.IncomingChatMention = 203] = "IncomingChatMention",
        e[e.IncomingChatHearts = 204] = "IncomingChatHearts",
        e[e.ThreadActivity = 222] = "ThreadActivity",
        e[e.IncomingChatVideo = 301] = "IncomingChatVideo",
        e[e.IncomingChatPhoto = 302] = "IncomingChatPhoto",
        e[e.IncomingChatAudio = 303] = "IncomingChatAudio",
        e[e.IncomingChatMoji = 304] = "IncomingChatMoji",
        e[e.IncomingChatVideoCloud = 305] = "IncomingChatVideoCloud",
        e[e.IncomingChatFile = 306] = "IncomingChatFile",
        e[e.IncomingConsumptionHorizonChange = 308] = "IncomingConsumptionHorizonChange",
        e[e.IncomingTPUMConciergeMessage = 404] = "IncomingTPUMConciergeMessage",
        e[e.EmergencyRestoreEndpoints = 405] = "EmergencyRestoreEndpoints",
        e[e.SceUserServicesChange = 601] = "SceUserServicesChange",
        e[e.IncomingContactRequest = 801] = "IncomingContactRequest",
        e[e.IncomingContactAccept = 802] = "IncomingContactAccept",
        e[e.IncomingContactInviteListChange = 803] = "IncomingContactInviteListChange",
        e[e.IncomingContactBlockChange = 804] = "IncomingContactBlockChange",
        e[e.CortanaSignalsConfigChange = 1100] = "CortanaSignalsConfigChange",
        e[e.IncomingUpsPresence = 1200] = "IncomingUpsPresence"
    }(t.PNHEvents || (t.PNHEvents = {})),
    t.BlockContext = "block",
    t.UnblockContext = "unblock",
    t.EncryptedContent = "(encrypted content)"
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(7)
      , o = i(2)
      , s = i(1012)
      , r = i(643)
      , a = i(142)
      , l = i(3)
      , c = i(21)
      , d = i(19);
    class u {
        constructor(e=[]) {
            this._dependencies = e,
            c.RegisterStartupable(this, "FileUploadCache", this._dependencies)
        }
        getDependencies() {
            return this._dependencies
        }
        startup() {
            return n.Resolved()
        }
        isLocalCacheSupported() {
            return s.default.isLocalCacheSupported()
        }
        isKnown(e) {
            return !1
        }
        getSize(e) {}
        saveFileIfSupported(e, t) {
            return n.Resolved()
        }
        finishedButKeepForRetry(e) {
            return n.Resolved()
        }
        finished(e) {
            return n.Resolved()
        }
        abandon(e) {
            return n.Resolved()
        }
    }
    const g = s.default.isLocalCacheSupported() ? new class extends u {
        constructor() {
            super([s.default, a.default])
        }
        startup() {
            return this._cache = s.default.getCache(r.internal_cacheConfig.DefaultCacheName),
            this.isLocalCacheSupported() && a.default.setRefreshOptions("FileUploadCache", {
                interval: 864e5,
                callback: ()=>this._cache.cleanupMissingFilesAndMetadata(),
                nextExecution: Date.now(),
                taskTypeFlags: a.TaskTypeFlags.CpuIntensive
            }),
            n.Resolved()
        }
        isKnown(e) {
            return !!this._cache.getMeta(e)
        }
        getSize(e) {
            let t = this._cache.getMeta(e);
            return t && t.size
        }
        saveFileIfSupported(e, t) {
            if (e && t && this.isLocalCacheSupported()) {
                const i = e.file.uri;
                return this._cache.addFile(t.name, i, t.name, Date.now() + 7776e6, t.asCopy, {})
            }
            return n.Resolved()
        }
        finishedButKeepForRetry(e) {
            return this._cache.updateExpiration(e, Date.now() + 6048e5)
        }
        finished(e) {
            return this._cache.updateExpiration(e, Date.now() + 18e4)
        }
        abandon(e) {
            return this._cache.removeFile(e).catch(e=>{
                l.log(o.LogTraceArea.FileUploadCache, "Ignoring abandon failure: " + d.errorAsString(e))
            }
            )
        }
    }
    : new u;
    t.default = g
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(6)
      , r = i(427)
      , a = i(427)
      , l = i(120)
      , c = i(18)
      , d = i(53)
      , u = i(9);
    t.getValueBySearchAndRecommendationPair = ({searchable: e, recommendable: t})=>e ? t ? r.SkypeGraphSearchPolicy.SEARCHABLE : r.SkypeGraphSearchPolicy.SEARCHABLE_NOT_RECOMMENDABLE : t ? r.SkypeGraphSearchPolicy.NOT_SEARCHABLE_RECOMMENDABLE : r.SkypeGraphSearchPolicy.NOT_SEARCHABLE;
    class g extends l.SkypeRestClient {
        constructor() {
            super(s.default.getConfigSettingsNoSubscription().optionsService.productionHost),
            this._defaultOptions.mustHaveValidSkypeToken = !0,
            this._defaultOptions.acceptType = "json"
        }
        _getHeaders(e) {
            let t = super._getHeaders(e);
            return t["X-Skypetoken"] = d.default.getRawSkypeToken(),
            t["X-Skype-Version-ID"] = c.getUIVersion(),
            t["X-Microsoft-Skype-Chain-ID"] = u.newGuid(),
            t["X-Microsoft-Skype-Message-ID"] = u.newGuid(),
            t
        }
        getIncludeMeInSearchPrivacyOption() {
            return this.performApiGet("v1/users/self/options/service-settings.skypegraph-search-policy").then(e=>(e=>{
                switch (e) {
                case r.SkypeGraphSearchPolicy.SEARCHABLE:
                    return {
                        searchable: !0,
                        recommendable: !0
                    };
                case r.SkypeGraphSearchPolicy.NOT_SEARCHABLE_RECOMMENDABLE:
                    return {
                        searchable: !1,
                        recommendable: !0
                    };
                case r.SkypeGraphSearchPolicy.SEARCHABLE_NOT_RECOMMENDABLE:
                    return {
                        searchable: !0,
                        recommendable: !1
                    };
                case r.SkypeGraphSearchPolicy.NOT_SEARCHABLE_NOT_RECOMMENDABLE:
                default:
                    return {
                        searchable: !1,
                        recommendable: !1
                    }
                }
            }
            )(e ? e.value : r.SkypeGraphSearchPolicy.NOT_SEARCHABLE_RECOMMENDABLE))
        }
        setIncludeMeInSearchPrivacyOption({searchable: e, recommendable: i}) {
            const n = {
                value: t.getValueBySearchAndRecommendationPair({
                    searchable: e,
                    recommendable: i
                })
            };
            return this.performApiPut("v1/users/self/options/service-settings.skypegraph-search-policy", n)
        }
        getUiColorOption() {
            return this.performApiGet("v1/users/self/options/" + r.UiColorOptionName).then(e=>e && e.value ? e.value.color : void 0)
        }
        setUiColorOption(e) {
            const t = {
                value: {
                    color: e
                }
            };
            return this.performApiPut("v1/users/self/options/" + r.UiColorOptionName, t)
        }
        getIsMoneyAllowedOption() {
            return this.performApiGet("v1/users/self/options/" + r.SendMoneyStatusOptionName).then(e=>!!e && e.value === a.SendMoneyStatusOptionValue.Enabled)
        }
        getIsCallForwardingEnabledOption() {
            const e = this.performApiGet("v1/users/self/options/" + a.CallForwardingOptionName).then(e=>!(!e || !e.value) && e.value.state === a.CallingOptionValues.Enabled)
              , t = this.performApiGet("v1/users/self/options/" + a.VoicemailOptionName).then(e=>!(!e || !e.value) && e.value.state === a.CallingOptionValues.Enabled);
            return o.all([e, t]).then(e=>e[0] || e[1])
        }
        getAvatarPolicy() {
            return this.performApiGet("v1/users/self/options/" + a.AvatarPolicyOptionName).then(e=>e ? e.value : r.OptionsServiceAvatarPolicyValueType.BUDDIES_OR_AUTHORIZED_CAN_SEE)
        }
        setAvatarPolicy(e) {
            const t = {
                value: e
            };
            return this.performApiPutDetailed("v1/users/self/options/" + a.AvatarPolicyOptionName, t)
        }
        getProfileInformedUserData() {
            return this.performApiGet("v1/users/self/options/" + a.ProfileInformedUserOptionName)
        }
        setProfileInformedUserData(e) {
            const t = {
                value: e
            };
            return this.performApiPutDetailed("v1/users/self/options/" + a.ProfileInformedUserOptionName, t)
        }
        getEmailMissedContentOptions() {
            return this._getUserOptionsBatch(r.OptionServiceOptions.EmailMissedCallReminders, r.OptionServiceOptions.EmailMissedMessageReminders)
        }
        setEmailMissedContentOption(e, t) {
            return this._setUserOption(e, t)
        }
        _getUserOptionsBatch(...e) {
            const t = n.join(e, ",");
            return this.performApiGet("v1/users/self/options?names=" + t)
        }
        _setUserOption(e, t) {
            const i = {
                value: t
            };
            return this.performApiPutDetailed("v1/users/self/options/" + e, i)
        }
    }
    t.default = new g
}
, , , function(e, t, i) {
    "use strict";
    const n = i(86)
      , o = i(0)
      , s = i(557)
      , r = i(10)
      , a = i(2)
      , l = i(1031)
      , c = (i(110),
    i(3))
      , d = i(38)
      , u = i(124)
      , g = i(5)
      , h = i(4)
      , p = i(22)
      , m = i(558)
      , S = (i(433),
    i(8))
      , C = i(226)
      , y = i(14)
      , f = i(59)
      , _ = i(12)
      , b = i(29)
      , v = i(183)
      , T = g.lazyProperties({
        modalContainerBackgroundDesktop: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            alignItems: "center",
            justifyContent: "center"
        }),
        modalContainerAnimatedDesktop: ()=>o.Styles.createViewStyle({
            backgroundColor: S.Color.blackOverlay50
        }),
        modalContainerAnimatedTablet: ()=>o.Styles.createViewStyle({
            bottom: -100
        }),
        modalContainerBackgroundMobile: ()=>o.Styles.createViewStyle({
            position: "absolute",
            backgroundColor: S.Color.blackOverlay50,
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            alignItems: "center",
            justifyContent: "center"
        }),
        modalContainerInner: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            alignItems: "center",
            justifyContent: "center"
        }),
        modalContainerInnerFullSize: ()=>o.Styles.createViewStyle({
            flex: 1,
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }),
        modalContainer: ()=>o.Styles.createViewStyle({
            flex: -1,
            flexDirection: "row"
        }),
        modalContainerMobile: ()=>[o.Styles.createViewStyle({
            flex: -1,
            justifyContent: "center"
        }), y.noncollapsibleView],
        modalContainerFullSize: ()=>[o.Styles.createViewStyle({
            flex: 1,
            justifyContent: "center"
        }), y.noncollapsibleView],
        modalContainerTablet: ()=>o.Styles.createViewStyle({
            flex: -1,
            alignItems: "flex-start",
            overflow: "visible"
        }),
        modalBox: ()=>o.Styles.createViewStyle({
            flex: -1,
            margin: 32
        }),
        modalBoxTablet: ()=>o.Styles.createViewStyle({
            margin: 20
        }),
        modalBoxDesktop: ()=>o.Styles.createViewStyle({
            borderRadius: 3,
            transform: [{
                translateX: 0
            }]
        }),
        modalBoxDesktopFullSize: ()=>o.Styles.createViewStyle({
            flex: 1,
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }),
        fullScreenView: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            backgroundColor: S.Color.transparent
        })
    });
    class P extends _.default {
        constructor() {
            super(...arguments),
            this._contentOpacityValue = new o.Animated.Value(1),
            this._suppressDismissalEvents = !1,
            this._renderPopup = (e,t,i,n,r)=>o.createElement(C, {
                anchorPosition: s.default.popupAnchorPositionToString(e),
                anchorOffset: t,
                popupWidth: i,
                popupHeight: n,
                borderRadius: 10,
                strokeColor: this.props.popupColorInfo ? this.props.popupColorInfo.strokeColor : this._themeColors.popupBorderColor,
                fillColor: this.props.popupColorInfo ? this.props.popupColorInfo.fillColor : this._themeColors.popoverBackgroundColor,
                shadow: "0px 2px 4px rgba(0, 0, 0, 0.25)",
                popupAccessibilityTitle: this._modalAccessibilityLabel()
            }, o.createElement(o.View, {
                style: [this.state.widthStyle, this.state.heightStyle]
            }, this.props.children)),
            this._arbitrateFocus = e=>l.arbitrateModalOrPopupFocus("SXModal", e),
            this._onContainerRef = e=>{
                this._container = e || void 0
            }
            ,
            this._onEscape = ()=>(this._intClickOutside(),
            !0),
            this._onLayout = e=>{
                if (this.isComponentMounted()) {
                    const t = {
                        width: e.width,
                        height: e.height
                    };
                    d.default(t, this.state.viewDimensions) || this.setState({
                        viewDimensions: t
                    })
                }
            }
            ,
            this._clickInside = e=>{
                e.stopPropagation()
            }
            ,
            this._onLongPressOutside = e=>{
                e.stopPropagation()
            }
            ,
            this._clickOutside = e=>{
                e.stopPropagation(),
                this._intClickOutside()
            }
            ,
            this._intClickOutside = ()=>{
                this.props.onClickOutside && this.props.onClickOutside()
            }
        }
        _buildState(e, t) {
            let i = {
                isUsingStackNavigationContext: p.default.isUsingStackNavigationContext(),
                useTabletUI: !e.fullSize && f.useTabletUI()
            };
            const n = this._getRootViewId();
            if (!i.isUsingStackNavigationContext)
                if (i.widthStyle = e.modalWidth ? o.Styles.createViewStyle({
                    width: e.modalWidth
                }, !1) : void 0,
                e.modalHeight) {
                    const t = i.useTabletUI ? Math.min(e.modalHeight, v.default.measureWindow(n).height - 60) : e.modalHeight;
                    i.heightStyle = o.Styles.createViewStyle({
                        height: t
                    }, !1)
                } else
                    i.heightStyle = void 0;
            if (t) {
                if (this._suppressDismissalEvents = !!e.suppressDismissalEvents,
                this._opacityAnimationValue = new o.Animated.Value(i.isUsingStackNavigationContext || e.fullSize ? 0 : 1),
                this._opacityAnimationStyle = e.animationType !== r.SXModalAnimationType.None ? o.Styles.createAnimatedViewStyle({
                    opacity: this._opacityAnimationValue
                }) : void 0,
                e.animationType === r.SXModalAnimationType.Bottom) {
                    const t = P._yOffset(e.modalHeight, !!e.fullSize, n);
                    this._contentTransformYValue = new o.Animated.Value(t),
                    this._bottomAnimationStyle = o.Styles.createAnimatedViewStyle({
                        transform: [{
                            translateY: this._contentTransformYValue
                        }]
                    })
                } else
                    e.animationType !== r.SXModalAnimationType.None && (this._contentScaleValue = new o.Animated.Value(1),
                    this._defaultAnimationStyle = o.Styles.createAnimatedViewStyle({
                        transform: [{
                            scale: this._contentScaleValue
                        }],
                        opacity: this._contentOpacityValue
                    }));
                e.closeAnimationEvent && (this._closeAnimationSubcriptionToken = e.closeAnimationEvent.subscribe(e=>this._animateClose(e)));
                const t = v.default.measureWindow(n);
                i.viewDimensions = {
                    width: t.width,
                    height: t.height
                }
            }
            return i
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            this.props.skipEscHandling || u.default.addEscapeHandler(this._onEscape)
        }
        componentDidMount() {
            super.componentDidMount(),
            c.log(a.LogTraceArea.CoreUI, "SXModal componentDidMount, animationType: " + this.props.animationType);
            const e = [];
            this.props.animationType === r.SXModalAnimationType.None ? (this._contentScaleValue && this._contentScaleValue.setValue(1),
            this._contentTransformYValue && this._contentTransformYValue.setValue(0),
            this._opacityAnimationValue && this._opacityAnimationValue.setValue(1)) : this.props.animationType === r.SXModalAnimationType.Bottom ? (this._contentTransformYValue && e.push(n.timing.easeOut({
                value: this._contentTransformYValue,
                toValue: 0,
                useNativeDriver: !0
            })),
            this._opacityAnimationValue && e.push(n.timing.easeOut({
                value: this._opacityAnimationValue,
                toValue: 1,
                useNativeDriver: !0
            })),
            this._contentScaleValue && this._contentScaleValue.setValue(1)) : this.state.isUsingStackNavigationContext || this.props.fullSize ? (this._opacityAnimationValue && e.push(n.timing.easeOut({
                value: this._opacityAnimationValue,
                toValue: 1,
                useNativeDriver: !0
            })),
            this._contentScaleValue && this._contentScaleValue.setValue(1)) : (this._contentScaleValue,
            this._contentTransformYValue && this._contentTransformYValue.setValue(0),
            this._opacityAnimationValue && this._opacityAnimationValue.setValue(1)),
            e.length && o.Animated.parallel(e).start()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            e.modalTitle !== this.props.modalTitle && e.modalTitle && this.resetFocus()
        }
        componentWillUnmount() {
            if (super.componentWillUnmount(),
            u.default.removeEscapeHandler(this._onEscape),
            this._closeAnimationSubcriptionToken && this._closeAnimationSubcriptionToken.unsubscribe(),
            !this._suppressDismissalEvents) {
                const e = h.getString("AccessibilityLabel.DialogClosed", {
                    dialogTitle: this.props.modalTitle
                });
                o.Accessibility.announceForAccessibility(e)
            }
        }
        resetFocus() {
            if (this._container) {
                this.props.willResetFocus && this.props.willResetFocus(),
                this._container.setFocusRestricted(!1),
                this._container.requestFocus();
                const e = e=>{
                    c.log(a.LogTraceArea.CoreUI, "SXModal resetFocus, timedOut: " + e),
                    this._clearFocusRestrictionTimeout(),
                    this.props.didResetFocus && this.props.didResetFocus()
                }
                ;
                this._clearFocusRestrictionTimeout(),
                this._focusRestrictionTimeout = b.setTimeout(()=>{
                    e(!0)
                }
                , 1e3),
                this._container.setFocusRestricted(!0, ()=>{
                    e(!1)
                }
                )
            }
        }
        suppressDismissalEvents(e) {
            this._suppressDismissalEvents = e
        }
        _clearFocusRestrictionTimeout() {
            this._focusRestrictionTimeout && (b.clearTimeout(this._focusRestrictionTimeout),
            this._focusRestrictionTimeout = void 0)
        }
        _modalAccessibilityLabel() {
            return this.props.modalTitle ? this.props.modalTitle : void 0
        }
        render() {
            const e = this._modalAccessibilityLabel();
            if (this.state.isUsingStackNavigationContext) {
                let e;
                const t = [T.modalContainerBackgroundMobile];
                this.props.overlayColor && t.push(o.Styles.createViewStyle({
                    backgroundColor: this.props.overlayColor
                }, !1)),
                this.props.animationType !== r.SXModalAnimationType.None && t.push(this.props.animationType === r.SXModalAnimationType.Bottom ? this._bottomAnimationStyle : this._opacityAnimationStyle);
                const i = [this.props.fullSize ? T.modalContainerFullSize : T.modalContainerMobile];
                return this.props.horizontalPadding && i.push(o.Styles.createViewStyle({
                    maxWidth: this.state.viewDimensions.width - 2 * this.props.horizontalPadding
                }, !1)),
                this.props.verticalPadding && i.push(o.Styles.createViewStyle({
                    maxHeight: this.state.viewDimensions.height - 2 * this.props.verticalPadding
                }, !1)),
                o.createElement(o.Animated.View, {
                    style: t,
                    onDragEnter: this._clickInside,
                    onLayout: this.props.horizontalPadding || this.props.verticalPadding ? this._onLayout : void 0
                }, e, o.createElement(o.View, {
                    style: this.props.fullSize ? T.modalContainerInnerFullSize : T.modalContainerInner
                }, o.createElement(o.View, {
                    style: i,
                    restrictFocusWithin: !0
                }, this.props.children)))
            }
            if (this.props.fullSize) {
                const t = [T.modalBoxDesktopFullSize, this._themeStyles.primaryBackgroundColorStyle];
                return this.props.animationType !== r.SXModalAnimationType.None && t.push(this.props.animationType === r.SXModalAnimationType.Bottom ? this._bottomAnimationStyle : this._opacityAnimationStyle),
                o.createElement(o.Animated.View, {
                    style: t
                }, o.createElement(o.View, {
                    key: "modal",
                    style: T.modalContainerFullSize,
                    restrictFocusWithin: !0,
                    accessibilityId: "SXModal",
                    accessibilityTraits: o.Types.AccessibilityTrait.Dialog,
                    accessibilityLabel: e,
                    tabIndex: -1,
                    autoFocus: !0,
                    arbitrateFocus: this._arbitrateFocus
                }, this.props.children))
            }
            {
                let t;
                if (this.props.anchor)
                    t = o.createElement(m, {
                        key: "modal",
                        animateDismissal: !0,
                        renderPopup: (e,t,i,n,o)=>this._renderPopup(e, t, i, n, o),
                        allowTaps: !0,
                        ignorePointerEvents: !0,
                        getAnchorElement: this.props.anchor
                    });
                else {
                    const i = [this.state.useTabletUI ? T.modalBoxTablet : T.modalBox, T.modalBoxDesktop, this._themeStyles.primaryBackgroundColorStyle];
                    this.state.widthStyle && i.push(this.state.widthStyle),
                    this._useDarkTheme() && i.push(this._themeStyles.viewBorderStyle);
                    const n = [this.state.useTabletUI ? T.modalContainerTablet : T.modalContainer];
                    this.props.animationType !== r.SXModalAnimationType.None && n.push(this.props.animationType === r.SXModalAnimationType.Bottom ? this._bottomAnimationStyle : this._defaultAnimationStyle),
                    this.state.heightStyle && (this.state.useTabletUI ? i.push(this.state.heightStyle) : n.push(this.state.heightStyle)),
                    t = o.createElement(o.Animated.View, {
                        style: n
                    }, o.createElement(o.View, {
                        key: "modal",
                        style: i,
                        ref: this._onContainerRef,
                        onPress: this._clickInside,
                        accessibilityId: "SXModal",
                        accessibilityTraits: o.Types.AccessibilityTrait.Dialog,
                        restrictFocusWithin: !0,
                        disableTouchOpacityAnimation: !0,
                        tabIndex: -1,
                        accessibilityLabel: e,
                        autoFocus: !0,
                        arbitrateFocus: this._arbitrateFocus
                    }, this.props.children))
                }
                const i = [T.modalContainerBackgroundDesktop];
                let n;
                if (!this.props.hideBackground) {
                    const e = [y.absoluteFill, T.modalContainerAnimatedDesktop];
                    this.props.showOverflow && (this.state.useTabletUI && e.push(T.modalContainerAnimatedTablet),
                    i.push(y.overflowVisible)),
                    this._opacityAnimationStyle && e.push(this._opacityAnimationStyle),
                    n = o.createElement(o.Animated.View, {
                        style: e
                    })
                }
                return o.createElement(o.View, {
                    style: i
                }, n, o.createElement(o.View, {
                    style: T.fullScreenView,
                    onPress: this._clickOutside,
                    onLongPress: this._onLongPressOutside,
                    disableTouchOpacityAnimation: !0
                }), t)
            }
        }
        _animateClose(e) {
            c.log(a.LogTraceArea.CoreUI, "SXModal _animateClose, animationType: " + this.props.animationType);
            const t = ()=>{
                this.isComponentMounted() && e && e()
            }
            ;
            if (this.props.animationType === r.SXModalAnimationType.None)
                return void t();
            const i = [];
            this.props.animationType === r.SXModalAnimationType.Bottom ? (this._contentTransformYValue && i.push(n.timing.easeOut({
                value: this._contentTransformYValue,
                toValue: P._yOffset(this.props.modalHeight, !!this.props.fullSize, this._getRootViewId()),
                useNativeDriver: !0
            })),
            this._opacityAnimationValue && i.push(n.timing.easeOut({
                value: this._opacityAnimationValue,
                toValue: 0,
                useNativeDriver: !0
            }))) : (this._opacityAnimationValue && i.push(n.timing.easeOut({
                value: this._opacityAnimationValue,
                toValue: 0,
                useNativeDriver: !0
            })),
            this.state.isUsingStackNavigationContext || this.props.fullSize || i.push(n.timing.easeOut({
                value: this._contentOpacityValue,
                toValue: 0,
                useNativeDriver: !0
            }))),
            o.Animated.parallel(i).start(t)
        }
        static _yOffset(e, t, i) {
            const n = v.default.measureWindow(i).height;
            return e && !t ? n - (n - e) / 2 : n
        }
    }
    e.exports = P
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(86);
    t.AnimationDuration = n.timing.Duration;
    const o = n.timing;
    t.default = o
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(2)
      , a = i(3);
    let l = 0;
    const c = {}
      , d = [];
    t.dismissAll = function(e) {
        a.log(r.LogTraceArea.Navigation, "NavDismissalHelper.dismissAll"),
        function() {
            if (n.some(d, e=>o.Modal.isDisplayed(e)))
                return !1;
            return !0
        }() && (e && e !== s.MainRootViewId ? o.Modal.dismissAll(e) : o.Modal.dismissAll()),
        e && e !== s.MainRootViewId ? o.Popup.dismissAll(e) : o.Popup.dismissAll(),
        n.each(c, e=>{
            e && e.dismiss ? e.dismiss() : a.warn(r.LogTraceArea.Navigation, "NavDismissalHelper.dismissAll called without dismiss handle")
        }
        )
    }
    ,
    t.register = function(e) {
        l++;
        const t = "navDismissalHandler" + l;
        return a.log(r.LogTraceArea.Navigation, "NavDismissalHelper.register handle: " + t),
        c[t] = e,
        t
    }
    ,
    t.unregister = function(e) {
        a.log(r.LogTraceArea.Navigation, "NavDismissalHelper.unregister handle: " + e),
        delete c[e]
    }
    ,
    t.registerModalDialogDismissalException = function(e) {
        a.log(r.LogTraceArea.Navigation, "NavDismissalHelper.registerModalDialogDismissalException: " + e),
        n.includes(d, e) || d.push(e)
    }
    ,
    t.unregisterModalDialogDismissalException = function(e) {
        a.log(r.LogTraceArea.Navigation, "NavDismissalHelper.unregisterModalDialogDismissalException: " + e),
        n.remove(d, e)
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(6)
      , o = i(3)
      , s = i(22)
      , r = i(236)
      , a = i(356);
    class l extends r.default {
        constructor() {
            super(r.ScenarioName.PerfTelemetryScenario)
        }
        endScenario() {
            return this.reset()
        }
        startScenario() {
            return this.start()
        }
        setIdentifier(e) {
            this._objectId = e
        }
        getIdentifier() {
            return this._objectId
        }
        isEventValid() {
            return this.hasStarted() && void 0 !== this._objectId
        }
        isTrackingIdentifier(e) {
            return !!e && this.isEventValid() && this._objectId === e
        }
    }
    const c = new l;
    t.pictureViewerWillOpen = function() {
        c.endScenario(),
        c.startScenario()
    }
    ,
    t.pictureViewerOpening = function(e) {
        c.getIdentifier() || c.setIdentifier(e)
    }
    ,
    t.pictureViewerThumbnailLoaded = function(e) {
        c.isTrackingIdentifier(e) && o.track(new a.PerfPictureViewerThumbLoaded(c.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.pictureViewerFullLoaded = function(e) {
        c.isTrackingIdentifier(e) && o.track(new a.PerfPictureViewerFullLoaded(c.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ;
    const d = new l;
    t.searchWillOpen = function() {
        d.endScenario(),
        d.startScenario()
    }
    ,
    t.searchPanelOpening = function(e) {
        d.getIdentifier() || d.setIdentifier(e)
    }
    ,
    t.searchPanelIsRendered = function(e) {
        d.isTrackingIdentifier(e) && o.track(new a.SearchPanelRendered(d.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.searchPanelZeroTermResultsRendered = function(e) {
        d.isTrackingIdentifier(e) && o.track(new a.SearchPanelZeroTermResultsRendered(d.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ;
    const u = new l;
    t.contactsPanelWillOpen = function() {
        u.endScenario(),
        u.startScenario()
    }
    ,
    t.contactsPanelOpening = function(e) {
        u.getIdentifier() || u.setIdentifier(e)
    }
    ,
    t.contactsPanelIsRendered = function(e) {
        u.isTrackingIdentifier(e) && !u.isResolved() && (u.markStepCompleted("PanelVisible"),
        o.track(new a.ContactsPanelRendered(u.getCurrentDuration(),s.default.isUsingStackNavigationContext())))
    }
    ,
    t.contactsPanelPeopleZeroTermResultsRendered = function(e) {
        u.isTrackingIdentifier(e) && (u.markStepCompleted("ZeroTermResultsRendered"),
        u.finish(),
        o.track(new a.ContactsPanelPeopleZeroTermResultsRendered(u.getCurrentDuration(),s.default.isUsingStackNavigationContext())))
    }
    ,
    t.contactsPanelSkypeZeroTermResultsRendered = function(e) {
        u.isTrackingIdentifier(e) && o.track(new a.ContactsPanelSkypeZeroTermResultsRendered(u.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.contactsPanelActiveNowZeroTermResultsRendered = function(e) {
        u.isTrackingIdentifier(e) && o.track(new a.ContactsPanelActiveNowZeroTermResultsRendered(u.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.contactsPanelV2FullyRendered = function(e, t, i, n) {
        u.isTrackingIdentifier(e) && o.track(new a.ContactsPanelV2FullyRendered(u.getCurrentDuration(),s.default.isUsingStackNavigationContext(),t,i,n))
    }
    ;
    const g = new l;
    t.willSearchPublicDirectory = function(e) {
        g.endScenario(),
        g.startScenario(),
        g.setIdentifier(e)
    }
    ,
    t.publicDirectoryServiceCallSent = function(e) {
        g.isTrackingIdentifier(e) && o.track(new a.PublicDirectoryServiceCallSent(g.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.publicDirectoryResultsReceived = function(e) {
        g.isTrackingIdentifier(e) && o.track(new a.PublicDirectoryResultsReceived(g.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.publicDirectoryResultsNotReceived = function(e, t, i, n) {
        g.isTrackingIdentifier(e) && o.track(new a.PublicDirectoryResultsNotReceived(g.getCurrentDuration(),t,i,n))
    }
    ,
    t.publicDirectoryResultsRendered = function(e) {
        g.isTrackingIdentifier(e) && (o.track(new a.PublicDirectoryResultsRendered(g.getCurrentDuration(),s.default.isUsingStackNavigationContext())),
        g.endScenario())
    }
    ;
    const h = new l;
    t.willSearchMessages = function(e) {
        h.endScenario(),
        h.startScenario(),
        h.setIdentifier(e)
    }
    ,
    t.messageSearchServiceCallSent = function(e, t) {
        h.isTrackingIdentifier(e) && o.track(new a.MessageSearchServiceCallSent(h.getCurrentDuration(),s.default.isUsingStackNavigationContext(),n.default.getConfigSettingsNoSubscription().messageSearch.host,t))
    }
    ,
    t.messageSearchResultsReceived = function(e, t) {
        h.isTrackingIdentifier(e) && o.track(new a.MessageSearchResultsReceived(h.getCurrentDuration(),s.default.isUsingStackNavigationContext(),n.default.getConfigSettingsNoSubscription().messageSearch.host,t))
    }
    ,
    t.messageSearchResultsNotReceived = function(e, t, i, r, l, c) {
        h.isTrackingIdentifier(e) && o.track(new a.MessageSearchResultsNotReceived(h.getCurrentDuration(),s.default.isUsingStackNavigationContext(),n.default.getConfigSettingsNoSubscription().messageSearch.host,t,i,r,l,c))
    }
    ,
    t.messageSearchResultsRendered = function(e) {
        h.isTrackingIdentifier(e) && (o.track(new a.MessageSearchResultsRendered(h.getCurrentDuration(),s.default.isUsingStackNavigationContext())),
        h.endScenario())
    }
    ;
    const p = new l;
    t.willSearchConvDb = function(e) {
        p.endScenario(),
        p.startScenario(),
        p.setIdentifier(e)
    }
    ,
    t.convDbSearchCallSent = function(e) {
        p.isTrackingIdentifier(e) && o.track(new a.ConvDbSearchCallSent(p.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.convDbResultsReceived = function(e) {
        p.isTrackingIdentifier(e) && o.track(new a.ConvDbSearchResultsReceived(p.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.convDbResultsNotReceived = function(e, t) {
        p.isTrackingIdentifier(e) && o.track(new a.ConvDbSearchResultsNotReceived(p.getCurrentDuration(),t))
    }
    ,
    t.convDbResultsRendered = function(e) {
        p.isTrackingIdentifier(e) && (o.track(new a.ConvDbSearchResultsRendered(p.getCurrentDuration(),s.default.isUsingStackNavigationContext())),
        p.endScenario())
    }
    ;
    const m = new l;
    t.willSearchBots = function(e) {
        m.endScenario(),
        m.startScenario(),
        m.setIdentifier(e)
    }
    ,
    t.botsSearchServiceCallSent = function(e) {
        m.isTrackingIdentifier(e) && o.track(new a.BotsSearchServiceCallSent(m.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.botsSearchResultsReceived = function(e) {
        m.isTrackingIdentifier(e) && o.track(new a.BotsSearchResultsReceived(m.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.botsSearchResultsNotReceived = function(e, t, i, n) {
        m.isTrackingIdentifier(e) && o.track(new a.BotsSearchResultsNotReceived(m.getCurrentDuration(),t,i,n))
    }
    ,
    t.botsSearchResultsRendered = function(e) {
        m.isTrackingIdentifier(e) && (o.track(new a.BotsSearchResultsRendered(m.getCurrentDuration(),s.default.isUsingStackNavigationContext())),
        m.endScenario())
    }
    ;
    const S = new l;
    t.willSearchAllPeople = function(e) {
        S.endScenario(),
        S.startScenario(),
        S.setIdentifier(e)
    }
    ,
    t.allPeopleSearchResultsReceived = function(e) {
        S.isTrackingIdentifier(e) && o.track(new a.AllPeopleSearchResultsReceived(S.getCurrentDuration(),s.default.isUsingStackNavigationContext()))
    }
    ,
    t.allPeopleSearchResultsNotReceived = function(e, t) {
        S.isTrackingIdentifier(e) && o.track(new a.AllPeopleSearchResultsNotReceived(S.getCurrentDuration(),t))
    }
    ,
    t.allPeopleSearchResultsRendered = function(e) {
        S.isTrackingIdentifier(e) && (o.track(new a.AllPeopleSearchResultsRendered(S.getCurrentDuration(),s.default.isUsingStackNavigationContext())),
        S.endScenario())
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(36)
      , r = i(571)
      , a = i(6)
      , l = i(572)
      , c = i(2)
      , d = i(283)
      , u = i(25)
      , g = i(39)
      , h = i(9);
    var p, m;
    !function(e) {
        e[e.ImageLoad = 0] = "ImageLoad",
        e[e.VideoPlayback = 1] = "VideoPlayback",
        e[e.UnrecognisedMediaDimensions = 2] = "UnrecognisedMediaDimensions",
        e[e.FileRejected = 3] = "FileRejected",
        e[e.ImageUpload = 4] = "ImageUpload",
        e[e.VideoUpload = 5] = "VideoUpload"
    }(p = t.MediaAction || (t.MediaAction = {}));
    class S extends g.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "all_media"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = p[this._action],
            e
        }
    }
    t.ImageLoad = class extends S {
        constructor(e, t, i) {
            super(p.ImageLoad),
            this._uri = e,
            this._origin = t,
            this._properties = i,
            this._loadDuration = -1,
            this._loadStartTime = -1
        }
        getAttributes() {
            let e = o.assign(super.getAttributes(), {
                IsSuccess: this._success,
                LoadDuration: this._loadDuration,
                FailureReason: c.MessagingFailureReason[this._failureReason],
                Origin: this._origin
            });
            return this._properties ? o.assign(e, this._properties) : e
        }
        getPiiAttributes() {
            let e = super.getPiiAttributes();
            return e.Uri = {
                value: this._uri,
                piiKind: n.AWTPiiKind.Uri
            },
            e
        }
        setStatus(e, t=c.MessagingFailureReason.None) {
            this._success = e,
            this._failureReason = t
        }
        startLoad() {
            this._loadStartTime = Date.now()
        }
        endLoad() {
            this._loadDuration = Date.now() - this._loadStartTime
        }
    }
    ;
    t.VideoPlayback = class extends S {
        constructor(e, t, i, n, o, s) {
            super(p.VideoPlayback),
            this._uri = e,
            this._mediaProvider = t,
            this._dimensions = i,
            this._origin = n,
            this._amsReferences = o,
            this._messagetype = s,
            this._loadSuccess = !1,
            this._playSuccess = !1,
            this._videoDuration = 0,
            this._loadDuration = 0,
            this._loadStartTime = 0,
            this._playDuration = 0,
            this._playStartTime = 0,
            this._rebufferingCount = 0,
            this._rebufferingDuration = 0,
            this._rebufferingStartTime = 0,
            this._cachingSuccess = !0,
            this._cachingDuration = 0
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                MediaProvider: this._mediaProvider ? this._mediaProvider : "",
                Origin: this._origin || "",
                MediaWidth: this._dimensions ? this._dimensions.width : "",
                MediaHeight: this._dimensions ? this._dimensions.height : "",
                IsLoadSuccess: this._loadSuccess,
                LoadDuration: this._loadDuration,
                VideoDuration: this._videoDuration,
                IsPlaySuccess: this._playSuccess,
                PlayDuration: this._playDuration,
                DurationToPlayStart: this._getTimeToPlay(),
                RebufferingCount: this._rebufferingCount,
                RebufferingDuration: this._rebufferingDuration,
                FailureReason: c.MessagingFailureReason[this._failureReason],
                ErrorInfo: this._errorInfo,
                IsCachingSuccess: this._cachingSuccess,
                CacheMode: void 0 !== this._cacheMode ? d.CacheMode[this._cacheMode] : "",
                CachingDuration: this._cachingDuration,
                AmsDocumentIds: o.join(this._amsReferences),
                MessageType: this._messagetype || ""
            })
        }
        getPiiAttributes() {
            let e = super.getPiiAttributes();
            return e.Uri = {
                value: this._uri ? this._uri : "",
                piiKind: n.AWTPiiKind.Uri
            },
            e
        }
        setCachingStatus(e, t, i) {
            this._cachingSuccess = e,
            this._cacheMode = t,
            this._cachingDuration = i || 0
        }
        setLoadStatus(e, t, i=c.MessagingFailureReason.None, n="") {
            this._loadSuccess = e,
            this._videoDuration = t,
            this._failureReason = i,
            this._errorInfo = n
        }
        setPlayStatus(e, t=c.MessagingFailureReason.None) {
            this._playSuccess = e,
            this._failureReason = t
        }
        startLoad() {
            this._loadStartTime = Date.now()
        }
        endLoad() {
            this._loadDuration = this._loadStartTime > 0 ? Date.now() - this._loadStartTime : 0
        }
        startPlay() {
            this._playStartTime = Date.now()
        }
        endPlay() {
            this._playDuration = this._playStartTime > 0 ? Date.now() - this._playStartTime : 0
        }
        _getTimeToPlay() {
            return this._playSuccess && this._loadStartTime > 0 && this._playStartTime > 0 ? this._playStartTime - this._loadStartTime : ""
        }
        startRebuffering() {
            this._rebufferingCount++,
            this._rebufferingStartTime = Date.now()
        }
        endRebuffering() {
            this._rebufferingDuration += this._rebufferingStartTime > 0 ? Date.now() - this._rebufferingStartTime : 0,
            this._rebufferingStartTime = 0
        }
    }
    ;
    class C extends g.TelemetryEventBase {
        constructor() {
            super(...arguments),
            this._reencodeStartTime = 0
        }
        getEventName() {
            return "all_reencode_session"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                State: void 0 !== this._state ? c.ReencodeState[this._state] : "",
                ReencodeDuration: this._reencodeDuration ? this._reencodeDuration : 0,
                OriginalAssetFetchDuration: this._originalAssetFetchDuration || 0,
                HasOverlay: !!this._hasOverlay && this._hasOverlay,
                ReencodeProfile: void 0 !== this._reencodeProfile ? r.ReencodeProfileType[this._reencodeProfile] : "",
                ErrorType: this._errorType ? this._errorType : "",
                ErrorInfo: this._errorInfo ? this._errorInfo : "",
                VideoDuration: this._videoDuration ? this._videoDuration : 0,
                SourceWidth: this._sourceDimensions ? this._sourceDimensions.width : 0,
                SourceHeight: this._sourceDimensions ? this._sourceDimensions.height : 0,
                SourceFileSize: this._sourceFileSize ? this._sourceFileSize : 0,
                OutputWidth: this._outputDimensions ? this._outputDimensions.width : 0,
                OutputHeight: this._outputDimensions ? this._outputDimensions.height : 0,
                OutputFileSize: this._outputFileSize ? this._outputFileSize : 0,
                EstimatedFileSize: this._estimatedFileSize ? this._estimatedFileSize : 0,
                TransactionID: this._transactionId ? this._transactionId : ""
            })
        }
        getScenarioAttributes() {
            return {
                ReencodeState: void 0 !== this._state ? c.ReencodeState[this._state] : "",
                ReencodeDuration: this._reencodeDuration ? this._reencodeDuration : 0,
                ReencodeFetchDuration: this._originalAssetFetchDuration || 0,
                HasReencodeOverlay: !!this._hasOverlay && this._hasOverlay,
                ReencodeProfile: void 0 !== this._reencodeProfile ? r.ReencodeProfileType[this._reencodeProfile] : "",
                ReencodeSourceWidth: this._sourceDimensions ? this._sourceDimensions.width : 0,
                ReencodeSourceHeight: this._sourceDimensions ? this._sourceDimensions.height : 0,
                ReencodeSourceFileSize: this._sourceFileSize ? this._sourceFileSize : 0,
                ReencodeOutputWidth: this._outputDimensions ? this._outputDimensions.width : 0,
                ReencodeOutputHeight: this._outputDimensions ? this._outputDimensions.height : 0,
                ReencodeEstimatedFileSize: this._estimatedFileSize ? this._estimatedFileSize : 0
            }
        }
        startReencode() {
            this._reencodeStartTime = Date.now()
        }
        endReencode() {
            this._reencodeDuration = (this._reencodeStartTime > 0 ? Date.now() - this._reencodeStartTime : 0) / 1e3
        }
        setOriginalAssetFetchDuration(e) {
            this._originalAssetFetchDuration = e
        }
        setState(e) {
            this._state = e
        }
        setHasOverlay(e) {
            this._hasOverlay = e
        }
        setReencodeProfile(e) {
            this._reencodeProfile = e
        }
        setErrorType(e) {
            this._errorType = e
        }
        setErrorInfo(e) {
            this._errorInfo = e
        }
        setVideoDuration(e) {
            this._videoDuration = e
        }
        setSourceDimensions(e) {
            this._sourceDimensions = e
        }
        setSourceFileSize(e) {
            this._sourceFileSize = e
        }
        setOutputDimensions(e) {
            this._outputDimensions = e
        }
        setOutputFileSize(e) {
            this._outputFileSize = e
        }
        setEstimatedFileSize(e) {
            this._estimatedFileSize = e
        }
        setTransactionID(e) {
            this._transactionId = e
        }
    }
    t.ReencodeSession = C;
    class y extends g.TelemetryEventBase {
        constructor(e) {
            super(),
            this._entryPoint = e,
            this._isVideo = !1,
            this._mediaCount = 1,
            this._ink = !1,
            this._text = !1,
            this._stickers = !1,
            this._overlay = !1,
            this._lens = !1,
            this._filter = !1,
            this._addStickersClickCount = 0,
            this._stickerIds = [],
            this._stickerNames = [],
            this._tabNames = [],
            this._isMediaSaved = !1,
            this._isMediaSent = !1,
            this._isCanceled = !1,
            this._overlaysViewCount = {}
        }
        getEventName() {
            return "camera_capture_session"
        }
        clearMarkup() {
            this._ink = !1,
            this._text = !1,
            this._stickers = !1,
            this._overlay = !1,
            this._lens = !1,
            this._filter = !1,
            this._stickerIds = [],
            this._stickerNames = [],
            this._tabNames = []
        }
        setIsVideo(e) {
            this._isVideo = e
        }
        setCameraMode(e) {
            this._cameraMode = e
        }
        setDeviceOrientation(e) {
            this._deviceOrientation = e === s.DeviceOrientation.Portrait ? "Portrait" : e === s.DeviceOrientation.Landscape ? "Landscape" : "Unlocked"
        }
        setMediaCount(e) {
            this._mediaCount = e
        }
        setInk(e) {
            this._ink = e
        }
        setText(e) {
            this._text = e
        }
        setStickers(e) {
            this._stickers = e
        }
        setOverlay(e) {
            this._overlay = e
        }
        setOverlayType(e) {
            this._overlayType = e,
            this._overlayType !== l.OverlayType.SprinklesSticker && (this._overlaySprinklesName = void 0,
            this._overlaySprinklesCategory = void 0)
        }
        setOverlaySprinklesCategory(e) {
            this._overlaySprinklesCategory = e
        }
        setOverlaySprinklesName(e) {
            this._overlaySprinklesName = e
        }
        setLens(e) {
            this._lens = e
        }
        setFilter(e) {
            this._filter = e
        }
        setFilterName(e) {
            this._filterName = e
        }
        setAddStickersClickCount(e) {
            this._addStickersClickCount = e
        }
        setStickerIds(e) {
            this._stickerIds = e
        }
        setStickerNames(e) {
            this._stickerNames = e
        }
        setTabNames(e) {
            this._tabNames = e
        }
        setMediaSavedStatus(e) {
            this._isMediaSaved = e
        }
        setMediaSentStatus(e) {
            this._isMediaSent = e
        }
        setIsCanceled(e) {
            this._isCanceled = e
        }
        recordOverlayViewed(e) {
            e = e.replace(/\s/g, ""),
            this._overlaysViewCount[e] ? this._overlaysViewCount[e] = this._overlaysViewCount[e] + 1 : this._overlaysViewCount[e] = 1
        }
        getAttributes() {
            this._stickers && (this._pesStickerConfig = a.default.getPesConfig().sticker_config);
            const e = o.assign(super.getAttributes(), {
                IsCanceled: this._isCanceled,
                EntryPoint: c.PostSource[this._entryPoint],
                IsVideo: this._isVideo,
                CameraMode: this._cameraMode ? this._cameraMode : "",
                DeviceOrientation: this._deviceOrientation ? this._deviceOrientation : "",
                MediaCount: this._mediaCount,
                Ink: this._ink,
                Text: this._text,
                Sticker: this._stickers,
                Overlay: this._overlay,
                OverlayType: this._overlayType ? l.OverlayType[this._overlayType] : "",
                OverlaySprinklesCategory: this._overlaySprinklesCategory || "",
                OverlaySprinklesName: this._overlaySprinklesName || "",
                Lens: this._lens ? this._lens : "",
                Filter: this._filter ? this._filter : "",
                FilterName: this._filterName || "",
                AddStickersClickCount: this._addStickersClickCount,
                StickerIds: this._stickerIds.join(),
                StickerNames: this._stickerNames.join(),
                TabNames: this._tabNames.join(),
                IsMediaSaved: this._isMediaSaved,
                IsMediaSent: this._isMediaSent,
                PesStickerConfig: this._pesStickerConfig || "",
                PesFxSceneConfig: this._pesFxSceneConfig || ""
            });
            return o.each(this._overlaysViewCount, (t,i)=>{
                e["OverlayViewCount_" + i] = t
            }
            ),
            e.WasSentAfterSwiping = 0 !== this._overlaysViewCount.count,
            e
        }
    }
    t.CaptureSession = y;
    t.UnrecognizedMediaDimension = class extends S {
        constructor(e, t) {
            super(p.UnrecognisedMediaDimensions),
            this._extension = e,
            this._uploadSource = t
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Extension: this._extension,
                UploadSource: this._uploadSource ? c.PostSource[this._uploadSource] : "Unknown"
            })
        }
    }
    ,
    function(e) {
        e[e.FileSize = 0] = "FileSize",
        e[e.VideoDuration = 1] = "VideoDuration"
    }(m = t.FileRejectedReason || (t.FileRejectedReason = {}));
    t.FileRejectedByClient = class extends S {
        constructor(e, t, i) {
            super(p.FileRejected),
            this._fileType = e,
            this._uploadSource = t,
            this._reason = i,
            this._isRejectedFromPost = !1
        }
        setVideoDurationDetails(e, t) {
            this._durationLimit = e,
            this._videoDuration = t
        }
        setFileSizeDetails(e, t) {
            this._sizeLimit = e,
            this._fileSize = t
        }
        setIsRejectedFromPost(e) {
            this._isRejectedFromPost = e
        }
        getAttributes() {
            let e = {
                UploadSource: c.PostSource[this._uploadSource],
                FileType: u.UploadFileType[this._fileType],
                FileRejectedReason: m[this._reason],
                IsRejectedFromPost: this._isRejectedFromPost
            };
            return this._durationLimit && (e.DurationLimit = this._durationLimit),
            this._videoDuration && (e.VideoDuration = this._videoDuration),
            this._sizeLimit && (e.SizeLimit = this._sizeLimit),
            this._fileSize && (e.FileSize = this._fileSize),
            o.assign(super.getAttributes(), e)
        }
    }
    ;
    t.MediaUploadBase = class extends S {
        constructor(e, t, i, n, o, s, r, a, l) {
            super(e),
            this._success = t,
            this._failureReason = i,
            this._uploadDuration = n,
            this._fileType = o,
            this._dimensions = s,
            this._transactionId = r,
            this._documentId = a,
            this._isGroupChat = l
        }
        static mediaActionForFileType(e) {
            let t = void 0;
            if (e)
                switch (e) {
                case u.UploadFileType.Picture:
                case u.UploadFileType.Thumbnail:
                case u.UploadFileType.GroupAvatar:
                    t = p.ImageUpload;
                    break;
                case u.UploadFileType.Video:
                case u.UploadFileType.VideoMessage:
                    t = p.VideoUpload;
                    break;
                case u.UploadFileType.File:
                case u.UploadFileType.Audio:
                case u.UploadFileType.AudioMessage:
                case u.UploadFileType.Excel:
                case u.UploadFileType.OneNote:
                case u.UploadFileType.Powerpoint:
                case u.UploadFileType.Word:
                    break;
                default:
                    h.switchStatementExhaustiveChecking(e)
                }
            return t
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                IsSuccess: this._success,
                FailureReason: c.MessagingFailureReason[this._failureReason],
                FileType: o.isUndefined(this._fileType) ? "" : u.UploadFileType[this._fileType],
                UploadDuration: this._uploadDuration,
                MediaWidth: this._dimensions ? this._dimensions.width : "",
                MediaHeight: this._dimensions ? this._dimensions.height : "",
                TransactionId: this._transactionId || "",
                DocumentId: this._documentId || "",
                IsGroupChat: o.isUndefined(this._isGroupChat) ? "" : this._isGroupChat
            })
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(63)
      , r = i(7)
      , a = i(139)
      , l = i(99)
      , c = i(16)
      , d = i(48)
      , u = i(69)
      , g = i(299)
      , h = i(193)
      , p = i(2)
      , m = i(3)
      , S = i(74)
      , C = i(32)
      , y = i(20)
      , f = i(240)
      , _ = i(34)
      , b = i(21)
      , v = i(19)
      , T = i(18);
    function P(e, t) {
        return b.HasStarted(u.default) ? r.Resolved(u.default.isManuallyAddedContact(e)) : b.EnsureStartedExclusive([S.default]).then(()=>{
            const i = S.default.getData(d.InternalKeys.ContactMris) || []
              , o = n.includes(i, e);
            return o ? d.default.getDisplayableUser(e).then(e=>!(n.isUndefined(e) || !e.isManuallyAdded)).catch(i=>(m.log(p.LogTraceArea.Notifications, "Failed to getDisplayableUser for " + _.mriOrId(e) + " error: " + v.errorAsString(i) + " causeId: " + t),
            !1)) : o
        }
        ).catch(i=>(m.log(p.LogTraceArea.Notifications, "isContact set to false - InternalDataStore not started for caller " + _.mriOrId(e) + " error: " + v.errorAsString(i) + " causeId: " + t),
        !1))
    }
    t.getNotificationIcon = function(e, t) {
        if (!t)
            return s.Collection.GROUP_AVATAR_128;
        const i = t.getAvatarUrl();
        if (i)
            return i;
        let n = t.getMri();
        if (n && e && c.isEncryptedThread(n) && (n = e.getMri()),
        n && c.isUserMri(n)) {
            if (e) {
                const t = e.getAvatarUrl();
                if (t)
                    return t;
                if (T.getPlatformType() === p.PlatformType.Android)
                    return {
                        initials: e.getInitials(),
                        color: h.getPrimaryColor(n)
                    }
            }
            return s.Collection.AVATAR_128
        }
        return n && T.getPlatformType() === p.PlatformType.Android ? {
            isGroupConversation: !0,
            color: h.getPrimaryColor(n)
        } : s.Collection.GROUP_AVATAR_128
    }
    ,
    t.sendWarmCallTelemetry = function(e, t) {
        b.EnsureStarted(C.default).then(()=>{
            m.log(p.LogTraceArea.Notifications, "Previous warm push at " + new Date(e).toISOString() + " ended with disposition: " + f.descriptionForWarmCallDisposition(t)),
            m.track(new l.WarmCalNotificationDisposition(e,t)),
            C.default.setUserPreferencesLocal({
                timeAwakenedByWarmCallNotification: void 0
            })
        }
        )
    }
    ,
    t.isCallerAllowed = function(e, t, i) {
        return e ? function(e) {
            let t;
            t = o.App.getActivationState() !== o.Types.AppActivationState.Active ? b.EnsureStarted(a.default).then(()=>a.default.isContactBlocked(e)) : g.isConversationBlockedAsync(e);
            return t
        }(e).then(n=>(m.log(p.LogTraceArea.Notifications, "isCallerAllowed caller " + _.mriOrId(e) + " blocked: " + n + " causeId: " + i),
        n || !t || c.isPhoneMri(e) ? r.Resolved(n ? p.PersonAllowed.Blocked : p.PersonAllowed.Allowed) : c.isGroupConversation(e) ? r.Resolved(p.PersonAllowed.NotContact) : P(e, i).then(t=>(m.log(p.LogTraceArea.Notifications, "isCallerAllowed caller " + _.mriOrId(e) + " isContact: " + t + " causeId: " + i),
        r.Resolved(t ? p.PersonAllowed.Allowed : p.PersonAllowed.NotContact))))) : (m.log(p.LogTraceArea.Notifications, "isCallerAllowed caller undefined blocked: false causeId: " + i),
        r.Resolved(p.PersonAllowed.Allowed))
    }
    ,
    t.isContact = P,
    t.isLastMessageUpdateReaction = function(e) {
        return y.isMyMri(e.creator) && e.hasUnseenReactions()
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(648)
      , s = i(140)
      , r = i(39)
      , a = i(159);
    var l;
    !function(e) {
        e[e.Success = 0] = "Success",
        e[e.Error = 1] = "Error"
    }(l = t.ScheduledCallsFetchedStatus || (t.ScheduledCallsFetchedStatus = {}));
    class c extends r.TelemetryEventBase {
        getEventName() {
            return "calling_schedule_call"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    class d extends c {
        constructor(e, t, i, n, o, s, r) {
            super(),
            this._hasSubjectChanged = e,
            this._hasDateTimeChanged = t,
            this._hasReminderChanged = i,
            this._entryPoint = n,
            this._conversationType = o,
            this._conversationId = s,
            this._reminder = r
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.EntryPoint = s.ScheduleCallEntryPoint[this._entryPoint],
            e.ConversationType = o.ConversationType[this._conversationType],
            e.HasSubjectChanged = this._hasSubjectChanged,
            e.HasDateTimeChanged = this._hasDateTimeChanged,
            e.HasReminderChanged = this._hasReminderChanged,
            e.Reminder = this._reminder ? s.ScheduledCallReminder[this._reminder] : "",
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return this._conversationId && (e.ConversationId = {
                value: this._conversationId || "",
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.ScheduleCallCompletedOrCanceledEvent = class extends d {
        constructor(e=!1, t, i, n, o, s, r, a) {
            super(t, i, n, o, s, r, a),
            this._wasCanceled = e
        }
        getActionName() {
            return this._wasCanceled ? "ScheduleCallCanceled" : "ScheduleCallCompleted"
        }
    }
    ;
    t.ScheduledCallEditedEvent = class extends d {
        constructor(e, t, i, n, o, s, r, a, l) {
            super(i, n, o, s, r, a, l),
            this._isOrganizer = e,
            this._hasStatusChanged = t
        }
        getActionName() {
            return "ScheduledCallEdited"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IsOrganizer = this._isOrganizer,
            e.HasStatusChanged = this._hasStatusChanged,
            e
        }
    }
    ;
    t.ScheduleNextCallPresentedEvent = class extends c {
        constructor(e) {
            super(),
            this._callDuration = e
        }
        getActionName() {
            return "ScheduleNextCallPresented"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.CallDuration = this._callDuration,
            e
        }
    }
    ;
    t.ScheduledCallRSVPEvent = class extends c {
        constructor(e, t, i, n) {
            super(),
            this._entryPoint = e,
            this._responseValue = t,
            this._conversationId = i,
            this._scheduledCallId = n
        }
        getActionName() {
            return "ScheduledCallRSVP"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.EntryPoint = s.ScheduleCallRSVPEntryPoint[this._entryPoint],
            e.ResponseValue = s.ScheduledCallInvitationStatus[this._responseValue],
            e.ScheduledCallId = this._scheduledCallId,
            e.ConversationType = o.ConversationType[a.getConversationTypeForTelemetry(this._conversationId)],
            e
        }
    }
    ;
    t.ScheduledCallCancelEvent = class extends c {
        constructor(e, t) {
            super(),
            this._entryPoint = e,
            this._conversationId = t
        }
        getActionName() {
            return "ScheduledCallCanceled"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.EntryPoint = s.ScheduleCallCancelEventEntryPoint[this._entryPoint],
            this._conversationId && (e.ConversationType = o.ConversationType[a.getConversationTypeForTelemetry(this._conversationId)]),
            e
        }
    }
    ;
    t.ScheduledCallsFetchedEvent = class extends c {
        constructor(e, t) {
            super(),
            this._status = e,
            this._error = t
        }
        getActionName() {
            return "ScheduledCallsFetched"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Status = l[this._status],
            this._error && (void 0 !== this._error.statusCode && (e.ErrorCode = this._error.statusCode),
            void 0 !== this._error.statusText && (e.ErrorMessage = this._error.statusText)),
            e
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.CallsPanel = 0] = "CallsPanel",
        e[e.CallsPanelBanner = 1] = "CallsPanelBanner",
        e[e.DialerPanel = 2] = "DialerPanel",
        e[e.CallsPanelTop = 3] = "CallsPanelTop"
    }(t.ExperimentLocation || (t.ExperimentLocation = {}))
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(39);
    var r, a, l;
    !function(e) {
        e[e.MessageOverflowOpenButtonClicked = 0] = "MessageOverflowOpenButtonClicked",
        e[e.MessageOverflowCloseButtonClicked = 1] = "MessageOverflowCloseButtonClicked",
        e[e.MessageOverflowMinimized = 2] = "MessageOverflowMinimized"
    }(r = t.MessageOverflowAction || (t.MessageOverflowAction = {})),
    function(e) {
        e[e.IntegrationLaunched = 0] = "IntegrationLaunched",
        e[e.IntegrationCloseButtonClicked = 1] = "IntegrationCloseButtonClicked",
        e[e.IntegrationSharePreviewLaunched = 2] = "IntegrationSharePreviewLaunched",
        e[e.IntegrationShared = 3] = "IntegrationShared",
        e[e.IntegrationShareCanceled = 4] = "IntegrationShareCanceled"
    }(a = t.IntegrationAction || (t.IntegrationAction = {})),
    function(e) {
        e[e.SwiftCard = 0] = "SwiftCard",
        e[e.AdaptiveCard = 1] = "AdaptiveCard",
        e[e.Url = 2] = "Url",
        e[e.Unknown = 3] = "Unknown"
    }(l = t.IntegrationShareContentType || (t.IntegrationShareContentType = {}));
    class c extends s.TelemetryEventBase {
        getEventName() {
            return "caap_message_composer_overflow"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.MessageOverflowEvent = class extends c {
        constructor(e) {
            super(),
            this._action = e
        }
        getActionName() {
            return r[this._action]
        }
    }
    ;
    class d extends c {
        constructor(e, t) {
            super(),
            this._action = e,
            this._integrationCorrelationId = t
        }
        getActionName() {
            return a[this._action]
        }
        getAttributes() {
            let e = super.getAttributes();
            return this._integrationCorrelationId && (e.IntegrationCorrelationId = this._integrationCorrelationId),
            e
        }
    }
    t.IntegrationEvent = d;
    t.IntegrationShareEvent = class extends d {
        constructor(e, t, i, n, o) {
            super(e, n),
            this._contentType = t,
            this._sessionId = i,
            this._origin = o
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ContentType = l[this._contentType],
            e.SessionCorrelationId = this._sessionId || "",
            e.Origin = n.isUndefined(this._origin) ? "" : o.BrowserOrigin[this._origin],
            e
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(6)
      , s = i(568)
      , r = i(10)
      , a = i(43)
      , l = i(2)
      , c = i(5)
      , d = i(515)
      , u = i(66)
      , g = i(393)
      , h = i(8)
      , p = i(18)
      , m = i(14)
      , S = c.lazyProperties({
        containerLight: ()=>n.Styles.createViewStyle({
            backgroundColor: h.Color.white
        }),
        containerDark: ()=>n.Styles.createViewStyle({
            backgroundColor: h.Color.darkThemeBackground
        }),
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center"
        }),
        staticLogo: ()=>n.Styles.createViewStyle({
            width: 375,
            height: 375,
            paddingBottom: 50,
            justifyContent: "flex-end"
        }),
        iconContainer: ()=>n.Styles.createViewStyle({
            justifyContent: "center",
            alignItems: "center"
        })
    });
    class C extends a.default {
        _buildState(e, t) {
            return {
                useStaticLoader: !o.default.getS4LUiFeatures().jsonAnimationEnabled
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.onComplete && this.props.onComplete()
        }
        render() {
            let e;
            if (this.props.showBlueLogo)
                e = n.createElement(u.default, {
                    size: r.SXActivityIndicatorSize.Large,
                    tintColor: h.Color.blue
                });
            else if (this.state.useStaticLoader)
                e = n.createElement(n.View, {
                    style: S.staticLogo
                }, n.createElement(n.View, {
                    style: [m.absoluteFill, S.iconContainer]
                }, n.createElement(d.SkypeLogo, null)), n.createElement(u.default, {
                    size: r.SXActivityIndicatorSize.Small,
                    tintColor: h.Color.blue,
                    useRXIndicator: !0
                }));
            else {
                const t = g.default.SPLASH_LOADER_NEXT
                  , i = n.Styles.createViewStyle({
                    width: t.intrinsicSize.width,
                    height: t.intrinsicSize.height
                }, !1);
                e = n.createElement(n.View, {
                    style: i
                }, n.createElement(s, {
                    animation: t,
                    delay: p.getPlatformType() === l.PlatformType.Android ? 100 : 50,
                    loop: !0,
                    sizeToFit: !0
                }))
            }
            return n.createElement(n.View, {
                style: [S.panel, this.props.darkThemeEnabled ? S.containerDark : S.containerLight, this.props.style]
            }, e)
        }
    }
    e.exports = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2629)
      , o = (i(200),
    i(4))
      , s = i(32);
    t.sortedLanguageInfo = [{
        code: "ar-SA",
        rtl: !0
    }, {
        code: "bg-BG"
    }, {
        code: "ca-ES"
    }, {
        code: "zh-CN"
    }, {
        code: "zh-TW"
    }, {
        code: "hr-HR"
    }, {
        code: "cs-CZ"
    }, {
        code: "da-DK"
    }, {
        code: "nl-NL"
    }, {
        code: "de-DE"
    }, {
        code: "el-GR"
    }, {
        code: "en-GB"
    }, {
        code: "en-US"
    }, {
        code: "es-ES"
    }, {
        code: "es-MX"
    }, {
        code: "et-EE"
    }, {
        code: "fi-FI"
    }, {
        code: "fr-CA"
    }, {
        code: "fr-FR"
    }, {
        code: "he-IL",
        rtl: !0
    }, {
        code: "hi-IN"
    }, {
        code: "hu-HU"
    }, {
        code: "id-ID"
    }, {
        code: "it-IT"
    }, {
        code: "ja-JP"
    }, {
        code: "ko-KR"
    }, {
        code: "lt-LT"
    }, {
        code: "lv-LV"
    }, {
        code: "ms-MY"
    }, {
        code: "nb-NO"
    }, {
        code: "pl-PL"
    }, {
        code: "pt-PT"
    }, {
        code: "pt-BR"
    }, {
        code: "ro-RO"
    }, {
        code: "ru-RU"
    }, {
        code: "sk-SK"
    }, {
        code: "sl-SI"
    }, {
        code: "sr-Latn-RS"
    }, {
        code: "sv-SE"
    }, {
        code: "th-TH"
    }, {
        code: "tr-TR"
    }, {
        code: "uk-UA"
    }, {
        code: "vi-VN"
    }],
    t.resetLocaleToSystem = function() {
        s.default.setUserPreferencesLocal({
            locale: void 0
        }),
        o.resetLocaleToSystem()
    }
    ,
    t.setLocale = function(e) {
        o.setLocale(e),
        s.default.setUserPreferencesLocal({
            locale: e
        }),
        n.setLanguageCookie(e)
    }
    ,
    t.getLanguageTitle = function(e) {
        return o.getStringUnsafe("SettingsLanguages." + e)
    }
    ,
    t.getShortLanguageTitle = function(e) {
        return o.getStringUnsafe("ShortLanguages." + e)
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(7)
      , a = i(6)
      , l = i(114)
      , c = i(2)
      , d = i(3)
      , u = i(32)
      , g = i(21);
    let h = class extends s.StoreBase {
        constructor() {
            super(),
            this._didUserDismiss = !1,
            this._updateConfigValueIfRequired = ()=>{
                const e = a.default.getS4LCMCFeaturesNoSubscription().speechConsentFlowConfig;
                if (!e)
                    return this._maxSuggestionShownCount = void 0,
                    void (this._maxCallsBetweenConsentSuggestion = void 0);
                this._maxSuggestionShownCount = e.maxSuggestionsShownCount,
                this._maxCallsBetweenConsentSuggestion = e.callsBetweenConsentSuggestion,
                d.log(c.LogTraceArea.InCallBotService, "Config value for max suggestion count: " + this._maxSuggestionShownCount + " and for calls between consent suggestion: " + this._maxCallsBetweenConsentSuggestion)
            }
            ,
            this._updateCallCountWithTranslator = ()=>{
                const e = u.default.getUserPreferencesLocal();
                this._didUserDismiss = !!e.speechSuggestionDismissed,
                this._currentConsent = u.default.getSpeechConsentForTranslator()
            }
            ,
            g.RegisterStartupable(this, "SpeechConsentStatusStore", [u.default])
        }
        startup() {
            return this._currentCallCountWithTranslator = void 0,
            this._updateConfigValueIfRequired(),
            this._updateCallCountWithTranslator(),
            this._appConfigStoreSub || (this._appConfigStoreSub = a.default.subscribe(this._updateConfigValueIfRequired)),
            this._userPrefStoreSub || (this._userPrefStoreSub = u.default.subscribe(this._updateCallCountWithTranslator, u.LocalPreferencesTriggerKeys.speechConsentSuggestion)),
            r.Resolved()
        }
        showSpeechConsentSuggestingInConversation() {
            if (!this._speechConsentFlowSuggestionEnabled() || void 0 !== this._currentConsent || this._didUserDismiss || o.isUndefined(this._maxSuggestionShownCount) || o.isUndefined(this._maxCallsBetweenConsentSuggestion) || o.isUndefined(this._currentCallCountWithTranslator))
                return !1;
            const e = this._maxCallsBetweenConsentSuggestion * this._maxSuggestionShownCount;
            if (0 === this._currentCallCountWithTranslator || this._currentCallCountWithTranslator > e)
                return !1;
            if (1 === this._currentCallCountWithTranslator)
                return d.log(c.LogTraceArea.InCallBotService, "Showing speech consent suggestion after first call with subtitles" + this._currentCallCountWithTranslator),
                !0;
            const t = this._currentCallCountWithTranslator % this._maxCallsBetweenConsentSuggestion == 1;
            return d.log(c.LogTraceArea.InCallBotService, "Showing speech consent suggestion: " + t + " for calls with subtitles count: " + this._currentCallCountWithTranslator),
            t
        }
        hideSpeechConsentSuggestion() {
            d.log(c.LogTraceArea.InCallBotService, "Hide speech consent suggestion"),
            this._didUserDismiss = !0,
            u.default.setUserPreferencesLocal({
                speechSuggestionDismissed: !0
            }),
            this.trigger()
        }
        setSpeechConsentValue(e) {
            d.log(c.LogTraceArea.InCallBotService, "Setting consent for speech for translation to " + e),
            u.default.setSpeechConsentForTranslator(e),
            this.hideSpeechConsentSuggestion()
        }
        getSpeechConsentValue() {
            return !!this._currentConsent
        }
        incrementCallsWithSubtitles() {
            this._speechConsentFlowSuggestionEnabled() && o.isUndefined(this._currentConsent) && (this._currentCallCountWithTranslator = u.default.getUserPreferencesLocalNoSubscription().callsWithTranslatorCount || 0,
            this._currentCallCountWithTranslator++,
            u.default.setUserPreferencesLocal({
                callsWithTranslatorCount: this._currentCallCountWithTranslator
            }),
            d.log(c.LogTraceArea.InCallBotService, "Calls with translator: " + this._currentCallCountWithTranslator),
            this._enableSpeechSuggestionToBeShown(),
            this.trigger())
        }
        lastTimeShowingSuggestion() {
            return !o.isUndefined(this._maxCallsBetweenConsentSuggestion) && !o.isUndefined(this._maxSuggestionShownCount) && (this._currentCallCountWithTranslator = u.default.getUserPreferencesLocalNoSubscription().callsWithTranslatorCount || 0,
            Math.floor(this._currentCallCountWithTranslator / this._maxCallsBetweenConsentSuggestion) === this._maxSuggestionShownCount - 1 && this._currentCallCountWithTranslator % this._maxCallsBetweenConsentSuggestion == 1)
        }
        _enableSpeechSuggestionToBeShown() {
            this._didUserDismiss = !1,
            u.default.setUserPreferencesLocal({
                speechSuggestionDismissed: !1
            })
        }
        _speechConsentFlowSuggestionEnabled() {
            return a.default.getS4LCMCFeaturesNoSubscription().enableSpeechConsentFlow && l.default.call().canProvideSpeechConsent
        }
        test_resetState() {
            u.default.setCallsWithTranslatorCount(void 0),
            u.default.setSpeechConsentForTranslator(void 0),
            u.default.setUserPreferencesLocal({
                speechSuggestionDismissed: void 0
            }),
            this._userPrefStoreSub && (u.default.unsubscribe(this._userPrefStoreSub),
            this._userPrefStoreSub = void 0),
            this._appConfigStoreSub && (a.default.unsubscribe(this._appConfigStoreSub),
            this._appConfigStoreSub = void 0),
            this.startup(),
            this.trigger()
        }
        test_setCallCountWithTranslatror(e) {
            this._currentCallCountWithTranslator = e
        }
    }
    ;
    n.__decorate([s.autoSubscribe], h.prototype, "showSpeechConsentSuggestingInConversation", null),
    n.__decorate([s.autoSubscribe], h.prototype, "getSpeechConsentValue", null),
    h = n.__decorate([s.AutoSubscribeStore], h),
    t.default = new h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(117)
      , o = i(86)
      , s = i(0)
      , r = i(6)
      , a = i(2)
      , l = i(3)
      , c = i(5)
      , d = i(4)
      , u = i(54)
      , g = i(8)
      , h = i(18)
      , p = i(12)
      , m = i(9)
      , S = c.lazyProperties({
        container: ()=>s.Styles.createButtonStyle({
            flexDirection: "row",
            alignItems: "center"
        }),
        toggleSwitch: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            borderRadius: 15,
            marginVertical: 8,
            height: 30,
            width: 50,
            backgroundColor: g.Color.gray300
        }),
        toggleSwitchAndroid: ()=>s.Styles.createViewStyle({
            backgroundColor: g.Color.transparent,
            borderRadius: 0,
            alignItems: "center",
            justifyContent: "center"
        }),
        toggleSwitchUWP: ()=>s.Styles.createViewStyle({
            backgroundColor: g.Color.transparent,
            borderRadius: 0,
            alignItems: "center",
            justifyContent: "center"
        }),
        toggleSwitchBackgroundWrapperAndroid: ()=>s.Styles.createViewStyle({
            position: "absolute",
            top: 8,
            left: 8,
            width: 34,
            height: 14,
            borderRadius: 7,
            backgroundColor: g.Color.gray300
        }),
        toggleSwitchBackgroundWrapperUWP: ()=>s.Styles.createViewStyle({
            position: "absolute",
            top: 6,
            left: 5,
            width: 40,
            height: 18
        }),
        toggleSwitchBackground: ()=>s.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            borderRadius: 15
        }),
        toggleSwitchBackgroundAndroid: ()=>s.Styles.createViewStyle({
            borderRadius: 7
        }),
        toggleSwitchBackgroundUWP: ()=>s.Styles.createViewStyle({
            borderRadius: 10
        }),
        toggleKnob: ()=>s.Styles.createViewStyle({
            top: 2,
            height: 26,
            width: 26,
            borderRadius: 13
        }),
        toggleKnobAndroid: ()=>s.Styles.createViewStyle({
            top: 0,
            height: 24,
            width: 24,
            borderRadius: 12,
            borderWidth: 2,
            borderStyle: "solid",
            backgroundColor: g.Color.gray300
        }),
        toggleKnobUWP: ()=>s.Styles.createViewStyle({
            height: 10,
            width: 10,
            borderRadius: 5
        })
    });
    class C extends p.default {
        constructor() {
            super(...arguments),
            this._isRTL = h.isRTL(),
            this._onButtonRef = e=>{
                this._buttonRef = e || void 0
            }
            ,
            this._onKnobAnimatedViewRef = e=>{
                this._animatedKnobView = e || void 0
            }
            ,
            this._onBackgroundAnimatedViewRef = e=>{
                this._animatedBackgroundView = e || void 0
            }
            ,
            this._handleClick = e=>{
                e.stopPropagation(),
                this.props.onChange && this.props.onChange(e, !this.props.isOn)
            }
        }
        _buildState(e, t) {
            const i = {
                colors: u.getGradientColors(),
                primaryBackgroundColorStyle: u.getPrimaryBackgroundColorStyle()
            };
            return t && (i.useUwpToggleStyle = h.getPlatformType() === a.PlatformType.Windows && r.default.getS4LUiFeatures().enableUwpToggleStyle,
            this._knobLeftOn = C._knobLeftOnValue(this._isRTL, i.useUwpToggleStyle),
            this._knobLeftOff = C._knobLeftOffValue(this._isRTL, i.useUwpToggleStyle),
            i.useUwpToggleStyle && (this._uwpToggleBackgroundValue = new s.Animated.Value(e.isOn ? 1 : 0),
            this._uwpToggleBackgroundStyle = s.Styles.createAnimatedViewStyle({
                backgroundColor: this._uwpToggleBackgroundValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [g.Color.gray300, u.getPrimaryColor()]
                })
            }))),
            i
        }
        componentDidUpdate(e, t, i) {
            if (super.componentDidUpdate(e, t, i),
            this.props.isOn !== e.isOn) {
                const e = m.newCauseId();
                l.log(a.LogTraceArea.SXAnimated, "ToggleSwitch.componentDidUpdate causeId: " + e);
                const t = [];
                this._backgroundAnimation && this._backgroundAnimation.stop(),
                this._animatedKnobView && t.push(this._animatedKnobView.getAnimation({
                    x: {
                        toValue: this.props.isOn ? this._knobLeftOn : this._knobLeftOff,
                        easing: o.Easing.SkypeShotgun,
                        duration: o.timing.Duration.Tiny
                    }
                }, e)),
                this.state.useUwpToggleStyle && this._uwpToggleBackgroundValue ? (this._backgroundAnimation = o.timing.shotgun({
                    value: this._uwpToggleBackgroundValue,
                    toValue: this.props.isOn ? 1 : 0,
                    duration: o.timing.Duration.Tiny
                }),
                t.push(this._backgroundAnimation)) : this._animatedBackgroundView && (this._backgroundAnimation = this._animatedBackgroundView.getAnimation({
                    opacity: this.props.isOn ? 1 : 0
                }, e),
                t.push(this._backgroundAnimation)),
                t.length && o.parallel(t).start(()=>{
                    delete this._backgroundAnimation
                }
                )
            }
        }
        render() {
            const e = [S.toggleKnob, this._themeStyles.primaryBackgroundColorStyle]
              , t = [S.toggleSwitchBackground]
              , i = [S.toggleSwitch];
            this.state.useUwpToggleStyle && (i.push(S.toggleSwitchUWP),
            e.push(S.toggleKnobUWP, this._themeStyles.primaryBackgroundColorStyle),
            t.push(S.toggleSwitchBackgroundUWP));
            const r = this.state.useUwpToggleStyle ? void 0 : s.createElement(n.GradientView, {
                style: S.toggleSwitchBackground,
                direction: this._isRTL ? n.GradientDirection.LEFT : n.GradientDirection.RIGHT,
                colors: this.state.colors
            });
            let a;
            a = this.state.useUwpToggleStyle ? s.createElement(s.Animated.View, {
                key: "background",
                style: [t, this._uwpToggleBackgroundStyle]
            }) : s.createElement(o.View, {
                key: "background",
                ref: this._onBackgroundAnimatedViewRef,
                style: t,
                opacity: this.props.isOn ? 1 : 0
            }, r),
            this.state.useUwpToggleStyle && (a = s.createElement(s.View, {
                key: "background",
                style: S.toggleSwitchBackgroundWrapperUWP
            }, a));
            const l = [a, s.createElement(o.View, {
                key: "knob",
                ref: this._onKnobAnimatedViewRef,
                style: e,
                x: this.props.isOn ? this._knobLeftOn : this._knobLeftOff,
                y: this.state.useUwpToggleStyle ? -2 : void 0
            })];
            let c;
            const u = {
                style: i,
                key: "switch"
            };
            if (c = s.createElement(o.View, Object.assign({}, u, {
                opacity: 1
            }), l),
            this.props.disableInteraction)
                return c;
            let g, h, p;
            g = this.props.accessibilityLabel,
            h = this.props.isOn ? d.getString("ToggleSwitch.OnText") : d.getString("ToggleSwitch.OffText"),
            p = [s.Types.AccessibilityTrait.CheckBox],
            this.props.isOn && p.push(s.Types.AccessibilityTrait.Checked);
            const m = this.props.onChange ? s.Button : s.View;
            return s.createElement(m, {
                style: S.container,
                onPress: this.props.onChange ? this._handleClick : void 0,
                disabled: this.props.disable,
                disableTouchOpacityAnimation: !0,
                accessibilityLabel: g,
                accessibilityTraits: p,
                title: h,
                ref: this._onButtonRef
            }, c)
        }
        static _knobLeftOnValue(e, t) {
            return t ? e ? -11 : 11 : 22 * (e ? -1 : 1)
        }
        static _knobLeftOffValue(e, t) {
            return t ? e ? 11 : -11 : 2 * (e ? -1 : 1)
        }
        requestFocus() {
            this._buttonRef && this._buttonRef.requestFocus()
        }
    }
    t.default = C
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(2)
      , r = i(3)
      , a = i(2684)
      , l = i(21)
      , c = i(370);
    t.default = new class {
        constructor() {
            this._scenarioQueue = {},
            this._scenarioTimestamps = {},
            this._firstSuccessfulSearch = !1,
            l.RegisterStartupable(this, "UserActionsTelemetryService")
        }
        startup() {
            return o.Resolved()
        }
        setScenarioTimestamp(e, t) {
            this._scenarioTimestamps[e] = t || Date.now()
        }
        resetScenarioTimestamp(e) {
            this._getScenarioTimestamp(e) && delete this._scenarioTimestamps[e]
        }
        onSearchPanelUnmount(e, t) {
            this.resetScenarioTimestamp(e),
            this._firstSuccessfulSearch || (r.track(new c.UserActionsTelemetryEvent({
                firstSuccessfulSearch: !1
            })),
            t && (this._scenarioQueue = n.omit(this._scenarioQueue, this._getScenarioUniqueId(t, e)))),
            this._firstSuccessfulSearch = !1
        }
        initiateScenario(e, t, i={}) {
            r.log(s.LogTraceArea.UserActionsTelemetry, "UserActionsTelemetryService initiateScenario"),
            this._createScenario(e, t, i)
        }
        track(e) {
            return this._sendScenarios(e)
        }
        sendScenario(e) {
            const t = this._getScenario(e.ref, e.scenarios[0])
              , i = this._getScenarioDuration(t);
            let n = !1;
            i && t && (r.log(s.LogTraceArea.UserActionsTelemetry, "UserActionsTelemetryService sendScenario"),
            e.scenarios[0] === c.Scenarios.SearchToConversation && (n = a.default.isAbsoluteSuccessSearch(e)),
            !this._firstSuccessfulSearch && n ? (this._firstSuccessfulSearch = !0,
            r.track(new c.UserActionsTelemetryEvent({
                name: e.name,
                duration: i,
                scenario: e.scenarios[0],
                additionalAttributes: t.additionalAttributes,
                firstSuccessfulSearch: !0
            }))) : r.track(new c.UserActionsTelemetryEvent({
                name: e.name,
                duration: i,
                scenario: e.scenarios[0],
                additionalAttributes: t.additionalAttributes
            })),
            this._deleteScenario(e.ref, e.scenarios[0]))
        }
        interruptScenarios(e, t) {
            n.each(t, t=>this._interruptScenario(e, t))
        }
        clearScenarios(e, t) {
            n.each(t, t=>this._deleteScenario(e, t))
        }
        _sendScenarios(e) {
            n.each(e.scenarios, t=>{
                if (this._getScenario(e.ref, t)) {
                    const i = Object.assign(Object.assign({}, e), {
                        scenarios: [t]
                    });
                    return this.sendScenario(i)
                }
            }
            )
        }
        _getDurationInSeconds(e) {
            return Math.floor((Date.now() - e) / 1e3)
        }
        _getScenarioDuration(e) {
            return this._getDurationInSeconds(e.timestamp)
        }
        _interruptScenario(e, t) {
            this.track({
                ref: e,
                scenarios: [t],
                name: c.Actions.InterruptScenario
            })
        }
        _deleteScenario(e, t) {
            this._scenarioQueue = n.omit(this._scenarioQueue, this._getScenarioUniqueId(e, t))
        }
        _getScenario(e, t) {
            return this._scenarioQueue[this._getScenarioUniqueId(e, t)]
        }
        _getScenarioUniqueId(e, t) {
            return `${e}_${t}`
        }
        _createScenario(e, t, i={}) {
            const n = this._getScenarioUniqueId(e, t);
            this._scenarioQueue[n] = {
                timestamp: this._getScenarioTimestamp(t) || Date.now(),
                additionalAttributes: i
            }
        }
        _getScenarioTimestamp(e) {
            return this._scenarioTimestamps[e]
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(5)
      , a = (i(18),
    50)
      , l = 56
      , c = 56
      , d = 40
      , u = 38
      , g = r.lazyProperties({
        tabBarDefault: ()=>o.Styles.createViewStyle({
            height: a
        }),
        tabBarAndroid: ()=>o.Styles.createViewStyle({
            height: l
        }),
        tabBarTablet: ()=>o.Styles.createViewStyle({
            height: c
        }),
        tabBarIOSLandscape: ()=>o.Styles.createViewStyle({
            height: d
        }),
        tabBarCompactDesktop: ()=>o.Styles.createViewStyle({
            height: u
        })
    });
    let h = new class {
        tabBarHeightStyle(e) {
            switch (e) {
            case s.TabBarHeight.Android:
                return g.tabBarAndroid;
            case s.TabBarHeight.Tablet:
                return g.tabBarTablet;
            case s.TabBarHeight.iosLandscape:
                return g.tabBarIOSLandscape;
            case s.TabBarHeight.CompactDesktop:
                return g.tabBarCompactDesktop;
            default:
            case s.TabBarHeight.Default:
                return g.tabBarDefault
            }
        }
        tabBarHeight(e) {
            switch (e) {
            case s.TabBarHeight.Android:
                return l;
            case s.TabBarHeight.Tablet:
                return c;
            case s.TabBarHeight.iosLandscape:
                return d;
            case s.TabBarHeight.CompactDesktop:
                return u;
            default:
            case s.TabBarHeight.Default:
                return a
            }
        }
        generateIndexToTabEnumMap(e) {
            const t = {};
            return n.each(e, (e,i)=>{
                t[i] = e
            }
            ),
            t
        }
        generateTabEnumToIndexMap(e) {
            const t = {};
            return n.each(e, (e,i)=>{
                t[e] = i
            }
            ),
            t
        }
        useTabListContainer() {
            return !0
        }
    }
    ;
    t.default = h
}
, , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(16)
      , s = i(189)
      , r = i(1358)
      , a = i(4)
      , l = i(19);
    class c extends r.default {
        getRecordId() {
            return ""
        }
        getSkypeId() {
            const e = this.getMri();
            return e ? o.getSkypeIdFromMri(e) : void 0
        }
        getMri() {}
        static convertDisplayNameToInitials(e) {
            let t = "?";
            const i = n.compact(e.split(" "));
            if (i.length >= 2)
                t = a.getString("DisplayProfile.UsernameInitials", {
                    firstNameLetter: l.substr(i[0], 0, 1),
                    secondNameLetter: l.substr(i[1], 0, 1)
                });
            else if (1 === i.length) {
                const e = n.startsWith(i[0], "live:") ? 5 : 0;
                t = l.substr(i[0], e, 2)
            }
            return t
        }
        getDisplayName(e, t) {
            const i = this.getMri();
            return i && !o.isOrgIdUserMri(i) && o.isDisplayableStrippedMri(i) ? o.stripMriNamespace(i) : e || a.getString("Notifications.UnknownUser")
        }
        getShortName(e) {
            return n.first(n.compact(this.getDisplayName(void 0, e).split(" "))) || ""
        }
        getInitials() {
            return c.convertDisplayNameToInitials(this.getDisplayName())
        }
        getAvatarUrl(e) {}
        getColor() {
            return s.getDefaultUnknownColorInfo()
        }
        isEncrypted() {
            const e = this.getConversationId();
            return !!e && o.isEncryptedThread(e)
        }
        getConversationId() {
            return this.getMri()
        }
    }
    t.default = c
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(104)
      , s = i(104)
      , r = i(7)
      , a = i(21)
      , l = i(29);
    var c, d;
    !function(e) {
        e[e.CpuIntensive = 1] = "CpuIntensive",
        e[e.UsesNetworking = 2] = "UsesNetworking"
    }(c = t.TaskTypeFlags || (t.TaskTypeFlags = {})),
    function(e) {
        e[e.Low = 1] = "Low",
        e[e.Normal = 2] = "Normal",
        e[e.High = 3] = "High",
        e[e.Critical = 4] = "Critical"
    }(d = t.Priority || (t.Priority = {}));
    const u = {
        uiDisplayed: !1,
        inCall: !1,
        inCallEstablishment: !1,
        networkingAvailable: !1,
        busyTaskDelay: 250,
        afterUiShownDelay: 2500
    };
    t.default = new class {
        constructor() {
            this._tasks = [],
            this._issState = u,
            this._nextTaskExecutionTime = Number.MAX_VALUE,
            this._checkState = ()=>{
                if (this.test_isInExternalUnitTest()) {
                    const e = this._tasks;
                    return this._tasks = [],
                    void n.each(e, e=>e.callback())
                }
                this._idleScheduler && (l.clearTimeout(this._idleScheduler),
                this._idleScheduler = void 0),
                this._issState.uiDisplayed && 0 !== this._tasks.length && (this._checkStateTimer && (l.clearExpiration(this._checkStateTimer),
                this._checkStateTimer = void 0),
                this._idleScheduler = l.setTimeout(()=>{
                    const e = Date.now();
                    let t = !1
                      , i = !1;
                    n.each(this._tasks, r=>{
                        if (e < this._nextTaskExecutionTime && r.flags & c.CpuIntensive)
                            return i = !0,
                            !0;
                        const a = r.flags & (c.UsesNetworking | c.CpuIntensive);
                        return !!(this._issState.inCallEstablishment && r.priority < d.Critical) || (!!(this._issState.inCall && a && r.priority < d.High) || (!(this._issState.networkingAvailable || !(r.flags & c.UsesNetworking)) || (n.pull(this._tasks, r),
                        o.log(s.LogTraceArea.IdleSchedulingService, "Executing Idle Task: " + r.name + ", was queued for: " + (Date.now() - r.queuedAt) + "ms priority: " + d[r.priority]),
                        r.callback(),
                        t = !0,
                        r.flags & c.CpuIntensive && this._bumpBusyTimer(),
                        !1)))
                    }
                    ),
                    this._idleScheduler = void 0,
                    t ? n.defer(this._checkState) : i && (this._checkStateTimer = l.setExpiration(this._checkState, this._nextTaskExecutionTime))
                }
                , 0))
            }
            ,
            a.RegisterStartupable(this, "IdleSchedulingService")
        }
        test_resetParams() {
            this._tasks = [],
            this._nextTaskExecutionTime = Number.MAX_VALUE,
            this._issState = u
        }
        startup() {
            return this._checkState(),
            r.Resolved()
        }
        updateAppState(e) {
            return !!this._update(e)
        }
        updateOptions(e) {
            return !!this._update(e)
        }
        test_update(e) {
            const t = this._update(e)
              , i = n.fromPairs(n.intersectionWith(n.toPairs(e), n.toPairs(t), n.isEqual));
            return n.isEmpty(i) ? void 0 : i
        }
        _update(e) {
            const t = n.fromPairs(n.differenceWith(n.toPairs(e), n.toPairs(this._issState), n.isEqual))
              , i = n.extend({}, this._issState, e);
            if (o.log(s.LogTraceArea.IdleSchedulingService, "oldState: " + JSON.stringify(this._issState) + ` partialState: ${JSON.stringify(e)} diffState: ${JSON.stringify(t)}`),
            !n.isEmpty(t))
                return this._issState = i,
                n.each(t, (e,t)=>{
                    switch (t) {
                    case "uiDisplayed":
                        this._nextTaskExecutionTime = Date.now() + this._issState.afterUiShownDelay
                    }
                }
                ),
                this._checkState(),
                t
        }
        indicateBusyOperation() {
            this._bumpBusyTimer(),
            this._checkState()
        }
        _bumpBusyTimer() {
            this._nextTaskExecutionTime = Math.max(this._nextTaskExecutionTime, Date.now() + this._issState.busyTaskDelay)
        }
        queueIdleTask(e, t, i, o=d.Normal) {
            let s = {
                name: e,
                flags: t,
                callback: i,
                queuedAt: Date.now(),
                priority: o
            };
            const r = n.sortedLastIndexBy(this._tasks, s, e=>-e.priority);
            this._tasks.splice(r, 0, s),
            this._checkState()
        }
        test_isInExternalUnitTest() {
            return !1
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.ActionMenu = 0] = "ActionMenu",
        e[e.Selection = 1] = "Selection",
        e[e.Swipe = 2] = "Swipe",
        e[e.KeyboardCopyPaste = 3] = "KeyboardCopyPaste"
    }(t.QuotesTriggerType || (t.QuotesTriggerType = {})),
    function(e) {
        e[e.Forward = 0] = "Forward",
        e[e.Remove = 1] = "Remove",
        e[e.Copy = 2] = "Copy",
        e[e.Cancel = 3] = "Cancel"
    }(t.SelectedMessagesActionType || (t.SelectedMessagesActionType = {})),
    function(e) {
        e.Calling = "Calling",
        e.Views = "Splitview",
        e.Hotkeys = "Hotkey",
        e.Unknown = "Unknown"
    }(t.ComponentName || (t.ComponentName = {}));
    class n {
        constructor() {
            this._total = 0,
            this._count = 0,
            this._max = 0,
            this._min = 0,
            this._sample = 1
        }
        getCount() {
            return this._count
        }
        average() {
            return this._total && this._count ? Math.round(this._total / this._count * 100) / 100 : 0
        }
        max() {
            return this._max
        }
        min() {
            return this._min
        }
        push(e) {
            e && (this._total > n.maxValue && (this._total /= 2,
            this._count /= 2,
            this._sample *= 2),
            this._count % this._sample == 0 && (this._total += e,
            this._count++,
            this._max <= e && (this._max = e),
            (this._min >= e || 0 === this._min) && (this._min = e)))
        }
        isEmpty() {
            return 0 === this._count
        }
    }
    t.Rate = n,
    n.maxValue = Number.MAX_VALUE / 2
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(292)
      , o = i(293)
      , s = (i(7),
    i(21));
    t.default = new class {
        constructor() {
            s.RegisterStartupable(this, "EntropyService")
        }
        startup() {
            return n.Entropy.getCryptoStrongRandomValues(48).then(e=>{
                o.initPrng(e)
            }
            )
        }
    }
}
, , function(e, t, i) {
    "use strict";
    const n = i(273)
      , o = i(19);
    class s extends n.default {
        constructor(e, t) {
            super(),
            e && "string" == typeof e && (this.rawToken = e,
            this.expiration = t)
        }
        static fromDbToken(e) {
            if (e)
                return new s(e.rawToken,e.expiration)
        }
        isImmutable() {
            return !0
        }
        clone() {
            return new s(this.rawToken,this.expiration)
        }
        isTokenExpired() {
            return Date.now() > this.expiration
        }
        getCidFromSkypeToken() {
            var e, t;
            const i = this.rawToken.split(".");
            if (!(i.length < 2))
                return null === (t = null === (e = o.parseJsonErrorToUndefined(atob(i[1]))) || void 0 === e ? void 0 : e.cid) || void 0 === t ? void 0 : t.toUpperCase()
        }
    }
    if ("undefined" != typeof window) {
        window.SkypeToken = s
    }
    e.exports = s
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(16)
      , o = i(39);
    var s;
    !function(e) {
        e[e.ElectronMenuBar = 0] = "ElectronMenuBar",
        e[e.InitialFetch = 1] = "InitialFetch",
        e[e.Avatar = 2] = "Avatar",
        e[e.MeControl = 3] = "MeControl",
        e[e.ProfileButton = 4] = "ProfileButton",
        e[e.PollingUpdate = 5] = "PollingUpdate",
        e[e.PushNotification = 6] = "PushNotification",
        e[e.TrouterUpdate = 7] = "TrouterUpdate",
        e[e.Unknown = 8] = "Unknown"
    }(s = t.UserPresenceChangeOrigin || (t.UserPresenceChangeOrigin = {}));
    class r extends o.TelemetryEventBase {
        constructor(e, t, i, n, o, s, r, a, l) {
            super(),
            this._origin = e,
            this._oldPresence = t,
            this._newPresence = i,
            this._receivedPresence = n,
            this._success = o,
            this._storeOnly = s,
            this._errorCode = r,
            this._errorMessage = a,
            this._retries = l
        }
        getEventName() {
            return "people_presence"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = s[this._origin],
            e.FromPresence = n.encodeStatus(this._oldPresence) || "Unknown",
            e.ToPresence = n.encodeStatus(this._newPresence) || "Unknown",
            e.ReceivedPresence = n.encodeStatus(this._receivedPresence) || "Unknown",
            e.IsSuccess = this._success,
            e.IsStoreOnly = this._storeOnly,
            e.RetriesCount = this._retries || 0,
            void 0 !== this._errorCode && (e.ErrorCode = this._errorCode),
            void 0 !== this._errorMessage && (e.ErrorMessage = this._errorMessage),
            e
        }
    }
    t.UserPresenceChangedEvent = r;
    class a extends o.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._origin = e,
            this._oldPresence = t,
            this._newPresence = i
        }
        getEventName() {
            return "people_presence_error"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getAction(),
            e.Origin = s[this._origin],
            e.FromPresence = n.encodeStatus(this._oldPresence) || "Unknown",
            e.ToPresence = n.encodeStatus(this._newPresence) || "Unknown",
            e
        }
    }
    t.UserPresenceFailedToSaveToDbEvent = class extends a {
        constructor(e, t, i) {
            super(e, t, i)
        }
        getAction() {
            return "SaveToDB"
        }
    }
    ;
    class l extends o.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._origin = e,
            this._currentStatus = t,
            this._statusToUpdate = i
        }
        getEventName() {
            return "people_presence_ignore"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = s[this._origin],
            e.CurrentStatus = n.encodeStatus(this._currentStatus) || "Unknown",
            e.ToPresence = n.encodeStatus(this._statusToUpdate) || "Unknown",
            e
        }
    }
    t.UserPresenceIgnoredEvent = l
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(25);
    t.WidthBreakPoints = {
        minDesktop: 450,
        tiny: 760,
        small: 896,
        medium: 1280
    };
    t.default = class {
        static responsiveWidthForSize(e) {
            return e <= t.WidthBreakPoints.minDesktop ? n.ResponsiveWidth.MinDesktop : e <= t.WidthBreakPoints.tiny ? n.ResponsiveWidth.Tiny : e <= t.WidthBreakPoints.small ? n.ResponsiveWidth.Small : e <= t.WidthBreakPoints.medium ? n.ResponsiveWidth.Medium : n.ResponsiveWidth.Large
        }
    }
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(235)
      , s = i(16)
      , r = i(39)
      , a = i(159);
    class l extends r.TelemetryEventBase {
        getEventName() {
            return "caap_location"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    class c extends l {
        constructor(e, t) {
            super(),
            this._isHighAccurracy = e,
            this._durationInMs = t
        }
        getActionName() {
            return "Fetched"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsFetchHighAccuracy = this._isHighAccurracy,
            e.FetchDuration = this._durationInMs,
            e
        }
    }
    t.LocationStoreGeolocationFetched = c;
    var d;
    t.LocationStoreGeolocationFetchedFailed = class extends c {
        constructor(e, t, i, n, o) {
            super(e, t),
            this._isTimeout = i,
            this._isPermissionDenied = n,
            this._isPositionUnavailable = o
        }
        getActionName() {
            return "Failed"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsFailedTimeout = this._isTimeout,
            e.IsDeniedPermission = this._isPermissionDenied,
            e.IsUnavailablePosition = this._isPositionUnavailable,
            e
        }
    }
    ,
    function(e) {
        e[e.LocationPickerSend = 0] = "LocationPickerSend",
        e[e.LocationPickerGeolocationFetched = 1] = "LocationPickerGeolocationFetched",
        e[e.LocationPickerGeolocationFetchedFailed = 2] = "LocationPickerGeolocationFetchedFailed",
        e[e.LocationPickerPermissionsChanged = 3] = "LocationPickerPermissionsChanged",
        e[e.LocationPickerSearchStart = 4] = "LocationPickerSearchStart",
        e[e.LocationPickerSearchCancel = 5] = "LocationPickerSearchCancel",
        e[e.LocationPickerNavigationOpen = 6] = "LocationPickerNavigationOpen",
        e[e.LocationPickerNavigationClose = 7] = "LocationPickerNavigationClose",
        e[e.LocationPickerNearByFetching = 8] = "LocationPickerNearByFetching",
        e[e.LocationPickerNearByClicked = 9] = "LocationPickerNearByClicked",
        e[e.LocationPickerNearByFetchingFailed = 10] = "LocationPickerNearByFetchingFailed",
        e[e.LocationPickerResolveAddress = 11] = "LocationPickerResolveAddress",
        e[e.LocationPickerResolveAddressFailed = 12] = "LocationPickerResolveAddressFailed",
        e[e.LocationViewerOpen = 13] = "LocationViewerOpen",
        e[e.LocationViewerOpenGoogleMaps = 14] = "LocationViewerOpenGoogleMaps",
        e[e.LocationViewerOpenMaps = 15] = "LocationViewerOpenMaps"
    }(d = t.LocationAction || (t.LocationAction = {}));
    class u extends r.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "messaging_location"
        }
        getEventTraceMode() {
            return r.TelemetryTraceMode.EventName
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = d[this._action],
            e
        }
    }
    class g extends u {
        constructor(e, t) {
            super(e),
            this._type = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.LocationPickerType = this._type,
            e
        }
    }
    t.LocationPickerSend = class extends g {
        constructor(e) {
            super(d.LocationPickerSend, e)
        }
    }
    ;
    class h extends g {
        constructor(e, t, i, n, o, s) {
            super(s || d.LocationPickerGeolocationFetched, e),
            this._originator = t,
            this._isHighAccurracy = i,
            this._isComponentMounted = n,
            this._durationInMs = o
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Originator = this._originator,
            e.IsHighaccurracy = this._isHighAccurracy,
            e.IsComponentMounted = this._isComponentMounted,
            e.DurationInMs = this._durationInMs,
            e
        }
    }
    t.LocationPickerGeolocationFetched = h;
    t.LocationPickerGeolocationFetchedFailed = class extends h {
        constructor(e, t, i, n, o, s, r, a) {
            super(e, t, i, n, o, d.LocationPickerGeolocationFetchedFailed),
            this._isTimeout = s,
            this._isPermissionDenied = r,
            this._isPositionUnavailable = a
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsTimeout = this._isTimeout,
            e.IsPermissionDenied = this._isPermissionDenied,
            e.IsPositionUnavailable = this._isPositionUnavailable,
            e
        }
    }
    ;
    t.LocationPickerPermissionsChanged = class extends g {
        constructor(e, t, i) {
            super(d.LocationPickerPermissionsChanged, e),
            this._oldPermission = t,
            this._newPermission = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.OldPermission = this._oldPermission,
            e.NewPermission = this._newPermission,
            e
        }
    }
    ;
    t.LocationPickerSearchStart = class extends g {
        constructor(e) {
            super(d.LocationPickerSearchStart, e)
        }
    }
    ;
    t.LocationPickerSearchCancel = class extends g {
        constructor(e) {
            super(d.LocationPickerSearchCancel, e)
        }
    }
    ;
    t.LocationPickerNavigationOpen = class extends g {
        constructor(e) {
            super(d.LocationPickerNavigationOpen, e)
        }
    }
    ;
    t.LocationPickerNavigationClose = class extends g {
        constructor(e) {
            super(d.LocationPickerNavigationClose, e)
        }
    }
    ;
    class p extends g {
        constructor(e, t, i, n, o) {
            super(o || d.LocationPickerNearByFetching, e),
            this._query = t,
            this._isComponentMounted = i,
            this._durationInMs = n
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Query = this._query || "",
            e.IsComponentMounted = this._isComponentMounted,
            e.DurationInMs = this._durationInMs,
            e
        }
    }
    t.LocationPickerNearByFetching = p;
    t.LocationPickerNearbyClicked = class extends g {
        constructor(e) {
            super(d.LocationPickerNearByClicked, e)
        }
    }
    ;
    t.LocationPickerNearByFetchingFailed = class extends p {
        constructor(e, t, i, n, o) {
            super(e, t, i, n, d.LocationPickerNearByFetchingFailed),
            this._statusCode = o
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.StatusCode = this._statusCode,
            e
        }
    }
    ;
    class m extends g {
        constructor(e, t, i, n, o) {
            super(e, t),
            this._addressFound = i,
            this._isComponentMounted = n,
            this._durationInMs = o
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.WasAddressFound = this._addressFound,
            e.IsComponentMounted = this._isComponentMounted,
            e.DurationInMs = this._durationInMs,
            e
        }
    }
    t.LocationPickerResolveAddress = class extends m {
        constructor(e, t, i, n) {
            super(d.LocationPickerResolveAddress, e, t, i, n)
        }
    }
    ;
    t.LocationPickerResolveAddressFailed = class extends m {
        constructor(e, t, i, n) {
            super(d.LocationPickerResolveAddressFailed, e, t, i, n)
        }
    }
    ;
    t.LocationViewerOpen = class extends u {
        constructor(e, t) {
            super(d.LocationViewerOpen),
            this._conversationId = e,
            this._message = t,
            this._cmid = a.getClientMessageId(this._message),
            this._messageCorrelationId = o.getCorrelationIdFromMessageParts(this._message.creator, this._conversationId, this._cmid),
            this._isGroupConversation = s.isGroupConversation(this._conversationId)
        }
        getEventName() {
            return "location_viewer"
        }
        getCorrelationAttributes() {
            const e = super.getAttributes();
            return e.Message_Correlation_Id = this._messageCorrelationId,
            e.Client_Message_Id = this._cmid || "",
            e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.location_viewer_operation = "open_viewer",
            e.Clicked_Timestamp = this._eventCreationTime,
            e.Group_Conversation = this._isGroupConversation,
            e.Server_Message_Id = this._message.getOriginalServerId() || "",
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = a.getTrackableConversationId(this._message.conversationId);
            return t && (e.Conversation_Id = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    ;
    t.LocationViewerOpenGoogleMaps = class extends u {
        constructor() {
            super(d.LocationViewerOpenGoogleMaps)
        }
    }
    ;
    t.LocationViewerOpenMaps = class extends u {
        constructor() {
            super(d.LocationViewerOpenMaps)
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(0)
      , s = i(13)
      , r = i(89)
      , a = i(2);
    var l;
    !function(e) {
        e[e.Updated = 0] = "Updated",
        e[e.NotUpdated = 1] = "NotUpdated"
    }(l = t.AppUpdateStatus || (t.AppUpdateStatus = {}));
    let c = class extends s.StoreBase {
        constructor() {
            super(),
            this._isAppUpdated = !1,
            r.default.subscribeForChanges("AppStateStore", ()=>this.trigger())
        }
        getAppState() {
            return o.App.getActivationState()
        }
        getAppUpdatedStatus() {
            return this._isAppUpdated
        }
        getAppUpdateStatus() {
            return o.Storage.getItem(a.StorageItemKeys[a.StorageItemKeys.AppUpdateStatus])
        }
        setAppUpdateStatus(e) {
            const t = e ? l.Updated : l.NotUpdated;
            return this._setAppUpdatedStatus(e),
            o.Storage.setItem(a.StorageItemKeys[a.StorageItemKeys.AppUpdateStatus], l[t]).then(()=>{
                this.trigger()
            }
            )
        }
        _setAppUpdatedStatus(e=!1) {
            this._isAppUpdated = e
        }
    }
    ;
    n.__decorate([s.autoSubscribe], c.prototype, "getAppState", null),
    n.__decorate([s.autoSubscribe], c.prototype, "getAppUpdatedStatus", null),
    c = n.__decorate([s.AutoSubscribeStore], c),
    t.default = new c
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(6);
    e.exports = new class {
        openPrivacy() {
            this._openUrl(o.default.getConfigSettingsNoSubscription().privacyUrl.host)
        }
        openTerms() {
            this._openUrl(o.default.getConfigSettingsNoSubscription().termsUrl.host)
        }
        _openUrl(e) {
            n.Linking.openUrl(e)
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(52)
      , r = i(89)
      , a = i(10)
      , l = i(228)
      , c = i(55)
      , d = i(22)
      , u = i(64)
      , g = i(47);
    class h {
        constructor(e, t, i, n) {
            this.skypeMessage = e,
            this.scheduledCallInfo = {
                type: t,
                initiator: i,
                subject: n
            }
        }
    }
    t.ScheduledCallToastMessage = h;
    class p {
        constructor(e) {
            this.message = e
        }
    }
    t.SkypeNotificationToastMessage = p;
    class m {
        constructor(e, t, i) {
            this.textMessage = e,
            this.conversationId = t,
            this.onToastDismissed = i
        }
    }
    t.TextNotificationToastMessage = m;
    t.default = new class {
        constructor() {
            this.event_localNotificationReady = new s.default,
            this._notificationsToPop = [],
            this._toastCurrentlyShowing = !1,
            r.default.subscribeForChanges("ToastService", ()=>{
                this._showToastMessageIfNeeded()
            }
            )
        }
        scheduleTextMessage(e, t, i) {
            this._notificationsToPop.push(new m(e,t,i)),
            this._showToastMessageIfNeeded()
        }
        scheduleSkypeMessage(e) {
            this._notificationsToPop.push(new p(e)),
            this._showToastMessageIfNeeded()
        }
        scheduleMessageForScheduledCall(e, t, i, n) {
            this._notificationsToPop.push(new h(e,t,i,n)),
            this._showToastMessageIfNeeded()
        }
        hideCurrentToastMessage() {
            this._toastCurrentlyShowing = !1,
            this._showToastMessageIfNeeded()
        }
        showMessageForScreenReaders() {
            if (g.isMobileScreenReaderEnabled())
                if (d.default.isUsingStackNavigationContextNoSubscription()) {
                    if (u.default.isHubOnTopOfNavStackNoSubscription())
                        return !0
                } else {
                    const e = u.default.getCompositeMainStageNavViewModeNoSubscription(a.MainRootViewId);
                    if (e !== c.MainStageNavViewMode.Call && e !== c.MainStageNavViewMode.ForcedUpgradeScreen)
                        return !0
                }
            return !1
        }
        _shouldShowSkypeConversationMessages(e) {
            if (this.showMessageForScreenReaders())
                return !0;
            const t = u.default.getActiveConversationId(a.MainRootViewId);
            return !(!t || t === e.conversationId && l.isCurrentUserActive())
        }
        _showToastMessageIfNeeded() {
            const e = n.head(this._notificationsToPop);
            if (o.App.getActivationState() === o.Types.AppActivationState.Active && !this._toastCurrentlyShowing) {
                if (e && e instanceof p) {
                    if (!this._shouldShowSkypeConversationMessages(e.message))
                        return n.remove(this._notificationsToPop, e=>e instanceof p),
                        void this._showToastMessageIfNeeded()
                }
                this.event_localNotificationReady.fire(e),
                e && (this._notificationsToPop.shift(),
                this._toastCurrentlyShowing = !0)
            }
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    const n = i(33)
      , o = i(2605)
      , s = i(0)
      , r = i(13)
      , a = i(176)
      , l = i(2)
      , c = i(3)
      , d = i(277)
      , u = i(438)
      , g = i(18);
    class h extends r.ComponentBase {
        constructor(e) {
            super(e),
            this._isMuted = !1,
            this._isLoaded = !1,
            this._onVideoPlayerRef = e=>{
                this._videoPlayer = e || void 0
            }
            ,
            this._onLoadStart = ()=>{
                this._telemetryEvent = new d.FileReceived(this.props.source,this.props.sizeInBytes,void 0),
                this._telemetryEvent.startDownload(),
                this._telemetryEvent.setMediaProfile(this.props.mediaProfile),
                this._telemetryEvent.setIntent(l.MediaDownloadIntent.VideoViewer),
                this._telemetryPlaybackEvent = new u.VideoPlayback(this.props.source,this.props.mediaProvider,this.props.size,this.props.origin,this.props.amsReferences,this.props.messagetype),
                this._telemetryPlaybackEvent.setCachingStatus(!0, this.props.cacheMode, this.props.cachingDuration),
                this._telemetryPlaybackEvent.startLoad(),
                this.props.playbackIntentScenario && !this.props.playbackIntentScenario.isResolved() && (this.props.playbackIntentScenario.setDuplicateStepMarkingEnabled(),
                this.props.playbackIntentScenario.markStepCompleted("LoadStart"),
                this.props.playbackIntentScenario.setDuplicateStepMarkingEnabled(!1)),
                this.props.onLoadStart && this.props.onLoadStart()
            }
            ,
            this._onCanPlay = ()=>{
                this._telemetryPlaybackEvent && (this._telemetryPlaybackEvent.startPlay(),
                this._telemetryPlaybackEvent.setPlayStatus(!0)),
                this.props.playbackIntentScenario && !this.props.playbackIntentScenario.isResolved() && (this.props.playbackIntentScenario.markStepCompleted("UserPerception"),
                this.props.playbackIntentScenario.finish(),
                this.props.playbackIntentScenario.reset(),
                this.props.playbackIntentScenario.start()),
                this.props.onCanPlay && this.props.onCanPlay()
            }
            ,
            this._onError = e=>{
                c.log(l.LogTraceArea.VideoWithTelemetry, "Video playback failed with source: " + this.props.source + " authToken: " + (this.props.authToken ? n.pii.Omit(this.props.authToken) : "undefined") + " clientVersion: " + this._clientVersion + " loop: " + this.props.loop + " showControls: " + this.props.showControls + " preload: " + this.props.preload + " resizeMode: " + this.props.resizeMode);
                const t = e && e.error ? JSON.stringify(e.error) : "";
                this._telemetryEvent && (this._telemetryEvent.endDownload(),
                this._telemetryEvent.setSuccess(!1, l.MessagingFailureReason.AMSFailure, 1, void 0, t),
                c.track(this._telemetryEvent),
                this._telemetryEvent = void 0),
                this._telemetryPlaybackEvent ? (this._telemetryPlaybackEvent.endLoad(),
                this._telemetryPlaybackEvent.setLoadStatus(!1, 0, l.MessagingFailureReason.AMSFailure, t),
                c.track(this._telemetryPlaybackEvent),
                c.log(l.LogTraceArea.VideoWithTelemetry, "Sent video playback telemetry"),
                this._telemetryPlaybackEvent = void 0) : c.log(l.LogTraceArea.VideoWithTelemetry, "Video playback telemetry was not sent"),
                this.props.onError && this.props.onError(e)
            }
            ,
            this._onLoadedData = e=>{
                this._isLoaded = !0,
                this._telemetryPlaybackEvent && (this._telemetryPlaybackEvent.endLoad(),
                this._telemetryPlaybackEvent.setLoadStatus(!0, e.duration ? 1e3 * e.duration : 0, l.MessagingFailureReason.None)),
                this.props.onLoadedData && this.props.onLoadedData(e)
            }
            ,
            this._onEnded = ()=>{
                this._telemetryPlaybackEvent ? (this._telemetryPlaybackEvent.endPlay(),
                c.track(this._telemetryPlaybackEvent),
                c.log(l.LogTraceArea.VideoWithTelemetry, "Sent video playback telemetry"),
                this._telemetryPlaybackEvent = void 0) : c.log(l.LogTraceArea.VideoWithTelemetry, "Video playback telemetry was not sent"),
                this.props.onEnded && this.props.onEnded()
            }
            ,
            this._onWaiting = ()=>{
                this._telemetryPlaybackEvent && this._telemetryPlaybackEvent.startRebuffering(),
                this.props.onWaiting && this.props.onWaiting()
            }
            ,
            this._onPlaying = ()=>{
                this._telemetryPlaybackEvent && this._telemetryPlaybackEvent.endRebuffering(),
                this.props.onPlaying && this.props.onPlaying()
            }
            ,
            this._onCanPlayThrough = ()=>{
                this._telemetryEvent ? (this._telemetryEvent.endDownload(),
                this._telemetryEvent.setSuccess(!0, l.MessagingFailureReason.None),
                c.track(this._telemetryEvent),
                this._telemetryEvent = void 0) : c.log(l.LogTraceArea.VideoWithTelemetry, "Video playback telemetry was not sent"),
                this.props.onCanPlayThrough && this.props.onCanPlayThrough()
            }
            ,
            this._clientVersion = g.getUIVersionWithPartnerID(),
            c.log(l.LogTraceArea.VideoWithTelemetry, "Client version: " + this._clientVersion)
        }
        play() {
            this._videoPlayer && this._videoPlayer.play()
        }
        seek(e) {
            this._videoPlayer && this._videoPlayer.seek(e)
        }
        seekPercent(e) {
            this._videoPlayer && this._videoPlayer.seekPercent(e)
        }
        pause() {
            this._videoPlayer && this._videoPlayer.pause()
        }
        stop() {
            this._videoPlayer && this._videoPlayer.stop()
        }
        mute(e) {
            !!e !== this._isMuted && (this._videoPlayer && this._videoPlayer.mute(e),
            this._isMuted = e)
        }
        componentDidMount() {
            super.componentDidMount(),
            this._checkIfSourceIsValid()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            e.source === this.props.source && e.sourceObj === this.props.sourceObj || this._checkIfSourceIsValid()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._telemetryPlaybackEvent && (this._telemetryPlaybackEvent.endPlay(),
            this._isLoaded || (this._telemetryPlaybackEvent.setLoadStatus(!1, 0, l.MessagingFailureReason.None),
            this._telemetryPlaybackEvent.endLoad()),
            c.track(this._telemetryPlaybackEvent),
            c.log(l.LogTraceArea.VideoWithTelemetry, "Sent video playback telemetry"),
            this._telemetryPlaybackEvent = void 0)
        }
        render() {
            return s.createElement(o.default, {
                ref: this._onVideoPlayerRef,
                style: this.props.style,
                children: this.props.children,
                source: this.props.source,
                sourceObj: this.props.sourceObj,
                authToken: this.props.authToken,
                clientVersion: this._clientVersion,
                mediaProvider: this.props.mediaProvider,
                accessibilityLabel: this.props.accessibilityLabel,
                ariaHidden: this.props.ariaHidden,
                loop: this.props.loop,
                showControls: this.props.showControls,
                preload: this.props.preload,
                resizeMode: this.props.resizeMode,
                onLoadedData: this._onLoadedData,
                onError: this._onError,
                onProgress: this.props.onProgress,
                onSeek: this.props.onSeek,
                onLoadStart: this._onLoadStart,
                onCanPlay: this._onCanPlay,
                onCanPlayThrough: this._onCanPlayThrough,
                onEnded: this._onEnded,
                onWaiting: this._onWaiting,
                onPlaying: this._onPlaying,
                onClick: this.props.onClick,
                shouldRedirectForAndroidHLS: this.props.shouldRedirectForAndroidHLS,
                resumeAfterForeground: this.props.resumeAfterForeground
            })
        }
        _checkIfSourceIsValid() {
            this.props.source || this.props.sourceObj || c.warn(l.LogTraceArea.VideoWithTelemetry, "The video source is not valid"),
            this.props.source && a.checkIfSafeDomainToRender(this.props.source, this.props.origin)
        }
    }
    e.exports = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(298)
      , s = i(169)
      , r = i(52)
      , a = i(7)
      , l = i(6)
      , c = i(2)
      , d = i(3)
      , u = i(4)
      , g = i(240)
      , h = i(21)
      , p = i(19)
      , m = i(18)
      , S = i(830)
      , C = i(652)
      , y = i(9);
    t.default = new class {
        constructor() {
            this._pushNotificationQueue = [],
            this.event_pushNotificationQueueChanged = new r.default,
            this._localNotificationQueue = [],
            this.event_localNotificationQueueChanged = new r.default,
            this._localEngagementNotificationQueue = [],
            this.event_localEngagementNotificationQueueChanged = new r.default,
            this._trouterNotificationQueue = [],
            this.event_trouterNotificationQueueChanged = new r.default,
            this._subscriptions = [],
            h.RegisterStartupable(this, "NotificationQueueService")
        }
        startup() {
            this._clearSubscriptions(),
            this._pushNotificationQueue = [],
            this._localNotificationQueue = [],
            this._localEngagementNotificationQueue = [],
            this._subscriptions.push(s.PushNotifications.notificationReceivedEvent.subscribe(e=>{
                this._receivedPushNotifications([e])
            }
            ));
            const e = s.PushNotifications.drainInitialNotificationQueue();
            e.length && this._receivedPushNotifications(e),
            this._subscriptions.push(s.LocalNotifications.localNotificationEventReceivedEvent.subscribe(e=>{
                this._receivedLocalNotifications([e])
            }
            ));
            const t = s.LocalNotifications.drainInitialNotificationQueue();
            return t.length && this._receivedLocalNotifications(t),
            this._subscriptions.push(C.messageReceived.subscribe(e=>{
                this._receivedTrouterNotifications([e])
            }
            )),
            a.Resolved()
        }
        _clearSubscriptions() {
            const e = this._subscriptions;
            this._subscriptions = [],
            n.each(e, e=>e.unsubscribe())
        }
        unsubscribeFromAllNotifications() {
            if (this._clearSubscriptions(),
            this._appConfigStoreSubscription) {
                const e = this._appConfigStoreSubscription;
                this._appConfigStoreSubscription = void 0,
                l.default.unsubscribe(e)
            }
            return s.LocalNotifications.uninitialize(),
            s.PushNotifications.uninitialize().always(n.noop)
        }
        addPushNotificationToQueue(e, t) {
            this._pushNotificationQueue.push({
                notification: e,
                causeId: t
            })
        }
        hasQueuedPushes() {
            return this._pushNotificationQueue.length > 0
        }
        getPushNotificationQueue() {
            return n.clone(this._pushNotificationQueue)
        }
        confirmPushNotificationProcessed(e) {
            this._pushNotificationQueue = n.filter(this._pushNotificationQueue, t=>t.notification !== e),
            s.PushNotifications.acknowledgeNotificationReceived(e)
        }
        hasQueuedLocalNotifications() {
            return this._localNotificationQueue.length > 0
        }
        fetchAndDrainLocalNotificationQueue() {
            const e = this._localNotificationQueue;
            return this._localNotificationQueue = [],
            e
        }
        fetchAndDrainLocalEngagementNotificationQueue() {
            const e = this._localEngagementNotificationQueue;
            return this._localEngagementNotificationQueue = [],
            e
        }
        hasQueuedTrouterNotifications() {
            return this._trouterNotificationQueue.length > 0
        }
        fetchAndDrainTrouterNotificationQueue() {
            const e = this._trouterNotificationQueue;
            return this._trouterNotificationQueue = [],
            e
        }
        handleLocalNoticationAction(e) {
            return o.default.requestMaxTime("Notifications:quickreply").then(t=>{
                const i = Object.assign(Object.assign({}, e), {
                    wakeLockId: t
                });
                this._receivedLocalNotifications([i])
            }
            ).catch(e=>{
                d.error(c.LogTraceArea.Push, "_handleLocalNoticationAction, Failed to get wakelock - " + (e ? p.errorAsString(e) : ""))
            }
            ).always(()=>{}
            )
        }
        initializePushNotifications() {
            const e = {
                categories: this._getSupportedLocalNotificationCategories(),
                enableAlertNotifications: l.default.getS4LNativePlatformsEcsConfig().enableAlertNotifications
            };
            return s.PushNotifications.initialize(e)
        }
        initializeLocalNotifications() {
            const e = {
                categories: this._getSupportedLocalNotificationCategories()
            };
            return s.LocalNotifications.initialize(e)
        }
        _receivedPushNotifications(e) {
            const t = y.newCauseId();
            d.log(c.LogTraceArea.Push, "notificationReceivedEvent causeId: " + t),
            this._pushNotificationQueue.push(...n.map(e, e=>({
                notification: e,
                causeId: t
            }))),
            this.event_pushNotificationQueueChanged.fire()
        }
        _receivedLocalNotifications(e) {
            const t = y.newCauseId();
            d.log(c.LogTraceArea.Notifications, "localNotificationEventReceivedEvent causeId: " + t);
            const i = n.partition(e, e=>e.category === S.TPUM_CATEGORY_IDENTIFIER || e.category === g.LocalNotificationIds.SIGNIN_REMINDER_IDENTIFIER || e.category === g.LocalNotificationIds.SIGNOUT_REMINDER_IDENTIFIER);
            i[0].length && (this._localEngagementNotificationQueue.push(...n.map(e, e=>({
                notification: e,
                causeId: t
            }))),
            this.event_localEngagementNotificationQueueChanged.fire()),
            i[1].length && (this._localNotificationQueue.push(...n.map(e, e=>({
                notification: e,
                causeId: t
            }))),
            this.event_localNotificationQueueChanged.fire())
        }
        _receivedTrouterNotifications(e) {
            const t = y.newCauseId();
            d.log(c.LogTraceArea.Notifications, "trouterNotificationReceivedEvent causeId: " + t),
            this._trouterNotificationQueue.push(...n.map(e, e=>({
                notification: e,
                causeId: t
            }))),
            this.event_trouterNotificationQueueChanged.fire()
        }
        _getSupportedLocalNotificationCategories() {
            let e = [];
            const t = {
                title: u.getString("LocalNotificationCallCategory.AcceptEventTitle"),
                identifier: g.LocalNotificationIds.CALL_ACTION_ACCEPT_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Foreground,
                icon: g.LocalNotificationIds.CALL_ACTION_ACCEPT_ICON
            }
              , i = {
                title: u.getString("LocalNotificationCallCategory.RejectEventTitle"),
                identifier: g.LocalNotificationIds.CALL_ACTION_REJECT_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Background,
                icon: g.LocalNotificationIds.CALL_ACTION_REJECT_ICON
            };
            e.push({
                identifier: g.LocalNotificationIds.CALL_CATEGORY_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: [t, i]
            });
            const n = {
                title: u.getString("LocalNotificationGoLiveCategory.JoinEventTitle"),
                identifier: g.LocalNotificationIds.GO_LIVE_ACTION_JOIN_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Foreground
            };
            e.push({
                identifier: g.LocalNotificationIds.GO_LIVE_CATEGORY_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: [n]
            });
            const o = {
                title: u.getString("LocalNotificationCallCategory.CallBackEventTitle"),
                identifier: g.LocalNotificationIds.CALLBACK_REMINDER_ACTION_CALL_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Foreground
            };
            e.push({
                identifier: g.LocalNotificationIds.CALLBACK_REMINDER_CATEGORY_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: [o]
            });
            const r = {
                title: u.getString("LocalNotificationChatCategory.ThumbsUp"),
                identifier: g.LocalNotificationIds.CHAT_ACTION_THUMBSUP_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Background,
                icon: g.LocalNotificationIds.CHAT_ACTION_THUMBSUP_ICON
            };
            let a;
            a = m.getPlatformType() === c.PlatformType.Android ? m.getAndroidOSVersionCode() >= 24 ? {
                title: u.getString("LocalNotificationChatCategory.Reply"),
                identifier: g.LocalNotificationIds.CHAT_ACTION_REPLY_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Background,
                behavior: s.NotificationActionBehavior.TextInput,
                textInputLabel: u.getString("LocalNotificationChatCategory.SendButton"),
                icon: g.LocalNotificationIds.CHAT_ACTION_REPLY_ICON
            } : {
                title: u.getString("LocalNotificationChatCategory.Reply"),
                identifier: g.LocalNotificationIds.CHAT_ACTION_REPLY_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Foreground,
                icon: g.LocalNotificationIds.CHAT_ACTION_REPLY_ICON
            } : {
                title: u.getString("LocalNotificationChatCategory.Reply"),
                identifier: g.LocalNotificationIds.CHAT_ACTION_REPLY_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Background,
                behavior: s.NotificationActionBehavior.TextInput,
                textInputLabel: u.getString("LocalNotificationChatCategory.SendButton"),
                icon: g.LocalNotificationIds.CHAT_ACTION_REPLY_ICON
            };
            const d = [r, a]
              , h = l.default.getS4LMessagingFeaturesNoSubscription().enableMarkAsReadNotificationAction;
            if (h || m.getPlatformType() === c.PlatformType.Android) {
                let e = {
                    title: u.getString("LocalNotificationChatCategory.MarkAsRead"),
                    identifier: g.LocalNotificationIds.CHAT_ACTION_MARK_AS_READ_IDENTIFIER,
                    activationMode: s.NotificationActionActivationMode.Background,
                    behavior: s.NotificationActionBehavior.Default,
                    isForCarOnly: !h
                };
                d.push(e)
            }
            e.push({
                identifier: g.LocalNotificationIds.CHAT_CATEGORY_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: d
            });
            const p = {
                title: u.getString("LocalNotificationCallCategory.CallBackEventTitle"),
                identifier: g.LocalNotificationIds.MISSED_CALL_BACK_IDENTIFIER,
                activationMode: s.NotificationActionActivationMode.Foreground
            };
            e.push({
                identifier: g.LocalNotificationIds.MISSED_CALL_CATEGORY_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: [p]
            }),
            e.push({
                identifier: g.LocalNotificationIds.MISSED_P2P_CALL_CATEGORY_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: S.TPUM_CATEGORY_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.E2EE_CATEGORY_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.INBOUND_VIDEO_CALL_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.LOGOUT_REMINDER_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            });
            const C = {
                title: u.getString("ScheduledCallCard.AcceptButton"),
                identifier: g.LocalNotificationIds.SCHEDULED_CALL_INVITE_ACCEPT,
                activationMode: s.NotificationActionActivationMode.Background
            }
              , y = {
                title: u.getString("ScheduledCallCard.DeclineButton"),
                identifier: g.LocalNotificationIds.SCHEDULED_CALL_INVITE_DECLINE,
                activationMode: s.NotificationActionActivationMode.Background
            };
            return e.push({
                identifier: g.LocalNotificationIds.SCHEDULED_CALL_INVITE,
                context: s.NotificationCategoryContext.Minimal,
                actions: [C, y, a]
            }),
            e.push({
                identifier: g.LocalNotificationIds.SCHEDULED_CALL_INVITE_EDIT,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.SCHEDULED_CALL_INVITE_RESPONSE,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.SCHEDULED_CALL_REMINDER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.SCHEDULED_CALL_PREREMINDER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.POLL_REMINDER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.POLL_PREREMINDER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.SIGNIN_REMINDER_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e.push({
                identifier: g.LocalNotificationIds.SIGNOUT_REMINDER_IDENTIFIER,
                context: s.NotificationCategoryContext.Minimal,
                actions: []
            }),
            e
        }
        test_reset() {
            this._pushNotificationQueue = [],
            this._localNotificationQueue = [],
            this._localEngagementNotificationQueue = [],
            this._trouterNotificationQueue = [],
            this._clearSubscriptions()
        }
    }
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(326);
    const n = i(4)
      , o = {
        AED: "د.إ",
        AFN: "؋",
        ALL: "L",
        ANG: "ƒ",
        AOA: "Kz",
        ARS: "$",
        AUD: "$",
        AWG: "ƒ",
        AZN: "₼",
        BAM: "KM",
        BBD: "$",
        BDT: "৳",
        BGN: "лв",
        BHD: ".د.ب",
        BIF: "FBu",
        BMD: "$",
        BND: "$",
        BOB: "Bs.",
        BRL: "R$",
        BSD: "$",
        BTC: "฿",
        BTN: "Nu.",
        BWP: "P",
        BYR: "p.",
        BZD: "BZ$",
        CAD: "$",
        CDF: "FC",
        CHF: "Fr.",
        CLP: "$",
        CNY: "¥",
        COP: "$",
        CRC: "₡",
        CUC: "$",
        CUP: "₱",
        CVE: "$",
        CZK: "Kč",
        DJF: "Fdj",
        DKK: "kr",
        DOP: "RD$",
        DZD: "دج",
        EEK: "kr",
        EGP: "£",
        ERN: "Nfk",
        ETB: "Br",
        ETH: "Ξ",
        EUR: "€",
        FJD: "$",
        FKP: "£",
        GBP: "£",
        GEL: "₾",
        GGP: "£",
        GHC: "₵",
        GHS: "GH₵",
        GIP: "£",
        GMD: "D",
        GNF: "FG",
        GTQ: "Q",
        GYD: "$",
        HKD: "$",
        HNL: "L",
        HRK: "kn",
        HTG: "G",
        HUF: "Ft",
        IDR: "Rp",
        ILS: "₪",
        IMP: "£",
        INR: "₹",
        IQD: "ع.د",
        IRR: "﷼",
        ISK: "kr",
        JEP: "£",
        JMD: "J$",
        JPY: "¥",
        KES: "KSh",
        KGS: "лв",
        KHR: "៛",
        KMF: "CF",
        KPW: "₩",
        KRW: "₩",
        KYD: "$",
        KZT: "₸",
        LAK: "₭",
        LBP: "£",
        LKR: "₨",
        LRD: "$",
        LSL: "M",
        LTC: "Ł",
        LTL: "Lt",
        LVL: "Ls",
        MAD: "MAD",
        MDL: "lei",
        MGA: "Ar",
        MKD: "ден",
        MMK: "K",
        MNT: "₮",
        MOP: "MOP$",
        MUR: "₨",
        MVR: "Rf",
        MWK: "MK",
        MXN: "$",
        MYR: "RM",
        MZN: "MT",
        NAD: "$",
        NGN: "₦",
        NIO: "C$",
        NOK: "kr",
        NPR: "₨",
        NZD: "$",
        OMR: "﷼",
        PAB: "B/.",
        PEN: "S/.",
        PGK: "K",
        PHP: "₱",
        PKR: "₨",
        PLN: "zł",
        PYG: "Gs",
        QAR: "﷼",
        RMB: "￥",
        RON: "lei",
        RSD: "Дин.",
        RUB: "₽",
        RWF: "R₣",
        SAR: "﷼",
        SBD: "$",
        SCR: "₨",
        SDG: "ج.س.",
        SEK: "kr",
        SGD: "$",
        SHP: "£",
        SLL: "Le",
        SOS: "S",
        SRD: "$",
        SSP: "£",
        STD: "Db",
        SVC: "$",
        SYP: "£",
        SZL: "E",
        THB: "฿",
        TJS: "SM",
        TMT: "T",
        TND: "د.ت",
        TOP: "T$",
        TRL: "₤",
        TRY: "₺",
        TTD: "TT$",
        TVD: "$",
        TWD: "NT$",
        TZS: "TSh",
        UAH: "₴",
        UGX: "USh",
        USD: "$",
        UYU: "$U",
        UZS: "лв",
        VEF: "Bs",
        VND: "₫",
        VUV: "VT",
        WST: "WS$",
        XAF: "FCFA",
        XBT: "Ƀ",
        XCD: "$",
        XOF: "CFA",
        XPF: "₣",
        YER: "﷼",
        ZAR: "R",
        ZWD: "Z$"
    };
    t.getCurrencySymbol = function(e) {
        return o[e] || e
    }
    ,
    t.getFormattedRate = function(e, t, i, o=0) {
        const s = Math.max(i, o)
          , r = Math.min(i, o);
        {
            let i = n.getLocale();
            return e.toLocaleString(i, {
                style: "currency",
                currency: t,
                maximumFractionDigits: s,
                minimumFractionDigits: r
            })
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(56)
      , o = i(846)
      , s = i(1123)
      , r = i(3);
    t.default = class {
        static potentiallyMarkCommandSelected(e, t, i) {
            if (t === n.MessageRenderOrigin.StackGalleryCanvas || t === n.MessageRenderOrigin.CompositeGalleryCanvas) {
                const t = s.GalleryTelemetryScenario.getInstance();
                t && t.markStreamItemCommandSelected(e, i),
                r.track(new o.GalleryCommandSelectedEvent(e,i))
            }
        }
        static potentiallyMarkItemViewed(e, t) {
            if (t === n.MessageRenderOrigin.StackGalleryCanvas || t === n.MessageRenderOrigin.CompositeGalleryCanvas) {
                const t = s.GalleryTelemetryScenario.getInstance();
                t && t.markItemViewed(e),
                r.track(new o.GalleryItemViewedEvent(e))
            }
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(127)
      , r = i(20)
      , a = i(39)
      , l = i(159);
    var c, d, u, g, h;
    !function(e) {
        e[e.ReactionsSummaryViewed = 0] = "ReactionsSummaryViewed",
        e[e.ReactionsSummaryClicked = 1] = "ReactionsSummaryClicked",
        e[e.ReactionsPanelListItemClicked = 2] = "ReactionsPanelListItemClicked",
        e[e.OpenedReactionPicker = 3] = "OpenedReactionPicker",
        e[e.ReactionAdded = 4] = "ReactionAdded",
        e[e.ReactionRemoved = 5] = "ReactionRemoved"
    }(c || (c = {}));
    class p extends s.MessageTelemetryBase {
        constructor(e, t) {
            super(e, e.conversationId),
            this._actionType = t,
            this._isOwnMessage = r.isMyMri(e.creator)
        }
        getAttributes() {
            const e = this._useOldAttributeNames() ? {
                my_message: this._isOwnMessage
            } : {
                Action: c[this._actionType],
                IsOwnMessage: this._isOwnMessage
            };
            return o.assign({}, super.getAttributes(), e)
        }
    }
    t.ReactionsSummaryViewed = class extends p {
        constructor(e) {
            super(e, c.ReactionsSummaryViewed),
            this._skypeMessageLocal = e,
            this._reactionAttributesOldFormat = this.getReactionAttributesOldFormat()
        }
        getEventName() {
            return "reaction_action"
        }
        getEventTraceMode() {
            return a.TelemetryTraceMode.EventName
        }
        getReactionAttributesOldFormat() {
            let e = {};
            const t = this._skypeMessageLocal.getReactions();
            e.Unique_Reactions_Count = t.length;
            let i = 0;
            return o.each(t, (t,n)=>{
                i = n + 1,
                e["reaction" + i + "_key"] = t.key,
                e["reaction" + i + "_count"] = t.users.length
            }
            ),
            e
        }
        getAttributes() {
            let e = super.getAttributes();
            return o.assign(e, this._reactionAttributesOldFormat),
            e.Action = "reactionsSummaryViewed",
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    ;
    t.ReactionsSummaryClickTelemetry = class extends p {
        constructor(e, t, i) {
            super(t, c.ReactionsSummaryClicked),
            this._reactionKey = e,
            this._mriCount = i
        }
        getEventName() {
            return "reaction_summary_click"
        }
        getEventTraceMode() {
            return a.TelemetryTraceMode.EventName
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.reaction_key = this._reactionKey,
            e.reaction_mri_count = this._mriCount,
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    ;
    class m extends a.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._reactionKey = e,
            this._conversationId = t,
            this._mriCount = i,
            this._actionName = c[c.ReactionsPanelListItemClicked]
        }
        getEventName() {
            return "messaging_reaction"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this._actionName,
            e.ReactionKey = this._reactionKey,
            e.ReactionMriCount = this._mriCount,
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = l.getTrackableConversationId(this._conversationId);
            return t && (e.ConversationId = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.ReactionPanelListItem = m,
    function(e) {
        e[e.ArrowNavigation = 0] = "ArrowNavigation",
        e[e.Swipe = 1] = "Swipe"
    }(d = t.ReactionNavigationAction || (t.ReactionNavigationAction = {})),
    function(e) {
        e[e.ReactionsPopupMenu = 0] = "ReactionsPopupMenu",
        e[e.ReactionsActionSheet = 1] = "ReactionsActionSheet"
    }(u = t.ReactionOriginType || (t.ReactionOriginType = {}));
    t.ReactionPickerTelemetry = class extends p {
        constructor(e, t) {
            super(e, c.OpenedReactionPicker),
            this._origin = t
        }
        getEventName() {
            return "messaging_reaction"
        }
        recordUserAction(e) {
            this._navigation = d[e]
        }
        recordReactionAdded(e) {
            this._reactionActionData = e,
            this._reactionActionData.reactionAdded ? this._actionType = c.ReactionAdded : this._actionType = c.ReactionRemoved
        }
        getAttributes() {
            const e = {
                Navigation: this._navigation,
                Origin: u[this._origin]
            };
            return this._reactionActionData && (e.ReactionLevel = this._reactionActionData.reactionLevel,
            e.ReactionKey = this._reactionActionData.reaction,
            e.IsCustomReaction = this._reactionActionData.isCustomReaction,
            e.IsTonedReaction = !o.isUndefined(this._reactionActionData.reactionTone),
            o.isUndefined(this._reactionActionData.success) || (e.Success = this._reactionActionData.success)),
            o.assign({}, super.getAttributes(), e)
        }
    }
    ;
    class S extends a.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._action = e,
            this._props = t
        }
        getEventName() {
            return "messaging_reaction"
        }
        getAttributes() {
            var e;
            return o.assign({}, super.getAttributes(), {
                Action: g[this._action],
                ReactionsCount: null === (e = this._props) || void 0 === e ? void 0 : e.numberOfReactions
            })
        }
    }
    t.ReactionsManipulationTelemetry = S,
    function(e) {
        e[e.ReactionListBatchAdd = 0] = "ReactionListBatchAdd",
        e[e.ReactionListBatchRemove = 1] = "ReactionListBatchRemove",
        e[e.LastReactionRemovedCallReset = 2] = "LastReactionRemovedCallReset",
        e[e.ReactionListReset = 3] = "ReactionListReset"
    }(g = t.ReactionsManipulationAction || (t.ReactionsManipulationAction = {}));
    class C extends a.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._action = e,
            this._props = t
        }
        getEventName() {
            return "messaging_reaction"
        }
        getAttributes() {
            var e, t, i;
            return o.assign({}, super.getAttributes(), {
                Action: h[this._action],
                ReactionsCount: null === (e = this._props) || void 0 === e ? void 0 : e.numberOfReactions,
                AddedReactionsCount: null === (t = this._props) || void 0 === t ? void 0 : t.numberOfAddedReactions,
                NotSavedReactionsCount: null === (i = this._props) || void 0 === i ? void 0 : i.numberOfNotSavedReactions
            })
        }
    }
    t.CustomReactionsManipulationTelemetry = C,
    function(e) {
        e[e.CustomReactionsPanelOpened = 0] = "CustomReactionsPanelOpened",
        e[e.ReactionsSavedOnDoneButton = 1] = "ReactionsSavedOnDoneButton",
        e[e.ReactionsNotSavedOnCloseButton = 2] = "ReactionsNotSavedOnCloseButton"
    }(h = t.CustomReactionsManipulationAction || (t.CustomReactionsManipulationAction = {}))
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(151)
      , s = i(27)
      , r = i(5)
      , a = i(11)
      , l = i(14)
      , c = i(15)
      , d = i(12)
      , u = r.lazyProperties({
        pickerChevron: ()=>n.Styles.createTextStyle({
            marginLeft: 4,
            marginTop: 2
        })
    });
    class g extends d.default {
        constructor() {
            super(...arguments),
            this._onFocusableComponentRef = e=>{
                this._focusableElement = e || void 0
            }
        }
        requestFocus() {
            this.isComponentMounted() && this._focusableElement && this._focusableElement.requestFocus && this._focusableElement.requestFocus()
        }
        blur() {
            this.isComponentMounted() && this._focusableElement && this._focusableElement.blur && this._focusableElement.blur()
        }
        render() {
            const e = [l.noncollapsibleView, this.props.style]
              , t = [u.pickerChevron, this.props.chevronStyle]
              , i = [];
            let r;
            return this.props.labelMaxWidth && i.push(n.Styles.createTextStyle({
                maxWidth: this.props.labelMaxWidth
            }, !1)),
            this.props.labelColor ? i.push(n.Styles.createTextStyle({
                color: this.props.labelColor
            }, !1)) : this._useAccessibleTheme() && i.push(this._themeStyles.primaryTextColorStyle),
            r = this.props.useBodyBoldLabel ? n.createElement(c.BodyText, {
                bold: !0,
                size: c.BodyTextSize.SmallDeprecated,
                style: [this._themeStyles.secondaryTextColorStyle, i],
                numberOfLines: 1
            }, this.props.label) : n.createElement(c.Subtitle, {
                style: i,
                numberOfLines: 1
            }, this.props.label),
            n.createElement(o.HoverableButton, Object.assign({}, this.props, {
                ref: this._onFocusableComponentRef,
                style: e,
                accessibilityTraits: [n.Types.AccessibilityTrait.Button, n.Types.AccessibilityTrait.HasPopup]
            }), r, n.createElement(s.default, {
                icon: a.SkypeIcon.DownChevron,
                size: a.IconSize.size10,
                color: this.props.overrideIconColor || this._themeColors.secondaryTextColor,
                style: t
            }))
        }
    }
    e.exports = g
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(39);
    var s, r, a;
    !function(e) {
        e[e.MessageStream = 0] = "MessageStream",
        e[e.GroupProfile = 1] = "GroupProfile",
        e[e.ConversationHeader = 2] = "ConversationHeader",
        e[e.AddToGroup = 3] = "AddToGroup",
        e[e.QuickCallPanel = 4] = "QuickCallPanel",
        e[e.CallRosterPanel = 5] = "CallRosterPanel",
        e[e.Unknown = 6] = "Unknown"
    }(s = t.ShareGroupButtonOrigin || (t.ShareGroupButtonOrigin = {})),
    function(e) {
        e[e.MessageStream = 0] = "MessageStream"
    }(r = t.InviteMorePeopleButtonOrigin || (t.InviteMorePeopleButtonOrigin = {})),
    function(e) {
        e[e.ShareGroupButtonClicked = 0] = "ShareGroupButtonClicked",
        e[e.InviteMorePeopleButtonClicked = 1] = "InviteMorePeopleButtonClicked"
    }(a || (a = {})),
    t.getShareButtonOriginFromSearchResultsListOrigin = function(e) {
        let t;
        switch (e) {
        case n.SearchResultsListOrigin.AddingPeopleToGroup:
            t = s.AddToGroup;
            break;
        case n.SearchResultsListOrigin.QuickCallPanel:
            t = s.QuickCallPanel;
            break;
        default:
            t = s.Unknown
        }
        return t
    }
    ;
    class l extends o.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "people_group_engagement"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = a[this._action],
            e
        }
    }
    t.ShareGroupButtonClickedEvent = class extends l {
        constructor(e) {
            super(a.ShareGroupButtonClicked),
            this._origin = e
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = s[this._origin],
            e
        }
    }
    ;
    t.InviteMorePeopleButtonClickedEvent = class extends l {
        constructor(e) {
            super(a.InviteMorePeopleButtonClicked),
            this._origin = e
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = r[this._origin],
            e
        }
    }
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(117)
      , o = i(0)
      , s = i(10)
      , r = i(5)
      , a = i(22)
      , l = i(24)
      , c = i(8)
      , d = i(23)
      , u = i(59)
      , g = i(12);
    var h, p;
    !function(e) {
        e[e.None = 0] = "None",
        e[e.Thin = 1] = "Thin",
        e[e.Thick = 2] = "Thick"
    }(h = t.BorderWidth || (t.BorderWidth = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Small = 1] = "Small",
        e[e.Medium = 2] = "Medium",
        e[e.Desktop = 3] = "Desktop"
    }(p = t.BadgeSize || (t.BadgeSize = {}));
    const m = r.lazyProperties({
        defaultBadge: ()=>o.Styles.createViewStyle({
            justifyContent: "center",
            alignItems: "center",
            height: 24,
            minWidth: 24,
            borderRadius: 12,
            backgroundColor: c.Color.gray300
        }),
        defaultBadgeSmall: ()=>o.Styles.createViewStyle({
            height: 12,
            minWidth: 12,
            borderRadius: 6
        }),
        defaultBadgeMedium: ()=>o.Styles.createViewStyle({
            height: 20,
            minWidth: 20,
            borderRadius: 10
        }),
        defaultBadgeText: ()=>o.Styles.createTextStyle({
            color: c.Color.white,
            font: d.font.uiDisplayBold,
            fontSize: d.controlFontSize.smallBadge,
            lineHeight: d.controlFontSize.smallBadge,
            textAlign: "center",
            textAlignVertical: "center",
            backgroundColor: c.Color.transparent
        }),
        defaultBadgeTextSmall: ()=>o.Styles.createTextStyle({
            fontSize: d.controlFontSize.tinyBadge,
            lineHeight: d.controlFontSize.tinyBadge
        }),
        defaultBadgeTextMedium: ()=>o.Styles.createTextStyle({
            fontSize: d.controlFontSize.smallBadge,
            lineHeight: d.controlFontSize.smallBadge
        }),
        badgeDarkBackground: ()=>o.Styles.createViewStyle({
            backgroundColor: c.Color.white
        }),
        badgeTextLight: ()=>o.Styles.createTextStyle({
            color: c.Color.white
        }),
        badgeTextDark: ()=>o.Styles.createTextStyle({
            color: c.Color.gray400
        }),
        badgeIOS: ()=>o.Styles.createTextStyle({
            paddingBottom: 1
        }),
        badgeAndroid: ()=>o.Styles.createViewStyle({
            paddingRight: .5
        }),
        badgeSingleDigit: ()=>o.Styles.createViewStyle({
            width: 24
        }),
        badgeSingleDigitSmall: ()=>o.Styles.createViewStyle({
            width: 12
        }),
        badgeSingleDigitMedium: ()=>o.Styles.createViewStyle({
            width: 20
        }),
        badgeDoubleDigit: ()=>o.Styles.createViewStyle({
            paddingHorizontal: 4
        }),
        badgeWithBorder: ()=>o.Styles.createViewStyle({
            borderColor: c.Color.white,
            borderWidth: 1,
            borderStyle: "solid"
        }),
        badgeWithThickBorder: ()=>o.Styles.createViewStyle({
            borderColor: c.Color.white,
            borderWidth: 2,
            borderStyle: "solid"
        }),
        gradientView: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
            backgroundColor: c.Color.transparent
        }),
        gradientViewWithBorder: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: -1,
            top: -1,
            right: 0,
            bottom: 0,
            backgroundColor: c.Color.transparent
        }),
        compositeNav: ()=>r.lazyProperties({
            defaultBadge: ()=>o.Styles.createViewStyle({
                height: 16,
                borderRadius: 8,
                minWidth: 16,
                paddingHorizontal: 4
            }),
            badgeSingleDigit: ()=>o.Styles.createViewStyle({
                width: 16
            })
        })
    });
    class S extends g.default {
        _buildState(e, t) {
            return {
                useMobileUI: a.default.isUsingStackNavigationContext() || u.useTabletUI(),
                contentSizeMultiplier: e.fixedSize ? 1 : l.default.getContentSizeMultiplier()
            }
        }
        _useDesktopBadges() {
            return !this.state.useMobileUI || this.props.badgeSize === p.Desktop
        }
        render() {
            let e, t = [m.defaultBadge];
            const i = [m.defaultBadgeText]
              , r = [m.badgeTextLight];
            if (this._useDesktopBadges() && t.push(m.compositeNav.defaultBadge),
            this.props.darkBackground)
                t.push(m.badgeDarkBackground),
                r.push(m.badgeTextDark);
            else {
                const e = this.props.isHighPriority ? this._themeStyles.primaryBadgeColorStyle : this._themeStyles.secondaryBadgeColorStyle;
                !this.props.colorStyle || e && !this.props.themeOverride ? e && t.push(e) : t.push(this.props.colorStyle),
                this._themeStyles.primaryBadgeTextColorStyle && r.push(this._themeStyles.primaryBadgeTextColorStyle)
            }
            let a;
            if (this.props.badgeSize === p.Small ? (i.push(m.defaultBadgeTextSmall),
            t.push(m.defaultBadgeSmall)) : this.props.badgeSize === p.Medium && (i.push(m.defaultBadgeTextMedium),
            t.push(m.defaultBadgeMedium)),
            this.props.rawCount && this.props.rawCount < 10 ? this.props.badgeSize === p.Small ? t.push(m.badgeSingleDigitSmall) : this.props.badgeSize === p.Medium ? t.push(m.badgeSingleDigitMedium) : t.push(this._useDesktopBadges() ? m.compositeNav.badgeSingleDigit : m.badgeSingleDigit) : t.push(m.badgeDoubleDigit),
            this.state.contentSizeMultiplier > 1) {
                let e = this._useDesktopBadges() ? 16 : 24;
                this.props.badgeSize === p.Small ? e = 12 : this.props.badgeSize === p.Medium && (e = 20);
                const i = e * Math.min(this.state.contentSizeMultiplier, s.MaxContentSizeMultiplier);
                t.push(o.Styles.createViewStyle({
                    borderRadius: i / 2,
                    height: i,
                    minWidth: i
                }, !1)),
                this.props.rawCount && this.props.rawCount < 10 && t.push(o.Styles.createViewStyle({
                    width: i
                }, !1))
            }
            this.props.gradientColors && (a = o.createElement(n.GradientView, {
                style: [...t, this.props.borderColor ? m.gradientViewWithBorder : m.gradientView],
                colors: this.props.gradientColors,
                direction: n.GradientDirection.BOTTOM_RIGHT
            })),
            (this.props.borderColor || this.props.borderWidth) && (t.push(this.props.borderWidth === h.Thick ? m.badgeWithThickBorder : m.badgeWithBorder),
            this.props.borderColor && t.push(o.Styles.createViewStyle({
                borderColor: this.props.borderColor
            }, !1))),
            i.push(r),
            t.push(this.props.style);
            const l = this.props.rawCount ? o.createElement(o.Text, {
                style: i,
                numberOfLines: 1,
                allowFontScaling: !this.props.fixedSize
            }, this.props.count || "") : void 0;
            return e = o.createElement(o.Animated.View, {
                style: [t, this.props.style],
                blockPointerEvents: this.props.blockPointerEvents,
                importantForAccessibility: this.props.importantForAccessibility
            }, a, l),
            e
        }
    }
    t.BadgeCounter = S,
    t.default = S
}
, , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(18)
      , s = i(39);
    var r;
    !function(e) {
        e[e.CreateSkypeOrder = 0] = "CreateSkypeOrder",
        e[e.GetAtuContract = 1] = "GetAtuContract",
        e[e.ReactivateCredit = 2] = "ReactivateCredit",
        e[e.GetNonceForSsoLogin = 3] = "GetNonceForSsoLogin",
        e[e.GetCurrencyConversion = 4] = "GetCurrencyConversion",
        e[e.ProcessIOSTransaction = 5] = "ProcessIOSTransaction",
        e[e.ValidateIOSProductAvailability = 6] = "ValidateIOSProductAvailability",
        e[e.ProcessIOSLegacyReceipt = 7] = "ProcessIOSLegacyReceipt",
        e[e.ProcessIOSReceipt = 8] = "ProcessIOSReceipt",
        e[e.PostIOSTransactionStatus = 9] = "PostIOSTransactionStatus",
        e[e.CancelIOSOrder = 10] = "CancelIOSOrder",
        e[e.GetOrderDetails = 11] = "GetOrderDetails",
        e[e.GetAtuLimits = 12] = "GetAtuLimits",
        e[e.CancelAtu = 13] = "CancelAtu",
        e[e.EnableAtu = 14] = "EnableAtu",
        e[e.GetPurchaseOptions = 15] = "GetPurchaseOptions",
        e[e.GetCallerIDSettings = 16] = "GetCallerIDSettings",
        e[e.GetCallingDestinations = 17] = "GetCallingDestinations",
        e[e.GetOffersCredit = 18] = "GetOffersCredit",
        e[e.GetOffersSubscriptions = 19] = "GetOffersSubscriptions",
        e[e.GetAvailableCountries = 20] = "GetAvailableCountries",
        e[e.GetCountryAreas = 21] = "GetCountryAreas",
        e[e.GetCountryPrefixes = 22] = "GetCountryPrefixes",
        e[e.GetCountryAreaPrefixes = 23] = "GetCountryAreaPrefixes",
        e[e.GetSuggestedNumberByCountry = 24] = "GetSuggestedNumberByCountry",
        e[e.GetSuggestedNumberByPrefix = 25] = "GetSuggestedNumberByPrefix",
        e[e.ReserveSkypeNumber = 26] = "ReserveSkypeNumber",
        e[e.GetConsumerEntitlement = 27] = "GetConsumerEntitlement",
        e[e.FetchSkypeNumbers = 28] = "FetchSkypeNumbers",
        e[e.GetEntitlementRecommendations = 29] = "GetEntitlementRecommendations",
        e[e.GetSubscriptionOffers = 30] = "GetSubscriptionOffers",
        e[e.GetUpgradeRecommendations = 31] = "GetUpgradeRecommendations",
        e[e.GetCallEventRecommendations = 32] = "GetCallEventRecommendations"
    }(r = t.StratusApiTelemetry || (t.StratusApiTelemetry = {}));
    class a extends s.TelemetryEventBase {
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.ApiTelemetryEventBase = a;
    t.CommerceStratusRequest = class extends a {
        constructor(e) {
            super(),
            this._props = {},
            this._props.ApiFunction = r[e],
            this._startTime = Date.now()
        }
        getEventName() {
            return "s4l_stratus_commerce"
        }
        getAriaTenantTokenOverride() {
            return o.getAriaCommerceTenantToken()
        }
        getActionName() {
            return "StratusRequest"
        }
        stopTimer() {
            return this._props.TimeSpent = String(Date.now() - this._startTime),
            this
        }
        addAttributes(e) {
            return this._props.Method = e.method,
            this._props.AcceptType = e.acceptType,
            this._props.EndpointUrl = e.endpointUrl,
            this._props.StatusCode = e.statusCode,
            this._props.StratusStatusCode = e.stratusStatusCode,
            this
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._props)
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.VerticalStack = 0] = "VerticalStack",
        e[e.HorizontalStack = 1] = "HorizontalStack"
    }(t.SimpleDialogButtonAlignment || (t.SimpleDialogButtonAlignment = {}))
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(115)
      , r = i(557)
      , a = i(10)
      , l = i(143)
      , c = i(43)
      , d = i(2)
      , u = i(3)
      , g = i(38)
      , h = i(184)
      , p = i(37)
      , m = i(19)
      , S = i(18)
      , C = i(14)
      , y = i(29)
      , f = {
        x: 15,
        y: 15
    };
    class _ extends c.default {
        constructor() {
            super(...arguments),
            this._animatedOpacityValue = new o.Animated.Value(0),
            this._animatedTranslateYValue = new o.Animated.Value(0),
            this._animatedTranslateXValue = new o.Animated.Value(0),
            this._animatedTranslateYStyle = o.Styles.createAnimatedViewStyle({
                transform: [{
                    translateY: this._animatedTranslateYValue
                }]
            }),
            this._animatedTranslateXStyle = o.Styles.createAnimatedViewStyle({
                transform: [{
                    translateX: this._animatedTranslateXValue
                }]
            }),
            this._animatedOpacityStyle = o.Styles.createAnimatedViewStyle({
                opacity: this._animatedOpacityValue
            }),
            this._onContainerViewRef = e=>{
                this._popupContainerView = e || void 0
            }
        }
        _buildState(e, t) {
            const i = p.default.horizontalInsets(a.HorizontalInsetDefault);
            if (t) {
                let t = !1;
                if (e.getAnchorInfo) {
                    const i = e.getAnchorInfo();
                    t = !!i && !!i.hidden
                }
                return {
                    isMeasuringPopup: !0,
                    anchorOffset: 0,
                    popupY: 0,
                    popupX: 0,
                    popupWidth: 0,
                    popupHeight: 0,
                    constrainedPopupWidth: 0,
                    constrainedPopupHeight: 0,
                    anchorHidden: t,
                    safeAreaInsets: i
                }
            }
            return {
                safeAreaInsets: i
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            u.log(d.LogTraceArea.CoachMarks, "PopupContainer.componentDidMount"),
            this.props.disablePositionAnimation && (this._animatedTranslateYValue.setValue(0),
            this._animatedTranslateXValue.setValue(0)),
            this._recalcPosition(),
            this.props.timeoutMs && (this._dismissalTimeout = y.setTimeout(()=>{
                this._dismissPopup(this.props.animateDismissal)
            }
            , this.props.timeoutMs))
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            if (super.UNSAFE_componentWillUpdate(e, t, i),
            t.anchorPosition !== this.state.anchorPosition)
                if (e.disablePositionAnimation)
                    this._animatedTranslateYValue.setValue(0),
                    this._animatedTranslateXValue.setValue(0);
                else {
                    let i = t.anchorPosition;
                    e.getAnimationDirection && (i = e.getAnimationDirection(t.anchorHidden)),
                    this._positionPopupForPresentation(i)
                }
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            !this.state.isMeasuringPopup && t.isMeasuringPopup && this._presentPopup()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._dismissalTimeout && this._dismissPopup()
        }
        updatePosition(e) {
            e && e.rect && this.state.popupHeight && this.state.popupWidth ? this._recalcPositionFromLayoutData(e.rect, {
                width: this.state.popupWidth,
                height: this.state.popupHeight
            }, !!e.hidden) : this._recalcPosition(e)
        }
        dismiss(e=!1) {
            this._dismissPopup(e)
        }
        render() {
            const e = this.state.anchorPosition || s.PopupAnchorPositon.Bottom
              , t = this.props.renderPopup(e, this.state.anchorOffset || 0, this.state.constrainedPopupWidth || 0, this.state.constrainedPopupHeight || 0, this.state.anchorHidden);
            if (this.props.shareContainerLayoutInfo) {
                const e = {
                    width: this.state.popupWidth || 0,
                    height: this.state.popupHeight || 0,
                    x: this.state.popupX || 0,
                    y: this.state.popupY || 0
                };
                this.props.shareContainerLayoutInfo(e)
            }
            const i = S.isRTL()
              , n = o.Styles.createViewStyle({
                position: "absolute",
                top: this.state.popupY,
                right: i ? this.state.popupX : void 0,
                left: i ? void 0 : this.state.popupX,
                alignItems: "flex-start",
                alignSelf: "flex-start",
                overflow: "visible"
            }, !1);
            return o.createElement(o.Animated.View, {
                accessibilityTraits: o.Types.AccessibilityTrait.Dialog,
                ref: this._onContainerViewRef,
                style: [n, this._animatedTranslateYStyle],
                blockPointerEvents: !this.props.allowTaps,
                ignorePointerEvents: this.props.ignorePointerEvents,
                importantForAccessibility: this.props.preventFocus ? o.Types.ImportantForAccessibility.NoHideDescendants : void 0
            }, o.createElement(o.Animated.View, {
                style: [C.overflowVisible, this._animatedTranslateXStyle],
                ignorePointerEvents: this.props.ignorePointerEvents
            }, o.createElement(o.Animated.View, {
                style: [C.overflowVisible, this._animatedOpacityStyle],
                ignorePointerEvents: this.props.ignorePointerEvents
            }, t)))
        }
        _animationPosition(e, t) {
            let i;
            switch (i = this.props.animationConfig ? t ? this.props.animationConfig.dismissOffset || f : this.props.animationConfig.presentOffset || f : f,
            e) {
            case s.PopupAnchorPositon.Left:
                return {
                    x: -1 * i.x,
                    y: 0
                };
            case s.PopupAnchorPositon.Right:
                return {
                    x: i.x,
                    y: 0
                };
            case s.PopupAnchorPositon.Top:
                return {
                    x: 0,
                    y: i.y
                };
            default:
            case s.PopupAnchorPositon.Bottom:
                return {
                    x: 0,
                    y: -1 * i.y
                }
            }
        }
        _positionPopupForPresentation(e) {
            const t = this._animationPosition(e, !1);
            this._animatedTranslateXValue.setValue(t.x),
            this._animatedTranslateYValue.setValue(t.y)
        }
        _presentPopup() {
            this._animatePopup({
                x: 0,
                y: 0
            }, 1)
        }
        _dismissPopupWithAnimation(e, t) {
            this._animatePopup(this._animationPosition(e, !0), 0, t)
        }
        _animatePopup(e, t, i) {
            const n = this.props.animationConfig && this.props.animationConfig.duration ? this.props.animationConfig.duration : 200
              , s = this.props.animationConfig && this.props.animationConfig.easing ? this.props.animationConfig.easing : o.Animated.Easing.OutBack();
            o.Animated.parallel([h.timing(this._animatedOpacityValue, {
                toValue: t,
                duration: n / 2,
                easing: o.Animated.Easing.Out(),
                useNativeDriver: !0
            }), h.timing(this._animatedTranslateYValue, {
                toValue: e.y,
                duration: n,
                easing: s,
                useNativeDriver: !0
            }), h.timing(this._animatedTranslateXValue, {
                toValue: e.x,
                duration: n,
                easing: s,
                useNativeDriver: !0
            })]).start(i)
        }
        _recalcPosition(e) {
            if (!this.isComponentMounted())
                return;
            const t = (e,t=!1)=>{
                const i = n.clone(e);
                this.props.containerOffsetX && (i.x -= this.props.containerOffsetX),
                this.props.containerOffsetY && (i.y -= this.props.containerOffsetY),
                this.isComponentMounted() && this._popupContainerView && (this.state.popupWidth && this.state.popupHeight ? this._recalcPositionFromLayoutData(i, {
                    width: this.state.popupWidth,
                    height: this.state.popupHeight
                }, t) : l.default.measureLayoutRelativeToWindow(()=>this._popupContainerView).then(e=>{
                    this.isComponentMounted() && this._recalcPositionFromLayoutData(i, e, t)
                }
                , e=>{
                    u.warn(d.LogTraceArea.CoachMarks, "Container not measured: " + m.errorAsString(e))
                }
                ))
            }
            ;
            let i, o;
            if (e && e.rect)
                i = e.rect,
                o = !!e.hidden;
            else {
                const e = this.props.getAnchorInfo ? this.props.getAnchorInfo() : void 0;
                if (e && e.rect)
                    i = e.rect,
                    o = !!e.hidden;
                else if (this.props.getAnchorElement)
                    return void n.defer(()=>{
                        if (this.props.getAnchorElement) {
                            const e = this.props.getAnchorElement();
                            this.isComponentMounted() && e && l.default.measureLayoutRelativeToWindow(this.props.getAnchorElement).then(t, e=>{
                                u.warn(d.LogTraceArea.CoachMarks, "Anchor not measured: " + m.errorAsString(e))
                            }
                            )
                        }
                    }
                    )
            }
            n.defer(()=>t(i, o))
        }
        _recalcPositionFromLayoutData(e, t, i=!1) {
            if (t && t.width > 0 && t.height > 0) {
                if (!(e && e.width > 0 && e.height > 0))
                    return void this._dismissPopup();
                const o = n.extend({}, this.state);
                o.anchorHidden = i,
                o.isMeasuringPopup && (o.isMeasuringPopup = !1,
                o.popupWidth = t.width,
                o.popupHeight = t.height);
                const s = this.props.getPopupPositions ? this.props.getPopupPositions(i) : void 0
                  , a = r.default.popupPosition(e, o.safeAreaInsets, o.popupWidth || 0, o.popupHeight || 0, s, this._getRootViewId());
                a && (o.popupY = a.popupTop,
                o.popupX = a.popupLeft,
                o.anchorOffset = a.anchorOffset,
                o.anchorPosition = a.anchorPosition,
                o.constrainedPopupWidth = a.constrainedPopupWidth,
                o.constrainedPopupHeight = a.constrainedPopupHeight),
                g.default(o, this.state) || this.setState(o)
            }
        }
        _dismissPopup(e=!1) {
            if (u.log(d.LogTraceArea.CoachMarks, "PopupContainer._dismissPopup, animated: " + e),
            this._stopDismissalTimeout(),
            e) {
                let e = this.state.anchorPosition;
                this.props.getAnimationDirection && (e = this.props.getAnimationDirection(this.state.anchorHidden)),
                this._dismissPopupWithAnimation(e, this.props.onDismissPopup)
            } else
                this.props.onDismissPopup && this.props.onDismissPopup()
        }
        _stopDismissalTimeout() {
            this._dismissalTimeout && (y.clearTimeout(this._dismissalTimeout),
            this._dismissalTimeout = void 0)
        }
    }
    e.exports = _
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2557)
      , o = i(7);
    t.getFileInformation = e=>n.default.getFileInformation(e),
    t.fileExists = e=>n.default.fileExists(e),
    t.openFile = e=>o.Rejected(new Error("Failed to open file")),
    t.openFileLocation = e=>o.Resolved(!1),
    t.openFolderLocation = e=>o.Resolved(!1),
    t.addMediaToSkypeAlbum = e=>n.default.addMediaToSkypeAlbum(e)
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(6)
      , s = i(4)
      , r = i(803)
      , a = i(306)
      , l = i(18)
      , c = i(1053)
      , d = i(35)
      , u = i(9);
    t.addCommonTrackingParams = function(e, t, i, n) {
        const o = i ? s.getLocale() : l.getSystemLanguage();
        return e = d.default.addUrlParameter(e, "lang", o, t),
        e = d.default.addUrlParameter(e, "p", l.getSkypePlatformId().toString(), t),
        e = d.default.addUrlParameter(e, "v", l.getAppVersion(), t),
        e = d.default.addUrlParameter(e, "e", c.UIFactor[c.UIFactorHelper.getUIFactor()], t),
        n && (e = d.default.addUrlParameter(e, "tcg", n, t)),
        e
    }
    ,
    t.isUserVoiceLinkEnabled = function() {
        return o.default.getS4LUiFeatures().enableUserVoiceLink && s.isEnglishLanguage()
    }
    ,
    t.getUserVoiceLinkUrl = function() {
        return o.default.getConfigSettings().go.host + o.default.getConfigSettings().feedbackAndProblemGoParam.userVoice
    }
    ,
    t.getTelemetryCorrelationId = function() {
        return u.newGuid()
    }
    ,
    t.isSsoEnabled = function() {
        return o.default.getFeedbackFeatures().forceSsoFlow
    }
    ,
    t.getHelpAndFeedbackUrl = function(e, t, i) {
        let s = o.default.getConfigSettings().go.host + e;
        return s = r.addDefaultParamsToUrl(s, t, !0),
        s = d.default.addUrlParameters(s, n.pickBy(i, a.isQueryParameterOverrideValid)),
        d.default.getUrlParameterValue(s, "lang") && (s = d.default.addUrlParameter(s, "setlang", "")),
        s
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(805)
      , s = i(0)
      , r = i(13)
      , a = i(6)
      , l = i(1059)
      , c = i(14);
    class d extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._animationCount = 0,
            this._animatedOpacityValue = new s.Animated.Value(0),
            this._animatedOpacityStyle = s.Styles.createAnimatedViewStyle({
                opacity: this._animatedOpacityValue
            }),
            this._onAEAnimationViewRef = e=>{
                this._aeAnimationView = e || void 0,
                this._aeAnimationView && (this.props.startPaused ? this._aeAnimationView.reset() : this.props.delay ? (this._aeAnimationView.reset(),
                n.delay(()=>{
                    this.isComponentMounted() && this.play()
                }
                , this.props.delay)) : this._aeAnimationView.play())
            }
        }
        _buildState(e, t) {
            return {
                isEnabled: a.default.getS4LUiFeatures().jsonAnimationEnabled
            }
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            this._currentAnimation = this._getAnimationContext(this.props)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this.props.animation.key === e.animation.key && this.props.tintColor === e.tintColor || (this._animationCount++,
            this._currentAnimation = this._getAnimationContext(e))
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.props.animation.key !== e.animation.key && this._aeAnimationView && this.isComponentMounted() && this._aeAnimationView.play()
        }
        play() {
            this._animatedOpacityValue.setValue(1),
            this._aeAnimationView && this._aeAnimationView.play()
        }
        reset() {
            this._aeAnimationView && this._aeAnimationView.reset()
        }
        _getAnimationContext(e) {
            return l.default.getAssetSourceWithColor(e.animation, e.tintColor)
        }
        render() {
            const e = this.props.animation;
            let t = this._currentAnimation && this.state.isEnabled ? s.createElement(o.default, Object.assign({}, this._currentAnimation, {
                key: "animation" + this._animationCount,
                ref: this._onAEAnimationViewRef,
                style: c.flexOne,
                loop: this.props.loop
            })) : null;
            if (this.props.hiddenWhileWaiting && (t = s.createElement(s.Animated.View, {
                style: [c.flexOne, this._animatedOpacityStyle]
            }, t)),
            this.props.sizeToFit)
                return t;
            {
                const i = this.props.shortSide || (this.props.preferHeight ? e.intrinsicSize.height : e.intrinsicSize.width)
                  , n = i / (this.props.preferHeight ? e.intrinsicSize.height : e.intrinsicSize.width)
                  , o = s.Styles.createViewStyle({
                    width: this.props.preferHeight ? n * e.intrinsicSize.width : i,
                    height: this.props.preferHeight ? i : n * e.intrinsicSize.height
                }, !1);
                let r = s.createElement(s.View, {
                    style: o
                }, t);
                if (e.containerSize) {
                    const t = e.containerOffset ? e.containerOffset.y * n : 0
                      , o = e.containerOffset ? e.containerOffset.x * n : 0
                      , a = s.Styles.createViewStyle({
                        width: this.props.preferHeight ? n * e.containerSize.width : i,
                        height: this.props.preferHeight ? i : n * e.containerSize.height,
                        top: t < 0 ? t : 0,
                        left: o < 0 ? o : 0,
                        paddingTop: t >= 0 ? t : 0,
                        paddingLeft: o >= 0 ? o : 0
                    }, !1);
                    r = s.createElement(s.View, {
                        style: a
                    }, r)
                }
                return r
            }
        }
    }
    e.exports = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(89)
      , s = i(6)
      , r = i(304)
      , a = i(2)
      , l = i(2)
      , c = i(3)
      , d = i(277)
      , u = i(804)
      , g = i(394)
      , h = i(18)
      , p = i(29);
    let m, S, C, y, f, _ = 0, b = !1;
    function v() {
        const e = n.App.getActivationState() === n.Types.AppActivationState.Active;
        e !== b && (b = e,
        e ? P(a.AppEntryPoint.Foregrounded) : m && (p.clearTimeout(m),
        T()))
    }
    function T() {
        m = void 0;
        let e = u.default.getMccCode()
          , t = u.default.getMncCode();
        e && t || (e = h.getMccCode(),
        t = h.getMncCode()),
        c.log(l.LogTraceArea.Startup, "Sending KpiActivityStarted: " + a.AppEntryPoint[C]);
        const i = new d.KpiActivityStarted({
            startTime: y,
            entryPoint: C,
            isCortanaEligible: s.default.getS4LCortanaFeatures().enabled,
            isCortanaOptIn: r.optedInToCortana(),
            isSuggestionsEnabled: g.getSuggestionsEnabled(),
            mccCode: e,
            mncCode: t,
            startUiParams: f
        });
        c.track(i),
        y = void 0,
        C = void 0,
        f = {}
    }
    function P(e) {
        (!C || e > C) && (C = e,
        S = C,
        _ = Date.now() + s.default.getS4LSisuFeatures().msaConvergenceFlags.entryPointStalenessWindow,
        y = Date.now()),
        m || (m = p.setTimeout(T, 1e4))
    }
    t.startingUi = function(e) {
        P(a.AppEntryPoint.Opened),
        o.default.subscribeForChanges("KpiActivityStartedTelemetryService", v),
        v(),
        f = e
    }
    ,
    t.trackEntryPoint = P,
    t.getMaxEntryPoint = function() {
        return C
    }
    ,
    t.getLastReportedMaxEntryPoint = function(e=!1) {
        return C || (Date.now() < _ || e ? S : void 0)
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(33)
      , s = i(13)
      , r = i(7)
      , a = i(79)
      , l = i(191)
      , c = i(2)
      , d = i(3)
      , u = i(21)
      , g = i(18)
      , h = i(29);
    var p;
    !function(e) {
        e[e.AnySync = 0] = "AnySync",
        e[e.AnyMessages = 1] = "AnyMessages",
        e[e.ConversationList = 2] = "ConversationList"
    }(p = t.TriggerKeys || (t.TriggerKeys = {}));
    let m = class extends s.StoreBase {
        constructor() {
            super(250),
            this._isSyncingConversationList = !1,
            this._isSyncingMessages = !1,
            this._pendingConversationTriggers = {},
            u.RegisterStartupable(this, "SyncStatusStore", [a])
        }
        startup() {
            return a.disconnected.subscribe(()=>{
                this.trigger(),
                this._checkSyncingMessages(),
                this._checkSyncingConversationList()
            }
            ),
            a.reconnected.subscribe(()=>{
                this.trigger(),
                this._checkSyncingMessages(),
                this._checkSyncingConversationList()
            }
            ),
            l.default.syncStarted.subscribe(()=>{
                this.trigger(p.AnySync)
            }
            ),
            l.default.syncComplete.subscribe(()=>{
                const e = Date.now().valueOf() - g.getAppInitTime();
                d.log(c.LogTraceArea.LowBandwidth, "<NFR> || Warm_Startup || Latency || " + e),
                this.trigger(p.AnySync),
                this._checkSyncingMessages(),
                this._checkSyncingConversationList()
            }
            ),
            l.default.conversationListSyncStarted.subscribe(()=>{
                this._checkSyncingConversationList()
            }
            ),
            l.default.conversationListSyncComplete.subscribe(()=>{
                this._checkSyncingConversationList()
            }
            ),
            l.default.startedSyncingConversation.subscribe(e=>{
                this._ensureRemovedTimeout(e),
                d.log(c.LogTraceArea.SyncStatus, "SyncStatusStore startedSyncingConversation Scheduled: conversationId = " + o.pii.Mri(e)),
                this._pendingConversationTriggers[e] = h.setTimeout(()=>{
                    this._ensureRemovedTimeout(e),
                    d.log(c.LogTraceArea.SyncStatus, "SyncStatusStore startedSyncingConversation Fulfilled: conversationId = " + o.pii.Mri(e)),
                    this.trigger(e),
                    this._checkSyncingMessages()
                }
                , 3e3)
            }
            ),
            l.default.finishedSyncingConversation.subscribe(e=>{
                this._pendingConversationTriggers[e] ? d.log(c.LogTraceArea.SyncStatus, "SyncStatusStore finishedSyncingConversation Dropped: conversationId = " + o.pii.Mri(e)) : (d.log(c.LogTraceArea.SyncStatus, "SyncStatusStore finishedSyncingConversation Fulfilled: conversationId = " + o.pii.Mri(e)),
                this.trigger(e),
                this._checkSyncingMessages())
            }
            ),
            r.Resolved()
        }
        _ensureRemovedTimeout(e) {
            return !!this._pendingConversationTriggers[e] && (h.clearTimeout(this._pendingConversationTriggers[e]),
            delete this._pendingConversationTriggers[e],
            !0)
        }
        _checkSyncingConversationList() {
            const e = this._isSyncingConversationList;
            this._isSyncingConversationList = a.isConnected() && l.default.isConversationListDirty(),
            e !== this._isSyncingConversationList && this.trigger(p.ConversationList)
        }
        _checkSyncingMessages() {
            const e = this._isSyncingMessages;
            this._isSyncingMessages = a.isConnected() && l.default.isSyncingMessages(),
            e !== this._isSyncingMessages && this.trigger(p.AnyMessages)
        }
        _isConversationSyncingFromService(e) {
            return a.isConnected() && (l.default.isSyncingMessagesForConversation(e) || l.default.isSyncingThreadDetailsForConversation(e))
        }
        isSyncingAnything() {
            return a.isConnected() && l.default.isCurrentlySyncing()
        }
        isSyncingMessages() {
            return this._isSyncingMessages
        }
        isSyncingConversationList() {
            return this._isSyncingConversationList
        }
        isConversationSyncing(e) {
            return !this._pendingConversationTriggers[e] && this._isConversationSyncingFromService(e)
        }
    }
    ;
    n.__decorate([s.autoSubscribeWithKey(p.AnySync)], m.prototype, "isSyncingAnything", null),
    n.__decorate([s.autoSubscribeWithKey(p.AnyMessages)], m.prototype, "isSyncingMessages", null),
    n.__decorate([s.autoSubscribeWithKey(p.ConversationList)], m.prototype, "isSyncingConversationList", null),
    n.__decorate([s.autoSubscribe, n.__param(0, s.key)], m.prototype, "isConversationSyncing", null),
    m = n.__decorate([s.AutoSubscribeStore], m),
    t.default = new m
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(635)
      , r = i(70)
      , a = i(7)
      , l = i(10)
      , c = i(2)
      , d = i(3)
      , u = i(75)
      , g = i(171)
      , h = i(21)
      , p = i(19)
      , m = i(25);
    t.default = new class {
        constructor() {
            h.RegisterStartupable(this, "PublicDownloadsFolderService", [u.default])
        }
        startup() {
            return a.Resolved()
        }
        copyToDownloadsFolder(e, t) {
            return s.default.copyToDownloadFolder(e, t).then(o.identity, e=>{
                d.error(c.LogTraceArea.PublicDownloadsFolderService, "Failed to copy file to public Downloads folder: " + p.errorAsString(e))
            }
            )
        }
        copyToUri(e, t) {
            return s.default.copyToUri(e, t).then(o.identity, e=>{
                d.error(c.LogTraceArea.PublicDownloadsFolderService, "Failed to copy file to path [" + n.pii.Omit(t) + " ]: " + p.errorAsString(e))
            }
            )
        }
        androidRemoveFromPublicFolder(e) {
            return s.default.removeFromDownloadFolder(e).catch(t=>(d.error(c.LogTraceArea.PublicDownloadsFolderService, "Failed to remove file " + n.pii.Omit(e) + "from android public folder after timeout: is there anything we can do? " + p.errorAsString(t)),
            !1))
        }
        requestCameraRollPermission() {
            const e = m.PermissionType.CameraRoll;
            return u.default.permissionStatus(e) === r.PermissionStatus.Granted ? a.Resolved(!0) : (d.log(c.LogTraceArea.PublicDownloadsFolderService, "Checking for CameraRoll permission"),
            u.default.requestPermission(e, m.PermissionPromptOptions.SkipPrePrompt | m.PermissionPromptOptions.PromptAgainIfDenied).then(t=>t === r.PermissionStatus.Granted ? (d.log(c.LogTraceArea.PublicDownloadsFolderService, "CameraRoll permission granted"),
            !0) : (g.showDeniedPromptWithSettingsOption(e, l.MainRootViewId),
            d.log(c.LogTraceArea.PublicDownloadsFolderService, "CameraRoll permission declined"),
            !1)).catch(e=>(d.log(c.LogTraceArea.PublicDownloadsFolderService, "CameraRoll permission error", p.errorAsString(e)),
            !1)))
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(821)
      , r = i(0)
      , a = i(13)
      , l = i(7)
      , c = i(6)
      , d = i(1078)
      , u = i(48)
      , g = i(158)
      , h = i(675)
      , p = i(303)
      , m = i(2)
      , S = i(141)
      , C = i(3)
      , y = i(2608)
      , f = i(34)
      , _ = i(21)
      , b = i(19)
      , v = i(29)
      , T = i(35);
    let P = class extends a.StoreBase {
        constructor() {
            super(),
            this._prefetchState = {},
            this._ongoingRequests = {},
            this._attemptedTokenRefresh = {},
            this._dbPersistQueue = [],
            this._started = !1,
            this._debouncedFlushDbQueue = o.debounce(()=>{
                if (!this._started)
                    return;
                if (this._dbPersistQueue.length <= 0)
                    return;
                const e = this._dbPersistQueue;
                this._dbPersistQueue = [],
                u.default.putImagePrefetchRecords(e)
            }
            , 2e3),
            _.RegisterStartupable(this, "PrefetchedImagesStore")
        }
        startup() {
            return S.default.queueIdleTask("PrefetchedImagesStore", S.TaskTypeFlags.CpuIntensive, ()=>u.default.getAllImagePrefetchInfo().then(e=>{
                const t = Date.now()
                  , i = o.partition(e, e=>e.expiration > t);
                o.each(i[0], e=>{
                    e.state === h.ImagePrefetchState.Prefetched && (this._prefetchState[e.url] = e)
                }
                ),
                u.default.removeImagePrefetchInfo(o.map(i[1], e=>e.url)),
                this._started = !0,
                this._debouncedFlushDbQueue()
            }
            )),
            l.Resolved()
        }
        isImagePrefetched(e, t=!0, i=!0) {
            return this.getImagePrefetchState(e, t, i) === h.ImagePrefetchState.Prefetched
        }
        getImagePrefetchState(e, t=!0, i=!0) {
            const n = this._prefetchState[e]
              , r = n ? n.state : h.ImagePrefetchState.None;
            if (r !== h.ImagePrefetchState.Prefetched) {
                const i = this._stringifyState(r);
                C.log(m.LogTraceArea.PrefetchedImagesStore, `Image not prefetched, state: ${i}, trigger prefetch: ${t}, url: ` + f.dev_unknownOmit(e))
            }
            const a = c.default.getS4LMessagingFeaturesNoSubscription().nativeEmoticonCacheLoggingSampleRate
              , l = c.default.getS4LMessagingFeaturesNoSubscription().nativeEmoticonCacheTelemetrySampleRate
              , d = g.random()
              , u = a && 0 === Math.floor(d * a)
              , S = i && l && 0 === Math.floor(d * l);
            if (u || S) {
                const t = r === h.ImagePrefetchState.Prefetched;
                s.default.isImageCached(e).then(i=>{
                    if (u && C.log(m.LogTraceArea.PrefetchedImagesStore, `Image present in native cache: ${i}, prefetched: ${t}, url: ` + f.dev_unknownOmit(e)),
                    S) {
                        const t = p.getBaseUrl()
                          , n = t && o.startsWith(e, t) ? new y.QueryPrefetchedEmoticonImage(r,i,e) : new y.QueryPrefetchedImage(r,i);
                        C.track(n)
                    }
                }
                )
            }
            return this._getImagePrefetchStateImpl(e, t)
        }
        _getImagePrefetchStateImpl(e, t) {
            if (!this._prefetchState[e])
                return t && this.prefetch(e),
                h.ImagePrefetchState.None;
            if (t) {
                const t = this._prefetchState[e];
                if (Date.now() + 2592e6 - t.expiration > 864e5 && (t.expiration = Date.now() + 2592e6,
                this._dbPut(t)),
                t.state === h.ImagePrefetchState.Failed && Date.now() - t.lastUpdate > 3e5)
                    return t.retryCount = 0,
                    this.prefetch(e),
                    h.ImagePrefetchState.Prefetching
            }
            return this._prefetchState[e].state
        }
        _dbPut(e) {
            o.remove(this._dbPersistQueue, t=>t.url === e.url),
            this._dbPersistQueue.push(e),
            this._debouncedFlushDbQueue()
        }
        _delayRetry(e) {
            v.setTimeout(()=>{
                this.prefetch(e)
            }
            , 1e3)
        }
        _stringifyState(e) {
            return h.ImagePrefetchState[e] || e.toString()
        }
        _setRecordState(e, t) {
            if (t !== e.state) {
                const i = this._stringifyState(e.state)
                  , n = this._stringifyState(t);
                C.log(m.LogTraceArea.PrefetchedImagesStore, `Image prefetch state updated ${i}->${n}, url: ${f.dev_unknownOmit(e.url)}`),
                e.state = t
            }
        }
        prefetch(e) {
            if (!T.default.isUrlValid(e))
                return C.warn(m.LogTraceArea.PrefetchedImagesStore, f.dev_unknownOmit(e) + " is not a valid url"),
                l.Resolved(!1);
            if (this._ongoingRequests[e])
                return this._ongoingRequests[e];
            let t;
            return this._prefetchState[e] ? (t = Object.assign({}, this._prefetchState[e]),
            this._setRecordState(t, h.ImagePrefetchState.Prefetching),
            t.expiration = Date.now() + 2592e6) : (t = {
                url: e,
                state: h.ImagePrefetchState.None,
                retryCount: 0,
                expiration: Date.now() + 2592e6
            },
            this._setRecordState(t, h.ImagePrefetchState.Prefetching),
            this._prefetchState[e] = t),
            this._dbPut(t),
            this._ongoingRequests[e] = r.Image.prefetch(e).then(()=>(this._setRecordState(t, h.ImagePrefetchState.Prefetched),
            t.lastUpdate = Date.now(),
            this._prefetchState[e] = t,
            this._dbPut(t),
            this.trigger(e),
            delete this._ongoingRequests[e],
            !0)).fail(i=>{
                this._prefetchState[e].retryCount < 3 ? (this._setRecordState(t, h.ImagePrefetchState.Failed),
                ++t.retryCount,
                t.lastUpdate = Date.now(),
                this._prefetchState[e] = t,
                this._dbPut(t),
                C.log(m.LogTraceArea.PrefetchedImagesStore, `Image failed (err: ${b.errorAsString(i)}) to load: ${f.dev_unknownOmit(e)}, nth try: ${this._prefetchState[e].retryCount}`),
                this._attemptedTokenRefresh[e] ? (C.log(m.LogTraceArea.PrefetchedImagesStore, "Image already attempted to refresh the token before this error response.", f.dev_unknownOmit(e)),
                this._delayRetry(e)) : (this._attemptedTokenRefresh[e] = !0,
                d.attemptTokenRefresh(e).always(()=>{
                    this._delayRetry(e)
                }
                ))) : C.log(m.LogTraceArea.PrefetchedImagesStore, "Image failed to load: " + f.dev_unknownOmit(e)),
                this.trigger(e),
                delete this._ongoingRequests[e]
            }
            ),
            this._ongoingRequests[e]
        }
        test_reset() {
            this._prefetchState = {},
            this._ongoingRequests = {},
            this._attemptedTokenRefresh = {},
            this._dbPersistQueue = [],
            this._started = !1
        }
    }
    ;
    n.__decorate([a.autoSubscribe, n.__param(0, a.key)], P.prototype, "isImagePrefetched", null),
    n.__decorate([a.autoSubscribe, n.__param(0, a.key)], P.prototype, "getImagePrefetchState", null),
    P = n.__decorate([a.AutoSubscribeStore], P),
    t.default = new P
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(70)
      , s = (i(314),
    i(555))
      , r = i(0)
      , a = i(7)
      , l = i(786)
      , c = i(491)
      , d = i(1022)
      , u = i(2609)
      , g = i(65)
      , h = i(6)
      , p = i(834)
      , m = i(1024)
      , S = i(31)
      , C = i(442)
      , y = i(61)
      , f = i(114)
      , _ = i(1092)
      , b = i(264)
      , v = i(265)
      , T = i(79)
      , P = i(57)
      , A = i(153)
      , k = i(161)
      , I = i(191)
      , w = i(16)
      , N = i(10)
      , M = i(207)
      , E = i(69)
      , x = i(300)
      , D = i(30)
      , L = i(588)
      , R = i(691)
      , B = i(304)
      , O = i(281)
      , F = i(130)
      , V = i(245)
      , U = i(2622)
      , H = i(2623)
      , W = i(590)
      , z = i(160)
      , G = i(163)
      , K = i(202)
      , j = i(2)
      , q = i(551)
      , Q = i(1099)
      , X = i(98)
      , J = i(3)
      , $ = i(585)
      , Y = i(584)
      , Z = i(1524)
      , ee = i(836)
      , te = i(453)
      , ie = i(694)
      , ne = i(4)
      , oe = i(266)
      , se = i(147)
      , re = i(506)
      , ae = i(179)
      , le = i(446)
      , ce = i(678)
      , de = i(243)
      , ue = (i(339),
    i(1060))
      , ge = i(20)
      , he = i(17)
      , pe = i(55)
      , me = i(22)
      , Se = i(97)
      , Ce = i(75)
      , ye = i(171)
      , fe = i(91)
      , _e = i(695)
      , be = i(93)
      , ve = i(833)
      , Te = i(87)
      , Pe = i(360)
      , Ae = i(1526)
      , ke = i(34)
      , Ie = i(365)
      , we = i(140)
      , Ne = i(156)
      , Me = i(21)
      , Ee = i(19)
      , xe = i(18)
      , De = i(11)
      , Le = i(25)
      , Re = i(2631)
      , Be = i(53)
      , Oe = i(295)
      , Fe = i(35)
      , Ve = i(9)
      , Ue = i(448)
      , He = i(388)
      , We = i(696)
      , ze = "bot"
      , Ge = "highlights"
      , Ke = "invite"
      , je = ["call", "chat", "settings", "openapp", "generalsettings", "notificationssettings", "choosecolor", "chooseprofilepic", "newgroupcall", "closeexternalbrowser", "engagementsharecontent", "backgroundexecution", "meetnow", "meetnowjoin"]
      , qe = /^buycredit/i;
    const Qe = new class {
        getUrlForCompositeConversationNavigationContext(e) {
            let t = "/";
            return t = xe.getFrontendBaseUrl() + "/",
            e && (t += e.state.otherPartyMri || e.state.conversationId),
            t
        }
        getUrlForNavigationContextStack(e) {
            let t = "/";
            if (t = xe.getFrontendBaseUrl() + "/",
            e) {
                let i = n.last(e);
                if (i instanceof pe.MobileContentPanelNavigationContext) {
                    let e = i.getConversationContext();
                    e && (t += e.state.otherPartyMri || e.state.conversationId)
                } else
                    i instanceof pe.DetailsNavigationContext && (t += i.state.mri)
            }
            return t
        }
        getNavigationActionForDeepLink(e, t, i, r=!1, l, d, S) {
            const f = Ve.newCauseId();
            if (J.log(j.LogTraceArea.Navigation, `getNavigationActionForDeepLink: [${ke.dev_unknownOmit(e)}] causeId: ` + f),
            !Fe.default.isUrlValid(e))
                return J.error(j.LogTraceArea.Navigation, `getNavigationActionForDeepLink: invalid url [${ke.dev_unknownOmit(e)}] causeId: ` + f),
                a.Resolved(void 0);
            const P = Fe.default.getURIComponents(e);
            P && (P.type !== Oe.UrlType.Web || P.pathname || P.queryParameterString) && J.track(new H.OpenDeepLinkEvent(P,d));
            const I = P && P.queryParameterKeyValues && P.queryParameterKeyValues[$.WebLauncherOriginParamName] === $.WebLauncherOriginParamValue;
            if (P && n.includes(["http", "https"], P.protocol)) {
                const o = P.host && P.host.toLowerCase()
                  , s = P.pathname ? n.compact(P.pathname.split("/")) : [];
                if (n.startsWith(e, xe.getFrontendBaseUrl())) {
                    const e = Fe.default.getUrlParamsInFragment(xe.getLoadPathFragment());
                    if (e) {
                        const t = e.state
                          , {parameterKeyValues: i} = Fe.default.parseParameterPairs(t.split("&"))
                          , n = i.auth_source;
                        if (n && "cortana" === n.toLowerCase()) {
                            if ("access_denied" === e.error)
                                return a.Resolved(void 0);
                            const t = e.access_token
                              , n = Number(e.expires_in);
                            if (!t || !Be.isTokenReasonableAsHeader(t) || n <= 0)
                                return a.Resolved(void 0);
                            Be.default.useCortanaToken(t, n),
                            J.track(new O.CortanaAuthEvent(j.CortanaAuthStep.InAppAuthCompleted,j.CortanaAuthOrigin.BrowserRedirect));
                            const o = i.botAuthUrl;
                            o && L.authorize(decodeURIComponent(o), !1, j.CortanaAuthOrigin.BrowserRedirect),
                            A.getCortanaConversation().then(e=>{
                                if (e) {
                                    const e = i.contextConversationId
                                      , t = i.openNotebook;
                                    R.handleCortanaRedirectNavigation(e, "true" === t)
                                }
                            }
                            )
                        }
                    }
                }
                const c = "latest-join.skype.com" === o
                  , d = "join.skype.com" === o || c;
                if (o === xe.getFrontendHost() || d)
                    if (2 === s.length) {
                        const o = s[0].toLowerCase();
                        if (o === ze) {
                            const e = s[1] ? w.sanitizeMri(s[1], w.Namespaces.Bot) : void 0;
                            if (e)
                                return a.Resolved({
                                    intent: ue.Intent.Chat,
                                    action: ()=>this._navigateTo1on1Conversation(e, t, i)
                                })
                        } else if (o === Ke && d)
                            return l && (l.markStepCompleted("AppInstalledOneOnOneInvite"),
                            r && l.markStepCompleted("LaunchedFromExternalApp")),
                            m.handleAutoBuddyInviteLinkFromUrl(e, l).catch(e=>{
                                J.warn(j.LogTraceArea.Navigation, "Failed to process invite link: " + Ee.errorAsString(e));
                                const t = ne.getString("UrlConverter.ProcessingInviteLinkFailedMessage");
                                return g.default.showOKAlert(t, void 0, N.MainRootViewId),
                                l && (l.markStepCompleted("ProcessingInviteLinkFailed"),
                                l.fail("ProcessingInviteLinkFailed " + Ee.errorAsString(e))),
                                a.Resolved(n.noop)
                            }
                            ).then(e=>({
                                intent: ue.Intent.Other,
                                action: e
                            }))
                    } else {
                        if (1 === s.length) {
                            if (d) {
                                const e = s[0];
                                return I && (i = j.BrowserOrigin.WebLauncher),
                                Y.default.resolveJoinShortId(e).then(e=>(l && (l.markStepCompleted("RetrievedJoinLinkData"),
                                r && l.markStepCompleted("LaunchedFromExternalApp")),
                                a.Resolved({
                                    intent: ue.Intent.Chat,
                                    action: ()=>this.navigateToConversation(e.threadId, t, i, l)
                                })))
                            }
                            if (s[0].toLowerCase() === Ge)
                                return a.Resolved({
                                    intent: ue.Intent.Recents,
                                    action: ()=>{
                                        me.default.isUsingStackNavigationContext() ? he.navigateToRecentsTab() : he.navigateToDesktopRecents(f)
                                    }
                                });
                            {
                                const n = w.sanitizeMri(s[0], w.Namespaces.SkypeId)
                                  , o = re.default.isMeetNowUri(e);
                                let r = {
                                    origin: ae.MeetNowOrigin.DeepLink
                                };
                                return o && (r = Object.assign(Object.assign({}, re.default.getMeetNowParametersFromUri(e)), {
                                    convId: n
                                }),
                                J.track(new de.MeetNowDeeplinkProcessedEvent(r))),
                                o && w.isGuestUserMri(ge.getSkypeMri()) ? a.Resolved({
                                    intent: ue.Intent.Call,
                                    action: ()=>this._guestNavigateToMeetNowPanel(r)
                                }) : a.Resolved({
                                    intent: ue.Intent.Chat,
                                    action: ()=>this.navigateToConversation(n, t, i, void 0, r)
                                })
                            }
                        }
                        if (0 === s.length && !d)
                            return a.Resolved(void 0)
                    }
            }
            if (P && (P.type === Oe.UrlType.Tel || P.type === Oe.UrlType.CallTo))
                return a.Resolved({
                    intent: ue.Intent.Other,
                    action: ()=>he.navigateToPSTNDialerWithParams({
                        causeId: f,
                        navigationSource: j.DialerNavigationSource.BrowseIntent,
                        prefilledNumber: P.telNumber
                    }, void 0)
                });
            if (Fe.default.isContactUrlComponentsValid(P))
                return a.Resolved({
                    action: n.noop,
                    intent: ue.Intent.Other
                });
            if (P && (P.type === Oe.UrlType.VoipAudio || P.type === Oe.UrlType.VoipVideo)) {
                const e = P.type === Oe.UrlType.VoipVideo;
                return a.Resolved({
                    intent: ue.Intent.Call,
                    action: ()=>this._navigateToCall(P, e, f)
                })
            }
            if (P && P.type === Oe.UrlType.Messaging)
                return this._navigateToConversationForParticipants(P, !0, t, i, l).then(e=>({
                    action: e,
                    intent: ue.Intent.Chat
                }));
            if (P && P.type === Oe.UrlType.SkypeWin)
                return P.queryParameterString ? this.getNavigationActionForDeepLink(P.queryParameterString, t, i, r, l) : a.Resolved({
                    action: n.noop,
                    intent: ue.Intent.Recents
                });
            if (P && (P.type === Oe.UrlType.Skype || P.type === Oe.UrlType.Meetnow)) {
                if (!P.queryParameterString || /^call/i.test(P.queryParameterString)) {
                    const e = P.queryParameterKeyValues.topic
                      , t = "true" === P.queryParameterKeyValues.video;
                    return a.Resolved({
                        intent: ue.Intent.Call,
                        action: ()=>this._navigateToCall(P, t, f, e)
                    })
                }
                if (/^chat/i.test(P.queryParameterString)) {
                    let e = P.queryParameterKeyValues.threadId;
                    return e ? (I && (i = j.BrowserOrigin.WebLauncher),
                    a.Resolved({
                        intent: ue.Intent.Chat,
                        action: ()=>this._navigateToGroupConversation(e, t, i)
                    })) : this._navigateToConversationForParticipants(P, !1, t, i, l).then(e=>({
                        action: e,
                        intent: ue.Intent.Chat
                    }))
                }
                if (/^action/i.test(P.queryParameterString)) {
                    const l = P.queryParameterKeyValues.action;
                    if ((r || this._shouldDenyBrowserOriginToOpenInternalLinks(i)) && !n.includes(je, l))
                        return a.Resolved(void 0);
                    let m, A = ue.Intent.Other;
                    switch (l) {
                    case "changeprofilevisibility":
                        m = ()=>he.navigateToProfilePicturePanel(void 0);
                        break;
                    case "settings":
                        m = ()=>he.navigateToMyProfile(void 0, j.ProfileOpenOrigin.DeepLink);
                        break;
                    case "openapp":
                        m = ()=>he.navigateToDesktopRecents(f),
                        this._sendSystemTrayTelemetry(P);
                        break;
                    case "generalsettings":
                        m = ()=>he.navigateToSettingsGroup(pe.SettingsGroup.General, void 0),
                        this._sendSystemTrayTelemetry(P);
                        break;
                    case "avsettings":
                        y.UICapabilities.avSettingsSupported() ? (m = ()=>he.navigateToRootDesktopSettingsGroup(pe.SettingsGroup.AudioVideoSettings, void 0, Ve.newCauseId()),
                        this._sendSystemTrayTelemetry(P)) : m = n.noop;
                        break;
                    case "notificationssettings":
                        m = ()=>he.navigateToSettingsGroup(pe.SettingsGroup.Notifications, void 0);
                        break;
                    case "messagingsettings":
                        m = ()=>he.navigateToSettingsGroup(pe.SettingsGroup.Chat, void 0);
                        break;
                    case "languagesettings":
                        const r = P.queryParameterKeyValues.lang;
                        if (r && ne.isLocaleSupported(r)) {
                            const e = ne.getStringUnsafe("SettingsLanguages." + r);
                            g.default.showConfirmationAlert(ne.getString("LanguagePickerAlert.ConfirmationTitle"), ne.getString("LanguagePickerAlert.ConfirmationMessage", {
                                language: e
                            }), ne.getString("LanguagePickerAlert.ConfirmationButton"), te.setLocale.bind(this, r), N.MainRootViewId),
                            m = n.noop
                        } else
                            m = ()=>he.navigateToLanguagePicker(!1, void 0);
                        break;
                    case "choosecolor":
                        m = ()=>he.navigateToSettingsGroup(pe.SettingsGroup.ThemeSettings, void 0);
                        break;
                    case "chooseprofilepic":
                        m = ()=>he.navigateToAvatarPickerWithParams({
                            hideSkipButton: !0,
                            origin: z.DialogNavOrigin.PopCard,
                            useCommonAvatarPicker: !1
                        }, void 0);
                        break;
                    case "playvideo":
                        const a = P.queryParameterKeyValues.data;
                        if (a) {
                            const e = decodeURIComponent(a);
                            m = ()=>this._navigateToPlayVideoFullScreen(e)
                        } else
                            m = n.noop;
                        break;
                    case "discoverbots":
                    case "editphoto":
                        m = n.noop;
                        break;
                    case "newgroup":
                        m = ()=>{
                            new V.default({
                                peopleType: Ne.PeopleType.All,
                                filterPeopleType: Ne.FilterType.GroupCapable,
                                navigationOrigin: t
                            }).start(N.MainRootViewId)
                        }
                        ;
                        break;
                    case "newgroupcall":
                        m = ()=>he.navigateToQuickCallPanelWithParams({
                            newGroup: !0,
                            causeId: f
                        }, void 0);
                        break;
                    case "rating":
                        m = ()=>p.openAppStore();
                        break;
                    case "personalizedoffers":
                        const l = P.queryParameterKeyValues.offerType;
                        if (l) {
                            if (xe.getPlatformType() === j.PlatformType.iOS && "calling" === l) {
                                m = n.noop;
                                break
                            }
                            {
                                const e = P.queryParameterKeyValues.campaign;
                                m = ()=>he.navigateToPurchaseContinuationPanel(l, e, void 0)
                            }
                        } else
                            m = n.noop;
                        break;
                    case "balancestate":
                        m = ()=>he.navigateToBalanceStatePanel("Deeplink.navigateBalanceState", void 0);
                        break;
                    case "closeexternalbrowser":
                        s.default.dismiss(),
                        m = n.noop;
                        break;
                    case "sendemoticon":
                        if (!P.skypeParticipants || n.includes(P.skypeParticipants, ";") || !P.queryParameterKeyValues || !P.queryParameterKeyValues.emoticon) {
                            m = n.noop;
                            break
                        }
                        const I = w.sanitizeMri(P.skypeParticipants, w.Namespaces.SkypeId)
                          , M = "(" + P.queryParameterKeyValues.emoticon + ")"
                          , x = G.default.getEmoticonByShortcut(M);
                        if (ge.isMyMri(I) || !x) {
                            m = n.noop;
                            break
                        }
                        const D = new X.EmoticonEntity(M,x.id,x.tone)
                          , O = F.createMessageInfo(I, j.PostSource.DeepLink, [D]);
                        Te.default.postMessage(O),
                        m = ()=>this.navigateToConversation(I, t, i),
                        A = ue.Intent.Chat;
                        break;
                    case "notifications":
                        m = ()=>he.navigateToAlertsHub();
                        break;
                    case "recents":
                        m = ()=>he.navigateToRecentsTab(),
                        A = ue.Intent.Recents;
                        break;
                    case "creditexpiration":
                        m = ()=>U.default.show();
                        break;
                    case "capture":
                        switch (P.queryParameterKeyValues.mode) {
                        case "selfie":
                            v.default.setCameraMode(v.CameraMode.Front);
                            break;
                        case "rear":
                            v.default.setCameraMode(v.CameraMode.Back)
                        }
                        m = ()=>b.navigateToCaptureComboWithParams({
                            capturedContentHandler: new _.CapturedContentHandlerForSharing,
                            allowVideo: !0,
                            willDismissOnSend: !0,
                            mediaPickerShouldCollapseFully: !0
                        }, void 0);
                        break;
                    case "calls":
                        A = ue.Intent.Dialpad,
                        m = ()=>{
                            he.navigateToQuickCallPanel(f, void 0);
                            const e = P.queryParameterKeyValues.dialpad;
                            e && "true" === e && he.navigateToPSTNDialerWithParams({
                                causeId: f,
                                navigationSource: j.DialerNavigationSource.DeepLink
                            }, void 0)
                        }
                        ;
                        break;
                    case "supercomposer":
                        m = ()=>{
                            new V.default({
                                creating1on1Conversation: !0,
                                useSuperComposerFor1on1Conversation: !0,
                                peopleType: Ne.PeopleType.All,
                                filterPeopleType: Ne.FilterType.None,
                                isSingleContactSelect: !0,
                                navigationOrigin: j.NavigationConversationOrigin.DeepLink,
                                wizardSteps: [Se.WizardSteps.setConvParticipants]
                            }).start(N.MainRootViewId)
                        }
                        ;
                        break;
                    case "verifyphone":
                        m = ()=>{
                            _e.default.startPhoneNumberVerification(N.MainRootViewId)
                        }
                        ;
                        break;
                    case "callerid":
                        m = ()=>{
                            C.default.fetch(!0);
                            const e = C.default.callerIdFeature();
                            if (e && e.clientEnabled)
                                return he.navigateToCallingSettingsEntry(e.link, "Deeplink.navigateCallerid", e.goTarget, ne.getString("CallingSettingsPanel.CallerID"), !0, void 0, f)
                        }
                        ;
                        break;
                    case "synccontacts":
                        m = ()=>he.navigateToSyncAddressBook({
                            origin: z.DialogNavOrigin.DeepLink,
                            hideSkipButton: !0
                        }, void 0, void 0);
                        break;
                    case "addin":
                        if (!P.queryParameterKeyValues) {
                            m = n.noop;
                            break
                        }
                        const W = P.queryParameterKeyValues.id;
                        if (!W) {
                            m = n.noop;
                            break
                        }
                        m = ()=>u.default.AddinNavigationActions.navigateToAddin({
                            integrationCorrelationId: W,
                            origin: this.getAddinOriginFromBrowserOrigin(i),
                            conversationId: d,
                            url: e,
                            onClose: S,
                            isLaunch: !0
                        });
                        break;
                    case "cortanaoptin":
                        m = ()=>{
                            const e = h.default.getConfigSettingsNoSubscription().cortana.mri;
                            B.optedInToCortana() || (B.setAuthInProgress(),
                            T.serviceInvokeAgent(e, e, {
                                intent: "oobe_invoke_intent"
                            }, k.InvokeAgentSource.CortanaOptInUriAction).then(e=>{
                                e.optInUrl ? (Ce.default.requestPermission(Le.PermissionType.LocationAlways, Le.PermissionPromptOptions.SkipPrePrompt),
                                L.authorize(e.optInUrl, !1, j.CortanaAuthOrigin.OptInUriAction, ()=>{
                                    B.cancelAuthInProgress()
                                }
                                ).catch(e=>{
                                    J.log(j.LogTraceArea.CortanaOptInFlow, "Error authorizing: " + Ee.errorAsString(e)),
                                    B.cancelAuthInProgress(),
                                    g.default.showErrorAlert(ne.getString("CortanaInSettings.ServiceError"), N.MainRootViewId)
                                }
                                )) : (J.log(j.LogTraceArea.CortanaOptInFlow, "Missing optInUrl"),
                                B.cancelAuthInProgress(),
                                g.default.showErrorAlert(ne.getString("CortanaInSettings.ServiceError"), N.MainRootViewId))
                            }
                            ).catch(e=>{
                                J.log(j.LogTraceArea.CortanaOptInFlow, "Error invoking oobe_invoke_intent: " + Ee.errorAsString(e)),
                                B.cancelAuthInProgress(),
                                g.default.showErrorAlert(ne.getString("CortanaInSettings.ServiceError"), N.MainRootViewId)
                            }
                            )),
                            R.navigateToCortanaConversation(j.CortanaEntryPoint.OptInUriAction)
                        }
                        ;
                        break;
                    case "pesgifsearch":
                        m = ()=>{
                            this._openPesTab(P, fe.TabType.Gif, t, i)
                        }
                        ;
                        break;
                    case "pesmojisearch":
                        m = ()=>{
                            this._openPesTab(P, fe.TabType.Moji, t, i)
                        }
                        ;
                        break;
                    case "pesstickersearch":
                        m = ()=>{
                            this._openPesTab(P, fe.TabType.ChatSticker, t, i)
                        }
                        ;
                        break;
                    case "pesemojisearch":
                        m = ()=>{
                            this._openPesTab(P, fe.TabType.Emoticon, t, i)
                        }
                        ;
                        break;
                    case "captureavatar":
                        m = ()=>{
                            const e = {
                                hideSkipButton: !0,
                                origin: z.DialogNavOrigin.DeepLink,
                                showCaptureViewFirst: !0,
                                useCommonAvatarPicker: !1
                            };
                            Ce.default.permissionStatus(Le.PermissionType.CameraRoll) === o.PermissionStatus.Unknown ? Ce.default.requestPermission(Le.PermissionType.CameraRoll, Le.PermissionPromptOptions.SkipPrePrompt).then(()=>{
                                Ce.default.permissionStatus(Le.PermissionType.Camera) === o.PermissionStatus.Unknown && Ce.default.requestPermission(Le.PermissionType.Camera, Le.PermissionPromptOptions.SkipPrePrompt)
                            }
                            ).finally(()=>{
                                he.navigateToAvatarPickerWithParams(e, void 0)
                            }
                            ) : he.navigateToAvatarPickerWithParams(e, void 0)
                        }
                        ;
                        break;
                    case "engagementsharecontent":
                        if (!h.default.getEngagementFeatures().engagementShareableContent.enabled || !P.queryParameterKeyValues) {
                            m = n.noop;
                            break
                        }
                        const $ = P.queryParameterKeyValues.campaignId
                          , Y = "true" === P.queryParameterKeyValues.shareButton
                          , Z = "true" === P.queryParameterKeyValues.reshare
                          , ee = P.queryParameterKeyValues.title;
                        he.navigateAfterUIStarted(()=>{
                            const e = ee ? decodeURIComponent(ee) : void 0;
                            K.default.shareEngagementContent($, Y, e, Z)
                        }
                        ),
                        m = n.noop;
                        break;
                    case "sharecontacts":
                        if (!P.queryParameterKeyValues) {
                            m = n.noop;
                            break
                        }
                        const ie = P.queryParameterKeyValues.toSkypeId;
                        if (!ie || !w.isSkypeId(ie)) {
                            m = n.noop;
                            break
                        }
                        const oe = w.skypeIdToMri(w.asSkypeId(ie));
                        m = ()=>{
                            he.navigateAfterUIStarted(()=>{
                                me.default.isUsingStackNavigationContext() || this._navigateTo1on1Conversation(oe, t, i),
                                he.navigateToShareContactsToConversationPanel({
                                    panelTitle: ne.getString("DetailsPanelHeader.ShareContactToConversationTitle"),
                                    causeId: f,
                                    entryPoint: q.ShareContactOrigin.Deeplink,
                                    userMrisToExclude: [oe],
                                    conversationId: oe
                                }, {
                                    rootViewId: me.default.isUsingSplitView() ? oe : N.MainRootViewId
                                })
                            }
                            )
                        }
                        ;
                        break;
                    case "scheduleCall":
                        const ce = this._getParticipantMris(P.skypeParticipants, !1)
                          , ye = n.first(ce);
                        if (1 !== ce.length || !ye || !E.default.isContact(ye)) {
                            m = n.noop;
                            break
                        }
                        const be = P.queryParameterKeyValues && P.queryParameterKeyValues.startDateTime ? parseInt(P.queryParameterKeyValues.startDateTime, 10) : void 0
                          , ve = P.queryParameterKeyValues ? P.queryParameterKeyValues.subject : void 0;
                        m = ()=>{
                            Ie.default.navigateToScheduleCallCreationPanel({
                                conversationId: ye,
                                entryPoint: we.ScheduleCallEntryPoint.Deeplink,
                                dateTimeMs: !be || n.isNaN(be) ? void 0 : be,
                                subject: ve
                            })
                        }
                        ;
                        break;
                    case "backgroundexecution":
                        m = ()=>this._requestBackgroundExecutionPermission();
                        break;
                    case "enablesplitview":
                        const Pe = He.default.isSplitViewSupported()
                          , Ae = me.default.isUsingSplitViewNoSubscription();
                        m = Pe && !Ae ? ()=>{
                            g.default.showConfirmationAlert(ne.getString("SplitViewDeeplink.ConfirmationTitle"), ne.getString("SplitViewDeeplink.ConfirmationText"), ne.getString("SplitViewDeeplink.ConfirmationButton"), ()=>We.default.toggleSplitView(f), N.MainRootViewId)
                        }
                        : n.noop;
                        break;
                    case "bookmarks":
                        m = ()=>{
                            const e = Ve.newCauseId();
                            J.log(j.LogTraceArea.Navigation, "Opening bookmarks browser from deeplink. causeId: " + e),
                            he.navigateToConversation({
                                convId: w.BookmarksThreadId,
                                origin: j.NavigationConversationOrigin.DeepLink,
                                causeId: e
                            })
                        }
                        ;
                        break;
                    case "meetnow":
                        Q.FullScreenLoadingDialog.show({
                            dialogId: Q.getFullScreenLoadingDialog,
                            dialogText: ne.getString("SignInSignUp.MeetNowMeetingStartup"),
                            showActivityIndicator: !0,
                            showCancelButton: !1
                        }, N.MainRootViewId, !0),
                        m = ()=>{
                            const t = re.default.getMeetNowParametersFromUri(e);
                            J.track(new de.MeetNowDeeplinkProcessedEvent(t)),
                            w.isGuestUserMri(ge.getSkypeMri()) ? t.convId ? this._guestNavigateToMeetNowPanel(t) : this._createNewGuestUserAndCreateConversation(e) : se.MeetNowHelpers.showNewMeetNow(ae.MeetNowOrigin.CampaignDeeplink, t, !0)
                        }
                        ;
                        break;
                    case "meetnowjoin":
                        m = ()=>{
                            const t = ge.isUserLoggedIn()
                              , i = w.isGuestUserMri(ge.getSkypeMri())
                              , n = re.default.getMeetNowParametersFromUri(e);
                            if (i && n.convId)
                                J.track(new de.MeetNowDeeplinkProcessedEvent(n)),
                                this._guestNavigateToMeetNowPanel(n);
                            else {
                                const o = t=>{
                                    this._createNewGuestUserAndJoinConversation(e, t)
                                }
                                  , s = ()=>{
                                    this._createNewGuestUserAndCreateConversation(e)
                                }
                                ;
                                i || J.track(new de.MeetNowDeeplinkProcessedEvent(n)),
                                le.default.navigateToMeetNowJoinLinkPanel(t, n, i ? o : void 0, i ? s : void 0)
                            }
                        }
                        ;
                        break;
                    case "enablephonenumber":
                        c.default.getProfile().then(e=>{
                            var t;
                            const i = null === (t = e.Views[0]) || void 0 === t ? void 0 : t.Attributes;
                            let o, s = n.noop, r = n.noop, a = n.noop;
                            if (!i)
                                return;
                            ({actionAfterConfirmation: s, dialogConfigs: o, actionAfterCancel: r, onClickOutside: a} = this.getConfigConfirmationDialog(i));
                            const {dialogTitle: l, dialogContentText: c, confirmButtonText: d} = o;
                            g.default.showConfirmationAlert(l, c, d, s, N.MainRootViewId, void 0, void 0, r, a),
                            J.track(new H.PhoneDiscoverabilityEvent({
                                command: H.PhoneDiscoverabilityDialogCommand.OpenConfirmation
                            }))
                        }
                        ),
                        m = n.noop;
                        break;
                    default:
                        m = n.noop
                    }
                    return a.Resolved({
                        intent: A,
                        action: m
                    })
                }
                if (/^home\b/i.test(P.queryParameterString))
                    return m.cancelOffnetworkInviteResolving(),
                    a.Resolved(void 0);
                if (/^quickaction/i.test(P.queryParameterString)) {
                    let e = n.noop
                      , t = ue.Intent.Other;
                    if (P.queryParameterKeyValues) {
                        const i = P.queryParameterKeyValues.quickaction;
                        [t,e] = this._quickActionsProtocolLaunch(i, t, e)
                    } else
                        J.error(j.LogTraceArea.Navigation, "No queryParameterString found!");
                    return a.Resolved({
                        intent: t,
                        action: e
                    })
                }
                if (qe.test(P.queryParameterString))
                    return a.Resolved({
                        intent: ue.Intent.Other,
                        action: ()=>he.navigateToBalanceStatePanel("BuyCreditFlow.navigateBalanceState", void 0)
                    })
            }
            return a.Resolved(void 0)
        }
        _createNewGuestUserAndCreateConversation(e) {
            oe.default.redirectToLogout(j.LogoutReason.GuestSessionEnded).then(()=>{
                h.default.getS4LCMCFeatures().enableMeetNowClientGuestFlow && r.Storage.setItem(j.StorageItemKeys[j.StorageItemKeys.StartupUrl], JSON.stringify(e.replace("meetnowjoin", "meetnow") + "&meetNowSessionId=" + ce.default.getMeetNowSessionId()))
            }
            )
        }
        _createNewGuestUserAndJoinConversation(e, t) {
            oe.default.redirectToLogout(j.LogoutReason.GuestSessionEnded).then(()=>{
                h.default.getS4LCMCFeatures().enableMeetNowClientGuestFlow && r.Storage.setItem(j.StorageItemKeys[j.StorageItemKeys.StartupUrl], JSON.stringify(e + "&threadId=" + t + "&meetNowSessionId=" + ce.default.getMeetNowSessionId()))
            }
            )
        }
        getConfigConfirmationDialog(e) {
            var t;
            const i = n.find(e, e=>e.Name === l.AttributeNames.PersonalContactProfilePhones);
            if (n.isEmpty(null === (t = i) || void 0 === t ? void 0 : t.Value) || !i)
                return {
                    dialogConfigs: {
                        dialogTitle: ne.getString("UrlConverter.EnablePhoneDiscoverableNoPhoneTitle"),
                        dialogContentText: ne.getString("UrlConverter.EnablePhoneDiscoverableNoPhoneContentText"),
                        confirmButtonText: ne.getString("UrlConverter.EnablePhoneDiscoverableNoPhoneButtonText")
                    },
                    actionAfterConfirmation: ()=>{
                        J.track(new H.PhoneDiscoverabilityEvent({
                            origin: Pe.PhoneDiscoverabilityOrigin.DeepLink,
                            userPhonesCount: 0,
                            command: H.PhoneDiscoverabilityDialogCommand.Confirm
                        })),
                        he.navigateToSettingsGroup(pe.SettingsGroup.Contacts, void 0)
                    }
                    ,
                    actionAfterCancel: ()=>{
                        this._trackPhoneDiscoverabilityCancelation(!1)
                    }
                    ,
                    onClickOutside: ()=>{
                        this._trackPhoneDiscoverabilityCancelation(!0)
                    }
                };
            if (i.Value.length > 1)
                return {
                    dialogConfigs: {
                        dialogTitle: ne.getString("UrlConverter.EnablePhoneDiscoverableManyPhonesTitle"),
                        dialogContentText: ne.getString("UrlConverter.EnablePhoneDiscoverableManyPhonesContentText"),
                        confirmButtonText: ne.getString("UrlConverter.EnablePhoneDiscoverableManyPhonesButtonText")
                    },
                    actionAfterConfirmation: ()=>{
                        var e;
                        J.track(new H.PhoneDiscoverabilityEvent({
                            origin: Pe.PhoneDiscoverabilityOrigin.DeepLink,
                            userPhonesCount: null === (e = i) || void 0 === e ? void 0 : e.Value.length,
                            command: H.PhoneDiscoverabilityDialogCommand.Confirm
                        })),
                        he.navigateToSettingsGroup(pe.SettingsGroup.Contacts, void 0)
                    }
                    ,
                    actionAfterCancel: ()=>{
                        this._trackPhoneDiscoverabilityCancelation(!1, i)
                    }
                    ,
                    onClickOutside: ()=>{
                        this._trackPhoneDiscoverabilityCancelation(!0, i)
                    }
                };
            {
                const e = i.Value[0]
                  , t = d.default.getPhonePartsFromViewValue(e);
                return {
                    dialogConfigs: {
                        dialogTitle: ne.getString("UrlConverter.EnablePhoneDiscoverableOnePhoneTitle"),
                        dialogContentText: ne.getString("UrlConverter.EnablePhoneDiscoverableOnePhoneContentText", {
                            phoneNumber: t.Number
                        }),
                        confirmButtonText: ne.getString("UrlConverter.EnablePhoneDiscoverableOnePhoneButtonText")
                    },
                    actionAfterConfirmation: ()=>{
                        var n, o;
                        J.track(new H.PhoneDiscoverabilityEvent({
                            origin: Pe.PhoneDiscoverabilityOrigin.DeepLink,
                            userPhonesCount: null === (n = i) || void 0 === n ? void 0 : n.Value.length,
                            command: H.PhoneDiscoverabilityDialogCommand.Confirm
                        })),
                        c.default.showPhoneNumberInSearch(t, null === (o = e) || void 0 === o ? void 0 : o.Source).then(()=>{
                            J.track(new Pe.PhoneNumberDiscoverabilityPrivacyEvent(!0,Pe.PhoneDiscoverabilityOrigin.DeepLink))
                        }
                        ).catch(e=>{
                            var t;
                            J.track(new Pe.PhoneNumberDiscoverabilityPrivacyEvent(void 0,Pe.PhoneDiscoverabilityOrigin.DeepLink,{
                                errorStatusCode: null === (t = e) || void 0 === t ? void 0 : t.code,
                                errorMessage: Ee.errorAsString(e)
                            })),
                            J.log(j.LogTraceArea.ManageSearchInfo, "Service error while trying to enable phone number for discoverability. Error: " + Ee.errorAsString(e))
                        }
                        )
                    }
                    ,
                    actionAfterCancel: ()=>{
                        this._trackPhoneDiscoverabilityCancelation(!1, i)
                    }
                    ,
                    onClickOutside: ()=>{
                        this._trackPhoneDiscoverabilityCancelation(!0, i)
                    }
                }
            }
        }
        _trackPhoneDiscoverabilityCancelation(e, t) {
            var i;
            const n = e ? H.PhoneDiscoverabilityDialogCommand.RejectOutside : H.PhoneDiscoverabilityDialogCommand.Reject;
            J.track(new H.PhoneDiscoverabilityEvent({
                origin: Pe.PhoneDiscoverabilityOrigin.DeepLink,
                userPhonesCount: null === (i = t) || void 0 === i ? void 0 : i.Value.length,
                command: n
            }))
        }
        _openPesTab(e, t, i, n) {
            if (!e.queryParameterKeyValues)
                return;
            let o = void 0;
            const s = e.queryParameterKeyValues.toSkypeId;
            s && w.isSkypeId(s) && (o = w.skypeIdToMri(w.asSkypeId(s)),
            me.default.isUsingStackNavigationContext() ? this.navigateToConversation(o, i, n) : this._navigateTo1on1Conversation(o, i, n));
            const r = decodeURIComponent(e.queryParameterKeyValues.query);
            W.default.openInSearchMode(t, r, He.default.isSplitViewSupported() && me.default.isUsingSplitView() ? x.default.rootViewIdForConversationMri(o) : N.MainRootViewId)
        }
        _sendSystemTrayTelemetry(e) {
            if (e.queryParameterKeyValues) {
                const t = e.queryParameterKeyValues.source
                  , i = e.queryParameterKeyValues.caller;
                t && "skypebridge" === t && J.track(new Re.SystemTrayEvent(i))
            }
        }
        getNavigationActionForOffNetworkGroupJoin(e, t) {
            return ()=>this._navigateToGroupConversation(e, j.NavigationConversationOrigin.Campaign, void 0, t)
        }
        getAddinOriginFromBrowserOrigin(e) {
            switch (e) {
            case j.BrowserOrigin.LinkNode:
                return ve.AddinOrigin.LinkNode;
            case j.BrowserOrigin.FindPanel:
                return ve.AddinOrigin.FindPanel;
            case j.BrowserOrigin.PopCard:
                return ve.AddinOrigin.PopCard;
            case j.BrowserOrigin.SwiftActionView:
                return ve.AddinOrigin.SwiftActionView;
            case j.BrowserOrigin.SwiftQuickReplyView:
                return ve.AddinOrigin.SwiftQuickReplyView;
            case j.BrowserOrigin.LinkerUtil:
                return ve.AddinOrigin.LinkerUtil;
            case j.BrowserOrigin.AdaptiveCard:
                return ve.AddinOrigin.AdaptiveCard;
            default:
                return ve.AddinOrigin.DeepLinkRequest
            }
        }
        _getParticipantMris(e, t=!0) {
            return e ? n.map(n.compact(e.split(";")), e=>{
                e = decodeURIComponent(e);
                const i = t && be.default.isPossiblyPhoneNumber(e) ? w.Namespaces.PSTN : w.Namespaces.SkypeId;
                return w.sanitizeMri(e, i)
            }
            ) : []
        }
        _navigateToCall(e, t, i, o) {
            const s = this._getParticipantMris(e.skypeParticipants);
            if (s.length > 1)
                J.log(j.LogTraceArea.Navigation, "UrlConverter getNavigationActionForDeepLink group call causeId:" + i),
                S.default.CallNavigationHelper.startNewGroupCallAndConversation(s, t, i, o, j.NavigationCallOrigin.DeepLink);
            else if (1 === s.length) {
                const e = n.head(s);
                if (e)
                    if (w.isPhoneMri(e)) {
                        const t = w.stripMriNamespace(e);
                        J.log(j.LogTraceArea.Navigation, "UrlConverter getNavigationActionForDeepLink PSTN call causeId:" + i),
                        he.navigateToPSTNDialerWithParams({
                            causeId: i,
                            navigationSource: j.DialerNavigationSource.DeepLink,
                            prefilledNumber: t
                        }, void 0)
                    } else
                        w.isMri(e) ? (J.log(j.LogTraceArea.Navigation, "UrlConverter getNavigationActionForDeepLink 1:1 call causeId:" + i),
                        S.default.CallNavigationHelper.startCallWithPreview({
                            conversationMri: e,
                            withVideo: t,
                            origin: j.NavigationCallOrigin.DeepLink
                        }, i)) : J.error(j.LogTraceArea.Navigation, "UrlConverter getNavigationActionForDeepLink invalid participant " + ke.mriOrId(e) + " causeId:" + i);
                else
                    J.error(j.LogTraceArea.Navigation, "UrlConverter getNavigationActionForDeepLink no participant in participants causeId:" + i)
            } else
                J.log(j.LogTraceArea.Navigation, "UrlConverter getNavigationActionForDeepLink quick call panel causeId:" + i),
                he.navigateToQuickCallPanel(i, void 0)
        }
        _navigateToConversationForParticipants(e, t, i, n, o) {
            const s = this._getParticipantMris(e.skypeParticipants, !1);
            if (s) {
                const r = s[0];
                if ("buddy" === (e.queryParameterKeyValues ? e.queryParameterKeyValues.utm_source : void 0) && w.isMri(r)) {
                    const t = e.skypeParticipants
                      , i = e.queryParameterKeyValues.utm_content;
                    return o && o.markStepCompleted("InviteReceived"),
                    m.handleInviteLink(t, i, o)
                }
                return 1 !== s.length && t ? a.Resolved(()=>{
                    new V.default({
                        invitedUsersMris: s,
                        creating1on1Conversation: !1,
                        navigationOrigin: i,
                        isSingleContactSelect: !1,
                        peopleType: Ne.PeopleType.All
                    }).start(N.MainRootViewId)
                }
                ) : a.Resolved(()=>this._navigateTo1on1Conversation(r, i, n))
            }
            return a.Resolved(()=>{
                new V.default({
                    isSingleContactSelect: !0,
                    creating1on1Conversation: !0,
                    peopleType: Ne.PeopleType.All,
                    filterPeopleType: Ne.FilterType.None,
                    navigationOrigin: i
                }).start(N.MainRootViewId)
            }
            )
        }
        navigateToConversation(e, t, i, n, o) {
            e && (w.isGroupConversation(e) ? this._navigateToGroupConversation(w.asSkypeThreadId(e), t, i, n, o) : this._navigateTo1on1Conversation(e, t, i, n))
        }
        _navigateTo1on1Conversation(e, t, i, n) {
            const o = Ve.newCauseId();
            if (J.log(j.LogTraceArea.Navigation, "UrlConverter._navigateTo1on1Conversation, causeId: " + o),
            !e || !w.isValidNamespaceMri(e))
                return;
            if (ge.isMyMri(e))
                return;
            if (e === h.default.getConfigSettingsNoSubscription().cortana.mri)
                return void R.navigateToCortanaConversation(j.CortanaEntryPoint.SearchResult);
            const s = D.default.ableToViewConversation(e) && !D.default.getConversation(e).isDeleted();
            !w.isAgent(e) || E.default.isContact(e) && s ? P.default.ensureConversationLoadedOrFaked(e, j.ConversationFakedOrigin.UrlConverter, {
                origin: j.NavigationConversationOrigin[t],
                browserOrigin: i ? j.BrowserOrigin[i] : ""
            }).then(()=>{
                he.navigateToConversation({
                    convId: e,
                    origin: t,
                    browserOrigin: i,
                    causeId: o,
                    inviteLinkScenario: n
                })
            }
            ) : he.showDetailsPanelWithParams({
                mri: e,
                componentContext: void 0,
                causeId: o
            })
        }
        _navigateToGroupConversation(e, t, i, o, s) {
            var r;
            if (!e || !w.isValidNamespaceMri(e))
                return;
            const l = n.includes([ae.MeetNowOrigin.CreatorPanel, ae.MeetNowOrigin.JoinLobby], null === (r = s) || void 0 === r ? void 0 : r.origin)
              , c = Ve.newCauseId();
            J.log(j.LogTraceArea.Navigation, "UrlConverter._navigateToGroupConversation, causeId: " + c);
            const d = me.default.isUsingSplitView() ? x.default.rootViewIdForConversationMri(e) : N.MainRootViewId;
            D.default.ableToViewConversation(e) ? Z.default.navigateToGroupConversationAndJoinCall(e, !0, t, c, i, o, s) : (l || w.isGuestUserMri(ge.getSkypeMri()) || ie.LoadingDialog.show({
                dialogId: "getJoinLinkDataLoadingDialog",
                dialogText: ne.getString("UrlConverter.SyncingConversationMessage"),
                showActivityIndicator: !0,
                showCancelButton: !1
            }, d, !0),
            I.default.waitForConversationListSyncToFinish().then(()=>{
                if (!D.default.ableToViewConversation(e)) {
                    if (D.default.isMember(e)) {
                        const t = D.default.getConversation(e);
                        return J.warn(j.LogTraceArea.Navigation, `UrlConverter navigateToGroupConversation: unexpected scenario, user might have blocked the conversation is conversation defined: ${!!t} isBlocked: ${D.default.isConversationBlocked(t)} causeId: ${c}`),
                        this._showJoinConversationFailedAlert(),
                        void (l && s && this._trackMeetNowError(t, s))
                    }
                    {
                        o && o.markStepCompleted("AddMemberToThread");
                        const n = h.default.getS4LCMCFeaturesNoSubscription().waitJoinKnowledgeTimeoutMs;
                        return l || ie.LoadingDialog.show({
                            dialogId: "getJoinLinkDataLoadingDialog",
                            dialogText: ne.getString("UrlConverter.JoiningConversationMessage"),
                            showActivityIndicator: !0,
                            showCancelButton: !1
                        }, d, !0),
                        T.serviceAddMemberToThread(e, ge.getSkypeMri(), k.AddMemberToThreadSource.JoiningConversation, !1).fail(n=>ee.default.trackAddMemberToThreadError(e, n, t, i)).then(()=>a.raceTimer(P.default.waitForJoinedKnowledgeOfRealConversation(e).then(()=>Z.default.navigateToGroupConversationAndJoinCall(e, !1, t, c, i, o, s)), n).then(r=>r.timedOut ? (J.warn(j.LogTraceArea.Navigation, "UrlConverter navigateToGroupConversation: timeout causeId: " + c),
                        ee.default.trackWaitForJoinedKnowledgeTimedOut(n, e, t, i),
                        a.Rejected({
                            timedOut: !0,
                            retryAction: ()=>this._navigateToGroupConversation(e, t, i, o, s)
                        })) : r)).fail(e=>{
                            J.warn(j.LogTraceArea.Navigation, "UrlConverter navigateToGroupConversation: failed to add member to thread; causeId: " + c),
                            f.default.navigation().canAccessRecentsList || oe.default.redirectToLogout(j.LogoutReason.GuestSessionEnded),
                            l && s && J.track(new de.MeetNowErrorEvent(s,ae.MeetNowError.CannotAddUserToTheThread,e.errorCode)),
                            this._showJoinConversationFailedAlert(e)
                        }
                        )
                    }
                }
                Z.default.navigateToGroupConversationAndJoinCall(e, !0, t, c, i, o, s)
            }
            ).finally(()=>{
                ie.LoadingDialog.dismiss("getJoinLinkDataLoadingDialog", d)
            }
            ))
        }
        _guestNavigateToMeetNowPanel(e) {
            const t = e.convId;
            if (!t)
                return;
            const i = Ve.newCauseId();
            J.log(j.LogTraceArea.Navigation, "UrlConverter._guestNavigateToMeetNowPanel, causeId: " + i),
            Me.EnsureStarted([I.default]).then(()=>{
                I.default.forceThreadDetailsFetchIfNeeded(t),
                I.default.prioritizeConversation(t, !1, !0)
            }
            ),
            le.default.navigateToMeetNowLobby(me.default.isUsingSplitView() ? x.default.rootViewIdForConversationMri(t) : N.MainRootViewId, e),
            I.default.waitForConversationListSyncToFinish().then(()=>{
                if (!D.default.ableToViewConversation(t)) {
                    J.warn(j.LogTraceArea.Navigation, "UrlConverter._guestNavigateToMeetNowPanel: guest user is not part of the conversation causeId: " + i),
                    oe.default.redirectToLogout(j.LogoutReason.GuestSessionEnded);
                    const n = D.default.getConversation(t);
                    this._trackMeetNowError(n, e)
                }
            }
            )
        }
        _trackMeetNowError(e, t) {
            let i = ae.MeetNowError.Unknown;
            e ? e.isCurrentUserMember() ? D.default.isConversationBlocked(e) && (i = ae.MeetNowError.ConversationIsBlocked) : i = ae.MeetNowError.UserIsNotAMember : i = ae.MeetNowError.ConversationIsUndefined,
            J.track(new de.MeetNowErrorEvent(t,i))
        }
        _showJoinConversationFailedAlert(e) {
            const t = ne.getString("UrlConverter.JoinConversationFailedTitle");
            let i = ne.getString("UrlConverter.JoinConversationFailedGenericMessage");
            const n = [{
                text: ne.getString("Global.OkLabel"),
                isSubmit: !0
            }];
            if (e)
                if (void 0 !== e.statusCode)
                    switch (e.statusCode) {
                    case 403:
                        i = ne.getString("UrlConverter.JoinConversationFailedJoinDisabledMessage");
                        break;
                    case 404:
                        i = ne.getString("UrlConverter.JoinConversationFailedThreadNotFoundMessage");
                        break;
                    case 412:
                        i = ne.getString("UrlConverter.JoinConversationFailedTooManyMembersMessage")
                    }
                else
                    e.timedOut && e.retryAction && n.unshift({
                        text: ne.getString("ConfirmationDialog.RetryLabel"),
                        onPress: e.retryAction
                    });
            g.default.showWithOptions({
                title: t,
                message: i,
                dialogAccessibilityTitle: i,
                rootViewId: N.MainRootViewId,
                buttons: n
            })
        }
        _navigateToPlayVideoFullScreen(e, t="") {
            const i = {
                mediaType: Ue.VideoViewer.MediaType,
                thumbnailUrl: t,
                videoUrl: e
            };
            he.navigateToMediaViewerPanel({
                initialMedia: i,
                controller: {
                    getOptions: ()=>({})
                },
                totalMedia: 1,
                onClose: ()=>{
                    const e = Ve.newCauseId();
                    J.log(j.LogTraceArea.Navigation, "UrlConverter._navigateToPlayVideoFullScreen onClose, causeId:" + e),
                    he.navigateBack(e, void 0)
                }
            })
        }
        _quickActionsProtocolLaunch(e, t, i) {
            const n = Ve.newCauseId();
            switch (J.log(j.LogTraceArea.Navigation, "UrlConverter._quickActionsProtocolLaunch, causeId:" + n),
            J.track(new Ae.QuickActionsEvent(e)),
            e) {
            case "presence":
                i = ()=>he.navigateToMeControl(void 0, n);
                break;
            case "call":
                i = ()=>{
                    he.navigateToQuickCallPanelWithParams({
                        causeId: n,
                        newGroup: !0
                    }, void 0)
                }
                ;
                break;
            case "dialpad":
                t = ue.Intent.Dialpad,
                i = ()=>{
                    he.navigateToPSTNDialerWithParams({
                        causeId: n,
                        navigationSource: j.DialerNavigationSource.DeepLink
                    }, void 0)
                }
                ;
                break;
            case "recents":
                t = ue.Intent.Recents,
                i = ()=>he.navigateToRecentsTab();
                break;
            case "chat":
                i = ()=>{
                    new V.default({
                        creating1on1Conversation: !0,
                        peopleType: Ne.PeopleType.AllExcludingBots,
                        filterPeopleType: Ne.FilterType.None,
                        isSingleContactSelect: !0,
                        navigationOrigin: j.NavigationConversationOrigin.DeepLink,
                        wizardSteps: [Se.WizardSteps.setConvParticipants]
                    }).start(N.MainRootViewId)
                }
                ;
                break;
            default:
                J.error(j.LogTraceArea.Navigation, e + " is not a recognized shortcut.")
            }
            return [t, i]
        }
        _requestBackgroundExecutionPermission() {
            Ce.default.requestPermission(Le.PermissionType.BackgroundExecution, Le.PermissionPromptOptions.SkipPrePrompt | Le.PermissionPromptOptions.PromptAgainIfDenied).then(e=>{
                let t = ye.getDeniedPrompt(Le.PermissionType.BackgroundExecution);
                if (e === o.PermissionStatus.Denied && t) {
                    const e = 1e4;
                    M.default.addNotificationToast({
                        notificationText: t,
                        icon: De.SkypeIcon.Warning,
                        timeout: e
                    }, N.MainRootViewId)
                }
                J.log(j.LogTraceArea.Navigation, "navigateToRequestBackgroundExecutionPrompt: " + o.PermissionStatus[e])
            }
            )
        }
        _shouldDenyBrowserOriginToOpenInternalLinks(e) {
            switch (e) {
            case j.BrowserOrigin.AuthActionLink:
            case j.BrowserOrigin.AudioVideoSettings:
            case j.BrowserOrigin.LinkNode:
            case j.BrowserOrigin.BotSettings:
            case j.BrowserOrigin.ConsentModal:
            case j.BrowserOrigin.SuggestionsLearnMore:
            case j.BrowserOrigin.CortanaSettingsDescription:
            case j.BrowserOrigin.MoneyItemPicker:
            case j.BrowserOrigin.MoneySettings:
            case j.BrowserOrigin.NotebookLink:
            case j.BrowserOrigin.DeepLinkRequest:
            case j.BrowserOrigin.SyncAddressBookDialogPrivacyStatement:
            case j.BrowserOrigin.SwiftActionView:
            case j.BrowserOrigin.MoneyNode:
            case j.BrowserOrigin.LinkerUtil:
            case j.BrowserOrigin.SprinklesEffectsDescription:
            case j.BrowserOrigin.AdaptiveCard:
            case j.BrowserOrigin.ConnectorProfile:
            case j.BrowserOrigin.CreditExpiration:
            case j.BrowserOrigin.SuggestionsConsentLearnMore:
            case j.BrowserOrigin.MoneyRequestNode:
            case j.BrowserOrigin.ReadReceiptsSettingsDescription:
            case j.BrowserOrigin.NetworkConnectionAlert:
            case j.BrowserOrigin.FileSharingLimits:
            case j.BrowserOrigin.PrivacyProfile:
            case j.BrowserOrigin.PeopleYouMayKnowNoticeDialog:
            case j.BrowserOrigin.SubscriptionDataSection:
            case j.BrowserOrigin.MeProfile:
            case j.BrowserOrigin.MeControl:
            case j.BrowserOrigin.HotkeysSettingsDescription:
                return !0;
            case j.BrowserOrigin.AddinMenu:
            case j.BrowserOrigin.CloseAccount:
            case j.BrowserOrigin.EngagementNotice:
            case j.BrowserOrigin.FindPanel:
            case j.BrowserOrigin.JoinLink:
            case j.BrowserOrigin.LocationNode:
            case j.BrowserOrigin.Moji:
            case j.BrowserOrigin.Plugins:
            case j.BrowserOrigin.PopCard:
            case j.BrowserOrigin.SearchSuggestionsSettings:
            case j.BrowserOrigin.SwiftQuickReplyView:
            case j.BrowserOrigin.TPUMRequest:
            case j.BrowserOrigin.WebLauncher:
            case j.BrowserOrigin.UserProfileOnboarding:
            case void 0:
                return !1;
            default:
                return Ve.switchStatementExhaustiveChecking(e, "Unknown browserOrigin"),
                !0
            }
        }
    }
    ;
    e.exports = Qe
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(99);
    var o, s;
    !function(e) {
        e[e.RaiseHand = 0] = "RaiseHand",
        e[e.LowerMyHand = 1] = "LowerMyHand",
        e[e.LowerOthersHand = 2] = "LowerOthersHand"
    }(o = t.RaiseHandAction || (t.RaiseHandAction = {})),
    function(e) {
        e[e.OverflowMenu = 0] = "OverflowMenu",
        e[e.ParticipantsPanel = 1] = "ParticipantsPanel",
        e[e.CallControls = 2] = "CallControls"
    }(s = t.LowerHandOrigin || (t.LowerHandOrigin = {}));
    class r extends n.CallActionBase {
        constructor(e, t, i, n) {
            super(),
            this._callId = e,
            this._action = t,
            this._participantsCount = i,
            this._origin = n
        }
        getActionName() {
            return o[this._action]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.CallId = this._callId,
            e.ParticipantsCount = this._participantsCount,
            void 0 === this._origin || this._action !== o.LowerOthersHand && this._action !== o.LowerMyHand || (e.LowerHandOrigin = s[this._origin]),
            e
        }
    }
    t.RaiseHandTelemetryEvent = r
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(80)
      , r = i(27)
      , a = i(14)
      , l = i(12);
    class c extends l.default {
        constructor() {
            super(...arguments),
            this._iconForIconConfig = (e,t,i)=>{
                const s = [];
                return i && s.push(a.absoluteFill),
                !n.isUndefined(t.opacity) && t.opacity < 1 && s.push(o.Styles.createTextStyle({
                    opacity: t.opacity
                }, !1)),
                o.createElement(r.default, {
                    key: e,
                    style: [s, this.props.style],
                    size: this.props.iconSize || 24,
                    color: t.color || this.props.color || this._themeColors.primaryIconColor,
                    icon: t.icon,
                    padding: this.props.padding
                })
            }
        }
        render() {
            const e = n.map(this.props.icons, (e,t)=>this._iconForIconConfig("icon" + t, e, t > 0));
            return o.createElement(s.default, {
                style: this.props.style
            }, e)
        }
    }
    t.CompositeIcon = c,
    t.default = c
}
, , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(86)
      , s = i(0)
      , r = i(63)
      , a = i(10)
      , l = i(2)
      , c = i(80)
      , d = i(27)
      , u = i(657)
      , g = i(3)
      , h = i(5)
      , p = i(4)
      , m = i(266)
      , S = i(173)
      , C = i(515)
      , y = i(1517)
      , f = i(66)
      , _ = i(41)
      , b = i(8)
      , v = i(11)
      , T = i(14)
      , P = i(15)
      , A = h.lazyProperties({
        splashScreenLight: ()=>s.Styles.createViewStyle({
            backgroundColor: b.Color.white,
            appRegion: "drag"
        }),
        splashScreenDark: ()=>s.Styles.createViewStyle({
            backgroundColor: b.Color.darkThemeBackground,
            appRegion: "drag"
        }),
        centerContent: ()=>s.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center"
        }),
        contentContainer: ()=>s.Styles.createViewStyle({
            flex: 0,
            height: 200,
            marginTop: 288,
            flexDirection: "column",
            alignItems: "center",
            marginHorizontal: 30
        }),
        spinnerContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            overflow: "visible",
            marginTop: 40
        }),
        spinnerContainerTransparent: ()=>s.Styles.createViewStyle({
            opacity: 0
        }),
        statusText: ()=>s.Styles.createTextStyle({
            color: b.Color.gray400,
            textAlign: "center",
            lineHeight: 20
        }),
        loginButtonWrap: ()=>s.Styles.createViewStyle({
            marginTop: 20,
            alignItems: "center",
            appRegion: "no-drag"
        }),
        loginButton: ()=>s.Styles.createViewStyle({
            marginTop: 40
        }),
        disclaimerContainerStyle: ()=>s.Styles.createViewStyle({
            position: "absolute",
            left: 10,
            bottom: 10,
            right: 10,
            justifyContent: "center",
            alignItems: "center"
        }),
        disclaimerInnerStyle: ()=>s.Styles.createViewStyle({
            flex: -1,
            flexDirection: "row"
        }),
        disclaimerStyle: ()=>s.Styles.createTextStyle({
            flex: -1,
            color: b.Color.gray400,
            textAlign: "center",
            backgroundColor: b.Color.transparent,
            marginLeft: 5
        }),
        iconOffsetStyle: ()=>s.Styles.createTextStyle({
            marginTop: 2
        }),
        microsoftLogoContainer: ()=>s.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "flex-end"
        }),
        microsoftLogo: ()=>s.Styles.createImageStyle({
            marginBottom: 60,
            height: 24,
            width: 112
        }),
        meetNow: ()=>h.lazyProperties({
            contentContainer: ()=>s.Styles.createViewStyle({
                marginTop: 0
            }),
            disclaimerStyle: ()=>s.Styles.createTextStyle({
                color: b.Color.white
            })
        })
    });
    class k extends u.InitialStateComponent {
        constructor() {
            super(...arguments),
            this._emergencyText = p.getString("SignInSignUp.SkypeCannotBeUsedAsTelephoneReplacement"),
            this._animatedLogoScaleValue = new s.Animated.Value(1),
            this._animatedSplashScreenOpacityValue = new s.Animated.Value(1),
            this._animatedSplashScreenStyle = s.Styles.createAnimatedViewStyle({
                opacity: this._animatedSplashScreenOpacityValue
            }),
            this._isEmergencyTextVisible = !1,
            this._handleLogin = e=>{
                this.props.loginCallback()
            }
            ,
            this._onSignOutPressed = ()=>{
                m.default.redirectToLogout(l.LogoutReason.LoginRestarted, !0)
            }
        }
        _buildState(e, t) {
            return {
                isBusy: !e.showLoginFallback && !e.errorCode && e.showSpinner
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._isEmergencyTextVisible = this.state.isBusy
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._isEmergencyTextVisible && n.defer(()=>{
                s.Accessibility.announceForAccessibility(this._emergencyText)
            }
            )
        }
        animateLeave(e) {
            g.log(l.LogTraceArea.Startup, "SplashScreen animateLeave");
            const t = ()=>{
                this.setState({
                    isBusy: !1
                }),
                e()
            }
            ;
            if (this.isComponentMounted()) {
                const e = !0;
                o.parallel([o.timing.easeOut({
                    value: this._animatedLogoScaleValue,
                    toValue: 1.4,
                    useNativeDriver: e
                }), o.timing.easeOut({
                    value: this._animatedSplashScreenOpacityValue,
                    toValue: 0,
                    useNativeDriver: e
                })]).start(e=>{
                    e.finished && this.isComponentMounted() && t()
                }
                )
            } else
                t()
        }
        _renderLoginFallbackIfNeeded() {
            if (this.props.showLoginFallback)
                return s.createElement(s.View, {
                    key: "fallback",
                    style: A.loginButtonWrap
                }, s.createElement(P.BodyText, {
                    size: P.BodyTextSize.SmallDeprecated,
                    bold: !0,
                    style: A.statusText,
                    disableThemeSubscription: !0
                }, p.getString("SplashScreen.LoginErrorMessage")), s.createElement(_, {
                    buttonSize: a.SXButtonSize.Medium,
                    buttonStyle: a.SXButtonStyle.BlueFill,
                    title: p.getString("SplashScreen.LoginButtonTitle"),
                    onPress: this._handleLogin,
                    style: A.loginButton
                }))
        }
        _renderSpinner() {
            const e = [A.spinnerContainer];
            return this.state.isBusy || e.push(A.spinnerContainerTransparent),
            s.createElement(s.View, {
                key: "spinner",
                style: e
            }, s.createElement(f.default, {
                size: a.SXActivityIndicatorSize.Medium,
                tintColor: b.Color.blue,
                useRXIndicator: !0
            }))
        }
        _renderMessage() {
            if (this.props.statusText)
                return s.createElement(y.default, {
                    key: "message",
                    statusText: this.props.statusText,
                    errorCode: this.props.errorCode,
                    hideEmoticon: !0,
                    onSignOutPressed: this._onSignOutPressed,
                    isMeetNow: this.props.isMeetNow
                })
        }
        _renderMicrosoftLogo() {
            return s.createElement(s.View, {
                style: A.microsoftLogoContainer
            }, s.createElement(s.Image, {
                style: A.microsoftLogo,
                source: this.props.isMeetNow || this.props.darkThemeEnabled ? r.Collection.MICROSOFT_LOGO_COLOR_WHITE : r.Collection.MICROSOFT_LOGO_COLOR,
                resizeMode: "stretch"
            }))
        }
        render() {
            const e = [T.absoluteFill, this.props.darkThemeEnabled ? A.splashScreenDark : A.splashScreenLight, this._animatedSplashScreenStyle]
              , t = [A.disclaimerStyle]
              , i = [A.contentContainer]
              , n = s.createElement(s.View, {
                style: [T.absoluteFill, A.centerContent]
            }, s.createElement(C.SkypeLogo, {
                isAnimated: !0
            }));
            let o = [this._renderMessage(), this._renderLoginFallbackIfNeeded(), this._renderSpinner()];
            this.props.isMeetNow && (o = [this._renderLoginFallbackIfNeeded(), this._renderSpinner(), this._renderMessage()],
            i.push(A.meetNow.contentContainer),
            e.push(S.MeetNowStyle.bgColorStyle)),
            (this.props.isMeetNow || this.props.darkThemeEnabled) && t.push(A.meetNow.disclaimerStyle);
            const r = s.createElement(s.View, {
                style: A.disclaimerContainerStyle
            }, s.createElement(c.default, {
                style: [A.disclaimerInnerStyle, T.overflowVisible]
            }, s.createElement(d.default, {
                icon: v.SkypeIcon.CallDisabled,
                color: this.props.isMeetNow || this.props.darkThemeEnabled ? b.Color.white : b.Color.gray400,
                size: v.IconSize.size16,
                style: A.iconOffsetStyle
            }), s.createElement(P.BodyText, {
                size: P.BodyTextSize.BigDeprecated,
                style: t,
                disableThemeSubscription: !0
            }, this._emergencyText)))
              , a = this.state.isBusy && !this.props.hideDisclaimer ? r : void 0;
            return s.createElement(s.Animated.View, {
                style: e
            }, this._renderMicrosoftLogo(), a, !this.props.isMeetNow && n, s.createElement(s.View, {
                style: [T.absoluteFill, A.centerContent]
            }, s.createElement(s.View, {
                style: i
            }, o)))
        }
    }
    e.exports = k
}
, function(e, t, i) {
    "use strict";
    const n = i(0);
    class o extends n.Component {
        getChildContext() {
            return {
                isInAParentText: !1
            }
        }
        render() {
            return n.createElement(n.View, Object.assign({}, this.props))
        }
    }
    o.childContextTypes = {
        isInAParentText: function() {
            return null
        }
    },
    e.exports = n.View
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.GetClicked = 0] = "GetClicked",
        e[e.MeControlGetClicked = 1] = "MeControlGetClicked",
        e[e.ListEntryClicked = 2] = "ListEntryClicked",
        e[e.MeControlListEntryClicked = 3] = "MeControlListEntryClicked",
        e[e.ProfileSectionViewed = 4] = "ProfileSectionViewed",
        e[e.ProfileSectionClicked = 5] = "ProfileSectionClicked",
        e[e.MeControlSectionViewed = 6] = "MeControlSectionViewed",
        e[e.MeControlSectionClicked = 7] = "MeControlSectionClicked",
        e[e.SkypeNumberPurchaseButtonClicked = 8] = "SkypeNumberPurchaseButtonClicked",
        e[e.RefreshedSkypeNumberTenTimes = 9] = "RefreshedSkypeNumberTenTimes",
        e[e.SkypeNumberReservationSuceeded = 10] = "SkypeNumberReservationSuceeded",
        e[e.SkypeNumberReservationFailed = 11] = "SkypeNumberReservationFailed",
        e[e.PurchaseEntryButtonShown = 12] = "PurchaseEntryButtonShown",
        e[e.SkypeNumberFetchedAfterBuy = 13] = "SkypeNumberFetchedAfterBuy",
        e[e.CopyClicked = 14] = "CopyClicked",
        e[e.ManageClicked = 15] = "ManageClicked",
        e[e.OverlayDisplayed = 16] = "OverlayDisplayed",
        e[e.PanelViewed = 17] = "PanelViewed",
        e[e.ActionClicked = 18] = "ActionClicked"
    }(t.SkypeNumberTelemetryOrigin || (t.SkypeNumberTelemetryOrigin = {})),
    function(e) {
        e.ShowPurchaseFlow = "ShowPurchaseFlow",
        e.ShowListNumbers = "ShowListNumbers",
        e.NativeExperience = "NativeExperience"
    }(t.SkypeNumberTelemetryActions || (t.SkypeNumberTelemetryActions = {})),
    function(e) {
        e.Continue = "Continue",
        e.RefreshNumber = "RefreshNumber",
        e.Information = "Information"
    }(t.SkypeNumberPurchaseFlowTelemetryButtons || (t.SkypeNumberPurchaseFlowTelemetryButtons = {}))
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.PopupWidth = 350,
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.Slim = 1] = "Slim"
    }(t.HeaderType || (t.HeaderType = {}))
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(235)
      , o = i(39)
      , s = i(159);
    var r, a, l, c;
    !function(e) {
        e[e.Launched = 0] = "Launched",
        e[e.Created = 1] = "Created",
        e[e.DetailsOpened = 2] = "DetailsOpened",
        e[e.Voted = 3] = "Voted",
        e[e.Unvoted = 4] = "Unvoted"
    }(r = t.PollAction || (t.PollAction = {})),
    function(e) {
        e[e.Card = 0] = "Card",
        e[e.DetailsView = 1] = "DetailsView"
    }(a = t.VoteOrigin || (t.VoteOrigin = {})),
    function(e) {
        e[e.SlashCommand = 0] = "SlashCommand",
        e[e.CreateView = 1] = "CreateView"
    }(l = t.CreatePollOrigin || (t.CreatePollOrigin = {})),
    function(e) {
        e[e.MediaBarItem = 0] = "MediaBarItem"
    }(c = t.LaunchOrigin || (t.LaunchOrigin = {}));
    class d extends o.TelemetryEventBase {
        constructor() {
            super()
        }
        getEventName() {
            return "caap_poll"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = r[this.getActionName()],
            e
        }
    }
    t.PollLaunchedEvent = class extends d {
        constructor(e) {
            super(),
            this._origin = e
        }
        getActionName() {
            return r.Launched
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = c[this._origin],
            e
        }
    }
    ;
    t.PollCreatedEvent = class extends d {
        constructor(e, t, i) {
            super(),
            this._origin = e,
            this._optionCount = t,
            this._participantsCount = i
        }
        getActionName() {
            return r.Created
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.OptionsCount = this._optionCount,
            e.Origin = l[this._origin],
            e.ParticipantsCount = this._participantsCount,
            e
        }
    }
    ;
    t.PollDetailsOpenedEvent = class extends d {
        constructor(e) {
            super(),
            this._message = e
        }
        getActionName() {
            return r.DetailsOpened
        }
        getAttributes() {
            let e = super.getAttributes();
            return this._message && (e.MessageCorrelationId = n.getCorrelationIdFromMessageParts(this._message.creator, this._message.conversationId, s.getClientMessageId(this._message))),
            e
        }
    }
    ;
    t.PollToggledVoteEvent = class extends d {
        constructor(e, t, i) {
            super(),
            this._action = e,
            this._origin = t,
            this._message = i
        }
        getActionName() {
            return this._action
        }
        getAttributes() {
            let e = super.getAttributes();
            return this._message && (e.MessageCorrelationId = n.getCorrelationIdFromMessageParts(this._message.creator, this._message.conversationId, s.getClientMessageId(this._message))),
            e.Origin = a[this._origin],
            e
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(7)
      , r = i(2)
      , a = i(3)
      , l = i(19)
      , c = i(18);
    class d {
        static prepareFeedback() {
            return d._hasHaptics() ? o.default.prepareFeedbackGenerator().then(n.noop, e=>{
                a.warn(r.LogTraceArea.GenericUnsafe, "DeviceUtilities prepareFeedbackGenerator failed: " + l.errorAsString(e))
            }
            ) : s.Resolved()
        }
        static unprepareFeedback() {
            return d._hasHaptics() ? o.default.unprepareFeedbackGenerator().then(n.noop, e=>{
                a.warn(r.LogTraceArea.GenericUnsafe, "DeviceUtilities unprepareFeedbackGenerator failed: " + l.errorAsString(e))
            }
            ) : s.Resolved()
        }
        static triggerFeedback() {
            return d._hasHaptics() ? o.default.triggerFeedback().then(n.noop, e=>{
                a.warn(r.LogTraceArea.GenericUnsafe, "DeviceUtilities triggerFeedback failed: " + l.errorAsString(e))
            }
            ) : s.Resolved()
        }
        static _hasHaptics() {
            const e = c.getPlatformType();
            return e === r.PlatformType.iOS || e === r.PlatformType.Android
        }
    }
    t.default = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(101)
      , s = i(5)
      , r = i(4)
      , a = i(8)
      , l = i(11)
      , c = i(25)
      , d = s.lazyProperties({
        iconColor: ()=>n.Styles.createTextStyle({
            color: a.Color.gray300
        }),
        iconBackgroundColorFile: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.gray300
        })
    });
    t.FileIconHelper = class {
        static getIconFromFileType(e, t) {
            let i, n;
            switch (t || o.getFileType(o.extractFileExtension(e))) {
            case c.UploadFileType.Excel:
                i = l.SkypeIcon.MSExcel,
                n = r.getString("Global.MsExcelLabel");
                break;
            case c.UploadFileType.OneNote:
                i = l.SkypeIcon.MSOneNote,
                n = r.getString("Global.MsOneNoteLabel");
                break;
            case c.UploadFileType.Powerpoint:
                i = l.SkypeIcon.MSPowerPoint,
                n = r.getString("Global.MsPowerPointLabel");
                break;
            case c.UploadFileType.Word:
                i = l.SkypeIcon.MSWord,
                n = r.getString("Global.MsWordLabel");
                break;
            case c.UploadFileType.Picture:
                i = l.SkypeIcon.Picture,
                n = r.getString("Global.Photo");
                break;
            case c.UploadFileType.Video:
            case c.UploadFileType.VideoMessage:
                i = l.SkypeIcon.Video,
                n = r.getString("Global.Video");
                break;
            case c.UploadFileType.Audio:
                i = l.SkypeIcon.FileAudio,
                n = r.getString("ShareWithPanel.AudioPreviewInfo");
                break;
            default:
                i = l.SkypeIcon.File,
                n = r.getString("Global.FileLabel")
            }
            return {
                icon: i,
                displayString: n,
                colorStyle: d.iconColor,
                backgroundStyle: d.iconBackgroundColorFile
            }
        }
        static getFileIconGlyph(e) {
            switch (o.extractFileExtension(e)) {
            case "doc":
            case "docx":
                return l.SkypeIcon.MSWord;
            case "xls":
            case "xlsx":
                return l.SkypeIcon.MSExcel;
            case "ppt":
            case "pptx":
                return l.SkypeIcon.MSPowerPoint;
            case "one":
                return l.SkypeIcon.MSOneNote
            }
            return l.SkypeIcon.File
        }
        static getFileIconColor(e) {
            const t = o.extractFileExtension(e);
            let i = a.Color.darkThemeBackground;
            switch (t) {
            case "docx":
            case "doc":
                i = a.Color.docFile;
                break;
            case "xlsx":
            case "xls":
                i = a.Color.xlsFile;
                break;
            case "pptx":
            case "ppt":
                i = a.Color.pptFile;
                break;
            case "one":
                i = a.Color.oneNoteFile
            }
            return i
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(136)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        getEventName() {
            return "messaging_search"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.OpenedSearch = class extends s {
        constructor(e) {
            super(),
            this._origin = e
        }
        getActionName() {
            return "OpenedMessageSearch"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = n.MessageSearchToggleOrigin[this._origin],
            e
        }
    }
    ;
    t.ClosedSearch = class extends s {
        constructor(e, t, i, n) {
            super(),
            this._origin = e,
            this._didUserSearch = t,
            this._lastResultsCount = i,
            this._numberOfRequests = n
        }
        getActionName() {
            return "ClosedMessageSearch"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = n.MessageSearchToggleOrigin[this._origin],
            e.DidUserSearch = this._didUserSearch,
            e.LastSearchResultsCount = this._lastResultsCount,
            e.NumberOfRequests = this._numberOfRequests,
            e
        }
    }
    ;
    t.TriggeredLoadMoreMessages = class extends s {
        constructor(e, t) {
            super(),
            this._isSearchingGlobal = e,
            this._pageNumberRequested = t
        }
        getActionName() {
            return "TriggeredLoadMoreMessages"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsSearchingGlobal = this._isSearchingGlobal,
            e.PageNumberRequested = this._pageNumberRequested,
            e
        }
    }
    ;
    t.NavigatedToPrevResult = class extends s {
        getActionName() {
            return "NavigatedToPrevResult"
        }
    }
    ;
    t.NavigatedToNextResult = class extends s {
        getActionName() {
            return "NavigatedToNextResult"
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(39)
      , s = i(370);
    var r, a;
    !function(e) {
        e[e.Unknown = 0] = "Unknown",
        e[e.ContactsPanel = 1] = "ContactsPanel",
        e[e.ContactsPanelV2 = 2] = "ContactsPanelV2",
        e[e.NewChat = 3] = "NewChat",
        e[e.NewGroup = 4] = "NewGroup",
        e[e.Recents = 5] = "Recents",
        e[e.NewPrivateChat = 6] = "NewPrivateChat",
        e[e.SuperComposer = 7] = "SuperComposer"
    }(r = t.RecommendationsOrigin || (t.RecommendationsOrigin = {})),
    t.getRecommendationsOriginFromSearchResultsListOrigin = function(e) {
        let t;
        switch (e) {
        case n.SearchResultsListOrigin.ContactsPanel:
            t = r.ContactsPanel;
            break;
        case n.SearchResultsListOrigin.ContactsPanelV2:
            t = r.ContactsPanelV2;
            break;
        case n.SearchResultsListOrigin.NewChat:
            t = r.NewChat;
            break;
        case n.SearchResultsListOrigin.NewGroup:
            t = r.NewGroup;
            break;
        case n.SearchResultsListOrigin.NewPrivateChat:
            t = r.NewPrivateChat;
            break;
        case n.SearchResultsListOrigin.SuperComposer:
            t = r.SuperComposer;
            break;
        default:
            t = r.Unknown
        }
        return t
    }
    ,
    t.getUserActionScenarioFromOrigin = function(e) {
        let t;
        switch (e) {
        case r.Recents:
            t = s.Scenarios.RecommendationFromRecentsToConversation;
            break;
        case r.ContactsPanel:
        case r.ContactsPanelV2:
            t = s.Scenarios.RecommendationFromContactsToConversation;
            break;
        default:
            t = s.Scenarios.Unknown
        }
        return t
    }
    ,
    function(e) {
        e[e.RecommendationsShown = 0] = "RecommendationsShown",
        e[e.RecommendationClicked = 1] = "RecommendationClicked",
        e[e.LearnMoreClicked = 2] = "LearnMoreClicked",
        e[e.HideRecommendationsClicked = 3] = "HideRecommendationsClicked",
        e[e.SeeMoreButtonClicked = 4] = "SeeMoreButtonClicked",
        e[e.MoreInfoButtonClicked = 5] = "MoreInfoButtonClicked"
    }(a || (a = {}));
    class l extends o.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._action = e,
            this._origin = t,
            this._requestId = i
        }
        getEventName() {
            return "people_recommendations"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = a[this._action],
            e.Origin = r[this._origin],
            e.RequestId = this._requestId || "undefined",
            e
        }
    }
    t.RecommendationsShownEvent = class extends l {
        constructor(e, t) {
            super(a.RecommendationsShown, e, t)
        }
    }
    ;
    t.RecommendationClickedEvent = class extends l {
        constructor(e, t, i) {
            super(a.RecommendationClicked, e, t),
            this._position = i
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Position = this._position,
            e
        }
    }
    ;
    t.MoreInfoClickedEvent = class extends l {
        constructor(e, t) {
            super(a.MoreInfoButtonClicked, e, t)
        }
    }
    ;
    t.LearnMoreClickedEvent = class extends l {
        constructor(e, t) {
            super(a.LearnMoreClicked, e, t)
        }
    }
    ;
    t.HideRecommendationsClickedEvent = class extends l {
        constructor(e, t) {
            super(a.HideRecommendationsClicked, e, t)
        }
    }
    ;
    t.SeeMoreRecommendedPeopleButtonClicked = class extends l {
        constructor(e, t) {
            super(a.SeeMoreButtonClicked, e, t)
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(80)
      , s = i(5)
      , r = i(11)
      , a = i(49)
      , l = s.lazyProperties({
        searchAccessoryIcon: ()=>n.Styles.createTextStyle({
            fontSize: r.IconSize.size20,
            height: 40,
            width: 40,
            borderRadius: 20,
            padding: 10,
            textAlign: "center",
            textAlignVertical: "center"
        }),
        searchAccessoryIconCompact: ()=>n.Styles.createTextStyle({
            fontSize: r.IconSize.size16,
            height: 24,
            width: 24,
            borderRadius: 12,
            padding: 4,
            textAlign: "center",
            textAlignVertical: "center"
        })
    });
    let c = new class {
        searchAccessoryIcon(e, t, i) {
            const s = [a.skypeAssetsFontStyle(), i ? l.searchAccessoryIconCompact : l.searchAccessoryIcon, t.primaryIconColorStyle, t.buttonBackgroundColorStyle];
            return n.createElement(o.HiddenText, {
                style: s,
                allowFontScaling: !1
            }, e)
        }
    }
    ;
    t.default = c
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(7)
      , r = i(6)
      , a = i(207)
      , l = i(2)
      , c = i(3)
      , d = i(32)
      , u = i(155)
      , g = i(778)
      , h = i(150)
      , p = i(21);
    let m = class extends o.StoreBase {
        constructor() {
            super(),
            this._alertDismissed = !1,
            p.RegisterStartupable(this, "ConnectivityAlertStore", [d.default, u.default])
        }
        startup() {
            return u.default.subscribe(()=>{
                this._toggleConnectionAlert()
            }
            ),
            this._toggleConnectionAlert(),
            s.Resolved()
        }
        getConnectivityAlertType() {
            return this._reportedAlertType
        }
        shouldShowCaptivePortalQuestionnaire() {
            if (this._reportedAlertType !== l.ConnectivityAlertType.CaptivePortal)
                return !1;
            const e = r.default.getS4LMessagingFeatures();
            if (!e.enableCaptivePortalQuestionnaire)
                return !1;
            const t = d.default.getUserPreferencesLocal().captivePortalDismissedAt;
            return void 0 === t || !!e.captivePortalQuestionnaireFrequency && Date.now() >= t + 1e3 * e.captivePortalQuestionnaireFrequency
        }
        answerCaptivePortalQuestionnaire(e) {
            e === g.CaptivePortalQuestionnaireOption.Invalid && h.forcePassedConnectivityCheck(),
            c.track(new g.CaptivePortalQuestionnaireEvent(e)),
            d.default.setUserPreferencesLocal({
                captivePortalDismissedAt: Date.now()
            })
        }
        dismissConnectivityAlert() {
            this._alertDismissed = !0,
            this._removeToast()
        }
        _toggleConnectionAlert() {
            const e = u.default.getConnectionStatus();
            e === u.ConnectionStatus.PossibleCaptivePortal ? this._createOrUpdateToast(l.ConnectivityAlertType.CaptivePortal) : e === u.ConnectionStatus.DisconnectedNoNetworkingReported ? this._createOrUpdateToast(l.ConnectivityAlertType.NoNetwork) : this._removeToast()
        }
        _createOrUpdateToast(e) {
            if (this._alertDismissed)
                return void this._removeToast();
            if (e === this._reportedAlertType)
                return;
            const t = new g.ConnectivityAlertShowEvent(e);
            if (c.track(t),
            void 0 !== this._toastId)
                c.log(l.LogTraceArea.ConnectivityStatusBar, "ConnectivityAlertStore: updating toast, reported type " + l.ConnectivityAlertType[e]),
                a.default.updateToast(this._toastId, {
                    toastType: e
                });
            else if (c.log(l.LogTraceArea.ConnectivityStatusBar, "ConnectivityAlertStore: adding toast, reported type " + l.ConnectivityAlertType[e]),
            this._toastId = a.default.addNetworkConnectionToast({
                toastType: e
            }),
            void 0 === this._toastId)
                return;
            this._alertDismissed = !1,
            this._reportedAlertType = e,
            this.trigger()
        }
        _removeToast() {
            void 0 !== this._toastId && (c.log(l.LogTraceArea.ConnectivityStatusBar, "ConnectivityAlertStore: removing toast, reported type " + (this._reportedAlertType ? l.ConnectivityAlertType[this._reportedAlertType] : "undefined")),
            a.default.removeToast(this._toastId),
            this._reportedAlertType = void 0,
            this._toastId = void 0,
            this.trigger())
        }
    }
    ;
    n.__decorate([o.autoSubscribe], m.prototype, "getConnectivityAlertType", null),
    n.__decorate([o.autoSubscribe], m.prototype, "shouldShowCaptivePortalQuestionnaire", null),
    m = n.__decorate([o.AutoSubscribeStore], m),
    t.ConnectivityAlertStore = m,
    t.default = new m
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(13)
      , s = i(42);
    class r extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._onContainerRef = e=>{
                this._containerRef = e || void 0
            }
        }
        setAnimatedStyle(e) {
            this._animatedStyle !== e && (this._animatedStyle = e,
            this.isComponentMounted() && this.forceUpdate())
        }
        requestFocus() {
            this._containerRef && this._containerRef.requestFocus()
        }
        render() {
            let e = {
                ref: this._onContainerRef,
                style: [this.props.style, this._animatedStyle],
                importantForAccessibility: this.props.importantForAccessibility
            };
            return this.props.shouldGroupAccessibilityChildren && (e = s.default.applyShouldGroupAccessibilityChildren(e)),
            n.createElement(n.Animated.View, Object.assign({}, e), this.props.children)
        }
    }
    e.exports = r
}
, , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(65)
      , s = i(6)
      , r = i(58)
      , a = i(202)
      , l = i(724)
      , c = i(188)
      , d = i(5)
      , u = i(4)
      , g = i(266)
      , h = i(32)
      , p = i(789)
      , m = i(452)
      , S = i(8)
      , C = i(92)
      , y = i(135)
      , f = i(9)
      , _ = 480
      , b = 800
      , v = d.lazyProperties({
        spinnerStyle: ()=>n.Styles.createViewStyle({
            alignItems: "center",
            alignSelf: "stretch",
            backgroundColor: S.Color.white,
            flex: 1
        })
    });
    class T {
        static showSignOutConfirmation(e, t) {
            p.default.isQuickSignOnEnabled() ? this._showSignOutConfirmationV2(e, t) : this._showSignOutConfirmationV1(e, t)
        }
        static _openSignoutSurvey(e, t) {
            const i = f.newGuid()
              , n = a.default.addTrackingParamsToUri("https://feedback.skype.com/survey/answer/sosu", i);
            l.default.openUri({
                campaignId: i,
                uri: n,
                type: c.EngagementType.SignOutFeedback,
                target: c.ActionTarget.FeedbackBrowser,
                onDone: t,
                modalSizeOverride: {
                    width: _,
                    height: b
                }
            }, e),
            h.default.setUserPreferencesLocal({
                hasSignOutSurveyShown: !0
            })
        }
        static _showSignOutSpinner(e) {
            const t = u.getString("SignInSignUp.SignOutAnnouncement")
              , i = y.isDarkTheme(C.colorThemeNoSubscription())
              , o = n.createElement(n.View, {
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes,
                accessibilityTraits: n.Types.AccessibilityTrait.Status,
                accessibilityLabel: t,
                style: v.spinnerStyle,
                autoFocus: !0,
                tabIndex: -1
            }, n.createElement(m, {
                darkThemeEnabled: i
            }));
            r.default.showModal(o, "SignOutSpinner", {
                rootViewId: e
            })
        }
        static _onFinalSignoutPress(e, t, i=!1, n) {
            s.default.getS4LSisuFeatures().signoutSurveyEnabled && !h.default.getUserPreferencesLocal().hasSignOutSurveyShown ? T._openSignoutSurvey(e, ()=>{
                T._showSignOutSpinner(e),
                g.default.redirectToLogout(t, i, n)
            }
            ) : (T._showSignOutSpinner(e),
            g.default.redirectToLogout(t, i, n))
        }
        static _showSignOutConfirmationV1(e, t) {
            const i = [{
                text: u.getString("Global.CancelLabel"),
                isCancel: !0
            }, {
                text: u.getString("SignOutConfirmation.SignOutButtonTitle"),
                isSubmit: !0,
                onPress: ()=>T._onFinalSignoutPress(t, e)
            }]
              , n = u.getString("SignOutConfirmation.SignOutTitle")
              , s = u.getString("SignOutConfirmation.SignOutContent");
            o.default.showWithOptions({
                title: n,
                dialogAccessibilityTitle: s,
                message: s,
                buttons: i,
                rootViewId: t
            })
        }
        static _showSignOutConfirmationV2(e, t) {
            const i = {
                text: u.getString("Global.CancelLabel"),
                isCancel: !0
            }
              , n = {
                text: u.getString("Global.YesLabel"),
                onPress: ()=>T._onFinalSignoutPress(t, e, !1, !0),
                isSubmit: !0
            }
              , r = s.default.getS4LSisuFeatures().enableRemoveAccountOnSignOut;
            let a;
            a = [n, {
                text: r ? u.getString("Global.NoLabel") : u.getString("SignOutConfirmation.SignOutForgetMeButtonTitle"),
                onPress: ()=>T._onFinalSignoutPress(t, e, r, !1),
                isSubmit: !0
            }, i];
            const l = u.getString("SignOutConfirmation.SignOutTitle")
              , c = r ? u.getString("SignOutConfirmation.SignOutRememberYourAccountContent") : u.getString("SignOutConfirmation.SignOutContent");
            o.default.showWithOptions({
                title: l,
                dialogAccessibilityTitle: c,
                message: c,
                buttons: a,
                rootViewId: t
            })
        }
    }
    e.exports = T
}
, , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2155)
      , o = i(104)
      , s = i(104);
    t.reloadApp = function(e) {
        s.log(o.LogTraceArea.Startup, `Reloading app (causeId ${e})`),
        n.default.reload()
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(635);
    t.internal_cacheConfig = {
        DefaultCacheName: "RNManualFileCache"
    };
    t.FileUploadCacheUtils = class {
        static getBaseUri(e) {
            return o.default.getLocalUriBase(e)
        }
        static getLocalCacheUri(e) {
            return "urn:cache:" + e
        }
        static getAbsoluteFromLocalCacheUri(e, i=t.internal_cacheConfig.DefaultCacheName) {
            const o = this.getBaseUri(i);
            return o && n.startsWith(e, "urn:cache:") ? e.replace("urn:cache:", o) : e
        }
        static getAbsoluteUriForName(e) {
            return this.getAbsoluteFromLocalCacheUri(this.getLocalCacheUri(e))
        }
    }
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(6)
      , s = o.default.getConfigSettingsNoSubscription().urlPreview.host + "url/content?url=";
    e.exports = new class {
        proxyImageUrl(e) {
            if (e)
                return n.startsWith(e, s) || o.default.isTrustedDomain(e, !1) ? e : s + encodeURIComponent(e)
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Received = 1] = "Received",
        e[e.InvitationAccepted = 2] = "InvitationAccepted",
        e[e.InvitationDeclined = 3] = "InvitationDeclined",
        e[e.Canceled = 4] = "Canceled",
        e[e.Edited = 5] = "Edited"
    }(t.ScheduleCallAlertTypes || (t.ScheduleCallAlertTypes = {}))
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(48)
      , r = i(2)
      , a = i(3)
      , l = i(74)
      , c = i(38)
      , d = i(21)
      , u = i(777)
      , g = i(9);
    t.default = new class {
        constructor() {
            this._actions = {},
            this._subscribers = {},
            d.RegisterStartupable(this, "PersistentActionsService")
        }
        startup() {
            return s.default.getPersistentActions().then(e=>{
                const t = n.groupBy(e, e=>e.actionType);
                n.each(t, (e,t)=>{
                    n.each(e, e=>{
                        a.log(r.LogTraceArea.PersistentActionsService, "Startup Tracking: " + e.id + ", Type: " + e.actionType),
                        this._actions[e.id] = e
                    }
                    )
                }
                )
            }
            )
        }
        test_reset() {
            n.isEmpty(this._actions) || a.log(r.LogTraceArea.PersistentActionsService, "Test reset, subscriber count: " + n.size(this._subscribers) + ", actions being removed: [" + n.keys(this._actions).join(", ") + "]"),
            this._actions = {},
            this._subscribers = {}
        }
        subscribe(e, t) {
            this._subscribers[e] = t;
            const i = n.filter(this._actions, t=>t.actionType === e);
            t(n.map(i, e=>e.data), !0)
        }
        persistAndStartAction(e, t) {
            let i = t;
            i.id = g.newGuid();
            const n = {
                id: i.id,
                actionType: e,
                data: i
            };
            a.log(r.LogTraceArea.PersistentActionsService, "New Action: " + n.id + ", Type: " + n.actionType),
            this._actions[n.id] = n,
            s.default.openTransaction([s.Stores.PersistentActions, s.Stores.InternalData], !0).then(e=>o.all([e.putPersistentAction(n), this._updateMetadata(e)]));
            const l = this._subscribers[e];
            return l && l([n.data], !1),
            i
        }
        updateAction(e) {
            let t = this._actions[e.id];
            return t ? (t.data = e,
            s.default.putPersistentAction(t)) : o.Rejected()
        }
        removeAction(e) {
            a.log(r.LogTraceArea.PersistentActionsService, "Removing Action: " + e),
            s.default.openTransaction([s.Stores.PersistentActions, s.Stores.InternalData], !0).then(t=>o.all([t.removePersistentAction(e), this._updateMetadata(t)])),
            delete this._actions[e]
        }
        _updateMetadata(e) {
            const t = u.transferServicesMeta(n.map(this._actions, e=>e.actionType))
              , i = l.default.getData(s.InternalKeys.TransferServicesMeta);
            if (!c.default(t, i))
                return l.default.putData(s.InternalKeys.TransferServicesMeta, t, e)
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._attributes = e,
            this._piiAttributes = t
        }
        getEventName() {
            return "people_contacts_action"
        }
        getAttributes() {
            return n.merge(super.getAttributes(), this._attributes)
        }
        getPiiAttributes() {
            return n.merge(super.getPiiAttributes(), this._piiAttributes)
        }
    }
    t.ContactsTelemetryEvent = r;
    class a extends s.TelemetryEventBase {
        constructor(e, t, i, n) {
            super(),
            this._messageHash = e,
            this._context = t,
            this._reason = i,
            this._block = n
        }
        getEventName() {
            return "ReportMessage"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.MessageHash = this._messageHash,
            e.ReportContext = this._context,
            e.ReportReason = this._reason,
            e.UserBlocked = this._block,
            e
        }
    }
    t.ContactsActionReportMessage = a;
    class l extends s.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._errorCode = e,
            this._errorMessage = t
        }
        getEventName() {
            return "ReportMessageFailure"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ErrorCode = this._errorCode,
            e.ErrorMessage = this._errorMessage,
            e
        }
    }
    t.ContactsActionReportMessageFailure = l;
    class c extends s.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._type = e,
            this._origin = t
        }
        getEventName() {
            return "contactInvite"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Type = o.ContactInviteType[this._type],
            e.Origin = o.ContactInviteOrigin[this._origin],
            e
        }
    }
    t.ContactInvite = c;
    class d extends s.TelemetryEventBase {
        constructor(e, t, i, n) {
            super(),
            this._count = e,
            this._isInitialSync = t,
            this._durationInMs = i,
            this._hashSentCount = n
        }
        getEventName() {
            return "shortCircuitContactsProcessed"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.count = this._count,
            e.isInitialSync = this._isInitialSync,
            e.duration = this._durationInMs,
            e.HashSentCount = this._hashSentCount,
            e
        }
    }
    t.ShortCircuitContactsProcessed = d;
    class u extends s.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._error = e,
            this._isInitialSync = t,
            this._hashSentCount = i
        }
        getEventName() {
            return "shortCircuitContactsError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.error = this._error,
            e.isInitialSync = this._isInitialSync,
            e.HashSentCount = this._hashSentCount,
            e
        }
    }
    t.ShortCircuitContactsError = u
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(13);
    class o extends n.ComponentBase {
        _buildInitialState() {
            return this._initialState = super._buildInitialState(),
            this.componentMounting(this._initialState),
            this._initialState
        }
        componentMounting(e) {}
    }
    t.InitialStateComponent = o
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(161)
      , s = i(16)
      , r = i(648)
      , a = i(2)
      , l = i(39)
      , c = i(159);
    class d extends l.TelemetryEventBase {
        constructor(e) {
            super(),
            this._conversationId = e
        }
        getEventName() {
            return "conversation_action"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getAction(),
            e.Conversation_NameSpace = s.Namespaces[s.getMriNamespace(this._conversationId)],
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = c.getTrackableConversationId(this._conversationId);
            return t && (e.Conversation_Id = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.ConversationMarkedRead = class extends d {
        constructor(e, t) {
            super(e),
            this._consumptionHorizon = t
        }
        getAction() {
            return "conversation_marked_read"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Consumption_Horizon = this._consumptionHorizon,
            e
        }
    }
    ;
    t.ConversationArchived = class extends d {
        constructor(e, t, i) {
            super(e),
            this._origin = t,
            this._isGroupConversation = i
        }
        getAction() {
            return "conversation_archived"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = a.ArchiveConversationOrigin[this._origin],
            e.IsGroupConversation = this._isGroupConversation,
            e
        }
    }
    ;
    t.ConversationUnarchived = class extends d {
        constructor(e, t, i) {
            super(e),
            this._origin = t,
            this._isGroupConversation = i
        }
        getAction() {
            return "conversation_unarchived"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Origin = a.UnarchiveConversationOrigin[this._origin],
            e.IsGroupConversation = this._isGroupConversation,
            e
        }
    }
    ;
    t.ConversationDeleted = class extends d {
        constructor(e, t, i) {
            super(e),
            this._source = t,
            this._conversationType = i
        }
        getAction() {
            return "conversation_deleted"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Source = o.DeleteConversationSource[this._source],
            e.ConversationType = r.ConversationType[this._conversationType],
            e
        }
    }
    ;
    t.ConversationDeletionFailed = class extends d {
        constructor(e, t) {
            super(e),
            this._errorCode = t
        }
        getAction() {
            return "conversation_deletion_failed"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ErrorCode = this._errorCode,
            e
        }
    }
    ;
    t.ConversationDeletionCanceled = class extends d {
        constructor(e, t) {
            super(e),
            this._conversationType = t
        }
        getAction() {
            return "conversation_deletion_canceled"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ConversationType = r.ConversationType[this._conversationType],
            e
        }
    }
    ;
    t.ConversationListItemClicked = class extends d {
        constructor(e, t, i) {
            super(e),
            this._itemId = t,
            this._actionSuccess = i
        }
        getAction() {
            return "conversation_list_item_clicked"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Item_id = this._itemId,
            void 0 !== this._actionSuccess && (e.action_success = this._actionSuccess),
            e
        }
    }
    ;
    t.ConversationTranslationAction = class extends d {
        constructor(e, t) {
            super(e),
            this._action = t
        }
        getAction() {
            return "translation_action"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.TranslationAction = a.TranslationAction[this._action],
            e
        }
    }
}
, , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(107);
    i(59);
    t.default = class {
        static collapseDesktopStackNavContext() {
            return this._desktopNavigationType() === n.DesktopNavigationType.StackCollapsible && !0
        }
        static collapseDesktopStackNavContextNoSubscription() {
            return this._desktopNavigationType() === n.DesktopNavigationType.StackCollapsible && !0
        }
        static _desktopNavigationType() {
            return n.DesktopNavigationType.StackCollapsible
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(7)
      , r = i(554)
      , a = i(200)
      , l = i(383)
      , c = i(3)
      , d = i(9);
    var u;
    !function(e) {
        e.ON_EXIT = "onExit",
        e.ON_RESUME = "onResume",
        e.ON_SUSPEND = "onSuspend",
        e.ON_SYSTEM_IDLE_CHANGE = "onSystemIdleChange"
    }(u = t.LifecycleEventType || (t.LifecycleEventType = {}));
    class g {
        constructor(e) {
            this._acknowledgeCallbacks = e,
            this._onSuspendQueue = [],
            this._onResumeQueue = [],
            this._onExitQueue = [],
            this._onSystemIdleChangeQueue = [],
            this._onResume = e=>{
                c.log(l.LogTraceArea.Lifecycle, "LifecycleService._onResume, causeId: " + e);
                const t = n.clone(this._onResumeQueue).map(t=>t(e));
                this._processPromises(t, u.ON_RESUME, e)
            }
            ,
            this._onSuspend = e=>{
                c.log(l.LogTraceArea.Lifecycle, "LifecycleService._onSuspend, causeId: " + e);
                const t = n.clone(this._onSuspendQueue).map(t=>t(e));
                this._processPromises(t, u.ON_SUSPEND, e)
            }
            ,
            this._onExit = e=>{
                c.log(l.LogTraceArea.Lifecycle, "LifecycleService._onExit, causeId: " + e);
                const t = n.clone(this._onExitQueue).map(t=>t(e));
                this._processPromises(t, u.ON_EXIT, e)
            }
            ,
            this._onSystemIdleChange = (e,t)=>{
                c.log(l.LogTraceArea.Lifecycle, "LifecycleService._onSystemIdleChange, causeId: " + e);
                const i = n.clone(this._onSystemIdleChangeQueue).map(i=>i(e, t));
                this._processPromises(i, u.ON_SYSTEM_IDLE_CHANGE, e)
            }
        }
        _processPromises(e, t, i) {
            c.log(l.LogTraceArea.Lifecycle, "LifecycleService._processPromises, causeId: " + i);
            const n = this._acknowledgeCallbacks[t];
            r.wrapWithCauseId(()=>s.all(e), l.LogTraceArea.Lifecycle, t, i).always(n)
        }
        registerEvents(e, t, i, n) {
            e && e.subscribe(this._onExit),
            t && t.subscribe(this._onResume),
            i && i.subscribe(this._onSuspend),
            n && n.subscribe(this._onSystemIdleChange)
        }
        addObserver(e, t) {
            switch (c.log(l.LogTraceArea.Lifecycle, `Add ${e} observer`),
            e) {
            case u.ON_EXIT:
                this._onExitQueue.push(t);
                break;
            case u.ON_RESUME:
                this._onResumeQueue.push(t);
                break;
            case u.ON_SUSPEND:
                this._onSuspendQueue.push(t);
                break;
            case u.ON_SYSTEM_IDLE_CHANGE:
                this._onSystemIdleChangeQueue.push(t);
                break;
            default:
                d.switchStatementExhaustiveChecking(e)
            }
        }
        removeObserver(e, t) {
            switch (c.log(l.LogTraceArea.Lifecycle, `Remove ${e} observer`),
            e) {
            case u.ON_EXIT:
                n.pull(this._onExitQueue, t);
                break;
            case u.ON_RESUME:
                n.pull(this._onResumeQueue, t);
                break;
            case u.ON_SUSPEND:
                n.pull(this._onSuspendQueue, t);
                break;
            case u.ON_SYSTEM_IDLE_CHANGE:
                n.pull(this._onSystemIdleChangeQueue, t);
                break;
            default:
                d.switchStatementExhaustiveChecking(e)
            }
        }
    }
    t.Test_AppLifecycle = g;
    const h = new g({
        [u.ON_EXIT]: ()=>a.acknowledgeAppExit()
    });
    h.registerEvents(o.default.onExit, o.default.onResume, o.default.onSuspend, o.default.onSystemIdleChange),
    t.default = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.BACKGROUND_EFFECT_FILE_PREFIX = "BACKGROUND_EFFECT_",
    function(e) {
        e[e.Prefetching = 0] = "Prefetching",
        e[e.Prefetched = 1] = "Prefetched",
        e[e.Failed = 2] = "Failed",
        e[e.None = 3] = "None"
    }(t.ImagePrefetchState || (t.ImagePrefetchState = {}))
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(7)
      , s = i(6)
      , r = i(2)
      , a = i(3)
      , l = i(19);
    t.shouldDisplayUpgradeAlert = function() {
        return s.default.getS4LFeatures().enableUpgradeAlert ? s.default.getS4LFeatures().upgradeAlertConfig.forceUpgrade ? o.Resolved(!0) : n.Storage.getItem("UpgradeAlertLastDisplayDate").then(e=>!e || Date.now() > +e + 1e3 * s.default.getS4LFeatures().upgradeAlertConfig.upgradeAlertDisplayIntervalSeconds).catch(e=>(a.warn(r.LogTraceArea.GenericUnsafe, "UpgradeAlertHelper:shouldDisplayUpgradeAlert failed: " + l.errorAsString(e)),
        o.Rejected(e))) : o.Resolved(!1)
    }
    ,
    t.setLastDisplayDate = function() {
        return n.Storage.setItem("UpgradeAlertLastDisplayDate", String("" + Date.now()))
    }
    ,
    t.isForceUpdateEnabled = function() {
        const e = s.default.getS4LFeatures().upgrade;
        return !(!e || !e.noticeUrl)
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(6)
      , r = i(78)
      , a = i(46)
      , l = i(16)
      , c = i(507)
      , d = i(792)
      , u = i(279)
      , g = i(71)
      , h = i(100)
      , p = i(28)
      , m = i(163)
      , S = i(56)
      , C = i(2)
      , y = i(101)
      , f = i(175)
      , _ = i(4)
      , b = i(96)
      , v = i(828)
      , T = i(573)
      , P = i(439)
      , A = i(647)
      , k = i(140)
      , I = i(223)
      , w = i(18)
      , N = i(25)
      , M = i(45)
      , E = i(9)
      , x = "Photo"
      , D = "Video"
      , L = "Audio"
      , R = "File"
      , B = "Call"
      , O = "Post"
      , F = "PostWithContent"
      , V = "Location"
      , U = "SwiftCard"
      , H = "GIF"
      , W = "MediaAlbum"
      , z = {
        [a.MessageTypeGroups.Picture]: x,
        [a.MessageTypeGroups.Video]: D,
        [a.MessageTypeGroups.Audio]: L,
        [a.MessageTypeGroups.UriFile]: R,
        [a.MessageTypeGroups.Calling]: B,
        [a.MessageTypeGroups.Location]: V,
        [a.MessageTypeGroups.SwiftCard]: U,
        [a.MessageTypeGroups.Gif]: H,
        [a.MessageTypeGroups.MediaAlbum]: W
    };
    function G(e, t, i) {
        let n, o, s, a, l;
        if (e && e.length > 0) {
            const d = r.chain(e, r.sortBy(e=>e.time ? -e.time : NaN), r.uniqBy(e=>e.mri));
            o = j(d.length, t, i),
            d.length >= 1 && (n = d[0].mri,
            s = $(d[0].mri)),
            d.length >= 2 && (c = d[1].mri,
            a = p.getDisplayableProfile(c).getShortName(),
            l = d.length - 1)
        }
        var c;
        return {
            mostRecentMri: n,
            labelKey: o,
            firstPersonToReact: s && s.name,
            gender: s && s.gender,
            secondPersonToReact: a,
            othersCount: l
        }
    }
    function K() {
        return w.getPlatformType() === C.PlatformType.Windows ? "disabled" : "enabled"
    }
    function j(e, t, i) {
        let n;
        if (i && t.objectType === a.MessageTypeGroups.SwiftCard) {
            const e = i.getFirstUriObjectChild(b.SwiftUriObjectNode);
            e && e.getCardType() === y.imageContentTypes.gif && (n = a.MessageTypeGroups.Gif)
        }
        const o = function(e, t) {
            let i = z[e];
            i || (i = t ? O : F);
            return i
        }(n || t.objectType, t.isQuoteOnly);
        let s;
        return 1 === e ? s = "OnePersonReactedToYour" + o : 2 === e ? s = "TwoPeopleReactedToYour" + o : e > 2 && (s = "MoreThanTwoPeopleReactedToYour" + o),
        s ? (s = t.isPushNotification ? "PushNotification." + s : "AlertCard." + s,
        s) : s
    }
    function q(e, t, i, n) {
        let o;
        return e.isCurrentUserMentioned(!1) ? o = _.getString("Notifications.UserMentionTitle", {
            creator: i
        }) : a.hasAllAtMention(e.content) ? o = _.getString("Notifications.AllMentionTitle", {
            creator: i
        }) : e.isCurrentUserQuoted() ? o = _.getString(s.default.getS4LMessagingFeatures().enableReply ? "Notifications.ReplyTitle" : "Notifications.QuoteTitle", {
            creator: i
        }) : t && t.isOneOnOne() ? o = _.getString("Notifications.OneOnOneTitle", {
            creator: i
        }) : (n.length > 20 && (n = n.substr(0, 17) + "..."),
        o = _.getString("Notifications.ConversationGroupTitle", {
            creator: i,
            conversationName: n
        })),
        o
    }
    function Q(e, t) {
        let i;
        const n = a.getMessageTypeGroup(e)
          , o = h.decode(e);
        switch (n) {
        case a.MessageTypeGroups.Audio:
            i = _.getString("Notifications.AudioBody", {
                emoji: K()
            });
            break;
        case a.MessageTypeGroups.Location:
            i = function(e, t) {
                const i = u.renderText(e, {
                    message: t,
                    processing: {
                        quotes: S.ProcessingLevel.None,
                        wikiMarkup: S.ProcessingLevel.Stripped
                    },
                    trimToFirstLine: !0
                });
                return _.getString("Notifications.LocationBody", {
                    address: i,
                    emoji: K()
                })
            }(o, e);
            break;
        case a.MessageTypeGroups.Picture:
            i = X(o);
            break;
        case a.MessageTypeGroups.Video:
            i = _.getString("Notifications.VideoBody", {
                emoji: K()
            });
            break;
        case a.MessageTypeGroups.UriFile:
            i = function(e) {
                const t = J(e)
                  , i = y.extractFileExtension(t);
                if (y.isImageExtension(i))
                    return X(e);
                return _.getString("Notifications.FileBody", {
                    fileName: t
                })
            }(o);
            break;
        case a.MessageTypeGroups.Moji:
            i = _.getString("Notifications.MojiBody");
            break;
        case a.MessageTypeGroups.Sticker:
            i = _.getString("Notifications.StickerBody");
            break;
        case a.MessageTypeGroups.ScheduledCallInvite:
            i = _.getString("Notifications.ScheduledCallInviteBody", {
                organizerName: t
            });
            break;
        case a.MessageTypeGroups.Text:
            a.isContactMessageType(e) && (i = function(e) {
                const t = e.children[0];
                if (t.children && 1 === t.children.length) {
                    const e = t.children[0];
                    return _.getString("Notifications.ContactBody", {
                        emoji: K(),
                        contactName: e.fullName
                    })
                }
                return _.getString("Notifications.ContactsBody", {
                    emoji: K()
                })
            }(o));
            break;
        case a.MessageTypeGroups.MoneyCard:
            i = e.messagetype === a.MessageTypes.MoneyRequest ? _.getString("Notifications.MoneyRequestTransferBody") : _.getString("Notifications.MoneyTransferBody");
            break;
        case a.MessageTypeGroups.SwiftCard:
            const n = o.getFirstUriObjectChild(b.SwiftUriObjectNode);
            n && (i = n.getCardType() === y.imageContentTypes.gif ? _.getString("Notifications.GifBody", {
                emoji: K()
            }) : u.renderText(n, {
                message: e,
                processing: {
                    quotes: S.ProcessingLevel.None,
                    wikiMarkup: S.ProcessingLevel.Stripped
                },
                trimToFirstLine: !0
            })),
            i || (i = _.getString("Notifications.CardBody"));
            break;
        case a.MessageTypeGroups.System:
            e.messagetype === a.MessageTypes.HandshakeInvite ? i = _.getString("Notifications.E2eeInvitedNotificationLabel") : e.messagetype === a.MessageTypes.HandshakeAccept ? i = _.getString("Notifications.E2eeAcceptedNotificationLabel") : e.messagetype === a.MessageTypes.HandshakeComplete && (i = _.getString("Notifications.E2eeEstablishedNotificationLabel"));
            break;
        case a.MessageTypeGroups.MediaAlbum:
            i = _.getString("Notifications.MediaAlbumBody", {
                emoji: K()
            })
        }
        return l.isEncryptedThread(e.conversationId) && (i = _.getString("Notifications.E2eeTextNotificationLabel")),
        e.isTranslationSettings() && (i = d.getTranslationActionString(e.content)),
        i || (i = u.renderText(o, {
            message: e,
            utfFallback: s.default.getS4LMessagingFeatures().enableNotificationUtfFallback,
            processing: {
                quotes: S.ProcessingLevel.None,
                wikiMarkup: S.ProcessingLevel.Stripped
            },
            trimToFirstLine: !0
        })),
        i || ""
    }
    function X(e) {
        const t = J(e);
        return y.getFileContentType(t) === y.imageContentTypes.gif ? _.getString("Notifications.GifBody", {
            emoji: K()
        }) : _.getString("Notifications.PhotoBody", {
            emoji: K()
        })
    }
    function J(e) {
        const t = e.getFirstUriObjectChild(b.UriObjectNode);
        return t && t.getNameForUI() || ""
    }
    function $(e, t=!1) {
        const i = M.getFullUserProfileByMri(e);
        return {
            name: t ? i.getDisplayName() : i.getShortName(),
            gender: i.gender || N.eGender.Unspecified
        }
    }
    function Y(e, t=!1) {
        const i = M.getFullUserProfileByMri(e);
        return p.getDisplayableProfilePotentiallyBeforeStartupAsync(e).then(e=>({
            name: t ? e.getDisplayName() : e.getShortName(),
            gender: i.gender || N.eGender.Unspecified
        }))
    }
    t.getCompactNotificationDisplayInfoPotentiallyBeforeStartupAsync = function(e, t, i, s, l, c, d) {
        const u = s || _.getString("Notifications.UnknownUser")
          , m = l || _.getString("Notifications.UnknownUserShort")
          , S = c || _.getString("Notifications.UnknownUserShort");
        if (i === T.MessageNotificationType.AddToConversation) {
            const t = v.getMessageInitiator(e);
            if (t)
                return Y(t, !0).then(e=>{
                    if (!e.name) {
                        const e = _.getString("Notifications.AddedToConversationDefault", {
                            conversationName: S
                        });
                        return o.Resolved({
                            title: e,
                            body: ""
                        })
                    }
                    return {
                        title: _.getParts("Notifications.AddedToConversationByUser", {
                            conversationName: S,
                            displayName: e.name,
                            gender: f.getLocalizeParamForGender(e.gender)
                        }).join(""),
                        body: ""
                    }
                }
                );
            const i = _.getString("Notifications.AddedToConversationDefault", {
                conversationName: S
            });
            return o.Resolved({
                title: i,
                body: ""
            })
        }
        if (i === T.MessageNotificationType.Reaction) {
            const i = e.getReactionsReadTimeForCurrentUser()
              , s = Date.now()
              , l = r.chain(e.getCleanedEmotionAnnotations(), r.map(e=>e.users), r.flatten(), r.filter(e=>(e.time || s) > i))
              , c = a.getMessageTypeGroup(e);
            return function(e, t, i) {
                let n, s, a, l = o.Resolved(void 0), c = o.Resolved(void 0);
                if (e && e.length > 0) {
                    const o = r.chain(e, r.sortBy(e=>e.time ? -e.time : NaN), r.uniqBy(e=>e.mri));
                    s = j(o.length, t, i),
                    o.length >= 1 && (n = o[0].mri,
                    l = Y(o[0].mri, !0)),
                    o.length >= 2 && (c = function(e, t=!1) {
                        return p.getDisplayableProfilePotentiallyBeforeStartupAsync(e).then(e=>t ? e.getDisplayName() : e.getShortName())
                    }(o[1].mri, !0),
                    a = o.length - 1)
                }
                return o.all([l, c]).then(([e,t])=>({
                    mostRecentMri: n,
                    labelKey: s,
                    firstPersonToReact: e && e.name,
                    gender: e && e.gender,
                    secondPersonToReact: t,
                    othersCount: a
                }))
            }(l, {
                objectType: a.getMessageTypeGroup(e),
                isQuoteOnly: !1,
                isPushNotification: !0
            }, c === a.MessageTypeGroups.SwiftCard ? h.decode(e) : void 0).then(i=>{
                let o;
                o = i.labelKey ? _.getParts(i.labelKey, {
                    user: i.creatorDisplayName,
                    firstOtherPerson: i.firstPersonToReact,
                    secondOtherPerson: i.secondPersonToReact,
                    gender: f.getLocalizeParamForGender(i.gender),
                    otherCount: i.othersCount
                }).join("") : q(e, t, u, S);
                const s = n.endsWith(i.labelKey, O) || n.endsWith(i.labelKey, F)
                  , r = Q(e, m);
                return s ? {
                    title: o,
                    body: r
                } : {
                    title: "",
                    body: o
                }
            }
            )
        }
        if (i === T.MessageNotificationType.ScheduledCall && d) {
            return Y(d.userMri, !0).then(e=>{
                let i;
                if (d.invitationStatus) {
                    const t = d.invitationStatus === k.ScheduledCallInvitationStatus.Accepted ? "Notifications.ScheduledCallAcceptedBody" : "Notifications.ScheduledCallDeclinedBody";
                    i = _.getString(t, {
                        gender: f.getLocalizeParamForGender(e.gender),
                        displayName: e.name,
                        subject: d.subject
                    })
                } else if (d.wasCanceled)
                    i = _.getString("Notifications.ScheduledCallDeletedBody", {
                        gender: f.getLocalizeParamForGender(e.gender),
                        displayName: e.name,
                        subject: d.subject
                    });
                else if (d.hasUpdates)
                    i = _.getString("Notifications.ScheduledCallEditedBody", {
                        gender: f.getLocalizeParamForGender(e.gender),
                        displayName: e.name,
                        subject: d.subject
                    });
                else {
                    const n = t && t.isOneOnOne() ? "Notifications.ScheduledCallInviteTime" : "Notifications.ScheduledCallInviteTimeGroup";
                    i = _.getString(n, {
                        gender: f.getLocalizeParamForGender(e.gender),
                        subject: d.subject,
                        time: g.getDisplayDateTimeString(d.datetimeMs),
                        conversationDisplayName: t && t.topicName() || ""
                    })
                }
                return {
                    title: _.getString("Notifications.OneOnOneTitle", {
                        creator: e.name
                    }),
                    body: i
                }
            }
            )
        }
        return o.Resolved({
            title: q(e, t, u, S),
            body: Q(e, m)
        })
    }
    ,
    t.formatPreviousMessagePotentiallyBeforeStartup = function(e, t, i, n) {
        const o = t || _.getString("Notifications.UnknownUserShort");
        return {
            userDisplayName: o,
            userIdentifier: n || "",
            userAvatar: i,
            receivedTime: e.createdTime,
            message: Q(e, o)
        }
    }
    ,
    t.getScheduledCallDisplayInfoForInvitationAlert = function(e, t, i) {
        const n = $(e, !0)
          , o = I.getScheduledCallSubject(i)
          , s = t === A.ScheduleCallAlertTypes.InvitationAccepted ? "Notifications.ScheduledCallAcceptedBody" : "Notifications.ScheduledCallDeclinedBody";
        return {
            title: _.getString("Notifications.OneOnOneTitle", {
                creator: n.name
            }),
            body: _.getString(s, {
                gender: f.getLocalizeParamForGender(n.gender),
                displayName: n.name,
                subject: o
            })
        }
    }
    ,
    t.getScheduledCallDisplayInfoForInvitationUpdatedAlert = function(e, t, i) {
        const n = $(e)
          , o = I.getScheduledCallSubject(i)
          , s = t === A.ScheduleCallAlertTypes.Edited ? "Notifications.ScheduledCallEditedBody" : "Notifications.ScheduledCallDeletedBody";
        return {
            title: _.getString("Notifications.OneOnOneTitle", {
                creator: n.name
            }),
            body: _.getString(s, {
                displayName: n.name,
                subject: o
            })
        }
    }
    ,
    t.getScheduledCallDisplayInfoForInvitationReceivedAlert = function(e) {
        const t = $(e);
        return {
            title: _.getString("Notifications.OneOnOneTitle", {
                creator: t.name
            }),
            body: _.getString("Notifications.ScheduledCallInviteBody", {
                gender: f.getLocalizeParamForGender(t.gender),
                organizerName: t.name
            })
        }
    }
    ,
    t.getCompactNotificationDisplayInfo = function(e, t, i, o, s) {
        const l = i || _.getString("Notifications.UnknownUser")
          , c = o || _.getString("Notifications.UnknownUserShort")
          , d = s || _.getString("Notifications.UnknownUserShort");
        if (P.isLastMessageUpdateReaction(e)) {
            const i = e.getReactionsReadTimeForCurrentUser()
              , o = Date.now()
              , s = G(r.chain(e.getCleanedEmotionAnnotations(), r.map(e=>e.users), r.flatten(), r.filter(e=>(e.time || o) > i)), {
                objectType: a.getMessageTypeGroup(e),
                isQuoteOnly: !1,
                isPushNotification: !0
            });
            let u;
            return u = s.labelKey ? _.getParts(s.labelKey, {
                user: s.creatorDisplayName,
                firstOtherPerson: s.firstPersonToReact,
                secondOtherPerson: s.secondPersonToReact,
                gender: f.getLocalizeParamForGender(s.gender),
                otherCount: s.othersCount
            }).join("") : q(e, t, l, d),
            {
                title: u,
                body: n.endsWith(s.labelKey, O) || n.endsWith(s.labelKey, F) ? Q(e, c) : ""
            }
        }
        return {
            title: q(e, t, l, d),
            body: Q(e, c)
        }
    }
    ,
    t.getMessageDisplayInfo = function(e, t) {
        let i;
        e.isCurrentUserQuoted() ? i = t ? s.default.getS4LMessagingFeatures().enableReply ? "AlertCard.ReplyWithoutContent" : "AlertCard.QuoteWithoutContent" : s.default.getS4LMessagingFeatures().enableReply ? "AlertCard.ReplyWithContent" : "AlertCard.QuoteWithContent" : e.isCurrentUserMentioned() && (i = a.hasAllAtMention(e.content) ? "AlertCard.MentionAll" : "AlertCard.MentionYou");
        const n = e && $(e.creator);
        return {
            labelKey: i,
            mostRecentMri: e.creator,
            creatorDisplayName: n && n.name,
            gender: n && n.gender
        }
    }
    ,
    t.getReactionsDisplayInfo = G,
    t.getScheduledCallDisplayInfo = function(e) {
        let t;
        switch (e.type) {
        case A.ScheduleCallAlertTypes.Canceled:
            t = "AlertCard.CallInviteDeleted";
            break;
        case A.ScheduleCallAlertTypes.InvitationAccepted:
            t = "AlertCard.UserAcceptedCallInvite";
            break;
        case A.ScheduleCallAlertTypes.InvitationDeclined:
            t = "AlertCard.UserDeclinedCallInvite";
            break;
        case A.ScheduleCallAlertTypes.Received:
            t = "AlertCard.CallInviteReceived";
            break;
        case A.ScheduleCallAlertTypes.Edited:
            t = "AlertCard.CallInviteEdited";
            break;
        default:
            return E.switchStatementExhaustiveChecking(e.type)
        }
        const i = $(e.initiator);
        return {
            mostRecentMri: void 0,
            labelKey: t,
            creatorDisplayName: i.name,
            gender: i.gender,
            subject: e.subject
        }
    }
    ,
    t.getOnboardingDisplayInfo = function() {
        return {
            mostRecentMri: void 0,
            labelKey: "PopCards.NotificationHeader"
        }
    }
    ,
    t.getEmojiSupport = K,
    t.getReactionAlertAccessibilityLabel = function(e) {
        const t = c.toAccessibilityLabel(h.decode(e), {
            message: e,
            includeSenderInformationInAccessibilityLabel: !1,
            includeReactionInformationInAccessibilityLabel: !1
        })
          , i = r.chain(e.getCleanedEmotionAnnotations(), r.map(e=>n.map(e.users, t=>({
            key: e.key,
            mri: t.mri,
            time: t.time || NaN
        }))), r.flatten(), r.sortBy(e=>e.time ? -e.time : NaN))
          , o = {
            messageContent: t
        }
          , s = n.uniqBy(i, e=>e.mri)
          , [a,l] = s;
        if (a && (o.firstName = p.getDisplayName(a.mri) || a.mri),
        l && (o.secondName = p.getDisplayName(l.mri) || l.mri),
        1 === i.length) {
            const e = m.default.getEmoticonByName(i[0].key);
            e && (o.reaction = e.description || i[0].key)
        }
        o.nuberOfUsersReacted = s.length - 1;
        const d = function(e) {
            const t = r.chain(e.getCleanedEmotionAnnotations(), r.map(e=>e.users), r.flatten(), r.sortBy(e=>e.time ? -e.time : NaN), r.groupBy(e=>e.mri));
            switch (n.keys(t).length) {
            case 1:
                const e = n.first(n.values(t));
                return e && e.length > 1 ? "AlertCard.SingleUserReactedAccessibilityLabel" : e && 1 === e.length ? "AlertCard.SingleUserReactedWithReactionAccessibilityLabel" : void 0;
            case 2:
                return "AlertCard.TwoUsersReactedAccessibilityLabel";
            default:
                return "AlertCard.MultipleUsersReactedAccessibilityLabel"
            }
        }(e);
        return _.getString(d, o)
    }
}
, , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(58)
      , s = i(10)
      , r = i(5)
      , a = i(54)
      , l = i(66)
      , c = i(41)
      , d = i(8)
      , u = i(15)
      , g = r.lazyProperties({
        modalBackground: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            backgroundColor: d.Color.blackOverlay50
        }),
        modal: ()=>n.Styles.createViewStyle({
            backgroundColor: d.Color.white,
            maxWidth: 300,
            maxHeight: 300,
            borderRadius: 8,
            alignSelf: "center",
            justifyContent: "center",
            alignItems: "center",
            paddingVertical: 20
        }),
        modalText: ()=>n.Styles.createTextStyle({
            color: d.Color.gray400,
            alignSelf: "stretch",
            justifyContent: "center",
            alignItems: "center",
            paddingVertical: 20,
            marginHorizontal: 20
        }),
        button: ()=>n.Styles.createButtonStyle({
            alignSelf: "stretch",
            justifyContent: "center",
            alignItems: "center"
        })
    });
    t.LoadingDialog = class {
        static show(e, t, i) {
            let r, d;
            e.showActivityIndicator && (r = n.createElement(l.default, {
                size: s.SXActivityIndicatorSize.Medium,
                tintColor: a.getPrimaryColorNoSubscription()
            })),
            e.showCancelButton && (d = n.createElement(c, {
                style: g.button,
                buttonSize: s.SXButtonSize.Medium,
                buttonStyle: s.SXButtonStyle.DarkFill,
                title: e.buttonText || "",
                onPress: e.onButtonPress
            }));
            const h = n.createElement(n.View, {
                style: g.modalBackground
            }, n.createElement(n.View, {
                style: g.modal,
                restrictFocusWithin: !0,
                accessibilityTraits: n.Types.AccessibilityTrait.Dialog,
                accessibilityLabel: e.dialogText,
                tabIndex: -1,
                autoFocus: !0
            }, r, n.createElement(u.BodyText, {
                style: g.modalText,
                autoFocus: !1,
                disableThemeSubscription: !0
            }, e.dialogText), d));
            o.default.showModal(h, e.dialogId, {
                rootViewId: t,
                useFocussedWindowFallback: i
            })
        }
        static dismiss(e, t) {
            o.default.dismissModal(e, t)
        }
        static isDisplayed(e, t) {
            return o.default.isModalDisplayed(e, t)
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(164)
      , s = i(13)
      , r = i(7)
      , a = i(16)
      , l = i(10)
      , c = i(2)
      , d = i(3)
      , u = i(124)
      , g = i(213)
      , h = i(32)
      , p = i(62)
      , m = i(17)
      , S = i(22)
      , C = i(64)
      , y = i(9);
    let f = class extends s.StoreBase {
        constructor() {
            super(...arguments),
            this._closeSplitViewConversation = (e,t)=>t !== l.MainRootViewId && (o.default.closeSplitView(t),
            !0)
        }
        logout(e, t, i) {
            return this._userPrefsStoreSubscriptionKey && p.default.unsubscribe(this._userPrefsStoreSubscriptionKey),
            S.default.isUsingSplitViewNoSubscription() ? (d.log(c.LogTraceArea.Navigation, "close all split views causeId: " + e),
            r.fromThenable(o.default.closeAllSplitViews())) : (d.log(c.LogTraceArea.Navigation, "Skipping logout - split view is not enabled causeId: " + e),
            r.Resolved())
        }
        init() {
            d.log(c.LogTraceArea.Startup, "WindowManagerStore.init is called"),
            g.default.registerForLogout(this, "WindowManagerStore"),
            this._isCurrentlyUsingSplitViewMode = S.default.isUsingSplitViewNoSubscription(),
            this._isCurrentlyUsingSplitViewMode && u.default.addHandler(c.KeyboardShortcut.CloseSplitViewConversation, this._closeSplitViewConversation),
            this._userPrefsStoreSubscriptionKey = p.default.subscribe(()=>{
                if (d.log(c.LogTraceArea.Navigation, "WindowManagerStore - user appearance settings updated => checking if SplitView was enabled from another the client"),
                !this._isCurrentlyUsingSplitViewMode && S.default.isUsingSplitViewNoSubscription()) {
                    const e = y.newCauseId();
                    d.log(c.LogTraceArea.Navigation, "WindowManagerStore._turnOnSplitView - SplitView mode has been enabled on another similar client, causeId: " + e),
                    this._turnOnSplitView(e, !1)
                }
                this._isCurrentlyUsingSplitViewMode = S.default.isUsingSplitViewNoSubscription()
            }
            , p.TriggerKeys.UserAppearancePreferences)
        }
        splitViewInFocus() {
            return o.default.getFocusedSplitViewId()
        }
        toggleSplitView(e) {
            d.log(c.LogTraceArea.Navigation, "WindowManagerStore.toggleSplitView, causeId: " + e),
            S.default.isUsingSplitViewNoSubscription() ? this._turnOffSplitView(e) : this._turnOnSplitView(e)
        }
        _turnOnSplitView(e, t=!0) {
            d.log(c.LogTraceArea.Navigation, "WindowManagerStore._turnOnSplitView, causeId: " + e);
            o.default.turnOnSplitView(360).then(i=>{
                u.default.addHandler(c.KeyboardShortcut.CloseSplitViewConversation, this._closeSplitViewConversation),
                t && (this._isCurrentlyUsingSplitViewMode = !0,
                S.default.setSplitViewMode(!0));
                const n = C.default.getActiveConversationId(l.MainRootViewId);
                m.navigateToCompositeGroup(e, l.MainRootViewId, (t,i)=>{
                    const o = [];
                    return o.push(m.clearMainStageContext(t, i, void 0)),
                    o.push(m.clearModalContext(t, i, l.MainRootViewId)),
                    o.push(m.clearRightSidebarContext(t, i, l.MainRootViewId)),
                    o.push(m.clearSelectedConversationId(i)),
                    o.push(m.setMainAreaFullScreen(!1, l.MainRootViewId)),
                    n && m.navigateToConversation({
                        convId: n,
                        causeId: e
                    }),
                    o
                }
                ),
                0 !== i.width && 0 !== i.width && h.default.setUserPreferencesLocal({
                    lastMainViewWidth: i.width,
                    lastMainViewHeight: i.height
                })
            }
            , e=>{
                d.log(c.LogTraceArea.Navigation, "WindowManagerStore._turnOnSplitView() failed. error: " + e)
            }
            )
        }
        _turnOffSplitView(e) {
            d.log(c.LogTraceArea.Navigation, "WindowManagerStore._turnOffSplitView, causeId: " + e);
            const t = h.default.getUserPreferencesLocal().lastMainViewWidth || 500
              , i = h.default.getUserPreferencesLocal().lastMainViewHeight || 500;
            o.default.turnOffSplitView(t, i).then(()=>(u.default.removeHandler(c.KeyboardShortcut.CloseSplitViewConversation, this._closeSplitViewConversation),
            S.default.setSplitViewMode(!1),
            o.default.getLastActiveSplitView())).then(e=>o.default.closeAllSplitViews().then(()=>e)).then(t=>{
                t.id && a.isMri(t.id) && m.navigateToConversation({
                    convId: t.id,
                    causeId: e
                })
            }
            , e=>{
                d.log(c.LogTraceArea.Navigation, "WindowManagerStore._turnOffSplitView() failed. error: " + e)
            }
            )
        }
    }
    ;
    n.__decorate([s.autoSubscribe], f.prototype, "splitViewInFocus", null),
    f = n.__decorate([s.AutoSubscribeStore], f),
    t.default = new f
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(70)
      , s = i(169)
      , r = i(7)
      , a = i(2)
      , l = i(3)
      , c = i(213)
      , d = i(32)
      , u = (i(20),
    i(511))
      , g = i(1102)
      , h = i(75)
      , p = i(424)
      , m = i(105)
      , S = i(212)
      , C = i(21)
      , y = (i(19),
    i(25))
      , f = (i(248),
    i(652))
      , _ = i(9);
    t.default = new class {
        constructor() {
            this._showNotificationPermissionStatus = o.PermissionStatus.Unknown,
            C.RegisterStartupable(this, "NotificationPermissionService", [d.default, h.default, S.default, f]),
            c.default.registerForLogout(this, "NotificationPermissionService")
        }
        startup() {
            if (h.default.permissionStatus(y.PermissionType.Notifications) === o.PermissionStatus.Granted || this._wasPromptedForPermissionInSetup()) {
                Date.now();
                this.initNotificationsAndRequestPermissions().then(()=>{
                    0
                }
                , e=>{
                    0
                }
                )
            } else {
                l.log(a.LogTraceArea.Push, "Deferring notification init until initial permission prompt");
                const e = d.default.subscribe(()=>{
                    this._wasPromptedForPermissionInSetup() && (l.log(a.LogTraceArea.Push, "Notification init continuing - initial permission prompt complete"),
                    this.initNotificationsAndRequestPermissions(),
                    d.default.unsubscribe(e))
                }
                )
            }
            return r.Resolved()
        }
        logout(e, t, i) {
            return u.default.unsubscribeFromAllNotifications()
        }
        getShowNotificationPermissionStatus() {
            return this._showNotificationPermissionStatus
        }
        initNotificationsAndRequestPermissions() {
            if (this._showNotificationPermissionStatus !== o.PermissionStatus.Unknown) {
                const e = this._showNotificationPermissionStatus === o.PermissionStatus.Granted;
                return l.log(a.LogTraceArea.Push, "Notification init called with known permission state: " + o.PermissionStatus[this._showNotificationPermissionStatus]),
                r.Resolved(e)
            }
            if (this._notificationPermissionPromise)
                return l.log(a.LogTraceArea.Push, "Notification init called and awaiting permissions"),
                this._notificationPermissionPromise;
            const e = _.newCauseId();
            return l.log(a.LogTraceArea.Push, "initializeNotification causeId: " + e),
            this._notificationPermissionPromise = this._initializePushNotificationsAndRequestPushPermissions().then(t=>u.default.initializeLocalNotifications().then(i=>{
                l.log(a.LogTraceArea.Push, "Notification permission grant status: PUSH: " + t + " LOCAL: " + i + ", causeId: " + e),
                this._showNotificationPermissionStatus = t && i ? o.PermissionStatus.Granted : o.PermissionStatus.Denied;
                const n = h.default.subscribe(()=>{
                    h.default.permissionStatus(y.PermissionType.Notifications) === o.PermissionStatus.Granted && (l.log(a.LogTraceArea.Push, "Notification permission granted due to PermissionsStore update"),
                    this._showNotificationPermissionStatus = o.PermissionStatus.Granted,
                    h.default.unsubscribe(n))
                }
                );
                return t && i
            }
            )),
            this._notificationPermissionPromise.finally(()=>{
                this._notificationPermissionPromise = void 0
            }
            )
        }
        _wasPromptedForPermissionInSetup() {
            const e = d.default.getUserPreferencesLocal();
            return !!e.wasPromptedAboutPermissions || !!e.isSetupWizardCompleted
        }
        _initializePushNotificationsAndRequestPushPermissions() {
            const e = m.default.isLoginSession();
            return (e ? s.PushNotifications.clearUnacknowledgedNotifications() : s.PushNotifications.getUnacknowledgedNotifications()).then(t=>{
                const i = _.newCauseId();
                t && 0 !== t.length ? (l.log(a.LogTraceArea.Push, "Found " + t.length + " unacknowledged notifications causeId: " + i),
                n.each(t, t=>{
                    const n = t.serviceSpecificData;
                    if (!n)
                        return void l.error(a.LogTraceArea.Push, "Push notification serviceSpecificData was missing causeId: " + i);
                    const o = n.data || n
                      , r = o && o.eventType ? Number(o.eventType) : p.PNHEvents.IncomingUnknown;
                    l.log(a.LogTraceArea.Push, "Logging not processed notification of type " + r + " causeId: " + i),
                    l.track(new g.NotificationNotProcessedEvent(r,!e,t.receivedTimeMs,S.default.CallingNodeId.get())),
                    e || s.PushNotifications.acknowledgeNotificationReceived(t),
                    u.default.addPushNotificationToQueue(t, i)
                }
                ),
                u.default.event_pushNotificationQueueChanged.fire()) : l.log(a.LogTraceArea.Push, "No unacknowledged notifications found causeId: " + i)
            }
            ),
            u.default.initializePushNotifications()
        }
        test_reset() {
            this._showNotificationPermissionStatus = o.PermissionStatus.Unknown,
            this._notificationPermissionPromise = void 0
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(2)
      , r = i(110)
      , a = i(3)
      , l = i(121)
      , c = i(134)
      , d = i(14)
      , u = i(12);
    class g extends u.default {
        constructor() {
            super(...arguments),
            this._focusedButtonIndex = 0,
            this._mountedRefsMap = new c.default,
            this.handleFocusEvent = e=>(a.log(s.LogTraceArea.GenericUnsafe, "CustomActionMenuBase.handleFocusEvent"),
            e === r.FocusEvent.CustomActionMenuDisplayed && (this.focusFirst(),
            !0)),
            this._onKeyPress = e=>{
                switch (e.keyCode) {
                case l.UP:
                case l.LEFT:
                    --this._focusedButtonIndex;
                    break;
                case l.DOWN:
                case l.RIGHT:
                    ++this._focusedButtonIndex;
                    break;
                default:
                    return
                }
                const t = n.size(this._mountedRefsMap.allRefs());
                this._focusedButtonIndex < 0 ? this._focusedButtonIndex = 0 : this._focusedButtonIndex > t - 1 && (this._focusedButtonIndex = t - 1);
                const i = this._mountedRefsMap.ref("row" + this._focusedButtonIndex);
                i && i.requestFocus(),
                e.preventDefault(),
                e.stopPropagation()
            }
        }
        _createContext() {
            const e = this.context || {};
            return e.isPresentedInMobileSheet = !0,
            e
        }
        focusFirst() {
            const e = this._mountedRefsMap.ref("row0");
            e && e.requestFocus()
        }
        componentDidMount() {
            super.componentDidMount(),
            r.register(r.FocusEvent.CustomActionMenuDisplayed, this)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            r.unregister(r.FocusEvent.CustomActionMenuDisplayed, this)
        }
        render() {
            return o.createElement(o.View, {
                style: d.flexOne,
                onKeyPress: this._onKeyPress
            }, this._renderRows(this.props, this.state))
        }
        _renderRows(e, t) {
            const i = this._buildRows(e, t)
              , o = i.length - 1;
            let s = 0;
            return n.map(i, (t,i)=>{
                const n = !t.nonInteractive
                  , r = Object.assign(Object.assign({}, t.props), {
                    ref: n ? this._mountedRefsMap.onComponentRef("row" + s) : void 0,
                    hideBorder: t.props.hideBorder || i === o,
                    colorThemeOverride: e.colorThemeOverride
                });
                return n && s++,
                t.builder(r)
            }
            )
        }
    }
    t.default = g
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(151)
      , r = i(27)
      , a = i(5)
      , l = i(14)
      , c = a.lazyProperties({
        buttonChildContainer: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible"
        }),
        buttonChildContainerReverse: ()=>n.Styles.createViewStyle({
            flexDirection: "row-reverse"
        }),
        titleContainer: ()=>n.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center"
        })
    });
    class d extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._onContentButtonRef = e=>{
                this._contentButton = e || void 0
            }
        }
        render() {
            const e = n.createElement(n.View, {
                style: c.titleContainer
            }, n.createElement(n.Text, {
                style: this.props.titleStyle
            }, this.props.title))
              , t = n.createElement(r.default, {
                icon: this.props.icon,
                color: this.props.color,
                size: this.props.size,
                style: this.props.iconStyle
            })
              , i = [c.buttonChildContainer];
            return this.props.useTrailingIcon && i.push(c.buttonChildContainerReverse),
            n.createElement(s.HoverableButton, {
                style: [l.alignItemsCenter, this.props.style],
                title: this.props.title,
                ref: this._onContentButtonRef,
                autoFocus: this.props.autoFocus,
                onPress: this.props.onPress,
                accessibilityLabel: this.props.accessibilityLabel || this.props.title,
                tabIndex: this.props.tabIndex,
                importantForAccessibility: this.props.importantForAccessibility,
                disabled: this.props.disabled
            }, n.createElement(n.View, {
                style: i
            }, t, e))
        }
        requestFocus() {
            this._contentButton && this._contentButton.requestFocus()
        }
    }
    t.default = d
}
, , , , , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(231)
      , s = i(5)
      , r = i(132)
      , a = i(54)
      , l = i(8)
      , c = i(23)
      , d = i(15)
      , u = i(12)
      , g = i(109)
      , h = i(29)
      , p = s.lazyProperties({
        containerRounded: ()=>n.Styles.createViewStyle({
            position: "absolute",
            bottom: 0,
            left: 0,
            right: 0,
            flexDirection: "row",
            height: 130,
            justifyContent: "center",
            alignItems: "flex-end"
        }),
        barButton: ()=>n.Styles.createButtonStyle({
            bottom: 0,
            left: 0,
            right: 0,
            height: 30
        }),
        contentContainer: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            paddingHorizontal: 25,
            height: 30,
            backgroundColor: l.Color.blue,
            borderRadius: 15
        }),
        actionLabelText: ()=>n.Styles.createTextStyle({
            textDecorationLine: "underline",
            marginLeft: 10
        }),
        darkText: ()=>n.Styles.createTextStyle({
            color: l.Color.gray400
        }),
        lightText: ()=>n.Styles.createTextStyle({
            color: l.Color.white
        }),
        darkBackground: ()=>n.Styles.createViewStyle({
            backgroundColor: l.Color.gray400
        }),
        whiteBackground: ()=>n.Styles.createViewStyle({
            backgroundColor: l.Color.white
        })
    });
    class m extends u.default {
        constructor() {
            super(...arguments),
            this._toastId = 0,
            this._verticalAnimatedValue = new n.Animated.Value(130),
            this._verticalAnimatedStyle = n.Styles.createAnimatedViewStyle({
                transform: [{
                    translateY: this._verticalAnimatedValue
                }]
            }),
            this._onMouseEnter = ()=>{
                this._hideToastTimerId && h.clearTimeout(this._hideToastTimerId)
            }
            ,
            this._onMouseLeave = ()=>{
                this.state.currentMessage && this._hideToast(this.state.currentMessage.params.duration || 0, this.state.currentMessage.params.key)
            }
            ,
            this._onShowToast = (e,t)=>{
                this.isComponentMounted() && this._recalcDisplay(e, t)
            }
            ,
            this._onTapDismiss = ()=>{
                const e = this.state.currentMessage ? this.state.currentMessage.params : void 0;
                e && e.onPress && e.onPress(),
                this._hideToast(0, e ? e.key : void 0)
            }
        }
        _recalcDisplay(e, t) {
            if (this.state.currentMessage !== e) {
                const i = e && e.params.rootViewId && e.params.rootViewId !== this._getRootViewId() ? void 0 : e;
                this.setState({
                    currentMessage: i
                }, ()=>{
                    i && this._showToast(0, t)
                }
                )
            } else
                this._hideToast(0, e ? e.params.key : void 0)
        }
        _buildState(e, t) {
            let i = {
                isNavigatingWithKeyboard: o.default.isNavigatingWithKeyboard()
            };
            return t && (i.currentMessage = void 0,
            i.isToastHidden = !0),
            i
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            r.default.showToastEvent.subscribe(this._onShowToast)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            r.default.showToastEvent.unsubscribe(this._onShowToast)
        }
        _renderOptionalActionLabel() {
            if (this.state.currentMessage && this.state.currentMessage.params.actionLabel)
                return n.createElement(n.Text, {
                    style: [p.actionLabelText, c.font.uiDisplayBold]
                }, this.state.currentMessage.params.actionLabel)
        }
        render() {
            if (!this.state.currentMessage)
                return null;
            const e = this.state.currentMessage.params
              , t = [];
            this._useDarkTheme() ? t.push(p.darkText) : this._currentTheme !== g.Theme.Accessible && e.textColor ? e.textColor && t.push(n.Styles.createTextStyle({
                color: e.textColor
            }, !1)) : t.push(p.lightText);
            const i = [p.contentContainer];
            this._useDarkTheme() ? i.push(p.whiteBackground) : this._currentTheme === g.Theme.Accessible ? i.push(p.darkBackground) : e.color ? i.push(n.Styles.createViewStyle({
                backgroundColor: e.color
            }, !1)) : i.push(a.getBackgroundColorStyleNoSubscription());
            const o = [p.containerRounded];
            this.props.leftOffset && o.push(n.Styles.createViewStyle({
                left: this.props.leftOffset
            }, !1));
            return n.createElement(n.View, {
                style: o,
                ignorePointerEvents: !0
            }, n.createElement(n.Animated.View, {
                style: this._verticalAnimatedStyle
            }, n.createElement(n.Button, {
                style: p.barButton,
                onPress: this._onTapDismiss,
                disabled: this.state.isToastHidden,
                disabledOpacity: 1
            }, n.createElement(n.View, {
                style: i,
                accessibilityLiveRegion: n.Types.AccessibilityLiveRegion.Assertive,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes,
                onMouseEnter: this._onMouseEnter,
                onMouseLeave: this._onMouseLeave
            }, n.createElement(d.Caption, {
                style: t
            }, this.state.currentMessage.params.textMessage, void 0, this._renderOptionalActionLabel())))))
        }
        _showToast(e, t) {
            const i = this.state.currentMessage;
            if (!i)
                return;
            this._toastId++,
            this._hideToastTimerId && h.clearTimeout(this._hideToastTimerId),
            this._showToastTimerId && h.clearTimeout(this._showToastTimerId);
            const o = this._toastId
              , s = -1 * (t || 10);
            this._showToastTimerId = h.setTimeout(()=>{
                this.isComponentMounted() && n.Animated.timing(this._verticalAnimatedValue, {
                    toValue: s,
                    easing: n.Animated.Easing.Out(),
                    duration: 250,
                    isInteraction: !1
                }).start(()=>{
                    this.isComponentMounted() && this._toastId === o && (this.state.currentMessage && n.Accessibility.announceForAccessibility(this.state.currentMessage.params.accessibilityLabel || this.state.currentMessage.params.textMessage),
                    this.setState({
                        isToastHidden: !1
                    }),
                    this._hideToast(this._getToastTimeout(i.params.duration), i.params.key))
                }
                )
            }
            , e)
        }
        _hideToast(e, t) {
            this._hideToastTimerId && h.clearTimeout(this._hideToastTimerId),
            this._hideToastTimerId = h.setTimeout(()=>{
                this.isComponentMounted() && n.Animated.timing(this._verticalAnimatedValue, {
                    toValue: 130,
                    easing: n.Animated.Easing.Out(),
                    duration: 200,
                    isInteraction: !1
                }).start(e=>{
                    r.default.toastDismissed(t),
                    e.finished && this.isComponentMounted() && this.setState({
                        isToastHidden: !0
                    })
                }
                )
            }
            , e)
        }
        _getToastTimeout(e) {
            return this.state.isNavigatingWithKeyboard ? 1e4 : e || 3e3
        }
    }
    e.exports = m
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(42)
      , r = i(10)
      , a = i(523)
      , l = i(5)
      , c = i(73)
      , d = i(8)
      , u = i(14)
      , g = i(15)
      , h = i(12)
      , p = l.lazyProperties({
        oneRowContainer: ()=>o.Styles.createViewStyle({
            justifyContent: "space-between",
            flexDirection: "row",
            alignItems: "center",
            alignSelf: "stretch"
        }),
        container: ()=>o.Styles.createViewStyle({
            flexDirection: "column",
            justifyContent: "center"
        }),
        button: ()=>o.Styles.createButtonStyle({
            flexDirection: "row",
            alignItems: "stretch",
            marginLeft: 10
        })
    });
    class m extends h.default {
        constructor() {
            super(...arguments),
            this._onPickerButtonRef = e=>{
                this._pickerButton = e || void 0
            }
            ,
            this._onPickerClick = e=>{
                e.stopPropagation(),
                this.props.onDevicePickerOpen && this.props.onDevicePickerOpen();
                const t = {
                    anchor: ()=>this._pickerButton,
                    useTheme: !0,
                    positionPriorities: ["bottom", "top"],
                    colorThemeOverride: this.props.colorThemeOverride
                };
                return c.default.showWithOptions({
                    id: "avSettingsPickerMenu",
                    config: t,
                    getMenuItems: this._getMenuItems,
                    handleMenuCommand: this._onHandleMenuCommand,
                    rootViewId: this._getRootViewId(),
                    onDismiss: this.props.onDevicePickerDismiss,
                    invokingEvent: e
                })
            }
            ,
            this._getMenuItems = ()=>this.props.items.map(e=>({
                text: e.label,
                command: e.value,
                selected: this.props.selectedValue === e.value,
                isCheckbox: !0
            })),
            this._onHandleMenuCommand = e=>{
                if (e === c.SXActionMenuCancel)
                    return;
                const t = n.findIndex(this.props.items, t=>t.value === e);
                this.props.onValueChange(e, t)
            }
        }
        render() {
            const e = s.default.combinedAccessibilityLabel(this.props.title, this._getSelectedItemLabel())
              , t = this.props.title ? o.createElement(g.RowTitle, {
                colorThemeOverride: this._currentTheme
            }, this.props.title) : void 0
              , i = this.props.presentedOverVideo && this.props.isOverVideo ? d.Color.white : void 0
              , l = n.isEmpty(this.props.items) ? void 0 : o.createElement(a, {
                ref: this._onPickerButtonRef,
                style: p.button,
                label: this._getSelectedItemLabel(),
                labelColor: i,
                labelMaxWidth: this.props.labelMaxWidth || 270,
                overrideIconColor: i,
                onPress: this._onPickerClick,
                accessibilityLabel: e,
                tabIndex: this.props.tabIndex
            })
              , c = o.createElement(o.View, {
                style: p.oneRowContainer
            }, t, l);
            return o.createElement(o.View, {
                style: [p.container, r.ListItem.small.shortHeightStyle, this.props.style]
            }, this.props.subtitle ? o.createElement(o.View, {
                style: u.flexOne
            }, c, this.props.subtitle) : c)
        }
        _getSelectedItemLabel() {
            const e = n.find(this.props.items, e=>e.value === this.props.selectedValue);
            return e ? e.label : ""
        }
    }
    e.exports = m
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.formatDevicesForPicker = function(e) {
        return e.map(e=>({
            label: e.label,
            value: e.id
        }))
    }
}
, , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(35);
    e.exports = class {
        static getTrackingQueryParam(e) {
            if (n.isEmpty(e))
                return;
            const t = o.default.getURIComponents(e);
            return t ? n.get(t.queryParameterKeyValues, "WT.mc_id", void 0) : void 0
        }
    }
}
, , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(51)
      , s = i(77)
      , r = i(5)
      , a = i(23)
      , l = i(14)
      , c = i(15)
      , d = r.lazyProperties({
        componentHeading: ()=>n.Styles.createTextStyle({
            paddingVertical: 20
        }),
        propContent: ()=>n.Styles.createButtonStyle({
            flexDirection: "row",
            flexWrap: "wrap"
        }),
        propContainer: ()=>n.Styles.createViewStyle({
            paddingVertical: 20
        }),
        propHeading: ()=>n.Styles.createTextStyle({
            paddingBottom: 20
        }),
        propLink: ()=>n.Styles.createTextStyle({
            marginBottom: 20,
            textDecorationLine: "underline"
        }),
        propOptionContainer: ()=>n.Styles.createViewStyle({
            padding: 20
        }),
        propOptionContainerSelected: ()=>n.Styles.createViewStyle({
            borderWidth: 2
        }),
        propOptionCaption: ()=>n.Styles.createTextStyle({
            paddingBottom: 20
        }),
        propOptionContent: ()=>n.Styles.createViewStyle({
            justifyContent: "space-between"
        })
    });
    class u extends o.default {
        _renderComponentSection(e, t) {
            return n.createElement(n.View, {
                key: e
            }, n.createElement(c.Header, {
                style: d.componentHeading,
                size: 3,
                selectable: !0
            }, e), n.createElement(n.View, null, t), n.createElement(s, null))
        }
        _renderPropSection(e, t, i, o) {
            const s = t ? n.createElement(n.Link, Object.assign({
                style: [a.subtitleFontStyle(), this._themeStyles.primaryTextColorStyle, this._themeStyles.linkTextColorStyle, d.propLink]
            }, t, {
                selectable: !0
            }), t.title) : void 0;
            return n.createElement(n.View, {
                key: e,
                style: d.propContainer
            }, n.createElement(c.Header, {
                style: s ? void 0 : d.propHeading,
                size: 5
            }, e), s, n.createElement(n.View, {
                style: [d.propContent, o]
            }, i))
        }
        _renderPropOptionSection(e, t, i=!1, o, s="auto") {
            const r = [l.alignItemsCenter, d.propOptionContainer];
            i && (r.push(d.propOptionContainerSelected),
            r.push(this._themeStyles.viewBorderStyle)),
            o && r.push(o);
            const a = n.Styles.createTextStyle({
                alignSelf: s
            }, !1);
            return n.createElement(n.View, {
                key: e,
                style: r
            }, n.createElement(c.CardTitle, {
                style: [d.propOptionCaption, a],
                selectable: !0
            }, e), n.createElement(n.View, {
                style: d.propOptionContent
            }, t))
        }
    }
    t.default = u
}
, , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(4)
      , s = i(18);
    t.ForceRTLBasedOnLanguage = !0;
    t.default = class {
        static updateFlags() {
            if (t.ForceRTLBasedOnLanguage) {
                const e = o.isRTLLanguage();
                n.International.allowRTL(e),
                n.International.forceRTL(e),
                s.updateIsRTL(e)
            } else
                n.International.allowRTL(!0),
                s.updateIsRTL(n.International.isRTL())
        }
        static forceRTL(e) {
            n.International.forceRTL(e),
            t.ForceRTLBasedOnLanguage && (n.International.allowRTL(e),
            s.updateIsRTL(e))
        }
    }
}
, , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(128)
      , s = i(91)
      , r = i(91)
      , a = i(39);
    var l;
    !function(e) {
        e[e.Search = 0] = "Search",
        e[e.ConfigError = 1] = "ConfigError",
        e[e.EmoticonUsage = 2] = "EmoticonUsage",
        e[e.MojiUsage = 3] = "MojiUsage",
        e[e.GifUsage = 4] = "GifUsage",
        e[e.StickerUsage = 5] = "StickerUsage",
        e[e.EffectUsage = 6] = "EffectUsage",
        e[e.PesLargeEmoticon = 7] = "PesLargeEmoticon",
        e[e.PickerPopupUsage = 8] = "PickerPopupUsage"
    }(l = t.PesAction || (t.PesAction = {}));
    class c extends a.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "messaging_pes"
        }
        getAttributes() {
            return n.assign({}, super.getAttributes(), {
                Action: l[this._action]
            })
        }
    }
    t.PesSearchSession = class extends c {
        constructor() {
            super(l.Search),
            this._attemptsMade = 0
        }
        setSearchType(e) {
            this._searchType = e
        }
        incrementAttemptsMade() {
            this._attemptsMade++
        }
        setNavigatedFromMediaBar(e) {
            this._navigatedFromMediaBar = e
        }
        complete(e, t, i, n=!1, o, s) {
            this._wasSuccessful = e,
            this._endTime = Date.now(),
            this._searchQueryLength = t,
            this._messageSent = n,
            o && (this._noOfPesItemsSelected = o),
            i && (this._resultPesItemIdSelected = i),
            s && (this._didUserSwitchTabTypesToEndSession = s)
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.WasSuccessful = this._wasSuccessful,
            e.DurationInSeconds = Math.round((this._endTime - this._eventCreationTime) / 1e3),
            e.SearchType = s.TabType[this._searchType],
            e.SearchQueryLength = this._searchQueryLength,
            e.SearchAttempsCount = this._attemptsMade,
            e.WasMessageSent = this._messageSent,
            e.WasClickedFromMediaBar = this._navigatedFromMediaBar,
            this._noOfPesItemsSelected && (e.NumberOfItemsSelectedForSend = this._noOfPesItemsSelected),
            this._didUserSwitchTabTypesToEndSession && (e.DidSessionEndViaTabTypeSwitch = this._didUserSwitchTabTypesToEndSession),
            this._resultPesItemIdSelected && (e.PesResultId = this._resultPesItemIdSelected),
            e
        }
    }
    ;
    t.EmptyPesConfigurationReceived = class extends c {
        constructor(e, t, i, n, o, s) {
            super(l.ConfigError),
            this._locale = e,
            this._configUrl = t,
            this._emoticonTabCount = i,
            this._mojiTabCount = n,
            this._emoticonCount = o,
            this._mojiCount = s
        }
        getAttributes() {
            const e = super.getAttributes();
            return this._locale && (e.Locale = this._locale),
            e.ConfigURL = this._configUrl,
            e.EmoticonTabCount = this._emoticonTabCount,
            e.MojiTabCount = this._mojiTabCount,
            e.EmoticonCount = this._emoticonCount,
            e.MojisCount = this._mojiCount,
            e
        }
    }
    ;
    const d = {
        [s.TabType.Emoticon]: l.EmoticonUsage,
        [s.TabType.Moji]: l.MojiUsage,
        [s.TabType.ChatSticker]: l.StickerUsage,
        [s.TabType.Gif]: l.GifUsage,
        [s.TabType.Effect]: l.EffectUsage,
        [s.TabType.PickerPopup]: l.PickerPopupUsage
    };
    t.PesPickerUsageEvent = class extends c {
        constructor(e, t, i) {
            super(d[e]),
            this._firstRender = t,
            this._triggeredBy = i,
            this._itemsAddedCount = 0,
            this._diverseItemsAddedCount = 0,
            this._getEndOpeningTime = ()=>this._endOpeningTime ? this._endOpeningTime - this._eventCreationTime : "NotMeasured"
        }
        getAttributes() {
            const e = {
                ItemsAddedCount: this._itemsAddedCount,
                OpeningDuration: this._getEndOpeningTime(),
                IsFirstRender: this._firstRender,
                DiverseItemsAddedCount: this._diverseItemsAddedCount
            };
            return this._triggeredBy && (e.TriggeredBy = r.PesPickerTriggeredBy[this._triggeredBy]),
            n.assign({}, super.getAttributes(), e)
        }
        itemAdded(e) {
            e && e.tone && e.tone !== o.DefaultDiverseTone && this._diverseItemsAddedCount++,
            this._itemsAddedCount++
        }
        openingCompleted(e) {
            e && (this._endOpeningTime = e)
        }
    }
    ;
    t.PesSettingsEvent = class extends c {
        constructor(e, t, i) {
            super(l.PesLargeEmoticon),
            this._preventDisplayLargeEmoticons = e,
            this._singleEmoticonSize = t,
            this._multipleEmoticonsSize = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsPreventDisplayLargeEmoticonsSet = this._preventDisplayLargeEmoticons,
            e.SingleEmoticonSize = this._singleEmoticonSize,
            e.MultipleEmoticonSize = this._multipleEmoticonsSize,
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(39);
    var r, a;
    !function(e) {
        e[e.Invite = 0] = "Invite",
        e[e.Accept = 1] = "Accept",
        e[e.Confirm = 2] = "Confirm",
        e[e.Reject = 3] = "Reject",
        e[e.EncryptionFailure = 4] = "EncryptionFailure",
        e[e.DecryptionFailure = 5] = "DecryptionFailure"
    }(r = t.E2eeAction || (t.E2eeAction = {})),
    function(e) {
        e[e.ForceInviteIdRefresh = 0] = "ForceInviteIdRefresh",
        e[e.NewInviteIdSynced = 1] = "NewInviteIdSynced"
    }(a = t.E2eeRetryType || (t.E2eeRetryType = {}));
    class l extends s.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._action = e,
            this._failure = t,
            this._reason = i
        }
        getEventName() {
            return "messaging_e2ee"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = r[this._action],
            this._reason && (e.Reason = this._reason),
            e.Status = this._failure ? "Failure" : "OK",
            e
        }
    }
    t.E2eeInvite = class extends l {
        constructor(e, t=!1, i) {
            super(r.Invite, t, i),
            this._origin = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = n.isNil(this._origin) ? "N/A" : o.E2EEInviteOrigin[this._origin],
            e
        }
    }
    ;
    t.E2eeAccept = class extends l {
        constructor(e, t=!1, i) {
            super(r.Accept, t, i),
            this._origin = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = n.isNil(this._origin) ? "N/A" : o.E2EEAcceptOrigin[this._origin],
            e
        }
    }
    ;
    t.E2eeConfirm = class extends l {
        constructor(e, t=!1, i) {
            super(r.Confirm, t, i),
            this._isAutoConfirm = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsAutoConfirm = this._isAutoConfirm,
            e
        }
    }
    ;
    t.E2eeReject = class extends l {
        constructor(e, t=!1, i) {
            super(r.Reject, t, i),
            this._rejectionReason = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.RejectionReason = n.isNil(this._rejectionReason) ? "N/A" : o.E2EERejectionReason[this._rejectionReason],
            e
        }
    }
    ;
    t.E2eeRetry = class extends l {
        constructor(e, t) {
            super(e, !1),
            this._retryType = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.RetryType = a[this._retryType],
            e
        }
    }
    ;
    t.E2eeEncryptionFailure = class extends l {
        constructor(e) {
            super(r.EncryptionFailure, !0, e)
        }
    }
    ;
    t.E2eeDecryptionFailure = class extends l {
        constructor(e) {
            super(r.DecryptionFailure, !0, e)
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(39);
    var s;
    !function(e) {
        e[e.Invalid = 1] = "Invalid",
        e[e.Useless = 2] = "Useless",
        e[e.DontUnderstand = 3] = "DontUnderstand",
        e[e.Other = 4] = "Other",
        e[e.NoAnswer = 5] = "NoAnswer"
    }(s = t.CaptivePortalQuestionnaireOption || (t.CaptivePortalQuestionnaireOption = {}));
    class r extends o.TelemetryEventBase {
        getEventName() {
            return "messaging_network"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    class a extends r {
        constructor(e, t, i) {
            super(),
            this._checkResult = e,
            this._connectedBefore = t,
            this._checkBefore = i,
            this._requestSuccess = !0
        }
        getActionName() {
            return "CaptivePortal"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.RequestSuccess = this._requestSuccess,
            e.CheckResult = this._getCheckResult(),
            e.ConnectedBefore = this._connectedBefore,
            e.CheckBefore = this._checkBefore,
            e
        }
        _getCheckResult() {
            return this._requestSuccess ? this._checkResult ? "Connected" : "CaptivePortal" : "RequestFailure"
        }
    }
    t.CaptivePortalCheckEvent = a;
    t.CaptivePortalCheckFailureEvent = class extends a {
        constructor(e, t, i, n) {
            super(!0, e, t),
            this._statusText = i,
            this._timedOut = n,
            this._requestSuccess = !1
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.StatusText = this._statusText,
            e.IsTimeout = this._timedOut,
            e
        }
    }
    ;
    t.CaptivePortalOpenBrowserEvent = class extends r {
        getActionName() {
            return "CaptivePortalBrowserOpen"
        }
    }
    ;
    t.ConnectivityAlertShowEvent = class extends r {
        constructor(e) {
            super(),
            this._alertType = e
        }
        getActionName() {
            return "ConnectivityAlertShow"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AlertType = n.ConnectivityAlertType[this._alertType],
            e
        }
    }
    ;
    t.ConnectivityAlertDismissEvent = class extends r {
        constructor(e) {
            super(),
            this._alertType = e
        }
        getActionName() {
            return "ConnectivityAlertDismiss"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AlertType = n.ConnectivityAlertType[this._alertType],
            e
        }
    }
    ;
    t.CaptivePortalQuestionnaireEvent = class extends r {
        constructor(e) {
            super(),
            this._answer = e
        }
        getActionName() {
            return "CaptivePortalQuestionnaire"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Answer = s[this._answer],
            e
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(212)
      , r = i(39);
    class a extends r.TelemetryEventBase {
        getEventName() {
            return "sisu_login_logout"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Action: this.getActionName(),
                NodeId: s.default.CallingNodeId.get() || ""
            })
        }
        getLoggedOutSendingPolicy() {
            return r.TelemetryEventLoggedOutPolicy.SendNow
        }
    }
    t.RedirectToLoginEvent = class extends a {
        constructor(e, t, i, n) {
            super(),
            this._reason = e,
            this._errorCode = t,
            this._timeSinceLastRefresh = i,
            this._correlationId = n
        }
        getActionName() {
            return "RedirectToLogin"
        }
        getAttributes() {
            const e = n.assign(super.getAttributes(), {
                Reason: o.RedirectToLoginReason[this._reason]
            });
            return this._errorCode && (e.ErrorCode = this._errorCode),
            this._timeSinceLastRefresh && (e.TimeSinceLastRefresh = this._timeSinceLastRefresh),
            this._correlationId && (e.ErrorCorrelationId = this._correlationId),
            e
        }
    }
    ;
    t.StartupErrorEvent = class extends a {
        constructor(e) {
            super(),
            this._error = e
        }
        getActionName() {
            return "StartupError"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Error: this._error || "unknown"
            })
        }
    }
    ;
    t.LogoutEvent = class extends a {
        constructor(e, t) {
            super(),
            this._reason = e,
            this._isSaveCredentials = t,
            this._attributes = {
                Reason: o.LogoutReason[this._reason]
            },
            n.isUndefined(this._isSaveCredentials) || (this._attributes = n.assign(this._attributes, {
                IsSaveCredentials: this._isSaveCredentials
            }))
        }
        getActionName() {
            return "Logout"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._attributes)
        }
    }
    ;
    var l;
    t.KeychainFailureEvent = class extends a {
        constructor(e, t, i) {
            super(),
            this._failureType = e,
            this._tokenType = t,
            this._error = i,
            this._attributes = {
                Error: this._error,
                FailureType: o.KeychainFailureType[this._failureType],
                TokenType: o.KeychainTokenType[this._tokenType]
            }
        }
        getActionName() {
            return "KeychainFailure"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._attributes)
        }
    }
    ,
    function(e) {
        e[e.EmptyToken = 0] = "EmptyToken",
        e[e.InvalidToken = 1] = "InvalidToken"
    }(l = t.TokenIssueType || (t.TokenIssueType = {}));
    t.TokenIssueEvent = class extends a {
        constructor(e, t, i) {
            super(),
            this._tokenType = e,
            this._tokenIssueType = t,
            this._source = i,
            this._attributes = {
                TokenType: o.KeychainTokenType[this._tokenType],
                TokenIssueType: l[this._tokenIssueType],
                Source: this._source
            }
        }
        getActionName() {
            return "TokenIssue"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._attributes)
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    var o, s;
    !function(e) {
        e[e.Success = 0] = "Success",
        e[e.Failure = 1] = "Failure"
    }(o = t.FindPanelResult || (t.FindPanelResult = {})),
    function(e) {
        e[e.NoAddinsAvailable = 0] = "NoAddinsAvailable",
        e[e.AddinsAvailable = 1] = "AddinsAvailable",
        e[e.AddinsFetchError = 2] = "AddinsFetchError"
    }(s = t.FindPanelLaunchMessage || (t.FindPanelLaunchMessage = {}));
    class r extends n.TelemetryEventBase {
        getEventName() {
            return "caap_find_panel"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.FindPanelLaunched = class extends r {
        constructor(e) {
            super(),
            this._launchData = e
        }
        getActionName() {
            return "Launched"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.LaunchResult = o[this._launchData.resultCode],
            e.LaunchResultMessage = s[this._launchData.resultMessage],
            e
        }
    }
    ;
    t.FindPanelAddinShared = class extends r {
        constructor(e) {
            super(),
            this._shareData = e
        }
        getActionName() {
            return "AddinShared"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.IntegrationId = this._shareData.integrationId || "",
            e.IsBrowserUrl = this._shareData.isBrowserUrl,
            e.ShareResult = o[this._shareData.resultCode],
            e.ShareResultMessage = this._shareData.resultMessage || "",
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    const n = i(7)
      , o = i(6)
      , s = i(48)
      , r = i(2)
      , a = i(3)
      , l = i(74)
      , c = i(34)
      , d = i(105)
      , u = i(21)
      , g = i(39);
    e.exports = new class {
        constructor() {
            this._appConfigStoreSubscribeCallback = ()=>{
                const e = o.default.getEngagementFeatures().engagementUserTagging;
                if (this._isUserTaggingEnabled = e.enabled,
                this._maxDurationInSeconds = e.maxDurationInSeconds,
                this._isUserTaggingEnabled) {
                    if (this._cachedUserTaggingConfig)
                        return;
                    this._cachedUserTaggingConfig = l.default.getData(s.InternalKeys.EngagementUserTaggingConfig),
                    this._cachedUserTaggingConfig && (this._cacheInvalidated = !1,
                    this._cachedUserTaggingConfig.durationAbsoluteTimestamp > Date.now() ? this._setUserTaggingConfig(this._cachedUserTaggingConfig) : (a.log(r.LogTraceArea.EngagementUserTagging, "Deleting expired user tagging config."),
                    this._deleteUserTaggingConfig()))
                } else
                    this._cacheInvalidated || (a.log(r.LogTraceArea.EngagementUserTagging, "User tagging disabled, deleting configs."),
                    this._deleteUserTaggingConfig())
            }
            ,
            u.RegisterStartupable(this, "EngagementUserTaggingService", [l.default])
        }
        startup() {
            return d.default.performAfterUIStarted(()=>{
                o.default.subscribe(this._appConfigStoreSubscribeCallback),
                this._appConfigStoreSubscribeCallback()
            }
            ),
            n.Resolved()
        }
        setupUserTagging(e, t) {
            if (!this._isUserTaggingEnabled)
                return void a.log(r.LogTraceArea.EngagementUserTagging, "User tagging disabled.");
            if (t > this._maxDurationInSeconds)
                return void a.log(r.LogTraceArea.EngagementUserTagging, "Tracking time is greater than max allowed value.");
            let i = {
                engagementTag: e,
                durationAbsoluteTimestamp: Date.now() + 1e3 * t
            };
            this._cachedUserTaggingConfig = i,
            this._cacheInvalidated = !1,
            this._setUserTaggingConfig(i),
            l.default.putData(s.InternalKeys.EngagementUserTaggingConfig, i)
        }
        userTaggingConfig() {
            if (g.EngagementUserTaggingConfig && Date.now() < g.EngagementUserTaggingConfig.durationAbsoluteTimestamp)
                return g.EngagementUserTaggingConfig
        }
        _setUserTaggingConfig(e) {
            a.log(r.LogTraceArea.EngagementUserTagging, `Setting engagement user tagging - ${c.dev_unknownOmit(e.engagementTag)}, ${e.durationAbsoluteTimestamp}`),
            g.EngagementUserTaggingConfig = {
                engagementTag: e.engagementTag,
                durationAbsoluteTimestamp: e.durationAbsoluteTimestamp
            }
        }
        _deleteUserTaggingConfig() {
            l.default.deleteKeys([s.InternalKeys.EngagementUserTaggingConfig]),
            g.EngagementUserTaggingConfig = void 0,
            this._cachedUserTaggingConfig = void 0,
            this._cacheInvalidated = !0
        }
        test_reset() {
            this._cachedUserTaggingConfig = void 0,
            this._cacheInvalidated = !1
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._stage = e,
            this._error = t
        }
        getEventName() {
            return "sisu_phone_verification"
        }
        getAttributes() {
            return n.assign({}, super.getAttributes(), {
                Action: "Store",
                Stage: this._stage,
                Error: this._error
            })
        }
    }
    t.PnvStoreTelemetryEvent = s;
    class r extends o.TelemetryEventBase {
        getEventName() {
            return "sisu_phone_verification"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.PnvUIStartTelemetryEvent = class extends r {
        constructor(e, t, i="control") {
            super(),
            this._isTreatment = e,
            this._isPrompted = t,
            this._permission = i
        }
        getActionName() {
            return "UIStart"
        }
        getAttributes() {
            return n.assign({}, super.getAttributes(), {
                IsTreatment: this._isTreatment,
                IsPrompted: this._isPrompted,
                Permission: this._permission
            })
        }
    }
    ;
    var a;
    t.PnvUIStartFromManageSearchPanel = class extends r {
        getActionName() {
            return "UIStartFromManageSearchPanel"
        }
    }
    ,
    function(e) {
        e[e.MsaPhoneAccrualStart = 0] = "MsaPhoneAccrualStart",
        e[e.MsaPhoneAccrualVerified = 1] = "MsaPhoneAccrualVerified",
        e[e.MsaPhoneAccrualRegistered = 2] = "MsaPhoneAccrualRegistered",
        e[e.MsaEmailAccrualVerified = 3] = "MsaEmailAccrualVerified",
        e[e.MsaEmailAccrualRegistered = 4] = "MsaEmailAccrualRegistered",
        e[e.MsaPhoneAccrualCancelled = 5] = "MsaPhoneAccrualCancelled",
        e[e.MsaPhoneAccrualError = 6] = "MsaPhoneAccrualError"
    }(a = t.MsaPhoneAccrualAction || (t.MsaPhoneAccrualAction = {}));
    t.MsaPhoneAccrualEvent = class extends r {
        constructor(e) {
            super(),
            this._action = e
        }
        getActionName() {
            return a[this._action]
        }
    }
    ;
    t.PhoneNeedVerification = class extends r {
        getActionName() {
            return "NeedVerification"
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(7)
      , r = i(21);
    let a = class extends o.StoreBase {
        constructor() {
            super(),
            this._startupDeferral = s.Defer(),
            r.RegisterStartupable(this, "CrashStatusStore")
        }
        startup() {
            return this._startupDeferral.promise()
        }
        internal_feedCrashStatus(e) {
            void 0 === this._lastLaunchCrashed && (this._lastLaunchCrashed = e,
            this._startupDeferral.resolve(void 0))
        }
        didLastLaunchCrash() {
            return this._lastLaunchCrashed
        }
    }
    ;
    n.__decorate([o.disableWarnings], a.prototype, "didLastLaunchCrash", null),
    a = n.__decorate([o.AutoSubscribeStore], a),
    t.default = new a
}
, , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(33)
      , s = i(36)
      , r = i(13)
      , a = i(82)
      , l = i(7)
      , c = i(6)
      , d = i(2)
      , u = i(3)
      , g = i(150)
      , h = i(21)
      , p = i(19)
      , m = i(18);
    let S = class extends r.StoreBase {
        constructor() {
            super(),
            this._isStoreInitialized = !1,
            h.RegisterStartupable(this, "NetworkOperatorStore", [])
        }
        startup() {
            return g.subscribe(()=>{
                g.isNetworkingAvailable() && (u.log(d.LogTraceArea.NetworkOperator, "ReportedConnectivityStore available, fetching codes"),
                this._getNetworkOperatorInfo())
            }
            ),
            l.Resolved()
        }
        _getNetworkOperatorInfo() {
            return s.default.getMncMccCode().then(e=>{
                this._networkOperatorInfo = e,
                u.log(d.LogTraceArea.NetworkOperator, "MCC/MNC code: " + o.pii.Omit(JSON.stringify(e))),
                this.trigger()
            }
            ).catch(e=>{
                u.warn(d.LogTraceArea.NetworkOperator, "MCC/MNC code is not available: " + p.errorAsString(e))
            }
            ).finally(()=>{
                this._isStoreInitialized = !0
            }
            )
        }
        _getOperatorCode() {
            let e = this.getMccCode()
              , t = this.getMncCode();
            if (e && t)
                return e + "-" + t
        }
        getMccCode() {
            let e = this._networkOperatorInfo;
            return e ? e.mccCode : this._isStoreInitialized ? void 0 : m.getMccCode()
        }
        getMncCode() {
            let e = this._networkOperatorInfo;
            return e ? e.mncCode : this._isStoreInitialized ? void 0 : m.getMncCode()
        }
        getCallConnectionType() {
            const e = c.default.getOEMConfig().zeroRating.mccMncList;
            if (!e || 0 === e.length)
                return u.log(d.LogTraceArea.NetworkOperator, "getCallConnectionType: MCC/MNC list is empty -> AllSupported"),
                a.ConnectionType.AllSupported;
            const t = this._getOperatorCode();
            return u.log(d.LogTraceArea.NetworkOperator, "getCallConnectionType: MCC/MNC code: " + (t ? o.pii.Omit(t) : "none")),
            t ? e.indexOf(t) >= 0 ? (u.log(d.LogTraceArea.NetworkOperator, "getCallConnectionType: MCC/MNC code: " + o.pii.Omit(t) + " in list -> NoDirectConnection"),
            a.ConnectionType.NoDirectConnection) : (u.log(d.LogTraceArea.NetworkOperator, "getCallConnectionType: No conditions satisfied -> AllSupported"),
            a.ConnectionType.AllSupported) : (u.log(d.LogTraceArea.NetworkOperator, "getCallConnectionType: Cannot fetch MCC/MNC code -> AllSupported"),
            a.ConnectionType.AllSupported)
        }
    }
    ;
    n.__decorate([r.autoSubscribe], S.prototype, "getMccCode", null),
    n.__decorate([r.autoSubscribe], S.prototype, "getMncCode", null),
    n.__decorate([r.autoSubscribe], S.prototype, "getCallConnectionType", null),
    S = n.__decorate([r.AutoSubscribeStore], S),
    t.default = new S
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(72)
      , s = i(6)
      , r = i(327)
      , a = i(3)
      , l = i(53);
    var c;
    !function(e) {
        e[e.None = 0] = "None",
        e[e.MaxRetriesExceeded = 1] = "MaxRetriesExceeded",
        e[e.MaxElapsedTimeExceeded = 2] = "MaxElapsedTimeExceeded",
        e[e.Permanent = 3] = "Permanent"
    }(c = t.FailureReason || (t.FailureReason = {}));
    class d {
        constructor(e, t) {
            this._transferTypes = e,
            this._logTraceArea = t,
            this._retryInfo = {}
        }
        _getRetryInfo(e, t) {
            return this._retryInfo[e + t]
        }
        _setRetryInfo(e, t, i) {
            this._retryInfo[e + t] = i
        }
        _resetBackoffs(e) {
            n.each(this._retryInfo, e=>{
                e.exponentialTime.reset(),
                e.nextAttempt = Date.now() - 1
            }
            )
        }
        _makeExponentialTime(e, t) {
            return new o.ExponentialTime(1e3,3e5)
        }
        _cleanupRetryInfo(e) {
            n.each(this._transferTypes, t=>{
                delete this._retryInfo[e + t]
            }
            )
        }
        _createTrackedBackgroundTransfer(e, t) {
            return {
                id: e,
                finished: !1,
                finishedAttemptsSoFarCount: t ? t.finishedAttemptsSoFarCount : 0,
                failureReason: c.None
            }
        }
        static redoTransfer(e) {
            e && (e.id = void 0,
            e.finished = !1,
            e.success = void 0,
            e.failureReason = c.None)
        }
        static isTransferLost(e) {
            return !(!e || e.finished) && !(!e.id || r.default.transferIsTracked(e.id))
        }
        static isTransferPermanentFailure(e) {
            return !(!e || e.failureReason !== c.Permanent)
        }
        _isTransferCompletedSuccessfully(e) {
            return !!e && e.finished && !!e.success
        }
        _isTransferReadyToStart(e, t, i, n) {
            if (n && !l.default.hasUsableSkypeToken())
                return a.log(this._logTraceArea, "Waiting on " + i + " due to missing skype token: " + e),
                !1;
            if (!t || !t.id)
                return !0;
            if (t.finished && !t.success && !d.isTransferPermanentFailure(t)) {
                const t = this._getRetryInfo(e, i);
                if (!t || t.nextAttempt <= Date.now())
                    return !0
            }
            return !1
        }
        _isTransferCompletedWithoutSuccess(e, t, i) {
            return !(!t || !t.finished || t.success) && t.failureReason !== c.None
        }
        _handleTransferFinished(e, t, i, o, r, l, u) {
            const g = {
                transfer: t
            };
            t.finished = !0;
            const h = s.default.getS4LCMCFeatures().retryPolicy;
            (0 !== u.statusCode || h.countLocalNetworkFailures) && t.finishedAttemptsSoFarCount++,
            t.success = o;
            const p = this._getMaxRetries(e, i)
              , m = this._getMaxTransferTime(e, i);
            if (r ? t.failureReason = c.Permanent : l > m ? t.failureReason = c.MaxElapsedTimeExceeded : t.finishedAttemptsSoFarCount >= p ? t.failureReason = c.MaxRetriesExceeded : t.failureReason = c.None,
            g.canRetry = t.failureReason === c.None,
            o || !g.canRetry)
                return g;
            if (g.retryInfo = this._getRetryInfo(e, i),
            a.log(this._logTraceArea, "TransferFinished failure, transferId: " + t.id + ", failureReason: " + c[t.failureReason] + ", RetryInfo:" + JSON.stringify(g.retryInfo)),
            d.isTransferPermanentFailure(t))
                return g;
            if (g.retryInfo) {
                let e = 0;
                if (u.headers["Retry-After"]) {
                    const t = Number(u.headers["Retry-After"]);
                    t && n.isFinite(t) && (e = 1e3 * t)
                }
                let t = g.retryInfo.exponentialTime.getTime();
                e < t && (e = t,
                g.retryInfo.exponentialTime.calculateNext()),
                g.retryInfo.nextAttempt = Date.now() + e
            } else {
                const t = this._makeExponentialTime(e, i);
                g.retryInfo = {
                    exponentialTime: t,
                    nextAttempt: Date.now() + t.getTimeAndCalculateNext()
                }
            }
            return this._setRetryInfo(e, i, g.retryInfo),
            g
        }
        static isPermanentFailure(e) {
            if (n.includes([400, 404, 410, 413, 414, 415], e.statusCode))
                return !0;
            if (!n.isString(e.errorInfo))
                return !1;
            const t = e.errorInfo.toLowerCase();
            return -1 !== t.indexOf("failed to create file on local system") || 0 === e.statusCode && (-1 !== t.indexOf("no such file") || -1 !== t.indexOf("file does not exist"))
        }
        static migrateTransfer(e) {
            e && e.permanentFailure && (e.failureReason = c.Permanent)
        }
    }
    t.default = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(16)
      , s = i(573)
      , r = i(39)
      , a = i(159);
    var l, c, d;
    !function(e) {
        e[e.Tapped = 0] = "Tapped",
        e[e.Panned = 1] = "Panned",
        e[e.Ignored = 2] = "Ignored",
        e[e.Shown = 3] = "Shown",
        e[e.QuickAction = 4] = "QuickAction"
    }(l = t.MessagingToastActionType || (t.MessagingToastActionType = {})),
    function(e) {
        e[e.ThumbsUp = 0] = "ThumbsUp",
        e[e.InlineReply = 1] = "InlineReply",
        e[e.AcceptScheduledCall = 2] = "AcceptScheduledCall",
        e[e.DeclineScheduledCall = 3] = "DeclineScheduledCall",
        e[e.MarkAsRead = 4] = "MarkAsRead",
        e[e.JoinCall = 5] = "JoinCall"
    }(c = t.MessagingToastQuickAction || (t.MessagingToastQuickAction = {})),
    function(e) {
        e[e.ReplyNotSent = 0] = "ReplyNotSent"
    }(d = t.MessagingToastAlertType || (t.MessagingToastAlertType = {}));
    class u extends r.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._conversationId = e,
            this._notificationType = t,
            this._action = i
        }
        getEventName() {
            return "messaging_toast"
        }
        getAttributes() {
            let e = super.getAttributes();
            return this._action !== l.Shown && (e.Action = l[this._action]),
            void 0 !== this._notificationType && (e.ToastType = s.MessageNotificationType[this._notificationType]),
            e.IsGroupConversation = o.isGroupConversation(this._conversationId),
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = a.getTrackableConversationId(this._conversationId);
            return t && (e.ConversationId = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.MessagingToastEvent = u;
    t.MessagingToastShowEvent = class extends u {
        constructor(e, t, i, n, o, s) {
            super(e.conversationId, t, l.Shown),
            this._message = e,
            this._notificationAction = i,
            this._useSystemNotification = n,
            this._groupedNotifications = o,
            this._displayedMessagesCount = s
        }
        getEventName() {
            return "messaging_notification"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.NotificationAction = s.MessageNotificationAction[this._notificationAction],
            e.IsSystemNotification = this._useSystemNotification,
            e.IsSampledType = this._isSampledNotificationType(),
            void 0 !== this._displayedMessagesCount && (e.DisplayedMessagesCount = this._displayedMessagesCount),
            e
        }
        shouldSend() {
            if (!super.shouldSend())
                return !1;
            if (!this._isSampledNotificationType())
                return !0;
            if (!this._message)
                return !1;
            const e = this._message.getLatestRelevantClientMessageId();
            if (!e)
                return !1;
            const t = r.TelemetryConfig.kpi_message_sent;
            return a.shouldTrackMessage(e, t)
        }
        _isSampledNotificationType() {
            return this._notificationType !== s.MessageNotificationType.AddToConversation
        }
    }
    ;
    t.MessagingToastQuickActionEvent = class extends u {
        constructor(e, t) {
            super(t, void 0, l.QuickAction),
            this._actionName = e
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.QuickAction = c[this._actionName],
            e.IsSystemNotification = !0,
            e
        }
    }
    ;
    t.MessagingToastAlertEvent = class extends u {
        constructor(e, t) {
            super(t, s.MessageNotificationType.SystemAlert, l.Shown),
            this._alertType = e
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.AlertType = d[this._alertType],
            e.IsSystemNotification = !0,
            e
        }
    }
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(7)
      , o = i(57)
      , s = i(116)
      , r = i(2597)
      , a = i(32)
      , l = i(62)
      , c = i(192)
      , d = i(21)
      , u = i(201);
    function g(e) {
        return (c.getStatusNoSubscription() === s.UserStatus.Unknown ? d.EnsureStarted(c) : n.Resolved()).then(()=>c.getStatusNoSubscription()).then(t=>u.maskedUserStatus(t) === s.UserStatus.Busy && d.EnsureStartedOnly(l.default, [o.default, a.default]).then(e))
    }
    t.isDisabledCallNotification = function() {
        const e = r.tryGetDndOsState(!1);
        return e && e.enabled && !e.allowAnyCalls ? n.Resolved(!0) : g(()=>!l.default.getCallNotificationsWhileDNDEnabled())
    }
    ,
    t.isDisabledChatNotification = function() {
        const e = r.tryGetDndOsState(!0);
        return e && e.enabled ? n.Resolved(!0) : g(()=>!l.default.getChatNotificationsWhileDNDEnabled())
    }
}
, , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(1015),
    i(0);
    const n = i(6);
    t.openAppStore = function() {
        n.default.getConfigSettings()
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(33)
      , s = i(1)
      , r = i(821)
      , a = i(13)
      , l = i(6)
      , c = i(303)
      , d = i(2)
      , u = i(3)
      , g = i(155)
      , h = i(128)
      , p = i(91)
      , m = i(29);
    var S;
    !function(e) {
        e[e.Cached = 0] = "Cached",
        e[e.NotCached = 1] = "NotCached",
        e[e.QueryingCache = 2] = "QueryingCache",
        e[e.Prefetching = 3] = "Prefetching",
        e[e.PrefetchFailed = 4] = "PrefetchFailed"
    }(S || (S = {}));
    let C = class extends a.StoreBase {
        constructor() {
            super(),
            this._imageStatus = {},
            this._prefetchIfNotCached = {},
            this._retryPrefetchData = {},
            g.default.subscribe(()=>{
                g.default.isConnected() && s.each(s.keys(this._retryPrefetchData), e=>{
                    const t = this._retryPrefetchData[e].urlsToTrigger
                      , i = this._retryPrefetchData[e].timeoutId;
                    m.clearTimeout(i),
                    delete this._retryPrefetchData[e],
                    this._retryPrefetch(e, t, this._getRetryCount())
                }
                )
            }
            );
            const e = ()=>{
                const e = l.default.getS4LMessagingFeaturesNoSubscription().imageCaching.queryCacheInFlightLimit;
                r.default.setQueryCacheInFlightLimit(e)
            }
            ;
            l.default.subscribe(e),
            e()
        }
        _getCurrentTime() {
            return Math.floor(Date.now() / 1e3)
        }
        _getStatus(e) {
            let t = l.default.getS4LMessagingFeaturesNoSubscription().imageCaching.cachedStatusMaxAge;
            if (this._imageStatus[e]) {
                if (!(this._imageStatus[e].status === S.Cached && this._imageStatus[e].timeCached + t < this._getCurrentTime()))
                    return this._imageStatus[e].status;
                delete this._imageStatus[e]
            }
        }
        _setStatus(e, t) {
            u.log(d.LogTraceArea.ImageCachingStore, `Setting status of ${o.pii.Omit(e)} to ${S[t]}`),
            this._imageStatus[e] = {
                status: t,
                timeCached: t === S.Cached ? this._getCurrentTime() : 0
            }
        }
        _getChangedSize(e, t) {
            return s.assign({}, e, {
                size: t
            })
        }
        _getSizes(e, t, i, n) {
            let o = [];
            return s.each(p.getEmoticonSizes(), s=>{
                (s < e.size && t || s === e.size && i || s > e.size && n) && o.push(this._getChangedSize(e, s))
            }
            ),
            o
        }
        _getSmallerSizes(e) {
            return this._getSizes(e, !0, !1, !1)
        }
        _getLargerSizes(e) {
            return this._getSizes(e, !1, !1, !0)
        }
        _getAlternateSizes(e) {
            return e.type === h.EmoticonType.Static ? this._getSmallerSizes(e).concat(this._getLargerSizes(e)) : []
        }
        _getUrlsToTrigger(e) {
            let t = [e];
            return e.type === h.EmoticonType.Static && t.push(...this._getLargerSizes(e)),
            s.filter(s.map(t, e=>c.getUrl(e)), e=>this._isTrackingKey(e))
        }
        _getRequestResult(e, t) {
            return {
                requestedIcon: e,
                result: t
            }
        }
        _getPlaceholder(e) {
            return this._getRequestResult(e, void 0)
        }
        _getIntermediateResult(e, t) {
            return this._getRequestResult(e, {
                icon: t,
                type: h.ResultIconType.Intermediate
            })
        }
        _getFinalResult(e, t) {
            return this._getRequestResult(e, {
                icon: t,
                type: h.ResultIconType.Final
            })
        }
        _getBestIcon(e) {
            const t = this._getStatus(c.getUrl(e));
            if (t === S.Cached)
                return this._getFinalResult(e, e);
            let i = s.filter(this._getAlternateSizes(e), e=>this._getStatus(c.getUrl(e)) === S.Cached);
            if (0 === i.length)
                return t === S.QueryingCache ? this._getIntermediateResult(e, e) : this._getPlaceholder(e);
            i = s.orderBy(i, ["size"], ["desc"]);
            let n = i[0];
            return n.size >= e.size ? this._getFinalResult(e, n) : this._getIntermediateResult(e, n)
        }
        _markImageCached(e, t) {
            this._setStatus(e, S.Cached),
            u.log(d.LogTraceArea.ImageCachingStore, `New image cached: ${o.pii.Omit(e)}, triggering ${t.length} URL(s).`),
            this.trigger(t)
        }
        _getRetryCount() {
            return g.default.getConnectionStatus() === g.ConnectionStatus.DisconnectedNoNetworkingReported ? l.default.getS4LMessagingFeaturesNoSubscription().imageCaching.prefetchRetryCountNoConnection : l.default.getS4LMessagingFeaturesNoSubscription().imageCaching.prefetchRetryCount
        }
        _retryPrefetch(e, t, i) {
            this._isTrackingKey(e) ? this._prefetch(e, t, i) : this._setStatus(e, S.NotCached)
        }
        _handlePrefetchFailure(e, t) {
            if (u.log(d.LogTraceArea.ImageCachingStore, "Prefetch failed: " + o.pii.Omit(e)),
            this._isTrackingKey(e)) {
                this._setStatus(e, S.PrefetchFailed),
                this.trigger(t);
                let i = l.default.getS4LMessagingFeaturesNoSubscription().imageCaching.prefetchRetryLongDelay
                  , n = m.setTimeout(()=>{
                    delete this._retryPrefetchData[e],
                    this._retryPrefetch(e, t, this._getRetryCount())
                }
                , i);
                this._retryPrefetchData[e] = {
                    urlsToTrigger: t,
                    timeoutId: n
                }
            } else
                this._setStatus(e, S.NotCached)
        }
        _prefetch(e, t, i=1) {
            u.log(d.LogTraceArea.ImageCachingStore, `Prefetching ${o.pii.Omit(e)}, ${i} retries left.`),
            this._setStatus(e, S.Prefetching);
            let n = l.default.getS4LMessagingFeaturesNoSubscription().imageCaching.prefetchRetryShortDelay;
            r.default.prefetch(e).then(()=>{
                this._markImageCached(e, t)
            }
            ).catch(()=>{
                i > 1 ? m.setTimeout(()=>{
                    this._retryPrefetch(e, t, i - 1)
                }
                , n) : this._handlePrefetchFailure(e, t)
            }
            )
        }
        _queryCache(e) {
            s.each(e, e=>{
                this._setStatus(e.url, S.QueryingCache)
            }
            );
            const t = s.map(e, e=>e.url);
            r.default.queryCache(t).then(t=>{
                s.each(e, e=>{
                    const i = e.url;
                    -1 !== t.indexOf(i) ? (this._prefetchIfNotCached[i] && delete this._prefetchIfNotCached[i],
                    this._markImageCached(i, e.urlsToTrigger)) : this._prefetchIfNotCached[i] ? (delete this._prefetchIfNotCached[i],
                    this._prefetch(i, e.urlsToTrigger, this._getRetryCount())) : this._setStatus(i, S.NotCached)
                }
                )
            }
            )
        }
        _queryCacheEmoticon(e, t) {
            let i = [e];
            if (t) {
                const t = s.filter(this._getAlternateSizes(e), e=>void 0 === this._getStatus(c.getUrl(e)));
                i.push(...t)
            }
            const n = s.map(i, e=>({
                url: c.getUrl(e),
                urlsToTrigger: this._getUrlsToTrigger(e)
            }));
            this._queryCache(n)
        }
        requestEmoticon(e, t) {
            let i = this._getStatus(e);
            switch (u.log(d.LogTraceArea.ImageCachingStore, `Requested ${o.pii.Omit(e)}, current status: ${void 0 !== i ? S[i] : "undefined"}`),
            i) {
            case S.Cached:
                return this._getFinalResult(t, t);
            case S.NotCached:
                this._prefetch(e, this._getUrlsToTrigger(t), this._getRetryCount());
                break;
            case S.QueryingCache:
                this._prefetchIfNotCached[e] = !0;
                break;
            case S.Prefetching:
            case S.PrefetchFailed:
                break;
            case void 0:
                this._prefetchIfNotCached[e] = !0,
                this._queryCacheEmoticon(t, !0)
            }
            return this._getBestIcon(t)
        }
        requestEmoticons(e) {
            return s.map(e, e=>this.requestEmoticon(c.getUrl(e), e))
        }
        requestImage(e) {
            let t = this._getStatus(e);
            switch (u.log(d.LogTraceArea.ImageCachingStore, `Requested ${o.pii.Omit(e)}, current status: ${void 0 !== t ? S[t] : "undefined"}`),
            t) {
            case S.Cached:
                return e;
            case S.NotCached:
                this._prefetch(e, [e], this._getRetryCount());
                break;
            case S.QueryingCache:
                this._prefetchIfNotCached[e] = !0;
                break;
            case S.Prefetching:
            case S.PrefetchFailed:
                break;
            case void 0:
                this._prefetchIfNotCached[e] = !0,
                this._queryCache([{
                    url: e,
                    urlsToTrigger: [e]
                }])
            }
            return this._getStatus(e) === S.Cached ? e : void 0
        }
    }
    ;
    n.__decorate([a.autoSubscribe, n.__param(0, a.key)], C.prototype, "requestEmoticon", null),
    n.__decorate([a.autoSubscribe, n.__param(0, a.key)], C.prototype, "requestImage", null),
    C = n.__decorate([a.AutoSubscribeStore], C),
    t.default = new C
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(273)
      , r = i(675)
      , a = i(581);
    class l extends o.ComponentBase {
        _buildState(e, t) {
            return {
                prefetchState: a.default.getImagePrefetchState(e.source, !0, t)
            }
        }
        shouldComponentUpdate(e, t) {
            return !s.default.comparator(this.props, e) || !s.default.comparator(this.state, t) && (this.state.prefetchState !== r.ImagePrefetchState.None || t.prefetchState !== r.ImagePrefetchState.Prefetching)
        }
        render() {
            switch (this.state.prefetchState) {
            case r.ImagePrefetchState.Prefetched:
                return n.createElement(n.Image, Object.assign({}, this.props));
            case r.ImagePrefetchState.None:
            case r.ImagePrefetchState.Prefetching:
                return this.props.altView(this.props.config) || null;
            case r.ImagePrefetchState.Failed:
                return this.props.errorView(this.props.config) || null
            }
        }
    }
    t.PrefetchedImage = l
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(2676)
      , r = i(2)
      , a = i(3)
      , l = i(435)
      , c = i(22)
      , d = i(59);
    let u = class extends o.StoreBase {
        show(e, t) {
            this._currentActionMenu = e;
            const i = this._usePopup(this._currentActionMenu);
            a.log(r.LogTraceArea.GenericUnsafe, "CustomActionMenuStore.show useDesktopPopup: " + !!e.useDesktopPopup + " usePopup: " + i + " causeId: " + t),
            this._navDismissalRegistrationHandle && l.unregister(this._navDismissalRegistrationHandle),
            this._navDismissalRegistrationHandle = l.register({
                dismiss: ()=>{
                    this._currentActionMenu && this.close(this._currentActionMenu.rootViewId, t)
                }
            }),
            i ? s.default.show(this._currentActionMenu, t) : (a.log(r.LogTraceArea.GenericUnsafe, "CustomActionMenuStore.show, trigger, causeId: " + t),
            this.trigger())
        }
        close(e, t) {
            a.log(r.LogTraceArea.GenericUnsafe, "CustomActionMenuStore.close, causeId: " + t);
            const i = this._currentActionMenu;
            this._currentActionMenu = void 0,
            this._navDismissalRegistrationHandle && (l.unregister(this._navDismissalRegistrationHandle),
            this._navDismissalRegistrationHandle = void 0),
            this._usePopup(i) ? s.default.close(e) : (a.log(r.LogTraceArea.GenericUnsafe, "CustomActionMenuStore.close, trigger"),
            this.trigger())
        }
        getCurrent() {
            return this._currentActionMenu
        }
        isCustomActionMenuShown() {
            return !!this._currentActionMenu
        }
        isCustomActionMenuShownNoSubscription() {
            return !!this._currentActionMenu
        }
        _usePopup(e) {
            return !!e && !!e.useDesktopPopup || !c.default.isUsingStackNavigationContext() && !d.useTabletUINoSubscription()
        }
    }
    ;
    n.__decorate([o.autoSubscribe], u.prototype, "getCurrent", null),
    n.__decorate([o.autoSubscribe], u.prototype, "isCustomActionMenuShown", null),
    n.__decorate([o.disableWarnings], u.prototype, "isCustomActionMenuShownNoSubscription", null),
    u = n.__decorate([o.AutoSubscribeStore], u),
    t.default = new u
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(16)
      , o = i(55)
      , s = i(269)
      , r = i(39)
      , a = i(159);
    var l;
    !function(e) {
        e[e.Opened = 0] = "Opened",
        e[e.FilterSwitched = 1] = "FilterSwitched",
        e[e.AddItemPanelOpened = 2] = "AddItemPanelOpened",
        e[e.AddItemViaDragAndDrop = 3] = "AddItemViaDragAndDrop",
        e[e.CommandSelected = 4] = "CommandSelected",
        e[e.ItemViewed = 5] = "ItemViewed"
    }(l = t.GalleryAction || (t.GalleryAction = {}));
    class c extends r.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._action = e,
            this._conversationId = t
        }
        getEventName() {
            return "messaging_gallery"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = l[this._action],
            e.IsGroupConversation = n.isGroupConversation(this._conversationId),
            e.IsEncryptedConversation = n.isEncryptedThread(this._conversationId),
            e
        }
    }
    t.GalleryOpenedEvent = class extends c {
        constructor(e) {
            super(l.Opened, e)
        }
    }
    ;
    t.GalleryAddItemPanelOpenedEvent = class extends c {
        constructor(e) {
            super(l.AddItemPanelOpened, e)
        }
    }
    ;
    t.GalleryAddItemViaDragAndDropEvent = class extends c {
        constructor(e) {
            super(l.AddItemViaDragAndDrop, e)
        }
    }
    ;
    t.GalleryCommandSelectedEvent = class extends c {
        constructor(e, t) {
            super(l.CommandSelected, e.conversationId),
            this._message = e,
            this._command = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ItemType = a.getMessageTypeName(this._message),
            e.Command = s.CommandTypes[this._command],
            e
        }
    }
    ;
    t.GalleryItemViewedEvent = class extends c {
        constructor(e) {
            super(l.ItemViewed, e.conversationId),
            this._message = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ItemType = a.getMessageTypeName(this._message),
            e
        }
    }
    ;
    t.GalleryFilterSwitchedEvent = class extends c {
        constructor(e, t, i) {
            super(l.FilterSwitched, e),
            this._from = t,
            this._to = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.From = o.GalleryViewMode[this._from],
            e.To = o.GalleryViewMode[this._to],
            e
        }
    }
}
, , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(5)
      , s = (i(18),
    i(15))
      , r = i(12);
    t.CarouselHeightBase = 150,
    t.CarouselHeightWithHeader = 195,
    t.CarouselMarginTop = 10,
    t.CarouselHeaderMarginBottom = 10;
    const a = o.lazyProperties({
        containerWithHeader: ()=>n.Styles.createViewStyle({
            alignItems: "stretch",
            height: t.CarouselHeightWithHeader
        }),
        heading: ()=>n.Styles.createTextStyle({
            paddingLeft: 10,
            paddingTop: 20,
            marginBottom: t.CarouselHeaderMarginBottom
        }),
        headingRight: ()=>n.Styles.createButtonStyle({
            justifyContent: "flex-start",
            paddingRight: 10,
            paddingTop: 20,
            marginBottom: t.CarouselHeaderMarginBottom
        }),
        headerContainerWrapper: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "stretch",
            alignSelf: "stretch",
            justifyContent: "space-between"
        }),
        scrollView: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            marginTop: t.CarouselMarginTop
        }),
        scrollViewRTL: ()=>n.Styles.createViewStyle({
            flexDirection: "row-reverse"
        }),
        flippedView: ()=>n.Styles.createViewStyle({
            transform: [{
                scaleX: -1
            }]
        }),
        scrollWithButtons: ()=>n.Styles.createViewStyle({
            flexDirection: "row"
        })
    });
    var l;
    !function(e) {
        e[e.Previous = 0] = "Previous",
        e[e.Next = 1] = "Next"
    }(l = t.ScrollDirecton || (t.ScrollDirecton = {}));
    class c extends r.default {
        constructor() {
            super(...arguments),
            this._scrollLeft = 0,
            this._scrollTop = 0,
            this._useGestureTrap = !1,
            this._keyboardShouldPersistTaps = !1,
            this._titleRightOnPress = e=>{}
            ,
            this._onLayout = e=>{}
            ,
            this._renderScrollDirectionButton = ()=>{}
            ,
            this._onTrapPan = ()=>{}
            ,
            this._onMoveShouldSetResponder = e=>(e.preventDefault(),
            e.stopPropagation(),
            !1),
            this._onScrollViewRef = e=>{
                this._scrollViewRef = e
            }
            ,
            this._onScroll = (e,t)=>{
                this._scrollTop = e,
                this._scrollLeft = t
            }
        }
        _renderEmptyStateElement() {}
        _title() {}
        _titleRight() {}
        _height() {
            return t.CarouselHeightBase
        }
        _marginTop() {}
        _enableOnScroll() {
            return !1
        }
        setScrollLeft(e) {
            this._scrollViewRef && this._scrollViewRef.setScrollLeft(e, !0)
        }
        render() {
            if (this._elementCount()) {
                const e = [a.scrollView];
                void 0 !== this._marginTop() && e.push(n.Styles.createViewStyle({
                    marginTop: this._marginTop()
                }, !1));
                const t = !1
                  , i = this._renderElements(t)
                  , o = i ? i.elements : void 0;
                let r;
                if (i && i.useStaticContainer)
                    r = n.createElement(n.View, {
                        style: e
                    }, o);
                else {
                    t && (e.push(a.scrollViewRTL),
                    e.push(a.flippedView));
                    const i = this._getContext().isPresentedInTabView || this.props.preventBubblingOnSwipe
                      , s = {
                        ref: this._onScrollViewRef,
                        style: e,
                        horizontal: !0,
                        keyboardShouldPersistTaps: this._keyboardShouldPersistTaps,
                        showsHorizontalScrollIndicator: !1,
                        showsVerticalScrollIndicator: !1,
                        onMoveShouldSetResponder: i ? this._onMoveShouldSetResponder : void 0,
                        onScroll: this._enableOnScroll() ? this._onScroll : void 0
                    };
                    r = n.createElement(n.ScrollView, Object.assign({}, s), o),
                    this._useGestureTrap && i && (r = n.createElement(n.GestureView, {
                        onPan: this._onTrapPan,
                        panPixelThreshold: 5,
                        releaseOnRequest: !1
                    }, r))
                }
                const c = this._title()
                  , d = c ? n.createElement(s.Subtitle, {
                    style: a.heading
                }, c) : void 0
                  , u = this._titleRight();
                let g, h;
                u && (g = n.createElement(n.Button, {
                    style: a.headingRight,
                    onPress: this._titleRightOnPress,
                    accessibilityLabel: u
                }, n.createElement(s.Subtitle, {
                    style: this._themeStyles.primaryTextColorStyle
                }, u))),
                h = c || u ? a.containerWithHeader : n.Styles.createViewStyle({
                    alignItems: "stretch",
                    height: this._height()
                }, !1);
                const p = this._renderScrollDirectionButton(l.Previous)
                  , m = this._renderScrollDirectionButton(l.Next);
                return (p || m) && (r = n.createElement(n.View, {
                    style: a.scrollWithButtons
                }, p, r, m)),
                n.createElement(n.View, {
                    style: h,
                    onLayout: this._onLayout
                }, n.createElement(n.View, {
                    style: a.headerContainerWrapper
                }, d, g), r)
            }
            {
                const e = this._renderEmptyStateElement();
                if (!e)
                    return null;
                const t = n.Styles.createViewStyle({
                    flexDirection: "row",
                    alignItems: "center",
                    justifyContent: "center",
                    height: this._height()
                }, !1);
                return n.createElement(n.View, {
                    style: t
                }, e)
            }
        }
    }
    t.CarouselScrollViewBase = c,
    t.default = c
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(104)
      , o = i(65)
      , s = i(31)
      , r = (i(200),
    i(3))
      , a = i(4);
    let l = null;
    function c() {
        l ? (r.debug(()=>"ElectronUtils: Calling quit and update."),
        l.ipcProvider.appUpdate.quitAndUpdate.send()) : r.error(n.LogTraceArea.GenericUnsafe, "ElectronUtils: No ElectronApi attached on window.")
    }
    "undefined" != typeof window && window.electronApi && (l = window.electronApi),
    t.quitAndUpdate = c,
    t.tryToQuitAndInstallUpdate = function(e) {
        if (l)
            return s.default.CallingStore.hasConnectedCalls() ? (r.debug(()=>"ElectronUtils: Connected call when trying to update."),
            void o.default.showConfirmationAlert(a.getString("QuitDialog.Message"), void 0, a.getString("QuitDialog.QuitLabel"), c, e)) : void c();
        r.error(n.LogTraceArea.GenericUnsafe, "ElectronUtils: No ElectronApi attached on window.")
    }
    ,
    t.isUpgradedFromDelphiToElectron = function() {
        return !1
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(235)
      , s = i(16)
      , r = i(2)
      , a = i(20)
      , l = i(39);
    class c extends l.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._origin = e,
            this._shareAction = t,
            this._integration = i
        }
        getEventName() {
            return "browser_action"
        }
        getEventTraceMode() {
            return l.TelemetryTraceMode.EventName
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e.Origin = r.BrowserOrigin[this._origin],
            this._shareAction && (e.ShareAction = r.BrowserShareAction[this._shareAction]),
            this._integration && (e.Integration = this._integration),
            e
        }
    }
    t.BrowserShareCardPreviewEvent = class extends c {
        constructor(e, t, i, n) {
            super(n, t, i),
            this._cardType = e
        }
        getActionName() {
            return "browser_shareCardPreview"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.CardType = this._cardType,
            e
        }
    }
    ;
    t.BrowserShareUrlPreviewEvent = class extends c {
        constructor(e, t, i, n) {
            super(n, t, i),
            this._url = e
        }
        getActionName() {
            return "browser_shareUrlPreview"
        }
        getPiiAttributes() {
            let e = super.getPiiAttributes();
            return e.Url = {
                value: this._url,
                piiKind: n.AWTPiiKind.Uri
            },
            e
        }
    }
    ;
    t.BrowserSwiftCardSharedEvent = class extends c {
        constructor(e, t, i, n, o, s, r) {
            super(n, t, i),
            this._cardType = e,
            this._forward = o,
            this._conversationId = s,
            this._cmid = r
        }
        getActionName() {
            return "browser_shareCard"
        }
        getCorrelationAttributes() {
            return {
                Message_Correlation_Id: o.getCorrelationIdFromMessageParts(s.skypeIdToMri(a.getSkypeId()), this._conversationId, this._cmid)
            }
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.CardType = this._cardType,
            e.Forward = this._forward,
            e
        }
    }
    ;
    t.BrowserUrlSharedEvent = class extends c {
        constructor(e, t, i, n, o, s, r) {
            super(n, void 0, t),
            this._url = e,
            this._forward = o,
            this._conversationId = s,
            this._cmid = r
        }
        getActionName() {
            return "browser_shareUrl"
        }
        getCorrelationAttributes() {
            return {
                Message_Correlation_Id: o.getCorrelationIdFromMessageParts(s.skypeIdToMri(a.getSkypeId()), this._conversationId, this._cmid)
            }
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ShareAction = r.BrowserShareAction[r.BrowserShareAction.ShareUrlFromBrowser],
            e.Forward = this._forward,
            e
        }
        getPiiAttributes() {
            let e = super.getPiiAttributes();
            return e.Url = {
                value: this._url,
                piiKind: n.AWTPiiKind.Uri
            },
            e
        }
    }
    ;
    class d extends l.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._url = e,
            this._origin = t
        }
        getEventName() {
            return "inapp_browser"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.operation = this.getOperation(),
            e.origin = this._origin,
            e
        }
        getPiiAttributes() {
            let e = super.getPiiAttributes();
            return e.url = {
                value: this._url,
                piiKind: n.AWTPiiKind.Uri
            },
            e
        }
    }
    t.BrowserSession = class extends d {
        constructor(e, t, i) {
            super(e, t),
            this._duration = i
        }
        getOperation() {
            return "browserSession"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.duration = this._duration,
            e
        }
    }
    ;
    t.BrowserCopy = class extends d {
        getOperation() {
            return "copy"
        }
    }
    ;
    t.BrowserOpenUrl = class extends d {
        getOperation() {
            return "openUrlInBrowser"
        }
    }
    ;
    t.BrowserForward = class extends d {
        getOperation() {
            return "forward"
        }
    }
    ;
    t.BrowserShareExternal = class extends d {
        getOperation() {
            return "shareExternal"
        }
        getActionName() {}
    }
    ;
    t.BrowserError = class extends d {
        getOperation() {
            return "error"
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(2834)
      , r = i(77)
      , a = i(121)
      , l = i(5)
      , c = i(134)
      , d = i(14)
      , u = i(12);
    var g;
    !function(e) {
        e[e.None = 0] = "None",
        e[e.All = 1] = "All",
        e[e.Between = 2] = "Between"
    }(g = t.DividerType || (t.DividerType = {}));
    const h = l.lazyProperties({
        checkboxView: ()=>o.Styles.createViewStyle({
            alignSelf: "flex-start",
            paddingVertical: 6
        }),
        checkboxViewFullWidth: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingVertical: 6,
            alignItems: "flex-start"
        })
    });
    class p extends u.default {
        constructor() {
            super(...arguments),
            this._mountedRefsMap = new c.default,
            this._onKeyPress = e=>{
                let t = this.state.focusedIndex;
                e.keyCode !== a.UP && e.keyCode !== a.LEFT || (t -= 1),
                e.keyCode !== a.DOWN && e.keyCode !== a.RIGHT || (t += 1),
                t < 0 || t >= this.props.radioButtons.length || this.setState({
                    focusedIndex: t
                })
            }
            ,
            this._onShouldToggleCheckbox = e=>!e
        }
        _buildState(e, t) {
            let i = {};
            return t && (i.focusedIndex = 0),
            i
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.focusedIndex !== t.focusedIndex && this.focusItem(this.state.focusedIndex)
        }
        focusItem(e=0) {
            if (!(e < 0 || e > this.props.radioButtons.length - 1))
                if (this.state.focusedIndex === e) {
                    const t = this._mountedRefsMap.ref("checkbox" + e);
                    t && t.requestFocus()
                } else
                    this.setState({
                        focusedIndex: e
                    })
        }
        render() {
            const e = this.props.radioButtons.length
              , t = n.map(this.props.radioButtons, (t,i)=>{
                const n = t.key === this.props.selectedKey
                  , a = "checkbox" + i
                  , l = []
                  , c = [this.props.fullWidth ? h.checkboxViewFullWidth : h.checkboxView, this.props.rowStyle, t.rowStyle]
                  , u = o.createElement(s, {
                    key: a,
                    ref: this._mountedRefsMap.onComponentRef(a),
                    style: c,
                    text: t.text,
                    textStyle: [d.flexOne, this.props.textStyle],
                    secondaryText: t.secondaryText,
                    secondaryTextStyle: this.props.secondaryTextStyle,
                    accessibilityLabelPrefix: this.props.accessibilityLabelPrefix,
                    onPress: ()=>this.props.onSelected(t.key),
                    onShouldToggleCheckbox: this._onShouldToggleCheckbox,
                    value: n,
                    disable: t.disabled,
                    disableSelectionAnimation: this.props.disableSelectionAnimation
                });
                if (l.push(u),
                t.footer && l.push(t.footer),
                !this.props.dividerType || this.props.dividerType === g.Between && i === e - 1)
                    return l;
                const p = o.createElement(r, {
                    key: "divider" + i,
                    colorThemeOverride: this.props.colorThemeOverride,
                    style: this.props.dividerColorStyle
                });
                return l.push(p),
                l
            }
            );
            return o.createElement(o.View, {
                style: this.props.style,
                onKeyPress: this._onKeyPress
            }, t)
        }
    }
    t.default = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(6)
      , r = i(50)
      , a = i(31)
      , l = i(442)
      , c = i(61)
      , d = i(42)
      , u = i(10)
      , g = i(77)
      , h = i(2)
      , p = i(3)
      , m = i(5)
      , S = i(4)
      , C = i(32)
      , y = i(17)
      , f = i(64)
      , _ = i(155)
      , b = i(37)
      , v = i(76)
      , T = i(84)
      , P = i(44)
      , A = i(94)
      , k = (i(19),
    i(18),
    i(14))
      , I = i(15)
      , w = i(12)
      , N = i(9)
      , M = i(90)
      , E = m.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsBlockContainer: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingHorizontal: 10,
            overflow: "visible",
            flexGrow: 1
        }),
        settingsBlockContainerDesktop: ()=>n.Styles.createViewStyle({
            paddingHorizontal: 20
        }),
        controlRowNoDivider: ()=>n.Styles.createViewStyle({
            marginVertical: 4,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            minHeight: 60
        }),
        titleMediumSemiLarge: ()=>n.Styles.createTextStyle({
            flex: 1,
            marginRight: 12,
            marginTop: 4,
            marginBottom: 2
        }),
        subtitleMediumSemiLarge: ()=>n.Styles.createTextStyle({
            flex: 1,
            marginRight: 12,
            marginTop: 2,
            marginBottom: 4
        })
    });
    function x(e, t, i) {
        const o = n.createElement(I.RowTitle, {
            style: E.titleMediumSemiLarge,
            numberOfLines: 2,
            disabled: i
        }, e)
          , s = t ? n.createElement(I.Caption, {
            style: E.subtitleMediumSemiLarge
        }, t) : void 0;
        return n.createElement(n.View, {
            style: k.flexOne
        }, o, s)
    }
    t.renderLabels = x;
    class D extends w.default {
        constructor() {
            super(...arguments),
            this._onToggleAutoAnswerCalls = (e,t)=>{
                C.default.setUserPreferencesLocal({
                    autoAnswerCalls: t
                })
            }
            ,
            this._onToggleAutoAnswerCallsWithVideo = (e,t)=>{
                C.default.setUserPreferencesLocal({
                    autoAnswerCallsWithVideo: t
                })
            }
        }
        _buildState(e, t) {
            const i = C.default.getUserPreferencesLocal();
            return {
                autoAnswerCalls: !!i.autoAnswerCalls,
                autoAnswerCallsWithVideo: !!i.autoAnswerCallsWithVideo
            }
        }
        render() {
            return n.createElement(n.View, null, this._getAutoAnswerSetting(), this._getAutoAnswerWithVideoSetting())
        }
        _getAutoAnswerSetting() {
            const e = this._renderLabels(S.getString("UserSettingsPanel.AutoAnswerCalls"));
            return n.createElement(n.View, null, n.createElement(o, {
                key: "autoAnswerCalls",
                style: [E.controlRowNoDivider],
                isOn: this.state.autoAnswerCalls,
                accessibilityLabel: S.getString("UserSettingsPanel.AutoAnswerCalls"),
                onChange: this._onToggleAutoAnswerCalls
            }, e), n.createElement(g, {
                marginTop: 2
            }))
        }
        _getAutoAnswerWithVideoSetting() {
            const e = !this.state.autoAnswerCalls;
            if (e)
                return;
            const t = this._renderLabels(S.getString("UserSettingsPanel.AutoAnswerCallsWithVideo"), void 0, e);
            return n.createElement(n.View, null, n.createElement(o, {
                key: "autoAnswerCallsWithVideo",
                style: [E.controlRowNoDivider],
                isOn: this.state.autoAnswerCallsWithVideo,
                disable: e,
                accessibilityLabel: S.getString("UserSettingsPanel.AutoAnswerCallsWithVideo"),
                onChange: this._onToggleAutoAnswerCallsWithVideo
            }, t), n.createElement(g, {
                marginTop: 2
            }))
        }
        _renderLabels(e, t, i) {
            return x(e, t, i)
        }
    }
    function L(e) {
        if (c.CallingCapabilities.autoAnswerSupported())
            return n.createElement(D, Object.assign({}, e))
    }
    t.AutoAnswerSettings = D,
    t.getAutoAnswerSettings = L;
    class R extends r.default {
        constructor() {
            super(...arguments),
            this._onAdvancedCallingSettingsButtonPressed = ()=>{
                a.default.CallNavigationHelper.navigateToAdvancedCallingSettingsPanel(!1, this._getContext())
            }
            ,
            this._onSubtitlesCallingSettingsButtonPressed = ()=>{
                a.default.CallNavigationHelper.navigateToSubtitlesCallingSettingsPanel(!1, this._getContext())
            }
            ,
            this._toggleIntegratedCalling = (e,t)=>{
                C.default.setUserPreferencesLocal({
                    disableIOSIntegratedCalling: !t
                })
            }
            ,
            this._toggleCallMonitor = (e,t)=>{
                C.default.setUserPreferencesLocal({
                    disableCallMonitor: !t
                })
            }
            ,
            this._toggleContactsOnly = (e,t)=>{
                C.default.setUserPreferencesLocal({
                    allowCallsFromContactsOnly: t
                })
            }
            ,
            this._onCallerIdPressed = ()=>{
                const e = N.newCauseId();
                p.log(h.LogTraceArea.Navigation, "CallingSettingsPanel._onCallerIdPressed,  causeId: " + e),
                this.state.callerIdFeature ? y.navigateToCallerIDSettingsEntry("userInfo.calling-settings", !0, this._getContext(), e) : p.error(h.LogTraceArea.Calling, "CallingSettingsPanel._onCallerIdPressed callerIdFeature is null")
            }
            ,
            this._onCallForwardingPressed = ()=>{
                const e = N.newCauseId();
                p.log(h.LogTraceArea.Navigation, "CallingSettingsPanel._onCallForwardingPressed,  causeId: " + e),
                this.state.callForwardingFeature && y.navigateToSsoWebFlow(this.state.callForwardingFeature.goTarget, "userInfo.calling-settings", S.getString("CallingSettingsPanel.CallForwardingLabel"), this._getRootViewId())
            }
        }
        static getHeaderText() {
            return S.getString("UserSettingsPanel.CallSettingsTitle")
        }
        _buildState(e, t) {
            const i = C.default.getUserPreferencesLocal()
              , n = s.default.getS4LCMCFeatures();
            return {
                isOnline: _.default.isConnected(),
                useAdvancedCallingPanel: n.enableNDISetting && a.default.NdiHookupService.isSupported() || c.CallingCapabilities.nonNativeEmergencyCallsSupported(),
                callForwardingFeature: l.default.callForwardingFeature(),
                callerIdFeature: l.default.callerIdFeature(),
                enableIOSIntegratedCalling: !i.disableIOSIntegratedCalling,
                provideIOSIntegratedCallingSetting: !n.enableCallKitOnlyBehavior,
                enableCallMonitor: !i.disableCallMonitor,
                safeAreaHorizontalPaddingStyle: this._getContext().isPresentedInDesktopSubview ? void 0 : b.default.horizontalPaddingStyle(u.HorizontalInsetZero),
                isMobileScreenReaderEnabled: v.default.isMobileScreenReaderEnabled(),
                allowCallsFromContactsOnly: i.allowCallsFromContactsOnly,
                isCallSubtitlesSettingEnabled: n.callCaptionsEnableForAllCallsOption
            }
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            t.isOnline && !1 === this.state.isOnline && l.default.fetch()
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            this._navigationStateStoreToken = f.default.subscribe(()=>l.default.fetch()),
            l.default.fetch()
        }
        componentDidMount() {
            super.componentDidMount();
            const e = A.mergeStyles([A.createBarStyle(this._themeColors.defaultStatusBarTheme), A.createHiddenStyle(!1)]);
            this._updateStatusBarStyle(e)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._navigationStateStoreToken && (f.default.unsubscribe(this._navigationStateStoreToken),
            this._navigationStateStoreToken = void 0)
        }
        _getCallerIdStatusLabel() {
            return this.state.callerIdFeature && this.state.callerIdFeature.fetched ? this.state.callerIdFeature.active ? "+" + this.state.callerIdFeature.phoneNumber : S.getString("CallingSettingsPanel.Disabled") : ""
        }
        _getCallForwardingStatusLabel() {
            return this.state.callForwardingFeature && this.state.callForwardingFeature.fetched ? this.state.callForwardingFeature.active ? S.getString("CallingSettingsPanel.Enabled") : S.getString("CallingSettingsPanel.Disabled") : ""
        }
        render() {
            const e = [E.settingsBlockContainer];
            this._getContext().isPresentedInGenericDesktopModal && e.push(E.settingsBlockContainerDesktop),
            this.state.safeAreaHorizontalPaddingStyle && e.push(this.state.safeAreaHorizontalPaddingStyle);
            const t = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                closeButtonType: this.props.isAloneInNavStack ? P.CloseButtonType.Close : P.CloseButtonType.Back
            }
              , i = this.props.isAloneInNavStack && !this.state.isMobileScreenReaderEnabled && this._getContext().isPresentedInSplitView ? void 0 : n.createElement(P.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: t,
                delayHeaderFocus: !1
            });
            return n.createElement(n.View, {
                style: [E.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, i, n.createElement(n.ScrollView, {
                style: k.flexOne
            }, n.createElement(n.View, {
                style: e
            }, n.createElement(T.SectionTitle, {
                title: S.getString("UserSettingsPanel.CallSettingsTitleUpper")
            }), this._renderCallerID(), this._renderCallForwarding(), this.state.provideIOSIntegratedCallingSetting ? this._getIOSIntegratedCallingSettings() : void 0, this._getAutoAnswerSettings(), this._getCallMonitorSettings(), this._getContactsOnlySettings(), this._getSubtitleCallingSettings(), this._getAdvancedCallingSettings())))
        }
        _getHeaderText(e) {
            return R.getHeaderText()
        }
        _renderCallForwarding() {
            if (!this.state.callForwardingFeature || !this.state.callForwardingFeature.clientEnabled)
                return;
            const e = this._getCallForwardingStatusLabel()
              , t = d.default.combinedAccessibilityLabel(S.getString("CallingSettingsPanel.CallForwardingLabel"), e);
            return n.createElement(M.WideButton, {
                label: S.getString("CallingSettingsPanel.CallForwardingLabel"),
                accessibilityLabel: t,
                labelRight: e,
                onPressed: this._onCallForwardingPressed,
                labelNumberOfLines: 3
            })
        }
        _renderCallerID() {
            if (!this.state.callerIdFeature || !this.state.callerIdFeature.clientEnabled)
                return;
            const e = this._getCallerIdStatusLabel()
              , t = d.default.combinedAccessibilityLabel(S.getString("CallingSettingsPanel.CallerID"), e);
            return n.createElement(M.WideButton, {
                label: S.getString("CallingSettingsPanel.CallerID"),
                accessibilityLabel: t,
                labelRight: e,
                onPressed: this._onCallerIdPressed
            })
        }
        _getIOSIntegratedCallingSettings() {}
        _getAutoAnswerSettings() {
            if (!this.state.useAdvancedCallingPanel)
                return L(this.props)
        }
        _getAdvancedCallingSettings() {
            if (this.state.useAdvancedCallingPanel)
                return this._getWideButton({
                    label: S.getString("CallingSettingsPanel.AdvancedSettingsButtonLabel"),
                    accessibilityLabel: S.getString("CallingSettingsPanel.AdvancedSettingsButtonLabel"),
                    key: "advancedCallingSettings",
                    onPressed: this._onAdvancedCallingSettingsButtonPressed
                })
        }
        _getSubtitleCallingSettings() {
            if (this.state.isCallSubtitlesSettingEnabled)
                return this._getWideButton({
                    label: S.getString("CallingSettingsPanel.SubtitlesButtonLabel"),
                    accessibilityLabel: S.getString("CallingSettingsPanel.SubtitlesButtonLabel"),
                    key: "subtitlesCallingSettings",
                    onPressed: this._onSubtitlesCallingSettingsButtonPressed
                })
        }
        _getWideButton(e) {
            return n.createElement(M.WideButton, Object.assign({}, e, {
                buttonStyles: u.ListItem.small.shortHeightStyle
            }))
        }
        _getCallMonitorSettings() {
            if (!c.CallingCapabilities.callMonitorSupported())
                return;
            const e = this._renderLabels(S.getString("UserSettingsPanel.EnableCallMonitor"));
            return n.createElement(n.View, null, n.createElement(o, {
                style: [E.controlRowNoDivider],
                isOn: this.state.enableCallMonitor,
                accessibilityLabel: S.getString("UserSettingsPanel.EnableCallMonitor"),
                onChange: this._toggleCallMonitor
            }, e), n.createElement(g, {
                marginTop: 2
            }))
        }
        _getContactsOnlySettings() {
            const e = S.getString("UserSettingsPanel.AllowCallsFromContactsOnlyOldPanel")
              , t = this._renderLabels(e);
            return n.createElement(n.View, null, n.createElement(o, {
                style: [E.controlRowNoDivider],
                isOn: this.state.allowCallsFromContactsOnly,
                accessibilityLabel: e,
                onChange: this._toggleContactsOnly
            }, t), n.createElement(g, {
                marginTop: 2
            }))
        }
        _renderLabels(e, t, i) {
            return x(e, t, i)
        }
    }
    t.default = R
}
, , , , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(157)
      , s = i(527)
      , r = i(386)
      , a = i(0)
      , l = i(7)
      , c = i(65)
      , d = i(6)
      , u = i(676)
      , g = i(88)
      , h = i(153)
      , p = i(161)
      , m = i(16)
      , S = i(43)
      , C = i(30)
      , y = i(227)
      , f = i(289)
      , _ = i(289)
      , b = i(2)
      , v = i(101)
      , T = i(551)
      , P = i(3)
      , A = i(4)
      , k = i(254)
      , I = i(350)
      , w = i(127)
      , N = i(194)
      , M = i(17)
      , E = i(87)
      , x = i(106)
      , D = i(47)
      , L = i(1636)
      , R = i(23)
      , B = i(35)
      , O = i(9);
    class F extends S.default {
        constructor() {
            super(...arguments),
            this._dragAndDropCount = 0,
            this._onDragEnter = e=>{
                e.preventDefault(),
                e.stopPropagation();
                const t = f.default.isContactEntityInDataTransfer(e) && this._isDroppingContactAllowed()
                  , i = f.default.isFileEntityFromConversationInDataTransfer(e) && this._isDroppingFileFromConversationAllowed()
                  , n = f.default.isDataTransferFilesFromDesktop(e) && this._isDroppingFileFromDesktopAllowed();
                (t || i || n) && 0 == this._dragAndDropCount++ && this.props.onDragEnter && this.props.onDragEnter(e)
            }
            ,
            this._onDragOver = e=>{
                e.preventDefault(),
                e.stopPropagation(),
                o.BrowserEnvironment.supportsDragAndDropEffect() && (e.dataTransfer.effectAllowed = _.DropEffect,
                e.dataTransfer.dropEffect = _.DropEffect)
            }
            ,
            this._onDragLeave = e=>{
                e.preventDefault(),
                e.stopPropagation(),
                0 == --this._dragAndDropCount && (this.props.onDragLeave && this.props.onDragLeave(e),
                this._dragAndDropCount = 0)
            }
            ,
            this._isMediaPreviewEnabled = e=>e && I.default.isMediaPreviewEnabled(e) && this.props.dropTargetSource === _.DropTargetOrigin.MessagePanel,
            this._maybeAddToGroupButton = e=>{
                if (!d.default.getS4LMessagingFeaturesNoSubscription().enableContactAddDragAndDrop)
                    return;
                if (!e || !e.userMri || !this.props.conversationId)
                    return;
                if (e.isS4B)
                    return;
                const t = C.default.getConversation(this.props.conversationId);
                if (t && N.isRegularMemberInModeratedGroup(t))
                    return;
                const i = m.sanitizeMri(e.userMri, m.Namespaces.SkypeId);
                return t && !t.isUserMember(i) ? {
                    text: A.getString("MessageStream.DragAndDropContactToGroupAddButton"),
                    onPress: ()=>this._onAddToGroupPress(i, t),
                    textStyle: R.font.uiDisplayBold
                } : void 0
            }
            ,
            this._onAddToGroupPress = (e,t)=>{
                this.props.conversationId && !m.isGroupConversation(this.props.conversationId) ? this._maybeCreateNewGroupConversation(e) : h.addMemberToThread(m.asSkypeThreadId(t.id), e, p.AddMemberToThreadSource.AddUserToGroupCallDragAndDrop)
            }
            ,
            this._onDragDrop = e=>{
                switch (e.preventDefault(),
                e.stopPropagation(),
                this._currentDragDropType = f.default.getDataTransferType(e),
                this._fileStringDrop = void 0,
                this._files = void 0,
                this._currentDragDropType) {
                case _.DragDropType.ContactFromRecentsToConversation:
                    const t = f.default.extractContactEntityFromDataTransfer(e);
                    this._sendContact(t);
                    break;
                case _.DragDropType.FileFromConversationToRecents:
                    this.props.conversationId && this._isDroppingFileFromConversationAllowed() && (this._fileStringDrop = e.dataTransfer.getData(_.DragDropType.FileFromConversationToRecents),
                    this.props.onDropStarted ? this.props.onDropStarted() : this.onDragDropContinue(this.props.conversationId));
                    break;
                case _.DragDropType.FileFromDesktop:
                    this._files = e.dataTransfer.files,
                    this.props.onDropStarted ? this.props.onDropStarted() : this.onDragDropContinue(this.props.conversationId)
                }
                this.props.onDropCompleted && this.props.onDropCompleted()
            }
            ,
            this._onContainerRef = e=>{
                this._container = e || void 0
            }
        }
        _sendFiles(e, t, i, n) {
            if (!this._isMediaPreviewEnabled(n) && n) {
                const o = this.props.callId;
                if (o) {
                    const s = {
                        callId: this.props.callId,
                        scenarioInfo: t,
                        properties: i
                    };
                    E.default.postUpload([n], e, b.PostSource.DragDrop, !1, s, this._getRootViewType()).then(()=>{
                        t.name === x.ScenarioName.SendPicture && (g.default.updateCallTelemetry(o, "MediaPicker", e=>e.postMediaPickerPhotoReaction()),
                        D.maybeAnnounceForAccessibility(A.getString("MessageComposer.FileSentLabel")))
                    }
                    )
                } else {
                    const o = {
                        scenarioInfo: t,
                        properties: i
                    };
                    E.default.postUpload([n], e, b.PostSource.DragDrop, !1, o, this._getRootViewType()).then(()=>{
                        D.maybeAnnounceForAccessibility(A.getString("MessageComposer.FileSentLabel"))
                    }
                    )
                }
            }
        }
        _navigateToConversation(e) {
            P.log(b.LogTraceArea.Navigation, "DragAndDropTarget._navigateToConversation, causeId: " + e.causeId),
            M.navigateToConversation(e)
        }
        _maybeCreateNewGroupConversation(e) {
            if (!this.props.conversationId)
                return;
            const t = C.default.getConversation(this.props.conversationId)
              , i = t ? [...t.getMemberMrisWithoutMe(), e] : []
              , n = b.NavigationConversationOrigin.DragDropFromConversationToRecentLists
              , o = O.newCauseId();
            return y.ConversationUtils.createNewGroupConversationFromOneOnOne(i, n).then(e=>{
                this._navigateToConversation({
                    causeId: o,
                    convId: e,
                    origin: n,
                    isNewConversation: !0
                })
            }
            )
        }
        _sendContact(e) {
            if (this._dragAndDropCount = 0,
            !e || !e.skypeId)
                return;
            if (!this._isDroppingContactAllowed())
                return;
            const {enableContactAddDragAndDrop: t} = d.default.getS4LMessagingFeaturesNoSubscription();
            if (this.props.conversationId && !m.isGroupConversation(this.props.conversationId) && !t)
                return void this._handleContactDrop(e);
            const i = this._maybeAddToGroupButton(e);
            if (i) {
                const t = [{
                    text: A.getString("MessageStream.DragAndDropContactToGroupShareButton"),
                    onPress: ()=>this._handleContactDrop(e),
                    textStyle: R.font.uiDisplayBold
                }, i, {
                    text: A.getString("Global.CancelLabel"),
                    isCancel: !0
                }]
                  , n = A.getString("MessageStream.DragAndDropContactToGroupChatTitleWithAdd")
                  , o = A.getString("MessageStream.DragAndDropContactToGroupChatConfirmationWithAdd", {
                    displayName: e.fullName
                });
                c.default.showWithOptions({
                    title: n,
                    dialogAccessibilityTitle: n,
                    message: o,
                    buttons: t,
                    rootViewId: this._getRootViewId(),
                    useFocussedWindowFallback: !0
                })
            } else {
                let i = A.getString("MessageStream.DragAndDropContactToGroupChatConfirmation", {
                    displayName: e.fullName
                });
                const n = A.getString("MessageStream.DragAndDropContactToGroupChatTitle");
                t && !e.isS4B && (i = A.getString("MessageStream.DragAndDropContactToGroupChatConfirmationAlreadyExistingParticipant", {
                    displayName: e.fullName
                })),
                c.default.showWithOptions({
                    title: n,
                    dialogAccessibilityTitle: n,
                    message: i,
                    rootViewId: this._getRootViewId(),
                    buttons: [{
                        text: A.getString("Global.ConfirmLabel"),
                        textStyle: R.font.uiDisplayBold,
                        onPress: ()=>this._handleContactDrop(e)
                    }, {
                        text: A.getString("Global.CancelLabel"),
                        isCancel: !0
                    }]
                })
            }
        }
        onDragDropContinue(e) {
            switch (this._currentDragDropType) {
            case _.DragDropType.FileFromConversationToRecents:
                e && (m.isEncryptedThread(e) ? this._showCannotSendFileAlert() : (this._dragAndDropCount = 0,
                f.default.dropFileFromConversationToRecents(e, void 0, this._fileStringDrop)));
                break;
            case _.DragDropType.FileFromDesktop:
                this._files && this._isDroppingFileFromDesktopAllowed() && this.uploadFiles(this._files, e)
            }
        }
        uploadFiles(e, t) {
            this._dragAndDropCount = 0;
            const i = []
              , o = []
              , a = this._isMediaPreviewEnabled(t);
            n.each(e, e=>{
                const l = v.extractFileExtension(e.name);
                let c = {
                    file: e,
                    extension: l
                };
                if (v.isImageExtension(l))
                    o.push(s.default.getImageSize(B.default.getFileUrl(c)).then(e=>{
                        e && (c.dimensions = e),
                        i.push(c);
                        const n = {
                            name: x.ScenarioName.SendPicture
                        };
                        let o = this.props.parentConversationId ? u.getReactionsThreadPostParams(this.props.parentConversationId) : void 0;
                        this._sendFiles(c, n, o, t)
                    }
                    ));
                else if (this.props.callId)
                    this.props.onUnsupportedUploadInCall && this.props.onUnsupportedUploadInCall(e.name);
                else if (v.isVideoExtension(l))
                    o.push(r.default.captureFrameFromVideo(URL.createObjectURL(e)).then(o=>{
                        if (o && o.blob && o.blob.size > 0) {
                            let i = o.blob
                              , s = e.name;
                            const r = e.name.lastIndexOf(".");
                            if (r > 0 && (s = s.substr(0, r) + "-thumbnail." + o.extension),
                            n.attempt(()=>i.name = s),
                            n.attempt(()=>i.lastModifiedDate = new Date(e.lastModified)),
                            c.thumbnail = {
                                file: i,
                                extension: o.extension
                            },
                            o.width >= 0 && o.height >= 0) {
                                const e = {
                                    width: o.width,
                                    height: o.height
                                };
                                c.dimensions = e,
                                c.thumbnail.dimensions = e
                            }
                            if (t && !a) {
                                const e = {
                                    name: x.ScenarioName.SendVideo
                                };
                                E.default.postVideoWithThumbnail([t], c, b.PostSource.DragDrop, !1, e)
                            }
                        } else {
                            const e = {
                                name: x.ScenarioName.SendFile
                            };
                            this._sendFiles(c, e, void 0, t)
                        }
                        i.push(c)
                    }
                    ));
                else {
                    if (t) {
                        const e = {
                            name: x.ScenarioName.SendFile
                        }
                          , i = this.props.parentConversationId ? u.getReactionsThreadPostParams(this.props.parentConversationId) : void 0;
                        this._sendFiles(c, e, i, t)
                    }
                    i.push(c)
                }
            }
            ),
            l.all(o).then(()=>{
                if (t && a)
                    return I.default.addPreviews(i, t, b.PostSource.DragDrop);
                P.track(new k.FilesSentViaPicker(this.props.origin,0,!1,n.map(i, e=>e.extension))),
                this.props.onFileDataCallback && this.props.onFileDataCallback(i)
            }
            )
        }
        render() {
            return this._isDroppingAllowed() ? a.createElement(a.View, {
                ref: this._onContainerRef,
                style: this.props.style,
                onDragEnter: this._onDragEnter,
                onDragOver: this._onDragOver,
                onDragLeave: this._onDragLeave,
                onDrop: this._onDragDrop
            }, this.props.children) : a.createElement(a.View, {
                ref: this._onContainerRef,
                style: this.props.style
            }, this.props.children)
        }
        _handleContactDrop(e) {
            this.props.conversationId && (L.shareContact(e, this.props.conversationId, b.PostSource.DragDrop),
            P.track(new w.ShareContactsTelemetry(T.ShareContactOrigin.DragAndDrop,this.props.conversationId,e.isPstn ? 1 : 0,e.isPstn ? 0 : 1,!1)))
        }
        requestFocus() {
            this._container && this._container.requestFocus()
        }
        _isDroppingContactAllowed() {
            return this.props.conversationId && !m.isEncryptedThread(this.props.conversationId) && !m.isS4BBridgeMri(this.props.conversationId) && this.props.dropTargetSource === _.DropTargetOrigin.MessagePanel
        }
        _isDroppingFileFromConversationAllowed() {
            return this.props.conversationId && !m.isS4BBridgeMri(this.props.conversationId) && this.props.dropTargetSource === _.DropTargetOrigin.ConversationListItem
        }
        _isDroppingFileFromDesktopAllowed() {
            return !this.props.conversationId || this.props.conversationId && !m.isS4BBridgeMri(this.props.conversationId)
        }
        _isDroppingAllowed() {
            return this._isDroppingContactAllowed() || this._isDroppingFileFromConversationAllowed() || this._isDroppingFileFromDesktopAllowed()
        }
        _showCannotSendFileAlert() {
            const e = [{
                text: A.getString("Global.CancelLabel"),
                isCancel: !0
            }]
              , t = A.getString("DragAndDrop.AlertForPrivateConversationDroppingBody");
            c.default.showWithOptions({
                title: A.getString("DragAndDrop.AlertForPrivateConversationDroppingTitle"),
                dialogAccessibilityTitle: t,
                message: t,
                buttons: e,
                rootViewId: this._getRootViewId()
            })
        }
    }
    e.exports = F
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(18)
      , o = i(39);
    var s;
    !function(e) {
        e.AtuToggleEnabled = "AutoRechargeToggleEnabled",
        e.AtuToggleDisabled = "AutoRechargeToggleDisabled",
        e.AtuToggleInactive = "AutoRechargeToggleInactive",
        e.AtuModalOpenEnabled = "AutoRechargeModalOpenEnabled",
        e.AtuModalOpenDisabled = "AutoRechargeModalOpenDisabled",
        e.AtuEnabled = "AutoRechargeEnabled",
        e.AtuDisabled = "AutoRechargeDisabled"
    }(s = t.AtuEventTypes || (t.AtuEventTypes = {}));
    class r extends o.TelemetryEventBase {
        getEventName() {
            return "s4l_atu"
        }
        getAriaTenantTokenOverride() {
            return n.getAriaCommerceTenantToken()
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.AutoRechargeToggleEnabled = class extends r {
        getActionName() {
            return s.AtuToggleEnabled
        }
    }
    ;
    t.AutoRechargeToggleDisabled = class extends r {
        getActionName() {
            return s.AtuToggleDisabled
        }
    }
    ;
    t.AutoRechargeToggleInactive = class extends r {
        getActionName() {
            return s.AtuToggleInactive
        }
    }
    ;
    t.AutoRechargeModalOpenEnabled = class extends r {
        getActionName() {
            return s.AtuModalOpenEnabled
        }
    }
    ;
    t.AutoRechargeModalOpenDisabled = class extends r {
        getActionName() {
            return s.AtuModalOpenDisabled
        }
    }
    ;
    t.AutoRechargeEnabled = class extends r {
        getActionName() {
            return s.AtuEnabled
        }
    }
    ;
    t.AutoRechargeDisabled = class extends r {
        getActionName() {
            return s.AtuDisabled
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(1170)
      , s = i(877)
      , r = i(31)
      , a = i(10)
      , l = i(30)
      , c = i(2)
      , d = i(3)
      , u = i(4)
      , g = i(17)
      , h = i(22)
      , p = i(282)
      , m = i(12)
      , S = i(9)
      , C = i(90);
    class y extends m.default {
        constructor() {
            super(...arguments),
            this._onArchive = e=>{
                e.stopPropagation();
                const t = S.newCauseId();
                d.log(c.LogTraceArea.GenericUnsafe, "ArchiveConversaionControl._archiveConversation, causeId: " + t),
                o.default.showIfRequired(this._getRootViewId()).then(()=>{
                    g.navigateAfterArchivingConversation(this.props.conversationId, t, this._getContext()),
                    p.default.isNavigationAnimationFinished().thenAsync(()=>{
                        s.default.archiveConversation(this.props.conversationId, c.ArchiveConversationOrigin.ProfilePanel, this._getRootViewId())
                    }
                    )
                }
                )
            }
            ,
            this._onUnarchive = e=>{
                e.stopPropagation();
                const t = S.newCauseId();
                d.log(c.LogTraceArea.GenericUnsafe, "ArchiveConversaionControl._onUnarchive, causeId: " + t),
                s.default.unarchiveConversation(this.props.conversationId, c.UnarchiveConversationOrigin.ProfilePanel),
                this.state.isUsingStackNavigationContext || g.navigateAfterUnarchivingConversation(this.props.conversationId, t, this._getContext())
            }
        }
        _buildState(e) {
            const t = l.default.getConversation(e.conversationId);
            return {
                isArchived: !!t && t.isArchived(),
                hasActiveCall: r.default.ActiveCallUIHelper.hasActiveCall(e.conversationId),
                isUsingStackNavigationContext: h.default.isUsingStackNavigationContext()
            }
        }
        render() {
            if (this.state.hasActiveCall)
                return null;
            const e = this.state.isArchived ? u.getString("InfoPanel.UnhideConversationButtonLabel") : u.getString("InfoPanel.HideConversationButtonLabel");
            return n.createElement(C.WideButton, {
                label: e,
                onPressed: this.state.isArchived ? this._onUnarchive : this._onArchive,
                hideArrow: !0,
                buttonStyles: this.props.shorterControlHeight ? a.ListItem.small.shortHeightStyle : void 0
            })
        }
    }
    e.exports = y
}
, , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(102)
      , s = i(79)
      , r = i(16)
      , a = i(42)
      , l = i(10)
      , c = i(30)
      , d = i(5)
      , u = i(4)
      , g = i(15)
      , h = i(12)
      , p = d.lazyProperties({
        notificationControlContainer: ()=>n.Styles.createViewStyle({
            overflow: "visible",
            alignSelf: "stretch"
        }),
        notificationsSettingContainer: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            borderBottomWidth: 1,
            paddingTop: 1
        }),
        smartNotificationsLabelContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignItems: "stretch",
            alignSelf: "center"
        })
    });
    class m extends h.default {
        constructor() {
            super(...arguments),
            this._onChangeEnableNotifications = (e,t)=>{
                if (this.state.conversationIsOneOnOne)
                    t ? this._setNotificationLevel(r.SubscriptionTypes.Loud) : this._setNotificationLevel(r.SubscriptionTypes.Muted),
                    this.setState({
                        enableNotifications: t
                    });
                else {
                    let e = {};
                    t && !this.state.enableImportantNotifications ? (e.disableImportantNotificationSwitch = !1,
                    this._setNotificationLevel(r.SubscriptionTypes.Loud)) : t || this.state.enableImportantNotifications ? !t && this.state.enableImportantNotifications && (e.disableImportantNotificationSwitch = !0,
                    e.enableImportantNotifications = !1,
                    this._setNotificationLevel(r.SubscriptionTypes.Muted)) : (e.disableImportantNotificationSwitch = !0,
                    this._setNotificationLevel(r.SubscriptionTypes.Muted)),
                    e.enableNotifications = t,
                    this.setState(e)
                }
            }
            ,
            this._onChangeEnableImportantNotifications = (e,t)=>{
                this.state.conversationIsOneOnOne || (t && this.state.enableNotifications ? (this.setState({
                    enableImportantNotifications: t
                }),
                this._setNotificationLevel(r.SubscriptionTypes.Normal)) : !t && this.state.enableNotifications && (this.setState({
                    enableImportantNotifications: t
                }),
                this._setNotificationLevel(r.SubscriptionTypes.Loud)))
            }
        }
        _buildState(e, t) {
            const i = {}
              , n = c.default.getConversation(e.conversationId);
            n && (i.conversationSubscription = n.getSubscription(),
            i.conversationIsOneOnOne = n.isOneOnOne());
            const o = this.props;
            if (t || e.conversationId !== o.conversationId)
                switch (i.conversationSubscription) {
                case r.SubscriptionTypes.Muted:
                    i.enableNotifications = !1,
                    i.enableImportantNotifications = !1,
                    i.disableImportantNotificationSwitch = !0;
                    break;
                case r.SubscriptionTypes.Loud:
                    i.enableNotifications = !0,
                    i.enableImportantNotifications = !1,
                    i.disableImportantNotificationSwitch = !1;
                    break;
                case r.SubscriptionTypes.Normal:
                    i.enableNotifications = !0,
                    i.enableImportantNotifications = !0,
                    i.disableImportantNotificationSwitch = !1
                }
            return i
        }
        render() {
            const e = []
              , t = [p.notificationsSettingContainer, this._themeStyles.dividerBorderColorStyle, this.props.shorterControlHeight ? l.ListItem.small.shortHeightStyle : l.ListItem.small.regularHeightStyle];
            if (e.push(n.createElement(o, {
                key: "enableNotifications",
                style: t,
                isOn: this.state.enableNotifications,
                accessibilityLabel: u.getString("Notifications.Notify"),
                onChange: this._onChangeEnableNotifications,
                disable: this.props.disabled
            }, n.createElement(g.RowTitle, {
                disabled: this.props.disabled
            }, u.getString("Notifications.Notify")))),
            !this.state.conversationIsOneOnOne) {
                const i = []
                  , s = this.state.disableImportantNotificationSwitch || this.props.disabled;
                s && i.push(this._themeStyles.disabledTextColorStyle);
                const r = u.getString("Notifications.SmartNotifications")
                  , l = u.getString("Notifications.SmartNotificationsHelper");
                e.push(n.createElement(o, {
                    key: "enableImportantNotifications",
                    style: t,
                    isOn: this.state.enableImportantNotifications,
                    accessibilityLabel: a.default.combinedAccessibilityLabel(r, l),
                    onChange: this._onChangeEnableImportantNotifications,
                    disable: s
                }, n.createElement(n.View, {
                    style: p.smartNotificationsLabelContainer
                }, n.createElement(g.RowTitle, {
                    disabled: s
                }, r), n.createElement(g.Caption, {
                    style: i
                }, l))))
            }
            return n.createElement(n.View, {
                style: p.notificationControlContainer
            }, e)
        }
        _setNotificationLevel(e) {
            s.setConversationSubscription(this.props.conversationId, e)
        }
    }
    e.exports = m
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(117)
      , o = i(0)
      , s = i(5)
      , r = i(8)
      , a = i(14)
      , l = i(12)
      , c = s.lazyProperties({
        shadowContainer: ()=>o.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            height: 0,
            overflow: "visible"
        }),
        shadowInnerContainer: ()=>o.Styles.createViewStyle({
            height: 5,
            borderTopWidth: 1
        })
    });
    class d extends l.default {
        render() {
            const e = [c.shadowInnerContainer, this._themeStyles.headerShadowBorderColorStyle, this.props.opacityStyle];
            return o.createElement(o.View, {
                style: c.shadowContainer
            }, o.createElement(o.Animated.View, {
                style: e
            }, o.createElement(n.GradientView, {
                style: a.flexOne,
                direction: n.GradientDirection.BOTTOM,
                colors: [r.Color.blackOverlay10, r.Color.transparent]
            })))
        }
    }
    t.DesktopShadow = d,
    t.default = d
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(5)
      , a = i(8)
      , l = i(23)
      , c = i(14)
      , d = i(12)
      , u = r.lazyProperties({
        textEditContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            paddingBottom: 1,
            borderWidth: 0,
            borderBottomWidth: 1,
            borderStyle: "solid",
            borderColor: a.Color.transparent
        }),
        textEditInputBox: ()=>o.Styles.createTextInputStyle({
            flex: 1,
            flexDirection: "row",
            backgroundColor: a.Color.transparent,
            textAlign: "center",
            paddingBottom: 1
        }),
        text: ()=>o.Styles.createTextStyle({
            flexDirection: "row",
            paddingBottom: 1,
            textAlign: "center",
            justifyContent: "center",
            flexShrink: 1
        }),
        textView: ()=>o.Styles.createViewStyle({
            flexShrink: 1,
            flexDirection: "row",
            paddingBottom: 1,
            justifyContent: "center"
        }),
        textContainerHover: ()=>o.Styles.createViewStyle({
            opacity: .7
        })
    });
    class g extends d.default {
        constructor() {
            super(...arguments),
            this._textEditSetFocus = !1,
            this._onTextInputRef = e=>{
                this._inputRef = e || void 0,
                this._inputRef && this._textEditSetFocus && (this._inputRef.requestFocus(),
                this._textEditSetFocus = !1)
            }
            ,
            this._textViewPress = ()=>{
                this.props.canEdit && !this.state.isEditing && this.setState({
                    isEditing: !0
                })
            }
            ,
            this._onChangeText = e=>{
                this.props.onChangeText && this.props.onChangeText(e),
                this.setState({
                    newText: e
                })
            }
            ,
            this._submitEdit = ()=>{
                const e = this.state.newText;
                if (this.props.originalText !== e) {
                    if (this.props.onSubmitEdit && this.props.onSubmitEdit(e))
                        return
                }
                this._cancelEdit()
            }
            ,
            this._onMouseEnter = ()=>{
                this.props.canEdit && this.setState({
                    isHovering: !0
                })
            }
            ,
            this._onMouseLeave = ()=>{
                this.setState({
                    isHovering: !1
                })
            }
            ,
            this._onFocus = e=>{
                this.props.onFocus && this.props.onFocus(e),
                this.props.onFocusWithRef && this.props.onFocusWithRef(this),
                this.props.canEdit && this.setState({
                    isEditing: !0
                })
            }
            ,
            this._onBlur = ()=>{
                this.setState({
                    isEditing: !1
                }, ()=>{
                    this.props.onBlur && (this.props.onBlur(),
                    (void 0 === this.props.submitOnBlur || this.props.submitOnBlur) && this._submitEdit()),
                    this.props.onBlurWithRef && this.props.onBlurWithRef(this)
                }
                )
            }
        }
        _buildState(e, t) {
            const i = {}
              , n = this.props.originalText || ""
              , o = e.originalText || "";
            return (t || o !== n) && (i.newText = o),
            i
        }
        requestFocus() {
            this._inputRef && this.props.canEdit ? this._inputRef.requestFocus() : this._textEditSetFocus = !0
        }
        finishEditing() {
            this._onBlur()
        }
        resetText(e) {
            this.isComponentMounted() && this._inputRef && this.setState({
                newText: e || ""
            })
        }
        render() {
            let e = [u.textEditContainer];
            return this.props.canEdit && (this.state.isEditing || this.props.showEditable ? e.push(this._themeStyles.dividerBorderColorStyle) : this.state.isHovering && e.push(u.textContainerHover)),
            this.props.style && e.push(this.props.style),
            o.createElement(o.View, {
                style: e,
                onMouseEnter: this.props.canEdit ? this._onMouseEnter : void 0,
                onMouseLeave: this.props.canEdit ? this._onMouseLeave : void 0,
                onPress: this.props.canEdit ? this._textViewPress : void 0
            }, this._renderTextWithAutoFocus(!0))
        }
        _renderTextWithAutoFocus(e) {
            if ((this.state.isEditing || this.props.showEditable) && this.props.canEdit) {
                const t = [u.textEditInputBox, this._themeStyles.primaryTextColorStyle, this._textStyle()];
                return o.createElement(o.TextInput, {
                    ref: this._onTextInputRef,
                    key: "textInput",
                    style: t,
                    value: this.state.newText,
                    placeholder: this.props.placeholderText,
                    placeholderTextColor: this._useDarkTheme() ? this._themeColors.secondaryTextColor : void 0,
                    autoFocus: this.state.isEditing && e,
                    autoCapitalize: this.props.autoCapitalize,
                    autoCorrect: this.props.autoCorrect,
                    onChangeText: this._onChangeText,
                    onSubmitEditing: this._submitEdit,
                    returnKeyType: "done",
                    keyboardAppearance: this._useDarkTheme() ? "dark" : void 0,
                    onFocus: this._onFocus,
                    onBlur: this._onBlur,
                    editable: this.props.canEdit,
                    blurOnSubmit: void 0 === this.props.blurOnSubmit || this.props.blurOnSubmit,
                    maxLength: this.props.maxLength,
                    multiline: this.props.multiline,
                    importantForAccessibility: this.props.accessibilityLabel ? o.Types.ImportantForAccessibility.Yes : void 0,
                    accessibilityLabel: this.props.accessibilityLabel,
                    clearButtonMode: "never"
                })
            }
            {
                const e = this._textStyle();
                if (this.props.originalTextReact || this.props.originalText && this.props.originalText.length > 0) {
                    const t = this.props.addAccessibilityLabelToOriginalTextReact && this.props.accessibilityLabel;
                    return this.props.originalTextReact ? o.createElement(o.View, {
                        style: [u.textView, c.pointerCursor],
                        importantForAccessibility: t ? o.Types.ImportantForAccessibility.Yes : void 0,
                        accessibilityLabel: t ? this.props.accessibilityLabel : void 0
                    }, this.props.originalTextReact) : o.createElement(o.Text, {
                        key: "textContainer",
                        style: [u.text, c.pointerCursor, this._themeStyles.primaryTextColorStyle, e],
                        numberOfLines: this.props.numberOfLines || 1
                    }, this.props.originalText && this.props.originalText.length > 0 ? this.props.originalText : this.props.placeholderText)
                }
                return o.createElement(o.Text, {
                    key: "textContainer",
                    style: [u.text, this._themeStyles.secondaryTextColorStyle, e],
                    numberOfLines: 1
                }, this.props.placeholderText)
            }
        }
        _cancelEdit() {
            this.setState({
                isEditing: !1,
                newText: this.props.originalText || ""
            })
        }
        _textStyle() {
            const e = [];
            if (!n.isUndefined(this.props.textEditTextStyle))
                switch (this.props.textEditTextStyle) {
                case s.TextEditTextStyle.Caption:
                    e.push(l.fontStyle.caption);
                    break;
                case s.TextEditTextStyle.BodyText:
                    e.push(l.fontStyle.body);
                    break;
                case s.TextEditTextStyle.BodyTextBold:
                    e.push(l.fontStyle.bodyBold);
                    break;
                case s.TextEditTextStyle.MessagingHeader:
                    e.push(l.fontStyle.messagingHeader);
                    break;
                case s.TextEditTextStyle.MessagingHeaderSmall:
                    e.push(l.fontStyle.messagingHeaderSmall)
                }
            return this.props.textStyle && e.push(this.props.textStyle),
            e
        }
    }
    t.default = g
}
, , , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(138)
      , s = i(139)
      , r = i(153)
      , a = i(16)
      , l = i(69)
      , c = i(28)
      , d = i(4)
      , u = i(93)
      , g = i(73);
    e.exports = class {
        static safelyRemovePersonFromConversation(e, t, i, n, o) {
            const s = c.getDisplayName(t) || d.getString("Notifications.UnknownUserShort")
              , r = {
                anchor: n,
                buttons: [{
                    text: d.getString("RemoveUserDialog.RemoveButtonLabel"),
                    command: "remove"
                }],
                destructiveButtonIndex: 0
            };
            r.message = d.getString("RemoveUserDialog.ConversationContent", {
                userDisplayName: s
            }),
            g.default.showWithActionMenuConfig({
                options: r,
                callback: n=>this._handleActionSheetCommands(n, t, e, i),
                useAlertForDesktop: !0,
                useAlertForMobile: !1,
                rootViewId: o,
                invokingEvent: void 0
            })
        }
        static isSendImCapable(e) {
            if (!e.isOneOnOne())
                return e.isCurrentUserMember();
            const t = e.getOtherPartyMri();
            if (!t)
                return !1;
            if (s.default.isMriBlocked(t))
                return !1;
            if (a.isAgent(t)) {
                const e = o.default.getAgentDescriptionForMri(t);
                if (!e.isUnknown) {
                    return n.filter(e.capabilities, e=>"im.send" === e).length > 0 && n.indexOf(l.default.dangerousGetContactMriListMutable(), t) >= 0
                }
            }
            return !a.isPhoneMri(t) || void 0 === u.default.getPossibleExtension(t, !0)
        }
        static _handleActionSheetCommands(e, t, i, n) {
            switch (e) {
            case "remove":
                r.removeParticipantFromConversation(t, i, n);
                break;
            case g.SXActionMenuCancel:
            }
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(0)
      , r = i(13)
      , a = i(347)
      , l = i(270)
      , c = i(43)
      , d = i(348)
      , u = i(28)
      , g = i(124)
      , h = i(5)
      , p = i(4)
      , m = i(22)
      , S = i(24)
      , C = i(37)
      , y = i(156)
      , f = i(1751)
      , _ = i(14);
    r.StoreBase;
    const b = h.lazyProperties({
        inputContainer: ()=>s.Styles.createViewStyle({
            alignSelf: "stretch"
        })
    });
    class v extends c.default {
        constructor() {
            super(...arguments),
            this._searchActive = !1,
            this._removeProfileFromSelection = e=>{
                const t = e.getConversationId();
                t && this.props.selectorController.removeConversation(t),
                this.props.onProfileRemoved && this.props.onProfileRemoved()
            }
            ,
            this._onInputChange = e=>{
                this.props.onInputChanged(e)
            }
            ,
            this._onSubmitEditing = ()=>{
                this.props.onSubmit && this.props.onSubmit()
            }
            ,
            this._onEscape = ()=>(this.props.onCancel(),
            !0),
            this._searchInputRefCallback = e=>{
                this._searchInput = e || void 0
            }
            ,
            this._onSearchActive = e=>{
                this._showOrHideHeader(!e, !0),
                e || this.props.onInputChanged("")
            }
        }
        _buildState(e, t) {
            const i = {}
              , r = this._getRootViewId();
            return t && (this._headerAnimatedHeightValue = new s.Animated.Value(l.default.expandedHeight(r)),
            this._headerAnimatedTopValue = new s.Animated.Value(0),
            this._headerAnimatedHeightStyle = s.Styles.createAnimatedViewStyle({
                height: this._headerAnimatedHeightValue
            }),
            this._headerAnimatedTopStyle = s.Styles.createAnimatedViewStyle({
                transform: [{
                    translateY: this._headerAnimatedTopValue
                }]
            })),
            i.statusBarPadding = C.default.statusBarPadding(),
            i.isPortrait = S.default.getDeviceOrientation(r) === o.DeviceOrientation.Portrait,
            i.selectedConversations = e.selectorController.getSelectedConversations(),
            i.canSubmit = e.allowSubmitWithNoProfile || e.selectorController.getSelectedConversations().length > 0,
            i.isUsingStackNavigationContext = m.default.isUsingStackNavigationContext(),
            i.isSmallDevice = S.default.isSmallDevice(r),
            i.displayableProfiles = n.map(i.selectedConversations, e=>u.getDisplayableProfile(e)),
            i
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            this._addSubscription({
                store: this.props.selectorController
            })
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.autoFocusOnInput && this.requestFocus(),
            this._showOrHideHeader(!this._searchActive, !1),
            g.default.addEscapeHandler(this._onEscape)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            g.default.removeEscapeHandler(this._onEscape)
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.statusBarPadding === t.statusBarPadding && this.state.isPortrait === t.isPortrait || this._showOrHideHeader(!this._searchActive, !1),
            this.props.autoFocusOnInput && !e.autoFocusOnInput && n.delay(()=>{
                this.isComponentMounted() && this.props.autoFocusOnInput && this.requestFocus()
            }
            , 1e3)
        }
        render() {
            let e = p.getString("SetConversationParticipantsPanel.InputPlaceholderTextPeopleAndBot");
            this.props.peopleType === y.PeopleType.AllExcludingBots || this.props.peopleType === y.PeopleType.AllWithPhoneNumbers ? e = this.props.includeGroups ? p.getString("SetConversationParticipantsPanel.InputPlaceholderTextPeopleAndGroup") : p.getString("SetConversationParticipantsPanel.InputPlaceholderTextPeople") : this.props.peopleType === y.PeopleType.Bots && (e = p.getString("SetConversationParticipantsPanel.InputPlaceholderTextBot"));
            let t, i = this.props.headerConfig && !this._shouldRemoveHeader() ? this.props.headerConfig.getHeader() : void 0;
            t = this.props.useCollapsableHeader ? s.createElement(a.default, {
                ref: this._searchInputRefCallback,
                initialValue: 1,
                showButtonWhenInactive: !0,
                placeholderText: e,
                actionButton: this.props.headerConfig && this.props.headerConfig.getActionButton ? this.props.headerConfig.getActionButton() : void 0,
                rawSearchQuery: this.props.inputText,
                onInputTextChange: this._onInputChange,
                onSubmitEditing: this._onSubmitEditing,
                onActive: this._onSearchActive
            }) : s.createElement(s.View, {
                style: _.flexOne
            }, s.createElement(d.default, {
                ref: this._searchInputRefCallback,
                showButtonWhenInactive: !0,
                placeholderText: e,
                rawSearchQuery: this.props.inputText,
                autoFocus: this.props.autoFocusOnInput,
                autoFocusWhenActive: this.props.autoFocusWhenActive,
                forceInputValueUpdate: !0,
                onInputTextChange: this._onInputChange,
                onSubmitEditing: this._onSubmitEditing,
                onKeyDown: this.props.onKeyDown
            })),
            i && !this.state.isUsingStackNavigationContext && (i = s.createElement(s.View, null, i));
            let n, o = this.props.showSendButtonOnEverySearchItemUI ? void 0 : s.createElement(f.default, {
                selectedProfiles: this.state.displayableProfiles,
                onProfileRemoved: this._removeProfileFromSelection,
                colorThemeOverride: this.props.colorThemeOverride
            });
            return n = this.state.isUsingStackNavigationContext ? s.createElement(s.Animated.View, {
                style: [_.flexOne, this.props.noFixedHeight ? void 0 : this._headerAnimatedHeightStyle]
            }, s.createElement(s.Animated.View, {
                style: this.props.noFixedHeight ? void 0 : this._headerAnimatedTopStyle
            }, i, t)) : s.createElement(s.View, null, i, t),
            s.createElement(s.View, null, s.createElement(s.View, {
                style: [b.inputContainer, this.props.style]
            }, n), o)
        }
        _shouldRemoveHeader() {
            return this.props.noFixedHeight && this.state.isUsingStackNavigationContext && this._searchActive
        }
        requestFocus() {
            this.isComponentMounted() && this._searchInput && this._searchInput.focusInput()
        }
        _showOrHideHeader(e, t=!0) {
            if (this._searchActive = !e,
            this.props.noFixedHeight && this.state.isUsingStackNavigationContext)
                return void this.setState({
                    forceRerender: !this.state.forceRerender
                });
            let i;
            const n = this._headerHeight()
              , o = e ? 0 : -1 * n;
            if (this.state.isUsingStackNavigationContext) {
                const t = this._getRootViewId();
                i = e ? n + l.default.collapsableHeight(t) : l.default.expandedHeight(t) + this.state.statusBarPadding
            } else
                i = n + d.DesktopSearchHeaderHeight;
            t ? s.Animated.parallel([s.Animated.timing(this._headerAnimatedTopValue, {
                toValue: o,
                duration: 200,
                easing: s.Animated.Easing.Out()
            }), s.Animated.timing(this._headerAnimatedHeightValue, {
                toValue: i,
                duration: 200,
                easing: s.Animated.Easing.Out()
            })]).start() : (this._headerAnimatedTopValue.setValue(o),
            this._headerAnimatedHeightValue.setValue(i))
        }
        _headerHeight() {
            return this.props.headerConfig ? this.props.headerConfig.getHeaderHeight() : 0
        }
    }
    t.ProfileSelectionInput = v,
    t.default = v
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(6)
      , o = i(330)
      , s = (i(42),
    i(268))
      , r = i(245)
      , a = i(81)
      , l = i(28)
      , c = i(2)
      , d = (i(110),
    i(1665))
      , u = i(1146)
      , g = i(3)
      , h = i(329)
      , p = i(4)
      , m = i(147)
      , S = i(179)
      , C = i(20)
      , y = i(17)
      , f = i(55)
      , _ = i(97)
      , b = i(156)
      , v = i(107)
      , T = i(73)
      , P = i(18)
      , A = i(11)
      , k = i(9);
    t.HubCommands = {
        AddConversationGroupCommand: "group",
        AddConversationModeratedGroupCommand: "moderatedgroup",
        AddConversation1on1Command: "1on1",
        AddConversationPrivateCommand: "private",
        InviteCommand: "contact",
        AddBotCommand: "bot",
        OpenSuperComposer: "supercomposer",
        NewGroupCallCommand: "newGroupCall",
        NewMeetNowCommand: "newMeetNow",
        NewCellularSmsConversationCommand: "newCellularSmsConversationCommand",
        AddContactCommand: "addcontact",
        Cancel: "cancel"
    };
    class I {
        static actionButtonForHubTab(e, t, i, n) {
            switch (e) {
            case f.HubTab.Recents:
                return t ? {
                    title: p.getString("HubHeaderPanel.NewConversationTitle"),
                    icon: P.getPlatformType() === c.PlatformType.Android ? A.SkypeIcon.Topic : A.SkypeIcon.Compose,
                    onPressCallback: I._onSuperComposerClick
                } : {
                    title: p.getString("HubHeaderPanel.NewConversationOrCallTitle"),
                    icon: A.SkypeIcon.Plus,
                    onPressCallback: I._onRecentPlusButtonClickForNewMobileHub
                };
            case f.HubTab.Calls:
                if (n)
                    return;
                return {
                    title: p.getString("QuickCallPanel.PanelHeaderNewCall"),
                    icon: A.SkypeIcon.CallAdd,
                    onPressCallback: I._onGroupCallButtonClick,
                    disabled: i,
                    ctaExperimentalUI: !0
                };
            case f.HubTab.People:
                let e;
                return e = I._onPeoplePlusButtonClickForNewMobileHub,
                {
                    title: p.getString("Hub.AddContactsLabelGrouped"),
                    icon: A.SkypeIcon.ContactAdd,
                    onPressCallback: e
                }
            }
        }
        static secondaryActionButtonForHubTab(e, t) {
            switch (e) {
            case f.HubTab.Calls:
                return {
                    title: p.getString("PeopleList.PstnDialpadLabel"),
                    icon: A.SkypeIcon.Dialpad,
                    onPressCallback: I._onDialpadButtonClick,
                    disabled: t
                }
            }
        }
        static searchButtonForHubTab(e, t) {
            const i = p.getString("HubHeaderPanel.SearchHubTitle")
              , n = t ? p.getString("HubHeaderPanel.SearchHubAccessibilityLabel") : i;
            switch (e) {
            case f.HubTab.Recents:
                return {
                    title: i,
                    accessibilityLabel: n,
                    icon: A.SkypeIcon.Search,
                    onPressCallback: I._onRecentSearchButtonClick
                };
            case f.HubTab.People:
                return {
                    title: i,
                    accessibilityLabel: n,
                    icon: A.SkypeIcon.Search,
                    onPressCallback: I._onPeopleSearchButtonClick
                };
            case f.HubTab.Calls:
                return {
                    title: i,
                    accessibilityLabel: n,
                    icon: A.SkypeIcon.Search,
                    onPressCallback: I._onCallsSearchButtonClick
                }
            }
        }
        static headerButtonLayoutForHubTab(e) {
            return {
                leftControls: e.useTabletUI ? this._getTabletLeftControls(e) : this._getNewMobileHubLeftControls(e),
                rightControls: this._getNewMobileHubRightControls(e),
                centerControl: this._getGetCenterControl(e)
            }
        }
        static handleAddMenuCommand(e, t, i, n=!1, o=!1) {
            this._onHandleAddMenuCommand({
                command: e,
                fromSuperComposer: n,
                modifier: o,
                anchor: t,
                rootViewId: i
            })
        }
        static accessibilityAnnouncementForTab(e) {
            let t;
            switch (e) {
            case f.HubTab.Recents:
                t = p.getString("Hub.RecentsTabTitle");
                break;
            case f.HubTab.Calls:
                t = p.getString("Hub.CallsTabTitle");
                break;
            case f.HubTab.People:
                t = p.getString("Hub.ContactsTabTitle");
                break;
            case f.HubTab.Notifications:
                t = p.getString("Notifications.Notify")
            }
            return t && (t = p.getString("Global.ItemSelectedAccessibilityLabel", {
                text: t
            })),
            t
        }
        static _getTabletLeftControls(e) {
            return this._getTabletSecondaryControls(e)
        }
        static _getTabletSecondaryControls(e) {
            const t = [];
            return e.hubTab === f.HubTab.Recents && e.enableHeartEntryPoint && t.push(u.HeaderButtonType.Feedback),
            t
        }
        static _getNewMobileHubLeftControls(e) {
            const t = [];
            return e.hideAlertsButton || t.push(u.HeaderButtonType.Notifications),
            e.hubTab === f.HubTab.Recents && e.enableHeartEntryPoint && t.push(u.HeaderButtonType.Feedback),
            t
        }
        static _getNewMobileHubRightControls(e) {
            const t = [];
            switch (e.hubTab) {
            case f.HubTab.Recents:
                n.default.getS4LCMCFeaturesNoSubscription().enableMeetNow && t.push(u.HeaderButtonType.MeetNow),
                e.mobileHubFABEnabled ? t.push(u.HeaderButtonType.Search, u.HeaderButtonType.RecentsFilter) : t.push(u.HeaderButtonType.Action);
                break;
            case f.HubTab.People:
                e.mobileHubFABEnabled ? (t.push(u.HeaderButtonType.Search),
                t.push(u.HeaderButtonType.ContactsFilter)) : t.push(u.HeaderButtonType.Action);
                break;
            case f.HubTab.Calls:
                n.default.getS4LCMCFeaturesNoSubscription().enableMeetNow && t.push(u.HeaderButtonType.MeetNow),
                e.mobileHubFABEnabled ? t.push(u.HeaderButtonType.Search) : t.push(u.HeaderButtonType.Action);
                break;
            case f.HubTab.Notifications:
                t.push(u.HeaderButtonType.NotificationsSettings)
            }
            return t
        }
        static _getGetCenterControl(e) {
            return e.hubTab === f.HubTab.Recents ? u.HeaderButtonType.Profile : u.HeaderButtonType.Title
        }
        static _onSearchClick(e) {
            const t = k.newCauseId();
            g.log(c.LogTraceArea.Navigation, "HubUIUtils._onSearchClick causeId: " + t);
            let i = c.SearchPanelInitiator.Unknown;
            switch (e) {
            case f.HubTab.Recents:
                i = c.SearchPanelInitiator.RecentsListSearchButton;
                break;
            case f.HubTab.People:
                i = c.SearchPanelInitiator.ContactsPanel;
                break;
            case f.HubTab.Calls:
                i = c.SearchPanelInitiator.QuickCallPanel
            }
            y.navigateToSearch({
                searchOrigin: i
            }, t)
        }
        static _showAddTouchMenu(e, t, i, n) {
            I._registerMobileDismissalHandler(n);
            let r = [];
            if (e === f.HubTab.People) {
                if (r = I._getContactsAddMenuItems(),
                r = I._getNewContactsPanelContactsMenuItems(),
                1 === r.length)
                    return void y.navigateToAddContactPanel(s.AddContactPanelOrigin.HubTabPeople, v.StackNavigationDirection.Present, {
                        rootViewId: i
                    })
            } else
                r = I._getNewAddMenuItems();
            const a = {
                anchor: n,
                buttons: r,
                cancelButtonTitleIOS: p.getString("Global.CancelLabel")
            };
            g.track(new o.BotInteraction(c.BotsInteraction.ClickPlusMenu)),
            t.show(a, t=>I._onHandleAddMenuCommand({
                command: t,
                currentHubTab: e,
                anchor: n,
                rootViewId: i
            }))
        }
        static _getNewAddMenuItems() {
            const e = [];
            return n.default.getS4LMessagingFeatures().showNewChatFirstInPlusMenu ? e.push({
                text: p.getString("Hub.New1on1ChatLabel"),
                command: t.HubCommands.AddConversation1on1Command
            }, {
                text: p.getString("Hub.NewGroupChatLabel"),
                command: t.HubCommands.AddConversationGroupCommand
            }) : e.push({
                text: p.getString("Hub.NewGroupChatLabel"),
                command: t.HubCommands.AddConversationGroupCommand
            }, {
                text: p.getString("Hub.New1on1ChatLabel"),
                command: t.HubCommands.AddConversation1on1Command
            }),
            e.push({
                text: p.getString("Hub.NewPrivateChatLabel"),
                command: t.HubCommands.AddConversationPrivateCommand
            }),
            n.default.getS4LCaapFeatures().botDiscoveryEnabled && e.push({
                text: p.getString("Hub.FindBotLabel"),
                command: t.HubCommands.AddBotCommand
            }),
            e
        }
        static _getNewContactsPanelContactsMenuItems() {
            const e = [];
            return e.push({
                text: p.getString("Hub.AddContactMenuLabel"),
                command: t.HubCommands.AddContactCommand
            }),
            n.default.getS4LCaapFeatures().botDiscoveryEnabled && e.push({
                text: p.getString("Hub.AddBotMenuLabel"),
                command: t.HubCommands.AddBotCommand
            }),
            e
        }
        static _getContactsAddMenuItems() {
            const e = [];
            return n.default.getS4LCaapFeatures().botDiscoveryEnabled && e.push({
                text: p.getString("Hub.FindBotLabel"),
                command: t.HubCommands.AddBotCommand
            }),
            e
        }
        static _registerMobileDismissalHandler(e) {}
        static _showJoinLinkMenu(e) {
            const t = C.getSkypeMri()
              , i = l.getDisplayName(t);
            y.navigateToInviteShare(t, i, h.InviteLinkOrigin.NewChatInvite, {
                rootViewId: e
            })
        }
    }
    t.default = I,
    I._onSuperComposerClick = (e,i,n,o)=>{
        const s = i || void 0
          , r = s ? s.shiftKey || s.metaKey : void 0;
        I._onHandleAddMenuCommand({
            command: t.HubCommands.OpenSuperComposer,
            anchor: o,
            modifier: r,
            rootViewId: e
        })
    }
    ,
    I._onRecentPlusButtonClickForNewMobileHub = (e,t,i,n)=>{
        I._onPlusButtonClick(f.HubTab.Recents, e, i, n, t)
    }
    ,
    I._onRecentSearchButtonClick = (e,t)=>{
        I._onSearchClick(f.HubTab.Recents)
    }
    ,
    I._onPeoplePlusButtonClickForNewMobileHub = (e,t,i,n)=>{
        I._onPlusButtonClick(f.HubTab.People, e, i, n, t)
    }
    ,
    I._onPeopleSearchButtonClick = (e,t)=>{
        I._onSearchClick(f.HubTab.People)
    }
    ,
    I._onCallsSearchButtonClick = (e,t,i,n)=>{
        I._onSearchClick(f.HubTab.Calls)
    }
    ,
    I._onPlusButtonClick = (e,t,i,n,o)=>{
        const s = i || {
            show: (e,i)=>{
                T.default.showWithActionMenuConfig({
                    options: e,
                    callback: i,
                    maintainAnchor: !0,
                    rootViewId: t,
                    invokingEvent: o
                })
            }
        };
        I._showAddTouchMenu(e, s, t, n)
    }
    ,
    I._onSuperComposerGroupCallButtonClick = e=>{
        const t = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "HubUIUtils._onSuperComposerGroupCallButtonClick, causeId: " + t),
        y.navigateToQuickCallPanelWithParams({
            newGroup: !0,
            navigationDirection: v.StackNavigationDirection.Push,
            causeId: t
        }, {
            rootViewId: e
        })
    }
    ,
    I._onDialpadButtonClick = (e,t,i,n)=>{
        I._registerMobileDismissalHandler(n);
        const o = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "HubUIUtils._onDialpadButtonClick, causeId: " + o),
        y.navigateToPSTNDialerWithParams({
            causeId: o,
            navigationSource: c.DialerNavigationSource.QuickCallPanelFab
        }, {
            rootViewId: e
        })
    }
    ,
    I._onGroupCallButtonClick = (e,t,i,n)=>{
        const o = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "HubUIUtils._onGroupCallButtonClick, causeId: " + o),
        I._registerMobileDismissalHandler(n),
        y.navigateToQuickCallPanelWithParams({
            newGroup: !0,
            causeId: o
        }, {
            rootViewId: e
        })
    }
    ,
    I._onHandleAddMenuCommand = e=>{
        const i = k.newCauseId();
        switch (g.log(c.LogTraceArea.Navigation, "HubUIUtils._onHandleAddMenuCommand, command: " + e.command + " fromSuperComposer: " + e.fromSuperComposer + " modifier: " + e.modifier + " causeId: " + i),
        g.track(new d.HubPlusButtonEvent(e.command)),
        a.dismissAll(),
        I._registerMobileDismissalHandler(e.anchor),
        e.command) {
        case t.HubCommands.Cancel:
            return;
        case t.HubCommands.OpenSuperComposer:
            const {enableNewConversationCreation: i} = n.default.getS4LMessagingFeaturesNoSubscription()
              , {enableModeratedGroupChats: a} = n.default.getS4LMessagingFeatures();
            (i ? new r.default({
                peopleType: b.PeopleType.All,
                filterPeopleType: b.FilterType.None,
                navigationOrigin: c.NavigationConversationOrigin.Recents,
                wizardSteps: [_.WizardSteps.setConvParticipants]
            }) : new r.default({
                creating1on1Conversation: !0,
                useSuperComposerFor1on1Conversation: !0,
                peopleType: b.PeopleType.All,
                filterPeopleType: b.FilterType.None,
                isSingleContactSelect: !0,
                showModeratedGroupOption: e.modifier || a,
                navigationOrigin: c.NavigationConversationOrigin.SuperComposer,
                wizardSteps: [_.WizardSteps.setConvParticipants]
            })).start(e.rootViewId);
            break;
        case t.HubCommands.AddConversationGroupCommand:
            new r.default({
                navigationOrigin: c.NavigationConversationOrigin.NewGroup,
                peopleType: b.PeopleType.All,
                filterPeopleType: b.FilterType.GroupCapable,
                presentedFromSuperComposer: e.fromSuperComposer
            }).start(e.rootViewId);
            break;
        case t.HubCommands.AddConversationModeratedGroupCommand:
            new r.default({
                navigationOrigin: c.NavigationConversationOrigin.NewModeratedGroup,
                peopleType: b.PeopleType.All,
                filterPeopleType: b.FilterType.GroupCapable,
                presentedFromSuperComposer: e.fromSuperComposer
            }).start(e.rootViewId);
            break;
        case t.HubCommands.AddConversation1on1Command:
            new r.default({
                creating1on1Conversation: !0,
                useSuperComposerFor1on1Conversation: !1,
                peopleType: b.PeopleType.All,
                filterPeopleType: b.FilterType.None,
                isSingleContactSelect: !0,
                navigationOrigin: c.NavigationConversationOrigin.NewChat,
                presentedFromSuperComposer: e.fromSuperComposer,
                wizardSteps: [_.WizardSteps.setConvParticipants]
            }).start(e.rootViewId);
            break;
        case t.HubCommands.AddConversationPrivateCommand:
            new r.default({
                creating1on1Conversation: !0,
                useSuperComposerFor1on1Conversation: !1,
                peopleType: b.PeopleType.AllExcludingBots,
                filterPeopleType: b.FilterType.None,
                isSingleContactSelect: !0,
                navigationOrigin: c.NavigationConversationOrigin.NewPrivateChat,
                presentedFromSuperComposer: e.fromSuperComposer,
                wizardSteps: [_.WizardSteps.setConvParticipants]
            }).start(e.rootViewId);
            break;
        case t.HubCommands.NewGroupCallCommand:
            e.fromSuperComposer ? I._onSuperComposerGroupCallButtonClick(e.rootViewId) : I._onGroupCallButtonClick(e.rootViewId);
            break;
        case t.HubCommands.InviteCommand:
            I._showJoinLinkMenu(e.rootViewId);
            break;
        case t.HubCommands.AddContactCommand:
            y.navigateToAddContactPanel(s.AddContactPanelOrigin.HubTabPeople, v.StackNavigationDirection.Present, {
                rootViewId: e.rootViewId
            });
            break;
        case t.HubCommands.AddBotCommand:
            g.track(new o.BotInteraction(c.BotsInteraction.NavigateToBotStore)),
            y.navigateToBotDiscovery(e.fromSuperComposer ? v.StackNavigationDirection.Push : v.StackNavigationDirection.Present, {
                rootViewId: e.rootViewId
            });
            break;
        case t.HubCommands.NewCellularSmsConversationCommand:
            new r.default({
                creating1on1Conversation: !0,
                useSuperComposerFor1on1Conversation: !1,
                peopleType: b.PeopleType.AllWithPhoneNumbers,
                filterPeopleType: b.FilterType.CallCapable,
                isSingleContactSelect: !0,
                navigationOrigin: c.NavigationConversationOrigin.NewChat,
                presentedFromSuperComposer: e.fromSuperComposer,
                wizardSteps: [_.WizardSteps.setConvParticipants],
                createCellularSmsConversation: !0
            }).start(e.rootViewId);
            break;
        case t.HubCommands.NewMeetNowCommand:
            m.MeetNowHelpers.showNewMeetNow(S.MeetNowOrigin.NewChatMobile)
        }
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(42)
      , s = i(10)
      , r = i(523)
      , a = i(5)
      , l = i(4)
      , c = i(76)
      , d = i(103)
      , u = i(73)
      , g = (i(14),
    i(15))
      , h = i(12)
      , p = a.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            justifyContent: "center"
        }),
        content: ()=>n.Styles.createViewStyle({
            justifyContent: "space-between",
            flexDirection: "row",
            alignItems: "center",
            alignSelf: "stretch"
        }),
        button: ()=>n.Styles.createButtonStyle({
            flexDirection: "row",
            alignItems: "stretch",
            marginLeft: 10
        }),
        chevron: ()=>n.Styles.createTextStyle({
            marginTop: 4
        }),
        withCaption: ()=>n.Styles.createViewStyle({
            marginTop: 10,
            marginBottom: 5
        }),
        marginLeft: ()=>n.Styles.createViewStyle({
            marginLeft: 0
        })
    });
    class m extends h.default {
        constructor() {
            super(...arguments),
            this._onPickerButtonRef = e=>{
                this._pickerButton = e || void 0
            }
            ,
            this._onPickerClick = e=>{
                const t = {
                    anchor: ()=>this._pickerButton,
                    useTheme: !0,
                    positionPriorities: ["bottom", "top"]
                };
                return u.default.showWithOptions({
                    id: this.props.id,
                    config: t,
                    getMenuItems: this._getMenuItems,
                    handleMenuCommand: this._onHandleMenuCommand,
                    rootViewId: this._getRootViewId(),
                    invokingEvent: e
                })
            }
            ,
            this._getMenuItems = ()=>this.props.items.map(e=>({
                text: e.label,
                command: e.value,
                selected: this.props.isItemSelected(e.value),
                isCheckbox: !0
            })),
            this._onHandleMenuCommand = e=>{
                e !== u.SXActionMenuCancel && this.props.onHandleItemSelection(e)
            }
        }
        _buildState(e, t) {
            return {
                isMobileScreenReaderEnabled: c.default.isMobileScreenReaderEnabled()
            }
        }
        render() {
            const e = o.default.combinedAccessibilityLabel(this.props.rowTitle + ", " + this.props.selectedItemLabel, l.getString("Global.SelectedAccessibilityLabel"))
              , t = [p.container, s.ListItem.small.shortHeightStyle, this.props.style];
            let i = [p.content];
            const a = [p.button, this.props.rowTitle ? void 0 : p.marginLeft]
              , c = this._getCaption();
            return c && i.push(p.withCaption),
            n.createElement(n.View, {
                style: t
            }, n.createElement(n.View, {
                style: i
            }, this._getRowTitle(), n.createElement(r, {
                ref: this._onPickerButtonRef,
                style: a,
                label: this.props.selectedItemLabel,
                labelColor: this.props.labelColor,
                useBodyBoldLabel: !0,
                labelMaxWidth: 270,
                chevronStyle: p.chevron,
                onPress: this._onPickerClick,
                accessibilityLabel: e
            })), c)
        }
        _getRowTitle() {
            return this.props.rowTitle ? n.createElement(g.RowTitle, {
                colorThemeOverride: this._currentTheme,
                importantForAccessibility: this.state.isMobileScreenReaderEnabled ? n.Types.ImportantForAccessibility.No : void 0
            }, this.props.rowTitle) : void 0
        }
        _getCaption() {
            return this.props.caption ? n.createElement(g.Caption, {
                style: d.styles.subtitleMediumSemiLarge
            }, this.props.caption) : void 0
        }
    }
    e.exports = m
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(422)
      , s = i(38)
      , r = i(274)
      , a = i(9);
    class l {
        constructor(e, t, i, o, s, l, c, d, u, g, h, p, m) {
            e && (this.guid = e.guid,
            this.alertType = e.alertType,
            this.alertTime = e.alertTime,
            this.isRead = e.isRead,
            this.highlightsFollowInfo = e.highlightsFollowInfo,
            this.highlightCommentInfo = e.highlightCommentInfo,
            this.popCardInfo = e.popCardInfo,
            this.noticeMessageInfo = e.noticeMessageInfo,
            this.highlightsSkypeChannelInfo = e.highlightsSkypeChannelInfo,
            this.scheduledCallInfo = e.scheduledCallInfo,
            this.missedCallbackReminderCalleeMri = e.missedCallbackReminderCalleeMri,
            e.message && (this.message = r.fromDatabaseObject(e.message))),
            n.isUndefined(t) ? n.isUndefined(this.guid) && (this.guid = a.newGuid()) : this.guid = t,
            n.isUndefined(i) || (this.alertType = i),
            n.isUndefined(o) || (this.alertTime = o),
            n.isUndefined(s) || (this.isRead = s ? 1 : 0),
            l && (this.message = l),
            n.isUndefined(c) || (this.highlightsFollowInfo = c),
            n.isUndefined(d) || (this.highlightCommentInfo = d),
            n.isUndefined(u) || (this.popCardInfo = u),
            n.isUndefined(g) || (this.noticeMessageInfo = g),
            n.isUndefined(h) || (this.highlightsSkypeChannelInfo = h),
            n.isUndefined(p) || (this.scheduledCallInfo = p),
            n.isUndefined(m) || (this.missedCallbackReminderCalleeMri = m)
        }
        static fromDatabaseObject(e) {
            return e ? new l(e) : void 0
        }
        static fromScratch(e, t, i, n, o={}) {
            return new l(void 0,o.guid,e,t,i,n,o.highlightsFollowInfo,o.highlightCommentInfo,o.popCardInfo,o.noticeMessageInfo,o.highlightsSkypeChannelInfo,o.scheduledCallInfo,o.missedCallbackReminderCalleeMri)
        }
        applyRead(e) {
            return !!this.isRead == !!e ? this : new l(this,void 0,void 0,void 0,e)
        }
        updateHighlightsFollowStatus(e, t, i, n) {
            return e === this.alertTime && !!this.isRead == !!t && s.default(this.message, i) && s.default(this.highlightsFollowInfo, n) ? this : new l(this,void 0,void 0,e,t,i,n)
        }
        isHighlightsFollowRequest() {
            return this.highlightsFollowInfo && this.alertType === o.AlertType.HighlightsFollowRequest && this.highlightsFollowInfo.followState === o.HighlightsFollowAlertState.Follow
        }
        isRemovedHighlightsFollowRequest() {
            return this.highlightsFollowInfo && this.alertType === o.AlertType.HighlightsFollowRequest && this.highlightsFollowInfo.followState === o.HighlightsFollowAlertState.Removed
        }
        isAcceptedByMeHighlightsFollowRequest() {
            return this.highlightsFollowInfo && this.alertType === o.AlertType.HighlightsFollowRequest && this.highlightsFollowInfo.followState === o.HighlightsFollowAlertState.AcceptedByMe
        }
        isEngagementAlert() {
            return this.alertType === o.AlertType.Engagement || this.alertType === o.AlertType.Notice
        }
        isHighlightsSkypeChannelAlert() {
            return this.alertType === o.AlertType.HighlightsSkypeChannel || this.alertType === o.AlertType.HighlightsSkypeChannelSecondary
        }
        isScheduledCallAlert() {
            return this.alertType === o.AlertType.ScheduledCall
        }
    }
    t.default = l
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2369)
      , s = i(48)
      , r = i(21);
    t.default = new class {
        constructor() {
            r.RegisterStartupable(this, "FileCacheMetadataService")
        }
        startup() {
            return o.debug_existingCacheFolderInfo.count = 0,
            this._claimedCaches = {},
            s.default.getAllFileCacheMetadata().then(e=>{
                this._startupCacheMetas = n.groupBy(e, e=>e.cacheName)
            }
            )
        }
        isLocalCacheSupported() {
            return o.default.isLocalCacheSupported()
        }
        getCache(e) {
            if (this._claimedCaches[e])
                return this._claimedCaches[e];
            const t = new o.default(e,this._startupCacheMetas[e]);
            return this._claimedCaches[e] = t,
            delete this._startupCacheMetas[e],
            t
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1415)
      , s = i(52)
      , r = (i(6),
    i(2),
    i(21));
    i(18);
    t.default = new class {
        constructor() {
            this._responseQueue = {},
            this.event_response = new s.default,
            this.event_progress = o.default.onProgress,
            r.RegisterStartupable(this, "TransferResponseQueueService", [])
        }
        startup() {
            o.default.onResponse.subscribe((e,t)=>{
                this._responseQueue[e] = {
                    id: e,
                    success: !0,
                    response: t
                },
                this.event_response.fire()
            }
            ),
            o.default.onClientFailure.subscribe((e,t)=>{
                this._responseQueue[e] = {
                    id: e,
                    success: !1,
                    response: t
                },
                this.event_response.fire()
            }
            );
            return o.default.getKnownRequestIdsAtStartup(!1).then(e=>{
                this._startupActiveTransferIds = n.keyBy(e)
            }
            )
        }
        wasTransferIdKnownDuringStartup(e) {
            return !(!this._startupActiveTransferIds || !this._startupActiveTransferIds[e])
        }
        hasTransferResponses() {
            return !n.isEmpty(this._responseQueue)
        }
        drainResponseQueue() {
            const e = this._responseQueue;
            return this._responseQueue = {},
            e
        }
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        getEventName() {
            return "messaging_drafts"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getAction(),
            e
        }
    }
    t.DraftMessageCreated = class extends o {
        constructor() {
            super()
        }
        getAction() {
            return "Created"
        }
    }
    ;
    t.DraftMessageWasSent = class extends o {
        constructor(e, t) {
            super(),
            this._modifiedBeforeSent = e,
            this._createdTime = t
        }
        getAction() {
            return "Sent"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.WasModifiedBeforeSent = this._modifiedBeforeSent,
            e.LifetimeDuration = Date.now() - this._createdTime,
            e
        }
    }
    ;
    t.DraftMessageDeleted = class extends o {
        constructor(e) {
            super(),
            this._createdTime = e
        }
        getAction() {
            return "Deleted"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.LifetimeDuration = Date.now() - this._createdTime,
            e
        }
    }
    ;
    t.DraftMessageAppExitWithDrafts = class extends o {
        constructor(e) {
            super(),
            this._numberOfDrafts = e
        }
        getAction() {
            return "AppExitWithDrafts"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.DraftsCount = this._numberOfDrafts,
            e
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(101)
      , r = i(25)
      , a = i(39);
    class l extends a.TelemetryEventBase {
        getEventName() {
            return "messaging_media_preview"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getAction(),
            e
        }
    }
    t.MediaPreviewTelemetryMobileEvent = class extends l {
        constructor(e) {
            super(),
            this._props = e
        }
        getAction() {
            return "MobilePreviewSent"
        }
        getAttributes() {
            const {totalCount: e, imageCount: t, videoCount: i} = this._props;
            let n = super.getAttributes();
            return n.VideoCount = i,
            n.ImageCount = t,
            n.TotalCount = e,
            n
        }
    }
    ;
    class c extends l {
        constructor(e) {
            super(),
            this._props = e
        }
        getAttributes() {
            const {previews: e, deletedPreviewsCount: t, galleryOpenCount: i, wasSavedAsDraft: a, wasRecoveredFromDb: l, lastAddTimestamp: c} = this._props
              , d = n.mapKeys(n.countBy(e, "originator"), (e,t)=>"Origin_" + o.PostSource[parseInt(t, 10)])
              , u = n.mapKeys(n.countBy(e, "data.extension"), (e,t)=>{
                const i = s.getFileType(t);
                return "Count_" + r.UploadFileType[i]
            }
            );
            let g = Object.assign(Object.assign({}, d), u);
            return g.TotalCount = e.length,
            g.DeletedPreviewsCount = t,
            g.GalleryOpenCount = i,
            g.WasSavedAsDraft = a,
            g.WasRecoveredFromDb = l,
            c && (g.TimeElapsedSinceLastAdd = Date.now() - c),
            n.assign({}, super.getAttributes(), g)
        }
    }
    t.MediaPreviewDraftCreatedEvent = class extends c {
        constructor(e) {
            super(e)
        }
        getAction() {
            return "DraftCreated"
        }
    }
    ;
    t.MediaPreviewDraftDeletedEvent = class extends c {
        constructor(e) {
            super(e)
        }
        getAction() {
            return "DraftDeleted"
        }
    }
    ;
    t.MediaPreviewSentEvent = class extends c {
        constructor(e) {
            super(e)
        }
        getAction() {
            return "Sent"
        }
    }
    ;
    t.MediaPreviewAppExitWithDraftsEvent = class extends l {
        constructor(e) {
            super(),
            this._numberOfDrafts = e
        }
        getAction() {
            return "AppExitWithDrafts"
        }
        getAttributes() {
            return n.assign({}, super.getAttributes(), {
                DraftsCount: this._numberOfDrafts
            })
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(59);
    var o;
    !function(e) {
        e[e.Mobile = 0] = "Mobile",
        e[e.Tablet = 1] = "Tablet",
        e[e.Desktop = 2] = "Desktop"
    }(o = t.UIFactor || (t.UIFactor = {}));
    t.UIFactorHelper = class {
        static getUIFactor() {
            return n.isTablet() ? o.Tablet : o.Desktop
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1320)
      , o = i(1)
      , s = i(0)
      , r = i(7)
      , a = i(89)
      , l = i(6)
      , c = i(48)
      , d = i(790)
      , u = i(2561)
      , g = i(1055)
      , h = i(2)
      , p = i(3)
      , m = i(74)
      , S = i(4)
      , C = i(804)
      , y = i(105)
      , f = i(21)
      , _ = i(19)
      , b = i(18)
      , v = i(420)
      , T = i(29)
      , P = i(53);
    class A {
        constructor() {
            this._ecsClient = new n.default,
            this._isPaused = !0,
            this._isEnabled = !1,
            this._wipedDefault = !1,
            this._wipedUser = !1,
            this._updateState = ()=>{
                const {tracing: e, tracing2: t, tracing3: i, tracing4: n, tracing5: o, tracing6: s, tracing7: r, tracing8: a, tracing9: c, localeHint: d, unsafeTraceAreas: u, pii: g} = l.default.getS4LFeatures()
                  , {telemetrySampling: h, perfTelemetrySampling: m} = l.default.getS4LTelemetryFeatures()
                  , S = !this._loggedIn;
                v.setTelemetryConfig(l.default.getTelemetryFeatures(), l.default.getCachedEcsConfigEtag(), l.default.getCachedEcsConfigExpiration(), S, h, m, l.default.getNRTMapping()),
                p.setEcsOptions([e, t, i, n, o, s, r, a, c], u),
                p.setShouldFindPotentialPii(g.findPotentialPii),
                this._ecsClient.setFetchTimeout(l.default.getConfigSettingsNoSubscription().ecs.fetchTimeout),
                this._checkPauseStatus()
            }
            ,
            this._getEcsParameters = ()=>this._getSlimcoreParameters().then(e=>{
                const t = _.parseJsonWithDefault(e, {});
                let i;
                return i = b.getOSVersion(),
                this._setParameterIfUndefined(t, "OSVer", i),
                this._setParameterIfUndefined(t, "ClientID", b.getDeviceId()),
                this._setParameterIfUndefined(t, "Manufacturer", b.getSystemManufacturer()),
                this._setParameterIfUndefined(t, "Model", b.getSystemModel()),
                this._setParameterIfUndefined(t, "Chipset", b.getChipset()),
                this._setParameterIfUndefined(t, "CPUCount", b.getCPUCount()),
                this._setParameterIfUndefined(t, "CPUSpeedMHz", b.getCPUSpeedMhz()),
                this._setParameterIfUndefined(t, "Language", S.getLanguageFromLocale()),
                this._setParameterIfUndefined(t, "Locale", S.getLocale()),
                this._setParameterIfUndefined(t, "NetworkMCCCode", C.default.getMccCode()),
                this._setParameterIfUndefined(t, "NetworkMNCCode", C.default.getMncCode()),
                p.log(h.LogTraceArea.GenericUnsafe, "ECS - fetching parameters:" + JSON.stringify(t)),
                t
            }
            )
        }
        initializePreUserContext() {
            const e = l.default.getConfigSettingsNoSubscription().ecs
              , t = {
                hosts: e.hosts,
                fetchTimeout: e.fetchTimeout,
                clientName: "Skype",
                clientVersion: b.getSkypePlatformId() + "_" + b.getAppVersion() + (b.getPreInstallPartnerId() ? "_" + b.getPreInstallPartnerId() : ""),
                configsToFetch: [n.Models.EcsConfigType.Default],
                getEcsParameters: this._getEcsParameters,
                initialAppActiveState: this._isAppActive(s.App.getActivationState()),
                initialSkypeTokenData: void 0,
                databaseInterface: {
                    putData: (e,t)=>e === n.Models.EcsConfigType.User ? f.EnsureStartedExclusive([m.default]).then(()=>m.default.putData(c.InternalKeys.EcsConfig, t)) : e === n.Models.EcsConfigType.Default ? s.Storage.setItem("ecsDefaultConfig", JSON.stringify(t)) : r.Rejected("Unknown ECS Config Type"),
                    getData: e=>e === n.Models.EcsConfigType.User ? f.EnsureStartedExclusive([d.default, m.default]).then(()=>!this._wipedUser && d.default.didLastLaunchCrash() ? (this._wipedUser = !0,
                    m.default.deleteKeys([c.InternalKeys.EcsConfig]).then(()=>{}
                    )) : r.Resolved(m.default.getData(c.InternalKeys.EcsConfig))) : e === n.Models.EcsConfigType.Default ? f.EnsureStartedExclusive([d.default]).then(()=>!this._wipedDefault && d.default.didLastLaunchCrash() ? (this._wipedDefault = !0,
                    s.Storage.removeItem("ecsDefaultConfig").then(()=>{}
                    )) : s.Storage.getItem("ecsDefaultConfig").then(e=>_.parseJsonErrorToUndefined(e))) : r.Rejected("Unknown ECS Config Type")
                }
            };
            this._ecsClient.pause(),
            this._ecsClient.telemetryEventAdded.subscribe((e,t)=>{
                p.track(new u.EcsTelemetryEvent(e,t))
            }
            ),
            a.default.subscribeForChanges("EcsService", e=>{
                this._ecsClient.setAppActive(this._isAppActive(e))
            }
            ),
            y.default.subscribe(()=>this._checkPauseStatus(), y.TriggerKeys.CallingStatusKey),
            this._preContextInitializePromise = this._ecsClient.initialize(t).then(()=>{
                l.default.useCachedEcsConfig(this._ecsClient.getConfig()),
                l.default.subscribe(this._updateState),
                this._updateState(),
                this._ecsClient.configUpdated.subscribe(()=>{
                    l.default.useCachedEcsConfig(this._ecsClient.getConfig())
                }
                ),
                this._ecsClient.setConfigsToFetch([n.Models.EcsConfigType.Default])
            }
            )
        }
        initializeWithUserContext() {
            return this._preContextInitializePromise.then(()=>(this._loggedIn = !0,
            this._updateState(),
            this._ecsClient.setConfigsToFetch([n.Models.EcsConfigType.Default, n.Models.EcsConfigType.User]).then(()=>{
                f.EnsureStarted(P.default).then(()=>{
                    const e = ()=>{
                        const e = P.default.getSkypeToken();
                        e ? this._ecsClient.useSkypeToken(e.rawToken, e.expiration) : this._ecsClient.useSkypeToken(void 0, 0)
                    }
                    ;
                    P.default.subscribe(e, P.TriggerKeys.SkypeTokenKey),
                    e(),
                    T.setTimeout(()=>{
                        this._isEnabled = !0,
                        this._checkPauseStatus()
                    }
                    , 1e3)
                }
                )
            }
            )))
        }
        _getSlimcoreParameters() {
            return this._loggedIn ? f.EnsureStarted(g.default).then(()=>g.default.getParamsWhenAvailable()) : r.Resolved(void 0)
        }
        _setParameterIfUndefined(e, t, i) {
            void 0 === e[t] && (o.isNumber(i) || o.isString(i)) && (e[t] = i)
        }
        _checkPauseStatus() {
            const e = !this._isEnabled || this._shouldThrottleEcsClient();
            e !== this._isPaused && (e ? this._ecsClient.pause() : this._ecsClient.resume(),
            this._isPaused = e)
        }
        _shouldThrottleEcsClient() {
            return !!l.default.getS4LFeatures().scheduler.enableEcsServiceThrottling && y.default.isInCall()
        }
        _isAppActive(e) {
            return !!l.default.getConfigSettingsNoSubscription().ecs.ignoreActivationState || e === s.Types.AppActivationState.Active
        }
        requestUpdate() {
            this._ecsClient.requestUpdate()
        }
        resume() {
            this._isEnabled = !0,
            this._checkPauseStatus()
        }
        setAllowBackgroundFetch(e) {
            this._ecsClient.setAllowBackgroundFetch(e)
        }
        test_reset() {
            this._loggedIn = !1,
            this._isPaused = !0,
            this._isEnabled = !1,
            this._wipedDefault = !1,
            this._wipedUser = !1,
            this._preContextInitializePromise = void 0
        }
    }
    t.EcsService = A;
    let k = new A;
    t.default = k
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(357)
      , s = i(7)
      , r = i(6)
      , a = i(48)
      , l = i(2)
      , c = i(3)
      , d = i(74)
      , u = i(32)
      , g = i(21)
      , h = i(18);
    t.default = new class {
        constructor() {
            this._cache = {},
            this._initialized = !1,
            g.RegisterStartupable(this, "EcsParamCache", [d.default, u.default])
        }
        startup() {
            return r.default.getConfigSettingsNoSubscription().calling.disableEcsParamCache || (this._cache = d.default.getData(a.InternalKeys.EcsParamCache) || {},
            c.log(l.LogTraceArea.GenericUnsafe, n.isEmpty(this._cache) ? "No cached ECS parameters found." : "Loaded cached ECS parameters for version " + this._cache.appVersion)),
            this._fetchEcsParamsIfNeeded().then(()=>{
                if (this._initialized = !0,
                this._waitingForCallingParams) {
                    const e = this._waitingForCallingParams;
                    this._waitingForCallingParams = void 0,
                    e.resolve(void 0)
                }
            }
            ),
            s.Resolved()
        }
        _fetchEcsParamsIfNeeded() {
            return this.needNewParams() ? (c.log(l.LogTraceArea.GenericUnsafe, "Cached ECS parameters are stale, waiting for calling to start..."),
            this._fetchEcsCallingParams()) : s.Resolved(void 0)
        }
        _fetchEcsCallingParams() {
            return o.default.getEcsQueryParameters().then(e=>{
                this._cache = {
                    appVersion: h.getAppVersion(),
                    callingParams: e
                },
                c.log(l.LogTraceArea.GenericUnsafe, "Caching ECS parameters for version " + this._cache.appVersion),
                d.default.putData(a.InternalKeys.EcsParamCache, this._cache)
            }
            )
        }
        isInitialized() {
            return this._initialized
        }
        needNewParams() {
            return !!n.isEmpty(this._cache) || this._cache.appVersion !== h.getAppVersion()
        }
        getParamsWhenAvailable() {
            return this._initialized ? s.Resolved(this._cache.callingParams) : (this._waitingForCallingParams || (this._waitingForCallingParams = s.Defer()),
            this._waitingForCallingParams.promise().then(()=>this._cache.callingParams))
        }
        test_getCachedEcsParams() {
            return this._cache.callingParams
        }
        test_reset() {
            this._initialized = !1,
            this._cache = {},
            this._waitingForCallingParams = void 0
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(2)
      , r = i(3);
    let a = class extends o.StoreBase {
        constructor() {
            super(...arguments),
            this._shouldSkipMobileHub = !1
        }
        shouldSkipMobileHub() {
            return this._shouldSkipMobileHub
        }
        skipMobileHub(e) {
            this._shouldSkipMobileHub || (r.log(s.LogTraceArea.Navigation, "LaunchNavigationStore: skipMobileHub causeId: " + e),
            this._shouldSkipMobileHub = !0,
            this.trigger())
        }
        stopSkippingMobileHub(e) {
            this._shouldSkipMobileHub && (r.log(s.LogTraceArea.Navigation, "LaunchNavigationStore: stopSkippingMobileHub causeId: " + e),
            this._shouldSkipMobileHub = !1,
            this.trigger())
        }
    }
    ;
    n.__decorate([o.autoSubscribe], a.prototype, "shouldSkipMobileHub", null),
    a = n.__decorate([o.AutoSubscribeStore], a);
    let l = new a;
    t.default = l
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(189)
      , o = i(92)
      , s = i(135);
    function r(e) {
        return function(e, t) {
            return s.isDarkTheme(t) && !s.isDelphiTheme(t) && !n.isCustomColor(e)
        }(e, o.colorTheme())
    }
    function a(e, t) {
        return n.accentColor(e, t)
    }
    t.useSecondaryAccentColor = r,
    t.accentColor = function(e) {
        return a(e, r(e))
    }
    ,
    t.accentColorForColorInfo = a,
    t.backgroundColorStyleForColorInfo = function(e) {
        const t = r(e);
        return n.backgroundColorStyleForColorInfo(e, t)
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(763);
    class s {
        getAssetSourceWithColor(e, t) {
            let i = void 0
              , n = void 0
              , s = e.source;
            if ("string" == typeof s)
                if (n = "strong",
                t) {
                    const e = o.colorStringToBodyMovinRgbArray(t);
                    i = {
                        key: t,
                        parameters: {
                            color: t,
                            rgbColor: JSON.stringify(e)
                        }
                    }
                } else
                    i = e.defaultTemplateContext;
            else
                s = this._getSourceWithColor(s, t);
            return {
                source: s,
                templateContext: i,
                cacheStrategy: n
            }
        }
        getAssetSourceWithGradientColors(e, t, i) {
            let n = void 0
              , o = void 0
              , s = e.source;
            return "string" == typeof s ? (o = "strong",
            n = e.defaultTemplateContext) : s = this._getSourceWithGradientColors(s, t, i),
            {
                source: s,
                templateContext: n,
                cacheStrategy: o
            }
        }
        _getSourceWithColor(e, t) {
            if (t) {
                let i = n.cloneDeep(e);
                const s = o.colorStringToBodyMovinRgbArray(t);
                return n.each(i.layers, e=>{
                    n.each(e.shapes, e=>{
                        e.c && (e.c.k = s),
                        e.it && n.each(e.it, e=>{
                            e.c && (e.c.k = s)
                        }
                        )
                    }
                    ),
                    e.sc && (e.sc = t)
                }
                ),
                i
            }
            return e
        }
        _getSourceWithGradientColors(e, t, i) {
            let s = n.cloneDeep(e);
            const r = o.colorStringToBodyMovinRgbArray(t)
              , a = o.colorStringToBodyMovinRgbArray(i);
            let l = [0];
            return l.push.apply(l, n.take(r, 3)),
            l.push(1),
            l.push.apply(l, n.take(a, 3)),
            n.each(s.layers, e=>{
                n.each(e.shapes, e=>{
                    e.it && n.each(e.it, e=>{
                        if (e.g && e.g.k && e.g.k.k) {
                            const t = e.g.k.k;
                            for (let e = 0; e < t.length; e += 4) {
                                const i = t[e];
                                t[e + 1] = this._mapVal(i, r[0], a[0]),
                                t[e + 2] = this._mapVal(i, r[1], a[1]),
                                t[e + 3] = this._mapVal(i, r[2], a[2])
                            }
                            e.g.k.k = t
                        }
                    }
                    )
                }
                )
            }
            ),
            s
        }
        _mapVal(e, t, i) {
            return t + (i - t) * e
        }
    }
    t.JSONAnimationUtils = s,
    t.default = new s
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._fromLanguage = e,
            this._toLanguage = t,
            this._statusCode = i
        }
        getEventName() {
            return "translation_request"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.FromLanguage = this._fromLanguage,
            e.ToLanguage = this._toLanguage,
            e.StatusCode = this._statusCode,
            e
        }
    }
    t.TranslationRequestEvent = o;
    class s extends n.TelemetryEventBase {
        getEventName() {
            return "translation_setting"
        }
    }
    t.TranslationVoiceChangedEvent = class extends s {
        constructor(e) {
            super(),
            this._translationVoice = e
        }
        getActionName() {
            return "translation_voice"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.TranslationVoice = this._translationVoice,
            e
        }
    }
    ;
    t.TranslationPrivacySwitchChangedEvent = class extends s {
        constructor(e) {
            super(),
            this._enabled = e
        }
        getActionName() {
            return "translation_privacy_switch"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.TranslationPrivacySwitchEnabled = this._enabled,
            e
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(36)
      , o = i(0)
      , s = i(13)
      , r = i(7)
      , a = i(89)
      , l = i(6)
      , c = i(2)
      , d = i(3)
      , u = i(21);
    t.AETimeoutInSeconds = 120,
    t.AETimerDurationInSeconds = t.AETimeoutInSeconds - 20;
    class g extends s.StoreBase {
        constructor() {
            super(),
            this._isSystemIdle = !1,
            this._isActive = !1,
            this._lastUpdatedInfo = {},
            this._onSystemIdleChange = (e,t)=>{
                d.log(c.LogTraceArea.ActiveEndpointService, "onSystemIdleChange : isIdle: " + t),
                this._isSystemIdle = t,
                this._recalculate()
            }
            ,
            this._subscribeSystemIdle = ()=>{
                l.default.getConfigSettingsNoSubscription().endpointPresence.useSystemIdle ? this._systemIdleSubscriptionToken || (this._systemIdleSubscriptionToken = n.default.onSystemIdleChange.subscribe(this._onSystemIdleChange)) : this._systemIdleSubscriptionToken && (this._systemIdleSubscriptionToken.unsubscribe(),
                this._systemIdleSubscriptionToken = void 0)
            }
            ,
            u.RegisterStartupable(this, "ActiveEndpointStore")
        }
        startup() {
            return this._isUserPresent = o.UserPresence.isUserPresent(),
            o.UserPresence.userPresenceChangedEvent.subscribe(e=>{
                this._isUserPresent = e,
                this._recalculate()
            }
            ),
            this._appState = o.App.getActivationState(),
            a.default.subscribeForChanges("ActiveEndpointStore", e=>{
                this._appState = e,
                this._recalculate()
            }
            ),
            n.default.isSystemIdle().then(e=>{
                this._isSystemIdle = e
            }
            ),
            this._subscribeSystemIdle(),
            l.default.subscribe(this._subscribeSystemIdle),
            d.log(c.LogTraceArea.ActiveEndpointService, "Initialized - Native endpoint activity status hookup"),
            this._recalculate(),
            r.Resolved()
        }
        _recalculate() {
            const e = this._isActive;
            this._isActive = l.default.getConfigSettingsNoSubscription().endpointPresence.useSystemIdle ? !this._isSystemIdle : this._isUserPresent && this._appState === o.Types.AppActivationState.Active,
            this._isActive !== e && this.trigger()
        }
        isActive() {
            return this._isActive
        }
        getLastUpdatedInfo() {
            return this._lastUpdatedInfo
        }
        setLastUpdatedInfo(e) {
            this._lastUpdatedInfo = e
        }
        test_teardown() {
            this._isUserPresent = !1,
            this._appState = o.Types.AppActivationState.Background,
            this._isSystemIdle = !0,
            this._isActive = !1,
            this._lastUpdatedInfo = {},
            this._systemIdleSubscriptionToken && (this._systemIdleSubscriptionToken.unsubscribe(),
            this._systemIdleSubscriptionToken = void 0)
        }
        test_trigger() {
            this.trigger()
        }
    }
    t.default = new g
}
, function(e, t, i) {
    "use strict";
    var n;
    !function(e) {
        e[e.Checking = 0] = "Checking",
        e[e.Error = 1] = "Error",
        e[e.UpdateAvailable = 2] = "UpdateAvailable",
        e[e.NoUpdates = 3] = "NoUpdates",
        e[e.UpdateDownloaded = 4] = "UpdateDownloaded"
    }(n || (n = {})),
    e.exports = n
}
, , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(759)
      , r = i(72)
      , a = i(7)
      , l = i(2)
      , c = i(3)
      , d = i(19)
      , u = i(29);
    class g {
        static checkCookieValue(e, t, i, n=5) {
            let o = {
                exponentialTime: new r.ExponentialTime(100,5e3),
                numberRetriesSoFar: -1
            };
            return g._checkCookieValue(e, t, i, n, o)
        }
        static getCookieSupported() {
            return !1
        }
        static clearCookies() {
            return s.default.clearAllCookies()
        }
        static _checkCookieValue(e, t, i, r=5, u) {
            return s.default.getCookiesForDomain(e).then(n=>{
                const s = t.trim();
                return o.find(n, (e,t)=>t.trim() === s) === i ? a.Resolved() : g._retryCheckCookieValue(e, t, i, r, u)
            }
            , o=>(c.error(l.LogTraceArea.CookieUtils, "Failed to fetch cookies for domain: '", n.pii.Omit(e), "' , error: ", d.errorAsString(o)),
            g._retryCheckCookieValue(e, t, i, r, u)))
        }
        static _retryCheckCookieValue(e, t, i, o, s) {
            return s.numberRetriesSoFar = s.numberRetriesSoFar + 1,
            s.numberRetriesSoFar <= o ? (c.log(l.LogTraceArea.CookieUtils, "Retrying getting cookie value. Domain:", n.pii.Omit(e), ", retryInfo:", JSON.stringify(s)),
            u.sleep(s.exponentialTime.getTimeAndCalculateNext()).then(()=>this._checkCookieValue(e, t, i, o, s))) : a.Rejected()
        }
    }
    t.default = g
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13);
    let s = class extends o.StoreBase {
        getAnchorPosition() {
            return this._anchorPosition
        }
        setAnchorPosition(e) {
            this._anchorPosition = e,
            this.trigger()
        }
    }
    ;
    n.__decorate([o.autoSubscribe], s.prototype, "getAnchorPosition", null),
    s = n.__decorate([o.AutoSubscribeStore], s);
    let r = new s;
    t.default = r
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(395)
      , r = i(36)
      , a = i(298)
      , l = i(169)
      , c = i(0)
      , d = i(82)
      , u = i(7)
      , g = i(89)
      , h = i(6)
      , p = i(829)
      , m = i(31)
      , S = i(112)
      , C = i(99)
      , y = i(88)
      , f = i(79)
      , _ = i(235)
      , b = i(57)
      , v = i(16)
      , T = i(28)
      , P = i(680)
      , A = i(820)
      , k = i(2)
      , I = i(210)
      , w = i(3)
      , N = i(670)
      , M = i(74)
      , E = i(569)
      , x = i(277)
      , D = i(1085)
      , L = i(4)
      , R = i(2632)
      , B = i(516)
      , O = i(810)
      , F = i(32)
      , V = i(192)
      , U = i(20)
      , H = (i(17),
    i(22))
      , W = i(2633)
      , z = i(511)
      , G = i(439)
      , K = i(240)
      , j = i(1102)
      , q = i(1527)
      , Q = i(1103)
      , X = i(1476)
      , J = i(2634)
      , $ = i(34)
      , Y = i(440)
      , Z = i(140)
      , ee = i(185)
      , te = i(105)
      , ie = i(182)
      , ne = i(212)
      , oe = i(21)
      , se = i(308)
      , re = i(19)
      , ae = i(18)
      , le = i(679)
      , ce = i(9);
    t.default = new class {
        constructor() {
            this._skipIncomingVideoNotificationDict = {},
            this._notificationPromises = [],
            this._subscriptions = [],
            this.test_tickCheck = u.Resolved(),
            this._processIncomingVideoAvailableNotification = (e,t)=>{
                if (h.default.getS4LCMCFeaturesNoSubscription().enableIncomingVideoNotification) {
                    if (!!!this._skipIncomingVideoNotificationDict[e]) {
                        const i = ce.newCauseId()
                          , n = t.id;
                        if (m.default.RemoteStreamHelper.isStreamAvailable(e, n, d.StreamType.Video, [S.VideoOverrideReason.InBackground])) {
                            const t = c.App.getActivationState();
                            t === c.Types.AppActivationState.Background ? (w.log(k.LogTraceArea.Calling, "_processIncomingVideoAvailableNotification, causeId: " + i),
                            this._skipIncomingVideoNotificationDict[e] = !0,
                            s.default.postIncomingVideoNotification(n, e, i, "", s.IncomingVideoNotificationOrigin.IncomingWhileInBackground, ae.getSoundPath("Skype_Incoming_Video_Available.m4a"))) : t === c.Types.AppActivationState.Active && (this._skipIncomingVideoNotificationDict[e] = !0)
                        }
                    }
                }
            }
            ,
            this._onCallEndedEvent = e=>{
                const t = e.callId;
                this._skipIncomingVideoNotificationDict[t] && delete this._skipIncomingVideoNotificationDict[t]
            }
            ,
            oe.RegisterStartupable(this, "LocalNotificationsService", [z.default, ie, ne.default, q.default, D.default])
        }
        setupPreStartupSubscriptions() {
            this._metasSub && this._metasSub.unsubscribe(),
            this._metasSub = b.default.conversationsUpdated.subscribe(e=>{
                const t = o.filter(e, e=>!!e.counts);
                if (t.length > 0) {
                    const e = a.default.requestMaxTime("Notifications:conv");
                    oe.EnsureStarted(this).then(()=>{
                        o.each(t, e=>{
                            q.default.cancelNotificationsForConversation(e.conv.id, e.counts.consumptionHorizonTimestamp)
                        }
                        )
                    }
                    ).always(()=>{
                        e.then(e=>a.default.release(e, "Notifications:conv")).catch(o.noop)
                    }
                    )
                }
            }
            ),
            this._messagesSub && this._messagesSub.unsubscribe(),
            this._messagesSub = b.default.messagesProcessedWithBundleInfo.subscribe(e=>{
                const t = u.Defer();
                let i = !1;
                const n = t.promise();
                this._notificationPromises.push(n),
                n.always(()=>{
                    o.pull(this._notificationPromises, n)
                }
                ),
                this.test_tickCheck = u.Resolved().then(()=>{
                    const n = a.default.requestMaxTime("Notifications:msg");
                    return oe.EnsureStarted(this).then(()=>{
                        const t = o.map(e, e=>{
                            const t = _.getCorrelationIdForMessage(e.message)
                              , i = o.some(e.details, e=>e.origin === k.MessageOrigin.PushNotification);
                            return i && w.track(new I.FundamentalsMessagePushDebug(e.message.getLatestRelevantClientMessageId() || "",t,"LocalNotifications: started")),
                            i && e.message.isLastChangeReactionConsumptionHorizonUpdate() && q.default.cancelNotificationById(e.message.conversationId + e.message.createdTime),
                            this._processMessageInfoForNotifications(e).then(n=>oe.EnsureStartedExclusive([ie, ne.default, M.default]).then(()=>{
                                const s = ie.getEndpointInfo()
                                  , r = V.getStatusNoSubscription()
                                  , a = V.getOriginNoSubscription();
                                U.isMyMri(e.message.creator) && G.isLastMessageUpdateReaction(e.message) && w.track(new J.ReactionNotificationProcessed(e.message.conversationId,n)),
                                i && w.track(new I.FundamentalsMessagePushDebug(e.message.getLatestRelevantClientMessageId() || "",t,"LocalNotifications: done",void 0,k.MessageProcessResult[n]));
                                const l = o.uniq(o.map(e.details, e=>e.origin)).length;
                                o.each(e.details, t=>{
                                    w.track(new x.KpiMessageDelivered(e.message,t.origin,n,t.clientMessageId,ne.default.EdfRegistrationId.get(),s,f.getSubscriptionState(),X.default.getPresenceTelemetryAttributesOnMessageReceived(e.message),e.messageAlreadySeen,r,a,te.default.isInCall(),l,t.correlationVector))
                                }
                                )
                            }
                            ).then(()=>({
                                result: n,
                                message: e.message
                            })))
                        }
                        );
                        return u.all(t).then(e=>{
                            const t = o.groupBy(e, e=>e.result);
                            w.log(k.LogTraceArea.Notifications, "Processed " + e.length + " Messages: " + o.map(t, (e,t)=>k.MessageProcessResult[Number(t)] + ": (" + o.map(e, e=>"cuid: " + e.message.cuid + " CorrelationId: " + _.getCorrelationIdForMessage(e.message)).join(", ") + ")").join(", "))
                        }
                        )
                    }
                    ).always(()=>{
                        i = !0,
                        t.resolve(void 0),
                        n.then(e=>a.default.release(e, "Notifications:msg")).catch(o.noop)
                    }
                    )
                }
                ).always(()=>{
                    i || (i = !0,
                    t.resolve(void 0))
                }
                )
            }
            )
        }
        startup() {
            return this._subscriptions.push(l.LocalNotifications.localNotificationEventReceivedLogMessageEvent.subscribe(e=>{
                w.log(k.LogTraceArea.Notifications, "LocalNotifications " + e)
            }
            )),
            this._subscriptions.push(m.default.CallingStore.participantUpdatedEvent().subscribe(this._processIncomingVideoAvailableNotification)),
            this._subscriptions.push(m.default.CallingStore.callEndedEvent().subscribe(this._onCallEndedEvent)),
            this._applyConfigurationToLocalNotifications(),
            z.default.event_localNotificationQueueChanged.subscribe(()=>{
                this._drainLocalNotificationQueue()
            }
            ),
            this._drainLocalNotificationQueue(),
            u.Resolved()
        }
        destroy() {
            const e = this._subscriptions;
            this._subscriptions = [],
            o.each(e, e=>e.unsubscribe())
        }
        flushNotificationProcessingPromises() {
            const e = this._notificationPromises;
            return this._notificationPromises = [],
            u.all(e).then(o.noop)
        }
        _applyConfigurationToLocalNotifications() {
            {
                const e = ()=>{
                    let e;
                    e = {
                        Web: {
                            MultiTabNotifications: h.default.getS4LMessagingFeatures().browserMultiTabNotifications
                        }
                    },
                    l.LocalNotifications.setConfig(e)
                }
                ;
                h.default.subscribe(e),
                e()
            }
        }
        processDelayedCallNotification(e) {
            this._callDelayedNotificationProcessingId && l.LocalNotifications.notificationProcessingCompleted(this._callDelayedNotificationProcessingId),
            this._callDelayedNotificationProcessingId = e
        }
        _drainLocalNotificationQueue() {
            le.isForceUpdateEnabled() || o.each(z.default.fetchAndDrainLocalNotificationQueue(), e=>{
                this._handleLocalNotificationEventReceived(e.notification, e.causeId)
            }
            )
        }
        _handleLocalNotificationEventReceived(e, t) {
            var i, s;
            let d;
            se.default.startedProcessingLocalNotification(e.category);
            let u, S = !1, _ = "Received local notification event: ";
            _ = _ + "(category:" + e.category + " identifier: " + e.identifier + ")",
            _ = _ + " causeId: " + t,
            w.log(k.LogTraceArea.Notifications, _);
            h.default.getS4LMessagingFeaturesNoSubscription().enableAndroidExpandedNotifications;
            if (e.category === K.LocalNotificationIds.CALL_CATEGORY_IDENTIFIER) {
                const i = e.serviceSpecificData
                  , o = i ? i.conversationMri : void 0
                  , s = i ? i.callId : void 0;
                if (s && o) {
                    if (this._callDelayedNotificationProcessingId)
                        if (c.App.getActivationState() === c.Types.AppActivationState.Active)
                            l.LocalNotifications.notificationProcessingCompleted(this._callDelayedNotificationProcessingId),
                            this._callDelayedNotificationProcessingId = void 0,
                            w.log(k.LogTraceArea.Notifications, "delayed finish processing completed causeId: " + t);
                        else {
                            let e = g.default.subscribeForChanges("LocalNotificationsService", i=>{
                                i === c.Types.AppActivationState.Active && (e.unsubscribe(),
                                this._callDelayedNotificationProcessingId && l.LocalNotifications.notificationProcessingCompleted(this._callDelayedNotificationProcessingId),
                                this._callDelayedNotificationProcessingId = void 0,
                                w.log(k.LogTraceArea.Notifications, "delayed finish processing completed causeId: " + t))
                            }
                            )
                        }
                    switch (e.identifier) {
                    case K.LocalNotificationIds.CALL_ACTION_ACCEPT_IDENTIFIER:
                        d = k.AppEntryPoint.CallNotification,
                        w.log(k.LogTraceArea.Notifications, "Auto-answering call " + s + " for conversation " + $.mriOrId(o) + " from notification causeId: " + t),
                        N.setIntent(N.Intent.Call),
                        m.default.CallNavigationHelper.answerOrJoinCall({
                            conversationMri: o,
                            callId: s,
                            knownToBeAnswer: !0,
                            origin: k.NavigationCallOrigin.LocalNotificationAction
                        }, t);
                        break;
                    case K.LocalNotificationIds.CALL_ACTION_REJECT_IDENTIFIER:
                        m.default.CallingStore.rejectCall(s, t);
                        break;
                    case K.LocalNotificationIds.CALL_ACTION_DEFAULT:
                        e.isKeyguardOn && m.default.CallingStore.callDidExist(s) && r.default.reEnableKeyguardIfSet(!0).catch(e=>{
                            w.warn(k.LogTraceArea.Notifications, "reEnableKeyguardIfSet failed: " + re.errorAsString(e))
                        }
                        );
                        break;
                    default:
                        w.error(k.LogTraceArea.Notifications, "Unexpected event: " + e.identifier + " causeId: " + t)
                    }
                } else
                    w.error(k.LogTraceArea.Notifications, "callId not found causeId: " + t + " " + n.pii.Omit(JSON.stringify(e)))
            } else if (e.category === K.LocalNotificationIds.MISSED_CALL_CATEGORY_IDENTIFIER) {
                const i = e.serviceSpecificData
                  , o = i ? i.conversationMri : void 0;
                if (o)
                    switch (e.identifier) {
                    case K.LocalNotificationIds.MISSED_CALL_BACK_IDENTIFIER:
                        d = k.AppEntryPoint.CallNotification,
                        w.log(k.LogTraceArea.Notifications, "Initiating new call in response to missed in conversation " + $.mriOrId(o) + " causeId: " + t),
                        N.setIntent(N.Intent.Call),
                        m.default.CallNavigationHelper.startCall({
                            conversationMri: o,
                            withVideo: !1,
                            origin: k.NavigationCallOrigin.LocalNotificationAction
                        }, t);
                        break;
                    case K.LocalNotificationIds.MISSED_CALL_DEFAULT:
                        w.track(new j.NotificationAppLaunched(k.NotificationTypeAppLaunched.MissedCall,o)),
                        d = k.AppEntryPoint.CallNotification,
                        w.log(k.LogTraceArea.Notifications, "MISSED_CALL_DEFAULT, navigateToConversation " + $.mriOrId(o) + ", causeId: " + t),
                        N.setIntent(N.Intent.Chat),
                        W.default.navigateToConversationOrScheduleNavigationOnLaunch({
                            convId: o,
                            origin: k.NavigationConversationOrigin.SystemNotificationMissedCall,
                            causeId: t
                        });
                        break;
                    default:
                        w.error(k.LogTraceArea.Notifications, "Unexpected event: " + e.identifier + " causeId: " + t)
                    }
                else
                    w.error(k.LogTraceArea.Notifications, "conversationId not found for MISSED_CALL_CATEGORY_IDENTIFIER causeId: " + t + " " + n.pii.Omit(JSON.stringify(e)))
            } else if (e.category === K.LocalNotificationIds.MISSED_P2P_CALL_CATEGORY_IDENTIFIER) {
                const i = e.serviceSpecificData
                  , o = i ? i.conversationMri : null;
                o ? (d = k.AppEntryPoint.CallNotification,
                w.log(k.LogTraceArea.Notifications, "MISSED_P2P_CALL_CATEGORY_IDENTIFIER, navigateToConversation " + $.mriOrId(o) + ", causeId: " + t),
                N.setIntent(N.Intent.Chat),
                W.default.navigateToConversationOrScheduleNavigationOnLaunch({
                    convId: o,
                    origin: k.NavigationConversationOrigin.SystemNotificationMissedP2PCall,
                    causeId: t
                })) : w.error(k.LogTraceArea.Notifications, "conversationId not found for MISSED_P2P_CALL_CATEGORY_IDENTIFIER causeId: " + t + " " + n.pii.Omit(JSON.stringify(e)))
            } else if (e.category === K.LocalNotificationIds.GO_LIVE_CATEGORY_IDENTIFIER) {
                const i = e.serviceSpecificData
                  , n = i ? i.conversationMri : void 0
                  , o = i ? i.callId : void 0;
                if (n && o)
                    switch (e.identifier) {
                    case K.LocalNotificationIds.GO_LIVE_ACTION_DEFAULT:
                        w.track(new j.NotificationAppLaunched(k.NotificationTypeAppLaunched.GoLive,n)),
                        w.log(k.LogTraceArea.Notifications, "Navigating to conversation from go live notification causeId: " + t),
                        N.setIntent(N.Intent.Chat),
                        W.default.navigateToConversationOrScheduleNavigationOnLaunch({
                            convId: n,
                            origin: k.NavigationConversationOrigin.GoLiveNotification,
                            causeId: t
                        });
                        break;
                    case K.LocalNotificationIds.GO_LIVE_ACTION_JOIN_IDENTIFIER:
                        w.track(new O.MessagingToastQuickActionEvent(O.MessagingToastQuickAction.JoinCall,n)),
                        N.setIntent(N.Intent.Call),
                        w.log(k.LogTraceArea.Notifications, "Joining golive from notifications causeId: " + t),
                        m.default.CallPreviewUtils.answerOrJoinCall({
                            conversationMri: n,
                            callId: o,
                            origin: k.NavigationCallOrigin.LocalNotificationAction,
                            isGoLive: !0,
                            optionalLiveState: i.conversationLiveState
                        }, t)
                    }
                else
                    w.warn(k.LogTraceArea.Notifications, "Ignoring go-live notification missing call and/or conversation id" + JSON.stringify(i))
            } else if (e.category === K.LocalNotificationIds.CALLBACK_REMINDER_CATEGORY_IDENTIFIER) {
                const i = e.serviceSpecificData
                  , n = i ? i.calleeMri : void 0;
                let o = C.CallbackReminderTappedAction.None;
                if (n)
                    switch (e.identifier) {
                    case K.LocalNotificationIds.CALLBACK_REMINDER_ACTION_DEFAULT:
                        w.track(new j.NotificationAppLaunched(k.NotificationTypeAppLaunched.CallbackReminder,n)),
                        w.log(k.LogTraceArea.Notifications, "Navigating to conversation from callback reminder causeId: " + t),
                        N.setIntent(N.Intent.Chat),
                        o = C.CallbackReminderTappedAction.Navigate,
                        W.default.navigateToConversationOrScheduleNavigationOnLaunch({
                            convId: n,
                            origin: k.NavigationConversationOrigin.GoLiveNotification,
                            causeId: t
                        });
                        break;
                    case K.LocalNotificationIds.CALLBACK_REMINDER_ACTION_CALL_IDENTIFIER:
                        N.setIntent(N.Intent.Call),
                        w.log(k.LogTraceArea.Notifications, "Callback action from callback reminder causeId: " + t),
                        o = C.CallbackReminderTappedAction.Call,
                        m.default.CallNavigationHelper.startCall({
                            conversationMri: n,
                            withVideo: !1,
                            origin: k.NavigationCallOrigin.LocalNotificationAction
                        }, t)
                    }
                w.track(new C.CallbackReminderTappedEvent(o,i ? i.missedCallTime : 0,i ? i.notificationPresentedTime : 0))
            } else if (e.category === K.LocalNotificationIds.SCHEDULED_CALL_INVITE || e.category === K.LocalNotificationIds.SCHEDULED_CALL_INVITE_RESPONSE) {
                const i = e.serviceSpecificData
                  , n = i ? i.scheduledCallId : void 0
                  , o = i ? i.conversationId : void 0
                  , s = i ? i.messageTimestamp : void 0;
                let r = "";
                if (o) {
                    switch (e.identifier) {
                    case K.LocalNotificationIds.SCHEDULED_CALL_INVITE_ACCEPT:
                        n && oe.EnsureStarted(ee.default).then(()=>{
                            w.track(new O.MessagingToastQuickActionEvent(O.MessagingToastQuickAction.AcceptScheduledCall,o)),
                            ee.default.acceptInvitation(n),
                            w.track(new Y.ScheduledCallRSVPEvent(Z.ScheduleCallRSVPEntryPoint.Notification,Z.ScheduledCallInvitationStatus.Accepted,o,n))
                        }
                        ),
                        r = "SCHEDULED_CALL_INVITE_ACCEPT";
                        break;
                    case K.LocalNotificationIds.SCHEDULED_CALL_INVITE_DECLINE:
                        n && oe.EnsureStarted(ee.default).then(()=>{
                            w.track(new O.MessagingToastQuickActionEvent(O.MessagingToastQuickAction.DeclineScheduledCall,o)),
                            ee.default.declineInvitation(n),
                            w.track(new Y.ScheduledCallRSVPEvent(Z.ScheduleCallRSVPEntryPoint.Notification,Z.ScheduledCallInvitationStatus.Declined,o,n))
                        }
                        ),
                        r = "SCHEDULED_CALL_INVITE_DECLINE";
                        break;
                    case K.LocalNotificationIds.CHAT_ACTION_REPLY_IDENTIFIER:
                        e.textInputValue && (u = this._sendRawMessage(o, e.textInputValue)),
                        r = "CHAT_ACTION_REPLY_IDENTIFIER";
                        break;
                    case K.LocalNotificationIds.ACTION_DEFAULT:
                        r = "ACTION_DEFAULT"
                    }
                    d = k.AppEntryPoint.ChatNotification,
                    w.log(k.LogTraceArea.Notifications, r + ", navigateToConversation " + $.mriOrId(o) + ", causeId: " + t + ", scheduledCallId: " + n),
                    this._navigateToConversation(o, t, k.NavigationConversationOrigin.SystemNotificationScheduledCall, s)
                }
            } else if (e.category === K.LocalNotificationIds.CHAT_CATEGORY_IDENTIFIER || e.category === K.LocalNotificationIds.E2EE_CATEGORY_IDENTIFIER) {
                const n = e.serviceSpecificData
                  , o = n ? n.conversationId : void 0
                  , r = n ? n.messageTimestamp : void 0
                  , a = n ? n.consumptionHorizon : void 0;
                switch (e.identifier) {
                case K.LocalNotificationIds.CHAT_ACTION_THUMBSUP_IDENTIFIER:
                    o && (u = B.sendRawMessage(o, "(y)"),
                    w.track(new O.MessagingToastQuickActionEvent(O.MessagingToastQuickAction.ThumbsUp,o)));
                    break;
                case K.LocalNotificationIds.CHAT_ACTION_REPLY_IDENTIFIER:
                    o && (e.textInputValue ? (u = this._sendRawMessage(o, e.textInputValue),
                    S = !0) : (d = k.AppEntryPoint.ChatNotification,
                    w.log(k.LogTraceArea.Notifications, "CHAT_ACTION_REPLY_IDENTIFIER, navigateToConversation " + $.mriOrId(o) + ", causeId: " + t),
                    this._navigateToConversation(o, t, k.NavigationConversationOrigin.SystemNotificationChatReply, r)));
                    break;
                case K.LocalNotificationIds.CHAT_ACTION_MARK_AS_READ_IDENTIFIER:
                    o && a && (w.track(new O.MessagingToastQuickActionEvent(O.MessagingToastQuickAction.MarkAsRead,o)),
                    f.setConsumptionHorizon(o, a));
                    break;
                case K.LocalNotificationIds.ACTION_DEFAULT:
                    if (o) {
                        d = k.AppEntryPoint.ChatNotification;
                        const s = null != (i = e.notificationFromBubble) && i;
                        n.eventType && w.track(new j.NotificationAppLaunched(n.eventType,o,s)),
                        w.log(k.LogTraceArea.Notifications, "CHAT_ACTION_DEFAULT, navigateToConversation " + $.mriOrId(o) + ", isFromBubble: " + s + ", causeId: " + t),
                        N.setIntent(N.Intent.Chat),
                        W.default.navigateToConversationOrScheduleNavigationOnLaunch({
                            convId: o,
                            scrollToTimestamp: r,
                            origin: k.NavigationConversationOrigin.SystemNotification,
                            causeId: t,
                            isFromConversationBubble: s
                        })
                    } else
                        N.setIntent(N.Intent.Recents);
                    break;
                case K.LocalNotificationIds.DELETE_IDENTIFIER:
                    w.log(k.LogTraceArea.Notifications, "CHAT_ACTION_DELETE, conversationId: " + (o || "") + ", causeId " + t);
                    break;
                default:
                    s = e.clearNotificationBubbleContext;
                    0
                }
                0
            } else if (e.category === K.LocalNotificationIds.INBOUND_VIDEO_CALL_IDENTIFIER) {
                const i = e.serviceSpecificData && e.serviceSpecificData.callId
                  , n = e.serviceSpecificData && e.serviceSpecificData.origin;
                o.isUndefined(i) || te.default.performAfterUIStarted(()=>{
                    y.default.trackIncomingVideoNotification(!0, i, n),
                    m.default.CallControlsStore.startVideo(i, t, !0)
                }
                )
            } else if (e.category === K.LocalNotificationIds.SCHEDULED_CALL_REMINDER || e.category === K.LocalNotificationIds.SCHEDULED_CALL_PREREMINDER || e.category === K.LocalNotificationIds.POLL_REMINDER || e.category === K.LocalNotificationIds.POLL_PREREMINDER) {
                c.App.getActivationState() !== c.Types.AppActivationState.Background || (N.setIntent(N.Intent.Chat),
                te.default.performAfterUIStarted(()=>{
                    const i = e.serviceSpecificData
                      , n = i ? i.conversationId : void 0
                      , o = i ? i.messageTimestamp : void 0;
                    if (n) {
                        const t = e.category === K.LocalNotificationIds.SCHEDULED_CALL_REMINDER || e.category === K.LocalNotificationIds.SCHEDULED_CALL_PREREMINDER ? k.NotificationTypeAppLaunched.ScheduledCallInvite : k.NotificationTypeAppLaunched.Poll;
                        w.track(new j.NotificationAppLaunched(t,n))
                    }
                    W.default.navigateToConversationOrScheduleNavigationOnLaunch({
                        convId: n,
                        scrollToTimestamp: o,
                        origin: k.NavigationConversationOrigin.SystemNotification,
                        causeId: t
                    })
                }
                ))
            } else if (e.category === K.LocalNotificationIds.AUTH_BACKGROUND_REFRESH_CATEGORY_IDENTIFIER)
                u = p.fireBackgroundRefreshTask();
            else if (e.category === K.LocalNotificationIds.PRESENCE_CHANGE_IDENTIFIER) {
                const i = e.serviceSpecificData
                  , n = i ? i.conversationId : void 0;
                n && (d = k.AppEntryPoint.ChatNotification,
                i.eventType && w.track(new j.NotificationAppLaunched(i.eventType,n)),
                w.track(new Q.PresenceChangeNotificationClicked),
                w.log(k.LogTraceArea.Notifications, "CHAT_ACTION_DEFAULT, navigateToConversation " + $.mriOrId(n) + ", causeId: " + t),
                N.setIntent(N.Intent.Chat),
                W.default.navigateToConversationOrScheduleNavigationOnLaunch({
                    convId: n,
                    origin: k.NavigationConversationOrigin.PresenceChangeNotification,
                    causeId: t
                }))
            }
            e.notificationProcessingId && (w.log(k.LogTraceArea.Notifications, "_handleLocalNotificationEventReceived with a promise: " + !!u),
            u ? u.always(t=>{
                w.log(k.LogTraceArea.Notifications, "_handleLocalNotificationEventReceived resolved or rejected. CMID: " + t),
                l.LocalNotifications.notificationProcessingCompleted(e.notificationProcessingId)
            }
            ) : l.LocalNotifications.notificationProcessingCompleted(e.notificationProcessingId)),
            d && E.trackEntryPoint(d),
            S || H.default.isUsingSplitViewNoSubscription() || window.focus(),
            e.wakeLockId && a.default.release(e.wakeLockId, "Notifications:quickreply")
        }
        _sendRawMessage(e, t) {
            return w.track(new O.MessagingToastQuickActionEvent(O.MessagingToastQuickAction.InlineReply,e)),
            B.sendRawMessage(e, t)
        }
        _navigateToConversation(e, t, i, n) {
            N.setIntent(N.Intent.Chat),
            W.default.navigateToConversationOrScheduleNavigationOnLaunch({
                convId: e,
                scrollToTimestamp: n,
                shouldAutoFocusInput: !0,
                origin: i,
                causeId: t
            })
        }
        _processMessageInfoForNotifications(e) {
            return this._startMessageNotificationsService().then(()=>R.default.processMessageInfoForNotifications(e))
        }
        _startMessageNotificationsService() {
            return oe.EnsureStartedOnly(R.default, [q.default, F.default])
        }
        _generateMissedCallMessageHelper(e, t, i, n) {
            t && v.isMri(t) || (t = e);
            const o = e=>e ? T.getDisplayableProfilePotentiallyBeforeStartupAsync(e) : u.Resolved(void 0);
            return u.all([o(e), o(t)]).then(([e,n])=>{
                const o = G.getNotificationIcon(e, n)
                  , s = e ? e.getDisplayName() : L.getString("Notifications.IncomingCallUnknownCaller");
                let r, a;
                if (!t || v.isOneOnOneConversation(t)) {
                    let e;
                    r = s,
                    e = t && v.isEncryptedThread(t) ? i ? "Notifications.MissedCallMessageEncryptedOneOnOnePermissionRejected" : "Notifications.MissedCallMessageEncryptedOneOnOne" : i ? "Notifications.MissedCallMessageOneOnOnePermissionRejected" : "Notifications.MissedCallMessageOneOnOne",
                    a = L.getString(e, {
                        caller: s,
                        emoji: P.getEmojiSupport()
                    })
                } else {
                    const e = n ? n.getDisplayName() : L.getString("Notifications.UnknownGroupConversation");
                    r = e,
                    a = L.getString(i ? "Notifications.MissedCallMessageGroupPermissionRejected" : "Notifications.MissedCallMessageGroup", {
                        caller: s,
                        group: e
                    })
                }
                return {
                    message: a,
                    title: r,
                    notificationIcon: o
                }
            }
            )
        }
        _shouldDisableCallNotification() {
            return le.isForceUpdateEnabled()
        }
        displayMissedP2PCallNotification(e, t) {
            return this._shouldDisableCallNotification() ? u.Resolved() : (w.log(k.LogTraceArea.Notifications, "displayMissedP2PCallNotification: Received P2P call for callId: " + e.callId + " callerMri:" + $.mriOrId(e.callerMri || "") + " conversationMri:  " + $.mriOrId(e.conversationMri || "") + " participantId: " + e.participantId + " causeId: " + t),
            this._generateMissedCallMessageHelper(e.callerMri, e.conversationMri, !1, t).then(t=>{
                l.LocalNotifications.show({
                    category: K.LocalNotificationIds.MISSED_P2P_CALL_CATEGORY_IDENTIFIER,
                    title: t.title,
                    message: t.message,
                    serviceSpecificData: K.prepareDataForNotification(e),
                    icon: t.notificationIcon,
                    id: e.participantId
                })
            }
            ))
        }
        displayMissedCallNotification(e, t) {
            return this._shouldDisableCallNotification() ? u.Resolved() : (w.log(k.LogTraceArea.Notifications, "displayMissedCallNotification: Received stop ring for " + e.callId + " with reason " + e.reason + " causeId: " + t),
            this.clearCallNotifications(e.callId, e.participantId),
            G.isCallerAllowed(e.callerMri, !1, t).then(i=>{
                if (i === k.PersonAllowed.Allowed)
                    return A.isDisabledCallNotification().then(i=>i ? (w.log(k.LogTraceArea.Notifications, "displayMissedCallNotification: DoNotDisturb Suppressing notification  callId: " + e.callId + " causeId: " + t),
                    u.Resolved()) : "NoAnswer" === e.reason || "NoAnswerCallerCancelled" === e.reason || "RejectedDueToNoMicPermission" === e.reason ? this._generateMissedCallMessageHelper(e.callerMri, e.conversationMri, "RejectedDueToNoMicPermission" === e.reason, t).then(t=>{
                        l.LocalNotifications.show({
                            category: K.LocalNotificationIds.MISSED_CALL_CATEGORY_IDENTIFIER,
                            title: t.title,
                            message: t.message,
                            serviceSpecificData: K.prepareDataForNotification(e),
                            icon: t.notificationIcon,
                            id: e.participantId
                        })
                    }
                    ) : void 0);
                w.log(k.LogTraceArea.Notifications, "displayMissedCallNotification: Suppressing notification for " + e.callId + " - caller " + $.mriOrId(e.callerMri) + " allowed: " + i + ", causeId: " + t)
            }
            ))
        }
        clearCallNotifications(e, t) {
            t && l.LocalNotifications.cancel({
                id: t
            }),
            l.LocalNotifications.cancel({
                id: e
            })
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(33);
    const n = i(1)
      , o = i(298)
      , s = i(169)
      , r = i(7)
      , a = (i(546),
    i(6))
      , l = i(2)
      , c = i(3)
      , d = i(511)
      , u = i(240)
      , g = i(21)
      , h = i(308)
      , p = i(830);
    t.default = new class {
        constructor() {
            g.RegisterStartupable(this, "LocalEngagementNotificationsService")
        }
        startup() {
            return d.default.initializeLocalNotifications().then(e=>e ? (this._applyConfigurationToLocalNotifications(),
            d.default.event_localEngagementNotificationQueueChanged.subscribe(()=>{
                c.log(l.LogTraceArea.Engagement, "localEngagementNotificationQueueChanged"),
                this._drainLocalEngagementNotificationQueue()
            }
            ),
            this._drainLocalEngagementNotificationQueue(),
            r.Resolved()) : (c.log(l.LogTraceArea.Engagement, "LocalEngagementNotificationsService: Push not granted. Not subscribing to NotificationQueueService"),
            r.Resolved()))
        }
        _drainLocalEngagementNotificationQueue() {
            n.each(d.default.fetchAndDrainLocalEngagementNotificationQueue(), e=>{
                c.log(l.LogTraceArea.Engagement, "_drainLocalEngagementNotificationQueue"),
                this._handleLocalEngagementNotificationEventReceived(e.notification, e.causeId)
            }
            )
        }
        _handleLocalEngagementNotificationEventReceived(e, t) {
            h.default.startedProcessingLocalNotification(e.category);
            let i = "Received local notification event: ";
            i = i + "(category:" + e.category + " identifier: " + e.identifier + ")",
            i = i + " causeId: " + t,
            c.log(l.LogTraceArea.Notifications, i),
            e.category !== p.TPUM_CATEGORY_IDENTIFIER && e.category !== u.LocalNotificationIds.SIGNIN_REMINDER_IDENTIFIER && e.category !== u.LocalNotificationIds.SIGNOUT_REMINDER_IDENTIFIER || (c.log(l.LogTraceArea.Engagement, "_handleLocalEngagementNotificationEventReceived"),
            p.default.handleTPUMNotificationEventReceived(e, t)),
            e.notificationProcessingId && s.LocalNotifications.notificationProcessingCompleted(e.notificationProcessingId),
            window.focus(),
            e.wakeLockId && o.default.release(e.wakeLockId, "Notifications:quickreply")
        }
        _applyConfigurationToLocalNotifications() {
            {
                const e = ()=>{
                    let e;
                    e = {
                        Web: {
                            MultiTabNotifications: a.default.getS4LMessagingFeatures().browserMultiTabNotifications
                        }
                    },
                    s.LocalNotifications.setConfig(e)
                }
                ;
                a.default.subscribe(e),
                e()
            }
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(833)
      , r = i(18)
      , a = i(39);
    class l extends a.TelemetryEventBase {
        getEventName() {
            return "caap_integration"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e = n.merge(e, this.getIntegrationActionAttributes()),
            e
        }
        getIntegrationActionAttributes() {
            return {
                Action: this.getActionName()
            }
        }
    }
    class c extends l {
        constructor(e, t) {
            super(),
            this._integration = e,
            this._integrationName = t
        }
        getActionName() {
            return "IntegrationLaunched"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Integration = this._integration,
            this._integrationName && (e.IntegrationName = this._integrationName),
            e
        }
    }
    t.IntegrationLaunchEvent = c;
    t.IntegrationClosedEvent = class extends l {
        constructor(e, t) {
            super(),
            this._integration = e,
            this._integrationName = t
        }
        getActionName() {
            return "IntegrationClosed"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Integration = this._integration,
            this._integrationName && (e.IntegrationName = this._integrationName),
            e
        }
    }
    ;
    t.WebIntegrationLaunchEvent = class extends c {
        constructor(e, t, i) {
            super(e, t),
            this._origin = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = o.BrowserOrigin[this._origin],
            e.IsNative = !1,
            e
        }
    }
    ;
    t.NativeIntegrationLaunchEvent = class extends c {
        constructor(e, t, i) {
            super(e, t),
            this._origin = i
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = s.AddinOrigin[this._origin],
            e.IsNative = !0,
            e
        }
    }
    ;
    class d extends l {
        constructor(e, t, i, n, o) {
            super(),
            this._integration = e,
            this._integrationName = t,
            this._urlLaunchedFromFindPanel = i,
            this._isFirstPage = n,
            this._pageLoadTimeInMs = o
        }
        getActionName() {
            return "IntegrationLoaded"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Integration = this._integration,
            this._integrationName && (e.IntegrationName = this._integrationName),
            e.IsUrlLaunchedFromFindPanel = this._urlLaunchedFromFindPanel,
            e.IsFirstPage = this._isFirstPage,
            e.PageLoadDuration = this._pageLoadTimeInMs,
            e
        }
    }
    t.IntegrationLoadEvent = d;
    t.WebIntegrationLoadEvent = class extends d {
        constructor(e, t, i, n, o, s) {
            super(e, t, i, n, o),
            this._origin = s
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = o.BrowserOrigin[this._origin],
            e.IsNative = !1,
            e
        }
    }
    ;
    t.NativeIntegrationLoadEvent = class extends d {
        constructor(e, t, i, n, o) {
            super(e, t, i, n, 0),
            this._origin = o
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Origin = s.AddinOrigin[this._origin],
            e.IsNative = !0,
            e
        }
    }
    ;
    t.IntegrationErrorEvent = class extends l {
        constructor(e, t, i, n, o, s) {
            super(),
            this._integration = e,
            this._integrationName = t,
            this._urlLaunchedFromFindPanel = i,
            this._origin = n,
            this._isFirstPage = o,
            this._errorCode = s
        }
        getActionName() {
            return "IntegrationError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Integration = this._integration,
            this._integrationName && (e.IntegrationName = this._integrationName),
            e.IsUrlLaunchedFromFindPanel = this._urlLaunchedFromFindPanel,
            e.Origin = o.BrowserOrigin[this._origin],
            e.IsFirstPage = this._isFirstPage,
            e.ErrorCode = this._errorCode,
            e
        }
    }
    ;
    class u extends l {
        constructor(e, t) {
            super(),
            this._integration = e,
            this._actionName = t
        }
        getEventName() {
            return "caap_" + this._integration
        }
        getAriaTenantTokenOverride() {
            return r.getAriaAddinTenantToken()
        }
        getIntegrationActionAttributes() {
            return n.merge({
                Integration: this._integration
            }, super.getIntegrationActionAttributes())
        }
        getActionName() {
            return this._actionName
        }
    }
    t.IntegrationActionTelemetryEvent = u;
    t.IntegrationStoreTelemetryEvent = class extends u {
        constructor(e, t, i, n, o, s) {
            super(e, "Store" + t),
            this._isSuccessful = i,
            this._latencyMs = n,
            this._errorCode = o,
            this._errorMsg = s
        }
        getIntegrationActionAttributes() {
            return n.merge({
                IsSuccessful: this._isSuccessful,
                LatencyDuration: this._latencyMs,
                ErrorCode: this._errorCode,
                "ErrorMessage:": this._errorMsg
            }, super.getIntegrationActionAttributes())
        }
    }
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(2)
      , r = i(39);
    var a;
    !function(e) {
        e[e.WebLauncher = 0] = "WebLauncher",
        e[e.InClient = 1] = "InClient",
        e[e.Campaign = 2] = "Campaign",
        e[e.ExternalOther = 3] = "ExternalOther",
        e[e.QRCode = 4] = "QRCode",
        e[e.Unknown = 5] = "Unknown"
    }(a = t.JoinLinkOrigin || (t.JoinLinkOrigin = {}));
    class l extends r.TelemetryEventBase {
        constructor(e) {
            super(),
            this.props = e
        }
        getEventName() {
            return "join_conversation"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getAction(),
            e.JoinLinkOrigin = a[this.props.joinLinkOrigin],
            e.PreSisu = this.props.preSisu,
            e.NavigationConversationOrigin = s.NavigationConversationOrigin[this.props.navigationConversationOrigin],
            o.isUndefined(this.props.browserOrigin) || (e.BrowserOrigin = s.BrowserOrigin[this.props.browserOrigin]),
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return e.ConversationId = {
                value: this.props.conversationId,
                piiKind: n.AWTPiiKind.Identity
            },
            e
        }
    }
    t.JoinGroupConversationEvent = class extends l {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "JoinGroupConversation"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ExistingMember = this.props.existingMember,
            e.IsMeetNowThread = this.props.isMeetNowThread,
            e
        }
    }
    ;
    t.JoinAddMemberToThreadErrorEvent = class extends l {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "AddMemberToThreadError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.StatusCode = this.props.statusCode,
            e.TimedOut = this.props.timedOut,
            o.isUndefined(this.props.statusText) || (e.StatusText = this.props.statusText),
            o.isUndefined(this.props.contextId) || (e.ContextId = this.props.contextId),
            o.isUndefined(this.props.date) || (e.Date = this.props.date),
            o.isUndefined(this.props.errorCode) || (e.ErrorCode = this.props.errorCode),
            o.isUndefined(this.props.errorMessage) || (e.ErrorMessage = this.props.errorMessage),
            e
        }
    }
    ;
    t.WaitForJoinedKnowledgeTimedOutEvent = class extends l {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "WaitForJoinedKnowledgeTimedOut"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.TimeoutDurationInMs = this.props.timeoutDurationInMs,
            e
        }
    }
    ;
    class c extends r.TelemetryEventBase {
        getEventName() {
            return "join_guest"
        }
        getLoggedOutSendingPolicy() {
            return r.TelemetryEventLoggedOutPolicy.SendNow
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getAction(),
            e
        }
    }
    class d extends c {
        constructor(e) {
            super(),
            this.props = e
        }
        getAction() {
            return "GuestCreationError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return o.isUndefined(this.props.requestId) || (e.RequestId = this.props.requestId),
            e.TimedOut = this.props.timedOut,
            e.StatusCode = this.props.statusCode,
            e.Url = this.props.url,
            e
        }
    }
    t.GuestCreationServiceErrorEvent = d;
    t.GuestCreationSuccessEvent = class extends c {
        getAction() {
            return "GuestCreationSuccess"
        }
    }
    ;
    t.GuestLoginAvailableEvent = class extends c {
        getAction() {
            return "GuestLoginAvailable"
        }
    }
    ;
    t.GuestLoginAttemptEvent = class extends c {
        getAction() {
            return "GuestLoginAttempt"
        }
    }
    ;
    t.GuestMeetingCreationServiceErrorEvent = class extends d {
        getAction() {
            return "GuestMeetingCreationServiceError"
        }
    }
    ;
    class u extends r.TelemetryEventBase {
        getEventName() {
            return "join_link_resolution"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getAction(),
            e
        }
    }
    t.JoinLinkResolutionErrorEvent = class extends u {
        constructor(e) {
            super(),
            this.props = e
        }
        getAction() {
            return "JoinLinkResolutionError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ResolutionError = this.props.resolutionError,
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return e.UriToResolve = {
                value: this.props.uriToResolve,
                piiKind: n.AWTPiiKind.Uri
            },
            e
        }
    }
    ;
    class g extends u {
        constructor(e) {
            super(),
            this.props = e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return e.ShortId = {
                value: this.props.shortId,
                piiKind: n.AWTPiiKind.Identity
            },
            this.props.convId && (e.ConversationId = {
                value: this.props.convId,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.ShortIdResolutionServiceSuccessEvent = class extends g {
        getAction() {
            return "ShortIdResolutionServiceSuccess"
        }
    }
    ;
    t.ShortIdResolutionServiceErrorEvent = class extends g {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "ShortIdResolutionServiceError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return o.isUndefined(this.props.requestId) || (e.RequestId = this.props.requestId),
            e.TimedOut = this.props.timedOut,
            e.StatusCode = this.props.statusCode,
            e
        }
    }
    ;
    class h extends r.TelemetryEventBase {
        getEventName() {
            return "join_link_retrieval"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getAction(),
            e
        }
    }
    class p extends h {
        constructor(e) {
            super(),
            this.props = e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes();
            return e.ConversationId = {
                value: this.props.conversationId,
                piiKind: n.AWTPiiKind.Identity
            },
            this.props.shortId && (e.ShortId = {
                value: this.props.shortId,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.JoinLinkRetrievalServiceSuccessEvent = class extends p {
        getAction() {
            return "JoinLinkRetrievalServiceSuccess"
        }
    }
    ;
    t.JoinLinkRetrievalServiceErrorEvent = class extends p {
        constructor(e) {
            super(e),
            this.props = e
        }
        getAction() {
            return "JoinLinkRetrievalServiceError"
        }
        getAttributes() {
            const e = super.getAttributes();
            return o.isUndefined(this.props.requestId) || (e.RequestId = this.props.requestId),
            e.IsTimedOut = this.props.timedOut,
            e.StatusCode = this.props.statusCode,
            e.Url = this.props.url,
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e.CreateMeetNow = "createmeetnow",
        e.JoinMeetNow = "joinmeetnow"
    }(t.UrlNavigationAction || (t.UrlNavigationAction = {}))
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(58)
      , s = i(592);
    i(1523);
    t.getFullScreenLoadingDialog = "getFullScreenLoadingDialog";
    t.FullScreenLoadingDialog = class {
        static show(e, t, i) {
            let r;
            r = n.createElement(s, {
                key: "appFullScreenDialog",
                statusText: e.dialogText,
                showSpinner: e.showActivityIndicator,
                showLoginFallback: !1,
                loginCallback: ()=>{}
                ,
                isMeetNow: !0
            }),
            o.default.showModal(r, e.dialogId, {
                rootViewId: t,
                useFocussedWindowFallback: i
            })
        }
        static dismiss(e, t) {
            o.default.dismissModal(e, t)
        }
        static isDisplayed(e, t) {
            return o.default.isModalDisplayed(e, t)
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(16)
      , r = i(2)
      , a = i(424)
      , l = i(39)
      , c = i(159);
    class d extends l.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._event = e,
            this._signedIn = t,
            this._notificationTime = i
        }
        getEventName() {
            return "all_notification"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                Action: this.getActionName(),
                EventType: this._event,
                EventTypeName: a.PNHEvents[this._event],
                SignedIn: this._signedIn,
                TimeToProcess: this._notificationTime ? this._eventCreationTime - this._notificationTime : -1
            })
        }
    }
    t.NotificationForIncorrectRecipientEvent = class extends d {
        getActionName() {
            return "IncorrectRecipient"
        }
    }
    ;
    t.NotificationNotProcessedEvent = class extends d {
        constructor(e, t, i, n) {
            super(e, t, i),
            this._nodeId = n
        }
        getActionName() {
            return "NotProcessed"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                NodeId: this._nodeId || ""
            })
        }
    }
    ;
    t.NotificationRawContentNotParsed = class extends d {
        constructor(e, t, i) {
            super(e, !0, t),
            this._isConsolidatedChatPush = i
        }
        getActionName() {
            return "RawContentNotParsed"
        }
        getAttributes() {
            return o.assign(super.getAttributes(), {
                IsConsolidatedChatPush: this._isConsolidatedChatPush
            })
        }
    }
    ;
    t.NotificationIgnoredAsDuplicate = class extends d {
        constructor(e, t) {
            super(e, !0, t)
        }
        getActionName() {
            return "IgnoredAsDuplicate"
        }
    }
    ;
    class u extends l.TelemetryEventBase {
        constructor(e, t, i=!1) {
            super(),
            this._type = e,
            this._conversationId = t,
            this._isFromBubbleNotification = i
        }
        getEventName() {
            return "all_notification_app_launched"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = "NotificationClicked",
            e.NotificationType = r.NotificationTypeAppLaunched[this._type],
            e.IsGroupConversation = s.isGroupConversation(this._conversationId),
            e.IsFromBubbleNotification = this._isFromBubbleNotification,
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = c.getTrackableConversationId(this._conversationId);
            return t && (e.ConversationId = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.NotificationAppLaunched = u
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        getEventName() {
            return "people_presence_change_notification"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Setting = this.getActionName(),
            e
        }
    }
    t.PresenceChangeNotificationToggleSetting = class extends o {
        constructor(e) {
            super(),
            this._didEnable = e
        }
        getActionName() {
            return "PresenceChangeNotificationToggled"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.DidEnable = this._didEnable,
            e
        }
    }
    ;
    t.PresenceChangeNotificationProcessed = class extends o {
        constructor(e) {
            super(),
            this._presenceChangeNotificationResult = e
        }
        getActionName() {
            return "PresenceChangeNotificationProcessed"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.PresenceChangeNotificationResult = this._presenceChangeNotificationResult,
            e
        }
    }
    ;
    t.PresenceChangeNotificationClicked = class extends o {
        getActionName() {
            return "PresenceChangeNotificationClicked"
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(31)
      , r = i(2667)
      , a = i(16)
      , l = i(286)
      , c = (i(28),
    i(2))
      , d = i(3)
      , u = i(2678)
      , g = i(4)
      , h = i(17)
      , p = i(459)
      , m = i(325)
      , S = i(704)
      , C = i(11)
      , y = i(9);
    t.default = new class {
        constructor() {
            this.showInvitePrompt = (e,t,i,n,s,a)=>{
                const h = y.newCauseId();
                d.log(c.LogTraceArea.Navigation, "CallOrInvitePrompt.showInvitePrompt causeId: " + h);
                const p = i || ""
                  , m = (s && s.length,
                a ? a.length : 0)
                  , S = ()=>e();
                if (1 === m)
                    return s && 0 === m ? this._inviteViaNativeShareSheet(n, t, S) : a && this._inviteViaEmail(a[0], p, n, t, S),
                    void l.default.close(t, h);
                const C = i=>{
                    d.log(c.LogTraceArea.CallNavigation, "CallOrInvitePrompt.onClose causeId: " + i),
                    this._closePrompt(e, t)
                }
                  , f = m
                  , _ = r.default.getMinimumMenuHeightForItems(f);
                l.default.showWithContent({
                    menuId: l.default.menuId(),
                    anchor: e,
                    rootViewId: t,
                    menuHeight: _,
                    content: o.createElement(u.default, {
                        contactName: p,
                        phoneNumbers: void 0,
                        emails: a,
                        inviteOrigin: n,
                        onInviteViaEmail: this._inviteViaEmail,
                        onInviteViaSms: this._inviteViaSms,
                        onCloseMenu: C,
                        anchor: S
                    }),
                    getTitle: ()=>g.getString("CallOrInviteMenu.InviteTitle", {
                        userDisplayName: p
                    }),
                    onCloseMenu: C
                }, h)
            }
            ,
            this.showSendSmsPrompt = (e,t,i,n,o,s)=>{
                let r;
                if (s) {
                    const i = g.getString("SMSMessaging.SendViaSkype", {
                        target: g.getString("SMSMessaging.SendViaSkypeStatic"),
                        chevron: ""
                    });
                    r = [{
                        title: i,
                        accessibilityLabel: i,
                        icon: C.SkypeIcon.Message,
                        onPress: ()=>{
                            this._closePrompt(e, t),
                            o(void 0)
                        }
                    }]
                }
                const a = {
                    rootViewId: t,
                    skypeMri: i,
                    onStartSMSConversation: (i,n)=>{
                        this._closePrompt(e, t, !0),
                        o(n)
                    }
                    ,
                    customButtons: r,
                    phones: n,
                    anchor: e,
                    suppressVideoOption: !0,
                    suppressInvite: !0,
                    suppressCalling: !0,
                    inviteOrigin: c.ContactInviteOrigin.Unknown,
                    popupTitleOverride: s ? g.getString("DetailsPanelHeader.SendMessageButtonTitle") : g.getString("SMSMessaging.ContactOptionsPopupSendSMSLabel"),
                    showGroupTitles: s,
                    callOrigin: c.NavigationCallOrigin.Unknown
                };
                this._showCallOrInvitePrompt(a)
            }
            ,
            this._closePrompt = (e,t,i=!1,n=!1)=>{
                const o = y.newCauseId();
                if (d.log(c.LogTraceArea.Navigation, "CallOrInvitePrompt._closePrompt causeId: " + o),
                i || m.default.clearNextFlowId(),
                l.default.close(t, o),
                !n) {
                    const t = e();
                    t && t.requestFocus && t.requestFocus()
                }
            }
            ,
            this._inviteViaEmail = (e,t,i,n,o)=>{
                p.default.initiateJoinLinkInvite({
                    target: new p.EmailInvite([e]),
                    origin: i,
                    showLoadingModalWhileGettingJoinLink: !0,
                    recipientName: t,
                    rootViewId: n,
                    anchor: o
                })
            }
            ,
            this._inviteViaSms = (e,t,i,n,o)=>{
                p.default.initiateJoinLinkInvite({
                    target: new p.SmsInvite(e),
                    origin: i,
                    showLoadingModalWhileGettingJoinLink: !0,
                    recipientName: t,
                    rootViewId: n,
                    anchor: o
                })
            }
            ,
            this._inviteViaNativeShareSheet = (e,t,i)=>{
                p.default.initiateJoinLinkInvite({
                    target: new p.ShareSheetInvite,
                    origin: e,
                    showLoadingModalWhileGettingJoinLink: !0,
                    rootViewId: t,
                    anchor: i
                })
            }
            ,
            this._startPstnCall = e=>{
                const t = y.newCauseId()
                  , i = a.sanitizeMri(e, a.Namespaces.PSTN);
                d.log(c.LogTraceArea.CallNavigation, "CallActionMenu._callNumber causeId: " + t),
                s.default.CallNavigationHelper.startCall({
                    conversationMri: i,
                    withVideo: !1,
                    origin: c.NavigationCallOrigin.CallOrInvitePrompt
                }, t)
            }
            ,
            this._startSmsConversation = (e,t)=>{
                const i = y.newCauseId();
                d.log(c.LogTraceArea.Navigation, "CallOrInvitePrompt._startSmsConversation causeId: " + i),
                h.navigateToConversation({
                    convId: e,
                    origin: c.NavigationConversationOrigin.CallOrInvitePrompt,
                    selectedNumberForSMS: a.isPhoneMri(e) ? void 0 : t,
                    causeId: i
                })
            }
        }
        showForSkypeMri(e, t, i, n, o, s, r, l, u, g, h, p, m) {
            if (i && a.isPhoneMri(i))
                return void d.error(c.LogTraceArea.CallNavigation, "CallingOptionsPopup: MRI passed can not be a phone number.");
            S.default.isPaidUser() || (p = !1);
            const C = {
                anchor: e,
                rootViewId: t,
                inviteOrigin: s,
                callOrigin: r,
                skypeMri: i,
                encryptedThreadId: n,
                onStartSkypeCall: l,
                suppressVideoOption: o,
                phones: h,
                onStartPstnCall: u,
                onStartSMSConversation: p ? this._startSmsConversation : void 0,
                onStartEncryptedCall: g,
                popupTitleOverride: m
            };
            this._showCallOrInvitePrompt(C)
        }
        showForPhoneNumber(e, t, i, n, o) {
            const s = {
                anchor: e,
                rootViewId: t,
                inviteOrigin: n,
                phones: i,
                onStartPstnCall: this._startPstnCall,
                suppressInvite: !0,
                callOrigin: c.NavigationCallOrigin.CallOrInvitePrompt,
                popupTitleOverride: o
            };
            this._showCallOrInvitePrompt(s)
        }
        showForAddressContact(e, t, i, o, s, r, a, l, c, d) {
            if (S.default.isPaidUser() || (c = !1),
            n.isEmpty(r))
                return void this.showInvitePrompt(e, t, i, o, void 0, a);
            const u = {
                anchor: e,
                rootViewId: t,
                inviteOrigin: o,
                callOrigin: s,
                phones: r,
                contactName: i,
                emails: a,
                suppressInvite: l,
                popupTitleOverride: d,
                suppressVideoOption: !0,
                onStartPstnCall: this._startPstnCall,
                onStartSMSConversation: c ? this._startSmsConversation : void 0
            };
            this._showCallOrInvitePrompt(u)
        }
        _showCallOrInvitePrompt(e) {
            const t = y.newCauseId();
            d.log(c.LogTraceArea.Navigation, "CallOrInvitePrompt._showCallOrInvitePrompt causeId: " + t);
            const i = ()=>this._closePrompt(e.anchor, e.rootViewId);
            let n;
            e.onStartSMSConversation && (n = (t,i)=>{
                this._closePrompt(e.anchor, e.rootViewId, !0),
                e.onStartSMSConversation && e.onStartSMSConversation(t, i)
            }
            );
            const a = {
                anchor: e.anchor,
                rootViewId: e.rootViewId,
                hasCameras: s.default.DeviceStore.hasCameras(),
                skypeToSkypeMri: e.skypeMri,
                encryptedThreadId: e.encryptedThreadId,
                suppressVideoOption: e.suppressVideoOption,
                phoneNumbers: e.phones,
                contactName: e.contactName,
                emails: e.emails,
                inviteOrigin: e.inviteOrigin,
                onStartSkypeCall: t=>{
                    this._closePrompt(e.anchor, e.rootViewId, !1, !0),
                    e.skypeMri ? e.onStartSkypeCall && e.onStartSkypeCall(e.skypeMri, t, e.callOrigin) : d.error(c.LogTraceArea.CallNavigation, "CallingOptionsPopup: We must have a Skype MRI to make a call.")
                }
                ,
                onStartPstnCall: (t,i)=>{
                    this._closePrompt(e.anchor, e.rootViewId, !1, !0),
                    e.onStartPstnCall && e.onStartPstnCall(t, i, e.callOrigin)
                }
                ,
                onStartEncryptedCall: t=>{
                    e.onStartEncryptedCall && e.onStartEncryptedCall(t)
                }
                ,
                onStartSmsConversation: n,
                onCloseMenu: i,
                onOpenInvitePrompt: this.showInvitePrompt,
                suppressInvite: e.suppressInvite,
                suppressCalling: e.suppressCalling,
                customButtons: e.customButtons,
                showGroupTitles: e.showGroupTitles
            }
              , u = o.createElement(r.default, Object.assign({}, a))
              , g = r.default.getMenuHeight(a);
            l.default.showWithContent({
                menuId: l.default.menuId(),
                anchor: e.anchor,
                rootViewId: e.rootViewId,
                menuHeight: g,
                content: u,
                onCloseMenu: i,
                getTitle: t=>e.popupTitleOverride && !t ? e.popupTitleOverride : void 0
            }, t)
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(143)
      , o = i(2)
      , s = i(3)
      , r = i(1111);
    let a = new class {
        showToolTip(e, t, i, a) {
            s.log(o.LogTraceArea.GenericUnsafe, "CustomToolTipUtils.showToolTip: " + a),
            n.default.measureLayoutRelativeToWindow(e).then(e=>{
                i() && r.default.setToolTipConfig({
                    rect: e,
                    displayText: a,
                    rootViewId: t
                })
            }
            , e=>{
                s.warn(o.LogTraceArea.GenericUnsafe, "CustomToolTipUtils.showToolTip, anchor not measured: " + e.toString())
            }
            )
        }
        clearToolTip() {
            s.log(o.LogTraceArea.GenericUnsafe, "CustomToolTipUtils.clearToolTip"),
            r.default.clearToolTipConfig()
        }
    }
    ;
    t.default = a
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(10)
      , r = i(38)
      , a = {
        displayText: "",
        rect: {
            x: 0,
            y: 0,
            height: 0,
            width: 0
        },
        rootViewId: s.MainRootViewId
    };
    let l = class extends o.StoreBase {
        constructor() {
            super(...arguments),
            this._toolTipConfig = a
        }
        getToolTipConfig(e) {
            return this._toolTipConfig.rootViewId === e ? this._toolTipConfig : a
        }
        setToolTipConfig(e) {
            r.default(this._toolTipConfig, e) || (this._toolTipConfig = e,
            this.trigger())
        }
        clearToolTipConfig() {
            this.setToolTipConfig(a)
        }
    }
    ;
    n.__decorate([o.autoSubscribe], l.prototype, "getToolTipConfig", null),
    l = n.__decorate([o.AutoSubscribeStore], l),
    t.default = new l
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(13)
      , r = i(54)
      , a = i(93)
      , l = i(492)
      , c = i(19)
      , d = i(25);
    class u extends s.ComponentBase {
        constructor() {
            super(...arguments),
            this._highlightedTextStyle = r.getTextColorStyleNoSubscription()
        }
        render() {
            const e = c.deburrLowerCase(this.props.displayText)
              , t = c.deburrLowerCase(this.props.textToHighlight);
            if ("" !== t && -1 !== e.indexOf(t)) {
                const [i,n,s] = this._getHighlightedText(e, t);
                return o.createElement(o.Text, {
                    style: this.props.containerStyles,
                    numberOfLines: 1,
                    importantForAccessibility: this.props.importantForAccessibility
                }, o.createElement(o.Text, {
                    selectable: this.props.selectable,
                    style: this.props.inlineTextStyle,
                    numberOfLines: 1
                }, i), o.createElement(o.Text, {
                    selectable: this.props.selectable,
                    style: [this.props.inlineTextStyle, this._highlightedTextStyle],
                    numberOfLines: 1
                }, n), o.createElement(o.Text, {
                    selectable: this.props.selectable,
                    style: this.props.inlineTextStyle,
                    numberOfLines: 1
                }, s))
            }
            let i = this.props.displayText;
            if (a.default.isPossiblyPhoneNumber(i) && a.default.isPossibleNumber(i)) {
                i = a.default.parseAndFormat(e, a.PhoneNumberFormat.INTERNATIONAL) || i
            }
            return o.createElement(o.Text, {
                style: this.props.containerStyles,
                numberOfLines: 1,
                selectable: this.props.selectable
            }, i ? i.split("\n", 1) : void 0)
        }
        _getHighlightedText(e, t) {
            if (n.startsWith(e, "+") && a.default.isPossibleNumber(e))
                return this._getHighlightedTextFromPhoneNumber(e, t);
            let i = 0;
            i = this.props.highlightType === d.TextToHighlightType.PhoneNumber ? e.indexOf(t) : l.findIndexOfQueryInName(e, t);
            const o = i + this.props.textToHighlight.length - 1;
            return [this.props.displayText.slice(0, i), this.props.displayText.slice(i, o + 1), this.props.displayText.slice(o + 1, this.props.displayText.length)]
        }
        _getHighlightedTextFromPhoneNumber(e, t) {
            const i = a.default.parseAndFormat(e, a.PhoneNumberFormat.INTERNATIONAL);
            if (!i)
                return [e, "", ""];
            let o = "([ \\-\\(\\)]?";
            n.each(t, e=>{
                "+" === e && (e = "\\+"),
                o += e + "[ \\-\\(\\)]?"
            }
            ),
            o += ")";
            const s = new RegExp(o).exec(i);
            if (!s)
                return [i, "", ""];
            const r = s.index
              , l = r + s[0].length;
            return [i.slice(0, r), i.slice(r, l), i.slice(l, i.length)]
        }
    }
    e.exports = u
}
, , , , function(e, t, i) {
    "use strict";
    const n = i(0);
    e.exports = class {
        constructor() {
            this._requireDoubleClick = !1
        }
        enableDoubleClick(e) {
            this._requireDoubleClick = e
        }
        onClick(e, t) {
            !this._requireDoubleClick || n.UserInterface.isNavigatingWithKeyboard() || this._isDoubleClick(e) ? (t(e),
            this._lastClickEventTimeStamp = void 0) : this._lastClickEventTimeStamp = this._getEventTimestamp(e)
        }
        _isDoubleClick(e) {
            if (!this._lastClickEventTimeStamp)
                return !1;
            return this._getEventTimestamp(e) - this._lastClickEventTimeStamp <= 500
        }
        _getEventTimestamp(e) {
            return e.timeStamp ? e.timeStamp.valueOf() : 0
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    var o, s, r;
    !function(e) {
        e[e.RecentConversations = 0] = "RecentConversations",
        e[e.Contacts = 1] = "Contacts",
        e[e.MessageStream = 2] = "MessageStream"
    }(o = t.DragOrigin || (t.DragOrigin = {})),
    function(e) {
        e[e.File = 0] = "File",
        e[e.Picture = 1] = "Picture",
        e[e.Video = 2] = "Video",
        e[e.Contact = 3] = "Contact"
    }(s = t.DragType || (t.DragType = {})),
    function(e) {
        e[e.DragStart = 0] = "DragStart"
    }(r = t.DragAction || (t.DragAction = {}));
    class a extends n.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._action = e,
            this._origin = t,
            this._type = i
        }
        getEventName() {
            return "messaging_drag_and_drop"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = r[this._action],
            e.Origin = o[this._origin],
            e.Type = s[this._type],
            e
        }
    }
    t.DragAndDropTelemetry = a
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(178)
      , s = i(1484)
      , r = i(0)
      , a = i(13)
      , l = i(6)
      , c = i(1078)
      , d = i(176)
      , u = i(389)
      , g = i(10)
      , h = i(143)
      , p = i(71)
      , m = i(2)
      , S = i(241)
      , C = i(40)
      , y = i(27)
      , f = i(3)
      , _ = i(277)
      , b = i(5)
      , v = i(4)
      , T = i(508)
      , P = i(127)
      , A = i(47)
      , k = i(19)
      , I = i(66)
      , w = i(8)
      , N = i(11)
      , M = i(397)
      , E = i(15)
      , x = i(578)
      , D = i(35)
      , L = i(9);
    var R, B;
    !function(e) {
        e[e.Loading = 0] = "Loading",
        e[e.Loaded = 1] = "Loaded",
        e[e.Failed = 2] = "Failed"
    }(R || (R = {})),
    function(e) {
        e[e.NotStarted = 0] = "NotStarted",
        e[e.Playing = 1] = "Playing",
        e[e.Paused = 2] = "Paused"
    }(B || (B = {}));
    const O = b.lazyProperties({
        controlsContainer: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            alignItems: "center",
            flexDirection: "row",
            justifyContent: "center"
        }),
        progressContainer: ()=>r.Styles.createViewStyle({
            flex: 1,
            flexDirection: "column",
            marginRight: 8,
            width: 196,
            marginTop: 10,
            marginBottom: 4
        }),
        loadingContainer: ()=>r.Styles.createViewStyle({
            backgroundColor: "transparent",
            position: "absolute",
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            justifyContent: "center",
            alignItems: "center"
        }),
        gestureView: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            flexDirection: "row",
            marginTop: 14
        }),
        progressTrack: ()=>r.Styles.createViewStyle({
            flex: 1,
            height: 4,
            borderRadius: 4,
            backgroundColor: w.Color.blackOverlay20
        }),
        progressBar: ()=>r.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            bottom: 0,
            width: 0,
            left: 0,
            height: 4,
            borderRadius: 4,
            backgroundColor: w.Color.gray400
        }),
        icon: ()=>r.Styles.createViewStyle({
            width: 48,
            height: 48
        }),
        fileName: ()=>r.Styles.createTextStyle({
            color: w.Color.gray400
        }),
        timer: ()=>r.Styles.createTextStyle({
            marginTop: 3
        }),
        playPauseIcon: ()=>r.Styles.createTextStyle({
            fontSize: N.IconSize.size24,
            paddingVertical: 12,
            paddingHorizontal: 12
        })
    });
    class F extends a.ComponentBase {
        constructor() {
            super(...arguments),
            this._progressBarAnimatedValue = new r.Animated.Value(0),
            this._progressBarAnimatedStyle = r.Styles.createAnimatedViewStyle({
                width: this._progressBarAnimatedValue
            }),
            this._attemptedTokenRefresh = !1,
            this._onProgressViewRef = e=>{
                this._progressView = e || void 0
            }
            ,
            this._onProgressBarTap = e=>{
                this._progressView && h.default.measureLayoutRelativeToWindow(()=>this._progressView).then(t=>{
                    if (this.isComponentMounted()) {
                        const i = e.pageX - t.x;
                        let n = this._progressBarWidth ? i / this._progressBarWidth : 0;
                        const o = this.state.duration || 0;
                        A.isMobileScreenReaderEnabled() && (n = 0),
                        n = Math.max(n, 0),
                        n = Math.min(n, 1),
                        this._progressBarAnimatedValue.setValue(n),
                        this._seekTo(n * o)
                    }
                }
                , e=>{
                    f.warn(m.LogTraceArea.AudioPlayer, "Progress bar component not measured: " + k.errorAsString(e))
                }
                )
            }
            ,
            this._onLayoutProgress = e=>{
                this._progressBarWidth = e.width,
                this._getProgressBarPosition()
            }
            ,
            this.onPausePlay = e=>{
                e && e.stopPropagation();
                const t = L.newCauseId();
                f.log(m.LogTraceArea.AudioPlayer, "onPausePlay causeId:", t),
                this.state.playbackState === B.Playing ? (this._queueToPlay = !1,
                this._pause(t),
                this.setState({
                    playbackState: B.Paused
                })) : (this.state.playbackState === B.NotStarted && this.props.message && f.track(new P.MessageContentClicked(this.props.message)),
                this.state.playerState !== R.Loaded ? (this._createPlayerIfNotExists(this.props.contentUrl),
                this._queueToPlay = !0,
                this._telemetryEvent = new _.FileReceived(this.props.contentUrl,void 0,M.default.extractExtensionForTelemetry(this.props.displayFilename)),
                this._telemetryEvent.startDownload(),
                this.setState({
                    playerState: R.Loading,
                    playbackState: B.Playing
                })) : this.setState({
                    playbackState: B.Playing
                }))
            }
        }
        _buildState(e, t) {
            const i = this.props
              , o = {
                isUploading: D.default.isFileOrBlob(e.contentUrl),
                isDurationEnabled: l.default.getS4LMessagingFeatures().enableAudioMessageDuration
            };
            if (t && (this._audioManagerClient = new u.default(u.AudioManagerSource.AudioPlayer),
            o.playbackState = B.NotStarted),
            t || e.contentUrl !== i.contentUrl && this.state && this.state.playbackState === B.NotStarted) {
                const t = L.newCauseId();
                f.log(m.LogTraceArea.AudioPlayer, "AudioNode.buildState side effect causeId: " + t),
                this._releaseAudioPlayer(t),
                this._attemptedTokenRefresh = !1,
                o.progressInSeconds = 0,
                o.duration = n.isUndefined(e.defaultDurationMs) ? void 0 : Math.round(e.defaultDurationMs / 1e3)
            }
            const s = T.getActivePlayerToken();
            return t || this._playerToken === s || this.state.playbackState !== B.Playing || (this._queueToPlay = !1,
            o.playbackState = B.Paused),
            o
        }
        componentDidMount() {
            super.componentDidMount(),
            d.checkIfSafeDomainToRender(this.props.contentUrl, this.props.origin),
            this._playerToken = T.registerAsPlayer()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            e.contentUrl !== this.props.contentUrl && d.checkIfSafeDomainToRender(this.props.contentUrl, this.props.origin);
            const s = L.newCauseId();
            if (f.log(m.LogTraceArea.AudioPlayer, "componentDidUpdate causeId:", s),
            this.state.playerState !== R.Loaded || this.state.playbackState !== B.Playing || this._audioManagerClient.hasToken())
                this.state.playbackState === B.Paused && this._pause(s);
            else {
                const e = A.isMobileScreenReaderEnabled() ? o.AudioModes.AudioPlaybackWithScreenReader : o.AudioModes.AudioPlayback;
                this._audioManagerClient.requestMode(e, s).then(e=>{
                    e && this.isComponentMounted() && this.state.playbackState === B.Playing && this._player && (n.isUndefined(this._playerToken) || T.setAsActive(this._playerToken),
                    this._player.play(this.props.autoloop, !0))
                }
                )
            }
            this._getProgressBarPosition()
        }
        componentWillUnmount() {
            super.componentWillUnmount();
            const e = L.newCauseId();
            f.log(m.LogTraceArea.AudioPlayer, "componentWillUnmount causeId:", e),
            this._releaseAudioPlayer(e)
        }
        _createPlayerIfNotExists(e) {
            this._player || this._createPlayer(e)
        }
        _createPlayer(e) {
            this._player = s.Audio.openFile(e, s.AudioPlayerSoundType.Media),
            this._player.progressEvent.subscribe(e=>{
                this.isComponentMounted() && n.isNumber(e.currentPosition) && e.currentPosition > 0 && this.state.duration && this.state.duration > 0 && this.setState({
                    progressInSeconds: e.currentPosition
                })
            }
            ),
            this._player.endedEvent.subscribe(()=>{
                const t = L.newCauseId();
                f.log(m.LogTraceArea.AudioPlayer, "playerEndedEvent causeId:", t),
                this._audioManagerClient.release(t),
                this.isComponentMounted() && (e !== this.props.contentUrl && this._releaseAudioPlayer(t),
                this.setState({
                    playbackState: B.NotStarted,
                    progressInSeconds: 0
                }))
            }
            ),
            this._player.loadedEvent.subscribe(e=>{
                if (this._telemetryEvent ? (this._telemetryEvent.setSuccess(!0),
                this._telemetryEvent.endDownload(),
                f.track(this._telemetryEvent),
                this._telemetryEvent = void 0) : f.log(m.LogTraceArea.AudioPlayer, "Audio playback telemetry was not sent"),
                this.isComponentMounted()) {
                    let t = B.NotStarted;
                    this._queueToPlay && (t = B.Playing),
                    this.setState({
                        playbackState: t,
                        duration: Math.ceil(e.duration),
                        playerState: R.Loaded
                    })
                }
            }
            ),
            this._player.errorEvent.subscribe(()=>{
                const t = L.newCauseId();
                f.log(m.LogTraceArea.AudioPlayer, "playerErrorEvent causeId:", t),
                this._player && !this._attemptedTokenRefresh ? (this._attemptedTokenRefresh = !0,
                c.attemptTokenRefresh(e).then(()=>{
                    this._player && (this._player.release(),
                    this._createPlayer(e))
                }
                , n.noop)) : (this._releaseAudioPlayer(t),
                this.isComponentMounted() && this.setState({
                    playerState: R.Failed
                }),
                this._telemetryEvent && (this._telemetryEvent.setSuccess(!1),
                this._telemetryEvent.endDownload(),
                f.track(this._telemetryEvent),
                this._telemetryEvent = void 0),
                f.error(m.LogTraceArea.AudioPlayer, "Audio playback failed to initialize."))
            }
            )
        }
        _releaseAudioPlayer(e) {
            f.log(m.LogTraceArea.AudioPlayer, "_releaseAudioPlayer causeId:", e),
            this._audioManagerClient.release(e),
            this._player && this._player.release(),
            this._player = void 0,
            this._queueToPlay = !1,
            this._telemetryEvent = void 0
        }
        render() {
            const e = this.props.playerStyles || {}
              , t = e.iconColor || w.Color.gray400
              , i = e.iconHoverColor || w.Color.gray200
              , n = [O.icon]
              , o = [O.progressContainer];
            e.progressContainerStyle && o.push(e.progressContainerStyle);
            const s = [O.progressTrack];
            e.progressTrackColor && s.push(r.Styles.createViewStyle({
                backgroundColor: e.progressTrackColor
            }, !1));
            const a = [O.progressBar, this._progressBarAnimatedStyle];
            e.progressBarColor && a.push(r.Styles.createViewStyle({
                backgroundColor: e.progressBarColor
            }, !1));
            const l = [O.timer];
            let c;
            e.timerColor && l.push(r.Styles.createTextStyle({
                color: e.timerColor
            }, !1)),
            c = e.fileNameColor ? r.Styles.createTextStyle({
                color: e.fileNameColor
            }, !1) : O.fileName;
            const d = p.getElapsedTimePartsFromS(this.state.progressInSeconds)
              , u = v.getString("AccessibilityLabel.NumberOfMinutesSecondsPlayed", {
                minuteCount: d.minutes,
                secondCount: d.seconds
            });
            let h, f, _;
            if (this.state.playerState === R.Failed)
                h = r.createElement(y.default, {
                    icon: N.SkypeIcon.Warning,
                    size: 48,
                    padding: 12,
                    color: t
                });
            else {
                const e = this.state.progressInSeconds ? u : "";
                let n;
                n = this.state.playbackState === B.Playing ? this.props.origin === m.AudioPlayerOrigin.SwiftCard ? v.getString("AccessibilityLabel.SwiftCardPauseButton") : v.getString("AccessibilityLabel.PauseButton") : this.props.origin === m.AudioPlayerOrigin.SwiftCard ? v.getString("AccessibilityLabel.SwiftCardPlayButton", {
                    timeElapsedLabel: e
                }) : v.getString("AccessibilityLabel.PlayButton", {
                    timeElapsedLabel: e
                }),
                h = r.createElement(C.default, {
                    size: 48,
                    color: t,
                    hoverColor: i,
                    icon: this.state.playbackState !== B.Playing ? N.SkypeIcon.Play : N.SkypeIcon.Pause,
                    onPress: this.onPausePlay,
                    iconTextStyle: O.playPauseIcon,
                    title: n,
                    accessibilityLabel: n
                })
            }
            if (this.state.playerState === R.Loading ? f = r.createElement(r.View, {
                style: O.loadingContainer
            }, r.createElement(I.default, {
                size: g.SXActivityIndicatorSize.Medium,
                tintColor: t
            })) : this.state.isUploading && (f = r.createElement(x, {
                contentUrls: [this.props.contentUrl],
                strokeColor: t,
                size: 36
            })),
            h = r.createElement(r.View, {
                style: n
            }, f, h),
            this.props.renderInformationOnstop && this.state.playbackState !== B.Playing)
                _ = r.createElement(r.View, {
                    style: o
                }, r.createElement(E.BodyText, {
                    style: c,
                    numberOfLines: 1,
                    ellipsizeMode: "middle",
                    disableThemeSubscription: !0
                }, this.props.displayFilename), r.createElement(E.Caption, {
                    style: l
                }, S.default.formatFileSize(this.props.fileSizeInBytes || 0, 1).formattedString));
            else {
                const e = this.state.playerState === R.Failed ? v.getString("ConfirmationDialog.ReportFailMessage") : this.state.playbackState !== B.Playing ? v.getString("AccessibilityLabel.SeekToStart") : v.getString("AccessibilityLabel.ReplayButton");
                let t, i = this.state.progressInSeconds;
                if (this.state.isDurationEnabled) {
                    const e = this.state.duration || 0;
                    i = this.state.playbackState === B.NotStarted ? e : this.state.progressInSeconds
                }
                t = p.getElapsedTimeStringFromS(i),
                _ = r.createElement(r.View, {
                    style: o
                }, r.createElement(r.GestureView, {
                    ref: this._onProgressViewRef,
                    style: O.gestureView,
                    onTap: this._onProgressBarTap,
                    mouseOverCursor: r.Types.GestureMouseCursor.Pointer,
                    accessibilityLabel: e,
                    accessibilityTraits: r.Types.AccessibilityTrait.Button,
                    importantForAccessibility: void 0
                }, r.createElement(r.View, {
                    style: s,
                    onLayout: this._onLayoutProgress
                }), r.createElement(r.Animated.View, {
                    style: a
                })), r.createElement(r.View, {
                    accessibilityLabel: u
                }, r.createElement(r.Text, {
                    style: l,
                    importantForAccessibility: r.Types.ImportantForAccessibility.No
                }, t)))
            }
            return r.createElement(r.View, {
                style: [O.controlsContainer, this.props.style],
                importantForAccessibility: this.props.importantForAccessibility
            }, h, _)
        }
        _pause(e) {
            f.log(m.LogTraceArea.AudioPlayer, "_pause causeId:", e),
            this._player && this._player.pause(),
            this._audioManagerClient.release(e)
        }
        _seekTo(e) {
            this.state.playerState !== R.Failed && this._player && this._player.seek(e)
        }
        _getProgressBarPosition() {
            const e = this.state.progressInSeconds && this.state.duration ? Math.min(this.state.progressInSeconds / this.state.duration, 1) : 0;
            this._progressBarAnimatedValue.setValue(e * (this._progressBarWidth || 0))
        }
    }
    t.default = F,
    F.MediaType = "Audio"
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(46)
      , o = i(2)
      , s = i(3)
      , r = i(371)
      , a = i(55)
      , l = i(106)
      , c = i(269)
      , d = i(129)
      , u = i(29);
    var g;
    !function(e) {
        e[e.GalleryOpened = 0] = "GalleryOpened",
        e[e.GalleryClosed = 1] = "GalleryClosed",
        e[e.ConversationChanged = 2] = "ConversationChanged",
        e[e.ChangedView = 3] = "ChangedView",
        e[e.ItemAdded = 4] = "ItemAdded",
        e[e.ItemViewed = 5] = "ItemViewed",
        e[e.ItemForwarded = 6] = "ItemForwarded",
        e[e.ItemRemoved = 7] = "ItemRemoved",
        e[e.ViewedItemInChat = 8] = "ViewedItemInChat",
        e[e.ItemSaved = 9] = "ItemSaved",
        e[e.ItemCopied = 10] = "ItemCopied",
        e[e.LinkCopied = 11] = "LinkCopied",
        e[e.ItemReported = 12] = "ItemReported",
        e[e.TimedOut = 13] = "TimedOut",
        e[e.Unknown = 14] = "Unknown"
    }(g = t.GalleryScenarioStep || (t.GalleryScenarioStep = {}));
    class h {
        constructor() {
            this._scenarioCompleted = !1,
            this._scenarioTimedOut = !1,
            this._onGalleryOpenTimeout = ()=>{
                if (this._scenarioCompleted)
                    return;
                const e = {
                    cause: g[g.TimedOut]
                };
                this._scenario.finish(e),
                this._scenarioCompleted = !0,
                this._scenarioTimedOut = !0
            }
            ,
            this._startNewScenario(g.GalleryOpened)
        }
        static getInstance(e=!1) {
            return !e && this._instance || (this._instance = new h),
            this._instance
        }
        static destroyInstance() {
            this._instance = void 0
        }
        _startNewScenario(e) {
            this._scenarioTimedOut = !1,
            this._scenarioCompleted = !1;
            const t = {
                cause: g[e]
            };
            this._scenario = new d.default(l.ScenarioName.Gallery),
            this._scenario.start(t),
            this._resetTimeoutTimer()
        }
        _resetTimeoutTimer() {
            this._timeoutTimerId && (u.clearTimeout(this._timeoutTimerId),
            this._timeoutTimerId = void 0),
            this._timeoutTimerId = u.setTimeout(this._onGalleryOpenTimeout, 12e4)
        }
        markStep(e, t) {
            if (this._scenarioTimedOut && this._startNewScenario(g.TimedOut),
            !this._scenarioCompleted)
                if (e === g.GalleryClosed || e === g.ConversationChanged) {
                    const t = {
                        cause: g[e]
                    };
                    this._scenario.finish(t),
                    this._scenarioCompleted = !0,
                    this._timeoutTimerId && (u.clearTimeout(this._timeoutTimerId),
                    this._timeoutTimerId = void 0)
                } else {
                    const i = g[e];
                    this._scenario.isStepMarked(i) || this._scenario.markStepCompleted(i, t),
                    this._resetTimeoutTimer()
                }
        }
        markChangedViewMode(e) {
            const t = {
                changedToViewMode: a.GalleryViewMode[e]
            };
            this.markStep(g.ChangedView, t)
        }
        markItemViewed(e) {
            const t = {
                itemType: this._getItemType(e)
            };
            this.markStep(g.ItemViewed, t)
        }
        markStreamItemCommandSelected(e, t) {
            const i = {
                itemType: this._getItemType(e)
            };
            this.markStep(this._convertCommandToStep(t), i)
        }
        _getItemType(e) {
            return r.default.isMediaItem(e) ? a.GalleryViewMode[a.GalleryViewMode.Media] : this._isLinkItem(e) ? a.GalleryViewMode[a.GalleryViewMode.Links] : this._isFileItem(e) ? a.GalleryViewMode[a.GalleryViewMode.Files] : e.messagetype
        }
        _isLinkItem(e) {
            return n.getMessageTypeGroup(e) === n.MessageTypeGroups.SwiftCard || e.messagetype === n.MessageTypes.UriObject || e.hasUrlPreviewMetadata()
        }
        _isFileItem(e) {
            return n.getMessageTypeGroup(e) === n.MessageTypeGroups.UriFile
        }
        _convertCommandToStep(e) {
            switch (e) {
            case c.CommandTypes.Forward:
                return g.ItemForwarded;
            case c.CommandTypes.Remove:
                return g.ItemRemoved;
            case c.CommandTypes.ViewInChat:
                return g.ViewedItemInChat;
            case c.CommandTypes.SaveAsFile:
            case c.CommandTypes.SaveAsMedia:
            case c.CommandTypes.SaveMedia:
                return g.ItemSaved;
            case c.CommandTypes.Copy:
            case c.CommandTypes.CopyImage:
                return g.ItemCopied;
            case c.CommandTypes.CopyLink:
                return g.LinkCopied;
            case c.CommandTypes.OpenFileLocation:
            case c.CommandTypes.OpenMediaLocation:
                return g.ItemViewed;
            case c.CommandTypes.Report:
                return g.ItemReported;
            default:
                return s.warn(o.LogTraceArea.GenericUnsafe, "Unsupported command passed to the gallery telemetry scenario: " + c.CommandTypes[e]),
                g.Unknown
            }
        }
    }
    t.GalleryTelemetryScenario = h
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(2707)
      , r = i(102)
      , a = i(6)
      , l = i(153)
      , c = i(16)
      , d = i(69)
      , u = i(43)
      , g = i(2)
      , h = i(3)
      , p = i(5)
      , m = i(4)
      , S = i(17)
      , C = i(22)
      , y = i(24)
      , f = i(162)
      , _ = i(8)
      , b = i(23)
      , v = i(504)
      , T = i(9);
    var P;
    !function(e) {
        e[e.ContactRequest = 0] = "ContactRequest",
        e[e.DeleteContact = 1] = "DeleteContact",
        e[e.BlockContact = 2] = "BlockContact",
        e[e.Message = 3] = "Message",
        e[e.PictureMessage = 4] = "PictureMessage",
        e[e.VideoMessage = 5] = "VideoMessage",
        e[e.AudioMessage = 6] = "AudioMessage",
        e[e.FileMessage = 7] = "FileMessage",
        e[e.Profile = 8] = "Profile",
        e[e.SearchReportContextListOptions = 9] = "SearchReportContextListOptions",
        e[e.ProfilePicture = 10] = "ProfilePicture"
    }(P = t.ReportContextListOptions || (t.ReportContextListOptions = {}));
    const A = s.ReportReasonCodes.spam
      , k = p.lazyProperties({
        contentContainer: ()=>o.Styles.createViewStyle({
            justifyContent: "center",
            paddingBottom: 20
        }),
        contentContainerMobile: ()=>o.Styles.createViewStyle({
            width: 300
        }),
        contentContainerSmall: ()=>o.Styles.createViewStyle({
            width: 260
        }),
        checkBoxContainer: ()=>o.Styles.createViewStyle({
            paddingVertical: 16
        }),
        reportReasonText: ()=>o.Styles.createTextStyle({
            flex: -1,
            paddingRight: 10,
            color: _.Color.white
        }),
        selectReasonText: ()=>o.Styles.createTextStyle({
            alignSelf: "center",
            marginBottom: 16,
            font: b.font.uiDisplayBold,
            color: _.Color.white
        }),
        reportContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            alignSelf: "stretch"
        })
    });
    class I extends u.default {
        constructor() {
            super(...arguments),
            this._onPress = e=>{
                this.setState({
                    selectedReason: e
                })
            }
            ,
            this._report = ()=>{
                switch (this.props.reportContext) {
                case P.Message:
                case P.PictureMessage:
                case P.AudioMessage:
                case P.FileMessage:
                case P.VideoMessage:
                    this._reportMessage();
                    break;
                case P.ProfilePicture:
                    this._reportAbuse()
                }
            }
            ,
            this._onToggleBlockContact = (e,t)=>{
                this.setState({
                    blockContact: t
                })
            }
        }
        _buildState(e, t) {
            const i = C.default.isUsingStackNavigationContext();
            let n = {
                isUsingStackNavigationContext: i,
                isSmallDevice: i && y.default.isSmallDevice(this._getRootViewId())
            };
            return t && (n.isAgent = c.isAgent(e.mriToBlock),
            n.blockContact = e.defaultBlockContactState,
            n.selectedReason = A),
            n
        }
        render() {
            const e = [{
                text: m.getString("Global.CancelLabel"),
                isCancel: !0
            }, {
                text: m.getString("ConfirmationDialog.ReportLabel"),
                onPress: this._report,
                isSubmit: !0
            }]
              , t = [k.contentContainer];
            this.state.isUsingStackNavigationContext && t.push(this.state.isSmallDevice ? k.contentContainerSmall : k.contentContainerMobile);
            const i = this._getReportDialogConfirmationTitle();
            return o.createElement(f.SimpleDialog, {
                dialogId: "report",
                text: i,
                buttons: e,
                closeOnClickOutside: !0,
                accessibilityLabel: i
            }, o.createElement(o.View, {
                style: t
            }, this._getBlockContactToggle(), this._getBlockReasons()))
        }
        _getBlockContactToggle() {
            const e = this.state.isAgent ? m.getString("BlockUnblockDialog.ReportAbuseTitleForBot") : m.getString("UserProfilePanel.BlockContactConfirmationContent");
            return o.createElement(r, {
                style: k.reportContainer,
                isOn: this.state.blockContact,
                accessibilityLabel: e,
                onChange: this._onToggleBlockContact
            }, o.createElement(o.Text, {
                style: k.reportReasonText
            }, e))
        }
        _getBlockReasons() {
            const e = n.map(s.ReportReasonCodes, e=>o.createElement(s.default, {
                reason: e,
                isSelected: this.state.selectedReason === e,
                onPress: this._onPress,
                key: e + "button"
            }));
            return o.createElement(o.View, {
                style: k.checkBoxContainer
            }, o.createElement(o.Text, {
                style: k.selectReasonText
            }, m.getString("BlockUnblockDialog.SelectReasonText")), e)
        }
        _reportAbuse() {
            const e = T.newCauseId();
            h.log(g.LogTraceArea.Navigation, "ReportDialog._reportAbuse, causeId: " + e);
            let t = this._getReportContextOptionValue(this.props.reportContext);
            d.default.reportAbuse(this.props.mriToBlock, this.state.selectedReason, !!this.state.blockContact, t).then(()=>{
                v.default.scheduleTextMessage(m.getString("ConfirmationDialog.ReportSuccessMessage")),
                this.state.blockContact && S.navigateAfterBlock(this.props.mriToBlock, e, void 0)
            }
            ).catch(()=>{
                v.default.scheduleTextMessage(m.getString("ConfirmationDialog.ReportFailMessage"))
            }
            )
        }
        _reportMessage() {
            const e = T.newCauseId();
            h.log(g.LogTraceArea.Navigation, "ReportDialog._reportMessage, causeId: " + e);
            let t = this._getReportContextOptionValue(this.props.reportContext);
            if (!this.props.content)
                return;
            const i = this.props.content;
            d.default.reportMessage(this.props.mriToBlock, this.state.selectedReason, !!this.state.blockContact, this.props.content, t).then(()=>{
                a.default.getS4LMessagingFeatures().hideReportedMessages && l.markMessageReported(i, !0),
                v.default.scheduleTextMessage(m.getString("ConfirmationDialog.ReportSuccessMessage")),
                this.state.blockContact && S.navigateAfterBlock(this.props.mriToBlock, e, void 0)
            }
            ).catch(()=>{
                v.default.scheduleTextMessage(m.getString("ConfirmationDialog.ReportFailMessage"))
            }
            )
        }
        _getReportDialogConfirmationTitle() {
            switch (this.state.isAgent && m.getString("BlockUnblockDialog.BlockBotConfirmationContent"),
            this.props.reportContext) {
            case P.Message:
                return m.getString("BlockUnblockDialog.ReportMessageDialogTitle");
            case P.PictureMessage:
                return m.getString("BlockUnblockDialog.ReportPictureDialogTitle");
            case P.AudioMessage:
                return m.getString("BlockUnblockDialog.ReportAudioDialogTitle");
            case P.VideoMessage:
                return m.getString("BlockUnblockDialog.ReportVideoDialogTitle");
            case P.FileMessage:
                return m.getString("BlockUnblockDialog.ReportFileDialogTitle");
            default:
                return m.getString("UserProfilePanel.BlockContactConfirmationContent")
            }
        }
        _getReportContextOptionValue(e) {
            switch (e) {
            case P.Message:
            case P.PictureMessage:
            case P.AudioMessage:
            case P.VideoMessage:
            case P.FileMessage:
                return "message";
            case P.ProfilePicture:
                return "profile_image";
            default:
                return ""
            }
        }
    }
    t.default = I
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(86)
      , s = i(0)
      , r = i(13)
      , a = i(5)
      , l = i(8);
    var c;
    !function(e) {
        e[e.Filled = 0] = "Filled",
        e[e.Unfilled = 1] = "Unfilled"
    }(c = t.PageIndicatorFillStyle || (t.PageIndicatorFillStyle = {}));
    const d = a.lazyProperties({
        parentContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center"
        }),
        containerReversed: ()=>s.Styles.createViewStyle({
            flexDirection: "row-reverse"
        }),
        indicatorDot: ()=>s.Styles.createViewStyle({
            width: 16,
            height: 16,
            borderRadius: 8,
            marginHorizontal: 3,
            backgroundColor: l.Color.white
        }),
        unfilledIndicatorStyle: ()=>s.Styles.createViewStyle({
            backgroundColor: "transparent",
            borderColor: "white",
            borderWidth: 1.5
        })
    });
    class u extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._indicatorsAnimateLeftValue = new s.Animated.Value(0),
            this._indicatorsAnimateStyle = s.Styles.createAnimatedViewStyle({
                transform: [{
                    translateX: this._indicatorsAnimateLeftValue
                }]
            }),
            this._indicatorsAnimateRightValue = new s.Animated.Value(0),
            this._indicatorsAnimateRTLStyle = s.Styles.createAnimatedViewStyle({
                right: this._indicatorsAnimateRightValue
            })
        }
        _buildState(e, t) {
            let i = {
                currentPage: e.currentPage
            };
            const o = e.indicatorDotSize ? e.indicatorDotSize : 16
              , r = e.indicatorMargin ? e.indicatorMargin : 3;
            e.indicatorDotSize || e.indicatorMargin ? (i.indicatorStyle = s.Styles.createViewStyle({
                width: o,
                height: o,
                borderRadius: o / 2,
                marginHorizontal: r,
                backgroundColor: e.indicatorColor || l.Color.white
            }, !1),
            i.selectedIndicatorStyle = s.Styles.createViewStyle({
                width: o,
                height: o,
                borderRadius: o / 2,
                marginHorizontal: r,
                backgroundColor: e.selectedIndicatorColor || l.Color.white
            }, !1)) : (i.indicatorStyle = d.indicatorDot,
            i.selectedIndicatorStyle = d.indicatorDot,
            e.indicatorColor && (i.indicatorStyle = [i.indicatorStyle, s.Styles.createViewStyle({
                backgroundColor: e.indicatorColor
            }, !1)]),
            e.selectedIndicatorColor && (i.selectedIndicatorStyle = [i.selectedIndicatorStyle, s.Styles.createViewStyle({
                backgroundColor: e.selectedIndicatorColor
            }, !1)]));
            const a = n.size(e.pages);
            if (e.maxIndicators && e.maxIndicators < a) {
                const n = o + 2 * r;
                i.innerContainerStyle = s.Styles.createViewStyle({
                    flexDirection: "row",
                    maxWidth: e.maxIndicators * n,
                    backgroundColor: l.Color.transparent
                }, !1);
                const c = this.props
                  , d = this.state;
                if (t)
                    i.indicatorStartIndex = e.currentPage - Math.ceil(e.maxIndicators / 2),
                    i.indicatorStartIndex < 0 ? i.indicatorStartIndex = 0 : i.indicatorStartIndex + e.maxIndicators >= a && (i.indicatorStartIndex = a - e.maxIndicators),
                    this._scrollIndicators(!1, e, i.indicatorStartIndex);
                else if (c.currentPage !== e.currentPage) {
                    const t = d.indicatorStartIndex || 0
                      , n = c.maxIndicators || e.maxIndicators;
                    if (e.currentPage === d.indicatorStartIndex || e.currentPage === t + n - 1)
                        c.currentPage < e.currentPage && t + n < a ? i.indicatorStartIndex = t + 1 : c.currentPage > e.currentPage && t > 0 && (i.indicatorStartIndex = t - 1);
                    else if (e.currentPage < t || e.currentPage > t + n) {
                        const t = a - e.maxIndicators;
                        i.indicatorStartIndex = Math.min(e.currentPage, t)
                    }
                }
            } else
                i.innerContainerStyle = void 0;
            return i
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this.state.indicatorStartIndex !== t.indicatorStartIndex && this._scrollIndicators(!0, e, t.indicatorStartIndex || 0)
        }
        _scrollIndicators(e, t, i) {
            const s = t.indicatorMargin || 3
              , r = t.indicatorDotSize || 16
              , a = t.maxIndicators || 10
              , l = r + 2 * s
              , c = i > 0 ? -1 * i * l : 0;
            if (t.reverseOrder) {
                const i = n.size(t.pages) - a * l;
                e ? o.timing.easeOut({
                    value: this._indicatorsAnimateRightValue,
                    toValue: c + i,
                    duration: o.timing.Duration.Tiny
                }).start() : this._indicatorsAnimateRightValue.setValue(c + i)
            } else
                e ? o.timing.easeOut({
                    value: this._indicatorsAnimateLeftValue,
                    toValue: c,
                    duration: o.timing.Duration.Tiny,
                    useNativeDriver: !0
                }).start() : this._indicatorsAnimateLeftValue.setValue(c)
        }
        _renderIndicator(e, t) {
            let i = t === this.state.currentPage;
            return s.createElement(g, {
                key: e.uid,
                index: t,
                selected: i,
                minOpacity: e.minOpacity ? e.minOpacity : .7,
                minIndicatorScale: this.props.minIndicatorScale,
                indicatorStyle: i ? this.state.selectedIndicatorStyle : this.state.indicatorStyle,
                indicatorFillStyle: e.indicatorFillStyle
            })
        }
        updateCurrentPage(e) {
            this.isComponentMounted() && e !== this.state.currentPage && this.setState({
                currentPage: e
            })
        }
        render() {
            const e = [];
            n.each(this.props.pages, (t,i)=>{
                e.push(this._renderIndicator(t, i))
            }
            );
            let t = [this.props.style];
            if (t.push(d.parentContainer),
            this.props.reverseOrder && !this.state.innerContainerStyle && t.push(d.containerReversed),
            this.state.innerContainerStyle) {
                let i = this.props.reverseOrder ? [this._indicatorsAnimateRTLStyle] : [this._indicatorsAnimateStyle];
                return s.createElement(s.View, {
                    style: t,
                    blockPointerEvents: this.props.blockPointerEvents,
                    ignorePointerEvents: this.props.ignorePointerEvents
                }, s.createElement(s.View, {
                    style: this.state.innerContainerStyle
                }, s.createElement(s.Animated.View, {
                    style: [i, t]
                }, e)))
            }
            return s.createElement(s.View, {
                style: t,
                blockPointerEvents: this.props.blockPointerEvents,
                ignorePointerEvents: this.props.ignorePointerEvents
            }, e)
        }
    }
    t.PageIndicator = u;
    class g extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._scaleAnimatedValue = new s.Animated.Value(.4),
            this._opacityValue = new s.Animated.Value(this.props.minOpacity),
            this._scaleAnimatedStyle = s.Styles.createAnimatedViewStyle({
                transform: [{
                    scale: this._scaleAnimatedValue
                }],
                opacity: this._opacityValue
            })
        }
        componentDidMount() {
            super.componentDidMount(),
            this._updateIndicator(!1)
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.props.selected === e.selected && this.props.minOpacity === e.minOpacity || this._updateIndicator(!0)
        }
        _updateIndicator(e) {
            const t = this.props.selected ? 1 : this.props.minIndicatorScale || .4
              , i = this.props.selected ? 1 : this.props.minOpacity;
            e ? o.parallel([o.timing.easeOut({
                value: this._scaleAnimatedValue,
                toValue: t,
                duration: o.timing.Duration.Tiny,
                useNativeDriver: !0
            }), o.timing.easeOut({
                value: this._opacityValue,
                toValue: i,
                duration: o.timing.Duration.Tiny,
                useNativeDriver: !0
            })]).start() : (this._scaleAnimatedValue.setValue(t),
            this._opacityValue.setValue(i))
        }
        render() {
            const e = [];
            return this.props.indicatorStyle && e.push(this.props.indicatorStyle),
            this.props.indicatorFillStyle === c.Unfilled && e.push(d.unfilledIndicatorStyle),
            e.push(this._scaleAnimatedStyle),
            s.createElement(s.Animated.View, {
                style: e
            })
        }
    }
    t.default = u
}
, , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(1146)
      , s = i(224)
      , r = i(17)
      , a = i(180)
      , l = i(9);
    function c(e) {
        return s.isAddressBookEnabled() && e
    }
    t.shouldRunLandingExperiment = c,
    t.runLandingExperiment = function(e, t) {
        switch (e) {
        case a.HubToShowAfterFinishedOnboarding.Recents:
            r.navigateToRecentsTab();
            break;
        case a.HubToShowAfterFinishedOnboarding.Calls:
            r.navigateToCallsTab();
            break;
        case a.HubToShowAfterFinishedOnboarding.People:
            r.navigateToPeopleTab();
            break;
        case a.HubToShowAfterFinishedOnboarding.Dial:
            r.navigateToCallsTab(),
            r.navigateToPSTNDialerWithParams({
                causeId: t,
                navigationSource: n.DialerNavigationSource.DeepLink
            }, void 0);
            break;
        default:
            l.switchStatementExhaustiveChecking(e),
            r.navigateToRecentsTab()
        }
    }
    ,
    t.shouldRunPeopleTabsExperiment = function(e, t) {
        return c(e) && t === a.HubToShowAfterFinishedOnboarding.People
    }
    ,
    t.shouldRunUserIconExperiment = function(e, t) {
        return e.centerControl === o.HeaderButtonType.Title && t
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Action = 0] = "Action",
        e[e.Notifications = 1] = "Notifications",
        e[e.NotificationsSettings = 2] = "NotificationsSettings",
        e[e.RecentsFilter = 3] = "RecentsFilter",
        e[e.Feedback = 4] = "Feedback",
        e[e.Contacts = 5] = "Contacts",
        e[e.Call = 6] = "Call",
        e[e.Search = 7] = "Search",
        e[e.Profile = 8] = "Profile",
        e[e.Title = 9] = "Title",
        e[e.Settings = 10] = "Settings",
        e[e.ContactsFilter = 11] = "ContactsFilter",
        e[e.MeetNow = 12] = "MeetNow"
    }(t.HeaderButtonType || (t.HeaderButtonType = {}))
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(106)
      , o = i(129);
    var s;
    !function(e) {
        e[e.LinkShown = 0] = "LinkShown",
        e[e.PnvUIStart = 1] = "PnvUIStart",
        e[e.NumberNext = 2] = "NumberNext",
        e[e.NumberBack = 3] = "NumberBack",
        e[e.CodeNext = 4] = "CodeNext",
        e[e.CodeSkip = 5] = "CodeSkip",
        e[e.CodeBack = 6] = "CodeBack",
        e[e.CodeResend = 7] = "CodeResend",
        e[e.CodeCall = 8] = "CodeCall",
        e[e.NumberCall = 9] = "NumberCall"
    }(s = t.PnvScenarioStep || (t.PnvScenarioStep = {}));
    class r {
        constructor(e) {
            this._scenario = e
        }
        static get() {
            if (!this._pnvTelemetryHelper) {
                const e = new o.default(n.ScenarioName.PnvUI);
                e.start(),
                e.setDuplicateStepMarkingEnabled(),
                this._pnvTelemetryHelper = new r(e)
            }
            return this._pnvTelemetryHelper
        }
        markStep(e, t) {
            this._scenario.markStepCompleted(s[e], t)
        }
    }
    t.default = r
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(235)
      , r = i(16)
      , a = i(39)
      , l = i(159);
    class c extends a.TelemetryEventBase {
        constructor(e, t, i, n, o) {
            super(),
            this._source = e,
            this._sourceName = t,
            this._inContext = i,
            this._cortanaOptInStatus = n,
            this._message = o
        }
        getEventName() {
            return "caap_suggestions"
        }
        getCommonSuggestionsEventAttributes(e) {
            let t = Object.assign({}, e);
            return this._message && (t.LatestServerMessageId = this._message.getLatestServerMessageId()),
            this._source && r.isAgent(this._source) && (t.Source = this._source,
            this._sourceName && (t.SourceName = this._sourceName)),
            t.IsCortanaOptIn = !!this._cortanaOptInStatus,
            t
        }
        getAttributes() {
            const e = this.getCommonSuggestionsEventAttributes(super.getAttributes());
            return e.Action = this.getActionName(),
            e.IsInContext = !!this._inContext,
            this._message && (e.MessageCorrelationId = s.getCorrelationIdFromMessageParts(this._message.creator, this._message.conversationId, l.getClientMessageId(this._message))),
            e
        }
        getPiiAttributes() {
            return this.getCommonPiiAttributes(super.getPiiAttributes())
        }
        getCommonPiiAttributes(e) {
            let t = Object.assign({}, e);
            return this._source && !r.isAgent(this._source) && (t.Source = {
                value: this._source,
                piiKind: n.AWTPiiKind.Identity
            },
            this._sourceName && (t.SourceName = {
                value: this._sourceName,
                piiKind: n.AWTPiiKind.Identity
            })),
            t
        }
    }
    t.SuggestionsDisplayedEvent = class extends c {
        constructor(e, t, i, n, o, s, r, a, l, c) {
            super(e, t, i, n, o),
            this._providerIds = s,
            this._suggestionsTypes = r,
            this._suggestionsCategories = a,
            this._integrationsCorrelationIds = l,
            this._suggestionsIds = c
        }
        getActionName() {
            return "SuggestionsDisplayed"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Providers = o.join(this._providerIds),
            e.SuggestionsTypes = o.join(this._suggestionsTypes),
            e.SuggestionsCategories = o.join(this._suggestionsCategories),
            e.IntegrationsCorrelationIds = o.join(this._integrationsCorrelationIds),
            e.SuggestionsIds = o.join(this._suggestionsIds),
            e
        }
    }
    ;
    t.SuggestionsClickedEvent = class extends c {
        constructor(e, t, i, n, o, s, r, a, l, c, d) {
            super(e, t, i, n, o),
            this._providerId = s,
            this._suggestionType = r,
            this._suggestionCategory = a,
            this._integrationCorrelationId = l,
            this._suggestionPosition = c,
            this._imBackPosition = d
        }
        getActionName() {
            return "SuggestionsClicked"
        }
        getCommonSuggestionsClickedAttributes(e) {
            let t = Object.assign({}, e);
            return t.SuggestionPosition = this._suggestionPosition,
            this._providerId && (t.Provider = this._providerId),
            this._suggestionType && (t.SuggestionType = this._suggestionType),
            this._suggestionCategory && (t.SuggestionCategory = this._suggestionCategory),
            this._integrationCorrelationId && (t.IntegrationCorrelationId = this._integrationCorrelationId),
            o.isUndefined(this._imBackPosition) || (t.ImBackPosition = this._imBackPosition),
            t
        }
        getAttributes() {
            return this.getCommonSuggestionsClickedAttributes(super.getAttributes())
        }
    }
    ;
    t.FeedbackClickedEvent = class extends c {
        constructor(e, t, i, n, o, s, r, a) {
            super(e, t, i, n, o),
            this._providerIds = s,
            this._suggestionsTypes = r,
            this._suggestionsCategories = a
        }
        getActionName() {
            return "FeedbackClicked"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Providers = o.join(this._providerIds),
            e.SuggestionsTypes = o.join(this._suggestionsTypes),
            e.SuggestionsCategories = o.join(this._suggestionsCategories),
            e
        }
    }
    ;
    t.TextHighlightClickedEvent = class extends c {
        constructor(e, t, i, n, o) {
            super(void 0, void 0, !1, e, t),
            this._providerId = i,
            this._suggestionType = n,
            this._suggestionCategory = o
        }
        getActionName() {
            return "TextHighlightClicked"
        }
        getCommonTextHighlightClickedAttributes(e) {
            let t = Object.assign({}, e);
            return this._providerId && (t.Provider = this._providerId),
            this._suggestionType && (t.SuggestionType = this._suggestionType),
            this._suggestionCategory && (t.SuggestionCategory = this._suggestionCategory),
            t
        }
        getAttributes() {
            return this.getCommonTextHighlightClickedAttributes(super.getAttributes())
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(5)
      , s = i(24)
      , r = i(23)
      , a = i(15)
      , l = i(12)
      , c = o.lazyProperties({
        headerStyle: ()=>n.Styles.createTextStyle({
            marginTop: 20,
            marginBottom: 4,
            textAlign: "center"
        })
    });
    class d extends l.default {
        _buildState(e, t) {
            const i = this._getRootViewId();
            return {
                isSmallDevice: s.default.isSmallDevice(i)
            }
        }
        render() {
            let e = [c.headerStyle, this.state.isSmallDevice ? r.fontStyle.panelHeaderLandscape : r.fontStyle.h5];
            return n.createElement(a.PanelHeader, {
                style: e
            }, this.props.headerText)
        }
    }
    t.EmptyStateHeader = d,
    t.default = d
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(70)
      , o = i(2)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        getEventName() {
            return "caap_bing"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.BingInteractionEvent = class extends r {
        constructor(e) {
            super(),
            this._entryPoint = e
        }
        getActionName() {
            return "bing_interaction"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.InteractionType = o.BingEntryPoint[this._entryPoint],
            e
        }
    }
    ;
    t.BingPermissionsInteractionEvent = class extends r {
        constructor(e, t) {
            super(),
            this._entryPoint = e,
            this._permissionStatus = t
        }
        getActionName() {
            return "bing_location_permissions"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.PermissionEntryPoint = o.BingPermissionsEntryPoint[this._entryPoint],
            e.Status = this._stringFromPermissionStatus(),
            e
        }
        _stringFromPermissionStatus() {
            switch (this._permissionStatus) {
            case n.PermissionStatus.Denied:
                return "Denied";
            case n.PermissionStatus.Granted:
                return "Granted";
            case n.PermissionStatus.Unavailable:
                return "Unavailable";
            case n.PermissionStatus.Unknown:
            default:
                return "Unknown"
            }
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    const n = i(36)
      , o = i(225)
      , s = i(22)
      , r = i(24);
    e.exports = class {
        constructor(e) {
            this._screenWidth = r.default.getWidth(e),
            this._screenHeight = r.default.getHeight(e),
            this._isLandscape = r.default.getDeviceOrientation(e) === n.DeviceOrientation.Landscape,
            this._isUsingStackNavigationContext = s.default.isUsingStackNavigationContext()
        }
        getAvatarWidth() {
            return this._isUsingStackNavigationContext ? this._isLandscape ? .4 * this._screenHeight : this._screenWidth : o.DefaultWidthForNewProfile
        }
        getAvatarHeight() {
            return this._isUsingStackNavigationContext ? Math.min(this._screenWidth, .4 * this._screenHeight) : o.DefaultWidthForNewProfile
        }
        maybeWrapAvatar(e) {
            return e
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(42)
      , r = i(2)
      , a = i(27)
      , l = i(5)
      , c = i(108)
      , d = i(4)
      , u = i(8)
      , g = i(11)
      , h = i(131)
      , p = i(15)
      , m = i(12)
      , S = l.lazyProperties({
        deviceNotPresentContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            marginVertical: 10,
            alignSelf: "stretch"
        }),
        deviceNotPresentInnercontainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            marginTop: 10
        }),
        deviceNotPresentTextContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexWrap: "wrap"
        }),
        errorIconPadding: ()=>n.Styles.createViewStyle({
            paddingTop: 0,
            paddingRight: 10
        })
    });
    class C extends m.default {
        constructor() {
            super(...arguments),
            this._onLearnMorePressed = ()=>{
                const e = "AudioVideoSettings.WebcamMaybeNotPresent" === this.props.errorStringKey ? o.default.getS4LCMCFeaturesNoSubscription().cameraHelp.cameraIssuesLink : o.default.getConfigSettingsNoSubscription().avSettings.learnMoreLink;
                c.openUrlWithParams({
                    origin: r.BrowserOrigin.AudioVideoSettings,
                    url: e,
                    componentContext: this._getContext()
                })
            }
        }
        render() {
            const e = d.getString("AudioVideoSettings.LearnMore")
              , t = n.createElement(h.default, {
                url: "#",
                key: "learnMoreLink",
                blue: !0,
                colorThemeOverride: this.props.colorThemeOverride,
                onPress: this._onLearnMorePressed
            }, e);
            let i;
            if (this.props.errorStringKey && this.props.errorIcon) {
                const o = d.getParts(this.props.errorStringKey, {
                    learnMoreLink: t
                })
                  , r = !1
                  , l = [n.createElement(a.default, {
                    key: "icon",
                    icon: this.props.errorIcon,
                    size: g.IconSize.size20,
                    color: u.Color.red,
                    style: S.errorIconPadding,
                    padding: 1
                }), n.createElement(n.View, {
                    key: "label",
                    style: S.deviceNotPresentTextContainer,
                    importantForAccessibility: r ? n.Types.ImportantForAccessibility.NoHideDescendants : void 0
                }, n.createElement(p.BodyText, {
                    colorThemeOverride: this.props.colorThemeOverride,
                    textThemeColor: p.TextThemeColor.Secondary
                }, o))];
                if (r) {
                    const t = d.getString(this.props.errorStringKey, {
                        learnMoreLink: e
                    });
                    i = s.default.wrapLinkWithAccessibilityView(l, t, this._onLearnMorePressed, S.deviceNotPresentInnercontainer)
                } else
                    i = n.createElement(n.View, {
                        style: S.deviceNotPresentInnercontainer
                    }, l)
            }
            const o = this.props.audioTitleKey ? n.createElement(p.RowTitle, {
                colorThemeOverride: this.props.colorThemeOverride
            }, d.getString(this.props.audioTitleKey)) : void 0;
            return n.createElement(n.View, {
                style: S.deviceNotPresentContainer
            }, o, i)
        }
    }
    t.default = C
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(7)
      , o = i(65)
      , s = i(43)
      , r = i(81)
      , a = i(4)
      , l = i(32);
    class c extends s.default {
        static showIfRequired(e) {
            if (l.default.getUserPreferencesLocalNoSubscription().isArchiveConversationDialogRequired) {
                r.dismissAll();
                const t = a.getString("HideConversation.DialogTitle")
                  , i = a.getString("HideConversation.DialogBody");
                return o.default.showOKAlertWithPromise(t, i, e, !1, i).then(()=>{
                    l.default.setUserPreferencesLocal({
                        isArchiveConversationDialogRequired: !1
                    })
                }
                )
            }
            return n.Resolved()
        }
    }
    t.default = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(2907)
      , r = i(660)
      , a = i(199)
      , l = i(30)
      , c = i(227)
      , d = i(28)
      , u = i(390)
      , g = i(2)
      , h = i(3)
      , p = i(4)
      , m = i(17)
      , S = i(214)
      , C = i(2908)
      , y = i(159)
      , f = i(9);
    function _(e, t, i, n, C, _) {
        const b = S.default.rootViewIdForComponentContext(i);
        s.default.showDialog([e], t, b, C).then(t=>{
            const s = f.newCauseId();
            if (t) {
                h.log(g.LogTraceArea.Navigation, `${n}._deleteChat confirmed, causeId: ${s}`),
                o.Accessibility.announceForAccessibility(p.getString("InfoPanel.ChatDeletedAccessibilityLabel", {
                    chatName: d.getDisplayName(e) || ""
                }));
                const t = l.default.getConversation(e);
                t && t.isEncryptedThread() && u.default.forgetPrivateConversation(e);
                const r = c.ConversationUtils.getOrderedConversations(a.default.getAllSiblingConversations(e), l.default.getConversation(e)).map(e=>e.id)
                  , S = r.indexOf(e);
                let C = void 0;
                S >= 0 && (C = S > 0 ? r[S - 1] : r[S + 1]),
                m.navigateAfterDeleteConversation(e, s, i, C)
            } else {
                h.log(g.LogTraceArea.Navigation, `${n}._deleteChat canceled, causeId: ${s}`);
                const t = y.getConversationTypeForTelemetry(e);
                h.track(new r.ConversationDeletionCanceled(e,t)),
                _ && _()
            }
        }
        )
    }
    t.deleteConversation = _,
    t.deleteConversationGroup = function(e, t, i, l, c, u) {
        const b = a.default.getDisplayableConversationsForUser(e);
        if (b.length < 2)
            return void _(e, t, i, l, c, u);
        const v = n.find(b, e=>e.isOneOnOne() && !e.isEncryptedThread() && !e.isSkypeSMSConversation() && !e.isDeleted())
          , T = n.find(b, e=>e.isEncryptedThread() && !e.isDeleted())
          , P = b.filter(e=>!e.isDeleted() && e.isSkypeSMSConversation()).map(e=>({
            mri: e.id,
            otherPartyMri: e.getOtherPartyMri()
        }))
          , A = n.compact([v && {
            mri: v.id
        }, T && {
            mri: T.id
        }, ...P])
          , k = S.default.rootViewIdForComponentContext(i);
        C.default.showDialog(A, t, k).then(e=>{
            e && s.default.showDialog(e, t, k, c).then(t=>{
                const n = f.newCauseId();
                if (t) {
                    h.log(g.LogTraceArea.Navigation, `${l}._deleteChat confirmed, causeId: ${n}`);
                    const t = e.length > 1 ? p.getString("InfoPanel.MultipleConversationsDeletedAnnouncement") : p.getString("InfoPanel.ChatDeletedAccessibilityLabel", {
                        chatName: d.getDisplayName(e[0]) || ""
                    });
                    o.Accessibility.announceForAccessibility(t),
                    m.navigateAfterDeleteConversation(e[0], n, i)
                } else {
                    h.log(g.LogTraceArea.Navigation, `${l}._deleteChat canceled, causeId: ${n}`);
                    const t = y.getConversationTypeForTelemetry(e[0]);
                    h.track(new r.ConversationDeletionCanceled(e[0],t)),
                    u && u()
                }
            }
            )
        }
        )
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(65)
      , s = i(16)
      , r = i(390)
      , a = i(2)
      , l = i(4)
      , c = i(2909);
    t.endPrivateConversation = function(e, t, i) {
        const c = [{
            text: l.getString("Global.CancelLabel"),
            isCancel: !0
        }, {
            text: l.getString("InfoPanel.EndConversationButton"),
            onPress: ()=>{
                const c = s.asSkypeThreadId(e);
                r.default.sendReject(c, a.E2EERejectionReason.ConversationEnding).then(i || n.noop, ()=>o.default.showErrorAlert(l.getString("InfoPanel.EndConversationFailed"), t))
            }
            ,
            isSubmit: !0
        }]
          , d = l.getString("InfoPanel.EndConversationDialogTitle")
          , u = l.getString("InfoPanel.EndConversationDialogBody");
        o.default.showWithOptions({
            title: d,
            dialogAccessibilityTitle: u,
            message: u,
            buttons: c,
            rootViewId: t
        })
    }
    ,
    t.showPrivateConversationSafeCode = function(e, t) {
        c.default.showForConversationId(e, t)
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(6)
      , r = i(1175)
      , a = i(523)
      , l = i(5)
      , c = i(4)
      , d = i(73)
      , u = i(12)
      , g = l.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            paddingLeft: 10,
            paddingRight: 16,
            paddingTop: 10,
            paddingBottom: 10
        }),
        containerWithTextButton: ()=>o.Styles.createViewStyle({
            paddingRight: 10
        }),
        containerFixedHeight: ()=>o.Styles.createViewStyle({
            height: 44
        }),
        picker: ()=>o.Styles.createButtonStyle({
            flexDirection: "row",
            alignItems: "center",
            marginTop: 2
        })
    });
    class h extends u.default {
        constructor() {
            super(...arguments),
            this._onPickerClick = e=>{
                e.stopPropagation(),
                this._onHandlePickerClick(e)
            }
            ,
            this._onPickerButtonRef = e=>{
                this._pickerButton = e || void 0
            }
        }
        _buildState(e, t) {
            return {
                showNewActionPicker: !s.default.getS4LCMCFeatures().enableMeetNow
            }
        }
        _onHandleMenuCommand(e) {
            d.default.dismiss("pickerButton", this._getRootViewId())
        }
        _onDismiss() {}
        _onHandlePickerClick(e) {
            const t = {
                anchor: ()=>this._pickerButton,
                useTheme: !0,
                positionPriorities: ["bottom"],
                popupBeakSize: {
                    width: 0,
                    height: 0
                },
                popupOffset: {
                    x: 30,
                    y: 10
                }
            };
            d.default.showGroupWithOptions({
                id: "pickerButton",
                config: t,
                getMenuGroups: ()=>this._getMenuSections(),
                onDismiss: ()=>this._onDismiss(),
                handleMenuCommand: e=>this._onHandleMenuCommand(e),
                cancelButtonTitleIOS: c.getString("Global.CancelLabel"),
                rootViewId: this._getRootViewId(),
                invokingEvent: e
            })
        }
        render() {
            const e = this.state.showNewActionPicker && !n.isUndefined(this.props.newActionPickerContext) ? o.createElement(r.default, {
                hubTab: this.props.newActionPickerContext,
                useCompactLayout: !0,
                buttonType: r.DesktopNewActionPickerType.TextButtonWithShadow,
                showGroupedActions: !0
            }) : void 0
              , t = [g.container];
            this._isPresentedInDesktopLeftNav() && t.push(g.containerFixedHeight),
            t.push(g.containerWithTextButton);
            const i = this._accessibilityText();
            return o.createElement(o.View, {
                style: t
            }, o.createElement(a, {
                ref: this._onPickerButtonRef,
                style: g.picker,
                onPress: this._onPickerClick,
                accessibilityLabel: i,
                label: this._currentMenuText()
            }), e)
        }
    }
    t.DesktopUtilityBar = h,
    t.default = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(6)
      , r = i(230)
      , a = i(115)
      , l = i(10)
      , c = i(268)
      , d = i(245)
      , u = i(160)
      , g = i(28)
      , h = i(2)
      , p = i(1665)
      , m = i(172)
      , S = i(3)
      , C = i(329)
      , y = i(5)
      , f = i(224)
      , _ = i(4)
      , b = i(147)
      , v = i(446)
      , T = i(409)
      , P = i(173)
      , A = i(20)
      , k = i(17)
      , I = i(55)
      , w = i(97)
      , N = i(177)
      , M = i(156)
      , E = i(704)
      , x = i(107)
      , D = i(73)
      , L = i(8)
      , R = i(18)
      , B = i(11)
      , O = i(59)
      , F = i(12)
      , V = i(9);
    var U;
    !function(e) {
        e[e.Default = 0] = "Default",
        e[e.TextButtonWithShadow = 1] = "TextButtonWithShadow",
        e[e.TextButtonWithBorderAndIcon = 2] = "TextButtonWithBorderAndIcon"
    }(U = t.DesktopNewActionPickerType || (t.DesktopNewActionPickerType = {}));
    const H = y.lazyProperties({
        iconContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center"
        }),
        iconButtonText: ()=>o.Styles.createTextStyle({
            margin: 5
        }),
        iconButtonTextCompactIcon: ()=>o.Styles.createTextStyle({
            margin: 0,
            fontSize: B.IconSize.size16,
            paddingTop: 4
        })
    });
    class W extends F.default {
        constructor() {
            super(...arguments),
            this._menuId = D.default.menuId(),
            this._onPlusButtonClick = e=>{
                if (e.stopPropagation(),
                this.state.superComposerEnabled) {
                    new d.default({
                        creating1on1Conversation: !0,
                        useSuperComposerFor1on1Conversation: !0,
                        peopleType: M.PeopleType.All,
                        filterPeopleType: M.FilterType.None,
                        isSingleContactSelect: !0,
                        navigationOrigin: h.NavigationConversationOrigin.SuperComposer,
                        wizardSteps: [w.WizardSteps.setConvParticipants]
                    }).start(this._getRootViewId())
                } else {
                    const t = e;
                    this._openPopup(t.shiftKey || t.metaKey, e)
                }
            }
            ,
            this._onPlusButtonRef = e=>{
                this._plusButtonRef = e
            }
            ,
            this._openAnchorPopup = ()=>{
                this._openPopup(!1)
            }
            ,
            this._openPopup = (e,t)=>{
                if (!e && this.state.enableNewConversationCreation)
                    return void this._onHandleAddMenuCommand("newChat");
                const i = {
                    anchor: ()=>this._plusButtonRef,
                    useTheme: !0,
                    showAdvancedItems: e,
                    positionPriorities: ["bottom", "right"],
                    popupBeakSize: {
                        width: 0,
                        height: 0
                    }
                };
                if (n.isUndefined(this.props.hubTab))
                    if (this.props.showGroupedActions) {
                        const e = [{
                            key: "newsection",
                            menuItems: this._getNewMenuItems(i)
                        }, {
                            key: "addsection",
                            menuItems: this._getAddMenuItems(i)
                        }];
                        D.default.showGroupWithOptions({
                            id: this._menuId,
                            config: i,
                            getMenuGroups: ()=>e,
                            handleMenuCommand: this._onHandleAddMenuCommand,
                            cancelButtonTitleIOS: _.getString("Global.CancelLabel"),
                            rootViewId: this._getRootViewId(),
                            invokingEvent: t
                        })
                    } else
                        D.default.showWithOptions({
                            id: this._menuId,
                            config: i,
                            getMenuItems: this._getAllMenuItems,
                            handleMenuCommand: this._onHandleAddMenuCommand,
                            rootViewId: this._getRootViewId(),
                            invokingEvent: t
                        });
                else {
                    let e;
                    switch (this.props.hubTab) {
                    case I.HubTab.Recents:
                        e = this._getRecentMenuItems(i);
                        break;
                    case I.HubTab.MeetNowChats:
                    case I.HubTab.MeetNowCalls:
                        e = this._getMeetNowMenuItems(i);
                        break;
                    case I.HubTab.Calls:
                        e = this._getCallsMenuItems(i);
                        break;
                    case I.HubTab.People:
                        e = this._getAddMenuItems(i)
                    }
                    if (e) {
                        if (1 === e.length)
                            return void this._onHandleAddMenuCommand(e[0].command);
                        if (this.props.hubTab === I.HubTab.People) {
                            const e = [{
                                key: "addsection",
                                menuItems: this._getAddMenuItems(i)
                            }, {
                                key: "invitesection",
                                menuItems: this._getInviteMenuItems(i)
                            }];
                            f.isAddressBookEnabled() && !this.state.syncAddressBookEnabled && e.push({
                                key: "synccontactssection",
                                menuItems: this._getSyncContactsMenuItems(i)
                            }),
                            D.default.showGroupWithOptions({
                                id: this._menuId,
                                config: i,
                                getMenuGroups: ()=>e,
                                handleMenuCommand: this._onHandleAddMenuCommand,
                                cancelButtonTitleIOS: _.getString("Global.CancelLabel"),
                                rootViewId: this._getRootViewId(),
                                invokingEvent: t
                            })
                        } else {
                            const o = e;
                            D.default.showWithOptions({
                                id: this._menuId,
                                config: i,
                                getMenuItems: ()=>o,
                                handleMenuCommand: this._onHandleAddMenuCommand,
                                rootViewId: this._getRootViewId(),
                                invokingEvent: t,
                                onDismiss: n.noop
                            })
                        }
                    }
                }
            }
            ,
            this._getAllMenuItems = e=>[...this._getNewMenuItems(e), ...this._getAddMenuItems(e)],
            this._getNewMenuItems = e=>{
                const t = [{
                    text: _.getString("Hub.NewGroupChatLabel"),
                    command: "group"
                }];
                return (e.showAdvancedItems || this.state.enableModeratedGroupChats) && t.push({
                    text: _.getString("Hub.NewModeratedGroupChatLabel"),
                    command: "moderatedgroup"
                }),
                t.push({
                    text: _.getString("Hub.New1on1ChatLabel"),
                    command: "1on1"
                }),
                this.state.disableHighBandwidthOperations || t.push({
                    text: _.getString("Hub.NewCallLabel"),
                    command: "newCall"
                }),
                t.push({
                    text: _.getString("Hub.NewPrivateChatLabel"),
                    command: "private"
                }),
                this._canShowSmsEntryPoint() && t.push({
                    text: _.getString("Hub.NewCellularSmsChatLabel"),
                    command: "cellularSms"
                }),
                t
            }
            ,
            this._getAddMenuItems = e=>{
                const t = [];
                return this.state.addContactFlowEnabled && t.push({
                    text: _.getString("Hub.AddContactMenuLabel"),
                    command: "addContact"
                }),
                this.state.ecsBotDiscoveryEnabled && t.push({
                    text: this.props.showGroupedActions ? _.getString("Hub.FindBotLabelGrouped") : _.getString("Hub.FindBotLabel"),
                    command: "findBots"
                }),
                t
            }
            ,
            this._getInviteMenuItems = e=>{
                const t = [];
                return t.push({
                    text: _.getString("Hub.InviteToSkypeLabel"),
                    command: "inviteToSkype"
                }),
                t
            }
            ,
            this._getSyncContactsMenuItems = e=>{
                const t = []
                  , i = R.getPlatformType() === h.PlatformType.OSX
                  , n = R.getPlatformType() === h.PlatformType.Windows;
                let o = "";
                return i ? o = _.getString("Hub.SyncMacContacts") : n && (o = _.getString("Hub.SyncPcContacts")),
                t.push({
                    text: o,
                    command: "syncAddressBook"
                }),
                t
            }
            ,
            this._getRecentMenuItems = e=>{
                const t = [{
                    text: _.getString("Hub.NewGroupChatLabel"),
                    command: "group"
                }];
                return (e.showAdvancedItems || this.state.enableModeratedGroupChats) && t.push({
                    text: _.getString("Hub.NewModeratedGroupChatLabel"),
                    command: "moderatedgroup"
                }),
                t.push({
                    text: _.getString("Hub.New1on1ChatLabel"),
                    command: "1on1"
                }),
                t.push({
                    text: _.getString("Hub.NewPrivateChatLabel"),
                    command: "private"
                }),
                this._canShowSmsEntryPoint() && t.push({
                    text: _.getString("Hub.NewCellularSmsChatLabel"),
                    command: "cellularSms"
                }),
                t
            }
            ,
            this._getMeetNowMenuItems = e=>[{
                text: _.getString("MeetNow.HostAMeetingLabel"),
                command: "createMeetNow"
            }, {
                text: _.getString("MeetNow.JoinAMeetingLabel"),
                command: "joinMeetNow"
            }],
            this._getCallsMenuItems = e=>{
                const t = [];
                return this.state.disableHighBandwidthOperations || t.push({
                    text: _.getString("Hub.NewCallLabel"),
                    command: "newCall"
                }),
                t
            }
            ,
            this._onHandleAddMenuCommand = e=>{
                const t = V.newCauseId();
                switch (S.log(h.LogTraceArea.Navigation, "DesktopNewActionPicker._onHandleAddMenuCommand,  causeId: " + t),
                S.track(new p.HubPlusButtonEvent(e)),
                e) {
                case "moderatedgroup":
                    new d.default({
                        navigationOrigin: h.NavigationConversationOrigin.NewModeratedGroup,
                        peopleType: M.PeopleType.All,
                        filterPeopleType: M.FilterType.GroupCapable
                    }).start(this._getRootViewId());
                    break;
                case "group":
                    new d.default({
                        navigationOrigin: h.NavigationConversationOrigin.NewGroup,
                        peopleType: M.PeopleType.All,
                        filterPeopleType: M.FilterType.GroupCapable
                    }).start(this._getRootViewId());
                    break;
                case "1on1":
                    new d.default({
                        creating1on1Conversation: !0,
                        peopleType: M.PeopleType.All,
                        filterPeopleType: M.FilterType.None,
                        isSingleContactSelect: !0,
                        navigationOrigin: h.NavigationConversationOrigin.NewChat,
                        wizardSteps: [w.WizardSteps.setConvParticipants]
                    }).start(this._getRootViewId());
                    break;
                case "private":
                    new d.default({
                        creating1on1Conversation: !0,
                        peopleType: M.PeopleType.AllExcludingBots,
                        filterPeopleType: M.FilterType.None,
                        isSingleContactSelect: !0,
                        navigationOrigin: h.NavigationConversationOrigin.NewPrivateChat,
                        wizardSteps: [w.WizardSteps.setConvParticipants]
                    }).start(this._getRootViewId());
                    break;
                case "newCall":
                    this.props.showGroupedActions ? k.navigateToQuickCallPanelWithParams({
                        newGroup: !0,
                        causeId: t
                    }, this._getContext()) : k.navigateToQuickCallPanel(t, this._getContext());
                    break;
                case "findBots":
                    k.navigateToBotDiscovery(void 0, this._getContext());
                    break;
                case "addContact":
                    k.navigateToAddContactPanel(c.AddContactPanelOrigin.DesktopNewActionPicker, x.StackNavigationDirection.Push, this._getContext());
                    break;
                case "inviteToSkype":
                    const e = A.getSkypeMri()
                      , i = g.getDisplayName(e);
                    k.navigateToInviteShare(e, i, C.InviteLinkOrigin.DesktopNewActionPicker, this._getContext());
                    break;
                case "syncAddressBook":
                    k.navigateToSyncAddressBook({
                        origin: u.DialogNavOrigin.LocalContactsTab,
                        hideSkipButton: !0
                    }, void 0, this._getContext());
                    break;
                case D.SXActionMenuCancel:
                    break;
                case "cellularSms":
                    new d.default({
                        creating1on1Conversation: !0,
                        peopleType: M.PeopleType.AllWithPhoneNumbers,
                        filterPeopleType: M.FilterType.CallCapable,
                        isSingleContactSelect: !0,
                        navigationOrigin: h.NavigationConversationOrigin.NewChat,
                        wizardSteps: [w.WizardSteps.setConvParticipants],
                        createCellularSmsConversation: !0
                    }).start(this._getRootViewId());
                    break;
                case "newChat":
                    new d.default({
                        peopleType: M.PeopleType.All,
                        filterPeopleType: M.FilterType.None,
                        navigationOrigin: h.NavigationConversationOrigin.Recents,
                        wizardSteps: [w.WizardSteps.setConvParticipants]
                    }).start(this._getRootViewId());
                    break;
                case "createMeetNow":
                    const n = this.props.hubTab === I.HubTab.MeetNowCalls ? P.MeetNowOrigin.CallsHubDesktop : P.MeetNowOrigin.RecentChatsHubDesktop;
                    b.MeetNowHelpers.showNewMeetNow(this.props.origin || n);
                    break;
                case "joinMeetNow":
                    v.default.navigateToMeetNowJoinLinkPanel(!0, {
                        origin: this.props.origin || P.MeetNowOrigin.JoinLobby
                    })
                }
            }
            ,
            this._canShowSmsEntryPoint = ()=>this.state.enable2WaySmsEntryPoint
        }
        _buildState(e) {
            const {superComposerEnabled: t} = s.default.getS4LUiFeatures()
              , {enableNewConversationCreation: i, useSmsThreadsFor2way: n, enableModeratedGroupChats: o} = s.default.getS4LMessagingFeatures()
              , {botDiscoveryEnabled: r} = s.default.getS4LCaapFeatures();
            return {
                ecsBotDiscoveryEnabled: r,
                superComposerEnabled: O.useTabletUI() && t,
                addContactFlowEnabled: !!e.showGroupedActions,
                disableHighBandwidthOperations: m.default.isUsingGogoNetwork(),
                syncAddressBookEnabled: N.getSyncAddressBookPrivacySetting(),
                enable2WaySmsEntryPoint: n && E.default.isPaidUser(),
                enableNewConversationCreation: e.hubTab === I.HubTab.Recents && i,
                enableModeratedGroupChats: o,
                enableNewMeetNowName: s.default.getS4LCMCFeatures().enableNewMeetNowName
            }
        }
        _getIcon() {
            if (this.props.buttonType === U.TextButtonWithBorderAndIcon)
                switch (this.props.hubTab) {
                case I.HubTab.Recents:
                    return B.SkypeIcon.Compose;
                case I.HubTab.Calls:
                    return B.SkypeIcon.CallAdd;
                case I.HubTab.People:
                    return B.SkypeIcon.ContactAdd;
                case I.HubTab.MeetNowChats:
                case I.HubTab.MeetNowCalls:
                    return T.default.getMeetNowIcon()
                }
            return B.SkypeIcon.Plus
        }
        render() {
            let e, t, i = [o.Types.AccessibilityTrait.Button, o.Types.AccessibilityTrait.HasPopup];
            const s = this.props.buttonType === U.TextButtonWithShadow || this.props.buttonType === U.TextButtonWithBorderAndIcon
              , c = this.props.buttonType === U.TextButtonWithBorderAndIcon;
            let d = c;
            switch (this.props.hubTab) {
            case I.HubTab.Recents:
                e = _.getString("Hub.New1on1ChatLabel"),
                s && (t = c ? _.getString("Hub.New1on1ChatLabel") : _.getString("Hub.NewChatMenuShortLabel"));
                break;
            case I.HubTab.Calls:
                e = _.getString("Hub.NewCallLabel"),
                s && (t = c ? _.getString("Hub.NewCallLabel") : _.getString("Hub.NewCallMenuShortLabel")),
                i = [o.Types.AccessibilityTrait.Button],
                d = !1;
                break;
            case I.HubTab.People:
                e = _.getString("Hub.AddContactsLabelGrouped"),
                s && (t = c ? _.getString("Hub.NewContactButton") : _.getString("Hub.NewContactMenuShortLabel")),
                i = [o.Types.AccessibilityTrait.Button],
                d = !1;
                break;
            case I.HubTab.MeetNowChats:
            case I.HubTab.MeetNowCalls:
                const n = this.state.enableNewMeetNowName ? "MeetNow.NewMeeting" : "MeetNow.FeatureName";
                e = _.getString(n),
                t = _.getString(n);
                break;
            default:
                e = _.getString("HubHeaderPanel.NewConversationOrCallAccessibilityLabel"),
                t = _.getString("HubHeaderPanel.NewConversationOrCallTitle")
            }
            let u = {
                coachMarkType: a.CoachMarkType.Plus,
                onAnchorPress: this._openAnchorPopup,
                anchorAccessibilityLabel: e,
                accessibilityLabel: e,
                accessibilityTraits: i,
                anchorRef: this._onPlusButtonRef,
                style: [H.iconContainer, this.props.style],
                onPress: this._onPlusButtonClick,
                icon: this.props.hideIcon ? B.SkypeIcon.Blank : this._getIcon(),
                title: t || e,
                secondaryIcon: d ? B.SkypeIcon.DownChevron : void 0,
                secondaryIconSize: d ? B.IconSize.size12 : void 0,
                secondaryIconColor: d && !this._useAccessibleTheme() ? L.Color.gray300 : void 0,
                secondaryIconMarginLeft: d ? B.IconSize.size12 : void 0,
                secondaryIconMarginRight: d ? -B.IconSize.size12 : void 0
            };
            if (s) {
                const e = this._useAccessibleTheme();
                let t, i;
                this._useDarkTheme() ? (t = l.SXButtonStyle.DarkFill,
                i = L.Color.gray300Overlay10) : (t = l.SXButtonStyle.LightFill,
                i = L.Color.gray100),
                e && (t = l.SXButtonStyle.ThemeFill,
                i = L.Color.transparent);
                const s = n.isUndefined(this.props.buttonSize) ? l.SXButtonSize.Small : this.props.buttonSize
                  , a = n.isUndefined(this.props.buttonStyle) ? t : this.props.buttonStyle;
                return o.createElement(r.default.SXButton, Object.assign({}, u, {
                    buttonSize: s,
                    buttonStyle: a,
                    iconSize: this.props.iconSize || B.IconSize.size12,
                    secondaryIconColor: this.props.secondaryIconColor || void 0,
                    minHeight: c ? 32 : void 0,
                    showShadow: !e && this.props.buttonType === U.TextButtonWithShadow,
                    addBorderColor: c ? i : void 0
                }))
            }
            {
                const e = this.props.useCompactLayout ? H.iconButtonTextCompactIcon : H.iconButtonText;
                return o.createElement(r.default.IconButton, Object.assign({}, u, {
                    size: this.props.iconSize || B.IconSize.size24,
                    color: this.props.color || this._themeColors.headerIconColor,
                    hoverColor: this.props.hoverColor || this._themeColors.iconHoverColor,
                    iconTextStyle: e
                }))
            }
        }
    }
    t.DesktopNewActionPicker = W,
    t.default = W
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(610)
      , s = i(5)
      , r = i(22)
      , a = i(1666)
      , l = i(12)
      , c = i(135)
      , d = s.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            flex: 1,
            overflow: "hidden"
        })
    });
    class u extends l.default {
        constructor() {
            super(...arguments),
            this._alertAnimatedHeightValue = new n.Animated.Value(0),
            this._alertAnimatedStyle = n.Styles.createAnimatedViewStyle({
                height: this._alertAnimatedHeightValue
            })
        }
        _buildState(e, t) {
            const i = r.default.isUsingStackNavigationContext()
              , n = o.default.getConnectivityAlertType()
              , s = {
                alertType: n,
                height: n ? i ? a.HeightStack : a.HeightComposite : 0,
                themeOverride: c.matchingLightOrDarkTheme(this._getCurrentTheme(e))
            };
            return t && s.height && this._alertAnimatedHeightValue.setValue(s.height),
            s
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.height !== t.height && this._toggleAlert(this.state.height)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            0 === t.height && this.state.height > 0 && this._toggleAlert(t.height)
        }
        _toggleAlert(e) {
            n.Animated.timing(this._alertAnimatedHeightValue, {
                toValue: e,
                duration: 250,
                easing: n.Animated.Easing.Out()
            }).start()
        }
        render() {
            const e = n.Styles.createViewStyle({
                backgroundColor: this._themeColors.primaryTextColor
            }, !1);
            return n.createElement(n.Animated.View, {
                style: this._alertAnimatedStyle
            }, n.createElement(n.View, {
                style: [d.container, e]
            }, n.createElement(a.default, {
                fromToast: !1,
                alertType: this.state.alertType,
                colorThemeOverride: this.state.themeOverride
            })))
        }
    }
    t.default = u
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        getEventName() {
            return "appcore_settings_remote"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getAction(),
            e
        }
    }
    t.RemoteUserAppearanceTelemetryEvent = class extends o {
        constructor() {
            super(...arguments),
            this._didUpdateColorTheme = !1,
            this._didUpdateColorInfo = !1,
            this._didToggleSystemTheme = !1,
            this._didToggleFlipBubbleColors = !1,
            this._didUpdateRecentsRowSize = !1
        }
        setDidUpdateColorTheme() {
            this._didUpdateColorTheme = !0
        }
        setDidUpdateColorInfo() {
            this._didUpdateColorInfo = !0
        }
        setDidToggleSystemTheme() {
            this._didToggleSystemTheme = !0
        }
        setDidToggleFlipBubbleColors() {
            this._didToggleFlipBubbleColors = !0
        }
        setDidUpdateRecentsRowSize() {
            this._didUpdateRecentsRowSize = !0
        }
        getAction() {
            return "Appearance"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.DidUpdateColorTheme = this._didUpdateColorTheme,
            e.DidToggleSystemTheme = this._didToggleSystemTheme,
            e.DidUpdateColorInfo = this._didUpdateColorInfo,
            e.DidToggleFlipBubbleColor = this._didToggleFlipBubbleColors,
            e.DidUpdateRecentsRowSize = this._didUpdateRecentsRowSize,
            e
        }
    }
}
, , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(357)
      , o = i(0)
      , s = i(1688)
      , r = i(50)
      , a = i(10)
      , l = i(2930)
      , c = i(2)
      , d = i(3)
      , u = i(5)
      , g = i(4)
      , h = (i(132),
    i(22))
      , p = i(37)
      , m = i(76)
      , S = i(44)
      , C = i(515)
      , y = i(94)
      , f = i(18)
      , _ = i(11)
      , b = i(15)
      , v = i(9)
      , T = u.lazyProperties({
        panel: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        marginTopVersion: ()=>o.Styles.createTextStyle({
            marginTop: 20,
            textAlign: "center"
        }),
        otherVersion: ()=>o.Styles.createTextStyle({
            textAlign: "center"
        }),
        buttonsContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch"
        }),
        copyright: ()=>o.Styles.createTextInputStyle({
            marginTop: 2
        }),
        upperTextContainer: ()=>o.Styles.createViewStyle({
            alignItems: "center",
            marginHorizontal: 10,
            marginTop: 18
        }),
        panelContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            flexDirection: "column"
        }),
        panelContainerCompositeNav: ()=>o.Styles.createViewStyle({
            marginHorizontal: 10
        })
    });
    class P extends r.default {
        constructor() {
            super(...arguments),
            this._onVersionPress = ()=>{
                0
            }
            ,
            this._onLeftButtonPressed = ()=>{
                const e = v.newCauseId();
                d.log(c.LogTraceArea.Navigation, "AboutPanel._onLeftButtonPressed,  causeId: " + e),
                this._goBack(e)
            }
        }
        _buildState(e, t) {
            return {
                isUsingStackNavigationContext: h.default.isUsingStackNavigationContext(),
                safeAreaHorizontalPaddingStyle: this._getContext().isPresentedInDesktopSubview ? void 0 : p.default.horizontalPaddingStyle(a.HorizontalInsetDefault),
                isMobileScreenReaderEnabled: m.default.isMobileScreenReaderEnabled()
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._updateStatusBarStyle(y.createBarStyle(this._themeColors.defaultStatusBarTheme))
        }
        render() {
            let e;
            if (this.props.showHeader) {
                const t = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                    closeButtonType: this.props.isAloneInNavStack ? S.CloseButtonType.Close : S.CloseButtonType.Back,
                    onPress: this.state.isUsingStackNavigationContext ? void 0 : this._onLeftButtonPressed
                };
                e = this.props.isAloneInNavStack && !this.state.isMobileScreenReaderEnabled && this._getContext().isPresentedInSplitView ? void 0 : o.createElement(S.SimplePanelHeader, {
                    panelName: this._getHeaderText(this.state),
                    leftButton: t
                })
            }
            const t = n.default.getStack()
              , i = (t && t.getVersion(),
            []);
            let s;
            this.state.isUsingStackNavigationContext || i.push(T.panelContainerCompositeNav),
            this.state.safeAreaHorizontalPaddingStyle && i.push(this.state.safeAreaHorizontalPaddingStyle);
            const r = f.getUWPPackageVersion() || f.getMSIXPackageVersion();
            r && (s = o.createElement(b.BodyText, {
                style: T.otherVersion,
                selectable: !0
            }, g.getString("AboutPanel.UWPPackageVersion", {
                version: r
            })));
            let a = o.createElement(b.BodyText, {
                style: T.marginTopVersion,
                selectable: !0
            }, g.getString("AboutPanel.SkypeVersion", {
                version: f.getAppVersion()
            }));
            let c = o.createElement(o.View, {
                style: this.props.isPartOfOtherPanel ? void 0 : i
            }, o.createElement(o.View, {
                style: T.upperTextContainer
            }, o.createElement(C.SkypeLogo, {
                size: _.IconSize.size64
            }), a, s, void 0, o.createElement(b.Caption, {
                style: T.copyright
            }, g.getString("AboutPanel.Copyright")), o.createElement(l, null), this.props.isPartOfOtherPanel ? void 0 : this._getAboutButtons()));
            return this.props.isPartOfOtherPanel || (c = o.createElement(o.ScrollView, {
                style: T.panelContainer
            }, c)),
            o.createElement(o.View, {
                style: [T.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, e, c)
        }
        _getAboutButtons() {
            return o.createElement(s.default, {
                buttonStyles: this.state.isUsingStackNavigationContext ? void 0 : a.ListItem.small.shortHeightStyle,
                style: this.props.isPartOfOtherPanel ? void 0 : T.buttonsContainer
            })
        }
        _getHeaderText(e) {
            return e.isUsingStackNavigationContext ? g.getString("AboutPanel.AboutTitle") : g.getString("UserSettingsPanel.AboutButton")
        }
    }
    t.default = P
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(2931)
      , r = i(51)
      , a = i(2932)
      , l = i(10)
      , c = i(3)
      , d = i(4)
      , u = i(2933)
      , g = i(17)
      , h = i(165)
      , p = i(84)
      , m = i(103)
      , S = i(2934)
      , C = i(11)
      , y = i(90);
    class f extends r.default {
        constructor() {
            super(...arguments),
            this._onPressManageProfile = ()=>{
                c.track(new h.ManageMyProfileOnlineClicked),
                g.navigateToSsoWebFlow(this.state.manageProfileGoLink, "userInfo.profile", d.getString("UserSettingsPanel.ManageProfileWindowTitle"), this._getRootViewId(), this.state.pathsRequiringHeaders, !1, {}, !1)
            }
            ,
            this._onPressManageAccount = ()=>{
                c.track(new h.ManageMyAccountOnlineClicked),
                g.navigateToSsoWebFlow(this.state.manageAccountGoLink, "userInfo.myaccount", d.getString("UserSettingsPanel.ManageAccountWindowTitle"), this._getRootViewId(), this.state.pathsRequiringHeaders, !1, {}, !1)
            }
        }
        _buildState(e, t) {
            const i = o.default.getConfigSettings().profileCard;
            return {
                closeMyAccountEndUrl: i.closeMyAccountEndUrl,
                closeMyAccountUrl: i.closeMyAccountUrl,
                closeMyAccountWebUrl: i.closeMyAccountWebUrl,
                ecsCloseMyAccountEnabled: o.default.getS4LSisuFeatures().enableCloseMyAccount,
                manageAccountGoLink: i.manageAccountGoLink,
                manageProfileGoLink: i.manageProfileGoLink,
                pathsRequiringHeaders: o.default.getS4LCommerceFeatures().webConfig.pathsRequiringHeaders
            }
        }
        render() {
            const e = this.state.ecsCloseMyAccountEnabled ? this._getCloseAccountButton() : void 0;
            return n.createElement(n.View, {
                style: this.props.style
            }, n.createElement(p.SectionTitle, {
                title: d.getString("UserSettingsPanel.ManageButtonUpper")
            }), this._getBalanceSettingsButton(), this._getSkypeNumberProfileButton(), this._getManageProfileButton(), this._getManageAccountButton(), this._getMoneySettingsButton(), e)
        }
        _getBalanceSettingsButton() {
            return n.createElement(s.default, {
                buttonStyles: this.props.buttonStyles
            })
        }
        _getSkypeNumberProfileButton() {
            return n.createElement(S.default, {
                buttonStyles: this.props.buttonStyles
            })
        }
        _getMoneySettingsButton() {
            return n.createElement(u.default, {
                buttonStyles: this.props.buttonStyles
            })
        }
        _getManageAccountButton() {
            return n.createElement(y.WideButton, {
                icon: C.SkypeIcon.Card,
                key: "manageAccount",
                label: d.getString("UserSettingsPanel.ManageAccountLabel"),
                labelStyle: m.styles.titleMediumSemiLarge,
                buttonStyles: l.ListItem.small.shortHeightStyle,
                labelBottom: d.getString("UserSettingsPanel.ManageAccountDescription"),
                onPressed: this._onPressManageAccount,
                hideArrow: !0,
                treatAsLink: !0
            })
        }
        _getManageProfileButton() {
            return n.createElement(y.WideButton, {
                icon: C.SkypeIcon.Topic,
                key: "manageProfile",
                label: d.getString("UserSettingsPanel.ManageProfileLabel"),
                labelStyle: m.styles.titleMediumSemiLarge,
                buttonStyles: l.ListItem.small.shortHeightStyle,
                labelBottom: d.getString("UserSettingsPanel.ManageProfileDescription"),
                onPressed: this._onPressManageProfile,
                hideArrow: !0,
                treatAsLink: !0
            })
        }
        _getCloseAccountButton() {
            return n.createElement(a.default, {
                buttonStyles: this.props.buttonStyles
            })
        }
    }
    t.default = f
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(6)
      , r = i(51)
      , a = i(116)
      , l = i(42)
      , c = i(2)
      , d = i(5)
      , u = i(108)
      , g = i(4)
      , h = i(249)
      , p = i(62)
      , m = i(192)
      , S = i(17)
      , C = i(64)
      , y = i(84)
      , f = i(103)
      , _ = i(131)
      , b = i(15)
      , v = d.lazyProperties({
        descriptionRow: ()=>n.Styles.createViewStyle({
            paddingBottom: 5,
            borderBottomWidth: 1
        })
    });
    class T extends r.default {
        constructor() {
            super(...arguments),
            this._onReadReceiptsLearnMore = ()=>{
                u.openUrlWithParams({
                    origin: c.BrowserOrigin.ReadReceiptsSettingsDescription,
                    url: s.default.getConfigSettingsNoSubscription().readReceipts.learnMoreLink,
                    componentContext: this._getContext()
                })
            }
            ,
            this._onChangeSendReadReceiptsEnabled = (e,t)=>{
                this.state.sendReadReceiptsEnabled !== t && (p.default.setReadReceiptsEnabled(t, h.ReadReceiptsSettingOrigin.UserAction),
                !t && this.state.activeConversationId && S.fetchMemberConsumptionHorizon(this.state.activeConversationId))
            }
        }
        _buildState(e, t) {
            return {
                sendReadReceiptsEnabled: !!p.default.getReadReceiptsEnabled(),
                sendReadReceiptsOptionDisabled: m.getStatus() === a.UserStatus.Hidden,
                activeConversationId: C.default.getActiveConversationId(this._getRootViewId())
            }
        }
        render() {
            return this.state.sendReadReceiptsOptionDisabled ? n.createElement(n.View, {
                style: [this._themeStyles.dividerBorderColorStyle, v.descriptionRow]
            }, this._renderToggleButton(), this._getDisabledButtonDescription()) : this._renderToggleButton()
        }
        _renderToggleButton() {
            const e = g.getString("UserSettingsPanel.SendReadReceipts")
              , t = g.getString("UserSettingsPanel.SendReadReceiptsSubtitle")
              , i = this.state.sendReadReceiptsOptionDisabled ? f.styles.controlRowWithDescription : [f.styles.controlRow, this._themeStyles.dividerBorderColorStyle];
            return n.createElement(o, {
                key: "sendReadReceipts",
                style: [i, this.props.style],
                isOn: this.state.sendReadReceiptsEnabled,
                accessibilityLabel: l.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeSendReadReceiptsEnabled,
                disable: this.state.sendReadReceiptsOptionDisabled
            }, n.createElement(y.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getDisabledButtonDescription() {
            const e = g.getString("UserSettingsPanel.SendReadReceiptsLearnMore")
              , t = n.createElement(_.default, {
                url: s.default.getConfigSettingsNoSubscription().readReceipts.learnMoreLink,
                onPress: this._onReadReceiptsLearnMore,
                textThemeColor: b.TextThemeColor.Secondary,
                blue: !0,
                key: "readReceiptsLearnMoreLink "
            }, e);
            return n.createElement(b.Caption, {
                key: "disabledReadReceiptsComment",
                style: f.styles.subtitleMediumSemiLarge
            }, g.getParts("UserSettingsPanel.SendReadReceiptsDisabledComment", {
                learnMoreLink: t
            }))
        }
    }
    t.default = T
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(8)
      , r = i(11)
      , a = i(49);
    class l extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._rotateTextValue = new n.Animated.Value(0),
            this._rotateTextStyle = n.Styles.createAnimatedTextStyle({
                transform: [{
                    rotate: this._rotateTextValue.interpolate({
                        inputRange: [0, 360],
                        outputRange: ["0deg", "360deg"]
                    })
                }]
            }),
            this._onSyncIndicatorRef = e=>{
                e && this._startAnimation()
            }
        }
        _buildState(e, t) {
            return {
                containerStyle: n.Styles.createViewStyle({
                    height: e.size,
                    width: e.size,
                    borderRadius: e.size / 2,
                    backgroundColor: e.color,
                    alignItems: "center",
                    justifyContent: "center"
                }, !1),
                iconTextStyle: n.Styles.createTextStyle({
                    font: a.skypeAssetsFont(),
                    fontSize: 2 * Math.floor(e.size * (e.largeIndicator ? .4 : .3)),
                    color: e.indicatorColor || s.Color.white,
                    textAlign: "center"
                }, !1)
            }
        }
        render() {
            return n.createElement(n.View, {
                style: this.state.containerStyle
            }, n.createElement(n.Animated.Text, {
                style: [this.state.iconTextStyle, this._rotateTextStyle],
                ref: this._onSyncIndicatorRef
            }, r.SkypeIcon.Refresh))
        }
        _startAnimation() {
            this._rotateTextValue.setValue(0),
            n.Animated.timing(this._rotateTextValue, {
                toValue: 360,
                easing: n.Animated.Easing.Linear(),
                duration: 1200,
                isInteraction: !1
            }).start(()=>{
                this.isComponentMounted() && this._startAnimation()
            }
            )
        }
    }
    t.SyncIndicator = l,
    t.default = l
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(169)
      , s = i(169)
      , r = i(0)
      , a = i(102)
      , l = i(65)
      , c = i(6)
      , d = i(50)
      , u = i(2946)
      , g = i(61)
      , h = i(2947)
      , p = i(42)
      , m = i(71)
      , S = i(3)
      , C = i(5)
      , y = i(175)
      , f = i(4)
      , _ = i(516)
      , b = i(249)
      , v = i(2948)
      , T = i(32)
      , P = i(20)
      , A = i(22)
      , k = i(573)
      , I = i(2949)
      , w = i(2950)
      , N = i(84)
      , M = i(103)
      , E = i(275)
      , x = i(73)
      , D = i(25)
      , L = i(45)
      , R = i(90)
      , B = C.lazyProperties({
        title: ()=>r.Styles.createTextStyle({
            paddingTop: 30,
            paddingBottom: 10
        }),
        settingsContainer: ()=>r.Styles.createViewStyle({
            marginBottom: 30
        })
    });
    class O extends d.default {
        constructor() {
            super(...arguments),
            this._onChangeEnableInAppEngagementNotifications = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enableInAppEngagementNotifications: t
                }),
                this._onChangeEnablePushEngagementNotifications(e, t)
            }
            ,
            this._onChangeEnablePushEngagementNotifications = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enablePushEngagementNotifications: t
                })
            }
            ,
            this._onChangeEmailMissedCallReminders = (e,t)=>{
                v.default.setEmailMissedCallRemindersEnabled(t)
            }
            ,
            this._onChangeEmailMissedMessageReminders = (e,t)=>{
                v.default.setEmailMissedMessageRemindersEnabled(t)
            }
            ,
            this._onResetNotificationChannelSettingsRequested = ()=>{
                this._showAlertDialog(f.getString("Notifications.ResetNotificationSettingsLabel"), f.getString("Notifications.AndroidNotificationChannelResetToDefaultsConfirmation"), f.getString("Global.OkLabel"), f.getString("Global.CancelLabel"), ()=>{
                    this._resetNotificationChannelSettings()
                }
                )
            }
            ,
            this._onAndroidSystemNotificationChannelSettingsLinkPressed = ()=>{
                s.LocalNotifications.openSystemNotificationConfiguration()
            }
            ,
            this._onChatNotificationsRef = e=>{
                this._chatNotificationsRef = e || void 0
            }
            ,
            this._onChangeEnableScheduleCallReminderNotifications = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enableScheduledCallNotifications: t
                })
            }
            ,
            this._onChangeEnableIgnoreActiveEndpointFiltering = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    ignoreActiveEndpointFiltering: t
                })
            }
            ,
            this._onChangeEnableInAppScheduleCallReminderNotifications = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enableInAppScheduledCallNotifications: t
                })
            }
            ,
            this._onChangeEnablePollReminderNotifications = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enablePollNotifications: t
                })
            }
            ,
            this._onChangeEnableInAppPollReminderNotifications = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enableInAppPollNotifications: t
                })
            }
            ,
            this._onChangeEnableAndroidNotificationLight = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    androidNotificationLight: t
                })
            }
            ,
            this._onChangeEnableAndroidNotificationVibration = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    androidNotificationVibration: t
                })
            }
            ,
            this._onChangeEnableInAppNotifications = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enableInAppNotifications: t
                })
            }
            ,
            this._onChangeEnableNotificationSounds = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enableNotificationSounds: t
                })
            }
            ,
            this._onChangeEnablePushNotificationSounds = (e,t)=>{
                T.default.setUserPreferencesLocal({
                    enablePushNotificationSounds: t
                })
            }
            ,
            this._onChatNotificationsChanged = (e,t)=>{
                !t && this.state.enableNotificationPeriodsFeature && o.PushNotifications.isNotificationFilteringPossible() ? x.default.showWithOptions({
                    id: "disableNotificationPeriodsMenu",
                    config: {
                        anchor: ()=>this._chatNotificationsRef,
                        useTheme: !0
                    },
                    menuTitle: f.getString("UserSettingsPanel.NotificationsDisabledPeriodTitle"),
                    getMenuItems: ()=>[{
                        text: f.getString("UserSettingsPanel.NotificationsDisabledPeriod1Hour"),
                        command: k.NotificationPeriodsCommands.oneHourPeriod
                    }, {
                        text: f.getString("UserSettingsPanel.NotificationsDisabledPeriod8Hours"),
                        command: k.NotificationPeriodsCommands.eightHoursPeriod
                    }, {
                        text: f.getString("UserSettingsPanel.NotificationsDisabledPeriod1Day"),
                        command: k.NotificationPeriodsCommands.oneDayPeriod
                    }, {
                        text: f.getString("UserSettingsPanel.NotificationsDisabledPeriod1Week"),
                        command: k.NotificationPeriodsCommands.oneWeekPeriod
                    }, {
                        text: f.getString("UserSettingsPanel.NotificationsDisabledPeriodIndefinitely"),
                        command: k.NotificationPeriodsCommands.indefinitelyPeriod
                    }],
                    handleMenuCommand: this._onChatNotificationsDisabled,
                    rootViewId: this._getRootViewId(),
                    invokingEvent: e
                }) : (T.default.setUserPreferencesLocal({
                    enableChatNotifications: t,
                    disableChatNotificationsUntil: void 0
                }),
                o.PushNotifications.chatNotficationsToggleButtonChanged(t),
                S.track(new b.ChatNotificationsToggleSetting(t)))
            }
            ,
            this._onChatNotificationsDisabled = e=>{
                let t = !0
                  , i = 0
                  , n = 0;
                switch (e) {
                case k.NotificationPeriodsCommands.oneHourPeriod:
                    i = 1;
                    break;
                case k.NotificationPeriodsCommands.eightHoursPeriod:
                    i = 8;
                    break;
                case k.NotificationPeriodsCommands.oneDayPeriod:
                    n = 1;
                    break;
                case k.NotificationPeriodsCommands.oneWeekPeriod:
                    n = 7;
                    break;
                case k.NotificationPeriodsCommands.indefinitelyPeriod:
                    t = !1;
                    break;
                case x.SXActionMenuCancel:
                default:
                    return
                }
                const o = m.add(Date.now(), 0, n, i);
                T.default.setUserPreferencesLocal({
                    disableChatNotificationsUntil: o,
                    enableChatNotifications: t
                }),
                S.track(new b.ChatNotificationsToggleSetting(!1,e)),
                this.setState({
                    disabledNotificationsFor: e
                })
            }
        }
        static getHeaderText() {
            return f.getString("UserSettingsPanel.NotificationsTitle")
        }
        _buildState(e, t) {
            const i = T.default.getUserPreferencesLocal()
              , o = L.getFullUserProfileByMri(P.getSkypeMri())
              , s = c.default.getS4LMessagingFeatures()
              , r = c.default.getEngagementFeatures().notificationSettings
              , a = s.enableNotificationPeriods && !1
              , l = {
                enableAndroidNotificationLight: !!i.androidNotificationLight,
                enableAndroidNotificationVibration: !!i.androidNotificationVibration,
                enableScheduledCallNotifications: !!i.enableScheduledCallNotifications,
                enableInAppScheduledCallNotifications: !!i.enableInAppScheduledCallNotifications,
                enableNotificationSounds: !!i.enableNotificationSounds,
                enablePushNotificationSounds: !!i.enablePushNotificationSounds,
                enableInAppEngagementNotifications: !!i.enableInAppEngagementNotifications,
                enableInAppNotifications: !!i.enableInAppNotifications,
                enablePushEngagementNotifications: !!i.enablePushEngagementNotifications && !!i.enableInAppEngagementNotifications,
                gender: o && o.gender || D.eGender.Unspecified,
                isUsingStackNavigation: A.default.isUsingStackNavigationContext(),
                enableMessageSounds: s.enableMessageSounds,
                enableChatNotifications: _.areNotificationsEnabled(),
                enableNotificationPeriodsFeature: a,
                isPollEnabled: s.enablePollExtension,
                enableInAppPollNotifications: !!i.enableInAppPollNotifications,
                enablePollNotifications: !!i.enablePollNotifications,
                isAllowIgnoringActiveEndpointEnabled: !1,
                enableIgnoreActiveEndpointFiltering: !!i.ignoreActiveEndpointFiltering,
                emailNotificationsSettingsEnabled: r.emailNotificationsSettingsEnabled,
                emailMissedCallRemindersEnabled: r.emailMissedCallReminders.enabled,
                emailMissedCallRemindersTimeWindowInHours: r.emailMissedCallReminders.timeWindowInHours,
                emailMissedMessageRemindersEnabled: r.emailMissedMessageReminders.enabled,
                emailMissedMessageRemindersTimeWindowInHours: r.emailMissedMessageReminders.timeWindowInHours,
                isPresenceChangeNotificationEnabled: c.default.getConfigSettings().presence.enablePresenceChangeNotification && !0
            };
            return l.emailNotificationsSettingsEnabled && (l.emailMissedCallRemindersEnabled && (l.enableEmailMissedCallReminders = v.default.isEmailMissedCallRemindersEnabled()),
            l.emailMissedMessageRemindersEnabled && (l.enableEmailMissedMessageReminders = v.default.isEmailMissedMessageRemindersEnabled())),
            t && (this._initTelemetrySettingsState = n.clone(l)),
            l
        }
        render() {
            return r.createElement(r.View, {
                style: [this.props.style, B.settingsContainer]
            }, this.state.isUsingStackNavigation ? this._getMobileSettings() : this._getCompositeNotificationSettings())
        }
        _getCompositeNotificationSettings() {
            let e = [];
            e.push(r.createElement(N.SectionTitle, {
                key: "notificationsHeader",
                title: f.getString("UserSettingsPanel.NotificationsTitleUpper"),
                titleStyles: B.title
            })),
            e.push(this._getChatNotificationButton()),
            this.state.isPresenceChangeNotificationEnabled && e.push(this._getNotifyOnPresenceChangeButton()),
            e.push(this._getReactionNotificationsToggle()),
            e.push(this._getPushNotificationSoundsButton()),
            this.state.isAllowIgnoringActiveEndpointEnabled && e.push(this._getIgnoreActiveEndpointFilteringButton()),
            e.push(this._getInAppEngagementNotificationsButton()),
            this.state.enableMessageSounds && e.push(this._getInAppSoundsButton()),
            e.push(this._getScheduledCallRemindersButton()),
            this.state.isPollEnabled && e.push(this._getPollRemindersButton());
            const t = y.getLocalizeParamForGender(this.state.gender);
            return e.push(r.createElement(N.SectionTitle, {
                key: "dndTitle",
                title: f.getString("UserSettingsPanel.DoNotDisturbTitleUpper", {
                    gender: t
                }),
                numberOfLines: 2
            })),
            e.push(this._getChatNotificationsDuringDNDButton()),
            e.push(this._getCallNotificationsDuringDNDButton()),
            n.each(this._getEmailNotificationsSettings(), t=>e.push(t)),
            r.createElement(r.View, null, e)
        }
        _getMobileSettings() {
            let e = [];
            const t = g.UICapabilities.androidNotificationChannelSupported();
            e.push(this._getChatNotificationButton()),
            e.push(r.createElement(N.SectionTitle, {
                key: "pushNotificationsTitle",
                title: f.getString("UserSettingsPanel.PushNotificationsTitleUpper"),
                numberOfLines: 2
            })),
            this.state.isPresenceChangeNotificationEnabled && e.push(this._getNotifyOnPresenceChangeButton()),
            o.PushNotifications.isNotificationFilteringPossible() && e.push(this._getReactionNotificationsToggle()),
            t || e.push(this._getPushNotificationSoundsButton()),
            this.state.isAllowIgnoringActiveEndpointEnabled && e.push(this._getIgnoreActiveEndpointFilteringButton()),
            o.PushNotifications.isNotificationFilteringPossible() && e.push(this._getScheduledCallRemindersButton()),
            this.state.isPollEnabled && o.PushNotifications.isNotificationFilteringPossible() && e.push(this._getPollRemindersButton()),
            t && e.push(this._getAndroidSystemNotificationChannelSettingsLink()),
            e.push(r.createElement(N.SectionTitle, {
                key: "inAppNotificationsTitle",
                title: f.getString("UserSettingsPanel.InAppNotificationsSectionTitleUpper"),
                numberOfLines: 2
            })),
            e.push(this._getInAppNotificationsButton()),
            e.push(this._getInAppEngagementNotificationsButton()),
            e.push(this._getInAppSoundsButton()),
            e.push(this._getInAppScheduledCallRemindersButton()),
            this.state.isPollEnabled && e.push(this._getInAppPollRemindersButton());
            const i = y.getLocalizeParamForGender(this.state.gender);
            return e.push(r.createElement(N.SectionTitle, {
                key: "dndTitle",
                title: f.getString("UserSettingsPanel.DoNotDisturbTitleUpper", {
                    gender: i
                }),
                numberOfLines: 2
            })),
            o.PushNotifications.isNotificationFilteringPossible() && e.push(this._getChatNotificationsDuringDNDButton()),
            e.push(this._getCallNotificationsDuringDNDButton()),
            n.each(this._getEmailNotificationsSettings(), t=>e.push(t)),
            e
        }
        _getEmailNotificationsSettings() {
            let e = [];
            return this.state.emailNotificationsSettingsEnabled && (this.state.emailMissedMessageRemindersEnabled || this.state.emailMissedCallRemindersEnabled) && (e.push(r.createElement(N.SectionTitle, {
                key: "emailNotifications",
                title: f.getString("UserSettingsPanel.EmailNotificationsTitleUpper"),
                numberOfLines: 2
            })),
            this.state.emailMissedMessageRemindersEnabled && e.push(this._getEmailMissedMessageRemindersButton()),
            this.state.emailMissedCallRemindersEnabled && e.push(this._getEmailMissedCallRemindersButton())),
            e
        }
        _getChatNotificationButton() {
            const e = f.getString("UserSettingsPanel.ChatNotifications")
              , t = f.getString("UserSettingsPanel.ChatNotificationsSecondary");
            return r.createElement(a, {
                key: "chatNotifications",
                ref: this._onChatNotificationsRef,
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableChatNotifications,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChatNotificationsChanged
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getScheduledCallRemindersButton() {
            const e = f.getString("UserSettingsPanel.ScheduledCallNotifications")
              , t = f.getString("UserSettingsPanel.ScheduledCallNotificationsSecondary");
            return r.createElement(a, {
                key: "scheduledCallReminderNotifications",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableScheduledCallNotifications,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableScheduleCallReminderNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getIgnoreActiveEndpointFilteringButton() {
            const e = f.getString("UserSettingsPanel.IgnoreActiveEndpointFiltering")
              , t = f.getString("UserSettingsPanel.IgnoreActiveEndpointFilteringSecondary");
            return r.createElement(a, {
                key: "ignoreActiveEndpointFiltering",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableIgnoreActiveEndpointFiltering,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableIgnoreActiveEndpointFiltering,
                disable: !this.state.enableChatNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getInAppScheduledCallRemindersButton() {
            const e = f.getString("UserSettingsPanel.InAppScheduledCallNotifications")
              , t = f.getString("UserSettingsPanel.InAppScheduledCallNotificationsSecondary");
            return r.createElement(a, {
                key: "inAppScheduledCallReminderNotifications",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableInAppScheduledCallNotifications,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableInAppScheduleCallReminderNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getPollRemindersButton() {
            const e = f.getString("UserSettingsPanel.PollNotifications")
              , t = f.getString("UserSettingsPanel.PollNotificationsSecondary");
            return r.createElement(a, {
                key: "pollReminderNotifications",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enablePollNotifications,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnablePollReminderNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getInAppPollRemindersButton() {
            const e = f.getString("UserSettingsPanel.InAppPollNotifications")
              , t = f.getString("UserSettingsPanel.InAppPollNotificationsSecondary");
            return r.createElement(a, {
                key: "inAppPollReminderNotifications",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableInAppPollNotifications,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableInAppPollReminderNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getReactionNotificationsToggle() {
            return r.createElement(w.default, {
                key: "reactionNotifications",
                style: this.props.buttonStyles,
                disable: !this.state.enableChatNotifications
            })
        }
        _getPushEngagementNotificationButton() {
            const e = f.getString("UserSettingsPanel.PushEngagementNotifications")
              , t = f.getString("UserSettingsPanel.PushEngagementNotificationsSecondary");
            return r.createElement(a, {
                key: "pushEngagementNotifications",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enablePushEngagementNotifications,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnablePushEngagementNotifications,
                disable: !this.state.enableInAppEngagementNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getEmailMissedCallRemindersButton() {
            const e = f.getString("UserSettingsPanel.EmailMissedCallRemindersEnabledLabel")
              , t = f.getString("UserSettingsPanel.EmailMissedCallRemindersEnabledDescriptionV2", {
                count: this.state.emailMissedCallRemindersTimeWindowInHours
            });
            return r.createElement(a, {
                key: "emailMissedCallReminders",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: !!this.state.enableEmailMissedCallReminders,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEmailMissedCallReminders,
                disable: n.isUndefined(this.state.enableEmailMissedCallReminders)
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getEmailMissedMessageRemindersButton() {
            const e = f.getString("UserSettingsPanel.EmailMissedMessageRemindersEnabledLabelV2")
              , t = f.getString("UserSettingsPanel.EmailMissedMessageRemindersEnabledDescriptionV2", {
                count: this.state.emailMissedMessageRemindersTimeWindowInHours
            });
            return r.createElement(a, {
                key: "emailMissedMessageReminders",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: !!this.state.enableEmailMissedMessageReminders,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEmailMissedMessageReminders,
                disable: n.isUndefined(this.state.enableEmailMissedMessageReminders)
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getAndroidNotificationLightButton() {
            const e = f.getString("UserSettingsPanel.AndroidNotificationLight")
              , t = f.getString("UserSettingsPanel.AndroidNotificationLightSecondary");
            return r.createElement(a, {
                key: "androidNotificationLight",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableAndroidNotificationLight,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableAndroidNotificationLight,
                disable: !this.state.enableChatNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getAndroidNotificationVibrationButton() {
            const e = f.getString("UserSettingsPanel.AndroidNotificationVibration")
              , t = f.getString("UserSettingsPanel.AndroidNotificationVibrationSecondary");
            return r.createElement(a, {
                key: "androidNotificationVibration",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableAndroidNotificationVibration,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableAndroidNotificationVibration,
                disable: !this.state.enableChatNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getAndroidSystemNotificationChannelSettingsLink() {
            const e = f.getString("Notifications.AndroidNotificationChannelConfigurationTitle")
              , t = f.getString("Notifications.AndroidNotificationChannelConfigurationSubtitle")
              , i = f.getString("Notifications.ResetNotificationSettingsLabel");
            return r.createElement(r.View, {
                key: "androidAdvancedNotificationConfiguration"
            }, r.createElement(R.WideButton, {
                label: e,
                labelBottom: t,
                hideDivider: !1,
                treatAsLink: !0,
                onPressed: this._onAndroidSystemNotificationChannelSettingsLinkPressed
            }), r.createElement(R.WideButton, {
                label: i,
                treatAsLink: !0,
                hideDivider: !1,
                onPressed: this._onResetNotificationChannelSettingsRequested
            }))
        }
        _resetNotificationChannelSettings() {
            s.LocalNotifications.resetNotificationSettings().then(e=>{
                e && (T.default.setUserPreferencesLocal({
                    shouldSkipAndroidNotificationChannelMigration: !1,
                    androidNotificationVibration: !0,
                    androidNotificationLight: !0,
                    enablePushNotificationSounds: !0,
                    enableInAppEngagementNotifications: !0,
                    ignoreActiveEndpointFiltering: !1,
                    enableScheduledCallNotifications: !0,
                    enablePollNotifications: !0,
                    enableChatNotifications: !0
                }),
                s.LocalNotifications.createNotificationChannelsIfNeeded())
            }
            )
        }
        _getInAppNotificationsButton() {
            const e = f.getString("UserSettingsPanel.InAppNotifications")
              , t = f.getString("UserSettingsPanel.InAppNotificationsSecondary");
            return r.createElement(a, {
                key: "inAppNotifications",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableInAppNotifications,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableInAppNotifications,
                disable: !this.state.enableChatNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getInAppEngagementNotificationsButton() {
            const e = f.getString("UserSettingsPanel.InAppEngagementNotifications")
              , t = f.getString("UserSettingsPanel.InAppEngagementNotificationsSecondary");
            return r.createElement(a, {
                key: "inAppEngagementNotifications",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableInAppEngagementNotifications,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableInAppEngagementNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getPushNotificationSoundsButton() {
            const e = f.getString("UserSettingsPanel.NotificationSounds")
              , t = f.getString("UserSettingsPanel.NotificationSoundsSecondary");
            return r.createElement(a, {
                key: "pushSounds",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enablePushNotificationSounds,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnablePushNotificationSounds,
                disable: !this.state.enableChatNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getInAppSoundsButton() {
            const e = f.getString("UserSettingsPanel.InAppSounds")
              , t = f.getString("UserSettingsPanel.InAppSoundsSecondary");
            return r.createElement(a, {
                key: "inAppSounds",
                style: [M.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableNotificationSounds,
                accessibilityLabel: p.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeEnableNotificationSounds,
                disable: !this.state.enableChatNotifications || !this.state.enableInAppNotifications
            }, r.createElement(N.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getChatNotificationsDuringDNDButton() {
            return r.createElement(h.default, {
                key: "chatNotificationsDuringDND"
            })
        }
        _getNotifyOnPresenceChangeButton() {
            return r.createElement(I.default, {
                key: "notifyOnPresenceChangeButton"
            })
        }
        _getCallNotificationsDuringDNDButton() {
            return r.createElement(u.default, {
                key: "callNotificationsDuringDND"
            })
        }
        _getHeaderText(e) {
            return O.getHeaderText()
        }
        _getNotificationSettingValueIfChanged(e, t) {
            return e === t ? void 0 : t
        }
        _generateChangedSettings() {
            const e = {
                didEnableAndroidNotificationLight: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enableAndroidNotificationLight, this.state.enableAndroidNotificationLight),
                didEnableAndroidNotificationVibration: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enableAndroidNotificationVibration, this.state.enableAndroidNotificationVibration),
                didEnableChatNotifications: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enableChatNotifications, this.state.enableChatNotifications),
                didEnableInAppNotifications: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enableInAppNotifications, this.state.enableInAppNotifications),
                didEnableInAppEngagementNotifications: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enableInAppEngagementNotifications, this.state.enableInAppEngagementNotifications),
                didEnableNotificationSounds: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enableNotificationSounds, this.state.enableNotificationSounds),
                didEnablePushNotificationSounds: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enablePushNotificationSounds, this.state.enablePushNotificationSounds),
                didEnablePushEngagementNotifications: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enablePushEngagementNotifications, this.state.enablePushEngagementNotifications),
                didEnableIgnoreActiveEndpointFiltering: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.enableIgnoreActiveEndpointFiltering, this.state.enableIgnoreActiveEndpointFiltering),
                disabledNotificationsFor: this._getNotificationSettingValueIfChanged(this._initTelemetrySettingsState.disabledNotificationsFor, this.state.disabledNotificationsFor)
            };
            return n.omitBy(e, n.isUndefined)
        }
        componentWillUnmount() {
            super.componentWillUnmount();
            const e = this._generateChangedSettings();
            n.isEmpty(e) || S.track(new E.NotificationSettingsChangeTelemetry(e))
        }
        _showAlertDialog(e, t, i, n, o) {
            const s = [{
                text: i,
                onPress: ()=>{
                    o && o()
                }
                ,
                isSubmit: !0
            }];
            n && s.splice(0, 0, {
                text: n,
                isCancel: !0
            }),
            l.default.showWithOptions({
                title: e,
                message: t,
                buttons: s,
                dialogAccessibilityTitle: e,
                rootViewId: this._getRootViewId(),
                useFocussedWindowFallback: !0
            })
        }
    }
    t.default = O
}
, , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(662)
      , o = i(127);
    t.getTextMessageTypeFromContent = function(e) {
        return e ? 0 === e.indexOf("(@@ )") ? o.MessageComposerSentContentType.PlainText : ((e = e.replace("(*)", "")).match(/\*/g) || []).length > 1 || (e.match(/\_/g) || []).length > 1 || (e.match(/\~/g) || []).length > 1 || (e.match(/\`\`\`/g) || []).length > 1 ? o.MessageComposerSentContentType.MarkupText : o.MessageComposerSentContentType.PlainText : o.MessageComposerSentContentType.NoText
    }
    ,
    t.convertPastedTextTypeToTelemetry = function(e) {
        switch (e) {
        case n.PastedTextType.PlainText:
            return o.MessageComposerAction.PastePlainText;
        case n.PastedTextType.HtmlText:
            return o.MessageComposerAction.PasteHtmlText;
        case n.PastedTextType.Link:
            return o.MessageComposerAction.PasteLink;
        case n.PastedTextType.EscapedLink:
            return o.MessageComposerAction.PasteEscapedLink;
        default:
            return o.MessageComposerAction.NoPaste
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(6)
      , r = i(48)
      , a = i(1328)
      , l = i(2)
      , c = i(3)
      , d = i(74)
      , u = i(21);
    t.default = new class {
        constructor() {
            u.RegisterStartupable(this, "DevConfigService", [d.default])
        }
        startup() {
            return this._overrides = d.default.getDataExclusive(r.InternalKeys.LocalOverriddenEcsConfig),
            void 0 !== this._overrides && this._updateStore(this._overrides),
            o.Resolved()
        }
        getOverrides() {
            return this._overrides || {}
        }
        setOverride(e, t, i) {
            const o = {};
            n.set(o, t, i);
            const s = a.mergeConfigs(this.getOverrides(), {
                [e]: o
            });
            return this._saveConfig(s)
        }
        clearOverride(e, t) {
            let i = !1;
            const s = n.cloneDeep(this.getOverrides())
              , r = n.concat([e], t);
            for (; n.unset(s, r) && (i = !0,
            r.pop(),
            !n.isEmpty(r) && n.isEmpty(n.get(s, r))); )
                ;
            return i ? this._saveConfig(s) : o.Resolved()
        }
        resetAllOverrides() {
            return this._saveConfig({})
        }
        _saveConfig(e) {
            return this._overrides = e,
            d.default.putData(r.InternalKeys.LocalOverriddenEcsConfig, e).then(()=>{
                this._updateStore(e)
            }
            )
        }
        _updateStore(e) {
            c.log(l.LogTraceArea.GenericUnsafe, "Updating app config with dev settings"),
            s.default.internal_setOverrides(e)
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(52)
      , r = i(1031)
      , a = (i(363),
    i(5))
      , l = i(709)
      , c = i(8)
      , d = a.lazyProperties({
        modalInnerContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            backgroundColor: c.Color.transparent,
            overflow: "visible"
        })
    });
    t.DismissibleModalWrapperLoaded = new s.default;
    class u extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._arbitrateFocus = e=>(t.DismissibleModalWrapperLoaded.fire(),
            r.arbitrateModalOrPopupFocus("DismissibleModalWrapper", e))
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this.props.onDismiss && this.props.onDismiss(),
            t.DismissibleModalWrapperLoaded.dispose()
        }
        render() {
            return n.createElement(n.View, {
                style: d.modalInnerContainer,
                restrictFocusWithin: !0,
                arbitrateFocus: this._arbitrateFocus
            }, this.props.children, n.createElement(l, {
                key: "miniToast"
            }))
        }
    }
    t.default = u
}
, , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(6)
      , s = i(453)
      , r = i(899)
      , a = i(4)
      , l = i(62)
      , c = i(12);
    class d extends c.default {
        constructor() {
            super(...arguments),
            this._getSelectedItemLabel = ()=>{
                var e;
                return (null === (e = this.state.items.find(e=>e.value === this.state.spokenLanguageLocale)) || void 0 === e ? void 0 : e.label) || ""
            }
            ,
            this._isSelected = e=>e === this.state.spokenLanguageLocale
        }
        _buildState(e, t) {
            const i = o.default.getS4LCMCFeatures().callTranslatorBotConfig.languageSupport.speech.map(e=>{
                const t = s.getLanguageTitle(e);
                return "" !== t ? {
                    label: t,
                    value: e
                } : void 0
            }
            ).filter(e=>void 0 !== e);
            return e.showSelectOption && i.unshift({
                label: a.getString("CallSubtitleToast.SpokenLanguageDropdownOptionDefaultText"),
                value: "default"
            }),
            {
                items: i,
                spokenLanguageLocale: e.showSelectOption ? "default" : l.default.getCallTranslatorBotSpokenLanguageLocale()
            }
        }
        render() {
            return n.createElement(r, {
                id: "spokenLanguagePicker",
                items: this.state.items,
                rowTitle: this._getRowTitle(),
                caption: this._getCaption(),
                isItemSelected: this._isSelected,
                onHandleItemSelection: this.props.onHandleMenuCommand,
                selectedItemLabel: this._getSelectedItemLabel(),
                style: this.props.style,
                labelColor: this.props.labelColor
            })
        }
        _getRowTitle() {
            return this.props.rowTitle ? a.getString("LanguageAndTranslationSettingsPanel.SpokenLanguageLabel") : void 0
        }
        _getCaption() {
            if (this.props.caption)
                return o.default.getS4LCMCFeaturesNoSubscription().enableMessageTranslation ? a.getString("SubtitlesSettingsPanel.SpokenLanguageNewExplanation") : a.getString("LanguageAndTranslationSettingsPanel.SpokenLanguageExplanation")
        }
    }
    e.exports = d
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(3059)
      , s = i(46)
      , r = i(16)
      , a = i(287)
      , l = i(56)
      , c = i(27)
      , d = i(593)
      , u = i(5)
      , g = i(4)
      , h = i(375)
      , p = i(113)
      , m = i(8)
      , S = i(23)
      , C = i(11)
      , y = i(15)
      , f = i(95)
      , _ = i(67)
      , b = p.messageTextLineHeight
      , v = u.lazyProperties({
        toastContentContainer: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignSelf: "stretch",
            alignItems: "flex-start",
            justifyContent: "flex-start",
            paddingHorizontal: 10
        }),
        toastTextContentContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignItems: "center",
            justifyContent: "center",
            marginTop: 10,
            marginHorizontal: 10
        }),
        toastContent: ()=>n.Styles.createViewStyle({
            flex: 1,
            marginLeft: 12,
            alignSelf: "stretch",
            justifyContent: "center"
        }),
        toastTitle: ()=>n.Styles.createTextStyle({
            color: m.Color.white
        }),
        toastMessageContentContainer: ()=>n.Styles.createViewStyle({
            marginTop: 2,
            alignSelf: "stretch",
            height: b
        }),
        toastLastMessageOverrideText: ()=>n.Styles.createTextStyle({
            flex: 1,
            lineHeight: b,
            color: m.Color.white
        }),
        toastTextContainer: ()=>n.Styles.createTextStyle({
            color: m.Color.white,
            textAlign: "center",
            backgroundColor: m.Color.transparent
        }),
        iconContainer: ()=>n.Styles.createViewStyle({
            height: 12,
            width: 17
        })
    });
    e.exports = class extends o {
        _renderNotificationContent() {
            if (!this.state.currentMessage && !this.state.messageText)
                return;
            let e;
            if (this.state.currentMessage) {
                const t = [S.fontStyle.body, v.toastLastMessageOverrideText]
                  , i = n.Styles.combine({}, t)
                  , o = {
                    processing: l.ProcessingDefaults.Preview,
                    trimToFirstLine: !0,
                    forceLayoutInRTL: !0,
                    allowLargeEmoticons: !1,
                    renderMedia: !1,
                    mediaPlaceholderIconColor: m.Color.white,
                    numberOfLines: 1,
                    message: this.state.currentMessage,
                    textOverrideStyle: i,
                    atMentionStyle: i,
                    atMentionMeOverrideStyle: i,
                    renderSimpleAtMentions: !0
                };
                e = n.createElement(n.View, {
                    style: v.toastContent
                }, n.createElement(y.RowTitle, {
                    style: v.toastTitle,
                    numberOfLines: 1
                }, this.state.headerText), this._getLastMessageContent(o))
            } else
                this.state.messageText && (e = n.createElement(n.View, {
                    style: v.toastTextContentContainer
                }, n.createElement(y.BodyText, {
                    bold: !0,
                    style: v.toastTextContainer,
                    disableThemeSubscription: !0
                }, this.state.messageText)));
            return n.createElement(n.View, {
                style: v.toastContentContainer
            }, this._getNotificationIcon(), e)
        }
        _getNotificationIcon() {
            return this.state.toastCreator ? n.createElement(f.UserIcon, {
                key: "userIcon",
                userMri: this.state.toastCreator,
                size: _.UserIconSize.Size40,
                useCircleForAgentMask: !0
            }) : this.state.conversationId ? n.createElement(a.ConversationIcon, {
                conversationId: this.state.conversationId,
                size: _.ConversationIconSize.Size40
            }) : void 0
        }
        _getLastMessageContent(e) {
            if (this.state.currentMessage) {
                let t;
                if (r.isEncryptedThread(this.state.currentMessage.conversationId))
                    t = n.createElement(y.BodyText, {
                        style: v.toastTitle,
                        disableThemeSubscription: !0
                    }, g.getString("Notifications.E2eeTextNotificationLabel"));
                else if (s.isScheduledCallType(this.state.currentMessage.messagetype)) {
                    let e;
                    this.state.messageTextIcon && (e = n.createElement(d, {
                        key: "placeholderIcon",
                        style: v.iconContainer
                    }, n.createElement(c.IconView, {
                        color: m.Color.white,
                        size: C.IconSize.size12,
                        icon: this.state.messageTextIcon
                    }))),
                    t = n.createElement(y.BodyText, {
                        style: v.toastTitle,
                        disableThemeSubscription: !0,
                        numberOfLines: 1
                    }, e, this.state.messageText)
                } else
                    t = n.createElement(h, {
                        message: this.state.currentMessage,
                        options: e
                    });
                return n.createElement(n.View, {
                    style: v.toastMessageContentContainer
                }, t)
            }
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(1010)
      , r = i(169)
      , a = i(0)
      , l = i(7)
      , c = i(6)
      , d = i(31)
      , u = i(119)
      , g = i(79)
      , h = i(235)
      , p = i(57)
      , m = i(16)
      , S = i(69)
      , C = i(229)
      , y = i(800)
      , f = i(3060)
      , _ = i(702)
      , b = i(2)
      , v = i(210)
      , T = i(3)
      , P = i(1085)
      , A = i(1084)
      , k = i(213)
      , I = i(32)
      , w = i(192)
      , N = i(20)
      , M = i(511)
      , E = i(1102)
      , x = i(424)
      , D = i(34)
      , L = i(105)
      , R = i(21)
      , B = i(308)
      , O = i(19)
      , F = i(248)
      , V = i(830)
      , U = i(489)
      , H = i(45)
      , W = i(9);
    t.default = new class {
        constructor() {
            this._recentlyHandledMessages = [],
            this._subscriptions = [],
            R.RegisterStartupable(this, "PushNotificationsService", [p.default, I.default, M.default]),
            k.default.registerForLogout(this, "PushNotificationsService")
        }
        startup() {
            return this._startupTime = Date.now(),
            this._subscriptions.push(g.incomingCallMessageReceived.subscribe(e=>{
                const t = W.newCauseId();
                if (!c.default.getS4LCMCFeatures().enableMsnpFlamingoMessages)
                    return void T.log(b.LogTraceArea.Push, "Ignoring chat-based call notification causeId: " + t);
                T.log(b.LogTraceArea.Push, "Received new incoming call notification via chat causeId: " + t);
                const i = u.default.incomingCallNotificationForFlamingo(e)
                  , n = o.attempt(()=>Date.parse(e.originalarrivaltime))
                  , s = Date.now()
                  , r = !n || o.isError(n) ? n : s;
                d.default.CallNotificationHelpers.processIncomingCallNotification(i.evt, "msnp", i, r, s, t),
                d.default.CallNotificationHelpers.maybeDisposePendingWarmCallForNotification(i.evt)
            }
            )),
            this._subscriptions.push(M.default.event_pushNotificationQueueChanged.subscribe(()=>{
                this._drainPushQueue()
            }
            )),
            this._drainPushQueue(),
            L.default.performAfterUIStarted(()=>{
                d.default.CallNotificationHelpers.maybeDisposePendingWarmCall(b.WarmCallNotificationDisposition.FollowedByForegrounding)
            }
            ),
            l.Resolved()
        }
        _drainPushQueue() {
            o.each(M.default.getPushNotificationQueue(), e=>{
                this._processPushNotification(e.notification, e.causeId)
            }
            )
        }
        logout(e, t, i) {
            const n = this._subscriptions;
            return this._subscriptions = [],
            o.each(n, e=>e.unsubscribe()),
            s.default.setCount(0),
            l.Resolved()
        }
        _processPushNotification(e, t) {
            if (!e)
                return void T.error(b.LogTraceArea.Push, "Push notification payload was missing causeId: " + t);
            T.log(b.LogTraceArea.Push, "Acknowledging notification with correlation ID " + e.correlationId + " causeId: " + t),
            M.default.confirmPushNotificationProcessed(e);
            let i = e.serviceSpecificData;
            if (!i)
                return void T.error(b.LogTraceArea.Push, "Push notification serviceSpecificData was missing causeId: " + t);
            let s = i.data || i
              , r = x.PNHEvents.IncomingUnknown;
            s && s.eventType && (r = Number(s.eventType));
            const l = Date.now()
              , c = o.attempt(()=>new Date(e.receivedTimeMs || 0).toISOString());
            let h, m = "Push notification received (UI: " + L.default.isUIDisplayed() + ", Evt: " + r + ", Time: " + (o.isError(c) ? "unknown" : c) + ", causeId: " + t + ", cv: " + s.cv + ")";
            if (T.log(b.LogTraceArea.Push, m),
            s && s.recipientId && s.recipientId !== N.getSkypeId())
                return T.log(b.LogTraceArea.Push, "Push from " + D.mriOrId(s.recipientId) + " doesnt belong to current user " + D.mriOrId(N.getSkypeId()) + " causeId: " + t + ", cv: " + s.cv),
                T.track(new E.NotificationForIncorrectRecipientEvent(r,!0,e.receivedTimeMs)),
                void this._notificationProcessingCompleted(e.notificationProcessingId, t);
            if (d.default.CallNotificationHelpers.maybeDisposePendingWarmCallForNotification(r),
            B.default.startedProcessingPush(x.PNHEvents[r]),
            r) {
                if (r === x.PNHEvents.IncomingChatMessage || r === x.PNHEvents.IncomingChatGroupMessage || r === x.PNHEvents.IncomingChatMention || r === x.PNHEvents.IncomingChatHearts || r === x.PNHEvents.IncomingChatAudio || r === x.PNHEvents.IncomingChatVideo || r === x.PNHEvents.IncomingChatVideoCloud || r === x.PNHEvents.IncomingChatPhoto || r === x.PNHEvents.IncomingChatMoji || r === x.PNHEvents.IncomingChatFile || r === x.PNHEvents.ThreadActivity) {
                    const i = s;
                    this._consumePresenceFromPush(i.presenceStatus, e.receivedTimeMs),
                    h = this._processChatMessagePushNotification(i, e.receivedTimeMs || 0, t)
                } else if (r === x.PNHEvents.IncomingConsumptionHorizonChange) {
                    const i = s
                      , n = i.conversationVersion ? Number(i.conversationVersion) : 0;
                    T.log(b.LogTraceArea.Push, "Processing incoming consumption horizon notification: " + D.mriOrId(i.conversationId) + " CH=" + i.consumptionHorizon + ", Version=" + n + ", causeId=" + t + ", cv: " + s.cv),
                    this._consumePresenceFromPush(i.presenceStatus, e.receivedTimeMs),
                    h = p.default.processPushNotificationConsumptionHorizon(i.conversationId, i.consumptionHorizon, n)
                } else if (r === x.PNHEvents.IncomingContactListChange)
                    S.default.processContactListChangeNotification();
                else if (r === x.PNHEvents.IncomingContactRequest || r === x.PNHEvents.IncomingContactAccept || r === x.PNHEvents.IncomingContactInviteListChange)
                    S.default.processContactInviteNotification();
                else if (r === x.PNHEvents.IncomingContactBlockChange) {
                    const e = s;
                    0;
                    const t = o.toLower(e.parameters.context) === x.BlockContext;
                    h = S.default.processContactBlockChangeNotificationPotentiallyBeforeStartup(t, e.parameters.contactMri)
                } else if (r === x.PNHEvents.IncomingNGCCall || r === x.PNHEvents.IncomingNGCGroupCall || r === x.PNHEvents.IncomingNGCPSTNCall || r === x.PNHEvents.IncomingS4BCall || r === x.PNHEvents.IncomingNGCEncryptedCall) {
                    const i = s;
                    0,
                    h = d.default.CallNotificationHelpers.processIncomingCallNotification(r, "pnh", u.default.incomingCallNotificationForPnh(r, i), e.receivedTimeMs || 0, l, t)
                } else if (r === x.PNHEvents.IncomingGoLiveStart) {
                    const i = s;
                    h = d.default.CallNotificationHelpers.processIncomingGoLiveNotification(r, "pnh", u.default.incomingGoLivelNotificationForPnh(r, i), e.receivedTimeMs || 0, l, t)
                } else if (r === x.PNHEvents.IncomingGoLiveStop) {
                    const i = s;
                    h = d.default.CallNotificationHelpers.processGoLiveStopNotification(r, "pnh", u.default.stopGoLiveNotificationForPnh(r, i), e.receivedTimeMs || 0, l, t)
                } else if (r === x.PNHEvents.IncomingP2PCall) {
                    const i = s;
                    h = d.default.CallNotificationHelpers.processP2PCallNotification(r, "pnh", i, e.receivedTimeMs || 0, l, t)
                } else if (r === x.PNHEvents.IncomingNGCStopRinger) {
                    const i = s;
                    h = d.default.CallNotificationHelpers.processStopCallNotification("pnh", u.default.stopCallNotificationForPnh(r, i), e.receivedTimeMs || 0, l, t)
                } else if (r === x.PNHEvents.IncomingWarmCall) {
                    const e = s
                      , i = a.App.getActivationState() === a.Types.AppActivationState.Background && Date.now() - this._startupTime < 5e3;
                    h = d.default.CallNotificationHelpers.processWarmCallNotification(i, e, t)
                } else if (r === x.PNHEvents.IncomingProfileChange)
                    H.fetchUserPotentiallyBeforeStartup();
                else if (r === x.PNHEvents.IncomingAvatarChange)
                    H.fetchUserAvatarUrlPotentiallyBeforeStartup();
                else if (r === x.PNHEvents.SceUserServicesChange)
                    s ? _.processSceUserServicesChangeNotification(s) : T.error(b.LogTraceArea.Push, "PNHEvents.SceUserServicesChange missing pushNotificationData");
                else if (r === x.PNHEvents.CortanaSignalsConfigChange)
                    y.default.syncConfig();
                else if (r === x.PNHEvents.IncomingTPUMConciergeMessage) {
                    const e = s;
                    h = V.default.processTPUMNotification(e, t)
                } else if (r === x.PNHEvents.EmergencyRestoreEndpoints) {
                    const e = W.newCauseId()
                      , t = new f.default(e);
                    t.start(),
                    a.App.getActivationState() === a.Types.AppActivationState.Active ? (T.log(b.LogTraceArea.Push, "Push notification arrived while app in foreground. Ignoring payload. causeId: " + e + ", cv: " + s.cv),
                    t.ignored("AppActive"),
                    t.finish()) : h = R.EnsureStarted(g).then(()=>g.restoreEndpoints(e, t))
                }
            } else
                T.error(b.LogTraceArea.Push, "Unknown push event type for payload: " + n.pii.Omit(JSON.stringify(e)) + " causeId: " + t + ", cv: " + s.cv);
            this._notificationProcessingCompleted(e.notificationProcessingId, t, h, !1, s.cv)
        }
        _consumePresenceFromPush(e, t) {
            if (a.App.getActivationState() === a.Types.AppActivationState.Background && e && t && c.default.getS4LMessagingFeatures().consumePresenceFromPush) {
                let i = m.parseStatus(e);
                w.setStatus(U.UserPresenceChangeOrigin.PushNotification, i, t)
            }
        }
        _notificationProcessingCompleted(e, t, i, n=!1, o) {
            e && (i || l.Resolved()).always(()=>(T.log(b.LogTraceArea.Push, "pushProcessingPromise complete causeId: " + t + ", cv: " + o),
            l.all([C.default.flushNotificationProcessingPromises(), A.default.flushNotificationProcessingPromises()]))).always(()=>{
                T.log(b.LogTraceArea.Push, "notificationPromises completed causeId: " + t + ", cv: " + o),
                n ? R.EnsureStarted([A.default, P.default]).then(()=>{
                    A.default.processDelayedCallNotification(e)
                }
                ) : r.LocalNotifications.notificationProcessingCompleted(e),
                B.default.pushProcessingComplete()
            }
            )
        }
        _processChatMessagePushNotification(e, t, i) {
            if (!e || !e.rawPayload)
                return void T.warn(b.LogTraceArea.Push, "Chat service notification missing rawPayload: " + n.pii.Omit(JSON.stringify(e)) + " causeId: " + i + ", cv: " + e.cv);
            const s = e.rawPayload
              , r = o.isString(s) ? O.parseJsonErrorToUndefined(s) : s;
            let a;
            if (r && "conversationLink"in r ? (r.type || (r.type = "Message"),
            a = r) : r && "resource"in r && (a = r.resource),
            !a)
                return T.error(b.LogTraceArea.Push, "Error parsing raw payload from chat service notification: " + O.errorAsString(a) + " causeId: " + i + ", cv: " + e.cv + ", Payload: " + n.pii.Omit(s)),
                void T.track(new E.NotificationRawContentNotParsed(e.eventType || x.PNHEvents.IncomingUnknown,0 !== t ? t : void 0,!!e.pnhTime));
            {
                if (e.pnhTime && !a.conversationLink)
                    return void T.warn(b.LogTraceArea.Push, "Chat service notification missing rawPayload  property values: " + n.pii.Omit(JSON.stringify(e)) + " causeId: " + i + ", cv: " + e.cv);
                let t = (e.conversationId || "").replace("Skype:", "8:");
                const s = a.conversationLink
                  , r = o.last(s.split("/"));
                if (o.isString(a.isactive) && (a.isactive = "true" === a.isactive.toLowerCase()),
                o.isString(a.properties) && (a.properties = O.parseJsonErrorToUndefined(a.properties)),
                o.isString(a.amsreferences) && (a.amsreferences = O.parseJsonErrorToUndefined(a.amsreferences)),
                o.isString(a.encryptedkey) && (a.encryptedkey = O.parseJsonErrorToUndefined(a.encryptedkey)),
                t !== r) {
                    const n = JSON.stringify(e);
                    if (N.isMyMri(t))
                        T.track(new F.DevDebug("BadPushV2",n));
                    else {
                        const o = s.substr(0, s.length - r.length) + t;
                        a.conversationLink = o,
                        T.warn(b.LogTraceArea.Push, "Push Notification mismatch between conversationId and conversationLink causeId: " + i + ", cv: " + e.cv),
                        T.track(new F.DevDebug("BadPushV1",n))
                    }
                }
            }
            const l = m.getParsedConversationId(a);
            if (!l)
                return void T.error(b.LogTraceArea.Push, "Error parsing conversation ID from chat service notification: " + O.errorAsString(a) + " causeId: " + i + ", cv: " + e.cv + ", Payload: " + n.pii.Omit(s));
            if (N.isMyMri(l)) {
                const t = JSON.stringify(e);
                T.track(new F.DevDebug("BadPush",t)),
                T.error(b.LogTraceArea.Push, "Processed push as being in our own conversation: " + n.pii.Omit(t) + " causeId: " + i + ", cv: " + e.cv)
            }
            const d = !a.isactive;
            if (o.some(this._recentlyHandledMessages, e=>e.conversationLink === a.conversationLink && e.id === a.id && e.version >= a.version && (!0 === e.isactive || e.isactive === a.isactive)))
                return T.log(b.LogTraceArea.Push, "ignoring duplicate message (_recentlyHandledMessages) causeId: " + i + ", cv: " + e.cv),
                void T.track(new E.NotificationIgnoredAsDuplicate(e.eventType || x.PNHEvents.IncomingUnknown,0 !== t ? t : void 0));
            for (this._recentlyHandledMessages.push(a); this._recentlyHandledMessages.length > 50; )
                this._recentlyHandledMessages.shift();
            const u = m.getCreatorMriForMessageFromLink(a.from)
              , S = h.getCorrelationIdFromMessageParts(u, l, a.clientmessageid)
              , C = m.isEncryptedThread(l) && a.content === x.EncryptedContent;
            if (T.track(new v.FundamentalsMessagePushDebug(a.clientmessageid || "",S,"Received")),
            T.log(b.LogTraceArea.Push, "processing push notification, cv: " + e.cv + " conversationId=" + D.mriOrId(l) + " id=" + D.mriOrId(a.id) + " version=" + a.version + " isOtherEndpointActive=" + d + " causeId=" + i + " CMID=" + a.clientmessageid + " correlationId=" + S + " eventType=" + (e.eventType || "N/A") + " isEncryptedContentMissing=" + C),
            l === c.default.getConfigSettingsNoSubscription().cortana.mri && !c.default.getS4LCortanaFeatures().enabled)
                return;
            const y = a;
            return C ? R.EnsureStarted(g).then(()=>g.serviceGetConversationMessage(l, y.id).then(t=>(o.assign(t, {
                isactive: y.isactive
            }),
            p.default.processPushNotificationMessage(t, l, b.MessageOrigin.PushNotification, e.cv)))) : p.default.processPushNotificationMessage(a, l, b.MessageOrigin.PushNotification, e.cv).done(()=>{
                T.track(new v.FundamentalsMessagePushDebug(y.clientmessageid || "",S,"Processed"))
            }
            ).fail(e=>{
                T.track(new v.FundamentalsMessagePushDebug(y.clientmessageid || "",S,"ProcessingFailed","Error processing bundle: " + O.errorAsString(e)))
            }
            )
        }
        test_clearRecentlyHandledMessages() {
            this._recentlyHandledMessages = []
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(1227)
      , s = i(1827)
      , r = i(1828)
      , a = i(879)
      , l = i(1232)
      , c = i(1843)
      , d = i(55)
      , u = i(897)
      , g = i(1218);
    class h {
        static renderComponentForLeftNavContext(e, t, i, o, s) {
            const r = e.getConversationsListContext()
              , a = r ? r.state.selectedConversationId : void 0;
            switch (t) {
            case d.LeftNavViewMode.Recents:
                return n.createElement(l, Object.assign({
                    selectedConversationId: a,
                    useMobileView: !1,
                    isScrollToTopTarget: !1,
                    isActiveTab: !0,
                    useDesktopUtilityBar: o,
                    newActionPickerContext: o ? d.HubTab.Recents : void 0,
                    disableChangeAnimation: s
                }, i));
            case d.LeftNavViewMode.Search:
                const t = e.getSearchContext();
                return h.renderComponent(t, i, o);
            case d.LeftNavViewMode.ConversationInCall:
                const r = e.getConversationInCallContext();
                return r ? h.renderComponent(r, i, o) : void 0;
            case d.LeftNavViewMode.Calls:
                const c = o ? Object.assign(Object.assign({}, i), {
                    selectedConversationId: a
                }) : i
                  , u = e.getCallsContext();
                return h.renderComponent(u, c, o);
            case d.LeftNavViewMode.Contacts:
                const g = o ? Object.assign(Object.assign({}, i), {
                    selectedConversationId: a
                }) : i
                  , p = e.getContactsV2Context();
                return h.renderComponent(p, g, o);
            case d.LeftNavViewMode.Notifications:
                const m = e.getNotificationsContext();
                return h.renderComponent(m, i, o)
            }
        }
        static renderComponent(e, t, i, l) {
            return e instanceof d.ConversationsListNavigationContext ? n.createElement(c.default, Object.assign({
                currentTab: e.state.currentTab,
                hideHeader: i
            }, t)) : e instanceof d.SearchNavigationContext ? n.createElement(g, Object.assign({
                showGroupsFilter: !0,
                searchPanelInitiator: e.state.searchOrigin,
                initialSearchFilter: e.state.initialSearchFilter,
                searchInputSmallMode: i,
                selectedConversationId: l
            }, t)) : e instanceof d.ConversationInCallNavigationContext ? n.createElement(r.default, Object.assign({
                key: "callConversationPanel",
                conversationId: e.state.conversationId,
                callId: e.state.callId,
                onClose: e.state.onClose
            }, t)) : e instanceof d.QuickCallNavigationContext ? n.createElement(u, Object.assign({
                conversationId: e.state.conversationId,
                callId: e.state.callId,
                newGroup: e.state.newGroup,
                searchOnly: e.state.searchOnly,
                navigationDirection: e.state.navigationDirection,
                hideHeader: i,
                hideSearchBar: i,
                useExperimentalDesktopUtilityBar: i,
                newActionPickerContext: i ? d.HubTab.Calls : void 0
            }, t)) : e instanceof d.ContactsPanelV2NavigationContext ? n.createElement(a, Object.assign({
                initialTab: e.state.currentTab,
                hideHeader: i,
                hideSearchBar: i,
                useExperimentalDesktopUtilityBar: i,
                newActionPickerContext: i ? d.HubTab.People : void 0
            }, t)) : e instanceof d.AlertsHubNavigationContext ? n.createElement(o, Object.assign({
                hideHeader: i,
                useExperimentalDesktopUtilityBar: i
            }, t)) : e instanceof d.ArchivedConversationsPanelNavigationContext ? n.createElement(s, Object.assign({}, t)) : void 0
        }
    }
    t.default = h
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(1822)
      , r = i(422)
      , a = i(3101)
      , l = i(351)
      , c = i(51)
      , d = i(16)
      , u = i(42)
      , g = i(880)
      , h = i(202)
      , p = i(724)
      , m = i(188)
      , S = i(881)
      , C = i(211)
      , y = i(723)
      , f = i(2)
      , _ = i(3)
      , b = i(5)
      , v = i(4)
      , T = i(32)
      , P = i(17)
      , A = i(22)
      , k = i(1229)
      , I = i(1231)
      , w = i(455)
      , N = i(1780)
      , M = i(44)
      , E = i(94)
      , x = i(49)
      , D = i(14)
      , L = i(59)
      , R = i(215)
      , B = i(9)
      , O = [r.AlertTypeFilter.All, r.AlertTypeFilter.HighPriorityMessages, r.AlertTypeFilter.Reactions]
      , F = b.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            flex: 1,
            overflow: "visible"
        })
    });
    class V extends c.default {
        constructor() {
            super(...arguments),
            this._shadowVisible = !1,
            this._shadowOpacityValue = new o.Animated.Value(0),
            this._shadowOpacityStyle = o.Styles.createAnimatedViewStyle({
                opacity: this._shadowOpacityValue
            }),
            this._handleMenuCommand = e=>{
                if (!this.isComponentMounted())
                    return;
                if (s.default.handleOverflowActionMenuCommand(e, this._getRootViewId()))
                    return;
                const t = s.default.filterForCommand(e);
                n.isUndefined(t) || (T.default.setUserPreferencesLocal({
                    alertsFilter: t
                }),
                this.setState({
                    filter: t
                }))
            }
            ,
            this._onAlertsPanelRef = e=>{
                this._alertsPanel = e || void 0
            }
            ,
            this._onPressAlertCard = e=>{
                const t = B.newCauseId();
                switch (_.log(f.LogTraceArea.Navigation, "AlertsHubPanel._onPressAlertCard, causeId: " + t),
                e.alertType) {
                case r.AlertType.MissedCallbackReminder:
                    e.missedCallbackReminderCalleeMri && P.navigateToConversation({
                        convId: e.missedCallbackReminderCalleeMri,
                        causeId: t,
                        origin: f.NavigationConversationOrigin.AlertsPanel
                    });
                    break;
                case r.AlertType.Engagement:
                    if (e.popCardInfo)
                        if (this.state.isUsingStackNavigationContext)
                            P.navigateToHub(t),
                            w.default.toggleCardById(!0, e.popCardInfo.guid);
                        else {
                            const t = w.default.getCardsById([e.popCardInfo.guid]);
                            I.default.openPopCard(t, this._getRootViewId())
                        }
                    break;
                case r.AlertType.Notice:
                    if (e.noticeMessageInfo) {
                        const t = e.noticeMessageInfo;
                        let i = {
                            eventType: C.EngagementTelemetryEventType.NoticeTapCard,
                            campaignId: t.campaignId,
                            campaignTrackId: y.getTrackingQueryParam(t.mainActionUri),
                            actionOrigin: C.ActionOrigin.Notification,
                            messageCorrelationId: t.messageCorrelationId,
                            engagementTelemetryAttributes: t.engagementTelemetryAttributes
                        };
                        if (t.contentType === k.NoticeMessageContentType.NoticeWithAvatar && t.skypeId && t.showStatusIndicator) {
                            const e = d.skypeIdToMri(d.asSkypeId(t.skypeId));
                            if (d.isMriWithUserMetadata(e)) {
                                const t = R.default.getUserStatusWithOptions(e, h.default.getAllowedUserStatuses());
                                i.userStatus = t
                            }
                        }
                        _.track(new C.EngagementNoticeTelemetryEvent(i));
                        const n = ()=>{
                            e.noticeMessageInfo && S.onNoticeOpen(e.noticeMessageInfo)
                        }
                        ;
                        if (!e.noticeMessageInfo.mainActionUri)
                            return;
                        p.default.openUri({
                            onDone: n,
                            type: m.EngagementType.Notice,
                            title: e.noticeMessageInfo.modalTitle,
                            uri: e.noticeMessageInfo.mainActionUri,
                            target: e.noticeMessageInfo.mainActionTarget,
                            campaignId: e.noticeMessageInfo.campaignId,
                            messageCorrelationId: e.noticeMessageInfo.messageCorrelationId
                        }, this._getRootViewId())
                    }
                }
            }
            ,
            this._onScroll = (e,t)=>{
                if (this.props.useExperimentalDesktopUtilityBar) {
                    const t = e > 0;
                    this._shadowVisible !== t && (this._shadowOpacityValue.setValue(t ? .5 : 0),
                    this._shadowVisible = t)
                }
            }
            ,
            this._onOverflowButtonPress = e=>{
                s.default.showMenu(this.state.hasUnreadAlerts, ()=>this._overflowIconButton, this._getRootViewId(), e)
            }
            ,
            this._onOverflowButtonRef = e=>{
                this._overflowIconButton = e || void 0
            }
        }
        _buildState(e, t) {
            let i = r.AlertTypeFilter.All;
            return e.useExperimentalDesktopUtilityBar && (i = T.default.getUserPreferencesLocal().alertsFilter || r.AlertTypeFilter.All),
            {
                isUsingStackNavigationContext: A.default.isUsingStackNavigationContext(),
                useTabletUI: L.useTabletUI(),
                hasUnreadAlerts: l.default.hasUnreadAlerts(!0),
                filter: i
            }
        }
        scrollToTop() {
            this._alertsPanel && this._alertsPanel.scrollToTop()
        }
        render() {
            const e = this.props.useExperimentalDesktopUtilityBar ? this._renderUtilityBar() : void 0
              , t = this.props.useExperimentalDesktopUtilityBar ? this._renderShadow() : void 0;
            let i;
            i = this._isPresentedInDesktopLeftNav() ? this._themeStyles.secondaryBackgroundColorStyle : this._getContext().isPresentedInDesktopSubview && !this._getContext().isPresentedInDesktopLeftNav ? this._themeStyles.popoverBackgroundColorStyle : this._themeStyles.primaryBackgroundColorStyle;
            const n = [F.container, i];
            let s = o.createElement(a, {
                ref: this._onAlertsPanelRef,
                filter: this.state.filter,
                requireDoubleClick: this.props.requireDoubleClick,
                onScroll: this.props.useExperimentalDesktopUtilityBar ? this._onScroll : void 0,
                onPressAlertCard: this._onPressAlertCard
            });
            return t && (s = o.createElement(o.View, {
                style: D.flexOne
            }, s, t)),
            o.createElement(o.View, {
                style: n
            }, this._renderSimpleHeader(), e, s)
        }
        _renderUtilityBar() {
            const e = s.default.menuItemTitle(this.state.filter, !0)
              , t = u.default.combinedAccessibilityLabel(v.getString("AlertsPanel.ViewByMenu"), e);
            return o.createElement(N.default, {
                getMenuSections: this._getMenuSections(),
                currentMenuText: e,
                accessibilityText: t,
                onHandleMenuCommand: this._handleMenuCommand
            })
        }
        _renderShadow() {
            return o.createElement(g.default, {
                opacityStyle: this._shadowOpacityStyle
            })
        }
        _getMenuSections() {
            return [{
                key: "alertfilters",
                menuItems: n.map(O, e=>({
                    text: s.default.menuItemTitle(e, !1),
                    command: s.default.menuItemCommand(e),
                    selected: e === this.state.filter,
                    isCheckbox: !0
                }))
            }, {
                key: "alertcommands",
                menuItems: s.default.menuItems(this.state.hasUnreadAlerts)
            }]
        }
        _renderSimpleHeader() {
            if (this.props.hideHeader)
                return;
            const e = this._getContext().isPresentedInDesktopSubview ? void 0 : {
                closeButtonType: M.CloseButtonType.Close
            }
              , t = [];
            return this._getContext().isPresentedInDesktopSubview || t.push({
                icon: x.moreIcon(),
                title: v.getString("MyProfilePanel.OverflowButtonTitle"),
                onPress: this._onOverflowButtonPress,
                setButtonRef: this._onOverflowButtonRef
            }),
            o.createElement(M.SimplePanelHeader, {
                panelName: v.getString("SettingsHubHeader.NotificationsTitle"),
                leftButton: e,
                rightButtons: t,
                useTransparentBackground: this._getContext().isPresentedInDesktopSubview
            })
        }
        _updateCurrentTheme(e, t) {
            const i = super._updateCurrentTheme(e, t);
            return E.createBarStyle(this._themeColors.defaultStatusBarTheme, !0),
            i
        }
    }
    e.exports = V
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    var o;
    !function(e) {
        e[e.ConversationList = 0] = "ConversationList",
        e[e.AlertPanel = 1] = "AlertPanel"
    }(o = t.NotificationPromptOrigin || (t.NotificationPromptOrigin = {}));
    class s extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._origin = e
        }
        getEventName() {
            return "notificationsPrompt_action"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e.Origin = o[this._origin],
            e
        }
    }
    t.NotificationsPromptDisplayed = class extends s {
        getActionName() {
            return "displayed"
        }
    }
    ;
    t.NotificationsPromptSettingsOpened = class extends s {
        constructor() {
            super(...arguments),
            this._enabledNotifications = !1
        }
        getActionName() {
            return "opened"
        }
        enabledNotifications() {
            this._enabledNotifications = !0
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Enabled_Notifications = this._enabledNotifications,
            e
        }
    }
    ;
    t.NotificationsPromptClosed = class extends s {
        getActionName() {
            return "closed"
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(36)
      , o = i(70)
      , s = i(0)
      , r = i(40)
      , a = i(27)
      , l = i(3)
      , c = i(5)
      , d = i(4)
      , u = i(1824)
      , g = i(1230)
      , h = i(75)
      , p = i(24)
      , m = i(8)
      , S = i(23)
      , C = i(11)
      , y = i(25)
      , f = i(59)
      , _ = i(15)
      , b = i(12)
      , v = c.lazyProperties({
        container: ()=>s.Styles.createViewStyle({
            paddingVertical: 15,
            paddingHorizontal: 15,
            borderStyle: "solid",
            borderBottomWidth: 1
        }),
        containerBottomBorder: ()=>s.Styles.createViewStyle({
            borderBottomWidth: 10
        }),
        alternativePortraitContent: ()=>s.Styles.createViewStyle({
            alignItems: "center",
            paddingBottom: 20
        }),
        desktopContent: ()=>s.Styles.createViewStyle({
            alignItems: "flex-end",
            paddingTop: 0,
            paddingLeft: 0,
            paddingRight: 0,
            paddingBottom: 10,
            marginBottom: 5
        }),
        blueBackground: ()=>s.Styles.createViewStyle({
            backgroundColor: m.Color.blue
        }),
        paragraphMargin: ()=>s.Styles.createViewStyle({
            marginBottom: 10
        }),
        centeredParagraph: ()=>s.Styles.createViewStyle({
            justifyContent: "center"
        }),
        headingRow: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center"
        }),
        textHeader: ()=>s.Styles.createTextStyle({
            marginHorizontal: 10,
            textAlign: "center"
        }),
        headingRowPortrait: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "center",
            alignSelf: "stretch",
            paddingTop: 5
        }),
        headingRowDesktop: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignSelf: "stretch",
            paddingTop: 9
        }),
        descriptionRow: ()=>s.Styles.createTextStyle({
            textAlign: "center",
            marginHorizontal: 5
        }),
        descriptionRowDesktop: ()=>s.Styles.createTextStyle({
            marginHorizontal: 12,
            fontSize: S.controlFontSize.subtitle
        }),
        button: ()=>s.Styles.createViewStyle({
            marginTop: 5
        }),
        buttonDesktop: ()=>s.Styles.createButtonStyle({
            marginRight: 12
        }),
        buttonTextStyle: ()=>s.Styles.createTextStyle({
            fontSize: S.controlFontSize.smallButton
        }),
        closeButton: ()=>s.Styles.createViewStyle({
            position: "absolute",
            right: -10,
            top: -10,
            padding: 10
        }),
        closeButtonDesktop: ()=>s.Styles.createViewStyle({
            position: "absolute",
            right: -3,
            top: -3,
            padding: 10
        }),
        titleIcon: ()=>s.Styles.createViewStyle({
            marginTop: 3,
            marginLeft: 12,
            marginRight: 5
        }),
        whiteText: ()=>s.Styles.createTextStyle({
            color: m.Color.white
        }),
        lightThemeBorder: ()=>s.Styles.createViewStyle({
            borderColor: m.Color.gray50
        }),
        darkThemeBorder: ()=>s.Styles.createViewStyle({
            borderColor: m.Color.gray400
        })
    });
    class T extends b.default {
        constructor() {
            super(...arguments),
            this._onNotificationPermissionRequestFailed = ()=>{
                h.default.closeNotificationsPrompt()
            }
            ,
            this._onAttemptToChangeNotificationPermissionStatus = e=>{
                e === o.PermissionStatus.Granted && h.default.closeNotificationsPrompt()
            }
            ,
            this._onClose = ()=>{
                h.default.closeNotificationsPrompt(),
                l.track(new g.NotificationsPromptClosed(g.NotificationPromptOrigin.ConversationList))
            }
        }
        static containsLargeContent() {
            return T.getHeadingText().length > 100
        }
        static getHeadingText() {
            return d.getString("NotificationsPrompt.Text")
        }
        _buildState(e, t) {
            const i = this._getContext().isPresentedInDesktopLeftNav && !f.isTablet();
            return {
                isDesktop: i,
                hideButton: h.default.permissionStatus(y.PermissionType.Notifications) === o.PermissionStatus.Denied,
                deviceOrientation: i ? n.DeviceOrientation.Portrait : p.default.getDeviceOrientation(this._getRootViewId())
            }
        }
        render() {
            const e = [this._themeStyles.primaryBackgroundColorStyle, this._themeStyles.dividerBorderColorStyle, v.container]
              , t = this.state.deviceOrientation === n.DeviceOrientation.Landscape
              , i = !t;
            this.state.isDesktop || e.push(v.containerBottomBorder),
            e.push(this._useDarkTheme() ? v.darkThemeBorder : v.lightThemeBorder),
            this.state.isDesktop ? e.push(v.desktopContent) : i && e.push(v.alternativePortraitContent),
            e.push(v.blueBackground),
            this.props.style && e.push(this.props.style);
            const o = this.state.isDesktop ? [v.paragraphMargin, v.headingRowDesktop] : i ? [v.paragraphMargin, v.headingRowPortrait] : [v.headingRow]
              , r = v.whiteText
              , a = this._renderTitleIcon()
              , l = this._renderCloseButton();
            let c;
            if (this.state.isDesktop) {
                const e = [v.paragraphMargin];
                c = s.createElement(s.View, {
                    style: e
                }, s.createElement(s.Text, {
                    style: [v.descriptionRowDesktop, r]
                }, T.getHeadingText()))
            } else if (i) {
                const e = [v.paragraphMargin, v.centeredParagraph];
                c = s.createElement(s.View, {
                    style: e
                }, s.createElement(s.Text, {
                    style: [v.descriptionRow, r],
                    numberOfLines: 3,
                    ellipsizeMode: "tail"
                }, T.getHeadingText()))
            }
            const h = this.state.isDesktop ? v.buttonDesktop : t ? void 0 : v.button
              , p = {
                textColor: m.Color.black,
                backgroundColor: m.Color.white
            }
              , S = this.state.hideButton ? void 0 : s.createElement(u.NotificationPermissionPromptActionButton, {
                origin: g.NotificationPromptOrigin.ConversationList,
                title: d.getString("NotificationsPrompt.ButtonLabel"),
                style: h,
                textStyle: v.buttonTextStyle,
                buttonConfig: p,
                onAttemptToChangeNotificationPermissionStatus: this._onAttemptToChangeNotificationPermissionStatus,
                onNotificationPermissionRequestFailed: this._onNotificationPermissionRequestFailed
            })
              , C = this._getHeadingVariant()
              , y = this.state.isDesktop ? r : [r, v.textHeader];
            return s.createElement(s.View, {
                style: e
            }, s.createElement(s.View, {
                style: o
            }, a, s.createElement(_.RowTitle, {
                style: y,
                disableThemeSubscription: !0
            }, C), l, t ? S : void 0), c, i ? S : void 0)
        }
        _getHeadingVariant() {
            const e = this.state.deviceOrientation === n.DeviceOrientation.Landscape;
            return this.state.isDesktop ? d.getString("NotificationsPrompt.HeadingEnableWeb") : e ? d.getString("NotificationsPrompt.ShortText") : d.getString("NotificationsPrompt.Heading")
        }
        _renderTitleIcon() {
            if (this.state.isDesktop)
                return s.createElement(a.default, {
                    size: C.IconSize.size16,
                    color: m.Color.white,
                    icon: C.SkypeIcon.Alert,
                    style: v.titleIcon
                })
        }
        _renderCloseButton() {
            if (this.state.deviceOrientation !== n.DeviceOrientation.Landscape)
                return s.createElement(r.default, {
                    size: C.IconSize.size16,
                    color: m.Color.white,
                    hoverColor: m.Color.white,
                    icon: C.SkypeIcon.ClosePanel,
                    style: this.state.isDesktop ? v.closeButtonDesktop : v.closeButton,
                    title: d.getString("NotificationsPrompt.CloseButtonTitle"),
                    onPress: this._onClose
                })
        }
    }
    t.default = T
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.None = 0] = "None",
        e[e.InvalidParameters = 1] = "InvalidParameters"
    }(t.ActionResult || (t.ActionResult = {}))
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(16)
      , r = i(71)
      , a = i(2)
      , l = i(3)
      , c = i(4)
      , d = i(155)
      , u = i(574)
      , g = e=>{
        l.log(a.LogTraceArea.ConnectivityStatusBar, e)
    }
    ;
    var h;
    !function(e) {
        e[e.NO_CONNECTION = 0] = "NO_CONNECTION",
        e[e.CONNECTING = 1] = "CONNECTING",
        e[e.UPDATING = 2] = "UPDATING",
        e[e.INFO = 3] = "INFO",
        e[e.CAPTIVE_PORTAL = 4] = "CAPTIVE_PORTAL"
    }(h = t.PillStatus || (t.PillStatus = {}));
    let p = class extends o.StoreBase {
        constructor() {
            super(),
            this._isMsgStoreLoading = !1,
            this._isUnread = !1,
            this._updateConvSyncStatus = e=>()=>{
                const t = u.default.isConversationSyncing(e);
                this._isConversationSyncing !== t && (this._isConversationSyncing = t,
                this.trigger())
            }
            ,
            this._updateLoadingState = ()=>{
                const e = this._isMsgStoreLoading
                  , t = !!this._messageStreamStore && this._messageStreamStore.isLoadingItemsFromNetwork();
                this._isMsgStoreLoading = !!t,
                e !== t && this.trigger()
            }
            ,
            this._updateConnectionStatus = ()=>{
                const e = d.default.getConnectionStatus();
                e !== this._connectionStatus && (this._connectionStatus = e,
                this.trigger())
            }
            ,
            this._updateConvListSyncingStatus = ()=>{
                const e = u.default.isSyncingConversationList();
                this._isConversationListSyncing !== e && (this._isConversationListSyncing = e,
                this.trigger())
            }
            ,
            this._networkConnectionStoreSubscriptionToken = d.default.subscribe(this._updateConnectionStatus),
            this._updateConnectionStatus(),
            this._syncStatusStoreSubscriptionToken = u.default.subscribe(this._updateConvListSyncingStatus, u.TriggerKeys.ConversationList),
            this._updateConvListSyncingStatus()
        }
        destroy() {
            this._syncStatusStoreSubscriptionToken && (u.default.unsubscribe(this._syncStatusStoreSubscriptionToken),
            this._syncStatusStoreSubscriptionToken = void 0),
            this._networkConnectionStoreSubscriptionToken && (d.default.unsubscribe(this._networkConnectionStoreSubscriptionToken),
            this._networkConnectionStoreSubscriptionToken = void 0)
        }
        showAsUnread() {
            return this._isUnread
        }
        getContent(e, t) {
            return (()=>{
                const i = this.getPillStatus();
                if (e) {
                    switch (i) {
                    case h.CAPTIVE_PORTAL:
                    case h.NO_CONNECTION:
                        return c.getString("ConnectivityStatusBar.NoInternetConnection");
                    case h.CONNECTING:
                        return c.getString("ConnectivityStatusBar.Connecting");
                    case h.UPDATING:
                        return c.getString("Global.LoadingStatus")
                    }
                    return c.getString("ConnectivityStatusBar.Connected")
                }
                switch (i) {
                case h.CAPTIVE_PORTAL:
                case h.NO_CONNECTION:
                    return c.getString("ConnectivityStatusBar.NoInternetConnection");
                case h.CONNECTING:
                    return c.getString("ConnectivityStatusBar.Connecting");
                case h.UPDATING:
                    return c.getString("ConnectivityStatusBar.UpdatingConversation")
                }
                return this._getTextForInfo(t)
            }
            )()
        }
        getPillStatus() {
            return this._connectionStatus === d.ConnectionStatus.PossibleCaptivePortal ? h.CAPTIVE_PORTAL : this._isConnected() ? this._isMsgStoreLoading || this._isConversationListSyncing || this._isConversationSyncing ? h.UPDATING : h.INFO : this._connectionStatus === d.ConnectionStatus.DisconnectedNoNetworkingReported ? h.NO_CONNECTION : h.CONNECTING
        }
        setMessageStreamStore(e) {
            e !== this._messageStreamStore ? (this._msgStoreSubscription && this._messageStreamStore && (g("setMessageStreamStore: clearing subscription"),
            this._messageStreamStore.unsubscribe(this._msgStoreSubscription),
            this._msgStoreSubscription = void 0),
            this._messageStreamStore = e,
            this._messageStreamStore && (g("setMessageStreamStore: creating new subscription"),
            this._msgStoreSubscription = this._messageStreamStore.subscribe(this._updateLoadingState)),
            this._updateLoadingState()) : g("setMessageStreamStore: The store instance is the same, returning")
        }
        setTopPartiallyVisibleMessage(e) {
            e && this._topVisibleMessage !== e && (this._topVisibleMessage = e,
            void 0 === this._isConversationSyncing && (u.default.subscribe(this._updateConvSyncStatus(e.conversationId)),
            this._updateConvSyncStatus(e.conversationId)()),
            this.trigger())
        }
        setUnread(e) {
            e !== this._isUnread && (this._isUnread = e,
            this.trigger())
        }
        _getTextForInfo(e) {
            let t = "";
            return this._topVisibleMessage && (t = r.getDisplayDateString(this._topVisibleMessage.createdTime)),
            this._isUnread && (t = e && s.isPhoneMri(e) ? c.getString("MessageStream.UnreadSmsMarkerStickerTemplated", {
                timestamp: t
            }) : c.getString("MessageStream.UnreadMarkerStickerTemplated", {
                timestamp: t
            })),
            t
        }
        _isConnected() {
            return this._connectionStatus === d.ConnectionStatus.Connected
        }
    }
    ;
    n.__decorate([o.autoSubscribe], p.prototype, "showAsUnread", null),
    n.__decorate([o.autoSubscribe], p.prototype, "getContent", null),
    n.__decorate([o.autoSubscribe], p.prototype, "getPillStatus", null),
    p = n.__decorate([o.AutoSubscribeStore], p),
    t.default = p
}
, , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(11);
    t.getEnumEntries = function(e) {
        return Object.keys(e).filter(t=>!isNaN(Number(e[t])))
    }
    ,
    t.getIconSizeFromEnumPropertyName = function(e) {
        return n.IconSize[e]
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    !function(e) {
        e.completed = "shareToSkype_action",
        e.opened = "shareToSkype_open"
    }(t.ShareToSkypeEventActions || (t.ShareToSkypeEventActions = {}));
    class o extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._params = e
        }
        getEventName() {
            return "messaging_share_to_skype"
        }
        getAttributes() {
            let e = super.getAttributes();
            e.Action = this._params.action,
            e.ConversationsCount = this._params.conversationsCount || 0,
            e.MessageAdded = this._params.messageAdded || !1,
            e.IsSharedToContact = this._params.isSharedToContact || !1,
            e.ErrorCode = this._params.errorCode || 0,
            e.IsSendingVideo = !1,
            e.IsSendingImage = !1,
            e.TotalCount = 0;
            const t = this._params.event;
            let i = t.type;
            if ("media" === i && void 0 !== t.data) {
                i = 1 === t.data.length ? t.data[0].type : "multiple",
                e.TotalCount = t.data.length;
                for (let i of t.data)
                    "video" === i.type && (e.IsSendingVideo = !0),
                    "image" === i.type && (e.IsSendingImage = !0)
            }
            return e.Type = i,
            e
        }
    }
    t.default = o
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = {
        am: "et",
        ar: "sa",
        bg: "bg",
        bn: "in",
        ca: "es",
        cs: "cz",
        cy: "gb",
        da: "dk",
        de: "de",
        el: "gr",
        en: "us",
        es: "es",
        et: "ee",
        eu: "es",
        fa: "ir",
        fi: "fl",
        fil: "ph",
        fr: "fr",
        gl: "es",
        gu: "in",
        he: "il",
        hi: "in",
        hr: "hr",
        hu: "hu",
        id: "id",
        is: "is",
        it: "it",
        ja: "jp",
        kk: "kz",
        kn: "in",
        ko: "kr",
        ku: "arab-iq",
        lt: "lt",
        lv: "lv",
        ml: "in",
        mr: "in",
        ms: "my",
        nb: "no",
        nl: "nl",
        nn: "no",
        or: "in",
        pl: "pl",
        pt: "PT",
        "pt-pt": "pt",
        "pt-br": "br",
        ro: "ro",
        ru: "ru",
        sk: "sk",
        sl: "si",
        sr: "cyrl-rs",
        "sr-cyrl": "cyrl-rs",
        "sr-latn": "latn-rs",
        sv: "se",
        sw: "ke",
        ta: "in",
        te: "in",
        th: "th",
        tr: "tr",
        uk: "ua",
        ur: "pk",
        vi: "vn",
        zh: "cn",
        "zh-hant": "tw",
        "zh-cht": "tw",
        "zh-hk": "tw",
        "zh-mo": "tw"
    };
    t.getDefaultLocale = function(e) {
        return n[e] || ""
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(273);
    class s extends o.default {
        constructor(e) {
            if (super(),
            e)
                for (let t in e)
                    e.hasOwnProperty(t) && (this[t] = e[t])
        }
        mergePartialUpdate(e) {
            let t = Object.create(this.constructor.prototype);
            for (let e in this)
                this.hasOwnProperty(e) && (t[e] = n.cloneDeep(this[e]));
            return n.each(e, (e,i)=>{
                t[i] = e
            }
            ),
            t
        }
    }
    t.default = s
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(325)
      , s = i(39);
    var r;
    !function(e) {
        e[e.SmsLineSwitcherShown = 0] = "SmsLineSwitcherShown",
        e[e.SmsDeliveryFailed = 1] = "SmsDeliveryFailed"
    }(r || (r = {}));
    class a extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = r[this._action],
            e
        }
        getEventName() {
            return "messaging_sms"
        }
    }
    t.SmsLineSwitcherShown = class extends a {
        constructor() {
            super(r.SmsLineSwitcherShown),
            this._wasSmsSent = !1,
            this._wasSkypeMessageSent = !1,
            this._switchedToSkype = !1,
            this._switchedToSms = !1,
            this._flowId = o.default.getFlowId()
        }
        setSmsWasSent(e) {
            this._wasSmsSent = e
        }
        setSwitchedToSmsMode(e) {
            this._switchedToSms = e
        }
        setSwitchedToSkype(e) {
            this._switchedToSkype = e
        }
        setFlowId(e) {
            this._flowId = e
        }
        setSkypeMessageSent(e) {
            this._wasSkypeMessageSent = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.DidSwitchToSms = this._switchedToSms,
            e.DidSendSMS = this._wasSmsSent,
            e.DidSwitchToSkype = this._switchedToSkype,
            e.DidSendSkypeMsg = this._wasSkypeMessageSent,
            e.FlowId = this._flowId,
            e
        }
    }
    ;
    t.SmsDeliveryFailed = class extends a {
        constructor(e, t) {
            super(r.SmsDeliveryFailed),
            this._clientMessageId = e,
            this._deliveryStatus = t
        }
        getAttributes() {
            return n.assign({}, super.getAttributes(), {
                ClientMessageId: this._clientMessageId || "",
                ErrorCategory: this._deliveryStatus.errorCategory,
                Status: this._deliveryStatus.status
            })
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(1363)
      , r = i(52)
      , a = i(7)
      , l = i(2154)
      , c = i(2)
      , d = i(3)
      , u = i(638)
      , g = i(19);
    function h(e) {
        return e && (e.name && ("TransactionInactiveError" === e.name || "TimeoutError" === e.name) || e.target && e.target.transaction && e.target.transaction.error && "TimeoutError" === e.target.transaction.error.name) ? (u.reloadApp("client-database-db-error"),
        a.Defer().promise()) : a.Rejected(e)
    }
    s.ErrorCatcher = h;
    t.ClientDatabaseBase = class {
        constructor(e) {
            this._transClass = e,
            this.event_databaseError = new r.default,
            this._databaseError = e=>{
                if (e.target) {
                    if (e.target.error) {
                        const t = e.target.error;
                        d.error(c.LogTraceArea.SQLiteClient, `IDBRequest: ${t.name}: ${t.message}`)
                    }
                    if (e.target.transaction && e.target.transaction.error) {
                        const t = e.target.transaction.error;
                        d.error(c.LogTraceArea.SQLiteClient, `IDBTransaction: ${t.name}: ${t.message}`)
                    }
                    if (e.target.source) {
                        const t = e.target.source;
                        d.error(c.LogTraceArea.SQLiteClient, `IDBStore: ${t.name}, ${t.keyPath}, indexes: ${o.join(t.indexNames)}`)
                    }
                }
                if (e instanceof Error) {
                    d.error(c.LogTraceArea.SQLiteClient, "DB error: " + e);
                    let t = e;
                    e = {
                        message: t.message,
                        stack: t.stack
                    }
                }
                this.event_databaseError.fire(e)
            }
            ,
            this._handleDatabaseDeleteSuccess = ()=>{
                d.log(c.LogTraceArea.GenericUnsafe, "Deleted Database " + n.pii.Omit(this._databaseName || ""))
            }
            ,
            this._handleDatabaseDeleteError = e=>(d.log(c.LogTraceArea.GenericUnsafe, "DB delete Failure for " + n.pii.Omit(this._databaseName || "") + " :" + e.toString()),
            this.clearAllDataInDB())
        }
        getProviderInfo() {
            return this._db
        }
        open(e, t, i=!1, n=!1) {
            return this._customOpenListOfProviders(e, t, this._schema, i, n).then(e=>{
                this._databaseName = t,
                this._db = e
            }
            )
        }
        _customOpenListOfProviders(e, t, i, o=!1, s=!1) {
            const r = a.Defer();
            let l = 0
              , u = [];
            d.log(c.LogTraceArea.GenericUnsafe, `Opening Database: ${n.pii.Omit(t)} Providers: ${e.length} verbose: ${s}, wipe: ${o}`);
            const h = ()=>{
                if (l >= e.length)
                    return void r.reject(u.length <= 1 ? u[0] : u);
                let n = e[l];
                n.provider.open(t, i, o, s).then(()=>{
                    d.log(c.LogTraceArea.GenericUnsafe, "Provider " + n.name + ": Open Success!"),
                    r.resolve(n)
                }
                , e=>{
                    d.error(c.LogTraceArea.GenericUnsafe, "Provider " + n.name + ": Open Failure: " + g.errorAsString(e)),
                    u.push(e),
                    l++,
                    h()
                }
                )
            }
            ;
            return h(),
            r.promise()
        }
        isInitialized() {
            return !!this._db
        }
        _close() {
            return d.log(c.LogTraceArea.GenericUnsafe, `Closing database ${n.pii.Omit(this._databaseName || "")}...`),
            this._db ? this._db.provider.close() : a.Rejected("No Database to close")
        }
        nukeDB() {
            if (!this._db)
                return a.Rejected("No Database to delete");
            try {
                d.log(c.LogTraceArea.GenericUnsafe, `Deleting Database ${n.pii.Omit(this._databaseName || "")}...`);
                const e = this._db.provider.deleteDatabase();
                return a.raceTimer(e, 15e3).then(e=>{
                    e.timedOut ? this._handleDatabaseDeleteError("Promise timed out in 15000 ms") : this._handleDatabaseDeleteSuccess()
                }
                )
            } catch (e) {
                return d.log(c.LogTraceArea.GenericUnsafe, "DB delete Failure: " + e.toString()),
                this.clearAllDataInDB()
            }
        }
        clearAllDataInDB() {
            if (!this._db)
                return a.Rejected("No Database to clear");
            try {
                return d.log(c.LogTraceArea.GenericUnsafe, `Clearing all data in the Database ${n.pii.Omit(this._databaseName || "")}...`),
                this._db.provider.clearAllData().then(()=>{
                    d.log(c.LogTraceArea.GenericUnsafe, "Cleared all data in the Database " + n.pii.Omit(this._databaseName || ""))
                }
                , e=>{
                    d.log(c.LogTraceArea.GenericUnsafe, "Clear all data Failure " + n.pii.Omit(this._databaseName || "") + ": " + e.toString())
                }
                )
            } catch (e) {
                return d.log(c.LogTraceArea.GenericUnsafe, "Clear all data Failure: " + e.toString()),
                a.Rejected(e)
            }
        }
        openTransaction(e, t) {
            const i = Date.now();
            return this._db ? this._db.provider.openTransaction(e, t).then(n=>{
                const o = Date.now();
                return n.getCompletionPromise().then(()=>{
                    const n = o - i
                      , s = Date.now() - o;
                    (n > 300 || s > 300) && d.log(c.LogTraceArea.GenericUnsafe, "Database Transaction Duration Warning: Stores: " + e.join(",") + ", Write: " + t + ", Lock Time: " + n + "ms, Execute Time: " + s + "ms")
                }
                ),
                new this._transClass(n,this._databaseError)
            }
            ).catch(e=>h(e)) : a.Rejected("No Database - Unable to open transaction")
        }
    }
    ;
    t.ClientDatabaseTransactionBase = class {
        constructor(e, t) {
            this._trans = e,
            this._databaseError = t
        }
        markCompleted() {
            this._trans.markCompleted()
        }
        _getStore(e) {
            return l.getStore(this._trans.getStore(e), e)
        }
        _getStoreIndex(e, t) {
            return this._getStore(e).openIndex(t)
        }
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(273);
    class o extends n.default {
        constructor(e) {
            super(),
            this.value = e
        }
        isImmutable() {
            return !0
        }
    }
    t.default = o
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(26)
      , r = i(6)
      , a = i(21);
    let l, c = !1, d = !1, u = !0;
    function g() {
        return r.default.getS4LFeatures().beforeStartupDecorator.enabled && !0
    }
    function h(e, t) {
        try {
            return e()
        } finally {
            t()
        }
    }
    function p(e) {
        const t = e;
        return t.__beforeStartupMetadata = t.__beforeStartupMetadata || {},
        t
    }
    function m(e, t) {
        return e.__beforeStartupMetadata[t] || (e.__beforeStartupMetadata[t] = {}),
        e.__beforeStartupMetadata[t]
    }
    function S(e) {
        return t=>{
            const i = p(t.prototype);
            return i.__beforeStartupMetadata.__decorated = !0,
            g() && n.each(Object.getOwnPropertyNames(i), o=>{
                if (n.isFunction(t.prototype[o]) && "constructor" !== o && "startup" !== o) {
                    const t = i.__beforeStartupMetadata[o];
                    t && t.hasbeforeStartupDecorator || s.__decorate([y(e)], i, o, null)
                } else if (n.isFunction(t.prototype[o]) && "startup" === o) {
                    const e = i.__beforeStartupMetadata[o];
                    e && e.isStartup || s.__decorate([C], i, o, null)
                }
            }
            ),
            t
        }
    }
    function C(e, t, i) {
        if (!g())
            return i;
        m(p(e), t).isStartup = !0;
        const n = i.value;
        return i.value = function(...e) {
            if (!g())
                return n.apply(this, e);
            let t = c;
            return c = !0,
            h(()=>n.apply(this, e), ()=>{
                c = t
            }
            )
        }
        ,
        i
    }
    function y(e) {
        return (e,t,i)=>{
            if (!g())
                return i;
            p(e);
            const n = i.value;
            return i.value = function(...e) {
                if (g()) {
                    a.HasStarted(this),
                    o.App.getActivationState(),
                    o.Types.AppActivationState.Active
                }
                return n.apply(this, e)
            }
            ,
            i
        }
    }
    t.Startupable = S(!0),
    t.makeStartupable = S,
    t.beforeStartup = (e,t,i)=>{
        if (!g())
            return i;
        const n = p(e);
        m(n, t).hasbeforeStartupDecorator = !0;
        const o = i.value;
        return i.value = function(...e) {
            if (!g())
                return o.apply(this, e);
            const t = d
              , i = l;
            return d = !0,
            l = n,
            h(()=>o.apply(this, e), ()=>{
                d = t,
                l = i
            }
            )
        }
        ,
        i
    }
    ,
    t.test_setTestOverride = function(e) {
        u = e
    }
    ;
    class f extends Error {
        constructor(e, t, i) {
            super(`Trying to call ${t} on ${e} before started with ${i || "[no context]"}.`)
        }
    }
    t.CalledBeforeStartupError = f
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e, t, i, n, o) {
            super(),
            this._scenario = e,
            this._mriType = t,
            this._attributes = i,
            this._metadata = n,
            this._connectionType = o
        }
        getEventName() {
            return "chat_service_failure"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.scenario = this._scenario,
            e.mriType = this._mriType || "",
            n.assign(e, this._attributes),
            e.error_code = this._metadata.errorCode,
            e.StatusCode = this._metadata.statusCode,
            e.StatusText = this._metadata.statusText,
            e.ErrorMessage = "Unknown" === this._metadata.errorMessage ? this._metadata.statusText : this._metadata.errorMessage,
            e.context_id = this._metadata.contextId,
            e.ServerTime = this._metadata.date,
            e.Connection_Type = o.ChatServiceConnectionType[this._connectionType],
            this._metadata.canceled && (e.Canceled = this._metadata.canceled),
            this._metadata.timedOut && (e["TimedOut "] = this._metadata.timedOut),
            this._metadata.msCv && (e.CorrelationVector = this._metadata.msCv),
            e
        }
    }
    t.ChatServiceFailureEvent = r;
    t.ChatServiceInternalFailureEvent = class extends r {
        constructor(e, t, i, n, o, s, r) {
            super(e, t, i, n, o),
            this._networkType = s,
            this._isNetworkingAvailable = r
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.NetworkType = this._networkType,
            e.WasNetworkingAvailable = this._isNetworkingAvailable,
            e
        }
        getEventName() {
            return "chat_service_app_internal_failure"
        }
    }
    ;
    class a extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._description = e
        }
        getEventName() {
            return "chat_service_bundle_processing_failure"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.description = this._description,
            e
        }
    }
    t.ChatServiceBundleProcessingErrorEvent = a;
    class l extends s.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._reason = e,
            this._configType = t,
            this._syncSuccess = i
        }
        getEventName() {
            return "chat_service_force_sync"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Reason = this._reason,
            e.DetectionConfigType = this._configType,
            e.ForceSyncSuccess = this._syncSuccess,
            e
        }
    }
    t.ChatServiceForceSyncConversationEvent = l
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(18)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._eventName = e,
            this._props = t
        }
        getAriaTenantTokenOverride() {
            return o.getAriaCallingTenantToken()
        }
        getEventName() {
            return this._eventName
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._props)
        }
    }
    t.GenericCallingEvent = r;
    class a extends s.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._tenant = e,
            this._eventName = t;
            const n = a._splitTelemetryValues(i);
            this._piiProps = n.pii,
            this._nonPiiProps = n.nonPii
        }
        getAriaTenantTokenOverride() {
            return this._tenant
        }
        getEventName() {
            return this._eventName
        }
        getAttributes() {
            return this._nonPiiProps.uiVersion = o.getUIVersionWithPartnerID(),
            n.assign(super.getAttributes(), this._nonPiiProps)
        }
        getPiiAttributes() {
            return n.assign(super.getPiiAttributes(), this._piiProps)
        }
        static _splitTelemetryValues(e) {
            const t = {}
              , i = {};
            return n.each(e, (e,o)=>{
                n.isObject(e) && n.isNumber(e.piiKind) ? t[o] = e : i[o] = e
            }
            ),
            {
                pii: t,
                nonPii: i
            }
        }
    }
    t.GenericPluginlessStackEvent = a;
    class l extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._event = e
        }
        getAriaTenantTokenOverride() {
            return o.getAriaPluginlessTrouterTenantToken()
        }
        getEventName() {
            return this._event.name
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._getProperties())
        }
        _getProperties() {
            const e = {};
            return n.each(this._event.properties, (t,i)=>{
                const o = t.value;
                n.isUndefined(o) || (e[i] = o)
            }
            ),
            e
        }
    }
    t.TrouterEvent = l
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(651)
      , o = i(2)
      , s = i(1424)
      , r = i(106);
    class a extends s.default {
        constructor(e, t) {
            super("ChatService", r.ScenarioName.ChatServiceRequest, {
                scenario: e,
                connectionType: o.ChatServiceConnectionType[t]
            }, "chatServiceScenario_", e)
        }
        failed(e) {
            const t = Object.assign(Object.assign({}, a._extractResponseMetadata(e, !0)), {
                Canceled: e.canceled,
                TimedOut: e.timedOut
            });
            this._failed("Request Failed", t)
        }
        retry(e) {
            const t = Object.assign(Object.assign({}, a._extractResponseMetadata(e, !0)), {
                Canceled: e.canceled,
                TimedOut: e.timedOut
            });
            this._retry("Request Failed, will retry", t)
        }
        succeeded(e) {
            this._succeeded(a._extractResponseMetadata(e))
        }
        static _extractResponseMetadata(e, t=!1) {
            const i = n.ChatServiceErrorHandler.getChatServiceErrorResponseMetadata(e)
              , o = {
                ContextId: i.contextId,
                Date: i.date
            };
            return t && (o.ErrorCode = i.errorCode,
            o.StatusCode = i.statusCode,
            o.StatusText = i.statusText,
            o.ErrorMessage = i.errorMessage),
            o
        }
    }
    t.default = a
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39)
      , s = i(129)
      , r = i(9);
    class a extends s.default {
        constructor(e, t, i, n, o) {
            super(e, void 0, n),
            this._subScenario = t,
            this._telemetrySamplingKey = i,
            o ? (this._attempt = o._attempt + 1,
            this._shouldSendScenarioTelemetry = o._shouldSendSampledTelemetry(),
            this._requestId = o._requestId) : (this._attempt = 0,
            this._requestId = this._scenarioId),
            this.extendProperties({
                attempt: this._attempt,
                requestId: this._requestId
            })
        }
        _shouldSendSampledTelemetry() {
            if (void 0 !== this._shouldSendScenarioTelemetry)
                return this._shouldSendScenarioTelemetry;
            if (this._telemetrySamplingKey) {
                const e = this._telemetrySamplingKey + this._subScenario
                  , t = o.SampledEvents[e];
                return n.isNumber(t) ? (this._shouldSendScenarioTelemetry = r.sampleForPercentage(t),
                this._shouldSendScenarioTelemetry) : (this._shouldSendScenarioTelemetry = super._shouldSendSampledTelemetry(),
                this._shouldSendScenarioTelemetry)
            }
            return this._shouldSendScenarioTelemetry = super._shouldSendSampledTelemetry(),
            this._shouldSendScenarioTelemetry
        }
        test_shouldSendTelemetryPersists() {
            return this._shouldSendScenarioTelemetry
        }
        test_requestIdPersists() {
            return this._requestId
        }
    }
    t.default = class {
        constructor(e, t, i, n, o) {
            this._service = e,
            this._scenarioName = t,
            this._properties = i,
            this._telemetrySamplingKey = n,
            this._subScenario = o,
            this._completed = !1,
            this._success = !1,
            this._scenario = new a(this._scenarioName,this._subScenario,this._telemetrySamplingKey,this._properties)
        }
        begin() {
            this._scenario.start()
        }
        _failed(e, t) {
            this._completed = !0,
            this._success = !1,
            this._scenario.fail(e, t)
        }
        _retry(e, t) {
            this._scenario.fail(e, t),
            this._scenario = new a(this._scenarioName,this._subScenario,this._telemetrySamplingKey,this._properties,this._scenario),
            this.begin()
        }
        _succeeded(e) {
            this._completed = !0,
            this._success = !0,
            this._scenario.finish(e)
        }
        ensureResolved() {}
        ensureRejected() {}
        test_exposeRequestId() {
            return this._scenario.test_requestIdPersists()
        }
        test_exposeShouldSendTelemetry() {
            return this._scenario.test_shouldSendTelemetryPersists()
        }
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(7)
      , s = i(48)
      , r = i(74)
      , a = i(21);
    e.exports = new class {
        constructor() {
            this._currentSkewMs = 0,
            a.RegisterStartupable(this, "TimeService", [r.default])
        }
        startup() {
            if (0 === this._currentSkewMs) {
                const e = r.default.getDataExclusive(s.InternalKeys.ClockSkew);
                e && (this._currentSkewMs = e)
            }
            return o.Resolved()
        }
        getRawClientTimeMs() {
            return Date.now()
        }
        getServerTimeMs() {
            return Date.now() + this._currentSkewMs
        }
        putCurrentServiceTime(e, t) {
            if (n.isNaN(e) || n.isUndefined(e))
                return;
            const i = Math.round(e - t / 2 - Date.now());
            Math.abs(i - this._currentSkewMs) > 6e4 && (this._currentSkewMs = i,
            r.default.putData(s.InternalKeys.ClockSkew, this._currentSkewMs))
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(7)
      , s = i(138)
      , r = i(16)
      , a = i(650)
      , l = i(20)
      , c = i(45);
    t.getDisplayableProfile = function(e) {
        return r.isConnector(e) ? a.default.getConnectorDescription(e) : r.isAgent(e) ? s.default.getAgentDescriptionForMri(e) : (l.isMyMri(e) && (e = l.getSkypeMri()),
        c.getDisplayableUserByMri(e))
    }
    ,
    t.getDisplayableProfilePotentiallyBeforeStartupAsync = function(e) {
        return r.isConnector(e) ? a.default.getConnectorDescriptionPotentiallyBeforeStartupAsync(e) : r.isAgent(e) ? s.default.getAgentDescriptionForMriPotentiallyBeforeStartupAsync(e) : (l.isMyMri(e) && (e = l.getSkypeMri()),
        c.getDisplayableUserByMriAsync(e))
    }
    ,
    t.getDisplayableProfileWithConversationOwnerLookup = function(e) {
        const t = c.getConversationOwner(e);
        return c.getDisplayableUserByMri(t)
    }
    ,
    t.populateProfilesToCalculateConvDisplayName = function(e) {
        if (!e || e.topicName())
            return o.Resolved();
        let t;
        if (t = e.isHighlightsThread() ? r.isMyHighlightThread(e.id) ? [] : n.compact([e.creator()]) : e.getMemberMrisWithoutMe(),
        t.length > 0) {
            let e = [];
            const [i,a] = n.partition(t, e=>r.isAgent(e));
            if (a.length > 0) {
                const t = n.map(a, e=>c.getDisplayableUserByMriAsync(e));
                e.push(o.all(t).then(e=>{
                    c.cacheDisplayableUsersBeforeStartup(e)
                }
                ))
            }
            if (i.length > 0) {
                const t = n.map(i, e=>s.default.getAgentDescriptionForMriPotentiallyBeforeStartupAsync(e));
                e.push(o.all(t).then(e=>{
                    s.default.cacheProfilesBeforeStartup(e)
                }
                ))
            }
            return o.all(e).then(n.noop)
        }
        return o.Resolved()
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(70)
      , s = i(25)
      , r = i(39);
    class a extends r.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._permissionType = e,
            this._permissionStatus = t,
            this._permissionOrigin = i
        }
        getEventName() {
            return "settings_permission_status"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Type = s.PermissionType[this._permissionType],
            e.Status = o.PermissionStatus[this._permissionStatus],
            e.Origin = this._stringFromPermissionOrigin(),
            e
        }
        _stringFromPermissionOrigin() {
            return n.isUndefined(this._permissionOrigin) ? "unknown" : o.PermissionOrigin[this._permissionOrigin]
        }
    }
    t.PermissionsStatusChange = a;
    class l extends r.TelemetryEventBase {
        constructor() {
            super()
        }
        getEventName() {
            return "all_permission_action"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._getOwnAttributes())
        }
        _getOwnAttributes() {
            let e = {};
            return e.Action = this.getActionName(),
            e
        }
    }
    t.AndroidCallMonitorPermissionPrompt = class extends l {
        getActionName() {
            return "AndroidCallMonitorPermissionPrompt"
        }
    }
    ;
    t.AndroidCallMonitorPermissionPromptEvent = class extends l {
        constructor(e) {
            super(),
            this._canceled = e
        }
        getActionName() {
            return "AndroidCallMonitorPermissionPromptEvent"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Canceled: this._canceled
            })
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(52)
      , r = i(39)
      , a = i(29);
    t.default = new class {
        constructor() {
            this._data = {},
            this._sortedData = [],
            this._running = !0,
            this._pendingQueue = [],
            this.statisticsUpdated = new s.default,
            this._running = !1
        }
        getSortedEventsStatistics() {
            return this._sortedData
        }
        _scheduleDelayedUpdateIfNeeded() {
            this._updateTimerId || 0 === this._pendingQueue.length || (this._updateTimerId = a.setTimeout(()=>{
                this._updateTimerId = void 0,
                this._handleEvents(this._pendingQueue),
                this._pendingQueue = []
            }
            , 2e3))
        }
        _handleEvents(e) {
            const t = n.AWTSerializer.getPayloadBlob({
                token: []
            }, 1);
            o.each(e, e=>{
                const i = this._convertEventWithMetadataToInternal(e)
                  , o = this._normalizedEventName(i);
                let s = this._data[o];
                s || (s = {
                    numberOfBytes: 0,
                    numberOfEvents: 0,
                    sampling: ""
                },
                this._data[o] = s);
                const r = n.AWTSerializer.getPayloadBlob({
                    token: [i]
                }, 1);
                s.numberOfEvents++,
                s.numberOfBytes += r.payloadBlob.length - t.payloadBlob.length,
                s.sampling = this._samplingValue(i)
            }
            ),
            this._sortedData = [],
            o.each(this._data, (e,t)=>{
                this._sortedData.push([t, e])
            }
            ),
            this._sortedData.sort((e,t)=>t[1].numberOfBytes - e[1].numberOfBytes),
            this.statisticsUpdated.fire()
        }
        _convertEventWithMetadataToInternal(e) {
            return Object.assign(Object.assign({}, e), {
                serializedEvent: [0]
            })
        }
        _samplingValue(e) {
            let t = r.SampledEvents[e.name]
              , i = 100;
            if ("scenario" === e.name)
                i = r.SampledEvents["scenario_" + this._value(e, "ScenarioName")];
            else if ("perf" === e.name)
                i = r.SampledPerfEvents[this._value(e, "Scenario")];
            else if (0 === e.name.indexOf("kpi_")) {
                const i = r.TelemetryConfig[e.name];
                if (i) {
                    const e = "enabled"in i && i.enabled
                      , n = "percentage"in i ? i.percentage : void 0;
                    t = o.isNumber(n) ? n : e ? 100 : 0
                } else
                    t = 0
            }
            return o.isNumber(t) || (t = 100),
            o.isNumber(i) || (i = 100),
            Math.floor(t * i / 100) + "%"
        }
        _normalizedEventName(e) {
            return "scenario" === e.name ? "Scenario – " + this._value(e, "ScenarioName") : "perf" === e.name ? "Perf – " + this._value(e, "Scenario") : e.name
        }
        _value(e, t) {
            const i = e.properties[t]
              , n = i.value || i;
            return o.isString(n) ? n : n.toString()
        }
        handleEvents(e) {
            this._running && (this._pendingQueue.push(...e),
            this._scheduleDelayedUpdateIfNeeded())
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(221)
      , o = i(52);
    t.ComponentVisibilityStatus = class {
        constructor() {
            this._isVisible = !0,
            this._visibilityChanged = new o.default
        }
        updateVisibility(e) {
            this._isVisible !== e && (this._isVisible = e,
            this._visibilityChanged.fire(e))
        }
        isVisibleEvent() {
            return this._visibilityChanged
        }
        isVisible() {
            return this._isVisible
        }
    }
    ,
    t.componentContextTypes = function() {
        return {
            componentVisibilityStatus: n.object,
            isPresentedInDesktopSubview: n.bool,
            isPresentedInDesktopLeftNav: n.bool,
            isPresentedInDesktopRightNav: n.bool,
            isPresentedInManagedModal: n.bool,
            isPresentedInGenericDesktopModal: n.bool,
            isPresentedInSplitView: n.bool,
            isPresentedInMobileSheet: n.bool,
            isPresentedInDesktopContentPanel: n.bool,
            isPresentedInTabView: n.bool,
            isPresentedByMobileStackNavigator: n.bool,
            shouldUseThemePreview: n.bool,
            iconCollection: n.number,
            getCoachMarkArea: n.func,
            goBack: n.func,
            rootViewId: n.string,
            rootViewType: n.number
        }
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(2)
      , s = i(3)
      , r = i(670)
      , a = i(569)
      , l = i(356)
      , c = i(129);
    e.exports = new class {
        constructor() {
            this._startupPhaseTimes = {},
            this._startupPhaseEndTimestamps = {},
            this._startupPhaseStartTimestamps = {},
            this._shouldReportP6 = !1,
            this._intentBased = !1
        }
        appColdStartup(e) {
            this._startupScenario = new c.default(c.ScenarioName.AppStartup,void 0,void 0,void 0,!0),
            this._startupScenario.start(void 0, e)
        }
        logStartupPerfDuration(e, t, i, n=!1) {
            s.log(o.LogTraceArea.GenericUnsafe, "Startup Phase " + e + " duration: " + t + "ms"),
            n && (this._intentBased = !0),
            this._startupPhaseTimes[e] = t,
            this._startupPhaseEndTimestamps[e] = Date.now();
            const a = this._startupPhaseEndTimestamps[e - 1] ? this._startupPhaseEndTimestamps[e] - this._startupPhaseEndTimestamps[e - 1] : -1;
            s.track(new l.PerfStartupPhase(e,t,a,i));
            const c = r.getCurrentIntent()
              , d = c ? r.Intent[c] : "";
            e <= 5 && this._startupScenario.markStepCompleted("Phase" + e, {
                currentIntent: d
            }, t),
            5 === e && (this._startupScenario.finish({
                intentBased: this._intentBased,
                currentIntent: d
            }),
            this._setupP6())
        }
        _setupP6() {
            const e = a.getMaxEntryPoint();
            e !== o.AppEntryPoint.Foregrounded && e !== o.AppEntryPoint.Opened || (this._shouldReportP6 = !0)
        }
        phase6Start() {
            this._shouldReportP6 && (this._startupPhaseStartTimestamps[6] = Date.now())
        }
        phase6End() {
            if (!this._shouldReportP6)
                return;
            if (this._shouldReportP6 = !1,
            !this._startupPhaseStartTimestamps[6])
                return;
            const e = Date.now() - this._startupPhaseStartTimestamps[6];
            this.logStartupPerfDuration(6, e)
        }
        getStartupPhaseEndTimestamp(e) {
            return this._startupPhaseEndTimestamps[e]
        }
        getStartupPhaseTimes() {
            return this._startupPhaseTimes
        }
        getStartupPerfSummary() {
            let e = ""
              , t = 0
              , i = 1;
            for (; !n.isUndefined(this._startupPhaseTimes[i]); )
                e += "Phase " + i + ": " + this._startupPhaseTimes[i] + "ms\n",
                t += this._startupPhaseTimes[i],
                i++;
            return e += "Total: " + t + "ms\n",
            e
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(36)
      , o = i(52)
      , s = i(7)
      , r = i(6)
      , a = i(21)
      , l = i(29);
    t.OnMetricsUpdated = new o.default;
    t.default = new class {
        constructor() {
            this._updatePerformanceMetrics = ()=>s.all([n.default.getSystemUsage(), n.default.getAppMetrics()]).then(e=>{
                const [i,n] = e;
                this._metrics = {
                    systemUsageInfo: i,
                    gpu: n ? n.find(e=>"GPU" === e.type) : void 0,
                    renderer: n ? n.find(e=>"Tab" === e.type) : void 0
                },
                t.OnMetricsUpdated.fire()
            }
            ),
            a.RegisterStartupable(this, "AppMetricsService")
        }
        startup() {
            return this._updatePerformanceMetrics(),
            s.Resolved()
        }
        startTrackingPerformance() {
            if (!this._refreshSystemInfoIntervalToken) {
                const e = r.default.getS4LCMCFeatures().perfomanceTelemetryTimeoutInterval;
                this._refreshSystemInfoIntervalToken = l.setInterval(this._updatePerformanceMetrics, e),
                this._updatePerformanceMetrics()
            }
        }
        stopTrackingPerformance() {
            this._refreshSystemInfoIntervalToken && (l.clearInterval(this._refreshSystemInfoIntervalToken),
            this._refreshSystemInfoIntervalToken = void 0)
        }
        getPerformanceMetrics() {
            return this._metrics
        }
        isTracking() {
            return !!this._refreshSystemInfoIntervalToken
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1067)
      , o = i(6)
      , s = i(116)
      , r = i(16)
      , a = i(228)
      , l = i(192)
      , c = i(215);
    t.default = new class {
        getPresenceTelemetryAttributesOnMessageReceived(e) {
            if (!o.default.getS4LMessagingFeaturesNoSubscription().enablePresenceDebugging)
                return {};
            const t = e.creator;
            if (!r.isUserMri(t))
                return {};
            const i = c.default.getUserPresenceNoSubscription(t)
              , n = i && i.lastSeenAtUtc || 0
              , a = i ? i.status : s.UserStatus.Unknown
              , l = i ? i.availability : s.UserAvailability.Offline
              , d = c.default.isActiveUserNoSubscription(t)
              , u = {};
            return u.Tracking_Sender_Presence = c.default.isTrackingUser(t),
            u.Sender_Presence_Fetched = i ? i.lastUpdated : 0,
            u.Sender_Last_Seen = n,
            u.Sender_Status = a ? s.UserStatus[a] : "",
            u.Sender_Availability = l ? s.UserAvailability[l] : "",
            u.Sender_Active = d,
            u.Sender_Last_Seen_Ago = Date.now() - n,
            u
        }
        getMyPresenceTelemetryAttributesOnMessageSent() {
            if (!o.default.getS4LMessagingFeaturesNoSubscription().enablePresenceDebugging)
                return {};
            const e = l.getStatusNoSubscription()
              , t = e === s.UserStatus.Online ? s.UserAvailability.Online : s.UserAvailability.Offline
              , i = a.isCurrentUserActive()
              , r = n.default.getLastUpdatedInfo()
              , c = l.getLastKnownCSTimestamp()
              , d = {
                Tracking_Sender_Presence: !0
            };
            return d.Sender_Presence_Last_Updated = c,
            d.Sender_Status = e ? s.UserStatus[e] : "",
            d.Sender_Availability = t ? s.UserAvailability[t] : "",
            d.Sender_Active = i,
            d.Sender_Last_Updated_Ago = Date.now() - c,
            d.Sender_Endpoint_Last_Updated = r.timestamp || "",
            d.Sender_Endpoint_Last_Status = r.active ? "Active" : "Inactive",
            d
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(235)
      , s = i(16)
      , r = i(39)
      , a = i(159)
      , l = i(35);
    var c;
    !function(e) {
        e[e.ResponseReceived = 0] = "ResponseReceived",
        e[e.RequestFailure = 1] = "RequestFailure",
        e[e.UserClick = 2] = "UserClick",
        e[e.ImageFailure = 3] = "ImageFailure",
        e[e.LoadThumbnailFailure = 4] = "LoadThumbnailFailure",
        e[e.LoadFaviconFailure = 5] = "LoadFaviconFailure"
    }(c = t.UrlPreviewActionType || (t.UrlPreviewActionType = {}));
    class d extends r.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._url = e,
            this._action = t
        }
        getEventName() {
            return "url_preview"
        }
        getEventTraceMode() {
            return r.TelemetryTraceMode.EventName
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = c[this._action],
            e
        }
        getPiiAttributes() {
            let e = super.getPiiAttributes();
            return e.UrlDomain = {
                value: l.default.getDomainName(this._url),
                piiKind: n.AWTPiiKind.Uri
            },
            e
        }
    }
    t.UrlPreviewReceived = class extends d {
        constructor(e, t, i, n) {
            super(e, c.ResponseReceived),
            this._preview = t,
            this._numberRetries = i,
            this._duration = n
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.RetriesCount = this._numberRetries,
            e.StatusCode = this._preview.status_code,
            e.ContentType = this._preview.content_type || "",
            e.Category = this._preview.category,
            e.HasTitle = !!this._preview.title,
            e.HasDescription = !!this._preview.description,
            e.Favicon = !!this._preview.favicon,
            e.FaviconWidth = this._preview.favicon_meta ? this._preview.favicon_meta.width : -1,
            e.FaviconHeight = this._preview.favicon_meta ? this._preview.favicon_meta.height : -1,
            e.Thumbnail = !!this._preview.thumbnail,
            e.ThumbnailWidth = this._preview.thumbnail_meta ? this._preview.thumbnail_meta.width : -1,
            e.ThumbnailHeight = this._preview.thumbnail_meta ? this._preview.thumbnail_meta.height : -1,
            e.RestrictionsAge = this._preview.restrictions ? this._preview.restrictions.age : -1,
            this._duration && (e.Duration = this._duration),
            this._preview.restrictions && this._preview.restrictions.country && (e.RestrictionsCountry = this._preview.restrictions.country),
            e
        }
    }
    ;
    t.UrlPreviewFailed = class extends d {
        constructor(e, t, i) {
            super(e, c.RequestFailure),
            this._numberRetries = t,
            this._reason = i
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.RetriesCount = this._numberRetries,
            e.FailureReason = this._reason,
            e
        }
    }
    ;
    t.UrlPreviewClickTelemetry = class extends d {
        constructor(e, t) {
            super(e, c.UserClick),
            this._message = t
        }
        getCorrelationAttributes() {
            let e = super.getAttributes();
            const t = a.getClientMessageId(this._message);
            return e.MessageCorrelationId = o.getCorrelationIdFromMessageParts(this._message.creator, this._message.conversationId, t),
            e.ClientMessageId = t || "",
            e
        }
        getAttributes() {
            const e = s.isOneOnOneConversation(this._message.conversationId);
            let t = super.getAttributes();
            return t.ClickedTimestamp = this._eventCreationTime,
            t.IsGroupConversation = !e,
            t.ServerMessageId = this._message.getOriginalServerId() || "",
            t.urlp_operation = "url_click",
            t
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = a.getTrackableConversationId(this._message.conversationId);
            return t && (e.ConversationId = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    ;
    t.UrlPreviewImageFailureTelemetry = class extends d {
        constructor(e, t, i) {
            super(e, i),
            this._error = t
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.ImageError = this._error,
            e
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(488)
      , r = i(25)
      , a = i(39);
    class l extends a.TelemetryEventBase {
        constructor(e, t, i, n, o, s=0, r, a, l, c, d, u) {
            super(),
            this._failureSource = e,
            this._conversationIds = t,
            this._postSource = i,
            this._conversationOrigin = n,
            this._firstSendTime = o,
            this._numberRetries = s,
            this._statusCode = r,
            this._statusText = a,
            this._fileSize = l,
            this._errorMetadata = c,
            this._fileType = d,
            this._triggeredBy = u
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.failure_source = o.PostingTransferSource[this._failureSource] + "Failure",
            e.num_of_convs = this._conversationIds.length,
            e.post_source = o.PostSource[this._postSource],
            e.conversation_origin = o.NavigationConversationOrigin[this._conversationOrigin || o.NavigationConversationOrigin.Unknown],
            e.time_to_failure = this._eventCreationTime - this._firstSendTime,
            e.number_retries = this._numberRetries,
            e.status_code = this._statusCode,
            e.status_text = this._statusText || "",
            e.file_size = n.isNumber(this._fileSize) ? this._fileSize : "",
            e.file_type = this._fileType ? r.UploadFileType[this._fileType] : "",
            e.TriggeredBy = this._triggeredBy ? s.PostingTrigger[this._triggeredBy] : s.PostingTrigger.None,
            n.extend(e, this._errorMetadata),
            e
        }
    }
    t.PostingFailure = class extends l {
        constructor(e, t, i, n, o, s, r=0, a, l, c, d, u, g) {
            super(t, i, n, o, s, r, a, l, c, d, u, g),
            this._permanentFailure = e
        }
        getEventName() {
            return "send_failure"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.is_permanent = this._permanentFailure,
            e
        }
    }
    ;
    t.PostingRecovered = class extends l {
        getEventName() {
            return "send_recovered"
        }
    }
    ;
    class c extends a.TelemetryEventBase {
        getEventName() {
            return "feedbackInitiated"
        }
    }
    t.FeedbackInititated = c
}
, , , , function(e, t, i) {
    "use strict";
    const n = i(33)
      , o = i(7)
      , s = i(6)
      , r = i(21)
      , a = i(248)
      , l = i(420);
    e.exports = new class {
        constructor() {
            n.RootToolsManager.setDelegate(this),
            r.RegisterStartupable(this, "UnifiedLoggingService")
        }
        startup() {
            return s.default.subscribe(()=>n.RootToolsManager.OnEcsChange()),
            n.RootToolsManager.OnEcsChange(),
            o.Resolved()
        }
        fetchEcsConfig(e, t) {
            if ("SkypeRootTools" === e && "ULBaseline" === t) {
                let e = s.default.getSkypeRootToolsConfig();
                return o.Resolved(e ? e[t] : {})
            }
            return o.Resolved(s.default.getULLogUploadConfig(e, t))
        }
        sendTelemetry(e, t) {
            l.addEvent(new a.LogUploadEvent(e,t))
        }
    }
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(27)
      , a = i(121)
      , l = i(5)
      , c = i(4)
      , d = i(134)
      , u = i(54)
      , g = i(8)
      , h = i(11)
      , p = i(15)
      , m = i(12)
      , S = l.lazyProperties({
        menuContainer: ()=>o.Styles.createViewStyle({
            paddingVertical: 5
        }),
        menuItemContainer: ()=>o.Styles.createButtonStyle({
            minHeight: 30,
            alignItems: "center",
            justifyContent: "flex-start",
            flexDirection: "row",
            borderLeftWidth: 2,
            borderStyle: "solid",
            borderColor: g.Color.transparent
        }),
        menuItemText: ()=>o.Styles.createTextStyle({
            flex: 1,
            paddingLeft: 13,
            paddingRight: 35
        }),
        selectedCheckMark: ()=>o.Styles.createTextStyle({
            marginRight: 15
        }),
        legendText: ()=>o.Styles.createTextStyle({
            marginLeft: 15,
            marginTop: 10
        }),
        divider: ()=>o.Styles.createViewStyle({
            borderBottomWidth: 1,
            borderStyle: "solid",
            height: 0,
            marginHorizontal: 15
        }),
        icon: ()=>o.Styles.createImageStyle({
            height: 16,
            width: 16,
            alignSelf: "center",
            marginLeft: 5
        })
    });
    class C extends m.default {
        constructor() {
            super(...arguments),
            this._mountedRefsMap = new d.default,
            this._onKeyPress = e=>{
                let t = this.state.focusedIndex
                  , i = s.SXMenuNavigationDirection.None;
                e.keyCode !== a.UP && e.keyCode !== a.LEFT || (t -= 1,
                i = s.SXMenuNavigationDirection.Up),
                e.keyCode !== a.DOWN && e.keyCode !== a.RIGHT || (t += 1,
                i = s.SXMenuNavigationDirection.Down),
                t < 0 || t >= this.props.menuItems.length ? this.props.shouldReleaseKeyboardFocus && i !== s.SXMenuNavigationDirection.None && this.props.shouldReleaseKeyboardFocus(i) && this.setState({
                    focusedIndex: -1
                }) : this.setState({
                    focusedIndex: t
                })
            }
        }
        _buildState(e, t) {
            return t ? {
                hoverCommand: void 0,
                focusedIndex: -1
            } : {}
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.focusFirst && this.focusFirt()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.focusedIndex !== t.focusedIndex && this.focusItem(this.state.focusedIndex)
        }
        focusFirt() {
            this.focusItem(0)
        }
        focusLast() {
            this.focusItem(this.props.menuItems.length - 1)
        }
        focusItem(e=0) {
            if (!(e < 0 || e > this.props.menuItems.length - 1))
                if (this.state.focusedIndex === e) {
                    const t = this._mountedRefsMap.ref("menuitem" + e);
                    t && t.requestFocus()
                } else
                    this.setState({
                        focusedIndex: e
                    })
        }
        render() {
            const e = o.Types.AccessibilityTrait.MenuItem
              , t = o.Types.AccessibilityTrait.Menu
              , i = n.map(this.props.menuItems, (t,i)=>{
                const n = this._themeStyles
                  , s = [S.menuItemContainer];
                this.props.menuButtonStyles && s.push(this.props.menuButtonStyles);
                const a = [S.menuItemText, n.primaryTextColorStyle];
                this.props.menuTextStyles && a.push(this.props.menuTextStyles),
                t.textStyles && a.push(t.textStyles),
                t.command !== this.state.hoverCommand || t.disabled || s.push(n.rowHoverViewStyle),
                t.isDestructiveButton && a.push(this._themeStyles.destructiveTextColorStyle);
                const l = [e];
                let d, g, m = t.text;
                return t.selected ? (d = o.createElement(r.default, {
                    icon: h.SkypeIcon.Ok,
                    size: h.IconSize.size20,
                    color: u.getPrimaryColorNoSubscription(),
                    style: S.selectedCheckMark
                }),
                m = c.getString("Global.ItemSelectedAccessibilityLabel", {
                    text: m
                })) : t.disabled && (a.push(n.disabledTextColorStyle),
                l.push(o.Types.AccessibilityTrait.Disabled)),
                t.icon && (g = o.createElement(o.Image, {
                    style: S.icon,
                    source: "images/context_menu/" + (this._useDarkTheme() ? "Dark" : "") + t.icon + ".png",
                    resizeMode: "auto",
                    key: t.text
                })),
                o.createElement(o.Button, {
                    ref: this._mountedRefsMap.onComponentRef("menuitem" + i),
                    key: t.command,
                    style: s,
                    onPress: e=>this._onClickItem(e, t),
                    onHoverStart: ()=>this._onMouseEnter(t),
                    onHoverEnd: ()=>this._onMouseLeave(t),
                    disabled: t.disabled,
                    tabIndex: i === this.state.focusedIndex ? 0 : -1,
                    accessibilityTraits: l,
                    accessibilityLabel: m
                }, g, o.createElement(p.BodyText, {
                    style: a,
                    disableThemeSubscription: !0
                }, t.text), d)
            }
            )
              , s = this.props.title ? o.createElement(p.Subtitle, {
                style: S.legendText
            }, this.props.title) : void 0
              , a = this.props.showDivider ? o.createElement(o.View, {
                style: [S.divider, this._themeStyles.dividerBorderColorStyle]
            }) : void 0
              , l = [S.menuContainer]
              , d = o.createElement(o.View, {
                style: l,
                accessibilityTraits: t,
                id: this.props.id,
                onKeyPress: this._onKeyPress
            }, i);
            return s || a ? o.createElement(o.View, null, s, d, a) : d
        }
        _onClickItem(e, t) {
            e.stopPropagation(),
            !t.disabled && this.props.onSelectItem && this.props.onSelectItem(t.command)
        }
        _onMouseEnter(e) {
            e.disabled || e.command === this.state.hoverCommand || this.setState({
                hoverCommand: e.command
            })
        }
        _onMouseLeave(e) {
            e.disabled || e.command !== this.state.hoverCommand || this.setState({
                hoverCommand: void 0
            })
        }
    }
    t.default = C
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(659)
      , s = i(0)
      , r = i(13);
    class a extends r.ComponentBase {
        render() {
            const e = this.props.progressStrokeProperties.strokeWidth || 1
              , t = this.props.size;
            let i = this.props.progress && n.isFinite(this.props.progress) ? this.props.progress : 0;
            0 === i && (i = .03);
            const r = t / 2
              , a = (t - e) / 2
              , l = 360 * i
              , c = Math.PI * (l - 90) / 180;
            let d = "M" + r + "," + (r - a) + " A" + a + "," + a + " 0 " + (l > 180 ? 1 : 0) + ",1 " + (r + a * Math.cos(c)) + "," + (r + a * Math.sin(c));
            const u = "M" + r + "," + r + "m" + -a + ",0a" + a + "," + a + " 0 1,0 " + 2 * a + ",0 a" + a + "," + a + " 0 1,0 " + -2 * a + ",0";
            let g;
            return this.props.showCircleBackground && (g = s.createElement(o.SvgPath, Object.assign({
                d: u
            }, this.props.backgroundCircleProperties)),
            1 === i && (d = u)),
            s.createElement(o.ImageSvg, {
                viewBox: "0 0 " + t + " " + t,
                style: this.props.style,
                width: t,
                height: t
            }, g, s.createElement(o.SvgPath, Object.assign({
                d: d
            }, this.props.progressStrokeProperties)))
        }
    }
    e.exports = a
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    var s, r;
    !function(e) {
        e[e.MSA = 2] = "MSA",
        e[e.EngagementApi = 3] = "EngagementApi",
        e[e.SkypeToken = 4] = "SkypeToken",
        e[e.MsaCidHex = 5] = "MsaCidHex"
    }(s = t.EngagementApiPullRequestEventSource || (t.EngagementApiPullRequestEventSource = {})),
    function(e) {
        e[e.ContentDownloadError = 2] = "ContentDownloadError",
        e[e.ContentStatusFailure = 3] = "ContentStatusFailure",
        e[e.SkypeTokenUnavailable = 4] = "SkypeTokenUnavailable",
        e[e.ServerFailure = 5] = "ServerFailure",
        e[e.MSATokenMissing = 6] = "MSATokenMissing",
        e[e.MSATokenUnavailable = 7] = "MSATokenUnavailable",
        e[e.SkypeTokenMissing = 8] = "SkypeTokenMissing",
        e[e.MsaCidHexMissing = 9] = "MsaCidHexMissing"
    }(r = t.FailureReason || (t.FailureReason = {}));
    class a extends o.TelemetryEventBase {
        constructor(e) {
            super(),
            this.props = e
        }
        getEventName() {
            return "engagement_pull_request"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                DidSucceed: this.props.didSucceed,
                Source: this.props.source ? s[this.props.source] : "",
                FailureReason: this.props.failureReason ? r[this.props.failureReason] : "",
                CampaignId: this.props.campaignId || "",
                CampaignVariant: this.props.campaignVariant || "",
                RequestDurationMs: this.props.requestDuration || 0,
                ServerStatusCode: this.props.serverStatusCode || 0,
                MessageCorrelationId: this.props.correlationId || ""
            })
        }
    }
    t.EngagementPullRequestEvent = a
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    var s, r;
    !function(e) {
        e[e.Overview = 1] = "Overview",
        e[e.New = 2] = "New",
        e[e.Update = 3] = "Update",
        e[e.Delete = 4] = "Delete",
        e[e.Finished = 5] = "Finished",
        e[e.LoadCampaign = 6] = "LoadCampaign",
        e[e.LoadingCampaign = 7] = "LoadingCampaign",
        e[e.OpenCampaign = 8] = "OpenCampaign",
        e[e.Reset = 9] = "Reset"
    }(s = t.ClientTriggeredEngagementActions || (t.ClientTriggeredEngagementActions = {})),
    function(e) {
        e[e.Completed = 1] = "Completed",
        e[e.Failed = 2] = "Failed"
    }(r = t.EventStatus || (t.EventStatus = {}));
    class a extends o.TelemetryEventBase {
        constructor(e) {
            super(),
            this.props = e
        }
        getAttributes() {
            const e = n.assign(super.getAttributes(), {
                Action: s[this.props.action] || "UnknownAction",
                IsOfflineTargeted: this.props.offlineTargeted || !1
            });
            return this.props.campaignId && (e.CampaignId = this.props.campaignId),
            this.props.campaignVariant && (e.CampaignVariant = this.props.campaignVariant),
            this.props.campaignVersion && (e.CampaignVersion = this.props.campaignVersion || 0),
            this.props.newCampaignsCount && (e.NewCampaignsCount = this.props.newCampaignsCount),
            this.props.updatedCampaignsCount && (e.UpdatedCampaignsCount = this.props.updatedCampaignsCount),
            this.props.deletedCampaignsCount && (e.DeletedCampaignsCount = this.props.deletedCampaignsCount),
            this.props.durationInMs && (e.DurationInMs = this.props.durationInMs),
            this.props.status && (e.Status = r[this.props.status]),
            this.props.correlationId && (e.MessageCorrelationId = this.props.correlationId),
            e
        }
        getEventName() {
            return "engagement_client_triggered_campaigns"
        }
    }
    t.ClientTriggeredEngagementEvent = a
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(250)
      , s = i(1089);
    var r;
    !function(e) {
        e[e.OneDriveDriveDetailsReceived = 0] = "OneDriveDriveDetailsReceived",
        e[e.OneDriveAllItemsReceived = 1] = "OneDriveAllItemsReceived",
        e[e.OneDriveRecentItemsReceived = 2] = "OneDriveRecentItemsReceived",
        e[e.OneDriveSearchItemsReceived = 3] = "OneDriveSearchItemsReceived",
        e[e.OneDriveExistingShareLinkReceived = 4] = "OneDriveExistingShareLinkReceived",
        e[e.OneDriveCreateShareLinkReceived = 5] = "OneDriveCreateShareLinkReceived"
    }(r = t.OneDriveStoreEvents || (t.OneDriveStoreEvents = {}));
    class a extends s.IntegrationStoreTelemetryEvent {
        constructor(e, t, i, n, s) {
            super(o.IntegrationIds.OneDrive, r[e], t, i, n, s)
        }
    }
    t.OneDriveStoreEvent = a;
    class l extends s.IntegrationActionTelemetryEvent {
        constructor(e) {
            super(o.IntegrationIds.OneDrive, "OneDriveAddinLoaded"),
            this._timeToLoad = e
        }
        getIntegrationActionAttributes() {
            return n.merge({
                LoadDuration: this._timeToLoad
            }, super.getIntegrationActionAttributes())
        }
    }
    t.OneDriveAddinLoadEvent = l
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(16)
      , o = i(3)
      , s = i(39)
      , r = i(45);
    var a, l, c;
    !function(e) {
        e[e.Agent = 0] = "Agent",
        e[e.Connector = 1] = "Connector",
        e[e.Unknown = 2] = "Unknown",
        e[e.User = 3] = "User"
    }(a || (a = {})),
    function(e) {
        e[e.Rendered = 0] = "Rendered",
        e[e.Executed = 1] = "Executed"
    }(l || (l = {})),
    function(e) {
        e[e.Forwarded = 0] = "Forwarded",
        e[e.ImageLoadError = 1] = "ImageLoadError"
    }(c || (c = {}));
    class d extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._sender = e
        }
        getEventName() {
            return "caap_adaptivecard"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.SenderType = a[C(this._sender)],
            this._allowedToTrackPII(this._sender) && (e.SenderIdentity = this._sender,
            e.SenderName = r.getDisplayableUserByMri(this._sender).getDisplayName()),
            e
        }
        _allowedToTrackPII(e) {
            return [a.Agent, a.Connector].indexOf(C(e)) >= 0
        }
    }
    class u extends d {
        constructor(e, t) {
            super(e),
            this._renderTime = t
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.RenderTime = this._renderTime,
            e
        }
    }
    class g extends d {
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = c[c.ImageLoadError],
            e
        }
    }
    class h extends d {
        constructor(e, t) {
            super(e),
            this._action = t
        }
    }
    class p extends h {
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = l[l.Rendered],
            e.Type = this._action.type,
            e
        }
    }
    class m extends h {
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = l[l.Executed],
            e.Type = this._action.type,
            e
        }
    }
    class S extends d {
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = c[c.Forwarded],
            e
        }
    }
    function C(e) {
        let t = a.Unknown;
        return n.isAgent(e) ? t = a.Agent : n.isConnector(e) ? t = a.Connector : n.isUserMri(e) && (t = a.User),
        t
    }
    t.trackRenderTime = function(e, t) {
        o.track(new u(e,t))
    }
    ,
    t.trackImageLoadError = function(e, t) {
        o.track(new g(e))
    }
    ,
    t.trackActionRender = function(e, t) {
        o.track(new p(e,t))
    }
    ,
    t.trackActionEvent = function(e, t) {
        o.track(new m(e,t))
    }
    ,
    t.TrackForwarding = function(e) {
        o.track(new S(e))
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1);
    t.default = class {
        constructor(e) {
            this._onFinishHandlers = [],
            this.finish = (e,t)=>{
                this.extendContext(t),
                n.each(this._onFinishHandlers, t=>{
                    t && t(e, this._context)
                }
                )
            }
            ,
            this._context = e || {}
        }
        get context() {
            return this._context
        }
        start(e) {
            this._rootViewId = e
        }
        extendContext(e) {
            this._context = n.extend(this._context, e)
        }
        onFinish(e) {
            e && this._onFinishHandlers.push(e)
        }
    }
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(86)
      , o = i(0)
      , s = i(13)
      , r = i(1057)
      , a = i(10)
      , l = i(2)
      , c = i(3)
      , d = i(5)
      , u = i(54)
      , g = i(8)
      , h = i(9)
      , p = d.lazyProperties({
        backgroundStyleStroke: ()=>o.Styles.createViewStyle({
            borderWidth: 1
        }),
        backgroundStyleDark: ()=>o.Styles.createViewStyle({
            backgroundColor: g.Color.gray400
        }),
        backgroundStyleWhite: ()=>o.Styles.createViewStyle({
            backgroundColor: g.Color.white
        }),
        backgroundStyleBlue: ()=>o.Styles.createViewStyle({
            backgroundColor: g.Color.blue
        }),
        backgroundStyleLightStroke: ()=>o.Styles.createViewStyle({
            borderColor: g.Color.white
        }),
        backgroundStyleDarkStroke: ()=>o.Styles.createViewStyle({
            borderColor: g.Color.gray400
        })
    });
    class m extends s.ComponentBase {
        constructor() {
            super(...arguments),
            this._pressed = !1,
            this._onAnimatedInnerButtonRef = e=>{
                this._animatedInnerButton = e || void 0
            }
            ,
            this._onButtonRef = e=>{
                this._button = e || void 0
            }
            ,
            this._onHoverEndBound = e=>{
                this._onHoverEnd(e)
            }
            ,
            this._onHoverStartBound = e=>{
                this._onHoverStart(e)
            }
            ,
            this._onPressIn = ()=>{
                this._intOnPressIn(!0)
            }
            ,
            this._onPressOut = ()=>{
                this._intOnPressOut(!0)
            }
        }
        requestFocus() {
            this._button && this._button.requestFocus()
        }
        _indicatorColorForButtonStyle(e, t) {
            switch (e) {
            case a.SXButtonStyle.BlueFill:
            case a.SXButtonStyle.ColorFill:
            case a.SXButtonStyle.LightStroke:
            case a.SXButtonStyle.DarkFill:
            case a.SXButtonStyle.LightNoBackground:
            case a.SXButtonStyle.GradientFill:
                return g.Color.white;
            case a.SXButtonStyle.ColorStroke:
                return t ? this._accentColor(t) : u.getPrimaryColorNoSubscription();
            default:
            case a.SXButtonStyle.LightFill:
            case a.SXButtonStyle.DarkStroke:
            case a.SXButtonStyle.DarkNoBackground:
                return g.Color.gray400
            }
        }
        _intOnPressIn(e, t) {
            this.props.disabled || this.props.disablePressIn || (this._updateButton(!0, e),
            this._pressed = !0,
            t && t())
        }
        _intOnPressOut(e) {
            this._pressed && (this._updateButton(!1, e),
            this._pressed = !1)
        }
        _internalUpdateButton(e, t=!0) {
            if (this._animatedInnerButton && (this._animation && this._animation.stop(),
            t)) {
                const t = h.newCauseId();
                c.log(l.LogTraceArea.SXAnimated, "SXButtonBase._internalUpdateButton causeId: " + t),
                this._animation = this._animatedInnerButton.getAnimation({
                    scale: {
                        toValue: e,
                        easing: n.Easing.SkypeExpoInOut5,
                        duration: n.timing.Duration.Tiny
                    }
                }, t),
                this._animation.start(()=>{
                    delete this._animation
                }
                )
            }
        }
        _onHoverEnd(e) {
            this._intOnPressOut(!0),
            this.props.onHoverEnd && this.props.onHoverEnd(e)
        }
        _onHoverStart(e) {
            this._intOnPressIn(!1, ()=>{
                this.props.onHoverStart && this.props.onHoverStart(e)
            }
            )
        }
        _textInfoForButtonStyle(e, t, i, n) {
            switch (e) {
            case a.SXButtonStyle.BlueFill:
            case a.SXButtonStyle.ColorFill:
            case a.SXButtonStyle.LightStroke:
            case a.SXButtonStyle.DarkFill:
            case a.SXButtonStyle.LightNoBackground:
            case a.SXButtonStyle.GradientFill:
                return {
                    color: g.Color.white,
                    subtitleColor: g.Color.gray100,
                    colorStyle: i
                };
            case a.SXButtonStyle.ColorStroke:
                const e = t ? this._accentColor(t) : u.getPrimaryColor();
                return {
                    color: e,
                    subtitleColor: e,
                    colorStyle: t ? o.Styles.createTextStyle({
                        color: e
                    }, !1) : u.getPrimaryTextColorStyle()
                };
            default:
            case a.SXButtonStyle.LightFill:
            case a.SXButtonStyle.DarkStroke:
            case a.SXButtonStyle.DarkNoBackground:
                return {
                    color: g.Color.gray400,
                    subtitleColor: g.Color.gray300,
                    colorStyle: n
                }
            }
        }
        _updateButton(e, t=!0) {
            const i = e ? .9 : 1;
            this._internalUpdateButton(i, t)
        }
        _viewStyleForButtonStyle(e, t) {
            switch (e) {
            case a.SXButtonStyle.ColorFill:
                let e;
                return e = t ? r.backgroundColorStyleForColorInfo(t) : u.getPrimaryBackgroundColorStyle(),
                [e];
            case a.SXButtonStyle.ColorStroke:
                let i;
                if (t) {
                    const e = this._accentColor(t);
                    i = o.Styles.createViewStyle({
                        borderColor: e
                    }, !1)
                } else
                    i = u.getPrimaryBorderColorStyle();
                return [p.backgroundStyleStroke, i];
            case a.SXButtonStyle.LightStroke:
                return [p.backgroundStyleStroke, p.backgroundStyleLightStroke];
            case a.SXButtonStyle.DarkFill:
                return [p.backgroundStyleDark];
            case a.SXButtonStyle.DarkStroke:
                return [p.backgroundStyleStroke, p.backgroundStyleDarkStroke];
            case a.SXButtonStyle.BlueFill:
                return [p.backgroundStyleBlue];
            case a.SXButtonStyle.LightNoBackground:
            case a.SXButtonStyle.DarkNoBackground:
            case a.SXButtonStyle.GradientFill:
                return [];
            default:
            case a.SXButtonStyle.LightFill:
                return [p.backgroundStyleWhite]
            }
        }
        _accentColor(e) {
            return r.accentColor(e)
        }
    }
    t.default = m
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        getEventName() {
            return "sisu_qso"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
        getLoggedOutSendingPolicy() {
            return o.TelemetryEventLoggedOutPolicy.SendNow
        }
    }
    t.QuickSignOnTelemetryStartedEvent = class extends s {
        getActionName() {
            return "Started"
        }
    }
    ;
    t.QuickSignOnTelemetryAutoRefreshed = class extends s {
        getActionName() {
            return "AutoRefreshed"
        }
    }
    ;
    t.QuickSignOnTelemetryInterrupted = class extends s {
        getActionName() {
            return "Interrupted"
        }
    }
    ;
    t.QuickSignOnTelemetrySignedInEvent = class extends s {
        getActionName() {
            return "SignedIn"
        }
    }
    ;
    t.QsoAccountListFetched = class extends s {
        constructor(e) {
            super(),
            this._accountListSize = e,
            this._attributes = {
                AccountListSize: this._accountListSize
            }
        }
        getActionName() {
            return "AccountListFetched"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), this._attributes)
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(152)
      , r = i(10)
      , a = i(5)
      , l = i(4)
      , c = i(41)
      , d = i(8)
      , u = i(15)
      , g = a.lazyProperties({
        centerContent: ()=>n.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center"
        }),
        messageContainer: ()=>n.Styles.createViewStyle({
            paddingHorizontal: 30
        }),
        statusText: ()=>n.Styles.createTextStyle({
            color: d.Color.gray400,
            textAlign: "center",
            backgroundColor: d.Color.transparent,
            marginVertical: 30
        }),
        meetNowStatusText: ()=>n.Styles.createTextStyle({
            color: d.Color.white,
            textAlign: "center",
            backgroundColor: d.Color.transparent,
            marginVertical: 30,
            fontSize: 24
        })
    });
    class h extends o.ComponentBase {
        render() {
            let e;
            return this.props.hideEmoticon || (e = n.createElement(s.AnimatedEmoticon, {
                emoticonName: "cry",
                size: s.Size.ExtraExtraLarge,
                innerText: this.props.statusText
            })),
            n.createElement(n.View, {
                style: [g.centerContent, g.messageContainer, this.props.style]
            }, e, n.createElement(u.BodyText, {
                bold: !0,
                style: this.props.isMeetNow ? g.meetNowStatusText : g.statusText
            }, this.props.statusText), this._renderErrorInfo())
        }
        _renderErrorInfo() {
            return this.props.errorCode ? n.createElement(n.View, null, n.createElement(c, {
                buttonStyle: r.SXButtonStyle.DarkFill,
                buttonSize: r.SXButtonSize.Medium,
                title: l.getString("SplashScreen.LoggingOutButtonTittle"),
                onPress: this.props.onSignOutPressed
            }), n.createElement(u.Caption, {
                style: g.statusText
            }, this.props.errorCode)) : null
        }
    }
    t.default = h
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(86)
      , o = i(0)
      , s = i(13)
      , r = i(63)
      , a = i(2)
      , l = i(3)
      , c = i(5)
      , d = i(266)
      , u = i(1517)
      , g = i(452)
      , h = i(358)
      , p = i(94)
      , m = i(8)
      , S = i(14)
      , C = i(234)
      , y = i(109)
      , f = c.lazyProperties({
        containerLight: ()=>o.Styles.createViewStyle({
            backgroundColor: m.Color.white
        }),
        containerDark: ()=>o.Styles.createViewStyle({
            backgroundColor: m.Color.darkThemeBackground
        }),
        alternativeSpinner: ()=>o.Styles.createViewStyle({
            paddingTop: 64
        }),
        microsoftLogoContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "flex-end"
        }),
        microsoftLogo: ()=>o.Styles.createImageStyle({
            marginBottom: 40,
            height: 24,
            width: 112
        })
    });
    class _ extends s.ComponentBase {
        constructor() {
            super(...arguments),
            this._statusBarKey = "SplashScreen",
            this._animatedOpacityValue = new o.Animated.Value(1),
            this._animatedOpacityStyle = o.Styles.createAnimatedViewStyle({
                opacity: this._animatedOpacityValue
            }),
            this._onSignOutPressed = ()=>{
                d.default.redirectToLogout(a.LogoutReason.LoginRestarted, !0)
            }
        }
        componentDidMount() {
            super.componentDidMount();
            const e = C.themeColorsForTheme(this.props.darkThemeEnabled ? y.Theme.DelphiDark : y.Theme.Delphi)
              , t = p.mergeStyles([p.createBarStyle(e.defaultStatusBarTheme, !1), p.createBackgroundColorStyle(e.defaultStatusBarBackgroundColor, !1)]);
            h.default.addOrUpdateStyle(this._statusBarKey, t, !0)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            h.default.removeStyle(this._statusBarKey)
        }
        _buildState(e, t) {
            return {
                renderAlternative: !(!e.renderAlternative || e.renderIntro || e.statusText)
            }
        }
        animateLeave(e) {
            l.log(a.LogTraceArea.Startup, "SplashScreen animateLeave"),
            this.isComponentMounted() ? n.timing.easeOut({
                value: this._animatedOpacityValue,
                toValue: 0,
                useNativeDriver: !0
            }).start(t=>{
                t.finished && e()
            }
            ) : e()
        }
        _renderSpinner() {
            return this.props.statusText ? null : o.createElement(o.View, {
                style: S.absoluteFill
            }, o.createElement(g, {
                style: this.state.renderAlternative ? f.alternativeSpinner : void 0,
                showBlueLogo: this.state.renderAlternative,
                darkThemeEnabled: this.props.darkThemeEnabled,
                onComplete: this.props.onComplete
            }))
        }
        _renderMessage() {
            return this.props.statusText ? o.createElement(u.default, {
                style: S.absoluteFill,
                statusText: this.props.statusText,
                errorCode: this.props.errorCode,
                onSignOutPressed: this._onSignOutPressed
            }) : null
        }
        _renderMicrosoftLogo() {
            return o.createElement(o.View, {
                style: f.microsoftLogoContainer
            }, o.createElement(o.Image, {
                style: f.microsoftLogo,
                source: this.props.darkThemeEnabled ? r.Collection.MICROSOFT_LOGO_COLOR_WHITE : r.Collection.MICROSOFT_LOGO_COLOR,
                resizeMode: "stretch"
            }))
        }
        render() {
            const e = [S.absoluteFill, this._animatedOpacityStyle, this.props.darkThemeEnabled ? f.containerDark : f.containerLight];
            return o.createElement(o.Animated.View, {
                style: e
            }, this._renderSpinner(), this._renderMessage(), this._renderMicrosoftLogo())
        }
    }
    t.SplashScreenNative = _,
    t.default = _
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(939)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._shortcutId = e,
            this._pinnedShortcuts = t
        }
        getEventName() {
            return "quick_actions"
        }
        getAttributes() {
            let e = super.getAttributes();
            return this._shortcutId && (e.ShortcutName = this._shortcutId),
            this._pinnedShortcuts && n.each(o.QuickActionItemKeys, t=>{
                n.includes(this._pinnedShortcuts, t) && (e["QuickActionsPinned_" + t] = !0)
            }
            ),
            e
        }
    }
    t.QuickActionsEvent = r
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(169)
      , s = (i(0),
    i(7))
      , r = i(48)
      , a = i(71)
      , l = i(2)
      , c = i(3)
      , d = (i(516),
    i(34))
      , u = i(21);
    t.default = new class {
        constructor() {
            this._pendingNotifications = [],
            this._conversationSnooze = {},
            u.RegisterStartupable(this, "PersistedNotificationsService")
        }
        startup() {
            const e = this._supportsPersistedLocalNotifications() ? r.default.getLocalNotifications().then(e=>{
                this._pendingNotifications = n.compact(e);
                const t = e.length - this._pendingNotifications.length;
                t && c.warn(l.LogTraceArea.Notifications, "Found " + t + " falsy notifications!"),
                this.cullOldNotifications()
            }
            ) : s.Resolved()
              , t = o.LocalNotifications.supportsStackedNotifications().then(e=>this._supportsStackedNotifications = e);
            return s.all([e, t]).then(n.noop)
        }
        _supportsPersistedLocalNotifications() {
            return !1
        }
        supportsStackedNotifications() {
            return this._supportsStackedNotifications
        }
        saveLocalNotification(e, t=!1) {
            if (!this._supportsPersistedLocalNotifications())
                return s.Resolved();
            if (t) {
                const t = t=>e.conversationId === t.conversationId && e.messageTimestamp <= t.messageTimestamp;
                if (n.some(this._pendingNotifications, t))
                    return s.Resolved()
            }
            const i = n.clone(e);
            i.sound = void 0,
            i.silent = !0,
            i.enableVibration = !1,
            this.cullOldNotifications(!1);
            const o = r.default.putLocalNotifications([i]);
            return this._pendingNotifications.push(i),
            o
        }
        cancelNotificationsForConversation(e, t, i=!0, o=!0, s=!1) {
            let a = []
              , u = []
              , g = 0
              , h = 0;
            n.each(this._pendingNotifications, i=>{
                const n = i.conversationId === e
                  , o = i.serviceSpecificData && i.serviceSpecificData.eventType === l.NotificationTypeAppLaunched.Reaction;
                n && i.messageTimestamp <= t && !o ? a.push(i) : n ? (o ? h++ : g++,
                u.push(i)) : u.push(i)
            }
            ),
            o && this._conversationSnooze[e] && this._conversationSnooze[e].createdAt <= t && (c.log(l.LogTraceArea.Notifications, "Cancelling snooze for " + d.mriOrId(e)),
            delete this._conversationSnooze[e]),
            a.length > 0 && (c.log(l.LogTraceArea.Notifications, "Conversation " + d.mriOrId(e) + ": cancelling " + a.length + " notifications, cutoff time: " + t + "; " + u.length + " still active (" + g + " from this conversation and " + h + " reactions)"),
            this._pendingNotifications = u,
            r.default.removeLocalNotifications(a),
            this.cancelNotifications(a, i, !1))
        }
        snoozeConversation(e, t) {
            this._conversationSnooze[e] = t
        }
        getConversationSnooze(e) {
            return this._conversationSnooze[e]
        }
        cancelNotificationById(e) {
            const [t,i] = n.partition(this._pendingNotifications, t=>t.id === e);
            t.length > 0 && (this._pendingNotifications = i,
            c.log(l.LogTraceArea.Notifications, "Cancelling " + t.length + " notifications, id: " + d.mriOrId(e) + "; " + i.length + " still active"),
            r.default.removeLocalNotifications(t),
            this.cancelNotifications(t))
        }
        sortAllLocalNotificationsByTimeDesc() {
            return n.orderBy(this._pendingNotifications, e=>e.timestamp, "desc")
        }
        removeAllLocalNotifications() {
            this._pendingNotifications.length > 0 && (r.default.removeLocalNotifications(this._pendingNotifications),
            this._pendingNotifications = [],
            this.cancelNotifications([]))
        }
        cullOldNotifications(e=!0) {
            let t = a.add(Date.now(), 0, -7)
              , i = []
              , o = [];
            n.each(this._pendingNotifications, e=>{
                e.timestamp <= t ? i.push(e) : o.push(e)
            }
            ),
            i.length > 0 && (this._pendingNotifications = o,
            r.default.removeLocalNotifications(i),
            this.cancelNotifications(i, e))
        }
        cancelNotifications(e, t=!0, i=!1) {
            n.each(e, e=>{
                o.LocalNotifications.cancel(e)
            }
            )
        }
    }
}
, , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(5)
      , r = i(4)
      , a = i(8)
      , l = i(23)
      , c = s.lazyProperties({
        newLabel: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.red,
            paddingHorizontal: 6,
            borderRadius: 8
        }),
        newLabelText: ()=>n.Styles.createTextStyle({
            color: a.Color.white,
            fontSize: l.controlFontSize.smallBadge,
            font: l.font.uiDisplayBold
        })
    });
    class d extends o.ComponentBase {
        render() {
            return n.createElement(n.View, {
                style: [c.newLabel, this.props.style]
            }, n.createElement(n.Text, {
                style: [c.newLabelText]
            }, r.getString("Global.NewIndicatorUpper")))
        }
    }
    t.default = d
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(701);
    class o extends n.default {
        _buildRows(e, t) {
            return e.rowBuilders
        }
    }
    t.default = o
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(115)
      , s = i(2)
      , r = i(39);
    var a;
    !function(e) {
        e[e.Open = 1] = "Open",
        e[e.Close = 2] = "Close",
        e[e.Suppress = 3] = "Suppress"
    }(a = t.CoachMarkTelemetryEventAction || (t.CoachMarkTelemetryEventAction = {}));
    class l extends r.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e.action,
            this._anchorClicked = e.anchorClicked,
            this._coachMarkType = e.coachMarkType,
            this._dismissed = e.dismissed,
            this._nextClicked = e.nextClicked,
            this._skipClicked = e.skipClicked,
            this._origin = e.origin,
            this._error = e.error,
            this._errorDescription = e.errorDescription
        }
        getEventName() {
            return "engagement_coach_mark_event"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Action: this._action ? a[this._action] : "Unknown",
                AnchorClicked: this._anchorClicked || "",
                CoachMarkType: this._coachMarkType ? o.CoachMarkType[this._coachMarkType] : "Unknown",
                Dismissed: this._dismissed || "",
                NextClicked: this._nextClicked || "",
                SkipClicked: this._skipClicked || "",
                Origin: s.CoachMarkOrigin[this._origin || s.CoachMarkOrigin.Unknown],
                Error: this._error || "",
                ErrorDescription: this._errorDescription || ""
            })
        }
    }
    t.default = l
}
, , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(65)
      , o = i(6)
      , s = i(81)
      , r = i(4);
    t.show = function(e) {
        s.dismissAll();
        const t = r.getString("FilePicker.LimitExceeded")
          , i = r.getString("FilePicker.LimitExceededContent", {
            value: o.default.getS4LMessagingFeaturesNoSubscription().limitForFilePicker
        });
        n.default.showOKAlert(t, i, e)
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(127);
    var o, s;
    !function(e) {
        e[e.Copy = 0] = "Copy",
        e[e.Open = 1] = "Open",
        e[e.SaveAs = 2] = "SaveAs",
        e[e.SaveToDownloads = 3] = "SaveToDownloads"
    }(o = t.MediaDownloadReason || (t.MediaDownloadReason = {})),
    function(e) {
        e[e.MediaViewer = 0] = "MediaViewer",
        e[e.StreamItem = 1] = "StreamItem"
    }(s = t.MediaDownloadActionOrigin || (t.MediaDownloadActionOrigin = {}));
    class r extends n.MessageTelemetryBase {
        constructor(e, t, i, n="") {
            super(e, e.conversationId),
            this._origin = t,
            this._reason = i,
            this._fileType = n
        }
        getEventName() {
            return "messaging_download"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Reason = o[this._reason],
            e.Origin = s[this._origin],
            e.FileType = this._fileType,
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    t.MediaDownloadTelemetryEvent = r
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(164)
      , o = i(130)
      , s = i(2)
      , r = i(22);
    function a() {
        if (r.default.isUsingSplitViewNoSubscription()) {
            const e = n.default.getLastActiveSplitViewWindow();
            return e && e.getWindow()
        }
        if ("undefined" != typeof window)
            return window
    }
    function l() {
        const e = a();
        if (!e)
            return "";
        const t = e.getSelection();
        return t ? t.getRangeAt(0).toString() : ""
    }
    t.isTextSelected = function() {
        const e = a();
        if (!e)
            return !1;
        const t = e.getSelection();
        return !!t && "Range" === t.type
    }
    ,
    t.getSelectedText = l,
    t.getNewMessageFromSelection = function(e, t) {
        return o.createMessageInfoFromEscapedText(e, s.PostSource.EphemeralMessage, t || l())
    }
}
, , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(13)
      , s = i(5)
      , r = i(8)
      , a = i(15)
      , l = s.lazyProperties({
        buttonDefault: ()=>n.Styles.createButtonStyle({
            flex: -1,
            justifyContent: "center",
            alignItems: "center",
            backgroundColor: r.Color.white,
            borderColor: r.Color.gray300,
            borderWidth: 0,
            borderStyle: "solid",
            borderRadius: 24,
            paddingTop: 7,
            paddingBottom: 8,
            paddingHorizontal: 18,
            marginLeft: 20
        }),
        buttonHover: ()=>n.Styles.createButtonStyle({
            backgroundColor: r.Color.blueOverlay70
        }),
        textDefault: ()=>n.Styles.createTextStyle({
            color: r.Color.white
        }),
        textHover: ()=>n.Styles.createTextStyle({
            color: r.Color.white
        }),
        textDisabledDefault: ()=>n.Styles.createTextStyle({
            color: r.Color.white
        }),
        buttonDisabledDefault: ()=>n.Styles.createButtonStyle({
            backgroundColor: r.Color.blueOverlay70,
            borderColor: r.Color.blueOverlay70
        })
    });
    class c extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._handleOnClick = e=>{
                e.stopPropagation(),
                !this.props.isDisabled && this.props.onClick && this.props.onClick(e)
            }
            ,
            this._handleHoverStart = ()=>{
                this.setState({
                    isHoveringOverButton: !0
                })
            }
            ,
            this._handleHoverEnd = ()=>{
                this.setState({
                    isHoveringOverButton: !1
                })
            }
        }
        render() {
            let e = [l.buttonDefault]
              , t = [l.textDefault];
            return this.props.textStyle && t.push(this.props.textStyle),
            this.props.buttonStyle && (this.props.buttonStyle instanceof Array ? e = e.concat(this.props.buttonStyle) : e.push(this.props.buttonStyle)),
            this.state.isHoveringOverButton && !this.props.isDisabled && (e.push(l.buttonHover),
            t.push(l.textHover)),
            this.props.isDisabled && (e.push(l.buttonDisabledDefault),
            t.push(l.textDisabledDefault)),
            n.createElement(n.Button, {
                style: e,
                title: this.props.label,
                onPress: this._handleOnClick,
                onHoverStart: this._handleHoverStart,
                onHoverEnd: this._handleHoverEnd,
                disabled: this.props.isDisabled
            }, n.createElement(a.BodyText, {
                size: a.BodyTextSize.SmallDeprecated,
                style: t,
                numberOfLines: 1,
                disableThemeSubscription: !0
            }, this.props.label))
        }
    }
    e.exports = c
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(104)
      , s = i(7)
      , r = i(3)
      , a = i(39);
    t.default = class {
        initializeAndPause(e) {
            return r.log(o.LogTraceArea.ConsoleSink, "initialized and paused"),
            s.Resolved()
        }
        startUsingUserId() {
            return r.log(o.LogTraceArea.ConsoleSink, "start using user id"),
            s.Resolved()
        }
        respondsTo(e) {
            return !0
        }
        supportsEventSampling() {
            return !1
        }
        consumeEvent(e) {
            let t = "";
            switch (l || e.getEventTraceMode()) {
            case a.TelemetryTraceMode.None:
                break;
            case a.TelemetryTraceMode.EventName:
                t = "consuming event " + e.getEventName();
                break;
            case a.TelemetryTraceMode.Full:
                t = "consuming event " + e.getEventName() + "\nattributes " + n.pii.Omit(JSON.stringify(e.getAttributes())) + "\npiiAttributes " + n.pii.Omit(JSON.stringify(e.getPiiAttributes())) + "\ncorrelationAttributes " + n.pii.Omit(JSON.stringify(e.getCorrelationAttributes()));
                break;
            default:
                t = "error: unsupported trace mode " + a.TelemetryTraceMode[e.getEventTraceMode()]
            }
            0 !== t.length && r.log(o.LogTraceArea.ConsoleSink, t)
        }
        flush() {
            return r.log(o.LogTraceArea.ConsoleSink, "flush"),
            s.Resolved()
        }
        pause() {
            r.log(o.LogTraceArea.ConsoleSink, "paused")
        }
        resume() {
            r.log(o.LogTraceArea.ConsoleSink, "resumed")
        }
    }
    ;
    let l = void 0;
    t.test_overrideEventTraceMode = function(e) {
        const t = e ? a.TelemetryTraceMode.Full : a.TelemetryTraceMode.None;
        l = t
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(7)
      , o = i(48)
      , s = i(74)
      , r = i(38)
      , a = i(20)
      , l = i(93);
    i(21);
    t.internal_feedAndPersistInfo = function(e, t, i, c, d, u) {
        const g = s.default.getData(o.InternalKeys.MyUserStoreData) || {};
        let h;
        t && (-1 !== t.indexOf("@") || l.default.isValidNumberString(t)) && (h = t);
        const p = {}
          , m = i || a.getUserCid() || g.msaCid
          , S = c || a.getUserCidHex() || g.msaCidHex;
        let C;
        return h = h || a.getMsaId() || g.msaId,
        t = t || a.getMsaIdFromSignIn() || g.msaIdFromSignIn,
        u = u || a.getAnid() || g.anid,
        m && (p.msaCid = m),
        S && (p.msaCidHex = S),
        h && (p.msaId = h),
        t && (p.msaIdFromSignIn = t),
        u && (p.anid = u),
        C = r.default(p, g) ? n.Resolved() : s.default.putData(o.InternalKeys.MyUserStoreData, p, d),
        a.internal_feedInfo(e, p.msaId, p.msaCid, p.msaCidHex, p.msaIdFromSignIn, p.anid),
        C
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(0)
      , r = i(52)
      , a = i(10)
      , l = i(225)
      , c = i(160)
      , d = i(2)
      , u = i(3)
      , g = i(5)
      , h = i(4)
      , p = i(2780)
      , m = i(17)
      , S = i(214)
      , C = i(291)
      , y = i(24)
      , f = i(432)
      , _ = i(14)
      , b = i(59)
      , v = i(12)
      , T = i(9)
      , P = g.lazyProperties({
        splitInnerContainer: ()=>s.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row"
        }),
        masterContainer: ()=>s.Styles.createViewStyle({
            width: l.DefaultSplitMasterWidth,
            borderRightWidth: 1
        })
    });
    class A extends v.default {
        constructor() {
            super(...arguments),
            this._childProps = {
                onAccessibilityTitleChange: e=>{
                    this.isComponentMounted() && this.state.title !== e && this.setState({
                        title: e
                    })
                }
            },
            this._closeAnimationEvent = new r.default,
            this._willResetFocus = ()=>{
                this._masterContextContainerRef && this._masterContextContainerRef.setFocusLimited(!0)
            }
            ,
            this._didResetFocus = ()=>{
                this._masterContextContainerRef && this._masterContextContainerRef.setFocusLimited(!1)
            }
            ,
            this._onClickOutside = ()=>{
                this.state.activeDetailContext && this.state.activeDetailContext.state.isFirstLogin ? this._onboardingFlowClickedOutsideTracked || (this._onboardingFlowClickedOutsideTracked = !0,
                u.track(new C.SetupWizardClickedOutside(c.DialogNavOrigin.Onboarding))) : (u.log(d.LogTraceArea.Navigation, "GenericDesktopModal._onAnimateCloseModal"),
                this._closeAnimationEvent.fire(this._onCloseModal))
            }
            ,
            this._onCloseModal = ()=>{
                const e = T.newCauseId();
                u.log(d.LogTraceArea.Navigation, "GenericDesktopModal._onCloseModal causeId: " + e),
                m.closeGenericDesktopModal(e, this._getContext())
            }
            ,
            this._onResetFocus = ()=>{
                this._modalRef && this._modalRef.resetFocus()
            }
            ,
            this._onMasterContextContainerRef = e=>{
                this._masterContextContainerRef = e || void 0
            }
            ,
            this._onModalRef = e=>{
                this._modalRef = e || void 0
            }
        }
        _buildState(e, t) {
            let i, n;
            e.activeModalSplitContext ? (i = o.last(e.activeModalSplitContext.getNavStack()),
            n = e.activeModalSplitContext.getMasterContext(!1)) : (i = void 0,
            n = void 0);
            const s = b.useTabletUI()
              , r = this._getRootViewId();
            return {
                isMobileScreenSize: y.default.isMobileScreenSize(r),
                animationType: s ? a.SXModalAnimationType.Bottom : a.SXModalAnimationType.Default,
                modalNavStackSize: e.activeModalSplitContext ? e.activeModalSplitContext.getNavStack().length : 0,
                activeDetailContext: i,
                activeMasterContext: n,
                useTabletUI: s,
                nativeModalWindow: !1
            }
        }
        componentMounting(e) {
            super.componentMounting(e);
            const t = S.default.modalNavigatorIdForRootViewId(this._getRootViewId())
              , i = T.newCauseId();
            u.log(d.LogTraceArea.Navigation, "GenericDesktopModal.componentMounting navigatorId: " + n.pii.Omit(t) + " causeId: " + i),
            m.collapseSplitNavContext(t, e.isMobileScreenSize, i)
        }
        componentDidMount() {
            super.componentDidMount(),
            this._masterContextContainerRef && !this.state.nativeModalWindow && this._masterContextContainerRef.setFocusLimited(!1)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            if (super.UNSAFE_componentWillUpdate(e, t, i),
            t.isMobileScreenSize !== this.state.isMobileScreenSize) {
                const e = S.default.modalNavigatorIdForRootViewId(this._getRootViewId())
                  , i = T.newCauseId();
                u.log(d.LogTraceArea.Navigation, "GenericDesktopModal.UNSAFE_componentWillUpdate navigatorId: " + n.pii.Omit(e) + " causeId: " + i),
                m.collapseSplitNavContext(e, t.isMobileScreenSize, i)
            }
        }
        render() {
            const e = this._renderMasterFromNavContext(this.state.activeMasterContext)
              , t = !!e
              , i = this._renderDetailFromNavContext(this.state.activeDetailContext, t, this._childProps)
              , n = i ? i.component : void 0
              , o = (i ? i.title : void 0) || this.state.title || h.getString("Global.DialogAccessibilityLabel");
            let r = l.DefaultHeight
              , a = e ? l.DefaultSplitViewWidth : l.DefaultWidth;
            this.state.activeDetailContext && this.state.activeDetailContext.state && (this.state.activeDetailContext.state.customizedWidth && (a = this.state.activeDetailContext.state.customizedWidth),
            this.state.activeDetailContext.state.customizedHeight && (r = this.state.activeDetailContext.state.customizedHeight));
            const c = this.state.activeDetailContext && this.state.activeDetailContext.state.isFirstLogin;
            let d;
            return d = e ? s.createElement(s.View, {
                style: P.splitInnerContainer
            }, e, n) : n,
            s.createElement(f, {
                ref: this._onModalRef,
                modalWidth: a,
                modalHeight: r,
                onClickOutside: this._onClickOutside,
                closeAnimationEvent: this._closeAnimationEvent,
                fullSize: this.state.isMobileScreenSize,
                modalTitle: o,
                animationType: this.state.animationType,
                showOverflow: this.props.showOverflow,
                skipEscHandling: c,
                willResetFocus: this._willResetFocus,
                didResetFocus: this._didResetFocus
            }, s.createElement(s.View, {
                style: _.flexOne
            }, d))
        }
        _renderDetailFromNavContext(e, t, i) {
            if (!e)
                return;
            const n = Object.assign(Object.assign({}, i), {
                isAloneInNavStack: 1 === this.state.modalNavStackSize,
                closeModal: this.state.animationType === a.SXModalAnimationType.Bottom ? this._onClickOutside : void 0,
                isFullScreenModal: this.state.isMobileScreenSize,
                isPresentedInGenericDesktopModal: !0,
                isPresentedInDesktopSubview: !0,
                isPresentedInSplitView: t || void 0
            });
            return p.default.renderComponent(e, n)
        }
        _renderMasterFromNavContext(e) {
            if (!e)
                return;
            const t = {
                isPresentedInGenericDesktopModal: !0,
                isPresentedInDesktopSubview: !0,
                isPresentedInSplitView: !0,
                closeModal: this.state.animationType === a.SXModalAnimationType.Bottom ? this._onClickOutside : void 0,
                resetFocus: this._onResetFocus,
                detailContext: this.props.activeModalSplitContext ? this.props.activeModalSplitContext.getNavStack() : void 0
            }
              , i = p.default.renderComponent(e, t);
            let n = i ? i.component : void 0;
            return n && (n = s.createElement(s.View, {
                ref: this._onMasterContextContainerRef,
                style: [P.masterContainer, this._themeStyles.dividerBorderColorStyle],
                limitFocusWithin: this.state.nativeModalWindow ? void 0 : s.Types.LimitFocusType.Limited
            }, n)),
            n
        }
        _createContext() {
            const e = super._createContext();
            return e.isPresentedInDesktopSubview = !0,
            e.isPresentedInGenericDesktopModal = !0,
            e.shouldUseThemePreview = !0,
            e
        }
    }
    t.default = A
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(443)
      , o = i(18)
      , s = i(39);
    var r;
    !function(e) {
        e[e.BalanceStatePanel = 0] = "BalanceStatePanel",
        e[e.DialerPanel = 1] = "DialerPanel",
        e[e.GroupCall = 2] = "GroupCall"
    }(r = t.NavigateToDestination || (t.NavigateToDestination = {}));
    class a extends s.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._settings = e,
            this._userEntitlementsSummary = t,
            this._isFreeTrialAvailable = i
        }
        getEventName() {
            return "s4l_entitlement_experiments"
        }
        getAriaTenantTokenOverride() {
            return o.getAriaCommerceTenantToken()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ExperimentName = this._settings.name,
            e.ExperimentLocation = n.ExperimentLocation[this._settings.location],
            this._settings.layoutOption && (e.LayoutOption = this._settings.layoutOption),
            this._userEntitlementsSummary && (e.UserEntitlementsSummary = this._userEntitlementsSummary),
            this._isFreeTrialAvailable && (e.IsFreeTrialAvailable = this._isFreeTrialAvailable),
            e.Action = this.getActionName(),
            e
        }
    }
    t.ExperimentOpenAction = class extends a {
        getActionName() {
            return "ExperimentOpen"
        }
    }
    ;
    t.ExperimentBannerCloseAction = class extends a {
        getActionName() {
            return "BannerClose"
        }
    }
    ;
    t.ExperimentButtonClickAction = class extends a {
        constructor(e, t, i, n) {
            super(t, i, n),
            this._navigateTo = e
        }
        getActionName() {
            return "ButtonClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.NavigateTo = r[this._navigateTo],
            e
        }
    }
    ;
    class l extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "s4l_entitlement_ucux_cta"
        }
        getAriaTenantTokenOverride() {
            return o.getAriaCommerceTenantToken()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this._action,
            e
        }
    }
    t.UnansweredCallCTA = l
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(106)
      , s = i(136)
      , r = i(129);
    var a;
    !function(e) {
        e[e.GroupChats = 0] = "GroupChats",
        e[e.Bots = 1] = "Bots",
        e[e.Messages = 2] = "Messages",
        e[e.PublicDirectory = 3] = "PublicDirectory"
    }(a = t.SearchScenarioComputation || (t.SearchScenarioComputation = {}));
    t.SearchTelemetryScenario = class {
        constructor(e, t, i) {
            this._origin = e,
            this._searchPanelInitiator = t,
            this._getResultType = i,
            this._isSuccessful = !1,
            this._scenario = new r.default(o.ScenarioName.Search),
            this._scenario.setDuplicateStepMarkingEnabled(),
            this._scenario.start(this._getBaseAttributes())
        }
        clickOnResult(e, t, i, o) {
            const s = this._getBaseAttributes();
            s.ResultType = this._getResultType(e, i),
            s.SearchGroup = n.SearchResultsListGroup[t],
            s.Index = o,
            this._isSuccessful = !0,
            this._scenario.markStepCompleted("ClickOnResult", s)
        }
        clickOnResultContextMenu(e, t, i) {
            if (!this._scenario.isResolved()) {
                const o = this._getBaseAttributes();
                o.ResultType = this._getResultType(e),
                o.SearchGroup = n.SearchResultsListGroup[t],
                o.ContextMenuCommand = i,
                this._isSuccessful = !0,
                this._scenario.markStepCompleted("ClickOnResultContextMenu", o)
            }
        }
        clickOnMore(e) {
            const t = this._getBaseAttributes();
            t.SearchGroup = n.SearchResultsListGroup[e],
            this._scenario.markStepCompleted("ClickOnMore", t)
        }
        computationFailed(e, t, i) {
            const n = this._getBaseAttributes();
            n.FailedComputation = a[e],
            t && (n.ErrorCode = t),
            i && (n.ErrorMessage = i),
            this._scenario.markStepCompleted("ComputationFailed", n)
        }
        finish() {
            this._isSuccessful ? this._scenario.finish(this._getBaseAttributes()) : this._scenario.fail(void 0, this._getBaseAttributes())
        }
        setQueryLength(e) {
            this._queryLength = e
        }
        setSearchFilter(e) {
            this._searchFilter = e
        }
        _getBaseAttributes() {
            const e = {};
            return e.Origin = n.SearchResultsListOrigin[this._origin],
            void 0 !== this._queryLength && (e.QueryLength = this._queryLength),
            this._searchFilter && (e.SearchFilter = s.DesktopSearchFilterOptions[this._searchFilter]),
            this._searchPanelInitiator && (e.SearchPanelInitiator = n.SearchPanelInitiator[this._searchPanelInitiator]),
            e
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(52)
      , s = i(556)
      , r = i(58)
      , a = i(43)
      , l = i(2)
      , c = i(5)
      , d = i(4)
      , u = i(17)
      , g = i(24)
      , h = i(47)
      , p = i(162)
      , m = i(8)
      , S = i(23)
      , C = i(15)
      , y = i(90)
      , f = c.lazyProperties({
        contentContainer: ()=>n.Styles.createViewStyle({
            backgroundColor: m.Color.transparent,
            justifyContent: "center",
            alignItems: "center"
        }),
        contentContainerMobile: ()=>n.Styles.createViewStyle({
            width: 300
        }),
        innerContainer: ()=>n.Styles.createViewStyle({
            justifyContent: "center",
            alignItems: "center"
        }),
        title: ()=>n.Styles.createTextStyle({
            color: m.Color.white,
            textAlign: "center",
            alignSelf: "center",
            marginTop: 10
        }),
        description: ()=>n.Styles.createTextStyle({
            color: m.Color.white,
            alignSelf: "center",
            textAlign: "center",
            marginVertical: 20,
            paddingHorizontal: 10
        }),
        linkButton: ()=>n.Styles.createButtonStyle({
            minHeight: 40,
            paddingLeft: 10
        }),
        linkText: ()=>n.Styles.createTextStyle({
            font: S.font.uiDisplayBold,
            fontSize: S.controlFontSize.bodySmallDeprecated,
            color: m.Color.white
        })
    });
    class _ extends a.default {
        constructor() {
            super(...arguments),
            this._closeAnimationEvent = new o.default,
            this._onOkButtonClick = ()=>{
                r.default.dismissModal(this.props.dialogId, this._getRootViewId()),
                this.props.onOkButtonClick && this.props.onOkButtonClick()
            }
            ,
            this._onCancelButtonClick = ()=>{
                r.default.dismissModal(this.props.dialogId, this._getRootViewId()),
                this.props.onCancelButtonClick && this.props.onCancelButtonClick()
            }
            ,
            this._onPrivacyStatementPressed = ()=>{
                r.default.dismissModal(this.props.dialogId, this._getRootViewId()),
                this.props.privacyStatementUrl && u.navigateToInAppBrowser({
                    origin: l.BrowserOrigin.ConsentModal,
                    url: this.props.privacyStatementUrl,
                    openUrlOptions: {
                        onInAppWebBrowserClose: this._onPrivacyStatementClose
                    },
                    openSecondaryBrowserIfNecessary: !0
                }, this._getContext())
            }
            ,
            this._onTermsPressed = ()=>{
                r.default.dismissModal(this.props.dialogId, this._getRootViewId()),
                this.props.termsOfServiceUrl && u.navigateToInAppBrowser({
                    origin: l.BrowserOrigin.ConsentModal,
                    url: this.props.termsOfServiceUrl,
                    openUrlOptions: {
                        onInAppWebBrowserClose: this._onTermsOfServiceClose
                    },
                    openSecondaryBrowserIfNecessary: !0
                }, this._getContext())
            }
            ,
            this._onPrivacyStatementClose = ()=>{
                this.props.onPrivacyStatementClose && this.props.onPrivacyStatementClose()
            }
            ,
            this._onTermsOfServiceClose = ()=>{
                this.props.onTermsOfServiceClose && this.props.onTermsOfServiceClose()
            }
        }
        _buildState(e, t) {
            const i = this._getRootViewId();
            return {
                isMobileScreenSize: g.default.isMobileScreenSize(i)
            }
        }
        componentDidMount() {
            super.componentDidMount()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this.props.onModalClosed && this.props.onModalClosed()
        }
        render() {
            let e, t, i = [{
                text: this.props.cancelButtonLabel || d.getString("Global.CancelLabel"),
                onPress: this._onCancelButtonClick,
                isCancel: !0
            }, {
                text: this.props.okButtonLabel || d.getString("Global.OkLabel"),
                onPress: this._onOkButtonClick,
                isSubmit: !0,
                autoFocus: !h.shouldAnnounceForAccessibility() || void 0
            }];
            this.props.privacyStatementLabel && this.props.privacyStatementUrl && (e = n.createElement(y.WideButton, {
                key: "privacyStatementLink",
                buttonStyles: f.linkButton,
                hideDivider: !0,
                label: this.props.privacyStatementLabel,
                accessibilityLabel: this.props.privacyStatementLabel,
                labelStyle: f.linkText,
                onPressed: this._onPrivacyStatementPressed
            })),
            this.props.termsOfServiceLabel && this.props.termsOfServiceUrl && (t = n.createElement(y.WideButton, {
                key: "termsLink",
                buttonStyles: f.linkButton,
                hideDivider: !0,
                label: this.props.termsOfServiceLabel,
                accessibilityLabel: this.props.termsOfServiceLabel,
                labelStyle: f.linkText,
                onPressed: this._onTermsPressed
            }));
            let o = [f.contentContainer];
            this.state.isMobileScreenSize && o.push(f.contentContainerMobile);
            const r = d.getString("ConsentModal.ConsentNeededAccessibilityLabel", {
                description: this.props.description || ""
            });
            return n.createElement(p.SimpleDialog, {
                dialogId: this.props.dialogId,
                buttons: i,
                buttonAlignment: s.SimpleDialogButtonAlignment.HorizontalStack,
                closeAnimationEvent: this._closeAnimationEvent,
                accessibilityLabel: r
            }, n.createElement(n.View, {
                style: o
            }, n.createElement(n.View, {
                style: f.innerContainer,
                importantForAccessibility: n.Types.ImportantForAccessibility.No
            }, this.props.iconView, n.createElement(n.Text, {
                autoFocus: !!h.isMobileScreenReaderEnabled && void 0,
                style: [S.fontStyle.messagingHeader, f.title]
            }, this.props.title), n.createElement(C.BodyText, {
                size: C.BodyTextSize.SmallDeprecated,
                style: f.description,
                disableThemeSubscription: !0
            }, this.props.description)), e, t))
        }
    }
    t.default = _
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(166)
      , s = i(0)
      , r = i(102)
      , a = i(6)
      , l = i(50)
      , c = i(31)
      , d = i(863)
      , u = i(61)
      , g = (i(42),
    i(58))
      , h = i(10)
      , p = i(77)
      , m = i(2)
      , S = i(80)
      , C = i(27)
      , y = i(5)
      , f = i(4)
      , _ = i(123)
      , b = i(62)
      , v = i(17)
      , T = i(501)
      , P = i(315)
      , A = i(37)
      , k = i(105)
      , I = i(84)
      , w = i(44)
      , N = i(8)
      , M = i(18)
      , E = i(11)
      , x = i(131)
      , D = i(226)
      , L = i(14)
      , R = i(15)
      , B = i(2836)
      , O = i(12)
      , F = y.lazyProperties({
        panel: ()=>s.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsBlockContainer: ()=>s.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingHorizontal: 10,
            overflow: "visible",
            flexGrow: 1
        }),
        settingsBlockContainerDesktop: ()=>s.Styles.createViewStyle({
            paddingHorizontal: 20
        }),
        controlRowNoDivider: ()=>s.Styles.createViewStyle({
            marginVertical: 4,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            minHeight: 60
        }),
        label: ()=>s.Styles.createTextStyle({
            flex: 1,
            paddingRight: 10
        }),
        caption: ()=>s.Styles.createTextStyle({
            marginTop: 4,
            marginBottom: 12
        }),
        title: ()=>s.Styles.createTextStyle({
            paddingTop: 30,
            paddingBottom: 10
        }),
        settingsContainer: ()=>s.Styles.createViewStyle({
            paddingBottom: 10,
            paddingTop: 2,
            flex: 1
        }),
        countryPickerButton: ()=>s.Styles.createButtonStyle({
            flexDirection: "row",
            alignItems: "stretch",
            marginLeft: 10
        }),
        pickerText: ()=>s.Styles.createTextStyle({
            maxWidth: 250
        }),
        pickerChevron: ()=>s.Styles.createTextStyle({
            marginLeft: 4,
            marginTop: 2
        }),
        countrySelectorPickerContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            minHeight: 30,
            alignItems: "center",
            alignSelf: "stretch"
        }),
        link: ()=>s.Styles.createTextStyle({
            color: N.Color.blue,
            textDecorationLine: "underline"
        }),
        warningLabel: ()=>s.Styles.createTextStyle({
            paddingBottom: 10
        }),
        emergencyCallingSection: ()=>s.Styles.createViewStyle({
            paddingTop: 4,
            flex: 1
        }),
        countrySelectorPopupContainer: ()=>s.Styles.createViewStyle({
            height: 350,
            width: 300
        }),
        menuItemContainer: ()=>s.Styles.createButtonStyle({
            minHeight: 40,
            alignItems: "center",
            justifyContent: "space-between",
            flexDirection: "row",
            borderLeftWidth: 2,
            borderStyle: "solid",
            borderColor: N.Color.transparent,
            height: 40
        }),
        countryListItemName: ()=>s.Styles.createTextStyle({
            flexDirection: "row",
            flex: 1
        }),
        countryListItemCode: ()=>s.Styles.createTextStyle({
            flex: 0,
            textAlign: "right"
        }),
        menuItemText: ()=>s.Styles.createTextStyle({
            marginHorizontal: 20
        })
    })
      , V = e=>({
        key: e.country,
        height: 40,
        template: U.COUNTRY
    })
      , U = {
        COUNTRY: "dcs_country"
    }
      , H = [{
        x: 0,
        y: 0,
        label: f.getString("AdvancedCallingSettingsPanel.NdiWatermarkLocationTopLeft")
    }, {
        x: .5,
        y: 0,
        label: f.getString("AdvancedCallingSettingsPanel.NdiWatermarkLocationTopMiddle")
    }, {
        x: 1,
        y: 0,
        label: f.getString("AdvancedCallingSettingsPanel.NdiWatermarkLocationTopRight")
    }, {
        x: 0,
        y: 1,
        label: f.getString("AdvancedCallingSettingsPanel.NdiWatermarkLocationBottomLeft")
    }, {
        x: .5,
        y: 1,
        label: f.getString("AdvancedCallingSettingsPanel.NdiWatermarkLocationBottomMiddle")
    }, {
        x: 1,
        y: 1,
        label: f.getString("AdvancedCallingSettingsPanel.NdiWatermarkLocationBottomRight")
    }];
    class W extends l.default {
        constructor(e) {
            super(e),
            this._onWatermarkLocationSelected = e=>{
                T.default.setWatermarkLocation(e)
            }
            ,
            this._onToggleIsNdiEnabled = (e,t)=>{
                T.default.setNdiEnabled(t),
                this.setState({
                    isNdiEnabled: t
                })
            }
            ,
            this._onCountryPickerButtonRef = e=>{
                this._countryPickerButton = e || void 0
            }
            ,
            this._onPressTermsOfServiceHandler = ()=>{
                v.navigateToSsoWebFlow(this.state.termsOfServiceGoLink, "userInfo.emergencyCalling", f.getString("TermsOfServiceWebFlow.Title"), this._getRootViewId())
            }
            ,
            this._onCountryPickerClick = ()=>{
                const e = {
                    getAnchor: ()=>this._countryPickerButton,
                    renderPopup: (e,t,i,n)=>s.createElement(D, {
                        anchorPosition: e,
                        anchorOffset: t,
                        popupWidth: i,
                        popupHeight: n,
                        fillColor: this._themeColors.popoverBackgroundColor,
                        strokeColor: this._useDarkTheme() ? this._themeColors.popupBorderColor : void 0,
                        skipPopupAutoFocus: !0
                    }, s.createElement(s.View, {
                        style: F.countrySelectorPopupContainer
                    }, s.createElement(s.View, {
                        style: L.flexOne
                    }, s.createElement(o.VirtualListView, {
                        itemList: this._getCountriesListItems(),
                        renderItem: this._renderCountryListItem,
                        animateChanges: !1,
                        keyboardShouldPersistTaps: !0,
                        accessibilityLabel: f.getString("PSTNCountryList.CountryList")
                    })))),
                    positionPriorities: ["bottom", "top"],
                    dismissIfShown: !0,
                    rootViewId: this._getRootViewId()
                };
                g.default.showPopup(e, "countrySelectorPopup")
            }
            ,
            this._onCountrySelected = e=>{
                b.default.setEmergencyCallDefaultCountry(e),
                this.setState({
                    emergencyCallDefaultCountry: e
                }),
                this.setState({
                    isEmergencyCallEligibleCountry: this._isEmergencyCallEligibleCountry(e)
                }),
                g.default.dismissPopup("countrySelectorPopup", this._getRootViewId()),
                this._countryPickerButton && this._countryPickerButton.requestFocus()
            }
            ,
            this._renderCountryListItem = e=>{
                switch (e.template) {
                case U.COUNTRY:
                    return this._renderCountryItem(e);
                default:
                    return []
                }
            }
            ,
            this._renderCountryItem = e=>{
                const t = this.state.countries[e.key];
                return s.createElement(z, {
                    onSelect: this._onCountrySelected,
                    country: t
                })
            }
            ,
            this._isEmergencyCallEligibleCountry = e=>{
                const t = a.default.getS4LEntitlementFeatures().SCE.Dialpad.EmergencyCall.allowedCountries;
                return !!e && t.indexOf(e) > -1
            }
            ;
            const t = M.isRTL() ? "desc" : "asc";
            this._watermarkLocationList = n.orderBy(H, ["y", "x"], ["asc", t]).map(e=>({
                value: e.x.toString() + "," + e.y.toString(),
                label: e.label
            }))
        }
        static getHeaderText() {
            return f.getString("AdvancedCallingSettingsPanel.HeaderText")
        }
        _buildState(e, t) {
            const i = a.default.getS4LCMCFeatures()
              , n = b.default.getEmergencyCallDefaultCountry();
            return {
                showNdiSettings: i.enableNDISetting && c.default.NdiHookupService.isSupported(),
                isNdiEnabled: T.default.isNdiEnabled(),
                watermarkLocation: T.default.getWatermarkLocation(),
                isInACall: k.default.isInCall(),
                learnMoreNdiLink: a.default.getS4LCMCFeaturesNoSubscription().learnMoreNDILink,
                broadcastTermsOfServiceUrl: a.default.getS4LCMCFeaturesNoSubscription().broadcastTermsOfServiceUrl,
                safeAreaHorizontalPaddingStyle: this._getContext().isPresentedInDesktopSubview ? void 0 : A.default.horizontalPaddingStyle(h.HorizontalInsetZero),
                countries: P.default.getCountries(),
                emergencyCallDefaultCountry: n,
                termsOfServiceGoLink: a.default.getConfigSettings().mySettings.termsOfServiceGoLink,
                isEmergencyCallEligibleCountry: this._isEmergencyCallEligibleCountry(n)
            }
        }
        render() {
            const e = [F.settingsBlockContainer];
            this._getContext().isPresentedInGenericDesktopModal && e.push(F.settingsBlockContainerDesktop),
            this.state.safeAreaHorizontalPaddingStyle && e.push(this.state.safeAreaHorizontalPaddingStyle);
            const t = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                closeButtonType: this.props.isAloneInNavStack ? w.CloseButtonType.Close : w.CloseButtonType.Back
            }
              , i = s.createElement(w.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: t
            })
              , n = f.getString("AdvancedCallingSettingsPanel.AutomaticCallAnswerSectionTitleUpperLabel")
              , o = f.getString("AdvancedCallingSettingsPanel.ContentCreatorsSectionTitleUpperLabel")
              , r = f.getString("AdvancedCallingSettingsPanel.EmergencyCallWarningTitleUpperLabel")
              , a = this.state.showNdiSettings ? s.createElement(I.SectionTitle, {
                title: o,
                titleStyles: F.title
            }) : void 0
              , l = M.getPlatformType() !== m.PlatformType.iOS && M.getPlatformType() !== m.PlatformType.Android ? s.createElement(I.SectionTitle, {
                title: r,
                titleStyles: F.title
            }) : void 0;
            return s.createElement(s.View, {
                style: [F.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, i, s.createElement(s.ScrollView, {
                style: L.flexOne
            }, s.createElement(s.View, {
                style: e
            }, s.createElement(I.SectionTitle, {
                title: n,
                titleStyles: F.title
            }), d.getAutoAnswerSettings(this.props), a, this._getNdiSetting(), l, this._getEmergencyCallSettings())))
        }
        _getHeaderText(e) {
            return W.getHeaderText()
        }
        _wrapLinkWithAccessibilityView(e, t) {
            return e
        }
        _getNdiSwitch() {
            const e = f.getString("AdvancedCallingSettingsPanel.EnableNdiButtonLabel")
              , t = d.renderLabels(e, void 0, !1);
            return s.createElement(r, {
                key: "ndiEnabled",
                style: F.controlRowNoDivider,
                isOn: this.state.isNdiEnabled,
                accessibilityLabel: e,
                onChange: this._onToggleIsNdiEnabled
            }, t)
        }
        _getNdiExplanation() {
            return s.createElement(R.BodyText, {
                key: "ndiExplanation",
                style: F.label
            }, f.getString("AdvancedCallingSettingsPanel.EnableNdiExplanation"))
        }
        _getNdiLink() {
            const e = this.state.learnMoreNdiLink
              , t = f.getString("AdvancedCallingSettingsPanel.EnableNdiLinkTitle")
              , i = s.createElement(R.BodyText, {
                key: "ndiLink",
                style: F.label
            }, s.createElement(x.default, {
                title: e,
                style: L.pointerCursor,
                url: e,
                blue: !0
            }, t));
            return this._wrapLinkWithAccessibilityView(i, t)
        }
        _getRegisteredTrademarkExplanation() {
            return s.createElement(R.Caption, {
                key: "ndiRegisteredTrademarkExplanation",
                style: [F.label, F.caption]
            }, f.getString("AdvancedCallingSettingsPanel.NdiRegisteredTrademarkExplanation"))
        }
        _getNdiSetting() {
            if (this.state.showNdiSettings)
                return s.createElement(s.View, null, this._getNdiSwitch(), this._getNdiExplanation(), this._getNdiLink(), this._getRegisteredTrademarkExplanation(), this._getWatermarkLocationPicker(), s.createElement(p, {
                    marginTop: 8
                }))
        }
        _getWatermarkLocationPicker() {
            if (this.state.isNdiEnabled)
                return s.createElement(B, {
                    title: f.getString("AdvancedCallingSettingsPanel.NdiSkypeWatermarkLocationLabel"),
                    disabled: !this.state.isNdiEnabled,
                    items: this._watermarkLocationList,
                    onValueChange: this._onWatermarkLocationSelected,
                    selectedValue: this.state.watermarkLocation.toString()
                })
        }
        _getEmergencyCallSettings() {
            if (!u.CallingCapabilities.nonNativeEmergencyCallsSupported())
                return;
            const e = this.state.emergencyCallDefaultCountry ? s.createElement(R.RowTitle, {
                accessibilityHidden: !0
            }, f.getString("UserSettingsPanel.EmergencyCallDefaultLocationLabel")) : void 0
              , t = s.createElement(s.View, {
                style: F.countrySelectorPickerContainer
            }, e, s.createElement(s.Button, {
                ref: this._onCountryPickerButtonRef,
                style: [F.countryPickerButton, L.noncollapsibleView],
                accessibilityLabel: this._getSelectedCountryAccessibilityLabel(),
                accessibilityTraits: [s.Types.AccessibilityTrait.Button, s.Types.AccessibilityTrait.HasPopup],
                onPress: this._onCountryPickerClick
            }, s.createElement(S.default, {
                style: F.countrySelectorPickerContainer
            }, s.createElement(R.BodyText, {
                bold: !0,
                style: F.pickerText
            }, this._getSelectedItemLabel()), s.createElement(C.default, {
                icon: E.SkypeIcon.DownChevron,
                size: E.IconSize.size15,
                color: N.Color.gray300,
                style: F.pickerChevron
            }))));
            let i;
            return i = this.state.emergencyCallDefaultCountry ? this.state.isEmergencyCallEligibleCountry ? s.createElement(s.View, {
                style: L.flexOne
            }, s.createElement(R.RowTitle, {
                key: "EmergencyCallingLimitedLabel",
                style: F.warningLabel,
                textThemeColor: R.TextThemeColor.Destructive
            }, f.getString("PSTNDialerPanel.EmergencyCallingLimitedLabel")), s.createElement(R.BodyText, {
                key: "EmergencyCallWarning",
                style: F.label
            }, f.getString("PstnUtils.EmergencyCallWarning"), " ", f.getParts("UserSettingsPanel.TermsOfServiceWarning", {
                termsOfServiceLink: s.createElement(s.Text, {
                    key: "fairUsagePolicyLinkId",
                    style: F.link,
                    onPress: this._onPressTermsOfServiceHandler
                }, f.getString("IntegrationConsentModal.TermsOfServiceLabel"))
            })), s.createElement(R.BodyText, {
                key: "AlternativeAccessWarning",
                style: F.label
            }, f.getString("UserSettingsPanel.AlternativeAccessWarning")), t) : s.createElement(s.View, {
                style: L.flexOne
            }, s.createElement(R.RowTitle, {
                key: "EmergencyCallingNoCallingLabel",
                style: F.warningLabel,
                textThemeColor: R.TextThemeColor.Destructive
            }, f.getString("PSTNDialerPanel.EmergencyCallingNoCallingLabel")), s.createElement(R.BodyText, {
                key: "EmergencyCallingLabel",
                style: F.label
            }, f.getString("UserSettingsPanel.EmergencyCallingLabel")), t) : s.createElement(s.View, {
                style: L.flexOne
            }, s.createElement(R.BodyText, {
                key: "EmergencyCallCheckDefaultLocationLabel",
                style: F.label
            }, f.getString("UserSettingsPanel.EmergencyCallCheckDefaultLocationLabel")), t),
            s.createElement(s.View, {
                style: F.emergencyCallingSection
            }, s.createElement(s.View, {
                style: F.settingsContainer
            }, s.createElement(s.View, {
                accessibilityTraits: s.Types.AccessibilityTrait.Text,
                importantForAccessibility: s.Types.ImportantForAccessibility.Yes
            }, i)), s.createElement(p, {
                key: "emergencyCallSettingsDivider"
            }))
        }
        _getSelectedCountryAccessibilityLabel() {
            if (this.state.emergencyCallDefaultCountry) {
                const e = n.find(this.state.countries, e=>e.country === this.state.emergencyCallDefaultCountry);
                return e && f.getString("UserSettingsPanel.DefaultCountryAccessibilityLabel", {
                    countryTitle: e.countryName
                })
            }
            return f.getString("UserSettingsPanel.SetDefaultCountryAccessibilityLabel")
        }
        _getSelectedItemLabel() {
            if (this.state.emergencyCallDefaultCountry) {
                const e = n.find(this.state.countries, e=>e.country === this.state.emergencyCallDefaultCountry);
                return e && e.countryName
            }
            return f.getString("UserSettingsPanel.SetEmergencyCallDefaultLocationLabel")
        }
        _getCountriesListItems() {
            return n.map(this.state.countries, V)
        }
    }
    t.default = W;
    class z extends O.default {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                this.props.onSelect(this.props.country.country)
            }
        }
        render() {
            const e = [F.menuItemText, this._themeStyles.secondaryTextColorStyle];
            return s.createElement(_.default.Button, {
                style: F.menuItemContainer,
                onPress: this._onPress,
                accessibilityTraits: s.Types.AccessibilityTrait.Button,
                importantForAccessibility: s.Types.ImportantForAccessibility.Yes
            }, s.createElement(R.BodyText, {
                style: [e, F.countryListItemName],
                numberOfLines: 1,
                disableThemeSubscription: !0
            }, this.props.country.countryName), s.createElement(R.BodyText, {
                style: [e, F.countryListItemCode],
                disableThemeSubscription: !0
            }, "+", this.props.country.countryCode))
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.parseFileUri = function(e) {
        if (!e.startsWith("file:"))
            return;
        let t, i;
        return "/" !== e[5] || "/" !== e[6] ? i = 5 : (i = e.indexOf("/", 7),
        i < 0 && (i = e.length),
        t = e.substring(7, i)),
        {
            host: t,
            path: decodeURIComponent(e.substring(i))
        }
    }
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(117)
      , o = i(0)
      , s = i(13)
      , r = i(193)
      , a = i(5)
      , l = i(54)
      , c = i(8)
      , d = i(23)
      , u = i(14)
      , g = a.lazyProperties({
        gradientView: ()=>o.Styles.createViewStyle({
            borderRadius: 10,
            alignItems: "center",
            justifyContent: "center"
        }),
        overlayText: ()=>o.Styles.createTextStyle({
            color: c.Color.white,
            font: d.font.uiDisplayBold,
            fontSize: d.fontSize.size18
        })
    });
    class h extends s.ComponentBase {
        _buildState(e, t) {
            return {
                gradientColors: e.conversationId ? r.getGradientColors(e.conversationId) : l.getGradientColors()
            }
        }
        render() {
            return o.createElement(o.View, {
                ignorePointerEvents: !0,
                style: u.absoluteFill
            }, o.createElement(n.GradientView, {
                style: [u.absoluteFill, g.gradientView],
                colors: this.state.gradientColors,
                direction: n.GradientDirection.BOTTOM_RIGHT
            }, o.createElement(o.Text, {
                style: g.overlayText
            }, this.props.label)))
        }
    }
    e.exports = h
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(157)
      , s = i(0)
      , r = i(482)
      , a = i(50)
      , l = i(31)
      , c = i(1638)
      , d = i(10)
      , u = i(77)
      , g = i(2)
      , h = i(3)
      , p = i(5)
      , m = i(4)
      , S = i(1640)
      , C = i(84)
      , y = i(319)
      , f = i(1642)
      , _ = i(18)
      , b = i(11)
      , v = i(9)
      , T = p.lazyProperties({
        container: ()=>s.Styles.createViewStyle({
            marginHorizontal: 20
        }),
        sectionTitle: ()=>s.Styles.createViewStyle({
            marginTop: 20
        })
    });
    class P extends a.default {
        constructor() {
            super(...arguments),
            this._callInitiatedByAVSettings = !1,
            this._handleTestCall = ()=>{
                const e = v.newCauseId();
                this.state.activeEchoCallId ? (h.log(g.LogTraceArea.AVSettings, "User requested to end the test call, causeId: " + e),
                this._callInitiatedByAVSettings = !1,
                l.default.CallingStore.endCall(this.state.activeEchoCallId, e)) : (h.log(g.LogTraceArea.AVSettings, "User requested to start the test call, causeId: " + e),
                this._callInitiatedByAVSettings = !0,
                l.default.CallNavigationHelper.startEchoCallWithoutUI(e),
                this.props.onTestCallPerformed && this.props.onTestCallPerformed())
            }
        }
        _buildState(e, t) {
            return {
                isInCall: l.default.CallingStore.hasConnectedCalls(),
                activeEchoCallId: n.first(l.default.CallingStore.getCallIdsForConversationMri(_.getEchoMri())),
                microphones: l.default.DeviceStore.getMicrophones(),
                speakers: l.default.DeviceStore.getSpeakers(),
                callingNotAllowed: !l.default.CallNavigationHelper.isCallingAllowed(_.getEchoMri())
            }
        }
        componentWillUnmount() {
            super.componentWillUnmount();
            const e = v.newCauseId();
            h.log(g.LogTraceArea.AVSettings, "componentWillUnmount causeId: " + e),
            this.state.activeEchoCallId && this._callInitiatedByAVSettings && (h.log(g.LogTraceArea.AVSettings, "User is closing AV settings, ending the test call, causeId: " + e),
            this._callInitiatedByAVSettings = !1,
            l.default.CallingStore.endCall(this.state.activeEchoCallId, e))
        }
        render() {
            const e = this.props.settingsMode === r.SettingsMode.All || this.props.settingsMode === r.SettingsMode.Video
              , t = this.props.settingsMode === r.SettingsMode.All || this.props.settingsMode === r.SettingsMode.Audio;
            let i, n, o, a, l;
            const g = this.props.settingsMode !== r.SettingsMode.All && this.props.isInOnboarding ? void 0 : s.createElement(u, {
                colorThemeOverride: this.props.colorThemeOverride
            });
            if (t) {
                if (i = s.createElement(C.SectionTitle, {
                    key: "audiotitle",
                    title: m.getString("AudioVideoSettings.AudioLabel"),
                    titleStyles: T.sectionTitle,
                    colorThemeOverride: this.props.colorThemeOverride
                }),
                o = s.createElement(S.default, {
                    onMicrophoneSelected: this.props.onMicrophoneSelected,
                    onToggleAGC: this.props.onMicrophoneAutoAdjustChanged,
                    onNoiseSuppressionChanged: this.props.onNoiseSuppressionControlChanged,
                    onAdjustVolume: this.props.onMicrophoneAdjusted,
                    backgroundColor: this.props.backgroundColor,
                    isInOnboarding: this.props.isInOnboarding,
                    colorThemeOverride: this.props.colorThemeOverride,
                    origin: r.MicrophoneSettingsOrigin.AVSettings
                }),
                this._testCallSupported() && (!this.state.isInCall || this.state.activeEchoCallId)) {
                    const e = this.state.activeEchoCallId ? b.SkypeIcon.CallEnd : b.SkypeIcon.CallStart
                      , t = this.state.activeEchoCallId ? "AudioVideoSettings.EndTestCallButton" : "AudioVideoSettings.StartTestCallButton";
                    n = s.createElement(y, {
                        style: d.ListItem.small.shortHeightStyle,
                        title: m.getString(t),
                        icon: e,
                        disabled: this.state.callingNotAllowed,
                        colorThemeOverride: this.props.colorThemeOverride,
                        onPress: this._handleTestCall,
                        hideDivider: !0
                    })
                }
                a = s.createElement(f.default, {
                    onSpeakerSelected: this.props.onSpeakerSelected,
                    isInOnboarding: this.props.isInOnboarding,
                    colorThemeOverride: this.props.colorThemeOverride,
                    onAdjustVolume: this.props.onSpeakerVolumeChanged,
                    onAudioTestPerformed: this.props.onAudioTestPerformed,
                    onRingingDeviceSelected: this.props.onRingingDeviceSelected
                })
            }
            return e && (l = s.createElement(c.default, {
                onCameraSelected: this.props.onCameraSelected,
                isInOnboarding: this.props.isInOnboarding,
                hideBackgroundBlurCapability: this.props.hideBackgroundBlurCapability,
                showNewBackgroundReplacementUI: !0
            })),
            s.createElement(s.View, {
                style: T.container
            }, l, e ? g : void 0, this.props.isInOnboarding ? void 0 : i, o, t ? g : void 0, a, n)
        }
        _testCallSupported() {
            return !n.isEmpty(this.state.microphones) && (!n.isEmpty(this.state.speakers) || o.BrowserEnvironment.isEdge())
        }
        _getHeaderText(e) {
            return P.getHeaderText()
        }
        static getHeaderText() {
            return m.getString("UserSettingsPanel.AudioVideoSettingsTitle")
        }
    }
    t.default = P
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(689)
      , s = i(70)
      , r = i(0)
      , a = i(7)
      , l = i(102)
      , c = i(6)
      , d = i(719)
      , u = i(1165)
      , g = i(720)
      , h = i(31)
      , p = i(1639)
      , m = i(61)
      , S = i(2)
      , C = i(3)
      , y = i(5)
      , f = i(4)
      , _ = i(75)
      , b = i(171)
      , v = i(84)
      , T = i(19)
      , P = i(8)
      , A = i(18)
      , k = i(23)
      , I = i(11)
      , w = i(25)
      , N = i(14)
      , M = i(15)
      , E = i(12)
      , x = i(9)
      , D = y.lazyProperties({
        sectionTitle: ()=>r.Styles.createViewStyle({
            marginTop: 20
        }),
        sectionBackgroundReplacementTitle: ()=>r.Styles.createTextStyle({
            marginBottom: 20,
            fontSize: k.controlFontSize.tabHeaderSmall
        }),
        videoPreviewContainer: ()=>r.Styles.createViewStyle({
            backgroundColor: P.Color.black,
            marginBottom: 20,
            width: 440,
            height: 236,
            alignSelf: "center",
            alignItems: "stretch",
            justifyContent: "center"
        }),
        toggleContainer: ()=>r.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            marginBottom: 5
        }),
        toggleText: ()=>r.Styles.createTextStyle({
            flexGrow: 1,
            flexShrink: 1,
            marginRight: 10
        }),
        webcamSettingsView: ()=>r.Styles.createViewStyle({
            flex: 1,
            marginBottom: 20
        }),
        webcamSettingText: ()=>r.Styles.createTextStyle({
            color: P.Color.blue
        })
    });
    class L extends E.default {
        constructor() {
            super(...arguments),
            this._shouldStartVideoOnClose = !1,
            this._shouldShowNewBackgroundReplacement = ()=>this.state.enableBackgroundReplacement && this.props.showNewBackgroundReplacementUI,
            this._shouldStartVideo = ()=>!!this._shouldStartVideoOnClose && !!this.state.enableStartVideoOnSettingsClose && !this.props.skipVideoOnClose,
            this._openWebCamSetting = ()=>{
                this.state.selectedCamera && h.default.DeviceStore.popupCameraSettings(this.state.selectedCamera)
            }
            ,
            this._onCameraSelected = e=>{
                const t = x.newCauseId();
                C.log(S.LogTraceArea.AVSettings, "_onCameraSelected " + e + " causeId: " + t),
                this.props.onCameraSelected && this.props.onCameraSelected(e !== this.state.selectedCamera),
                e !== this.state.selectedCamera && this.state.callId && (h.default.CallingStore.isProvidingVideo(this.state.callId) || this.props.forceVideoOnClose) ? (this._shouldStartVideoOnClose = !0,
                h.default.CallingStore.stopVideo(this.state.callId, t).then(()=>{
                    h.default.DeviceStore.choosePreferredDevices({
                        camera: e
                    }, t)
                }
                )) : h.default.DeviceStore.choosePreferredDevices({
                    camera: e
                }, t)
            }
            ,
            this._onCallingVideoViewRef = e=>{
                const t = x.newCauseId();
                this._callingVideoView = e || void 0,
                C.log(S.LogTraceArea.AVSettings, "_onCallingVideoViewRef ref: " + !!e + " causeId: " + t),
                this.state.cameraPermissionStatus === s.PermissionStatus.Granted && h.LocalStreamInfo.previewPromise.chainPromise(()=>this._callingVideoView ? h.default.DeviceStore.createPreviewRenderer(this._callingVideoView.getVideoContainer()).then(e=>{
                    this._videoPreviewRenderer = e
                }
                ) : (C.warn(S.LogTraceArea.AVSettings, "Not showing preview for camera - supported: " + this.state.cameraPreviewSupported + " permission: " + s.PermissionStatus[this.state.cameraPermissionStatus || s.PermissionStatus.Unknown] + " causeId: " + t),
                a.Resolved()), "CameraSettings _onCallingVideoViewRef changed", t).catch(e=>C.warn(S.LogTraceArea.AVSettings, "Failed to create preview " + T.errorAsString(e)))
            }
            ,
            this._onToggleBlur = (e,t)=>{
                this.state.callId && (this.props.onToggleBlur && this.props.onToggleBlur(t),
                h.default.DeviceStore.setBackgroundEffectsForCall(this.state.callId, t))
            }
            ,
            this._onToggleBlurForAll = (e,t)=>{
                this.state.hasConnectedCalls || h.default.DeviceStore.setBackgroundBlurForAllCalls(t)
            }
        }
        _buildState(e, t) {
            const i = h.default.DeviceStore.getCurrentDevices()
              , n = c.default.getS4LCMCFeatures()
              , o = h.default.CallingStore.getConnectedAndNotOnHoldCallId();
            return {
                cameras: h.default.DeviceStore.getCameras(),
                selectedCamera: i ? i.camera : void 0,
                cameraPreviewSupported: m.CallingCapabilities.avSettingsCameraPreviewSupported() && _.default.permissionStatus(w.PermissionType.Camera) === s.PermissionStatus.Granted,
                cameraPermissionStatus: _.default.permissionStatus(w.PermissionType.Camera),
                enableStartVideoOnSettingsClose: n.enableStartVideoOnSettingsClose,
                callId: o,
                localPreviewAndroidV2: h.default.CallingStore.isLocalPreviewAndroidV2Enabled(),
                backgroundBlurCapable: h.default.DeviceStore.isBackgroundBlurCapable(),
                backgroundBlurred: !!o && h.default.DeviceStore.isBackgroundBlurredForCall(o),
                enableBlurForAll: n.enableBlurBackgroundForAllCalls,
                backgroundBlurredForAll: h.default.DeviceStore.isBackgroundBlurredForAll(),
                hasConnectedCalls: h.default.CallingStore.hasConnectedCalls(),
                enableBackgroundReplacement: h.default.DeviceStore.isBackgroundReplacementEnabled(),
                showCameraIssuesText: n.cameraHelp.showCameraIssuesText
            }
        }
        componentDidMount() {
            if (super.componentDidMount(),
            this.state.cameras && this.state.cameraPermissionStatus === s.PermissionStatus.Unknown) {
                const e = w.PermissionPromptOptions.SkipPrePrompt | w.PermissionPromptOptions.PromptAgainIfDenied | w.PermissionPromptOptions.SkipAugmentedWebPanel;
                _.default.requestPermission(w.PermissionType.Camera, e, this.props.isInOnboarding ? s.PermissionOrigin.OnboardingAVSettings : s.PermissionOrigin.AVSettings)
            }
        }
        componentWillUnmount() {
            super.componentWillUnmount();
            const e = x.newCauseId();
            C.log(S.LogTraceArea.AVSettings, "componentWillUnmount causeId: " + e),
            h.LocalStreamInfo.previewPromise.chainPromise(()=>{
                if (this._videoPreviewRenderer) {
                    const t = this._videoPreviewRenderer;
                    return this._videoPreviewRenderer = void 0,
                    t.dispose(),
                    h.waitForRendererInState(t, !1, e).then(()=>this._shouldStartVideo() && this.state.callId ? h.default.CallingStore.startVideo(this.state.callId, e) : a.Resolved())
                }
                return this._shouldStartVideo() && this.state.callId ? h.default.CallingStore.startVideo(this.state.callId, e) : a.Resolved()
            }
            , "stop", e)
        }
        render() {
            let e, t, i, a, c, h, m, S, C;
            this.props.hideVideoLabel || this.props.isOutgoingVideoDisabledSafari || this.props.isInOnboarding || (e = r.createElement(v.SectionTitle, {
                key: "videotitle",
                title: f.getString("AudioVideoSettings.VideoLabel"),
                titleStyles: D.sectionTitle,
                colorThemeOverride: this.props.colorThemeOverride
            })),
            this._shouldShowNewBackgroundReplacement() && (t = r.createElement(M.RowTitle, {
                colorThemeOverride: this._currentTheme,
                style: D.sectionBackgroundReplacementTitle
            }, f.getString("AudioVideoSettings.CameraBackgroundReplacementLabel")),
            i = r.createElement(p.default, {
                isInOnboarding: this.props.isInOnboarding
            }));
            const y = g.formatDevicesForPicker(this.state.cameras);
            if (this.props.isOutgoingVideoDisabledSafari)
                c = r.createElement(u.default, {
                    audioTitleKey: "AudioVideoSettings.OutgoingVideoDisabledSafari",
                    colorThemeOverride: this.props.colorThemeOverride
                });
            else if (n.isEmpty(y))
                c = r.createElement(u.default, {
                    audioTitleKey: "AudioVideoSettings.CameraLabel",
                    errorStringKey: "AudioVideoSettings.NoDevicePresent",
                    errorIcon: I.SkypeIcon.Error,
                    colorThemeOverride: this.props.colorThemeOverride
                });
            else if (this.props.isVideoDisabledDuringScreenSharing)
                c = r.createElement(u.default, {
                    audioTitleKey: "AudioVideoSettings.CameraLabel",
                    errorStringKey: "CallPanel.OutgoingVideoDisabledScreenSharing",
                    errorIcon: I.SkypeIcon.Error,
                    colorThemeOverride: this.props.colorThemeOverride
                });
            else {
                if (this.state.cameraPreviewSupported) {
                    const e = this.props.overrideVideoPreviewDimensions ? r.Styles.createViewStyle({
                        width: this.props.overrideVideoPreviewDimensions.width,
                        height: this.props.overrideVideoPreviewDimensions.height
                    }) : void 0;
                    a = r.createElement(r.View, {
                        style: [D.videoPreviewContainer, e]
                    }, r.createElement(o.default, {
                        ref: this._onCallingVideoViewRef,
                        style: N.absoluteFill,
                        isLocal: !0,
                        parentView: "AVSettings",
                        nametag: "video_local_avSettings",
                        localPreviewAndroidV2: this.state.localPreviewAndroidV2
                    })),
                    m = void 0,
                    this.state.backgroundBlurCapable && !this.state.enableBackgroundReplacement && (this.state.callId ? C = r.createElement(l, {
                        style: [D.toggleContainer],
                        accessibilityLabel: f.getString("CallControls.CallMenuBlurBackground"),
                        onChange: this._onToggleBlur,
                        isOn: this.state.backgroundBlurred
                    }, r.createElement(M.BodyText, {
                        style: D.toggleText,
                        colorThemeOverride: this.props.colorThemeOverride
                    }, f.getString("CallControls.CallMenuBlurBackground"))) : !this.state.enableBlurForAll || this.state.hasConnectedCalls || this.props.hideBackgroundBlurCapability || (C = r.createElement(l, {
                        style: [D.toggleContainer],
                        accessibilityLabel: f.getString("AudioVideoSettings.BlurBackgroundForAll"),
                        onChange: this._onToggleBlurForAll,
                        isOn: this.state.backgroundBlurredForAll
                    }, r.createElement(M.BodyText, {
                        style: D.toggleText,
                        colorThemeOverride: this.props.colorThemeOverride
                    }, f.getString("AudioVideoSettings.BlurBackgroundForAll")))))
                }
                if (this.state.cameraPermissionStatus === s.PermissionStatus.Denied) {
                    const e = b.getDeniedPromptKey(w.PermissionType.Camera);
                    e && (h = r.createElement(u.default, {
                        audioTitleKey: "AudioVideoSettings.CameraLabel",
                        errorStringKey: e,
                        errorIcon: I.SkypeIcon.Error,
                        colorThemeOverride: this.props.colorThemeOverride
                    }))
                } else
                    c = r.createElement(d, {
                        title: f.getString("AudioVideoSettings.CameraLabel"),
                        items: y,
                        onDevicePickerOpen: this.props.onDevicePickerOpen,
                        onDevicePickerDismiss: this.props.onDevicePickerDismiss,
                        onValueChange: this._onCameraSelected,
                        labelMaxWidth: this.props.labelMaxWidth,
                        selectedValue: this.state.selectedCamera || "",
                        colorThemeOverride: this.props.colorThemeOverride
                    })
            }
            return A.isElectronWindows() && this.state.selectedCamera && (S = r.createElement(r.Button, {
                style: D.webcamSettingsView,
                accessibilityLabel: f.getString("AudioVideoSettings.WebcamSettingsLabel"),
                onPress: this._openWebCamSetting
            }, r.createElement(M.BodyText, {
                style: D.webcamSettingText,
                colorThemeOverride: this.props.colorThemeOverride
            }, f.getString("AudioVideoSettings.WebcamSettingsLabel")))),
            r.createElement(r.View, null, e, c, h, m, a, void 0, C, t, i, S)
        }
        _getWebcamMayNotBePresentLabel() {
            return r.createElement(u.default, {
                audioTitleKey: void 0,
                errorStringKey: "AudioVideoSettings.WebcamMaybeNotPresent",
                errorIcon: I.SkypeIcon.Warning,
                colorThemeOverride: this.props.colorThemeOverride
            })
        }
    }
    t.default = L
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(82)
      , r = i(63)
      , a = i(6)
      , l = i(31)
      , c = i(99)
      , d = i(43)
      , u = i(2)
      , g = i(317)
      , h = i(399)
      , p = i(101)
      , m = i(40)
      , S = i(27)
      , C = i(3)
      , y = i(38)
      , f = i(5)
      , _ = i(4)
      , b = i(32)
      , v = i(17)
      , T = i(8)
      , P = i(23)
      , A = i(11)
      , k = i(14)
      , I = i(15)
      , w = i(12);
    var N;
    !function(e) {
        e[e.merged = 0] = "merged",
        e[e.compact = 1] = "compact",
        e[e.full = 2] = "full",
        e[e.onboarding = 3] = "onboarding"
    }(N || (N = {}));
    const M = [{
        label: _.getString("AudioVideoSettings.CameraBackgroundReplacementNone"),
        effectType: s.VideoEffectType.Off,
        value: u.BackgroundEffect.Off
    }, {
        label: _.getString("AudioVideoSettings.CameraBackgroundReplacementBlur"),
        effectType: s.VideoEffectType.BackgroundBlurDefault,
        value: u.BackgroundEffect.Blur
    }]
      , E = f.lazyProperties({
        category: ()=>o.Styles.createViewStyle({
            marginBottom: 0
        }),
        sectionBackgroundReplacementTitle: ()=>o.Styles.createTextStyle({
            marginBottom: 10,
            fontSize: P.controlFontSize.tabHeaderSmall
        }),
        itemSize: ()=>o.Styles.createViewStyle({
            width: 70,
            height: 50
        }),
        itemWrapper: ()=>o.Styles.createViewStyle({
            borderRadius: 4,
            borderWidth: 1,
            alignItems: "center",
            justifyContent: "center",
            marginBottom: 5
        }),
        itemContainer: ()=>o.Styles.createViewStyle({
            maxWidth: 70,
            justifyContent: "center",
            marginBottom: 10,
            marginRight: 10
        }),
        itemWrapperSelected: ()=>o.Styles.createViewStyle({
            borderColor: T.Color.blue
        }),
        categories: ()=>o.Styles.createViewStyle({
            marginBottom: 10
        }),
        itemsContainerRow: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            flexWrap: "wrap",
            flex: 1,
            marginBottom: 5
        }),
        itemContainerExtraMargin: ()=>o.Styles.createViewStyle({
            marginBottom: 100
        }),
        itemLabel: ()=>o.Styles.createTextStyle({
            textAlign: "center"
        }),
        removeIconWrapper: ()=>o.Styles.createViewStyle({
            position: "absolute",
            top: 4,
            right: 14,
            backgroundColor: T.Color.blackOverlay35,
            borderRadius: A.IconSize.size12 / 2,
            borderStyle: "solid",
            borderWidth: 1,
            borderColor: T.Color.white,
            alignItems: "center",
            justifyContent: "center",
            width: A.IconSize.size12,
            height: A.IconSize.size12
        }),
        blurLabelStyle: ()=>o.Styles.createTextStyle({
            position: "absolute",
            bottom: 0,
            width: 70,
            paddingVertical: 2,
            backgroundColor: T.Color.blackOverlay35,
            color: T.Color.white,
            textAlign: "center",
            fontSize: 11
        })
    });
    class x extends d.default {
        constructor() {
            super(...arguments),
            this._createFileUrl = e=>{
                e.imagePath,
                0
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._createFileUrl(this.props.item)
        }
        render() {
            return this.state.imageUri ? o.createElement(o.Image, {
                source: this.state.imageUri,
                style: E.itemSize,
                resizeMode: "cover"
            }) : null
        }
    }
    class D extends w.default {
        constructor() {
            super(...arguments),
            this._getGroupedItems = ()=>{
                const {lastUsedBackgroundEffects: e, items: t} = this.state
                  , {true: i, false: o} = n.groupBy(t, t=>n.includes(e, t.value))
                  , s = a.default.getS4LCMCFeaturesNoSubscription().numberOfVisibleLastUsedEffects;
                return [...n.slice(n.sortBy(n.filter(o, e=>n.isNumber(e.order)), e=>e.order), 0, s - n.size(i)), ...null != i ? i : []]
            }
            ,
            this._renderContent = ()=>{
                switch (this.state.layoutType) {
                case N.full:
                    return this._renderCategories();
                case N.compact:
                    const e = [...M, ...n.filter(this.state.items, e=>n.includes(this.state.lastUsedBackgroundEffects, e.value))];
                    return this._renderList(e, !0, !0);
                case N.onboarding:
                    const t = [...M, ...n.sortBy(n.filter(this.state.items, e=>n.isNumber(e.order)), e=>e.order)];
                    return this._renderList(t, !1, !1);
                case N.merged:
                default:
                    return this._renderList(this.state.items)
                }
            }
            ,
            this._renderCategories = ()=>o.createElement(o.View, {
                style: E.categories
            }, this.state.backgroundCategories.map(e=>{
                var t;
                const i = null === (t = this.state.itemsByCategory) || void 0 === t ? void 0 : t[e];
                return i || "myBackgrounds" === e ? o.createElement(o.View, {
                    key: e,
                    style: E.category
                }, o.createElement(I.RowTitle, {
                    colorThemeOverride: this._currentTheme,
                    style: E.sectionBackgroundReplacementTitle
                }, this._getLocalizedStringByCategory(e)), this._renderList(i, "myBackgrounds" === e)) : null
            }
            )),
            this._renderList = (e,t=!0,i=!1)=>o.createElement(o.View, {
                style: E.itemsContainerRow
            }, e && e.map(e=>this._renderItem(e)), t && this._renderAddButton(i)),
            this._renderItem = e=>{
                const {isNewBackgroundEffectsLayoutEnabled: t} = this.state
                  , i = [E.itemWrapper, E.itemSize, this._themeStyles.dividerBorderColorStyle]
                  , n = [E.itemLabel, P.captionFontStyle()];
                return e.value === this.state.selectedItem && (i.push(E.itemWrapperSelected),
                n.push(P.selectedCaptionFontStyle())),
                o.createElement(o.View, {
                    key: e.value
                }, o.createElement(o.Button, {
                    accessibilityLabel: e.label,
                    importantForAccessibility: o.Types.ImportantForAccessibility.NoHideDescendants,
                    accessibilityTraits: o.Types.AccessibilityTrait.Button,
                    onPress: t=>{
                        this._onPress(t, e)
                    }
                    ,
                    style: E.itemContainer
                }, o.createElement(o.View, {
                    style: i
                }, this._renderItemContent(e)), !t && o.createElement(o.Text, {
                    ellipsizeMode: "tail",
                    numberOfLines: 1,
                    style: n
                }, p.extractFileName(e.label))), this._renderItemRemove(e))
            }
            ,
            this._onBackgroundChangePress = e=>{
                g.FilePickerUtils.showSingleFilePicker(e=>{
                    var t;
                    const i = null === (t = e) || void 0 === t ? void 0 : t.file;
                    if (i) {
                        const e = h.default.getBackgroundEffectPrefix(i.path)
                          , t = {
                            label: i.name,
                            effectType: s.VideoEffectType.BackgroundReplacement,
                            imagePath: i.path,
                            category: "myBackgrounds",
                            value: e
                        };
                        if (n.some(this.state.items, {
                            value: e
                        }))
                            return;
                        this._trackItem(t),
                        this._setBackgroundEffect(e),
                        this._changeBackground(e)
                    }
                }
                , this._getRootViewId(), e, {
                    acceptType: g.FilePickerAcceptType.Image
                })
            }
            ,
            this._navigateToBackgroundEffectsList = ()=>{
                v.navigateToBackgroundEffectsSettings(this._getContext())
            }
        }
        _buildState(e, t) {
            let i = {};
            const o = h.default.getAllBackgroundEffectsFiles()
              , r = n.map(o, ({localFileName: e, localUri: t, originalUrl: i, category: n, order: o},r)=>({
                label: e,
                effectType: s.VideoEffectType.BackgroundReplacement,
                imagePath: t,
                value: r,
                isPredefinedImage: !!i,
                category: n || (i ? "myBackgrounds" : "skypebackgroundimage"),
                order: o
            }))
              , c = a.default.getS4LCMCFeatures();
            return i.isNewBackgroundEffectsLayoutEnabled = c.enableNewBackgroundEffectsLayout,
            i.isBackgroundEffectsCategoriesEnabled = c.enableBackgroundEffectsCategories,
            i.backgroundCategories = c.backgroundCategories,
            i.layoutType = this._getLayoutType(i.isBackgroundEffectsCategoriesEnabled, e.fullList),
            i.lastUsedBackgroundEffects = b.default.getLastUsedBackgroundEffects(),
            i.items = [...M, ...n.sortBy(r, {
                isPredefinedImage: !1
            })],
            i.itemsByCategory = n.groupBy(r, "category"),
            i.activeCallId = l.default.DeviceStore.getPreviewCallId(),
            i.selectedItem = i.activeCallId ? l.default.DeviceStore.getBackgroundReplacementForCall(i.activeCallId) : l.default.DeviceStore.getBackgroundReplacementForAllCalls(),
            i
        }
        componentDidMount() {
            super.componentDidMount();
            const e = this.state.items.filter(e=>e.value === this.state.selectedItem)[0]
              , t = this._getGroupedItems().map(e=>e.value);
            b.default.setAllLastUsedBackgroundEffects(t),
            e && this._changeCameraEffect(e)
        }
        componentDidUpdate(e, t, i) {
            if (super.componentDidUpdate(e, t, i),
            !y.default(this.state.items, t.items) || t.selectedItem !== this.state.selectedItem) {
                const e = this.state.items.filter(e=>e.value === this.state.selectedItem)[0];
                e && this._changeCameraEffect(e)
            }
        }
        render() {
            const e = [k.flexOne];
            return this.props.isInOnboarding && e.push(E.itemContainerExtraMargin),
            o.createElement(o.View, {
                style: e
            }, this._renderContent())
        }
        _renderItemRemove(e) {
            if (!e.isPredefinedImage && !n.includes([s.VideoEffectType.Off, s.VideoEffectType.BackgroundBlurDefault], e.effectType))
                return o.createElement(o.View, {
                    style: E.removeIconWrapper
                }, o.createElement(m.default, {
                    icon: A.SkypeIcon.ClosePanel,
                    color: T.Color.white,
                    hoverColor: T.Color.white,
                    size: A.IconSize.size8,
                    onPress: ()=>this._onItemRemove(e.value),
                    title: _.getString("MediaPreview.RemoveItem", {
                        fileName: e.label
                    })
                }))
        }
        _renderAddButton(e=!1) {
            const {isNewBackgroundEffectsLayoutEnabled: t} = this.state
              , {secondaryBackgroundColorStyle: i, dividerBorderColorStyle: n} = this._themeStyles;
            return o.createElement(o.Button, {
                accessibilityLabel: _.getString("AudioVideoSettings.AddMoreMedia"),
                onPress: e ? this._navigateToBackgroundEffectsList : this._onBackgroundChangePress,
                style: E.itemContainer
            }, o.createElement(o.View, {
                style: [E.itemWrapper, E.itemSize, i, n]
            }, o.createElement(S.default, {
                color: this._themeColors.iconDisabledColor,
                icon: e ? A.SkypeIcon.More : A.SkypeIcon.Plus,
                size: A.IconSize.size18
            })), !t && o.createElement(o.Text, {
                ellipsizeMode: "tail",
                numberOfLines: 1,
                style: [E.itemLabel, P.captionFontStyle()]
            }, _.getString("AudioVideoSettings.AddImage")))
        }
        _renderItemContent(e) {
            if (e.effectType === s.VideoEffectType.Off)
                return o.createElement(S.default, {
                    color: this._themeColors.iconDisabledColor,
                    icon: A.SkypeIcon.BlockNotification,
                    size: A.IconSize.size18
                });
            if (e.effectType === s.VideoEffectType.BackgroundBlurDefault) {
                const t = o.createElement(o.Image, {
                    key: "CameraEffectBlurImage",
                    source: r.Collection.OFFICE_BLUR_BACKGROUND,
                    style: E.itemSize,
                    resizeMode: "cover"
                })
                  , i = o.createElement(o.Text, {
                    key: "CameraEffectBlurLabel",
                    ellipsizeMode: "tail",
                    numberOfLines: 1,
                    style: E.blurLabelStyle
                }, p.extractFileName(e.label));
                return this.state.isNewBackgroundEffectsLayoutEnabled ? [t, i] : t
            }
            return e.effectType === s.VideoEffectType.BackgroundReplacement ? o.createElement(x, {
                item: e
            }) : null
        }
        _onItemRemove(e) {
            h.default.removeTrackedFile(e),
            this._resetEffects(!1),
            this._setBackgroundEffect(u.BackgroundEffect.Off)
        }
        _resetEffects(e) {
            const {activeCallId: t} = this.state;
            t ? l.default.DeviceStore.setBackgroundEffectsForCall(t, e) : l.default.DeviceStore.setBackgroundBlurForAllCalls(e)
        }
        _onPress(e, t) {
            this._changeCameraEffect(t);
            const i = this._getEffectTypeByVideoEffectType(t.effectType);
            C.track(new c.BackgroundEffectsSettingsEvent(!!this.state.activeCallId,!!t.isPredefinedImage,i,t.isPredefinedImage ? t.label : void 0))
        }
        _getEffectTypeByVideoEffectType(e) {
            switch (e) {
            case s.VideoEffectType.BackgroundReplacement:
                return u.BackgroundEffect.BackgroundImage;
            case s.VideoEffectType.BackgroundBlurDefault:
                return u.BackgroundEffect.Blur;
            case s.VideoEffectType.Off:
            default:
                return u.BackgroundEffect.Off
            }
        }
        _changeCameraEffect(e) {
            switch (e.effectType) {
            case s.VideoEffectType.BackgroundBlurDefault:
                this._resetEffects(!0);
                break;
            case s.VideoEffectType.BackgroundReplacement:
                e.value && this._changeBackground(e.value);
                break;
            case s.VideoEffectType.Off:
            default:
                this._resetEffects(!1)
            }
            this.state.activeCallId || this._setBackgroundEffect(e.value)
        }
        _setBackgroundEffect(e) {
            l.default.DeviceStore.setBackgroundReplacementForAllCalls(e)
        }
        _trackItem(e) {
            h.default.canTrackFiles() && e.imagePath && h.default.addFileInformationForTracking(e.value, e.imagePath, e.label, {
                category: e.category
            })
        }
        _changeBackground(e) {
            b.default.setLastUsedBackgroundEffects(e),
            l.default.DeviceStore.setBackgroundImageEffects(e, this.state.activeCallId)
        }
        _getLocalizedStringByCategory(e) {
            switch (e) {
            case "myBackgrounds":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryMyBackgrounds");
            case "holidays":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryHolidays");
            case "movies":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryMovies");
            case "nature":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryNature");
            case "professional":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryProfessional");
            case "featured":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryFeatured");
            case "new":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryNew");
            case "fun":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryFun");
            case "colors":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryColors");
            case "textures":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryTextures");
            case "cultural":
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryCultural");
            case "skypebackgroundimage":
            default:
                return _.getString("AudioVideoSettings.BackgroundEffectCategoryOther")
            }
        }
        _getLayoutType(e, t) {
            return e ? t ? N.full : this.props.isInOnboarding ? N.onboarding : N.compact : N.merged
        }
    }
    t.default = D
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(70)
      , s = i(0)
      , r = i(82)
      , a = i(102)
      , l = i(6)
      , c = i(719)
      , d = i(1165)
      , u = i(720)
      , g = i(31)
      , h = i(88)
      , p = i(61)
      , m = i(42)
      , S = i(2)
      , C = i(80)
      , y = i(3)
      , f = i(5)
      , _ = i(108)
      , b = i(4)
      , v = i(2882)
      , T = i(2883)
      , P = i(75)
      , A = i(171)
      , k = i(103)
      , I = i(275)
      , w = i(8)
      , N = i(23)
      , M = i(11)
      , E = i(131)
      , x = i(25)
      , D = (i(14),
    i(15))
      , L = i(12)
      , R = i(9)
      , B = f.lazyProperties({
        toggleContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            marginBottom: 5
        }),
        toggleText: ()=>s.Styles.createTextStyle({
            flexGrow: 1,
            flexShrink: 1,
            marginRight: 10
        }),
        sliderStyle: ()=>s.Styles.createViewStyle({
            marginBottom: 10
        }),
        sliderScaleStyle: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between",
            marginLeft: 10,
            marginRight: 7
        }),
        sliderScaleMark: ()=>s.Styles.createTextStyle({
            color: w.Color.gray300,
            fontSize: N.fontSize.size13Deprecated,
            maxWidth: 270
        })
    });
    class O extends L.default {
        constructor() {
            super(...arguments),
            this._onMicrophoneSelected = e=>{
                const t = R.newCauseId();
                y.log(S.LogTraceArea.AVSettings, "_onMicrophoneSelected " + e + " causeId: " + t),
                this.props.onMicrophoneSelected && this.props.onMicrophoneSelected(e !== this.state.selectedMicrophone),
                g.default.DeviceStore.choosePreferredDevices({
                    microphone: e
                }, t)
            }
            ,
            this._onToggleAGC = e=>{
                let t = !this.state.enableAGC;
                g.default.DeviceStore.enableAGC(t),
                this.props.onToggleAGC && this.props.onToggleAGC(t)
            }
            ,
            this._noiseSuppressionLevels = [{
                label: b.getString("AudioVideoSettings.NoiseSuppressionOff"),
                value: r.NoiseSuppressionMode[r.NoiseSuppressionMode.Off]
            }, {
                label: b.getString("AudioVideoSettings.NoiseSuppressionAuto"),
                value: r.NoiseSuppressionMode[r.NoiseSuppressionMode.Auto]
            }, {
                label: b.getString("AudioVideoSettings.NoiseSuppressionLow"),
                value: r.NoiseSuppressionMode[r.NoiseSuppressionMode.Low]
            }, {
                label: b.getString("AudioVideoSettings.NoiseSuppressionHigh"),
                value: r.NoiseSuppressionMode[r.NoiseSuppressionMode.High]
            }],
            this._onSelectNoiseSuppression = e=>{
                const t = g.default.DeviceStore.getNoiseSuppressionMode();
                y.log(S.LogTraceArea.AVSettings, "_onSelectNoiseSuppression new mode:" + e),
                g.default.DeviceStore.setNoiseSuppressionMode(e),
                this.state.isInCall && (g.default.CallingStore.setNoiseSuppressionMode(e),
                g.default.CallingStore.getConnectedCallIds().forEach(t=>{
                    h.default.updateCallTelemetry(t, R.newCauseId(), t=>t.setNoiseSuppressionMode(e))
                }
                )),
                y.track(new I.NoiseSuppressionSettingsEvent(this.state.isInCall,t,e,this.props.origin))
            }
            ,
            this._getNoiseSuppressionCaptionWithAccessibility = ()=>{
                const e = b.getString("AudioVideoSettings.LearnMore")
                  , t = s.createElement(E.default, {
                    url: l.default.getConfigSettingsNoSubscription().noiseSuppression.learnMoreUrl,
                    onPress: this._onNoiseSuppressionLearnMore,
                    blue: !0,
                    key: "noiseSuppressionLearnMoreLink "
                }, e)
                  , i = b.getParts("AudioVideoSettings.NoiseSuppressionLearnMore", {
                    learnMoreLink: t
                })
                  , n = m.default.linkAccessibilityInfo(b.getString("AudioVideoSettings.NoiseSuppressionLearnMore", {
                    learnMoreLink: e
                }));
                return s.createElement(s.View, {
                    accessibilityLabel: n.label,
                    accessibilityTraits: n.traits,
                    importantForAccessibility: s.Types.ImportantForAccessibility.Yes
                }, s.createElement(D.Caption, {
                    style: k.styles.subtitleMediumSemiLarge
                }, i))
            }
            ,
            this._onNoiseSuppressionLearnMore = ()=>{
                _.openUrlWithParams({
                    origin: S.BrowserOrigin.AudioVideoSettings,
                    url: l.default.getConfigSettingsNoSubscription().noiseSuppression.learnMoreUrl,
                    componentContext: this._getContext()
                })
            }
        }
        _buildState(e, t) {
            const i = g.default.DeviceStore.getCurrentDevices();
            return {
                microphones: g.default.DeviceStore.getMicrophones(),
                enableAGC: g.default.DeviceStore.getAGC(),
                selectedNoiseSuppressionMode: g.default.DeviceStore.getNoiseSuppressionMode(),
                isInCall: g.default.CallingStore.hasConnectedCalls(),
                selectedMicrophone: i ? i.microphone : void 0,
                enableMicrophoneMeter: p.CallingCapabilities.microphoneLevelMeterSupported(),
                microphonePermissionStatus: P.default.permissionStatus(x.PermissionType.Microphone)
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this.state.microphonePermissionStatus === o.PermissionStatus.Unknown && P.default.requestPermission(x.PermissionType.Microphone, x.PermissionPromptOptions.SkipPrePrompt | x.PermissionPromptOptions.PromptAgainIfDenied)
        }
        render() {
            let e, t, i;
            if (n.isEmpty(this.state.microphones))
                e = s.createElement(d.default, {
                    audioTitleKey: "AudioVideoSettings.MicrophoneLabel",
                    errorStringKey: "AudioVideoSettings.NoDevicePresent",
                    errorIcon: M.SkypeIcon.Error,
                    colorThemeOverride: this.props.colorThemeOverride
                });
            else {
                const n = u.formatDevicesForPicker(this.state.microphones)
                  , g = this.state.enableMicrophoneMeter && this.state.microphonePermissionStatus === o.PermissionStatus.Granted ? s.createElement(v, {
                    steps: this.props.micLevelMeterSteps,
                    colorThemeOverride: this.props.colorThemeOverride,
                    backgroundColor: this.props.backgroundColor
                }) : void 0;
                let h;
                if (this.state.microphonePermissionStatus === o.PermissionStatus.Denied) {
                    const e = A.getDeniedPromptKey(x.PermissionType.Microphone);
                    e && (i = s.createElement(d.default, {
                        audioTitleKey: "AudioVideoSettings.MicrophoneLabel",
                        errorStringKey: e,
                        errorIcon: M.SkypeIcon.Error,
                        colorThemeOverride: this.props.colorThemeOverride
                    }))
                } else {
                    let i;
                    t = this.props.hideAutoAdjustSetting || !p.CallingCapabilities.agcSupported() ? void 0 : s.createElement(a, {
                        style: [B.toggleContainer],
                        accessibilityLabel: b.getString("AudioVideoSettings.AutomaticGainControlLabel"),
                        onChange: this._onToggleAGC,
                        isOn: this.state.enableAGC
                    }, s.createElement(D.BodyText, {
                        style: B.toggleText,
                        colorThemeOverride: this.props.colorThemeOverride
                    }, b.getString("AudioVideoSettings.AutomaticGainControlLabel"))),
                    l.default.getS4LCMCFeaturesNoSubscription().enableNoiseSuppression && (i = s.createElement(s.View, {
                        key: "noiseSuppressionPanel"
                    }, s.createElement(c, {
                        title: b.getString("AudioVideoSettings.NoiseSuppressionControlLabel"),
                        subtitle: this._getNoiseSuppressionCaptionWithAccessibility(),
                        items: this._noiseSuppressionLevels,
                        onDevicePickerOpen: this.props.onDevicePickerOpen,
                        onDevicePickerDismiss: this.props.onDevicePickerDismiss,
                        onValueChange: this._onSelectNoiseSuppression,
                        selectedValue: this.state.selectedNoiseSuppressionMode || r.NoiseSuppressionMode.Auto,
                        labelMaxWidth: this.props.labelMaxWidth,
                        colorThemeOverride: this.props.colorThemeOverride
                    }))),
                    !this.state.enableAGC && p.CallingCapabilities.microphoneVolumeControlSupported() && (h = [this._getSliderScale(), s.createElement(T, {
                        style: B.sliderStyle,
                        trackHeight: 10,
                        handleSize: 26,
                        colorThemeOverride: this.props.colorThemeOverride,
                        key: "MicrophoneVolumeSlider",
                        onAdjustVolume: this.props.onAdjustVolume
                    })]),
                    e = s.createElement(s.View, null, s.createElement(c, {
                        title: b.getString("AudioVideoSettings.MicrophoneLabel"),
                        items: n,
                        onDevicePickerOpen: this.props.onDevicePickerOpen,
                        onDevicePickerDismiss: this.props.onDevicePickerDismiss,
                        onValueChange: this._onMicrophoneSelected,
                        selectedValue: this.state.selectedMicrophone || "",
                        labelMaxWidth: this.props.labelMaxWidth,
                        colorThemeOverride: this.props.colorThemeOverride
                    }), g, t, h, i)
                }
            }
            return s.createElement(s.View, null, e, i)
        }
        _getSliderScale() {
            const e = [];
            for (let t = 0; t <= 10; t++)
                e.push(s.createElement(C.HiddenText, {
                    style: B.sliderScaleMark,
                    key: t
                }, t.toString()));
            return s.createElement(s.View, {
                style: B.sliderScaleStyle,
                key: "SliderScale"
            }, e)
        }
    }
    t.default = O
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(70)
      , s = i(0)
      , r = i(7)
      , a = i(102)
      , l = i(2885)
      , c = i(6)
      , d = i(719)
      , u = i(1165)
      , g = i(720)
      , h = i(31)
      , p = i(61)
      , m = i(554)
      , S = i(10)
      , C = i(2)
      , y = i(80)
      , f = i(3)
      , _ = i(5)
      , b = i(4)
      , v = i(32)
      , T = i(75)
      , P = i(171)
      , A = i(319)
      , k = i(310)
      , I = i(2886)
      , w = i(8)
      , N = i(23)
      , M = i(11)
      , E = i(25)
      , x = i(15)
      , D = i(12)
      , L = i(9)
      , R = _.lazyProperties({
        sliderStyle: ()=>s.Styles.createViewStyle({
            marginBottom: 10
        }),
        sliderScaleStyle: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between",
            marginLeft: 10,
            marginRight: 7
        }),
        sliderScaleMark: ()=>s.Styles.createTextStyle({
            color: w.Color.gray300,
            fontSize: N.fontSize.size13Deprecated,
            maxWidth: 270
        }),
        toggleContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            marginBottom: 5
        }),
        toggleText: ()=>s.Styles.createTextStyle({
            flexGrow: 1,
            flexShrink: 1,
            marginRight: 10
        })
    });
    class B extends D.default {
        constructor() {
            super(...arguments),
            this._testAudioPromiseChain = new m.default("TestAudio",C.LogTraceArea.AVSettings),
            this._onSpeakerSelected = e=>{
                const t = L.newCauseId();
                f.log(C.LogTraceArea.AVSettings, "_onSpeakerSelected " + e + " causeId: " + t),
                this.props.onSpeakerSelected && this.props.onSpeakerSelected(e !== this.state.selectedSpeaker),
                h.default.DeviceStore.choosePreferredDevices({
                    speaker: e
                }, t)
            }
            ,
            this._startTestAudio = ()=>{
                const e = L.newCauseId();
                f.log(C.LogTraceArea.AVSettings, "Starting audio test, causeId: " + e),
                this._testAudioPromiseChain.chainPromise(()=>k.default.SkypeCallRinging.playRepeating(e).then(e=>{
                    this._testAudioPlayerToken = e,
                    this.props.onAudioTestPerformed && this.props.onAudioTestPerformed(),
                    this.isComponentMounted() && this.setState({
                        activeTestAudio: !0
                    })
                }
                ), "start", e)
            }
            ,
            this._stopTestAudio = ()=>{
                const e = L.newCauseId();
                f.log(C.LogTraceArea.AVSettings, "_stopTestAudio, causeId: " + e),
                this._stopTestAudioWithCauseId(e)
            }
            ,
            this._onToggleUnmuteOnRingEnabled = (e,t)=>{
                v.default.setUserPreferencesLocal({
                    unmuteOnIncomingRing: t
                })
            }
        }
        _buildState(e, t) {
            const i = h.default.DeviceStore.getCurrentDevices()
              , o = c.default.getS4LCMCFeatures();
            return {
                speakers: h.default.DeviceStore.getSpeakers(),
                microphonePermissionStatus: T.default.permissionStatus(E.PermissionType.Microphone),
                selectedSpeaker: i ? i.speaker : void 0,
                isAudioOutputSelectionSupported: h.default.DeviceStore.getIsAudioOutputSelectionSupported(),
                activeTestAudio: !n.isUndefined(this._testAudioPlayerToken),
                ringingDeviceOptionSupported: p.CallingCapabilities.secondaryRingingSupported() && o.enableSecondaryRinging && !n.isEmpty(h.default.DeviceStore.getSecondarySpeakers()),
                unmuteOnRingSupported: p.CallingCapabilities.unmuteDeviceSupported() && o.enableUnmuteOnRing,
                unmuteOnRingEnabled: !!v.default.getUserPreferencesLocal().unmuteOnIncomingRing
            }
        }
        _stopTestAudioWithCauseId(e) {
            f.log(C.LogTraceArea.AVSettings, "Stopping audio test, causeId: " + e),
            this._testAudioPromiseChain.chainPromise(()=>(n.isUndefined(this._testAudioPlayerToken) || (k.default.SkypeCallRinging.dispose(this._testAudioPlayerToken, e),
            this._testAudioPlayerToken = void 0),
            this.isComponentMounted() && this.setState({
                activeTestAudio: !1
            }),
            r.Resolved()), "stop", e)
        }
        componentWillUnmount() {
            super.componentWillUnmount();
            const e = L.newCauseId();
            f.log(C.LogTraceArea.AVSettings, "componentWillUnmount, causeId: " + e),
            this._stopTestAudioWithCauseId(e)
        }
        render() {
            let e, t, i, r, c;
            if (n.isEmpty(this.state.speakers) && this.state.isAudioOutputSelectionSupported)
                e = s.createElement(u.default, {
                    audioTitleKey: "AudioVideoSettings.SpeakersLabel",
                    errorStringKey: "AudioVideoSettings.NoDevicePresent",
                    errorIcon: M.SkypeIcon.Error,
                    colorThemeOverride: this.props.colorThemeOverride
                });
            else if (this.state.microphonePermissionStatus === o.PermissionStatus.Denied) {
                const t = P.getDeniedPromptKey(E.PermissionType.Microphone);
                t && (e = s.createElement(u.default, {
                    audioTitleKey: "AudioVideoSettings.SpeakersLabel",
                    errorStringKey: t,
                    errorIcon: M.SkypeIcon.Error,
                    colorThemeOverride: this.props.colorThemeOverride
                }))
            } else if (!n.isEmpty(this.state.speakers) || !this.props.compactView) {
                const t = g.formatDevicesForPicker(this.state.speakers);
                e = s.createElement(d, {
                    title: b.getString("AudioVideoSettings.SpeakersLabel"),
                    items: t,
                    onDevicePickerOpen: this.props.onDevicePickerOpen,
                    onDevicePickerDismiss: this.props.onDevicePickerDismiss,
                    onValueChange: this._onSpeakerSelected,
                    selectedValue: this.state.selectedSpeaker || "",
                    labelMaxWidth: this.props.labelMaxWidth,
                    colorThemeOverride: this.props.colorThemeOverride
                })
            }
            return !n.isEmpty(this.state.speakers) && p.CallingCapabilities.speakerVolumeControlSupported() && (t = [this.props.compactView ? void 0 : this._getSliderScale(), s.createElement(I, {
                style: R.sliderStyle,
                onAdjustVolume: this.props.onAdjustVolume,
                trackHeight: 10,
                handleSize: 26,
                colorThemeOverride: this.props.colorThemeOverride,
                key: "VolumeSlider"
            })]),
            this.props.compactView || n.isEmpty(this.state.speakers) && this.state.isAudioOutputSelectionSupported || (i = s.createElement(A, {
                style: S.ListItem.small.shortHeightStyle,
                title: b.getString("AudioVideoSettings.TestAudioButtonLabel"),
                accessibilityLabel: this.state.activeTestAudio ? b.getString("AudioVideoSettings.TestAudioButtonStopLabel") : b.getString("AudioVideoSettings.TestAudioButtonStartLabel"),
                icon: this.state.activeTestAudio ? M.SkypeIcon.Stop : M.SkypeIcon.Play,
                hideDivider: !0,
                colorThemeOverride: this.props.colorThemeOverride,
                onPress: this.state.activeTestAudio ? this._stopTestAudio : this._startTestAudio
            })),
            this.props.compactView || !this.state.unmuteOnRingSupported || this.props.isInOnboarding || n.isEmpty(this.state.speakers) && this.state.isAudioOutputSelectionSupported || (r = s.createElement(a, {
                key: "unmuteSpeakersOnRing",
                style: R.toggleContainer,
                isOn: this.state.unmuteOnRingEnabled,
                accessibilityLabel: b.getString("AudioVideoSettings.UnmuteRingingTitle"),
                onChange: this._onToggleUnmuteOnRingEnabled
            }, s.createElement(x.BodyText, {
                style: R.toggleText,
                colorThemeOverride: this.props.colorThemeOverride
            }, b.getString("AudioVideoSettings.UnmuteRingingTitle")))),
            this.props.compactView || !this.state.ringingDeviceOptionSupported || this.props.isInOnboarding || (c = s.createElement(l.default, {
                onRingerDeviceSelected: this.props.onRingingDeviceSelected,
                colorThemeOverride: this.props.colorThemeOverride
            })),
            s.createElement(s.View, null, e, t, i, r, c)
        }
        _getSliderScale() {
            const e = n.times(11, e=>s.createElement(y.HiddenText, {
                style: R.sliderScaleMark,
                key: e
            }, e.toString()));
            return s.createElement(s.View, {
                style: R.sliderScaleStyle,
                key: "SliderScale"
            }, e)
        }
    }
    t.default = B
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(138)
      , r = i(2899)
      , a = i(16)
      , l = i(10)
      , c = i(143)
      , d = i(69)
      , u = i(43)
      , g = i(28)
      , h = i(2)
      , p = i(3)
      , m = i(4)
      , S = i(1648)
      , C = i(17)
      , y = i(19)
      , f = i(41)
      , _ = i(8)
      , b = i(9);
    class v extends u.default {
        constructor() {
            super(...arguments),
            this._onKeyPress = e=>c.default.maybeHandleKeyPress(e, ()=>this._onPressUnblockButton(e)),
            this._onPressUnblockButton = e=>{
                e.stopPropagation(),
                this.setState({
                    isUnblocking: !0
                }),
                d.default.unblockContact(this.props.userMri).fail(()=>{
                    this.isComponentMounted() && this.setState({
                        isUnblocking: !1
                    })
                }
                ).finally(()=>{
                    let e = m.getString("SkypeUserListItem.DisplayNameLabel", {
                        displayName: this.state.displayName
                    });
                    e += m.getString("UserSettingsPanel.UnblockButtonTitle"),
                    o.Accessibility.announceForAccessibility(e)
                }
                ),
                this.props.onPress && this.props.onPress(e)
            }
        }
        _buildState(e, t) {
            const i = g.getDisplayableProfile(e.userMri);
            let n = {
                displayName: i && i.getDisplayName()
            };
            return t && (n.isUnblocking = !1),
            n
        }
        render() {
            const e = {
                backgroundColor: _.Color.gray100,
                textColor: _.Color.gray400,
                indicatorColor: _.Color.gray400
            };
            return o.createElement(f, {
                buttonStyle: l.SXButtonStyle.Custom,
                buttonSize: l.SXButtonSize.Small,
                title: m.getString("UserSettingsPanel.UnblockButtonTitle"),
                showActivityIndicator: this.state.isUnblocking,
                allowTextWrap: !0,
                onPress: this._onPressUnblockButton,
                buttonConfig: e,
                onKeyPress: this._onKeyPress
            })
        }
    }
    class T extends S.default {
        constructor() {
            super(...arguments),
            this._onPressRightButton = ()=>{
                this._headerBackButtonRef && this._headerBackButtonRef.requestFocus()
            }
        }
        _getUsersMris() {
            const e = r.getBlockedUsersOrConvOwners();
            return n.sortBy(e, e=>{
                const t = g.getDisplayName(e);
                return t && y.deburrLocaleLowerCase(t)
            }
            )
        }
        _onItemPress(e, t) {
            const i = b.newCauseId();
            if (p.log(h.LogTraceArea.Navigation, "BlockedUsersListPanel._onItemPress, causeId: " + i),
            a.isAgent(t)) {
                const e = s.default.getAgentDescriptionForMri(t);
                if (e && e.isUnknown)
                    return
            }
            C.showDetailsPanelWithParams({
                mri: t,
                componentContext: this._getContext(),
                causeId: i
            })
        }
        _getRightControlButton(e) {
            return o.createElement(v, {
                userMri: e,
                onPress: this._onPressRightButton
            })
        }
        _getHeaderText(e) {
            return T.getHeaderText()
        }
        static getHeaderText() {
            return m.getString("UserSettingsPanel.BlockedContactsTitle")
        }
    }
    t.default = T
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(166)
      , o = i(0)
      , s = i(50)
      , r = i(10)
      , a = i(5)
      , l = i(24)
      , c = i(37)
      , d = i(44)
      , u = i(1649)
      , g = i(14)
      , h = a.lazyProperties({
        panel: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        listItem: ()=>a.lazyProperties({
            itemDivider: ()=>o.Styles.createViewStyle({
                height: 1,
                marginRight: 30,
                marginLeft: 60
            }),
            itemDividerSmallScreen: ()=>o.Styles.createViewStyle({
                marginRight: 10
            }),
            rowItems: ()=>o.Styles.createViewStyle({
                flex: 1,
                alignSelf: "stretch",
                flexDirection: "row",
                alignItems: "center"
            })
        })
    });
    class p extends s.default {
        constructor() {
            super(...arguments),
            this._onBackButtonRef = e=>{
                this._headerBackButtonRef = e || void 0
            }
            ,
            this._onHandleItemPress = (e,t,i)=>{
                this._onItemPress(e, i, t)
            }
            ,
            this._renderItem = e=>{
                let t = [h.listItem.itemDivider, this._themeStyles.dividerColorStyle];
                this.state.isMobileScreenSize && t.push(h.listItem.itemDividerSmallScreen);
                const i = e.key;
                return o.createElement(o.View, {
                    key: "mri" + i,
                    style: g.flexOne
                }, o.createElement(o.View, {
                    style: h.listItem.rowItems
                }, o.createElement(u, {
                    userMri: i,
                    itemHeight: 55,
                    hideBlockedOverlay: !0,
                    renderAsListItem: !0,
                    customRightButtonControl: this._getRightControlButton(i),
                    onItemPress: this._onHandleItemPress
                })), o.createElement(o.View, {
                    key: "itemDivider",
                    style: t
                }))
            }
        }
        _buildState(e, t) {
            const i = this._getUsersMris()
              , n = [];
            i.forEach(e=>{
                n.push({
                    key: e,
                    height: 56,
                    template: "userListItem"
                })
            }
            );
            const o = this._getRootViewId();
            return {
                isMobileScreenSize: l.default.isMobileScreenSize(o),
                safeAreaHorizontalInsets: c.default.horizontalInsets(r.HorizontalInsetDefault),
                userItems: n
            }
        }
        render() {
            const e = {
                closeButtonType: this.props.isAloneInNavStack ? d.CloseButtonType.Close : d.CloseButtonType.Back,
                setButtonRef: this._onBackButtonRef
            }
              , t = this._getHeaderText(this.state)
              , i = o.createElement(d.SimplePanelHeader, {
                panelName: t,
                leftButton: e
            });
            return o.createElement(o.View, {
                style: [h.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, i, o.createElement(n.VirtualListView, {
                itemList: this.state.userItems,
                renderItem: this._renderItem,
                animateChanges: !0,
                horizontalPadding: this.state.safeAreaHorizontalInsets,
                accessibilityLabel: t
            }))
        }
        _getRightControlButton(e) {}
    }
    t.default = p
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(50)
      , s = i(10)
      , r = i(610)
      , a = i(2)
      , l = i(3)
      , c = i(5)
      , d = i(4)
      , u = i(778)
      , g = i(862)
      , h = i(41)
      , p = i(23)
      , m = i(15)
      , S = i(9)
      , C = c.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            padding: 20,
            marginTop: 10,
            flex: 1
        }),
        description: ()=>n.Styles.createTextStyle({
            paddingTop: 20
        }),
        radioSet: ()=>n.Styles.createViewStyle({
            marginVertical: 20
        }),
        textStyle: ()=>n.Styles.createTextStyle({
            marginRight: 40
        })
    });
    class y extends o.default {
        constructor() {
            super(...arguments),
            this._submitted = !1,
            this._onChangeSelection = e=>{
                const t = parseInt(e, 10);
                this.setState({
                    selectedOption: t
                })
            }
            ,
            this._onConfirm = ()=>{
                const e = S.newCauseId();
                l.log(a.LogTraceArea.GenericUnsafe, "CaptivePortalQuestionnaire._onConfirm, causeId: " + e),
                this._submitted = !0,
                this._goBack(e)
            }
        }
        static getHeaderText() {
            return d.getString("ConnectivityStatusBar.CaptivePortalDismissHeader")
        }
        _getHeaderText(e) {
            return y.getHeaderText()
        }
        componentWillUnmount() {
            super.componentWillUnmount();
            const e = this._submitted && this.state.selectedOption || u.CaptivePortalQuestionnaireOption.NoAnswer;
            r.default.answerCaptivePortalQuestionnaire(e)
        }
        render() {
            const e = [{
                key: u.CaptivePortalQuestionnaireOption.Invalid.toString(),
                text: d.getString("ConnectivityStatusBar.CaptivePortalDismissOptionInvalid")
            }, {
                key: u.CaptivePortalQuestionnaireOption.Useless.toString(),
                text: d.getString("ConnectivityStatusBar.CaptivePortalDismissOptionUseless")
            }, {
                key: u.CaptivePortalQuestionnaireOption.DontUnderstand.toString(),
                text: d.getString("ConnectivityStatusBar.CaptivePortalDismissOptionNotUnderstand")
            }, {
                key: u.CaptivePortalQuestionnaireOption.Other.toString(),
                text: d.getString("ConnectivityStatusBar.CaptivePortalDismissOptionOther")
            }];
            return n.createElement(n.View, {
                style: C.container
            }, n.createElement(m.Header, {
                size: s.HeaderSize.h2
            }, d.getString("ConnectivityStatusBar.CaptivePortalDismissHeader")), n.createElement(m.BodyText, {
                style: C.description
            }, d.getString("ConnectivityStatusBar.CaptivePortalDismissQuestion")), n.createElement(g.default, {
                style: C.radioSet,
                radioButtons: e,
                selectedKey: this.state.selectedOption ? this.state.selectedOption.toString() : void 0,
                textStyle: [p.bodyFontStyle(this._currentTheme), C.textStyle],
                dividerType: g.DividerType.None,
                onSelected: this._onChangeSelection,
                fullWidth: !0
            }), n.createElement(h, {
                buttonSize: s.SXButtonSize.Medium,
                buttonStyle: s.SXButtonStyle.ColorFill,
                title: d.getString("Global.OkLabel"),
                allowTextWrap: !0,
                onPress: this._onConfirm
            }))
        }
    }
    t.default = y
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(78)
      , r = i(69)
      , a = i(237)
      , l = i(28)
      , c = i(2)
      , d = i(40)
      , u = i(27)
      , g = i(3)
      , h = i(5)
      , p = i(4)
      , m = i(1648)
      , S = i(17)
      , C = i(76)
      , y = i(19)
      , f = i(73)
      , _ = i(18)
      , b = i(11)
      , v = i(49)
      , T = i(9)
      , P = h.lazyProperties({
        moreButton: ()=>o.Styles.createViewStyle({
            paddingRight: 5,
            height: 20
        })
    });
    class A extends m.default {
        constructor() {
            super(...arguments),
            this._getConnectedUserMenuItems = ()=>{
                let e = [];
                return e.push({
                    text: p.getString("UserProfilePanel.DeleteContactLabel"),
                    command: "deleteContact"
                }, {
                    text: p.getString("UserProfilePanel.ViewProfileLabel"),
                    command: "viewProfile"
                }),
                e
            }
            ,
            this._onHandleConnectedUserMenuOptions = (e,t)=>{
                const i = T.newCauseId();
                switch (g.log(c.LogTraceArea.Navigation, "ConnectedUsersListPanel._onHandleConnectedUserMenuOptions, causeId: " + i),
                e) {
                case "deleteContact":
                    r.default.removeContact(t, a.DeleteContactOrigin.ManageConnectedPeople).then(()=>{
                        const e = l.getDisplayableProfile(t)
                          , i = e && e.getDisplayName();
                        o.Accessibility.announceForAccessibility(p.getString("UserSettingsPanel.ContactRemovedAccessibilityLabel", {
                            displayName: i
                        }))
                    }
                    );
                    break;
                case "viewProfile":
                    S.showDetailsPanelWithParams({
                        mri: t,
                        causeId: i,
                        componentContext: this._getContext()
                    });
                    break;
                case f.SXActionMenuCancel:
                }
            }
        }
        static getHeaderText() {
            return p.getString("UserSettingsPanel.ProfileVisiblityTitle")
        }
        _buildState(e, t) {
            return Object.assign(Object.assign({}, super._buildState(e, t)), {
                isMobileScreenReaderEnabled: C.default.isMobileScreenReaderEnabled()
            })
        }
        _getUsersMris() {
            return s.chain(n.values(r.default.getFilteredAllContactProfiles("", {
                excludeBots: !0
            })), s.sortBy(e=>y.deburrLowerCase(e.getDisplayName())), s.map(e=>e.getMri()), s.compact())
        }
        _onItemPress(e, t, i) {
            const n = {
                anchor: ()=>i,
                buttons: this._getConnectedUserMenuItems(),
                positionPriorities: ["bottom"],
                destructiveButtonIndex: 0
            };
            f.default.showWithActionMenuConfig({
                options: n,
                callback: e=>this._onHandleConnectedUserMenuOptions(e, t),
                rootViewId: this._getRootViewId(),
                invokingEvent: e
            })
        }
        _getRightControlButton(e) {
            if (this.state.isMobileScreenReaderEnabled)
                return;
            if (_.isElectronWindows())
                return o.createElement(u.default, {
                    icon: b.SkypeIcon.More,
                    size: b.IconSize.size24,
                    color: this._themeColors.primaryIconColor
                });
            const t = l.getDisplayableProfile(e)
              , i = t && t.getDisplayName()
              , n = [o.Types.AccessibilityTrait.Button, o.Types.AccessibilityTrait.MenuItem]
              , s = p.getString("Global.ContactMoreButtonAccessibilityLabel", {
                displayName: i
            });
            return o.createElement(d.default, {
                key: "moreButton",
                title: p.getString("Global.MoreButtonTitle"),
                onPress: t=>this._onItemPress(t, e),
                size: b.IconSize.size24,
                color: this._themeColors.secondaryTextColor,
                hoverColor: this._themeColors.primaryTextColor,
                style: P.moreButton,
                icon: v.moreIcon(),
                accessibilityTraits: n,
                accessibilityLabel: s
            })
        }
        _getHeaderText(e) {
            return A.getHeaderText()
        }
    }
    t.default = A
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "all_hub_plus_button"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this._action,
            e
        }
    }
    t.HubPlusButtonEvent = o
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(42)
      , r = i(10)
      , a = i(610)
      , l = i(2)
      , c = i(40)
      , d = i(27)
      , u = i(3)
      , g = i(5)
      , h = i(4)
      , p = i(17)
      , m = i(22)
      , S = i(778)
      , C = i(150)
      , y = i(47)
      , f = i(8)
      , _ = i(11)
      , b = i(15)
      , v = i(12)
      , T = i(9);
    t.HeightComposite = 59,
    t.HeightStack = 44;
    const P = g.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignItems: "center"
        }),
        simpleText: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            justifyContent: "flex-start"
        }),
        button: ()=>n.Styles.createButtonStyle({
            flex: 1,
            flexDirection: "row",
            justifyContent: "flex-start"
        }),
        icon: ()=>n.Styles.createTextStyle({
            alignSelf: "center"
        }),
        iconComposite: ()=>n.Styles.createViewStyle({
            marginLeft: 18,
            marginRight: 11
        }),
        iconStack: ()=>n.Styles.createViewStyle({
            marginLeft: 8,
            marginRight: 8
        }),
        textStack: ()=>n.Styles.createTextStyle({
            lineHeight: 20
        }),
        textComposite: ()=>n.Styles.createTextStyle({
            lineHeight: 24,
            alignSelf: "center"
        }),
        buttonTextStack: ()=>n.Styles.createTextStyle({
            marginLeft: 8
        }),
        buttonTextComposite: ()=>n.Styles.createTextStyle({
            marginLeft: 4
        }),
        closeButtonStyle: ()=>n.Styles.createButtonStyle({
            flex: 0,
            paddingHorizontal: 10,
            justifyContent: "center"
        }),
        backgroundStyleStack: ()=>n.Styles.createViewStyle({
            height: t.HeightStack
        }),
        backgroundStyleComposite: ()=>n.Styles.createViewStyle({
            height: t.HeightComposite,
            paddingVertical: r.CompositeNotificationToastInfo.vertical
        })
    });
    class A extends v.default {
        constructor() {
            super(...arguments),
            this._onButtonPressed = e=>{
                e.stopPropagation(),
                u.log(l.LogTraceArea.GenericUnsafe, "NetworkConnectionAlertContent._onButtonPressed"),
                p.navigateToInAppBrowser({
                    origin: l.BrowserOrigin.NetworkConnectionAlert,
                    url: this.state.browserUrl,
                    openUrlOptions: {
                        onInAppWebBrowserClose: ()=>C.runConnectivityCheck()
                    }
                }, this._getContext());
                const t = new S.CaptivePortalOpenBrowserEvent;
                u.track(t)
            }
            ,
            this._onCloseButtonPress = e=>{
                const t = T.newCauseId();
                if (u.log(l.LogTraceArea.GenericUnsafe, "NetworkConnectionAlertContent._onCloseButtonPress, causeId: " + t),
                a.default.dismissConnectivityAlert(),
                this.state.showQuestionnaire && p.navigateToCaptivePortalQuestionnaire(t, this._getContext()),
                this.props.alertType) {
                    const e = new S.ConnectivityAlertDismissEvent(this.props.alertType);
                    u.track(e)
                }
            }
        }
        _buildState(e, t) {
            return {
                isUsingStackNavigationContext: m.default.isUsingStackNavigationContext(),
                browserUrl: o.default.getConfigSettings().captivePortalDetection.browserUrl,
                showQuestionnaire: a.default.shouldShowCaptivePortalQuestionnaire()
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.alertType && this._announceForAccessibility()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            !e.alertType && this.props.alertType && this._announceForAccessibility()
        }
        _announceForAccessibility() {
            y.shouldAnnounceForAccessibility() && (this.props.alertType === l.ConnectivityAlertType.CaptivePortal ? n.Accessibility.announceForAccessibility(h.getString("ConnectivityStatusBar.CaptivePortalAlert")) : this.props.alertType === l.ConnectivityAlertType.NoNetwork && n.Accessibility.announceForAccessibility(h.getString("ConnectivityStatusBar.NoInternetConnectionAccessibilityAnnouncement")))
        }
        render() {
            const e = [P.container, this.state.isUsingStackNavigationContext ? P.backgroundStyleStack : P.backgroundStyleComposite, n.Styles.createViewStyle({
                backgroundColor: this._themeColors.primaryBackgroundColor
            }, !1)];
            return n.createElement(n.View, {
                style: e
            }, this._renderContent())
        }
        _renderContent() {
            if (!this.props.alertType)
                return null;
            let e;
            return this.props.alertType !== l.ConnectivityAlertType.NoNetwork && (e = n.createElement(c.default, {
                size: _.IconSize.size20,
                color: this._themeColors.primaryTextColor,
                hoverColor: this._themeColors.textHoverColor,
                icon: _.SkypeIcon.ClosePanel,
                style: P.closeButtonStyle,
                title: h.getString("Global.CloseButtonTitle"),
                onPress: this._onCloseButtonPress,
                key: "connectionAlertClose"
            })),
            [this._renderText(), e]
        }
        _renderText() {
            const e = this.state.isUsingStackNavigationContext ? P.iconStack : P.iconComposite
              , t = this._useAccessibleTheme() ? this._themeStyles.primaryTextColorStyle : n.Styles.createTextStyle({
                color: this._themeColors.linkTextColor || f.Color.blueDark
            }, !1)
              , i = this.state.isUsingStackNavigationContext ? b.Caption : b.BodyText
              , o = this.state.isUsingStackNavigationContext ? [this._themeStyles.primaryTextColorStyle, P.textStack] : [this._themeStyles.primaryTextColorStyle, P.textComposite]
              , r = this.state.isUsingStackNavigationContext ? [t, P.textStack, P.buttonTextStack] : [t, P.textComposite, P.buttonTextComposite]
              , a = n.createElement(d.default, {
                color: this._themeColors.primaryTextColor,
                style: [P.icon, e],
                size: this.state.isUsingStackNavigationContext ? _.IconSize.size20 : _.IconSize.size24,
                icon: _.SkypeIcon.Warning
            });
            if (this.props.alertType === l.ConnectivityAlertType.CaptivePortal) {
                const e = h.getString("ConnectivityStatusBar.CaptivePortalAlert")
                  , t = h.getString("ConnectivityStatusBar.CaptivePortalAlertAction");
                return n.createElement(n.Button, {
                    style: P.button,
                    accessibilityLabel: s.default.combinedAccessibilityLabel(e, t),
                    onPress: this._onButtonPressed,
                    tabIndex: -1,
                    key: "connectionAlertCaptivePortal"
                }, a, n.createElement(i, {
                    style: o,
                    disableThemeSubscription: !0
                }, e), n.createElement(i, {
                    style: r,
                    disableThemeSubscription: !0
                }, t))
            }
            return this.props.alertType === l.ConnectivityAlertType.NoNetwork ? n.createElement(n.View, {
                style: P.simpleText,
                key: "connectionAlertNoNetwork"
            }, a, n.createElement(i, {
                style: o
            }, h.getString("ConnectivityStatusBar.NoInternetConnection"))) : null
        }
    }
    t.default = A
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    var o;
    !function(e) {
        e[e.SortByTime = 0] = "SortByTime",
        e[e.SortByUnread = 1] = "SortByUnread",
        e[e.SortByActive = 2] = "SortByActive",
        e[e.RowSizeDefault = 3] = "RowSizeDefault",
        e[e.RowSizeCompact = 4] = "RowSizeCompact",
        e[e.RowSizeMini = 5] = "RowSizeMini",
        e[e.MarkAllConversationsRead = 6] = "MarkAllConversationsRead",
        e[e.ShowCategories = 7] = "ShowCategories",
        e[e.HideCategories = 8] = "HideCategories",
        e[e.ShowAllConversations = 9] = "ShowAllConversations",
        e[e.ShowArchivedConversations = 10] = "ShowArchivedConversations"
    }(o = t.RecentConversationsFilterAction || (t.RecentConversationsFilterAction = {}));
    class s extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "people_recent_conversations_filter"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = o[this._action],
            e
        }
    }
    t.RecentConversationsFilterEvent = s
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(42)
      , r = i(467)
      , a = i(80)
      , l = i(121)
      , c = i(5)
      , d = i(8)
      , u = i(18)
      , g = i(23)
      , h = i(12)
      , p = i(29)
      , m = c.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            height: 40
        }),
        containerCompact: ()=>o.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            height: 30
        }),
        button: ()=>o.Styles.createViewStyle({
            flex: 1,
            minWidth: 0,
            justifyContent: "center",
            alignItems: "center"
        }),
        inner: ()=>o.Styles.createViewStyle({
            flex: 1,
            borderBottomWidth: 2,
            borderColor: d.Color.transparent,
            paddingTop: 2,
            justifyContent: "center",
            overflow: "visible"
        }),
        text: ()=>o.Styles.createTextStyle({
            fontSize: g.controlFontSize.searchFiltersTab
        }),
        textCompact: ()=>o.Styles.createTextStyle({
            fontSize: g.controlFontSize.caption
        }),
        selectedText: ()=>o.Styles.createTextStyle({
            fontWeight: "bold"
        }),
        fixedWidthTab: ()=>o.Styles.createViewStyle({
            width: 100
        })
    });
    class S extends h.default {
        constructor() {
            super(...arguments),
            this._setButtonRef = e=>{
                this._buttonRef = e || void 0
            }
            ,
            this._onPress = e=>{
                this.props.onTabPress && this.props.onTabPress(this.props.tabId)
            }
            ,
            this._onHoverStart = ()=>{
                this.isComponentMounted() && this.setState({
                    hovered: !0
                })
            }
            ,
            this._onHoverEnd = ()=>{
                this.isComponentMounted() && this.setState({
                    hovered: !1
                })
            }
        }
        _buildState(e, t) {
            if (t) {
                return {
                    hovered: !1
                }
            }
            return {}
        }
        UNSAFE_componentWillReceiveProps(e, t) {
            super.UNSAFE_componentWillReceiveProps(e, t),
            e.shouldUpdateOnFocus && e.focused && !this.props.focused && this._buttonRef && this._buttonRef.requestFocus && this._buttonRef.requestFocus()
        }
        render() {
            const e = [m.inner]
              , t = [this.props.useCompactLayout ? m.textCompact : m.text]
              , i = s.default.tabAccessibilityLabel(this.props.title, this.props.tabIndex, this.props.tabCount, this.props.includeTabCountOnDesktop)
              , n = s.default.tabAccessibilityTraits(this.props.selected);
            if (this.props.selected) {
                const i = o.Styles.createViewStyle({
                    borderColor: this._themeColors.primaryTextColor
                }, !1);
                e.push(i),
                t.push(m.selectedText, this._themeStyles.primaryTextColorStyle)
            } else if (t.push(this._themeStyles.secondaryTextColorStyle),
            this.state.hovered) {
                const t = o.Styles.createViewStyle({
                    borderColor: this._themeColors.secondaryTextColor
                }, !1);
                e.push(t)
            }
            const r = [m.button];
            return this.props.widthStyle && r.push(this.props.widthStyle),
            o.createElement(o.Button, {
                style: r,
                onPress: this._onPress,
                ref: this._setButtonRef,
                onHoverStart: this._onHoverStart,
                onHoverEnd: this._onHoverEnd,
                accessibilityTraits: n,
                tabIndex: this.props.focused ? 0 : -1,
                accessibilityLabel: i
            }, o.createElement(a.default, {
                style: e
            }, o.createElement(o.Text, {
                style: t
            }, this.props.title)))
        }
    }
    class C extends h.default {
        constructor() {
            super(...arguments),
            this._onKeyPress = e=>{
                let t = this.state.focusedIndex;
                e.keyCode !== l.DOWN && e.keyCode !== l.LEFT || (t -= 1),
                e.keyCode !== l.UP && e.keyCode !== l.RIGHT || (t += 1),
                t < 0 ? t = this.props.tabs.length - 1 : t >= this.props.tabs.length && (t = 0),
                this.setState({
                    focusedIndex: t
                })
            }
            ,
            this._onBlur = ()=>{
                this._focusResetTimeout && p.clearTimeout(this._focusResetTimeout),
                this._focusResetTimeout = p.setTimeout(()=>{
                    const e = this._findTabIndexById(this.state.selectedId, this.props.tabs);
                    this.isComponentMounted() && this.state.focusedIndex !== e && this.setState({
                        hasFocus: !1,
                        focusedIndex: e
                    })
                }
                , 250)
            }
            ,
            this._onFocus = ()=>{
                this.isComponentMounted() && !this.state.hasFocus && this.setState({
                    hasFocus: !0
                }),
                this._focusResetTimeout && (p.clearTimeout(this._focusResetTimeout),
                this._focusResetTimeout = void 0)
            }
            ,
            this._onTabPress = e=>{
                this.setState({
                    selectedId: e
                }),
                this.props.onChanged(e)
            }
        }
        _buildState(e, t) {
            if (t) {
                const t = e.initialySelectedId || e.tabs[0].id;
                return {
                    selectedId: t,
                    focusedIndex: this._findTabIndexById(t, e.tabs),
                    hasFocus: !1
                }
            }
            return {}
        }
        UNSAFE_componentWillReceiveProps(e, t) {
            super.UNSAFE_componentWillReceiveProps(e, t),
            this.props.initialySelectedId !== e.initialySelectedId && this.setState({
                selectedId: e.initialySelectedId
            })
        }
        render() {
            const e = this._renderTabs(this.props.tabs, this.props.useFixedWidth ? m.fixedWidthTab : void 0);
            return o.createElement(o.View, {
                onKeyPress: this._onKeyPress,
                onBlur: this._onBlur,
                onFocus: this._onFocus,
                style: this.props.useCompactLayout ? m.containerCompact : m.container,
                accessibilityTraits: r.default.useTabListContainer() ? o.Types.AccessibilityTrait.TabList : void 0,
                accessibilityLabel: this.props.accessibilityLabel
            }, e)
        }
        _findTabIndexById(e, t) {
            return n.findIndex(t, t=>t.id === e)
        }
        _renderTabs(e, t) {
            let i;
            u.isRTL() ? (i = e.slice(0),
            i.reverse()) : i = e;
            const n = i.length;
            return i.map((e,i)=>o.createElement(S, {
                key: "tab-" + e.id,
                tabId: e.id,
                title: e.title,
                focused: this.state.focusedIndex === i,
                selected: this.state.selectedId === e.id,
                shouldUpdateOnFocus: this.state.hasFocus,
                widthStyle: t,
                useCompactLayout: this.props.useCompactLayout,
                tabIndex: i,
                tabCount: n,
                includeTabCountOnDesktop: !r.default.useTabListContainer(),
                onTabPress: this._onTabPress
            }))
        }
    }
    t.TabFilters = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(86)
      , o = i(0)
      , s = i(5)
      , r = i(23)
      , a = i(14)
      , l = i(12);
    !function(e) {
        e[e.Up = 0] = "Up",
        e[e.Down = 1] = "Down"
    }(t.TabAnimationDirection || (t.TabAnimationDirection = {}));
    const c = s.lazyProperties({
        defaultTabTextStyle: ()=>o.Styles.createTextStyle({
            flex: 1,
            font: r.font.uiDisplayRegular,
            fontSize: r.controlFontSize.tabHeader,
            textAlign: "center"
        }),
        defaultSmallTabTextStyle: ()=>o.Styles.createTextStyle({
            fontSize: r.controlFontSize.tabHeaderSmall
        }),
        defaultTabTextStylePadding: ()=>o.Styles.createTextStyle({
            paddingHorizontal: 2
        }),
        defaultSelectedTabTextStyle: ()=>o.Styles.createTextStyle({
            flex: -1,
            letterSpacing: -.5,
            font: r.font.uiDisplaySemibold_DEPRECATED,
            fontSize: r.controlFontSize.tabHeader,
            paddingHorizontal: 2,
            textAlign: "center"
        }),
        tabTitleContainerStyle: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignItems: "stretch",
            justifyContent: "flex-end"
        }),
        tabTitleStyle: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            paddingBottom: 9
        }),
        tabTitleStyleSmall: ()=>o.Styles.createViewStyle({
            paddingBottom: 5
        })
    });
    class d extends l.default {
        constructor() {
            super(...arguments),
            this._animated = !1,
            this._currentSelectedValue = 0,
            this._animatedDeselectedOpacityValue = new o.Animated.Value(1),
            this._animatedDeselectedStyle = o.Styles.createAnimatedTextStyle({
                opacity: this._animatedDeselectedOpacityValue
            }),
            this._animatedSelectedOpacityValue = new o.Animated.Value(0),
            this._animatedSelectedStyle = o.Styles.createAnimatedTextStyle({
                opacity: this._animatedSelectedOpacityValue
            }),
            this._resetTransitionTransformValue = new o.Animated.Value(0),
            this._resetTransitionOpacityValue = new o.Animated.Value(1),
            this._resetTransitionStyle = o.Styles.createAnimatedViewStyle({
                opacity: this._resetTransitionOpacityValue,
                transform: [{
                    translateY: this._resetTransitionTransformValue
                }]
            }),
            this._animatedContentOpacityValue = new o.Animated.Value(1),
            this._animatedContentOpacityStyle = o.Styles.createAnimatedViewStyle({
                opacity: this._animatedContentOpacityValue
            }),
            this._animatedShowHideStyle = this._resetTransitionStyle
        }
        componentDidMount() {
            super.componentDidMount(),
            n.NativeUtils.markAnimatedValue(this._animatedContentOpacityValue, 1)
        }
        update(e, t=!1) {
            this._currentSelectedValue = e,
            this._animated ? t ? (this._selectedAnimation && this._selectedAnimation.stop(),
            this._selectedAnimation = n.parallel([n.timing.easeOut({
                value: this._animatedSelectedOpacityValue,
                toValue: e
            }), n.timing.easeOut({
                value: this._animatedDeselectedOpacityValue,
                toValue: 1 - e
            })]),
            this._selectedAnimation.start(e=>{
                e.finished && delete this._selectedAnimation
            }
            )) : (this._animatedSelectedOpacityValue.setValue(e),
            this._animatedDeselectedOpacityValue.setValue(1 - e)) : 1 !== e && 0 !== e || this.isComponentMounted() && this.forceUpdate()
        }
        showOrHide(e, t=0) {
            n.timing.easeOut({
                value: this._animatedContentOpacityValue,
                toValue: e ? 1 : 0,
                duration: e ? n.timing.Duration.Short : n.timing.Duration.Tiny,
                delay: t,
                useNativeDriver: !0
            }).start()
        }
        _getTabTextStyles(e) {
            if (!this._animated)
                return e ? [c.defaultSelectedTabTextStyle, this._themeStyles.primaryTextColorStyle] : [c.defaultTabTextStyle, this._themeStyles.secondaryTextColorStyle];
            let t;
            return t = e ? [c.defaultSelectedTabTextStyle, this._themeStyles.primaryTextColorStyle, this._animatedSelectedStyle] : [c.defaultTabTextStyle, a.absoluteFill, this._themeStyles.secondaryTextColorStyle, this._animatedDeselectedStyle],
            this.props.useSmallFonts && t.push(c.defaultSmallTabTextStyle),
            t
        }
        render() {
            const e = this._getTabTextStyles(!1)
              , t = this._getTabTextStyles(!0)
              , i = this._animated
              , n = i ? o.createElement(o.Animated.Text, {
                style: e,
                numberOfLines: 1
            }, this.props.title) : null;
            i || e.push(c.defaultTabTextStylePadding);
            const s = i || 1 === this._currentSelectedValue ? t : e
              , r = [c.tabTitleStyle];
            return this._animated && r.push(this._animatedShowHideStyle),
            this.props.useSmallFonts && r.push(c.tabTitleStyleSmall),
            o.createElement(o.View, {
                style: c.tabTitleContainerStyle
            }, o.createElement(o.Animated.View, {
                style: r
            }, o.createElement(o.Animated.View, {
                style: [a.flexNegativeOne, this._animatedContentOpacityStyle]
            }, n, o.createElement(o.Animated.Text, {
                style: s,
                numberOfLines: 1
            }, this.props.title))))
        }
    }
    t.TabTitleView = d,
    t.default = d
}
, , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(65)
      , o = i(2)
      , s = i(3)
      , r = i(4)
      , a = i(32)
      , l = i(62)
      , c = i(17)
      , d = i(55)
      , u = i(9);
    var g;
    !function(e) {
        e[e.None = 0] = "None",
        e[e.Call = 1] = "Call",
        e[e.Chat = 2] = "Chat",
        e[e.CallAndChat = 3] = "CallAndChat"
    }(g || (g = {}));
    class h {
        static showDNDSettingDialog(e, t) {
            s.log(o.LogTraceArea.DNDSetting, "Showing DND setting dialog."),
            this._showDNDDialogHelper(e, t)
        }
        static _getEnableNotificationState() {
            return l.default.getCallNotificationsWhileDNDEnabled() || l.default.getChatNotificationsWhileDNDEnabled() ? l.default.getCallNotificationsWhileDNDEnabled() ? l.default.getChatNotificationsWhileDNDEnabled() ? g.None : g.Chat : g.Call : g.CallAndChat
        }
        static _getContentText(e) {
            let t;
            switch (e) {
            case g.CallAndChat:
                t = r.getString("DNDSettingDialog.CallAndChatNotificationDuringDNDDialogContent");
                break;
            case g.Call:
                t = r.getString("DNDSettingDialog.CallNotificationDuringDNDDialogContent");
                break;
            case g.Chat:
                t = r.getString("DNDSettingDialog.ChatNotificationDuringDNDDialogContent");
                break;
            case g.None:
            default:
                t = r.getString("DNDSettingDialog.NotificationDuringDNDDialogContent")
            }
            return t
        }
        static _showDNDDialogHelper(e, t) {
            const i = [{
                text: r.getString("DNDSettingDialog.DontAskMeAgain"),
                onPress: this._dialogActionHandler(this._presentDNDPopupPressed, t)
            }, {
                text: r.getString("DNDSettingDialog.DoNothing"),
                onPress: t
            }, {
                text: r.getString("DNDSettingDialog.ViewNotificationsSetting"),
                onPress: this._dialogActionHandler(this._onAppSettingsButtonPressed, t),
                isSubmit: !0
            }]
              , o = r.getString("DNDSettingDialog.DNDSettingTitle");
            let s = this._getEnableNotificationState();
            const a = this._getContentText(s);
            s !== g.None && n.default.showWithOptions({
                title: o,
                message: a,
                dialogAccessibilityTitle: a,
                buttons: i,
                onClickOutside: t,
                rootViewId: e
            })
        }
        static _dialogActionHandler(e, t) {
            return t ? ()=>{
                e(),
                t && t()
            }
            : e
        }
    }
    h._onAppSettingsButtonPressed = ()=>{
        const e = u.newCauseId();
        s.log(o.LogTraceArea.DNDSetting, "DNDSettingDialog._onAppSettingsButtonPressed causeId: " + e),
        c.navigateToDesktopSettingsGroup(d.SettingsGroup.Notifications, void 0, e)
    }
    ,
    h._presentDNDPopupPressed = ()=>{
        l.default.setPresentDNDSetting(),
        a.default.setUserPreferencesLocal({
            presentDNDSetting: !1
        })
    }
    ,
    e.exports = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43)
      , s = i(503)
      , r = i(4)
      , a = i(17)
      , l = i(90);
    class c extends o.default {
        constructor() {
            super(...arguments),
            this._onThirdPartyNoticesPressed = ()=>{
                a.navigateToThirdPartyNotices(this._getContext())
            }
            ,
            this._openPrivacy = ()=>{
                s.openPrivacy()
            }
            ,
            this._openTerms = ()=>{
                s.openTerms()
            }
        }
        render() {
            return n.createElement(n.View, {
                style: this.props.style
            }, n.createElement(l.WideButton, {
                label: r.getString("AboutPanel.ThirdPartyNoticesLabel"),
                onPressed: this._onThirdPartyNoticesPressed,
                buttonStyles: this.props.buttonStyles
            }), n.createElement(l.WideButton, {
                label: r.getString("AboutPanel.PrivacyPolicyLabel"),
                onPressed: this._openPrivacy,
                buttonStyles: this.props.buttonStyles
            }), n.createElement(l.WideButton, {
                label: r.getString("AboutPanel.TermsOfUseLabel"),
                onPressed: this._openTerms,
                buttonStyles: this.props.buttonStyles
            }))
        }
    }
    t.default = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(50)
      , s = i(28)
      , r = i(2)
      , a = i(3)
      , l = i(4)
      , c = i(1190)
      , d = i(20)
      , u = i(1690)
      , g = i(165)
      , h = i(84)
      , p = i(11)
      , m = i(886)
      , S = i(45);
    class C extends o.default {
        _buildState(e, t) {
            return {
                showAddPhotoLabel: !s.getDisplayableProfile(d.getSkypeMri()).getAvatarUrl()
            }
        }
        render() {
            return n.createElement(n.View, {
                style: this.props.style,
                forceDirection: !0
            }, n.createElement(h.SectionTitle, {
                title: l.getString("UserSettingsPanel.YourProfileTitleUpper")
            }), n.createElement(u.default, {
                buttonStyles: this.props.buttonStyles,
                icon: p.SkypeIcon.Picture,
                showAddPhotoLabel: this.state.showAddPhotoLabel
            }), n.createElement(m, {
                userMri: d.getSkypeMri()
            }), n.createElement(c.default, {
                buttonStyles: this.props.buttonStyles
            }))
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            S.refreshNow()
        }
        componentDidMount() {
            super.componentDidMount(),
            a.track(new g.ProfileOpened(r.ProfileType.My,r.ProfileOpenOrigin.AppSettings))
        }
        _getHeaderText(e) {
            return C.getHeaderText()
        }
        static getHeaderText() {
            return l.getString("UserSettingsPanel.AccountAndProfileSettingsTitle")
        }
    }
    t.default = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43)
      , s = i(4)
      , r = i(17)
      , a = i(103)
      , l = i(90);
    class c extends o.default {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                r.navigateToProfilePicturePanel(this._getContext())
            }
        }
        render() {
            return n.createElement(l.WideButton, {
                icon: this.props.icon,
                key: "profilePicturePrivacy",
                label: s.getString("UserSettingsPanel.ProfilePictureTitle"),
                labelRight: this.props.showAddPhotoLabel ? s.getString("UserSettingsPanel.AddPhotoLabel") : void 0,
                labelStyle: a.styles.titleMediumSemiLarge,
                buttonStyles: this.props.buttonStyles,
                onPressed: this._onPress
            })
        }
    }
    t.default = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(2935)
      , r = i(50)
      , a = i(1692)
      , l = i(2936)
      , c = i(2937)
      , d = (i(2938),
    i(4))
      , u = i(2939)
      , g = i(128)
      , h = (i(2940),
    i(2942))
      , p = i(2943)
      , m = i(1191)
      , S = i(2944)
      , C = i(84);
    i(59);
    class y extends r.default {
        _buildState() {
            const e = o.default.getS4LMessagingFeatures();
            return {
                hugeEmoticonsFeatureEnabled: e.singleEmoticonSize >= g.EmoticonSize.ExtraLarge,
                sendReadReceiptsFeatureEnabled: e.enableReadReceipts,
                customFileDownloadLocationEnabled: e.enableCustomFileDownloadLocation,
                autoDownloadFileEnabled: !1,
                picturePrefetchEnabled: o.default.getS4LCMCFeatures().picturePrefetchEnabled,
                enableMultiMessageQuoteOnKeyboard: e.enableMultiMessageQuoteOnKeyboard
            }
        }
        render() {
            return n.createElement(n.View, {
                style: this.props.style
            }, n.createElement(C.SectionTitle, {
                title: d.getString("UserSettingsPanel.MessagingAndChatsUpperTitle")
            }), this._getSendReadReceiptsToggle(), this._getDisplayLargeEmoToggle(), this._getDisplayUrlPreviewsToggle(), this._getFontSizePicker(), this._getExternalBrowserToggle(), this._getSendMessageWithEnterButton(), this._getPasteAsQuoteToggle(), this._getPicturePrefetchButton(), this._getAutoDownloadToggle(), this._setFileDownloadLocationButton())
        }
        _getDisplayLargeEmoToggle() {
            return this.state.hugeEmoticonsFeatureEnabled ? n.createElement(a.default, {
                style: this.props.buttonStyles
            }) : void 0
        }
        _getSendReadReceiptsToggle() {
            return this.state.sendReadReceiptsFeatureEnabled ? n.createElement(m.default, {
                style: this.props.buttonStyles
            }) : void 0
        }
        _getAutoDownloadToggle() {
            return this.state.autoDownloadFileEnabled ? n.createElement(s.default, {
                style: this.props.buttonStyles
            }) : void 0
        }
        _getPicturePrefetchButton() {
            return this.state.picturePrefetchEnabled ? n.createElement(h, null) : void 0
        }
        _getDisplayUrlPreviewsToggle() {
            return n.createElement(l.default, {
                style: this.props.buttonStyles
            })
        }
        _getExternalBrowserToggle() {}
        _getSendMessageWithEnterButton() {
            return n.createElement(p.default, {
                style: this.props.buttonStyles
            })
        }
        _getPasteAsQuoteToggle() {
            return this.state.enableMultiMessageQuoteOnKeyboard ? n.createElement(u.default, {
                style: this.props.buttonStyles
            }) : void 0
        }
        _setFileDownloadLocationButton() {
            return this.state.customFileDownloadLocationEnabled ? n.createElement(S.default, {
                style: this.props.buttonStyles
            }) : void 0
        }
        _getFontSizePicker() {
            return n.createElement(c, null)
        }
        _getHeaderText(e) {
            return y.getHeaderText()
        }
        static getHeaderText() {
            return d.getString("UserSettingsPanel.MessagingAndChatsTitle")
        }
    }
    t.default = y
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(51)
      , r = i(42)
      , a = i(4)
      , l = i(32)
      , c = i(84)
      , d = i(103);
    class u extends s.default {
        constructor() {
            super(...arguments),
            this._onChangeAllowHugeEmoticons = (e,t)=>{
                l.default.setUserPreferencesLocal({
                    allowHugeEmoticons: t
                })
            }
        }
        _buildState(e, t) {
            return {
                allowHugeEmoticons: !!l.default.getUserPreferencesLocal().allowHugeEmoticons
            }
        }
        render() {
            const e = a.getString("UserSettingsPanel.DisplayLargeEmoticons")
              , t = a.getString("UserSettingsPanel.DisplayLargeEmoticonsSubtitle");
            return n.createElement(o, {
                key: "allowHugeEmoticons",
                style: [d.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.allowHugeEmoticons,
                accessibilityLabel: r.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeAllowHugeEmoticons
            }, n.createElement(c.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
    }
    t.default = u
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(50)
      , s = i(4)
      , r = i(1694)
      , a = i(17)
      , l = i(84)
      , c = i(103)
      , d = i(1695)
      , u = (i(59),
    i(90));
    class g extends o.default {
        constructor() {
            super(...arguments),
            this._onPressManageBlockedUsers = ()=>{
                a.navigateToBlockedUsersList(this._getContext())
            }
        }
        static getHeaderText() {
            return s.getString("UserSettingsPanel.ContactsTitle")
        }
        render() {
            const e = n.createElement(l.SectionTitle, {
                key: "contacts",
                title: s.getString("UserSettingsPanel.ContactsUpperTitle")
            });
            return n.createElement(n.View, {
                style: this.props.style
            }, e, n.createElement(d.default, {
                buttonStyles: this.props.buttonStyles
            }), this._getBlockedContactsButton(), n.createElement(r.default, {
                buttonStyles: this.props.buttonStyles
            }))
        }
        _getHeaderText(e) {
            return g.getHeaderText()
        }
        _getBlockedContactsButton() {
            return n.createElement(u.WideButton, {
                key: "blockedUsers",
                label: s.getString("UserSettingsPanel.BlockedContactsTitle"),
                labelStyle: c.styles.titleMediumSemiLarge,
                buttonStyles: this.props.buttonStyles,
                onPressed: this._onPressManageBlockedUsers
            })
        }
    }
    t.default = g
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43)
      , s = i(4)
      , r = i(17)
      , a = i(360)
      , l = i(103)
      , c = i(90);
    class d extends o.default {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                r.navigateToManageSearchInfoPanel(a.ManageSearchOrigin.ApplicationSettings, this._getContext())
            }
        }
        render() {
            const e = s.getString("ManageSearchInfoPanel.PanelTitleContactsPrivacy");
            return n.createElement(c.WideButton, {
                key: "manageSearchInfo",
                label: e,
                labelStyle: l.styles.titleMediumSemiLarge,
                buttonStyles: this.props.buttonStyles,
                onPressed: this._onPress
            })
        }
    }
    t.default = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(102)
      , r = i(51)
      , a = i(237)
      , l = i(71)
      , c = i(160)
      , d = i(2)
      , u = i(703)
      , g = i(3)
      , h = i(5)
      , p = i(198)
      , m = i(224)
      , S = i(4)
      , C = i(32)
      , y = i(17)
      , f = i(55)
      , _ = i(22)
      , b = i(177)
      , v = i(84)
      , T = i(103)
      , P = i(8)
      , A = i(18)
      , k = i(23)
      , I = i(11)
      , w = i(14)
      , N = i(1192)
      , M = i(15)
      , E = i(9)
      , x = h.lazyProperties({
        refreshSyncContainer: ()=>o.Styles.createViewStyle({
            flexGrow: 0,
            flexShrink: 1,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "flex-start"
        }),
        customCaptionStyle: ()=>o.Styles.createViewStyle({
            flexGrow: 0,
            flexShrink: 1,
            flexDirection: "row",
            marginRight: 0,
            marginTop: 5
        }),
        refreshButtonTitle: ()=>o.Styles.createTextStyle({
            marginHorizontal: 5
        }),
        refreshButtonContainer: ()=>o.Styles.createViewStyle({
            height: 25
        }),
        syncContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            marginTop: 5,
            marginBottom: 5,
            paddingRight: 5,
            height: 15
        }),
        refreshSyncContainerWithLastSyncTime: ()=>o.Styles.createViewStyle({
            paddingLeft: 10
        }),
        subtitleContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row"
        })
    });
    class D extends r.default {
        constructor() {
            super(...arguments),
            this._onRefreshPress = e=>{
                this.setState({
                    isSyncingContacts: !0
                }),
                p.default.syncLocalAddressBook(!1, !0),
                a.ContactsTelemetryHelper.syncABContactsRefreshClicked()
            }
            ,
            this._onChangeSyncAddressBook = (e,t)=>{
                const i = E.newCauseId();
                g.log(d.LogTraceArea.Navigation, "SyncAddressBookButton._onChangeSyncAddressBook causeId: " + i),
                this.state.syncAddressBookEnabled !== t && (t ? this.state.isUsingStackNavigationContext ? y.navigateToSyncAddressBook({
                    origin: c.DialogNavOrigin.Settings,
                    hideSkipButton: !0,
                    hideCloseButton: !1
                }, void 0, this._getContext()) : y.navigateToDesktopSettingsGroup(f.SettingsGroup.SyncAddressBook, this._getContext(), i) : b.setSyncAddressBookPrivacySetting(t))
            }
        }
        _buildState(e, t) {
            const i = C.default.getUserPreferencesLocal().lastAddressbookSyncTime;
            return {
                syncAddressBookEnabled: b.getSyncAddressBookPrivacySetting(),
                isUsingStackNavigationContext: _.default.isUsingStackNavigationContext(),
                lastSyncTime: i,
                isSyncingContacts: p.default.isFetching(),
                isRefreshDisabled: !n.isUndefined(i) && !(Date.now() - i > 18e5)
            }
        }
        render() {
            if (!m.isAddressBookEnabled())
                return null;
            let e = "";
            if (this.state.lastSyncTime) {
                const t = l.getLastSyncTime(this.state.lastSyncTime);
                e = S.getString("UserSettingsPanel.SyncAddressBookSubtitle") + t
            }
            const t = "" !== e
              , i = o.Styles.createTextStyle({
                color: this.state.isRefreshDisabled ? this._themeColors.secondaryTextColor : P.Color.blue
            }, !1)
              , n = [w.noncollapsibleView, x.refreshButtonContainer, t ? x.refreshSyncContainerWithLastSyncTime : void 0]
              , r = o.createElement(u.default, {
                size: I.IconSize.size12,
                color: this.state.isRefreshDisabled ? this._themeColors.secondaryTextColor : P.Color.blue,
                icon: I.SkypeIcon.Refresh,
                title: S.getString("InAppWebBrowser.RefreshTitle"),
                accessibilityLabel: S.getString("SyncAddressBookDialog.RefreshContacts") + (e ? ", " + e : ""),
                titleStyle: [k.captionFontStyle(this._currentTheme), i, x.refreshButtonTitle],
                onPress: this._onRefreshPress,
                style: n,
                disabled: this.state.isRefreshDisabled
            })
              , a = o.createElement(o.View, {
                style: [x.subtitleContainer, t ? x.refreshSyncContainerWithLastSyncTime : void 0],
                accessibilityLabel: S.getString("SyncAddressBookDialog.SyncingContacts")
            }, o.createElement(o.View, {
                style: x.syncContainer
            }, o.createElement(N.SyncIndicator, {
                size: 15,
                color: P.Color.transparent,
                indicatorColor: this._themeColors.secondaryTextColor,
                largeIndicator: !0
            })), o.createElement(o.View, {
                style: x.syncContainer
            }, o.createElement(M.Caption, null, S.getString("UserSettingsPanel.Syncing"))))
              , c = this.state.isSyncingContacts ? a : r
              , d = A.isElectronOsx() && this.state.syncAddressBookEnabled ? o.createElement(o.View, {
                style: x.subtitleContainer
            }, o.createElement(M.Caption, {
                style: [T.styles.subtitleMediumSemiLarge, x.customCaptionStyle]
            }, e), o.createElement(o.View, {
                style: x.refreshSyncContainer
            }, c)) : void 0
              , g = S.getString("UserSettingsPanel.SyncAddressBook");
            return o.createElement(o.View, null, o.createElement(s, {
                key: "syncAddressBook",
                style: [T.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.syncAddressBookEnabled,
                accessibilityLabel: g + (e ? ", " + e : ""),
                onChange: this._onChangeSyncAddressBook
            }, o.createElement(o.View, {
                style: w.flexOne
            }, o.createElement(v.SwitchLabel, {
                title: g
            }), d)))
        }
    }
    t.default = D
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(36)
      , o = i(0)
      , s = i(102)
      , r = i(51)
      , a = i(10)
      , l = i(200)
      , c = i(2)
      , d = i(5)
      , u = i(4)
      , g = i(84)
      , h = i(103)
      , p = i(41)
      , m = i(18)
      , S = i(725);
    d.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsblockContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            overflow: "visible"
        })
    });
    class C extends r.default {
        constructor() {
            super(...arguments),
            this._buttonStyle = [h.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
            this._openSystemStartupSettings = ()=>{
                n.default.openSystemStartupSettings()
            }
        }
        _buildState(e, t) {
            const i = l.getAppSettings();
            return {
                autoStartEnabled: !!i && !!i.autoStartEnabled,
                launchMinimized: !!i && !!i.launchMinimized,
                onCloseKeepRunning: !!i && !!i.onCloseKeepRunning,
                isAutoStartSupported: !1,
                canControlAutoStart: !1
            }
        }
        render() {
            return null
        }
        _getAutoStartButton() {
            const e = u.getString("UserSettingsPanel.AutoStart")
              , t = m.getPlatformType();
            let i;
            return t === c.PlatformType.Linux ? i = u.getString("UserSettingsPanel.AutoStartDescriptionLinux") : t === c.PlatformType.Windows && (i = u.getString("UserSettingsPanel.AutoStartDescriptionWindows")),
            o.createElement(s, {
                key: "autoStartEnabled",
                style: this._buttonStyle,
                isOn: this.state.autoStartEnabled,
                accessibilityLabel: e,
                onChange: (e,t)=>this._toggleElectronAppSetting({
                    autoStartEnabled: t
                })
            }, o.createElement(g.SwitchLabel, {
                title: e,
                subtitle: i
            }))
        }
        _openAutoStartSettingsButton() {
            const e = u.getString("UserSettingsPanel.AutoStart");
            return o.createElement(S, {
                label: e,
                labelBottom: u.getString("UserSettingsPanel.AutoStartDescriptionWindows"),
                labelBottomSingleLine: !0,
                accessibilityLabel: e,
                treatAsLink: !0,
                accessoryIconMarginRight: 20
            }, o.createElement(p, {
                buttonSize: a.SXButtonSize.Small,
                buttonStyle: a.SXButtonStyle.ThemeStroke,
                title: u.getString("UserSettingsPanel.SettingsTitle"),
                accessibilityHidden: !0,
                allowTextWrap: !0,
                onPress: this._openSystemStartupSettings
            }))
        }
        _getLaunchMinimizedButton() {
            const e = u.getString("UserSettingsPanel.LaunchMinimized")
              , t = m.getPlatformType();
            let i;
            return t === c.PlatformType.Linux ? i = u.getString("UserSettingsPanel.LaunchMinimizedDescriptionLinux") : t === c.PlatformType.Windows && (i = u.getString("UserSettingsPanel.LaunchMinimizedDescriptionWindows")),
            o.createElement(s, {
                key: "launchMinimizedEnabled",
                style: this._buttonStyle,
                isOn: this.state.launchMinimized,
                accessibilityLabel: e,
                onChange: (e,t)=>this._toggleElectronAppSetting({
                    launchMinimized: t
                })
            }, o.createElement(g.SwitchLabel, {
                title: e,
                subtitle: i
            }))
        }
        _getOnCloseKeepRunningButton() {
            const e = u.getString("UserSettingsPanel.OnCloseKeepRunning")
              , t = u.getString("UserSettingsPanel.OnCloseKeepRunningDescription");
            return o.createElement(s, {
                key: "onCloseKeepRunning",
                style: this._buttonStyle,
                isOn: this.state.onCloseKeepRunning,
                accessibilityLabel: e,
                onChange: (e,t)=>this._toggleElectronAppSetting({
                    onCloseKeepRunning: t
                })
            }, o.createElement(g.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _toggleElectronAppSetting(e) {
            l.changeAppSettings(e)
        }
    }
    t.default = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(2951)
      , s = i(50)
      , r = i(1698)
      , a = i(2952)
      , l = i(1699)
      , c = i(1700)
      , d = i(4)
      , u = i(1696)
      , g = i(2954);
    class h extends s.default {
        static getHeaderText() {
            return d.getString("UserSettingsPanel.GeneralTitle")
        }
        render() {
            return n.createElement(n.View, {
                style: this.props.style
            }, n.createElement(a.default, null), n.createElement(u.default, null), n.createElement(l.default, null), n.createElement(r.default, null), n.createElement(c.default, null), n.createElement(o.default, null), n.createElement(g.default, null))
        }
        _getHeaderText(e) {
            return h.getHeaderText()
        }
    }
    t.default = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(70)
      , o = i(0)
      , s = i(102)
      , r = i(860)
      , a = i(1158)
      , l = i(2)
      , c = i(3)
      , d = i(190)
      , u = i(4)
      , g = i(32)
      , h = i(84)
      , p = i(103)
      , m = i(12);
    class S extends m.default {
        constructor() {
            super(...arguments),
            this._onToggleBingLocation = (e,t)=>{
                t ? r.displayModal(this._getRootViewId(), {
                    onModalClosed: this._onBingConsentModalClosed
                }) : (c.track(new a.BingPermissionsInteractionEvent(l.BingPermissionsEntryPoint.BingSettings,n.PermissionStatus.Denied)),
                g.default.setUserPreferencesLocal({
                    bingLocationConsentGranted: !1,
                    locationStoreLastPromptTime: Date.now()
                }))
            }
            ,
            this._onShareLocationWithBingRef = e=>{
                this._shareLocationWithBingRef = e || void 0
            }
            ,
            this._onBingConsentModalClosed = ()=>{
                this._shareLocationWithBingRef && this._shareLocationWithBingRef.focusToggle()
            }
        }
        _buildState(e, t) {
            return {
                bingEnabled: !!d.default.getBingIntegration(),
                bingLocationEnabled: !!g.default.getUserPreferencesLocal().bingLocationConsentGranted
            }
        }
        render() {
            const e = u.getString("UserSettingsPanel.BingLocation");
            return this.state.bingEnabled ? o.createElement(s, {
                key: "bingLocationEnabled",
                ref: this._onShareLocationWithBingRef,
                style: [p.styles.controlRow, this._themeStyles.dividerBorderColorStyle],
                isOn: this.state.bingLocationEnabled,
                accessibilityLabel: e,
                onChange: this._onToggleBingLocation
            }, o.createElement(h.SwitchLabel, {
                title: e
            })) : null
        }
    }
    t.default = S
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(6)
      , r = i(51)
      , a = i(42)
      , l = i(10)
      , c = i(588)
      , d = i(691)
      , u = i(887)
      , g = i(281)
      , h = i(2)
      , p = i(3)
      , m = i(5)
      , S = i(108)
      , C = i(4)
      , y = i(32)
      , f = i(62)
      , _ = i(17)
      , b = i(84)
      , v = i(103)
      , T = i(394)
      , P = i(66)
      , A = i(8)
      , k = i(131)
      , I = i(14)
      , w = i(15)
      , N = i(53)
      , M = i(90)
      , E = m.lazyProperties({
        cortanaNotebookSettingContainer: ()=>n.Styles.createViewStyle({
            marginVertical: 2,
            flexDirection: "column",
            justifyContent: "flex-start"
        }),
        cortanaNotebookSpinner: ()=>n.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            alignItems: "center",
            justifyContent: "center"
        })
    });
    class x extends r.default {
        constructor() {
            super(...arguments),
            this._getCortanaCaptionWithAccessibility = (e,t)=>n.createElement(n.View, {
                accessibilityLabel: t.label,
                accessibilityTraits: t.traits,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes,
                onPress: this._onCortanaLearnMore
            }, n.createElement(w.Caption, {
                style: v.styles.subtitleMediumSemiLarge
            }, e)),
            this._onToggleRef = e=>{
                this._toggleRef = e || void 0
            }
            ,
            this._onToggleSuggestions = (e,t)=>{
                p.track(new g.CortanaActionsEvent(this.state.cortanaOptedIn,t ? h.CortanaActionType.EnableSuggestions : h.CortanaActionType.DisableSuggestions)),
                T.setSuggestionsEnabled(t)
            }
            ,
            this._onCortanaLearnMore = ()=>{
                S.openUrlWithParams({
                    origin: h.BrowserOrigin.CortanaSettingsDescription,
                    url: s.default.getConfigSettingsNoSubscription().cortana.learnMoreUrl,
                    componentContext: this._getContext()
                })
            }
            ,
            this._onToggleCortana = (e,t)=>{
                p.track(new g.CortanaActionsEvent(this.state.cortanaOptedIn,t ? h.CortanaActionType.EnablePersonalization : h.CortanaActionType.DisablePersonalization)),
                t ? (p.track(new g.CortanaInteractionEvent(h.CortanaEntryPoint.CortanaSettings)),
                d.navigateToCortanaConversation(h.CortanaEntryPoint.CortanaSettings, void 0, !0)) : (this.setState({
                    showCortanaSpinner: !0
                }),
                u.disableCortanaAndRemoveUserTokens().always(()=>{
                    this.isComponentMounted() && this.setState({
                        showCortanaSpinner: !1
                    })
                }
                ))
            }
            ,
            this._onNotebookLinkPressed = ()=>{
                this.state.cortanaAccessToken && !this.state.isBingAuthCookieInSync || c.authorize(void 0, !0, h.CortanaAuthOrigin.NotebookLink).then(()=>{
                    this.state.notebookUrl && this.state.cortanaAccessToken ? _.navigateToDesktopCortanaNotebook(this.state.notebookUrl, this.state.cortanaAccessToken, this._getContext()) : this.state.cortanaAccessToken
                }
                )
            }
        }
        _buildState(e, t) {
            const i = y.default.getUserPreferencesLocal()
              , n = N.default.getCortanaToken();
            return {
                ecsCortanaEnabled: s.default.getS4LCortanaFeatures().enabled,
                cortanaAccessToken: n ? n.accessToken : void 0,
                cortanaOptedIn: f.default.getCortanaOptedIn(),
                ecsSuggestionsConsentEnabled: s.default.getS4LCortanaFeatures().suggestionsConsentEnabled,
                isBingAuthCookieInSync: !!i.isBingAuthCookieInSync,
                notebookUrl: s.default.getCortanaNotebookUrl(),
                suggestionsEnabled: T.getSuggestionsEnabled()
            }
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this._toggleRef && !this.state.showCortanaSpinner && t.showCortanaSpinner && this._toggleRef.focusToggle()
        }
        render() {
            if (!this.state.ecsCortanaEnabled && !this.state.ecsSuggestionsConsentEnabled)
                return null;
            const e = [];
            e.push(n.createElement(b.SectionTitle, {
                key: "cortana",
                title: C.getString("UserSettingsPanel.CortanaUpper")
            }));
            const t = C.getString("UserSettingsPanel.CortanaLearnMoreLink")
              , i = n.createElement(k.default, {
                url: s.default.getConfigSettingsNoSubscription().cortana.learnMoreUrl,
                onPress: this._onCortanaLearnMore,
                blue: !0,
                key: "cortanaLearnMoreLink "
            }, t);
            if (this.state.ecsSuggestionsConsentEnabled) {
                const s = C.getString("UserSettingsPanel.Suggestions")
                  , r = C.getParts("UserSettingsPanel.SuggestionsDescription", {
                    learnMoreLink: i
                })
                  , l = a.default.linkAccessibilityInfo(C.getString("UserSettingsPanel.SuggestionsDescription", {
                    learnMoreLink: t
                }))
                  , c = this._getCortanaCaptionWithAccessibility(r, l)
                  , d = a.default.combinedAccessibilityLabel(s, C.getString("UserSettingsPanel.SuggestionsDescription", {
                    learnMoreLink: ""
                }));
                e.push(n.createElement(n.View, {
                    key: "suggestionsOnOffPanel"
                }, n.createElement(o, {
                    key: "suggestionsEnabled",
                    style: [v.styles.controlRowWithDescription, this._themeStyles.dividerBorderColorStyle],
                    isOn: this.state.suggestionsEnabled,
                    accessibilityLabel: d,
                    onChange: this._onToggleSuggestions
                }, n.createElement(n.View, {
                    style: I.flexOne
                }, n.createElement(w.RowTitle, {
                    style: v.styles.switchTitleMediumSemiLarge
                }, s))), c))
            }
            if (this.state.ecsCortanaEnabled) {
                const s = C.getString("UserSettingsPanel.CortanaPersonalization")
                  , r = C.getParts("UserSettingsPanel.CortanaPersonalizationDescription", {
                    learnMoreLink: i
                })
                  , c = a.default.linkAccessibilityInfo(C.getString("UserSettingsPanel.CortanaPersonalizationDescription", {
                    learnMoreLink: t
                }))
                  , d = this._getCortanaCaptionWithAccessibility(r, c);
                if (e.push(n.createElement(n.View, {
                    key: "cortanaOnOffPanel"
                }, n.createElement(o, {
                    key: "cortanaOptedIn",
                    ref: this._onToggleRef,
                    style: [v.styles.controlRowWithDescription, this._themeStyles.dividerBorderColorStyle],
                    isOn: this.state.cortanaOptedIn,
                    accessibilityLabel: s,
                    onChange: this._onToggleCortana,
                    showSpinner: this.state.showCortanaSpinner
                }, n.createElement(n.View, {
                    style: I.flexOne
                }, n.createElement(w.RowTitle, {
                    style: v.styles.switchTitleMediumSemiLarge
                }, C.getString("UserSettingsPanel.CortanaPersonalization")))), d)),
                this.state.cortanaOptedIn) {
                    const t = this.state.cortanaAccessToken && !this.state.isBingAuthCookieInSync ? n.createElement(n.View, {
                        style: E.cortanaNotebookSpinner
                    }, n.createElement(P.default, {
                        size: l.SXActivityIndicatorSize.Small,
                        tintColor: A.Color.gray300,
                        useRXIndicator: !0
                    })) : null;
                    e.push(n.createElement(n.View, {
                        style: E.cortanaNotebookSettingContainer,
                        key: "cortanaAdvancedSettingsText"
                    }, n.createElement(M.WideButton, {
                        label: C.getString("UserSettingsPanel.NotebookLink"),
                        labelStyle: v.styles.titleMediumSemiLarge,
                        onPressed: this._onNotebookLinkPressed,
                        hideDivider: !0,
                        labelBottom: C.getString("UserSettingsPanel.NotebookDescription")
                    }), t))
                }
            }
            return n.createElement(n.View, null, e)
        }
    }
    t.default = x
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43)
      , s = i(4)
      , r = i(17)
      , a = i(103)
      , l = (i(868),
    i(90));
    class c extends o.default {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                r.navigateToEffectsPrivacy(this._getContext())
            }
        }
        _buildState(e, t) {
            return {
                ecsEffectsEnabled: !1
            }
        }
        render() {
            return this.state.ecsEffectsEnabled ? n.createElement(l.WideButton, {
                key: "effects",
                label: s.getString("CapturePreview.EffectsTitle"),
                labelStyle: a.styles.titleMediumSemiLarge,
                onPressed: this._onPress
            }) : null
        }
    }
    t.default = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(1688)
      , s = i(1189)
      , r = i(50)
      , a = i(2956)
      , l = i(5)
      , c = i(4)
      , d = i(84)
      , u = l.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            paddingBottom: 20
        })
    });
    class g extends r.default {
        static getHeaderText() {
            return c.getString("UserSettingsPanel.HelpAndAboutTitle")
        }
        render() {
            return n.createElement(n.View, {
                style: [u.container, this.props.style]
            }, n.createElement(s.default, {
                isPartOfOtherPanel: !0
            }), n.createElement(a.default, {
                buttonStyles: this.props.buttonStyles
            }), n.createElement(d.SectionTitle, {
                title: c.getString("UserSettingsPanel.AboutTitleUpper")
            }), n.createElement(o.default, {
                buttonStyles: this.props.buttonStyles
            }))
        }
        _getHeaderText(e) {
            return g.getHeaderText()
        }
    }
    t.default = g
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(6)
      , r = i(50)
      , a = i(61)
      , l = i(42)
      , c = i(77)
      , d = i(2)
      , u = i(3)
      , g = i(124)
      , h = i(5)
      , p = i(4)
      , m = i(32)
      , S = i(84)
      , C = i(14)
      , y = i(15)
      , f = i(9);
    var _;
    !function(e) {
        e[e.General = 0] = "General",
        e[e.Messaging = 1] = "Messaging",
        e[e.Calling = 2] = "Calling",
        e[e.Accessibility = 3] = "Accessibility",
        e[e.Global = 4] = "Global"
    }(_ || (_ = {}));
    const b = [{
        category: _.General,
        shortcuts: [d.KeyboardShortcut.OpenKeyboardShortcuts, d.KeyboardShortcut.OpenMainWindow, d.KeyboardShortcut.CloseSplitViewConversation, d.KeyboardShortcut.OpenAppSettings, d.KeyboardShortcut.OpenHelpInABrowser, d.KeyboardShortcut.SendFeedback, d.KeyboardShortcut.OpenThemePicker, d.KeyboardShortcut.ToggleTheme, d.KeyboardShortcut.NavigateToRecents, d.KeyboardShortcut.OpenNotificationPanel, d.KeyboardShortcut.Search, d.KeyboardShortcut.NavigateToNextConversation, d.KeyboardShortcut.NavigateToPreviousConversation, d.KeyboardShortcut.ZoomIn, d.KeyboardShortcut.ZoomOut, d.KeyboardShortcut.ResetZoom, d.KeyboardShortcut.Quit]
    }, {
        category: _.Messaging,
        shortcuts: [d.KeyboardShortcut.StartNewConversation, d.KeyboardShortcut.NewGroup, d.KeyboardShortcut.OpenContactsPanel, d.KeyboardShortcut.ShowConversationProfile, d.KeyboardShortcut.AddPeopleToConversation, d.KeyboardShortcut.SendFile, d.KeyboardShortcut.ToggleGallery, d.KeyboardShortcut.MarkAsUnread, d.KeyboardShortcut.EditMessage, d.KeyboardShortcut.FocusMessageComposer, d.KeyboardShortcut.EnableMultipleSelectMessages, d.KeyboardShortcut.ArchiveConversation, d.KeyboardShortcut.SearchInConversation]
    }, {
        category: _.Calling,
        shortcuts: [d.KeyboardShortcut.AcceptIncomingCall, d.KeyboardShortcut.HangupOrRejectCall, d.KeyboardShortcut.StartVideoCall, d.KeyboardShortcut.StartAudioCall, d.KeyboardShortcut.ToggleMicrophone, d.KeyboardShortcut.ToggleCamera, d.KeyboardShortcut.ResizeVideoPreview, d.KeyboardShortcut.OpenDialpad, d.KeyboardShortcut.AddPeopleToCall, d.KeyboardShortcut.TakeCallSnapshot]
    }, {
        category: _.Accessibility,
        shortcuts: [d.KeyboardShortcut.AnnounceMuteStatus, d.KeyboardShortcut.AnnounceSelfVideoOnOffStatus]
    }]
      , v = h.lazyProperties({
        row: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between",
            marginVertical: 8
        }),
        rowWithKeyViews: ()=>o.Styles.createViewStyle({
            marginVertical: 2,
            paddingBottom: 6,
            alignItems: "center"
        }),
        innerRow: ()=>o.Styles.createViewStyle({
            marginHorizontal: 12
        }),
        sectionTitleRow: ()=>o.Styles.createViewStyle({
            marginHorizontal: 12,
            paddingBottom: 8,
            paddingTop: 24
        }),
        firstSectionTitleRow: ()=>o.Styles.createViewStyle({
            paddingTop: 12
        }),
        keyBase: ()=>o.Styles.createTextStyle({
            margin: 1
        }),
        keyWrapper: ()=>o.Styles.createTextStyle({
            paddingVertical: 8
        }),
        keyView: ()=>o.Styles.createTextStyle({
            borderWidth: 1,
            borderRadius: 5,
            margin: 1,
            textAlign: "center",
            paddingVertical: 6,
            paddingHorizontal: 8
        }),
        dividerStyle: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            bottom: 0,
            height: 1
        })
    });
    class T extends r.default {
        constructor() {
            super(...arguments),
            this._handleKeyboardCommand = ()=>{
                const e = f.newCauseId();
                return u.log(d.LogTraceArea.Navigation, "KeyboardShortcutsPanel._handleKeyboardCommand causeId: " + e),
                this._goBack(e),
                !0
            }
            ,
            this._onContainerLayout = e=>{
                this.state.viewWidth !== e.width && this.setState({
                    viewWidth: e.width
                })
            }
            ,
            this._renderShortcutsGroup = (e,t,i)=>{
                const s = n.map(e.shortcuts, e=>this._renderShortcutRow(e, i));
                if (s.length > 0) {
                    let i;
                    switch (e.category) {
                    case _.General:
                        i = p.getString("KeyboardShortcuts.GeneralCategoryHeader");
                        break;
                    case _.Messaging:
                        i = p.getString("KeyboardShortcuts.MessagingCategoryHeader");
                        break;
                    case _.Calling:
                        i = p.getString("KeyboardShortcuts.CallingCategoryHeader");
                        break;
                    case _.Accessibility:
                        i = p.getString("KeyboardShortcuts.AccessibilityCategoryHeader");
                        break;
                    case _.Global:
                        i = p.getString("KeyboardShortcuts.GlobalCategoryHeader");
                        break;
                    default:
                        i = f.switchStatementExhaustiveChecking(e.category)
                    }
                    const n = [v.sectionTitleRow];
                    return 0 === t && n.push(v.firstSectionTitleRow),
                    [o.createElement(S.SectionTitle, {
                        key: "title" + e.category,
                        title: i,
                        titleStyles: n
                    }), ...s]
                }
            }
            ,
            this._renderShortcutRow = (e,t)=>{
                if (!this.state.enableKeyboardNavigationBetweenConversations && (e === d.KeyboardShortcut.NavigateToNextConversation || e === d.KeyboardShortcut.NavigateToPreviousConversation))
                    return;
                const i = g.default.shortcutListItemForShortcut(e);
                return i ? this._renderRow(e.toString(), i.action, i.command, i.commandParts, i.accessibleCommand, t, !0) : void 0
            }
        }
        static getHeaderText() {
            return p.getString("KeyboardShortcuts.Title2")
        }
        _buildState(e, t) {
            const i = {
                enableKeyboardNavigationBetweenConversations: !this._getContext().isPresentedInSplitView && s.default.getS4LMessagingFeatures().enableKeyboardNavigationBetweenConversations,
                showGlobalHotkeySection: a.UICapabilities.systemHotKeysSupported() && s.default.getS4LNativePlatformsEcsConfig().enableSystemHotKey && !!m.default.getUserPreferencesLocal().enableSystemHotKeys,
                enableScreenSharingToolbar: s.default.getS4LCMCFeatures().enableScreenSharingToolbar
            };
            return t && (i.viewWidth = 0),
            i
        }
        componentDidMount() {
            super.componentDidMount(),
            g.default.addHandler(d.KeyboardShortcut.OpenKeyboardShortcuts, this._handleKeyboardCommand)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            g.default.removeHandler(d.KeyboardShortcut.OpenKeyboardShortcuts, this._handleKeyboardCommand)
        }
        render() {
            let e;
            if (this.state.viewWidth) {
                const t = o.Styles.createViewStyle({
                    width: this.state.viewWidth / 2 - 24
                }, !1)
                  , i = !b.some(e=>e.category === _.Global);
                if (this.state.showGlobalHotkeySection && i) {
                    let e = [d.KeyboardShortcut.AcceptIncomingCall, d.KeyboardShortcut.HangupOrRejectCall, d.KeyboardShortcut.ToggleMicrophone];
                    this.state.enableScreenSharingToolbar && e.push(d.KeyboardShortcut.FocusScreenSharingToolbar),
                    b.push({
                        category: _.Global,
                        shortcuts: e
                    })
                } else
                    this.state.showGlobalHotkeySection || i || b.pop();
                e = o.createElement(o.View, null, n.map(b, (e,i)=>this._renderShortcutsGroup(e, i, t)))
            }
            return o.createElement(o.View, {
                style: [C.flexOne, this.props.style],
                onLayout: this._onContainerLayout
            }, e)
        }
        _renderRow(e, t, i, s, r, a, d, u=!1) {
            const g = r ? l.default.combinedAccessibilityLabel(t, r, ". ") : void 0
              , h = g ? o.Types.ImportantForAccessibility.NoHideDescendants : void 0
              , p = [v.row];
            let m, S;
            {
                S = o.createElement(c, {
                    style: v.dividerStyle,
                    marginLeft: 12,
                    marginRight: 12
                }),
                p.push(v.rowWithKeyViews);
                const e = o.Styles.createViewStyle({
                    borderColor: this._themeColors.secondaryTextColor
                }, !1)
                  , t = n.map(s, (t,i)=>o.createElement(y.BodyText, {
                    size: d ? y.BodyTextSize.SmallDeprecated : void 0,
                    style: [v.keyBase, v.keyView, e],
                    key: "key" + i
                }, t));
                m = o.createElement(o.Text, {
                    style: [v.keyBase, v.keyWrapper]
                }, t)
            }
            return o.createElement(o.View, {
                key: e,
                style: p,
                accessibilityLabel: g,
                ariaRoleDescription: g ? "" : void 0,
                tabIndex: g ? 0 : void 0,
                importantForAccessibility: u ? o.Types.ImportantForAccessibility.NoHideDescendants : void 0
            }, o.createElement(o.View, {
                style: [v.innerRow, a],
                importantForAccessibility: h
            }, o.createElement(y.BodyText, {
                size: d ? y.BodyTextSize.SmallDeprecated : void 0
            }, t)), o.createElement(o.View, {
                style: [v.innerRow, a],
                importantForAccessibility: h
            }, m), S)
        }
        _getHeaderText(e) {
            return T.getHeaderText()
        }
    }
    t.default = T
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(275);
    class s extends o.OnboardingDialogEvent {
        constructor() {
            super(...arguments),
            this._didPressNextOnValueProp = !1,
            this._didHavePermission = !1,
            this._didPromptBefore = !1,
            this._didRequestPermission = !1,
            this._didGrantPermission = !1,
            this._didStartSync = !1,
            this._didVisitPrivacyStatement = !1,
            this._didSeeLearnMoreButton = !1,
            this._didVisitLearnMorePopup = !1
        }
        getEventName() {
            return "people_syncAddressBookDialog"
        }
        markDidPressNextOnValueProp() {
            this._didPressNextOnValueProp = !0
        }
        setInitialPermission(e) {
            this._didHavePermission = e
        }
        setDidPromptBefore(e) {
            this._didPromptBefore = e
        }
        markDidRequestPermission() {
            this._didRequestPermission = !0
        }
        setDidGrantPermission(e) {
            this._didGrantPermission = e
        }
        markDidStartSync() {
            this._didStartSync = !0
        }
        markDidVisitPrivacyStatement() {
            this._didVisitPrivacyStatement = !0
        }
        markDidSeeLearnMoreButton() {
            this._didSeeLearnMoreButton = !0
        }
        markDidVisitLearnMorePopup() {
            this._didVisitLearnMorePopup = !0
        }
        getAttributes() {
            return n.extend({}, super.getAttributes(), this.getOnboardingAttributes(), {
                DidPressNextOnValueProp: this._didPressNextOnValueProp,
                DidHavePermission: this._didHavePermission,
                DidPromptBefore: this._didPromptBefore,
                DidRequestPermission: this._didRequestPermission,
                DidGrantPermission: this._didGrantPermission,
                DidStartSync: this._didStartSync,
                DidVisitPrivacyStatement: this._didVisitPrivacyStatement,
                DidSeeLearnMoreButton: this._didSeeLearnMoreButton,
                DidVisitLearnMorePopup: this._didVisitLearnMorePopup
            })
        }
    }
    t.SyncAddressBookDialogEvent = s;
    class r extends o.OnboardingDialogEvent {
        constructor() {
            super(...arguments),
            this._didVisitPrivacyStatement = !1
        }
        getEventName() {
            return "people_peopleyoumayknownoticedialog"
        }
        markDidVisitPrivacyStatement() {
            this._didVisitPrivacyStatement = !0
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                DidVisitPrivacyStatement: this._didVisitPrivacyStatement
            })
        }
    }
    t.PeopleYouMayKnowNoticeDialogEvent = r
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(102)
      , r = i(50)
      , a = i(2958)
      , l = i(160)
      , c = i(2)
      , d = i(80)
      , u = i(40)
      , g = i(3)
      , h = i(5)
      , p = i(4)
      , m = i(54)
      , S = i(17)
      , C = i(22)
      , y = i(232)
      , f = i(862)
      , _ = i(321)
      , b = i(1177)
      , v = i(84)
      , T = i(103)
      , P = i(275)
      , A = i(94)
      , k = i(23)
      , I = i(11)
      , w = i(14)
      , N = i(2960)
      , M = i(2961)
      , E = i(109)
      , x = i(92)
      , D = i(135)
      , L = i(9)
      , R = i(388)
      , B = i(696)
      , O = "light"
      , F = "dark"
      , V = "lightAccessible"
      , U = "darkAccessible"
      , H = "system"
      , W = h.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            paddingBottom: 4
        }),
        title: ()=>o.Styles.createTextStyle({
            paddingTop: 16,
            paddingBottom: 8
        }),
        colorPicker: ()=>o.Styles.createViewStyle({
            marginBottom: 4
        }),
        rowStyle: ()=>o.Styles.createViewStyle({
            minHeight: 50
        }),
        previewLabelWrapper: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between"
        }),
        flipIcon: ()=>o.Styles.createViewStyle({
            width: I.IconSize.default,
            height: I.IconSize.default
        }),
        noBorder: ()=>o.Styles.createViewStyle({
            borderBottomWidth: 0
        })
    });
    class z extends r.default {
        constructor() {
            super(...arguments),
            this._onModeSelected = e=>{
                this._telemetryEvent && this._telemetryEvent.markDidToggleLightDarkTab();
                const t = D.isAccessibleTheme(this.state.currentTheme);
                switch (e) {
                case O:
                    t ? this._setTheme(E.Theme.Delphi, !1) : this.state.isDarkTheme ? this._onLightDarkTogglePressed() : this.state.useSystemTheme && this._setTheme(this._currentTheme, !1);
                    break;
                case F:
                    t ? this._setTheme(E.Theme.DelphiDark, !1) : this.state.isDarkTheme ? this.state.useSystemTheme && this._setTheme(this._currentTheme, !1) : this._onLightDarkTogglePressed();
                    break;
                case H:
                    const e = x.getSystemTheme(t);
                    this._setTheme(e, !0);
                    break;
                case V:
                    this._setTheme(E.Theme.Accessible);
                    break;
                case U:
                    this._setTheme(E.Theme.AccessibleDark)
                }
            }
            ,
            this._onThemeColorSelected = e=>{
                const t = L.newCauseId();
                g.log(c.LogTraceArea.Theme, "ThemeDialog._onThemeColorSelected causeId: " + t);
                const i = z._themeColorOptionToTheme(e, D.isDarkTheme(this.state.currentTheme))
                  , n = N.default.themeColorOptionToColorInfo(e);
                i !== this.state.currentTheme && this._setTheme(i, this.state.useSystemTheme);
                const o = e=>{
                    this._remoteUserAppearanceTelemetryEvent && this._remoteUserAppearanceTelemetryEvent.setDidUpdateColorInfo(),
                    this.state.updateImmediately ? m.setUserColor(e, t) : this.setState({
                        userColor: e
                    })
                }
                ;
                n ? n !== this.state.userColor && o(n) : o(this.state.initialUserColor)
            }
            ,
            this._isFlippedSelected = ()=>{
                this._remoteUserAppearanceTelemetryEvent && this._remoteUserAppearanceTelemetryEvent.setDidToggleFlipBubbleColors();
                const e = !this.state.isFlipped
                  , t = L.newCauseId();
                g.log(c.LogTraceArea.Theme, "ThemeDialog._isFlippedSelected flipped: " + e + " causeId: " + t);
                const i = z._flipAvailableForTheme(this.state.currentTheme) && e;
                this.state.updateImmediately ? x.setFlipBubbleColors(i) : this.setState({
                    isFlipped: i
                })
            }
            ,
            this._onCompactListModeChange = ()=>{
                this._remoteUserAppearanceTelemetryEvent && this._remoteUserAppearanceTelemetryEvent.setDidUpdateRecentsRowSize()
            }
            ,
            this._onSplitViewChange = (e,t)=>{
                if (this.state.splitViewEnabled !== t) {
                    const e = L.newCauseId();
                    B.default.toggleSplitView(e)
                }
            }
            ,
            this._applyThemeChanges = ()=>{
                const e = L.newCauseId();
                g.log(c.LogTraceArea.Theme, "ThemeDialog._commitChanges causeId: " + e),
                this.state.updateImmediately || (x.setTheme(this.state.currentTheme, this.state.useSystemTheme),
                m.setUserColor(this.state.userColor, e),
                x.setFlipBubbleColors(z._flipAvailableForTheme(this.state.currentTheme) && this.state.isFlipped),
                S.navigateBack(e, this._getContext()),
                this._sendTelemetryEvent(l.DialogNavExit.Submit),
                o.Accessibility.announceForAccessibility(p.getString("ColorThemeDialog.ThemeAppliedAnnouncement")))
            }
        }
        static getHeaderText() {
            return p.getString("UserSettingsPanel.AppearanceButton")
        }
        _buildState(e, t) {
            const i = {
                updateImmediately: this._isPresentedInDesktopModal(),
                extraCompactLayoutEnabled: _.default.extraCompactLayoutEnabled(),
                lastMessageAuthorAvatarEnabled: _.default.lastMessageAuthorAvatarEnabled(),
                systemThemeEnabled: D.systemThemeEnabledAndChanges()
            };
            return (t || i.updateImmediately) && (i.isDarkTheme = x.useDarkTheme(),
            i.useSystemTheme = x.useSystemTheme(),
            i.currentTheme = x.colorTheme(),
            i.userColor = m.getColorInfo(!0),
            i.isFlipped = x.flipBubbleColors(),
            i.splitViewEnabled = C.default.isUsingSplitView(),
            i.splitViewSupported = R.default.isSplitViewSupported()),
            t && (i.initialTheme = i.currentTheme,
            i.initialUserColor = i.userColor,
            i.initialIsFlipped = i.isFlipped,
            i.initialUseSystemTheme = i.useSystemTheme,
            this._setupTelemetryEvents(e)),
            i
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i);
            const n = D.isDarkTheme(this.state.currentTheme);
            if (n !== D.isDarkTheme(t.currentTheme)) {
                const e = p.getString(n ? "ColorThemeDialog.SelectedDarkToggleTitleAccessible" : "ColorThemeDialog.SelectedLightToggleTitleAccessible");
                o.Accessibility.announceForAccessibility(e)
            }
            const s = D.isAccessibleTheme(this.state.currentTheme);
            if (s !== D.isAccessibleTheme(t.currentTheme)) {
                const e = p.getString(s ? "ColorThemeDialog.SelectedHighContrastTitleAccessible" : "ColorThemeDialog.DeselectedHighContrastTitleAccessible");
                o.Accessibility.announceForAccessibility(e)
            }
            if (!this.state.updateImmediately && this.props.setRightButton && (this.state.currentTheme !== t.currentTheme || this.state.userColor !== t.userColor || this.state.isFlipped !== t.isFlipped || this.state.useSystemTheme !== t.useSystemTheme)) {
                const e = this.state.currentTheme !== this.state.initialTheme || this.state.useSystemTheme !== this.state.initialUseSystemTheme || this.state.userColor !== this.state.initialUserColor || this.state.isFlipped !== this.state.initialIsFlipped ? {
                    text: p.getString("Global.ApplyButtonTitle"),
                    onPress: this._applyThemeChanges
                } : void 0;
                this.props.setRightButton(e)
            }
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            x.setPreviewTheme(void 0),
            this._sendTelemetryEvent(l.DialogNavExit.CancelOrBack)
        }
        _setupTelemetryEvents(e) {
            this._telemetryEvent = new P.ThemeDialogEvent(e.origin),
            this._remoteUserAppearanceTelemetryEvent = new b.RemoteUserAppearanceTelemetryEvent
        }
        _getHeaderText(e) {
            return z.getHeaderText()
        }
        _componentId() {
            return "ThemeDialogV2"
        }
        _onLightDarkTogglePressed() {
            this._setTheme(D.matchingLightOrDarkTheme(this.state.currentTheme), !1)
        }
        _setTheme(e, t) {
            const i = !n.isUndefined(t);
            if (this._remoteUserAppearanceTelemetryEvent && (e !== this.state.currentTheme && this._remoteUserAppearanceTelemetryEvent.setDidUpdateColorTheme(),
            t && this._remoteUserAppearanceTelemetryEvent.setDidToggleSystemTheme()),
            this.state.updateImmediately)
                x.setTheme(e, !!t);
            else {
                const n = {
                    currentTheme: e,
                    isDarkTheme: D.isDarkTheme(e)
                };
                i && (n.useSystemTheme = !!t),
                this.setState(n),
                x.setPreviewTheme(e)
            }
            this._updateStatusBarStyle(A.mergeStyles([A.createBarStyle(this._themeColors.defaultStatusBarTheme), A.createBackgroundColorStyle(this._themeColors.defaultStatusBarBackgroundColor, !0)]))
        }
        _sendTelemetryEvent(e) {
            if (this._telemetryEvent) {
                this._telemetryEvent.setExit(e);
                const t = e === l.DialogNavExit.Submit || this.state.updateImmediately;
                this.state.initialTheme !== this.state.currentTheme && t && this._telemetryEvent.markDidSelectNewTheme(),
                this._telemetryEvent.setFinalTheme(t ? this.state.currentTheme : this.state.initialTheme),
                y.default.track(this._telemetryEvent),
                this._telemetryEvent = void 0
            }
            this._remoteUserAppearanceTelemetryEvent && (g.track(this._remoteUserAppearanceTelemetryEvent),
            this._remoteUserAppearanceTelemetryEvent = void 0)
        }
        render() {
            let e;
            const t = z._flipAvailableForTheme(this.state.currentTheme);
            t && (e = o.createElement(u.default, {
                icon: I.SkypeIcon.PreviousNext,
                style: void 0,
                size: I.IconSize.size18,
                color: this._themeColors.secondaryTextColor,
                hoverColor: this._themeColors.iconHoverColor,
                title: p.getString("ColorThemeDialog.ReverseThemeTitle"),
                onPress: this._isFlippedSelected
            }));
            let i = o.createElement(v.SectionTitle, {
                key: "previewTitle",
                title: p.getString("ColorThemeDialog.PreviewUpper"),
                titleStyles: W.title
            });
            e && (i = o.createElement(o.View, {
                style: W.previewLabelWrapper
            }, i, e));
            const r = o.createElement(v.SectionTitle, {
                key: "colorTitle",
                title: p.getString("ColorThemeDialog.ColorUpper"),
                titleStyles: W.title
            })
              , l = o.createElement(v.SectionTitle, {
                key: "themeTitle",
                title: p.getString("ColorThemeDialog.ModesUpper"),
                titleStyles: W.title
            })
              , c = o.createElement(v.SectionTitle, {
                key: "accessibleThemeTitle",
                title: p.getString("ColorThemeDialog.AccessibleModesUpper"),
                titleStyles: W.title
            })
              , g = this.state.extraCompactLayoutEnabled || this.state.lastMessageAuthorAvatarEnabled ? o.createElement(a.default, {
                titleStyles: W.title,
                hideBottomBorder: !0,
                onChangeListMode: this._onCompactListModeChange
            }) : void 0
              , h = this.state.splitViewSupported ? o.createElement(v.SectionTitle, {
                key: "splitViewTitle",
                title: p.getString("ColorThemeDialog.SplitViewUpper"),
                titleStyles: W.title
            }) : void 0
              , m = this.state.splitViewSupported ? o.createElement(s, {
                style: [T.styles.controlRow, W.noBorder],
                key: "enableCompactLayout",
                isOn: this.state.splitViewEnabled,
                accessibilityLabel: p.getString("ColorThemeDialog.EnableSplitView"),
                onChange: this._onSplitViewChange
            }, o.createElement(v.SwitchLabel, {
                title: p.getString("ColorThemeDialog.EnableSplitView")
            })) : void 0
              , S = n.compact([{
                key: O,
                text: p.getString("ColorThemeDialog.LightToggleTitle")
            }, {
                key: F,
                text: p.getString("ColorThemeDialog.DarkToggleTitle")
            }, this.state.systemThemeEnabled ? {
                key: H,
                text: p.getString("ColorThemeDialog.SystemModeLabel")
            } : void 0])
              , C = D.isAccessibleTheme(this.state.currentTheme)
              , y = C ? void 0 : this.state.useSystemTheme ? H : this.state.isDarkTheme ? F : O
              , _ = o.createElement(f.default, {
                radioButtons: S,
                selectedKey: y,
                rowStyle: W.rowStyle,
                textStyle: k.rowTitleFontStyle(this._currentTheme),
                dividerType: f.DividerType.Between,
                disableSelectionAnimation: !0,
                onSelected: this._onModeSelected,
                fullWidth: !0
            })
              , b = n.compact([{
                key: V,
                text: p.getString("ColorThemeDialog.HighContrastLight")
            }, D.isAccessibleTheme(E.Theme.AccessibleDark) ? {
                key: U,
                text: p.getString("ColorThemeDialog.HighContrastDark")
            } : void 0])
              , P = C ? this.state.isDarkTheme ? U : V : void 0
              , A = o.createElement(f.default, {
                radioButtons: b,
                selectedKey: P,
                rowStyle: W.rowStyle,
                textStyle: k.rowTitleFontStyle(this._currentTheme),
                dividerType: f.DividerType.Between,
                disableSelectionAnimation: !0,
                onSelected: this._onModeSelected,
                fullWidth: !0
            })
              , x = o.createElement(d.default, {
                style: t ? w.pointerCursor : void 0,
                onPress: t ? this._isFlippedSelected : void 0,
                activeOpacity: .8
            }, o.createElement(M.default, {
                key: this.state.currentTheme,
                colorTheme: this.state.currentTheme,
                userColor: this.state.userColor,
                isFlipped: this.state.isFlipped
            }))
              , L = D.isAccessibleTheme(this.state.currentTheme) ? void 0 : z._themeToThemeColorOption(this.state.currentTheme, this.state.userColor)
              , R = o.createElement(N.default, {
                style: W.colorPicker,
                useDarkTheme: this.state.isDarkTheme,
                disabled: C,
                backgroundColor: this._themeColors.primaryBackgroundColor,
                selectedColorOption: L,
                onSelectColor: this._onThemeColorSelected
            });
            return o.createElement(o.View, {
                style: [W.container, this.props.style]
            }, i, x, r, R, l, _, c, A, g, h, m)
        }
        static _flipAvailableForTheme(e) {
            return D.isMonoTheme(e)
        }
        static _themeColorOptionToTheme(e, t) {
            switch (e) {
            case N.ThemeColorOption.Classic:
                return t ? E.Theme.DelphiDark : E.Theme.Delphi;
            case N.ThemeColorOption.Colorful:
                return t ? E.Theme.ColorfulDark : E.Theme.Colorful;
            default:
                return t ? E.Theme.MonoDark : E.Theme.Mono
            }
        }
        static _themeToThemeColorOption(e, t) {
            switch (e) {
            case E.Theme.DelphiDark:
            case E.Theme.Delphi:
                return N.ThemeColorOption.Classic;
            case E.Theme.ColorfulDark:
            case E.Theme.Colorful:
                return N.ThemeColorOption.Colorful
            }
            if (t)
                switch (t.key) {
                case "blue":
                    return N.ThemeColorOption.Blue;
                case "fuschia":
                    return N.ThemeColorOption.Fuschia;
                case "mint":
                    return N.ThemeColorOption.Mint;
                case "orange":
                    return N.ThemeColorOption.Orange;
                case "rose":
                    return N.ThemeColorOption.Rose;
                case "yellow":
                    return N.ThemeColorOption.Yellow
                }
        }
    }
    t.default = z
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(51)
      , r = i(31)
      , a = i(61)
      , l = i(114)
      , c = i(10)
      , d = i(2)
      , u = i(3)
      , g = i(121)
      , h = i(5)
      , p = i(4)
      , m = i(134)
      , S = i(20)
      , C = i(17)
      , y = i(55)
      , f = i(55)
      , _ = i(22)
      , b = i(97)
      , v = i(262)
      , T = i(11)
      , P = i(45)
      , A = i(9)
      , k = i(90);
    var I;
    !function(e) {
        e[e.AccountAndProfile = 0] = "AccountAndProfile",
        e[e.General = 1] = "General",
        e[e.Appearance = 2] = "Appearance",
        e[e.AudioVideo = 3] = "AudioVideo",
        e[e.Calling = 4] = "Calling",
        e[e.Messaging = 5] = "Messaging",
        e[e.Notifications = 6] = "Notifications",
        e[e.Contacts = 7] = "Contacts",
        e[e.HelpAndAbout = 8] = "HelpAndAbout",
        e[e.ManagePayments = 9] = "ManagePayments"
    }(I || (I = {}));
    const w = [I.AccountAndProfile, I.General, I.Appearance, I.AudioVideo, I.Calling, I.Messaging, I.Notifications, I.Contacts, I.HelpAndAbout]
      , N = h.lazyProperties({
        menuItem: ()=>o.Styles.createViewStyle({
            paddingHorizontal: 10
        })
    });
    class M extends s.default {
        constructor() {
            super(...arguments),
            this._mountedRefsMap = new m.default,
            this._renderMenuItem = e=>{
                const t = "menuitem" + e;
                switch (e) {
                case I.AccountAndProfile:
                    return this._getAccountAndProfileSettings(t);
                case I.General:
                    return this._getGeneralSettings(t);
                case I.Appearance:
                    return this._getAppearanceSettings(t);
                case I.AudioVideo:
                    return this._getAudioVideoSettings(t);
                case I.Calling:
                    return this._getCallingVoiceMailSettings(t);
                case I.Messaging:
                    return this._getMessagingAndChatsSettings(t);
                case I.Notifications:
                    return this._getNotificationsSettings(t);
                case I.Contacts:
                    return this._getContactsSettings(t);
                case I.HelpAndAbout:
                    return this._getHelpAndAboutSettings(t);
                case I.ManagePayments:
                    return this._getManagePaymentsSettings(t);
                default:
                    return A.switchStatementExhaustiveChecking(e)
                }
            }
            ,
            this._onHelpAndFeedbackButtonPressed = ()=>{
                u.track(new v.NavigationHelpAndFeedback(b.NavigationSettingsItem.HelpAndFeedback,b.NavigationSettingsOrigin.ApplicationSettings)),
                C.navigateToSettingsGroup(f.SettingsGroup.HelpAndFeedback, this._getContext())
            }
            ,
            this._onAudioVideoSettingsButtonPressed = ()=>{
                const e = A.newCauseId();
                u.log(d.LogTraceArea.Navigation, "RootCompositeNavigationView._navigateToAVSettings causeId: " + e),
                r.default.CallNavigationHelper.navigateToAVRootDesktopSettings(this._getContext(), e)
            }
            ,
            this._onMyAccountAndProfileSettingsButtonPressed = ()=>{
                this._navigateToSettingsGroup(f.SettingsGroup.AccountAndProfile)
            }
            ,
            this._onMessagingAndChatsButtonPressed = ()=>{
                this._navigateToSettingsGroup(f.SettingsGroup.Chat)
            }
            ,
            this._onAppearanceSettingsButtonPressed = ()=>{
                this._navigateToSettingsGroup(f.SettingsGroup.ThemeSettings)
            }
            ,
            this._onNotificationsButtonPressed = ()=>{
                u.track(new v.NavigationNotificationSettings(b.NavigationSettingsOrigin.ApplicationSettings)),
                this._navigateToSettingsGroup(f.SettingsGroup.Notifications)
            }
            ,
            this._onContactsButtonPressed = ()=>{
                this._navigateToSettingsGroup(f.SettingsGroup.Contacts)
            }
            ,
            this._onCallingSettingsButtonPressed = ()=>{
                const e = this.props.detailContext && 1 === this.props.detailContext.length && n.first(this.props.detailContext)instanceof y.CallingSettingsPanelNavigationContext;
                C.navigateToCallingSettingsPanel(!0, this._getContext()),
                e && this.props.resetFocus && this.props.resetFocus()
            }
            ,
            this._onOtherSettingsButtonPressed = ()=>{
                this._navigateToSettingsGroup(f.SettingsGroup.General)
            }
            ,
            this._onKeyPress = e=>{
                let t = this.state.focusedIndex;
                e.keyCode !== g.UP && e.keyCode !== g.LEFT || (t -= 1),
                e.keyCode !== g.DOWN && e.keyCode !== g.RIGHT || (t += 1),
                t < 0 || t >= this.state.menuCategories.length || this.setState({
                    focusedIndex: t
                })
            }
        }
        _buildState(e, t) {
            const i = P.getFullUserProfileByMri(S.getSkypeMri())
              , o = _.default.isUsingStackNavigationContext()
              , s = {
                displayName: i.getDisplayName(),
                isUsingStackNavigation: o
            };
            return e.detailContext && e.detailContext[0]instanceof y.DesktopSettingsGroupNavigationContext ? s.settingsGroup = e.detailContext[0].state.group : s.settingsGroup = void 0,
            t && (s.focusedIndex = 0),
            s.menuCategories = n.filter(w, e=>{
                switch (e) {
                case I.AccountAndProfile:
                    return l.default.navigation().canAccessProfileSettings;
                case I.General:
                    return l.default.navigation().canAccessGeneralSettings;
                case I.AudioVideo:
                    return a.UICapabilities.avSettingsSupported();
                case I.Calling:
                    return l.default.navigation().canAccessCallingSettings;
                case I.Messaging:
                    return l.default.navigation().canAccessMessagingSettings;
                case I.Appearance:
                    return l.default.userSettings().canChangeAppearance;
                case I.Contacts:
                    return l.default.contacts().canHaveContacts;
                case I.ManagePayments:
                    return l.default.navigation().canAccessPaymentsSettings;
                default:
                    return !0
                }
            }
            ),
            s
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.focusedIndex !== t.focusedIndex && this._focusItem(this.state.focusedIndex)
        }
        render() {
            return this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? null : o.createElement(o.View, {
                onKeyPress: this._onKeyPress
            }, n.map(this.state.menuCategories, this._renderMenuItem))
        }
        _getAccountAndProfileSettings(e) {
            const t = this._isSettingsGroupSelected(f.SettingsGroup.AccountAndProfile);
            return this._getWideButton({
                icon: T.SkypeIcon.Contact,
                label: p.getString("UserSettingsPanel.AccountAndProfileSettingsTitle"),
                key: e,
                selected: t,
                onPressed: this._onMyAccountAndProfileSettingsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getAppearanceSettings(e) {
            const t = this._isSettingsGroupSelected(f.SettingsGroup.ThemeSettings);
            return this._getWideButton({
                icon: T.SkypeIcon.MagicWand,
                label: p.getString("UserSettingsPanel.AppearanceButton"),
                key: e,
                selected: t,
                onPressed: this._onAppearanceSettingsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getAudioVideoSettings(e) {
            const t = this._isSettingsGroupSelected(f.SettingsGroup.AudioVideoSettings);
            return this._getWideButton({
                icon: T.SkypeIcon.Microphone,
                label: p.getString("UserSettingsPanel.AudioVideoSettingsTitle"),
                key: e,
                selected: t,
                onPressed: this._onAudioVideoSettingsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getCallingVoiceMailSettings(e) {
            const t = n.first(this.props.detailContext)instanceof y.CallingSettingsPanelNavigationContext;
            return this._getWideButton({
                icon: T.SkypeIcon.CallStart,
                label: p.getString("UserSettingsPanel.CallingSettingsWindowTitle"),
                key: e,
                selected: t,
                onPressed: this._onCallingSettingsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getMessagingAndChatsSettings(e) {
            const t = this._isSettingsGroupSelected(f.SettingsGroup.Chat);
            return this._getWideButton({
                icon: T.SkypeIcon.Message,
                label: p.getString("UserSettingsPanel.MessagingAndChatsTitle"),
                key: e,
                selected: t,
                onPressed: this._onMessagingAndChatsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getNotificationsSettings(e) {
            const t = this._isSettingsGroupSelected(f.SettingsGroup.Notifications);
            return this._getWideButton({
                icon: T.SkypeIcon.Alert,
                label: p.getString("UserSettingsPanel.NotificationsTitle"),
                key: e,
                selected: t,
                onPressed: this._onNotificationsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getContactsSettings(e) {
            const t = this._isSettingsGroupSelected(f.SettingsGroup.Contacts);
            return this._getWideButton({
                icon: T.SkypeIcon.SkypeAddressbook,
                label: p.getString("UserSettingsPanel.ContactsTitle"),
                key: e,
                selected: t,
                onPressed: this._onContactsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getGeneralSettings(e) {
            const t = this._isSettingsGroupSelected(f.SettingsGroup.General);
            return this._getWideButton({
                icon: T.SkypeIcon.Settings,
                label: p.getString("UserSettingsPanel.GeneralTitle"),
                key: e,
                selected: t,
                onPressed: this._onOtherSettingsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getHelpAndAboutSettings(e) {
            return this._getWideButton({
                icon: T.SkypeIcon.Info,
                label: p.getString("UserSettingsPanel.HelpAndAboutTitle"),
                key: e,
                selected: this._isSettingsGroupSelected(f.SettingsGroup.HelpAndFeedback),
                onPressed: this._onHelpAndFeedbackButtonPressed,
                hideDivider: !0,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getManagePaymentsSettings(e) {
            const t = this._isSettingsGroupSelected(f.SettingsGroup.AccountAndProfile);
            return this._getWideButton({
                icon: T.SkypeIcon.SkypeCredit,
                label: p.getString("UserSettingsPanel.ManagePaymentsSettingsTitle"),
                key: e,
                selected: t,
                onPressed: this._onMyAccountAndProfileSettingsButtonPressed,
                ref: this._mountedRefsMap.onComponentRef(e)
            })
        }
        _getWideButton(e) {
            const t = this.props.isAloneInNavStack || this.state.isUsingStackNavigation
              , i = [t ? c.ListItem.small.regularHeightStyle : c.ListItem.small.shortHeightStyle, N.menuItem];
            let n = e.accessibilityLabel || e.label;
            return e.selected && (i.push(this._themeStyles.secondaryRowHighlightViewStyle),
            n += ", " + p.getString("Global.SelectedAccessibilityLabel")),
            o.createElement(k.WideButton, Object.assign({}, e, {
                accessibilityLabel: n,
                buttonStyles: i,
                hideArrow: !t
            }))
        }
        _navigateToSettingsGroup(e) {
            const t = this._shouldRefreshFocusForSettingsGroup(e);
            C.navigateToSettingsGroup(e, this._getContext()),
            t && this.props.resetFocus && this.props.resetFocus()
        }
        _isSettingsGroupSelected(e) {
            return this.state.settingsGroup === e
        }
        _shouldRefreshFocusForSettingsGroup(e) {
            return this.props.detailContext && 1 === this.props.detailContext.length && this._isSettingsGroupSelected(e)
        }
        _focusItem(e=0) {
            if (e < 0 || e > this.state.menuCategories.length - 1)
                return;
            const t = this.state.menuCategories[e];
            if (this.state.focusedIndex === e) {
                const e = this._mountedRefsMap.ref("menuitem" + t);
                e && e.requestFocus()
            } else
                this.setState({
                    focusedIndex: e
                })
        }
        _getHeaderText(e) {
            return e.displayName + " " + p.getString("MyProfilePanel.SettingsTitle")
        }
    }
    t.default = M
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(50)
      , r = i(2963)
      , a = i(191)
      , l = i(16)
      , c = i(2967)
      , d = i(30)
      , u = i(345)
      , g = i(2)
      , h = i(2969)
      , p = i(3)
      , m = i(4)
      , S = i(17)
      , C = i(22)
      , y = i(24)
      , f = i(37)
      , _ = i(60)
      , b = i(76)
      , v = i(44)
      , T = i(168)
      , P = i(94)
      , A = i(8)
      , k = i(14)
      , I = i(2973)
      , w = i(9);
    class N extends s.default {
        constructor() {
            super(...arguments),
            this._scrollOffset = 0,
            this._setScrollViewRef = e=>{
                this._scrollView = e || void 0
            }
            ,
            this._onCloseButtonFocus = ()=>{
                this._scrollToTop()
            }
            ,
            this._onChatSettingsClicked = ()=>{
                S.showChatSettingsPanel(this.state.otherPartyMri, this.props.mri, this._getContext())
            }
            ,
            this._onScroll = (e,t)=>{
                this._scrollOffset || (this._scrollOffset = this._getContext().isPresentedInDesktopSubview ? u.DetailsPanelHeaderSizes.scrollOffsetDesktop : u.DetailsPanelHeaderSizes.scrollOffsetMobile);
                const i = e > this._scrollOffset;
                this.state.showHeader !== i && this.setState({
                    showHeader: i
                })
            }
            ,
            this._onCloseButtonPress = e=>{
                e && e.stopPropagation();
                const t = w.newCauseId();
                p.log(g.LogTraceArea.Navigation, "DetailsPanel._onCloseButtonPress,  causeId: " + t),
                this._goBack(t)
            }
        }
        _buildState(e, t) {
            let i, n = {};
            const o = this._getRootViewId();
            let s = u.DetailsPanelViewMode.None;
            if (l.isThread(e.mri)) {
                const t = d.default.getConversation(e.mri);
                n.otherPartyMri = t && t.isOneOnOne() ? t.getOtherPartyMri() : void 0,
                n.otherPartyMri || (i = t ? t.isOneOnOne() ? "Conversation getOtherPartyMri returned undefined, viewmode: " : "Conversation is not OneOnOne, viewmode: " : "Conversation is undefined, viewmode: ")
            } else
                n.otherPartyMri = e.mri,
                n.otherPartyMri || (i = "Non thread mri props is undefined, viewmode: ");
            if (e.mri && (s = l.isGroupConversation(e.mri) ? u.DetailsPanelViewMode.Group : l.isAgent(e.mri) ? u.DetailsPanelViewMode.Bot : l.isConnector(e.mri) ? u.DetailsPanelViewMode.Connector : u.DetailsPanelViewMode.User),
            i) {
                const e = i + s;
                p.log(g.LogTraceArea.Profile, e)
            }
            return n.deviceOrientation = y.default.getDeviceOrientation(o),
            n.viewMode = s,
            n.isUsingStackNavigationContext = C.default.isUsingStackNavigationContext(),
            n.showScreenReaderHeader = b.default.isMobileScreenReaderEnabled(),
            n.statusBarHeight = this._getContext().isPresentedInDesktopSubview ? 0 : f.default.statusBarPadding(),
            t && (n.showHeader = !1),
            n
        }
        componentDidMount() {
            super.componentDidMount(),
            this._updateStatusBar(),
            a.default.forceThreadDetailsFetchIfNeeded(this.props.mri)
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.isUsingStackNavigationContext || this.props.mri === e.mri || this._scrollToTop(),
            this.state.showHeader !== t.showHeader && this._updateStatusBar(),
            this.state.statusBarHeight !== t.statusBarHeight && !this.state.showHeader && this._scrollView && this._scrollView.setScrollTop(0)
        }
        render() {
            const e = this._isHeaderOpaqueStyle()
              , t = e || this._hideHeaderBackground()
              , i = this._getCloseButtonTitle()
              , o = this.state.isUsingStackNavigationContext ? {
                closeButtonType: v.CloseButtonType.Close,
                color: t ? this._themeColors.headerIconColor : A.Color.white,
                title: i
            } : {
                closeButtonType: this.props.isAloneInNavStack ? v.CloseButtonType.Close : v.CloseButtonType.Back,
                color: t ? this._themeColors.headerIconColor : A.Color.white,
                hoverColor: t ? this._themeColors.iconHoverColor : A.Color.whiteOverlay80,
                onPress: this._onCloseButtonPress,
                onFocus: this._onCloseButtonFocus,
                title: this.props.isAloneInNavStack ? i : m.getString("Global.BackButtonTitle")
            }
              , s = n.createElement(v.SimplePanelHeader, {
                floating: !this.state.showScreenReaderHeader,
                panelName: e ? this._getHeaderText(this.state) : void 0,
                useTransparentBackground: !e,
                hideBottomBorder: !e,
                leftButton: o,
                ignorePointerEvents: !e,
                delayHeaderFocus: !1
            })
              , r = [k.flexOne, this._themeStyles.primaryBackgroundColorStyle];
            let a;
            this.state.statusBarHeight && !this.state.showScreenReaderHeader && (r.push(_.marginTopStyle(this.state.statusBarHeight), k.overflowVisible),
            a = _.marginTopStyle(-1 * this.state.statusBarHeight));
            let l = this._renderPanelContent();
            return a && (l = n.createElement(n.View, {
                style: a
            }, l)),
            n.createElement(n.View, {
                style: [k.flexOne, this._themeStyles.primaryBackgroundColorStyle]
            }, s, n.createElement(n.ScrollView, {
                ref: this._setScrollViewRef,
                style: r,
                onScroll: this._onScroll,
                keyboardShouldPersistTaps: !0
            }, l))
        }
        _getCloseButtonTitle() {
            switch (this.state.viewMode) {
            case u.DetailsPanelViewMode.User:
                return m.getString("DetailsPanelHeader.CloseUserProfileButtonTitle");
            case u.DetailsPanelViewMode.Bot:
            case u.DetailsPanelViewMode.Connector:
                return m.getString("DetailsPanelHeader.CloseBotProfileButtonTitle");
            case u.DetailsPanelViewMode.Group:
                return m.getString("DetailsPanelHeader.CloseGroupProfileButtonTitle");
            default:
                return m.getString("Global.CloseButtonTitle")
            }
        }
        _scrollToTop() {
            this._scrollView && (this._scrollView.setScrollTop(0, !1),
            this._onScroll(0, 0))
        }
        _hideHeaderBackground() {
            return this.props.mri === o.default.getConfigSettingsNoSubscription().cortana.mri
        }
        _renderPanelContent() {
            switch (this.state.viewMode) {
            case u.DetailsPanelViewMode.Bot:
                return n.createElement(r, {
                    botMri: this.props.mri,
                    showConversationSettings: this.props.showConversationSettings,
                    hideHeaderBackground: this._hideHeaderBackground(),
                    origin: this.props.origin,
                    onBotAdded: this.props.onBotAdded
                });
            case u.DetailsPanelViewMode.Group:
                return n.createElement(h, {
                    conversationId: this.props.mri
                });
            case u.DetailsPanelViewMode.User:
                return n.createElement(I, {
                    userMri: this.state.otherPartyMri,
                    conversationMri: this.props.mri,
                    origin: this.props.origin,
                    showSettings: this.props.showConversationSettings,
                    onChatSettingsClicked: this._onChatSettingsClicked
                });
            case u.DetailsPanelViewMode.Connector:
                return n.createElement(c, {
                    mri: this.props.mri,
                    conversationId: this.props.conversationId,
                    onCloseProfile: this._onCloseButtonPress
                });
            default:
                return
            }
        }
        _getHeaderText(e) {
            return e.viewMode === u.DetailsPanelViewMode.User || e.viewMode === u.DetailsPanelViewMode.Bot || e.viewMode === u.DetailsPanelViewMode.Group ? m.getString("DetailsPanelHeader.UserProfileTitle") : void 0
        }
        _isHeaderOpaqueStyle() {
            return !!this.state.showScreenReaderHeader || !!this.state.showHeader
        }
        _updateStatusBar() {
            this._updateStatusBarStyle(this._isHeaderOpaqueStyle() || this._hideHeaderBackground() ? P.createBarStyle(this._themeColors.defaultStatusBarTheme, !0) : P.createBarStyle(T.BarStyleTheme.Light, !0))
        }
    }
    t.DetailsPanel = N,
    t.default = N
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(151)
      , r = i(5)
      , a = i(4)
      , l = i(15)
      , c = r.lazyProperties({
        moreButton: ()=>n.Styles.createButtonStyle({
            height: 44
        })
    });
    class d extends o.ComponentBase {
        render() {
            const e = a.getString("DetailsPanelHeader.ShowMoreTitle");
            return n.createElement(n.View, {
                style: this.props.style
            }, n.createElement(s.HoverableButton, {
                style: c.moreButton,
                accessibilityLabel: this.props.accessibilityLabel || e,
                accessibilityTraits: n.Types.AccessibilityTrait.Button,
                onPress: this.props.onPress
            }, n.createElement(l.Caption, null, e)))
        }
    }
    t.default = d
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(3)
      , r = i(5)
      , a = i(4)
      , l = i(62)
      , c = i(76)
      , d = i(103)
      , u = i(131)
      , g = i(15)
      , h = i(12)
      , p = i(457)
      , m = i(1066)
      , S = r.lazyProperties({
        switchStyle: ()=>n.Styles.createViewStyle({
            marginVertical: 10,
            flexDirection: "row"
        }),
        privacyStatementTextStyle: ()=>n.Styles.createTextStyle({
            paddingRight: 15
        })
    });
    class C extends h.default {
        constructor() {
            super(...arguments),
            this._onLearnMoreLinkPress = e=>{
                e.stopPropagation(),
                e.preventDefault(),
                n.Linking.openUrl(this.state.learnMoreUrl)
            }
            ,
            this._onPrivacySettingChanged = (e,t)=>{
                s.track(new m.TranslationPrivacySwitchChangedEvent(t)),
                l.default.setCallTranslatorPrivacyConsent(t)
            }
        }
        _buildState(e, t) {
            return {
                learnMoreUrl: o.default.getConfigSettings().translator.learnMoreUrl,
                isMobileScreenReaderEnabled: c.default.isMobileScreenReaderEnabled(),
                isPrivacyEnabled: !!l.default.getCallTranslatorPrivacyConsent()
            }
        }
        render() {
            const e = a.getParts("UserSettingsPanel.TranslationPrivacyConsentSwitch", {
                learnMoreLink: this._getLearnMoreLink()
            });
            return n.createElement(n.View, {
                style: S.switchStyle
            }, n.createElement(g.Caption, {
                style: [d.styles.subtitleMediumSemiLarge, S.privacyStatementTextStyle],
                key: "spokenLanguageSubtitle",
                onPress: this.state.isMobileScreenReaderEnabled ? this._onLearnMoreLinkPress : void 0
            }, e), n.createElement(p.default, {
                key: "spokenLanguageToggle",
                isOn: this.state.isPrivacyEnabled,
                accessibilityLabel: a.getString("UserSettingsPanel.TranslationPrivacyConsentSwitchNoLink"),
                onChange: this._onPrivacySettingChanged
            }))
        }
        _getLearnMoreLink() {
            return n.createElement(u.default, {
                url: "#",
                key: "keyLearnMore",
                blue: !0,
                onPress: this._onLearnMoreLinkPress
            }, a.getString("UserSettingsPanel.TranslationCELAStatementLearnMore"))
        }
    }
    t.default = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(2976)
      , s = i(5)
      , r = i(4)
      , a = i(17)
      , l = i(90)
      , c = s.lazyProperties({
        titleMediumSemiLarge: ()=>n.Styles.createTextStyle({
            flex: 1,
            marginRight: 12
        })
    });
    class d extends o.default {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                a.navigateToSendDiagnosticLogs(this._getContext())
            }
        }
        static getHeaderText() {
            return r.getString("UserSettingsPanel.DiagnosticToolsTitle")
        }
        _getHeaderText(e) {
            return d.getHeaderText()
        }
        _renderContent() {
            return n.createElement(l.WideButton, {
                key: "diagnosticTools",
                label: r.getString("SendDiagnosticLogsDialog.SendDiagnosticLogs"),
                labelStyle: c.titleMediumSemiLarge,
                onPressed: this._onPress
            })
        }
    }
    t.default = d
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(50)
      , s = (i(42),
    i(10))
      , r = i(2)
      , a = i(5)
      , l = i(108)
      , c = i(4)
      , d = i(22)
      , u = i(37)
      , g = i(44)
      , h = i(107)
      , p = i(94)
      , m = i(8)
      , S = i(15)
      , C = a.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        buttonsContainer: ()=>n.Styles.createViewStyle({
            padding: 10
        }),
        panelContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "column"
        }),
        panelContainerCompositeNav: ()=>n.Styles.createViewStyle({
            marginHorizontal: 10
        }),
        profileInfo: ()=>n.Styles.createTextStyle({
            flex: -1,
            paddingLeft: 5
        }),
        link: ()=>n.Styles.createLinkStyle({
            color: m.Color.blue
        })
    });
    class y extends o.default {
        constructor() {
            super(...arguments),
            this._onLearnMorePressed = ()=>{
                l.openUrlWithParams({
                    origin: r.BrowserOrigin.SprinklesEffectsDescription,
                    url: "https://sprinklesapp.com/",
                    componentContext: this._getContext()
                })
            }
        }
        static getHeaderText() {
            return c.getString("CapturePreview.EffectsTitle")
        }
        _buildState(e, t) {
            return {
                isUsingStackNavigationContext: d.default.isUsingStackNavigationContext(),
                safeAreaPaddingStyle: u.default.horizontalPaddingStyle(s.HorizontalInsetDefault)
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._updateStatusBarStyle(p.createBarStyle(this._themeColors.defaultStatusBarTheme))
        }
        render() {
            let e;
            const t = this.state.isUsingStackNavigationContext ? c.getString("CapturePreview.EffectsTitle") : c.getString("UserSettingsPanel.AboutButton");
            if (this.props.showHeader) {
                const i = this.props.navigationDirection === h.StackNavigationDirection.Present || this.props.isAloneInNavStack ? g.CloseButtonType.Close : g.CloseButtonType.Back;
                e = n.createElement(g.SimplePanelHeader, {
                    panelName: t,
                    leftButton: {
                        closeButtonType: i
                    }
                })
            }
            const i = c.getString("CapturePreview.LearnMore")
              , o = n.createElement(n.Text, {
                key: "sprinklesLink",
                style: C.link,
                onPress: this._onLearnMorePressed
            }, i)
              , s = c.getParts("CapturePreview.SprinklesPoweredBy", {
                learnMore: o
            })
              , r = [];
            this.state.isUsingStackNavigationContext || r.push(C.panelContainerCompositeNav),
            this.state.safeAreaPaddingStyle && r.push(this.state.safeAreaPaddingStyle);
            let a = n.createElement(S.BodyText, {
                style: C.profileInfo,
                numberOfLines: 2,
                textThemeColor: S.TextThemeColor.Secondary
            }, s);
            const l = C.buttonsContainer;
            return a = n.createElement(n.View, {
                style: l
            }, a),
            n.createElement(n.View, {
                style: [C.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, e, n.createElement(n.ScrollView, {
                style: C.panelContainer
            }, n.createElement(n.View, {
                style: r
            }, a)))
        }
        _getHeaderText(e) {
            return y.getHeaderText()
        }
    }
    t.default = y
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(13)
      , r = i(5)
      , a = i(4)
      , l = i(3014)
      , c = i(18)
      , d = r.lazyProperties({
        scrollViewContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            justifyContent: "center"
        }),
        selectedList: ()=>o.Styles.createViewStyle({
            flexDirection: "row"
        }),
        selectedListRTL: ()=>o.Styles.createViewStyle({
            flexDirection: "row-reverse"
        }),
        flippedView: ()=>o.Styles.createViewStyle({
            transform: [{
                scaleX: -1
            }]
        })
    });
    class u extends s.ComponentBase {
        constructor(e) {
            super(e),
            this._onRemoveClickUserProfile = e=>{
                this.props.onProfileRemoved && this.props.onProfileRemoved(e);
                const t = e.getDisplayName();
                t && this._announceRemoval(t)
            }
            ,
            this._createProfileBubble = (e,t)=>{
                const i = e.getDisplayName()
                  , n = a.getString("AccessibilityLabel.SelectedProfileBubbleRemoveUserOnDesktop", {
                    displayName: i,
                    index: t + 1,
                    totalCount: this.props.selectedProfiles.length
                });
                return o.createElement(l.default, {
                    key: "we-hub-user-tag-" + (e.getUniqueId() || i),
                    style: c.isRTL() ? d.flippedView : void 0,
                    profile: e,
                    onRemoveClickUserProfile: this._onRemoveClickUserProfile,
                    accessibilityLabel: n,
                    colorThemeOverride: this.props.colorThemeOverride
                })
            }
            ,
            this._onInvitedListRef = e=>{
                this._selectedListRef = e || void 0
            }
            ,
            this._animatedHeightValue = new o.Animated.Value(e.selectedProfiles.length > 0 ? 84 : 0),
            this._animatedHeightStyle = o.Styles.createAnimatedViewStyle({
                height: this._animatedHeightValue
            })
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.props.selectedProfiles.length > e.selectedProfiles.length && this._selectedListRef && this._selectedListRef.setScrollLeft(0);
            const n = e.selectedProfiles.length > 0
              , s = this.props.selectedProfiles.length > 0;
            n !== s && o.Animated.timing(this._animatedHeightValue, {
                toValue: s ? 84 : 0,
                duration: 250,
                easing: o.Animated.Easing.InOut()
            }).start()
        }
        render() {
            const e = n.map(this.props.selectedProfiles, this._createProfileBubble)
              , t = c.isRTL()
              , i = t ? d.selectedListRTL : d.selectedList
              , s = [i];
            return t && s.push([d.selectedListRTL, d.flippedView]),
            o.createElement(o.Animated.View, {
                style: [d.scrollViewContainer, this._animatedHeightStyle, this.props.style]
            }, o.createElement(o.ScrollView, {
                ref: this._onInvitedListRef,
                style: s,
                horizontal: !0,
                vertical: !1,
                scrollsToTop: !1
            }, o.createElement(o.View, {
                style: i
            }, e)))
        }
        _announceRemoval(e) {
            o.Accessibility.announceForAccessibility(a.getString("AccessibilityLabel.SelectedProfileBubbleRemoved", {
                displayName: e
            }))
        }
    }
    t.default = u
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1753)
      , s = i(6)
      , r = i(1211);
    class a extends o.default {
        _getPanelName() {
            return "Manage feature flags"
        }
        _getSubscribedState() {
            return {
                ecsConfig: s.default.getMergedEcsConfig(),
                overrides: r.default.getOverrides()
            }
        }
        _generateConfigItems(e) {
            return this._generateListOfItems(e.ecsConfig, e.overrides)
        }
        _generateOverrideItems(e) {
            return this._generateListOfItems(e.overrides)
        }
        _onResetAll() {
            r.default.resetAllOverrides()
        }
        _generateListOfItems(e, t) {
            const i = [];
            return n.each(e, (e,o)=>{
                i.push(this._createHeaderItem(o));
                const s = i.length;
                n.each(e, (e,n)=>{
                    this._generateListOfItemsRecursive(i, o, [n], e, t)
                }
                ),
                i.length === s && i.pop()
            }
            ),
            i
        }
        _onListItemClickBuilder(e, t, i) {
            return ()=>{
                r.default.setOverride(e, t, i)
            }
        }
        _onResetPressBuilder(e, t) {
            return i=>{
                r.default.clearOverride(e, t),
                i.stopPropagation()
            }
        }
    }
    t.default = a
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(866)
      , s = i(166)
      , r = i(0)
      , a = i(51)
      , l = i(347)
      , c = i(348)
      , d = i(5)
      , u = i(341)
      , g = i(4)
      , h = i(17)
      , p = i(22)
      , m = i(44)
      , S = i(11)
      , C = i(14)
      , y = i(1669)
      , f = i(15)
      , _ = i(9)
      , b = d.lazyProperties({
        container: ()=>C.flexOne,
        title: ()=>r.Styles.createTextStyle({
            paddingTop: 30,
            paddingBottom: 10,
            marginHorizontal: 20
        }),
        row: ()=>r.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            alignSelf: "stretch",
            justifyContent: "flex-end",
            paddingHorizontal: 20,
            paddingVertical: 10
        }),
        searchButtonContainer: ()=>C.flexOne,
        inputContainer: ()=>r.Styles.createViewStyle({
            alignSelf: "stretch"
        }),
        resetButton: ()=>r.Styles.createViewStyle({
            alignSelf: "center",
            borderWidth: 1,
            borderRadius: 5,
            paddingHorizontal: 5,
            marginRight: 15
        }),
        featureName: ()=>r.Styles.createTextStyle({
            flex: 1
        }),
        resetAllTextStyle: ()=>r.Styles.createTextStyle({}),
        resetAllButtonStyle: ()=>r.Styles.createTextStyle({
            width: 60
        }),
        backgroundStyleResetTextStyles: ()=>r.Styles.createTextStyle({}),
        backgroundStyleResetButtonStyles: ()=>r.Styles.createButtonStyle({})
    });
    t.HeaderTemplateId = "header";
    class v extends a.default {
        constructor() {
            super(...arguments),
            this._allowReset = !0,
            this._includeNumbers = !1,
            this._renderItem = e=>{
                if (e.template === t.HeaderTemplateId)
                    return this._renderSectionTitle(e.categoryName);
                const i = [this._useDarkTheme() ? this._themeStyles.secondaryTextColorStyle : this._themeStyles.primaryTextColorStyle]
                  , n = this._themeStyles.rowHoverViewStyle
                  , o = e.onReset ? r.createElement(r.Button, {
                    style: [b.resetButton, b.backgroundStyleResetButtonStyles],
                    onPress: e.onReset,
                    title: "Reset"
                }, r.createElement(r.Text, {
                    style: b.backgroundStyleResetTextStyles
                }, "Reset")) : void 0
                  , s = "boolean" === e.template ? r.createElement(u, {
                    disable: !e.onPress,
                    falseLabel: g.getString("ToggleSwitch.SelectionToggleOff"),
                    trueLabel: g.getString("ToggleSwitch.SelectionToggleOn"),
                    isOn: !!e.featureValue
                }) : r.createElement(r.Text, null, e.featureValue);
                return r.createElement(r.View, {
                    style: [b.row, e.key === this.state.itemKeyHovering ? n : void 0],
                    onPress: e.onPress,
                    onMouseEnter: e.onHoverStart,
                    onMouseLeave: e.onHoverEnd
                }, r.createElement(r.View, {
                    style: b.featureName
                }, r.createElement(r.Text, {
                    style: i
                }, e.featureName)), o, s)
            }
            ,
            this._searchInputRefCallback = e=>{
                this._searchInputRef = e || void 0
            }
            ,
            this._onInputChange = e=>{
                this.setState({
                    inputText: e
                })
            }
            ,
            this._onPressClose = ()=>{
                const e = _.newCauseId();
                h.navigateBack(e, this._getContext())
            }
        }
        _buildState(e, t) {
            const i = this._getSubscribedState()
              , n = {
                listItems: this._generateConfigItems(i),
                overridenListItems: this._generateOverrideItems(i),
                isUsingStackNavigationContext: p.default.isUsingStackNavigationContext()
            };
            return t && (n.inputText = ""),
            n
        }
        _generateListOfItemsRecursive(e, t, i, o, s) {
            const r = i.join("|")
              , a = "boolean" == typeof o
              , l = "number" == typeof o
              , c = this._allowReset && (void 0 === s || void 0 !== n.get(s, [t, r]));
            if (n.isObject(o))
                n.each(o, (n,o)=>{
                    const r = i.concat(o);
                    this._generateListOfItemsRecursive(e, t, r, n, s)
                }
                );
            else if (a || this._includeNumbers && l || c) {
                const n = t + "|" + r
                  , s = i.join(".");
                e.push({
                    height: 50,
                    key: n,
                    featureName: s,
                    featureValue: o,
                    categoryName: t,
                    template: a ? "boolean" : "number",
                    onPress: a ? this._onListItemClickBuilder(t, i, !o) : void 0,
                    onHoverStart: ()=>this._onHover(n),
                    onHoverEnd: ()=>this._onHover(void 0),
                    onReset: c ? this._onResetPressBuilder(t, i) : void 0
                })
            }
        }
        _createHeaderItem(e) {
            return {
                key: e,
                height: 60,
                categoryName: e,
                template: t.HeaderTemplateId,
                featureName: ""
            }
        }
        _onHover(e) {
            this.setState({
                itemKeyHovering: e
            })
        }
        _renderSectionTitle(e) {
            return r.createElement(f.Subtitle, {
                style: b.title
            }, e)
        }
        _renderSearchHeader() {
            let e;
            return e = this.state.isUsingStackNavigationContext ? r.createElement(l.default, {
                ref: this._searchInputRefCallback,
                initialValue: 1,
                showButtonWhenInactive: !0,
                placeholderText: g.getString("SearchInputControl.PlaceHolderTextShort"),
                rawSearchQuery: this.state.inputText,
                onInputTextChange: this._onInputChange
            }) : r.createElement(r.View, {
                style: b.searchButtonContainer
            }, r.createElement(c.default, {
                ref: this._searchInputRefCallback,
                showButtonWhenInactive: !0,
                placeholderText: g.getString("SearchInputControl.PlaceHolderTextShort"),
                rawSearchQuery: this.state.inputText,
                autoFocus: !0,
                forceInputValueUpdate: !0,
                onInputTextChange: this._onInputChange
            })),
            e
        }
        focus() {
            this.isComponentMounted() && this._searchInputRef && this._searchInputRef.focusInput()
        }
        _renderHeader() {
            const e = {
                icon: S.SkypeIcon.NavigationBack,
                title: g.getString("Global.CloseButtonTitle"),
                onPress: this._onPressClose
            }
              , t = {
                title: "Reset all",
                onPress: ()=>this._onResetAll(),
                text: "Reset all",
                textStyle: b.resetAllTextStyle,
                buttonStyle: b.resetAllButtonStyle
            };
            return r.createElement(m.SimplePanelHeader, {
                panelName: this._getPanelName(),
                leftButton: e,
                rightButtons: this.state.overridenListItems.length ? t : void 0
            })
        }
        _getFilteredListItems(e) {
            let i = this.state.inputText.toLowerCase();
            if (!i)
                return e;
            let o = n.filter(e, e=>n.includes(e.featureName.toLowerCase(), i) || e.template === t.HeaderTemplateId || n.includes(e.categoryName.toLowerCase(), i));
            return n.filter(o, e=>e.template !== t.HeaderTemplateId || n.some(o, i=>i.categoryName === e.categoryName && i.template !== t.HeaderTemplateId))
        }
        _getAllTabConfig() {
            return {
                renderTabTitle: ()=>r.createElement(y.default, {
                    title: g.getString("DesktopSearchResultsFilter.All")
                }),
                renderContent: ()=>r.createElement(s.VirtualListView, {
                    itemList: this._getFilteredListItems(this.state.listItems),
                    renderItem: this._renderItem
                })
            }
        }
        _getOverridenTabConfig() {
            return {
                renderTabTitle: ()=>r.createElement(y.default, {
                    title: "Overridden"
                }),
                renderContent: ()=>r.createElement(r.View, {
                    style: b.container
                }, r.createElement(s.VirtualListView, {
                    itemList: this._getFilteredListItems(this.state.overridenListItems),
                    renderItem: this._renderItem
                }))
            }
        }
        render() {
            let e = this._getAllTabConfig()
              , t = [e, this._getOverridenTabConfig()];
            return r.createElement(r.View, {
                style: b.container
            }, this._renderHeader(), r.createElement(r.View, {
                style: b.container
            }, r.createElement(r.View, {
                style: b.inputContainer
            }, this._renderSearchHeader()), this.state.overridenListItems.length ? r.createElement(o.default, {
                tabConfigs: t,
                tabHeight: 40,
                isRTL: r.International.isRTL()
            }) : e.renderContent()))
        }
    }
    t.default = v
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(166)
      , s = i(0)
      , r = i(50)
      , a = i(10)
      , l = i(2)
      , c = i(27)
      , d = i(3)
      , u = i(453)
      , g = i(1756)
      , h = i(5)
      , p = i(4)
      , m = i(123)
      , S = i(32)
      , C = i(24)
      , y = i(37)
      , f = i(76)
      , _ = i(47)
      , b = i(44)
      , v = i(11)
      , T = i(14)
      , P = i(15)
      , A = i(9)
      , k = h.lazyProperties({
        panel: ()=>s.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        languageOption: ()=>h.lazyProperties({
            row: ()=>s.Styles.createViewStyle({
                flexDirection: "row",
                alignItems: "center",
                justifyContent: "flex-start",
                marginHorizontal: 10,
                borderBottomWidth: 1,
                height: 60
            }),
            compositeRow: ()=>s.Styles.createViewStyle({
                marginHorizontal: 20
            }),
            selectedIcon: ()=>s.Styles.createTextStyle({
                margin: 5,
                minWidth: v.IconSize.size15
            })
        })
    });
    class I extends r.default {
        constructor() {
            super(...arguments),
            this._renderItem = e=>{
                const t = [k.languageOption.row, T.pointerCursor, T.noncollapsibleView, this._themeStyles.dividerBorderColorStyle, this.props.isPresentedInDesktopSubview ? k.languageOption.compositeRow : void 0, this.state.isMobileScreenSize ? a.ListItem.small.regularHeightStyle : a.ListItem.small.shortHeightStyle]
                  , i = s.createElement(c.default, {
                    icon: v.SkypeIcon.Ok,
                    size: v.IconSize.size15,
                    color: this._themeColors.primaryTextColor,
                    style: k.languageOption.selectedIcon
                });
                let n = !1;
                switch (e.template) {
                case "reset-language-row":
                    n = !this.state.currentLocale;
                    const o = p.getResetLanguageOptionString()
                      , r = o + (n ? ", " + p.getString("Global.SelectedAccessibilityLabel") : "");
                    return s.createElement(m.default.Button, {
                        key: "language_reset",
                        style: t,
                        onPress: this._onResetLanguagePress,
                        accessibilityLabel: r
                    }, n ? i : void 0, s.createElement(P.BodyText, {
                        bold: n,
                        style: T.flexNegativeOne
                    }, o));
                case "language-row":
                    n = e.key === this.state.currentLocale;
                    const a = u.getLanguageTitle(e.key)
                      , l = a + (n ? ", " + p.getString("Global.SelectedAccessibilityLabel") : "")
                      , c = [T.flexNegativeOne];
                    return "ar-SA" === e.key && c.push(T.noWrap),
                    s.createElement(m.default.Button, {
                        key: "language" + e.key,
                        style: t,
                        onPress: ()=>{
                            this._onLanguagePress(e.key)
                        }
                        ,
                        accessibilityLabel: l
                    }, n ? i : void 0, s.createElement(P.BodyText, {
                        bold: n,
                        style: c
                    }, a));
                default:
                    return A.switchStatementExhaustiveChecking(e.template)
                }
            }
            ,
            this._onDoneButtonRef = e=>{
                this._doneButtonRef = e || void 0
            }
            ,
            this._onDoneButtonPress = ()=>{
                const e = A.newCauseId();
                d.log(l.LogTraceArea.Navigation, "LanguagePickerPanel._onDoneButtonPress,  causeId: " + e),
                this._getContext().isPresentedInDesktopSubview ? this._setAppLanguage() : (this._setAppLanguage(),
                this._goBack(e))
            }
            ,
            this._setAppLanguage = ()=>{
                d.track(new g.LanguageUIChangedEvent(p.getLocale(),this.state.currentLocale)),
                this.state.currentLocale ? u.setLocale(this.state.currentLocale) : u.resetLocaleToSystem()
            }
            ,
            this._onResetLanguagePress = e=>{
                e.preventDefault();
                const t = p.getString("SettingsLanguages.ResetLanguageOption");
                _.maybeAnnounceForAccessibility(p.getString("SettingsLanguages.LanguageSelectedAnnouncement", {
                    language: t
                }), 1e3),
                this.setState({
                    currentLocale: ""
                })
            }
            ,
            this._onLanguagePress = e=>{
                const t = u.getLanguageTitle(e);
                _.maybeAnnounceForAccessibility(p.getString("SettingsLanguages.LanguageSelectedAnnouncement", {
                    language: t
                }), 1e3),
                this.setState({
                    currentLocale: e
                })
            }
        }
        static getHeaderText() {
            return p.getString("SettingsLanguages.LanguageLabel")
        }
        _buildState(e, t) {
            const i = [{
                key: "reset-language-row",
                template: "reset-language-row",
                height: 60,
                accessibilityTrait: s.Types.AccessibilityTrait.Button
            }];
            n.each(u.sortedLanguageInfo, e=>{
                i.push({
                    key: e.code,
                    template: "language-row",
                    height: 60,
                    accessibilityTrait: s.Types.AccessibilityTrait.Button
                })
            }
            );
            const o = this._getRootViewId()
              , r = {
                isMobileScreenSize: C.default.isMobileScreenSize(o),
                safeAreaHorizontalInsets: y.default.horizontalInsets(a.HorizontalInsetDefault),
                isMobileScreenReaderEnabled: f.default.isMobileScreenReaderEnabled(),
                items: i
            };
            if (t) {
                const e = S.default.getUserPreferencesLocal();
                r.currentLocale = e.locale ? p.getLocale() : "",
                r.initialLocale = r.currentLocale || ""
            }
            return r
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this._doneButtonRef && this._doneButtonRef.requestFocus && this.state.currentLocale !== t.currentLocale && this._doneButtonRef.requestFocus()
        }
        render() {
            const e = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                closeButtonType: this.props.isAloneInNavStack ? b.CloseButtonType.Close : b.CloseButtonType.Back
            };
            let t;
            if (!(this.props.isAloneInNavStack && !this.state.isMobileScreenReaderEnabled && this._getContext().isPresentedInSplitView)) {
                const i = this.state.currentLocale !== this.state.initialLocale ? {
                    text: p.getString("Global.ApplyButtonTitle"),
                    onPress: this._onDoneButtonPress,
                    setButtonRef: this._onDoneButtonRef
                } : void 0;
                t = s.createElement(b.SimplePanelHeader, {
                    panelName: this._getHeaderText(this.state),
                    leftButton: e,
                    rightButtons: i,
                    delayHeaderFocus: !1
                })
            }
            return s.createElement(s.View, {
                style: [k.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, t, s.createElement(o.VirtualListView, {
                itemList: this.state.items,
                renderItem: this._renderItem,
                animateChanges: !0,
                horizontalPadding: this.state.safeAreaHorizontalInsets,
                accessibilityLabel: this._getHeaderText(this.state)
            }))
        }
        _getHeaderText(e) {
            return I.getHeaderText()
        }
    }
    t.default = I
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(18)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._fromLlcc = e,
            this._toLlcc = t
        }
        getEventName() {
            return "language"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e.FromLlcc = this._fromLlcc,
            e.ToLlcc = this._toLlcc,
            e.CurrentCountryCode = n.getCountryCode() || "Unknown",
            e
        }
    }
    t.LanguageSlashCommandChangedEvent = class extends s {
        getActionName() {
            return "slashcommand_change_language"
        }
    }
    ;
    t.LanguageUIChangedEvent = class extends s {
        getActionName() {
            return "ui_change_language"
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(491)
      , r = i(102)
      , a = i(6)
      , l = i(50)
      , c = i(42)
      , d = i(10)
      , u = i(143)
      , g = i(77)
      , h = i(2)
      , p = i(27)
      , m = i(3)
      , S = i(5)
      , C = i(108)
      , y = i(4)
      , f = i(132)
      , _ = i(20)
      , b = i(17)
      , v = i(524)
      , T = i(430)
      , P = i(695)
      , A = i(93)
      , k = i(177)
      , I = i(360)
      , w = i(24)
      , N = i(37)
      , M = i(60)
      , E = i(84)
      , x = i(103)
      , D = i(44)
      , L = i(19)
      , R = i(73)
      , B = i(66)
      , O = i(8)
      , F = i(11)
      , V = i(131)
      , U = i(14)
      , H = i(15)
      , W = i(12)
      , z = i(35)
      , G = i(45)
      , K = i(9)
      , j = i(90)
      , q = S.lazyProperties({
        panel: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        entry: ()=>S.lazyProperties({
            container: ()=>o.Styles.createViewStyle({
                paddingVertical: 10,
                flexDirection: "row",
                alignItems: "center",
                justifyContent: "space-between",
                flex: 1
            }),
            status: ()=>o.Styles.createTextStyle({
                marginLeft: 10,
                flex: 1,
                textAlign: "right"
            })
        }),
        includeInSearch: ()=>S.lazyProperties({
            row: ()=>o.Styles.createViewStyle({
                marginVertical: 4,
                flexDirection: "row",
                alignItems: "center",
                justifyContent: "space-between",
                flex: 1
            })
        }),
        listItemContainer: ()=>S.lazyProperties({
            row: ()=>o.Styles.createViewStyle({
                flex: 1,
                paddingHorizontal: 20
            })
        }),
        searchExplanationRow: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            marginTop: 15,
            marginBottom: 25,
            flex: 1
        }),
        explanationNoMargins: ()=>o.Styles.createViewStyle({
            marginTop: 0,
            marginBottom: 10
        }),
        iconFont: ()=>o.Styles.createTextStyle({
            paddingHorizontal: 15
        }),
        searchTextExplanationColumn: ()=>o.Styles.createViewStyle({
            flex: 1,
            paddingRight: 15
        })
    });
    class Q extends W.default {
        constructor() {
            super(...arguments),
            this._renderVerificationStatus = ()=>{
                let e, t = [q.entry.status];
                return this.props.entry.VerifiedState === s.VerificationState.Verified && this.props.entry.Searchable ? e = y.getString("ManageSearchInfoPanel.SearchVisibilityStateEnabled") : this.props.entry.VerifiedState === s.VerificationState.Verified ? e = y.getString("ManageSearchInfoPanel.SearchVisibilityStateDisabled") : (e = y.getString("ManageSearchInfoPanel.SearchVisibilityStateUnverified"),
                t.push(this._themeStyles.destructiveTextColorStyle)),
                o.createElement(H.BodyText, {
                    style: t,
                    numberOfLines: 2,
                    ref: this._onVerificationStatusTextRef
                }, e)
            }
            ,
            this._onVerificationStatusTextRef = e=>{
                this._verificationStatusText = e || void 0
            }
        }
        _buildState(e, t) {
            const i = {};
            return t && (i.isLoading = !1),
            i
        }
        render() {
            let e, t;
            this.state.isLoading ? e = o.createElement(B.default, {
                size: d.SXActivityIndicatorSize.ExtraSmall,
                tintColor: this._themeColors.primaryIconColor
            }) : this.props.isEditable && (e = this._renderVerificationStatus());
            const i = {
                style: U.flexOne,
                numberOfLines: 2
            }
              , n = this.getLabel();
            return t = this.props.isEditable ? o.createElement(H.BodyText, Object.assign({
                bold: !0
            }, i), n) : o.createElement(H.Subtitle, Object.assign({}, i), n),
            this.onPress ? o.createElement(o.Button, {
                accessibilityLabel: n,
                style: q.entry.container,
                onPress: this.onPress,
                disabled: !this.props.isEditable
            }, t, e) : o.createElement(o.View, {
                style: q.entry.container
            }, t, e)
        }
    }
    class X extends Q {
        constructor() {
            super(...arguments),
            this.onPress = e=>{
                e.stopPropagation();
                const t = {
                    anchor: ()=>this._verificationStatusText,
                    useTheme: !0,
                    positionPriorities: ["bottom", "top"],
                    popupOffset: {
                        x: 60,
                        y: 5
                    },
                    hideDivider: !0
                };
                R.default.showWithOptions({
                    id: X._menuId,
                    config: t,
                    getMenuItems: this._getMenuItems,
                    handleMenuCommand: this._onHandleMenuCommand,
                    destructiveButtonIndex: 1,
                    rootViewId: this._getRootViewId(),
                    invokingEvent: e
                })
            }
            ,
            this._getMenuItems = ()=>{
                const e = [];
                return this.props.entry.VerifiedState !== s.VerificationState.Verified && this.props.canVerifyPhone ? e.push({
                    text: y.getString("ManageSearchInfoPanel.PhoneVerificationActionVerify"),
                    command: "verify"
                }) : this.props.entry.VerifiedState === s.VerificationState.Verified && (this.props.entry.Searchable ? e.push({
                    text: y.getString("ManageSearchInfoPanel.PhoneVerificationActionDisable"),
                    command: "disable"
                }) : e.push({
                    text: y.getString("ManageSearchInfoPanel.PhoneVerificationActionEnable"),
                    command: "enable"
                })),
                e
            }
            ,
            this._onHandleMenuCommand = e=>{
                switch (e) {
                case "disable":
                    this.setState({
                        isLoading: !0
                    });
                    const t = this.props.entry.Phone;
                    s.default.hidePhoneNumberInSearch(t).then(()=>{
                        T.default.isUserPhoneVerified().then(()=>T.default.removePhoneFromProfile(t.Number, t.CountryIsoCode, t.CountryCallingCode).then(n.noop))
                    }
                    , t=>{
                        this._logServiceError(e, t)
                    }
                    ).finally(()=>{
                        m.track(new I.PhoneNumberDiscoverabilityPrivacyEvent(!1,I.PhoneDiscoverabilityOrigin.ApplicationSettings)),
                        this._updateVerificationState(y.getString("ManageSearchInfoPanel.SearchVisibilityStateDisabled"))
                    }
                    );
                    break;
                case "enable":
                    this.setState({
                        isLoading: !0
                    }),
                    s.default.showPhoneNumberInSearch(this.props.entry.Phone, this.props.entry.Source).then(n.noop, t=>{
                        this._logServiceError(e, t)
                    }
                    ).finally(()=>{
                        m.track(new I.PhoneNumberDiscoverabilityPrivacyEvent(!0,I.PhoneDiscoverabilityOrigin.ApplicationSettings)),
                        this._updateVerificationState(y.getString("ManageSearchInfoPanel.SearchVisibilityStateEnabled"))
                    }
                    );
                    break;
                case "verify":
                    P.default.startPhoneNumberVerificationFromManageSearchPanel(this._getRootViewId(), this.props.entry.Phone.Number);
                    break;
                case "cancel":
                case R.SXActionMenuCancel:
                    break;
                default:
                    K.switchStatementExhaustiveChecking(e)
                }
            }
            ,
            this._updateVerificationState = e=>{
                this.isComponentMounted() && (this.setState({
                    isLoading: !1
                }),
                f.default.scheduleMessage({
                    key: "phoneSearchableText",
                    textMessage: e,
                    color: O.Color.gray300,
                    rootViewId: this._getRootViewId()
                }))
            }
        }
        getLabel() {
            const e = this.props.entry.Phone
              , t = A.default.parse(e.Number, e.CountryCallingCode);
            return t ? A.default.format(t, A.PhoneNumberFormat.NATIONAL) : e.Number
        }
        _logServiceError(e, t) {
            m.log(h.LogTraceArea.ManageSearchInfo, "Service error while trying to " + e + " phone number. Error: " + L.errorAsString(t))
        }
    }
    X._menuId = R.default.menuId();
    class J extends Q {
        getLabel() {
            return this.props.entry.EmailAddress
        }
    }
    class $extends l.default {
        constructor() {
            super(...arguments),
            this._onPressProfileVisiblityButton = ()=>{
                b.navigateToConnectedUsersList(this._getContext())
            }
            ,
            this._onChangeIncludeMeInSearch = (e,t)=>{
                this.state.includeMeInSearchEnabled !== t && (k.setIncludeMeInSearchPrivacyOption({
                    searchable: t,
                    recommendable: this.state.includeMeInRecommendationEnabled
                }),
                m.track(new I.AppearInSearchEvent(t,this.props.origin)),
                t && T.default.isUserPhoneVerified().then(e=>{
                    if (e) {
                        const e = s.default.getEntries();
                        n.each(e, (e,t)=>{
                            e instanceof s.PhoneABCHEntry && (e.VerifiedState !== s.VerificationState.Verified || e.Searchable || "Msa" !== e.Source || s.default.showPhoneNumberInSearch(e.Phone, e.Source).then(n.noop, e=>{
                                m.log(h.LogTraceArea.ManageSearchInfo, "Service error while trying to make phone number searchable. Error: " + L.errorAsString(e))
                            }
                            ))
                        }
                        )
                    }
                }
                ))
            }
            ,
            this._onChangeIncludeMeInRecommendation = (e,t)=>{
                this.state.includeMeInRecommendationEnabled !== t && (k.setIncludeMeInSearchPrivacyOption({
                    searchable: this.state.includeMeInSearchEnabled,
                    recommendable: t
                }),
                m.track(new I.AppearInSuggestionsEvent(t,this.props.origin)))
            }
            ,
            this._onChangeReceiveContactsSuggestions = (e,t)=>{
                this.state.receiveContactSuggestionsEnabled !== t && (v.setReceiveSuggestionsToggleValue(t),
                m.track(new I.ReceiveContactSuggestionsEvent(t,this.props.origin)))
            }
            ,
            this._onAddPhoneNumberPress = ()=>{
                P.default.startPhoneNumberVerificationFromManageSearchPanel(this._getRootViewId())
            }
            ,
            this.getExplanationStyles = ()=>[q.searchExplanationRow, q.explanationNoMargins],
            this._renderAppearInSearchResultsExplanation = ()=>{
                const e = y.getString("ManageSearchInfoPanel.SearchResultsSecondaryExplanationSplitPolicySettings")
                  , t = z.default.appendLanguageUrlParameter(a.default.getConfigSettingsNoSubscription().privacyUrl.splitSearchSuggestionsSettingsUrl);
                return this._renderSuggestionsAndSearchExplanationWithLearnMoreLink(e, t)
            }
            ,
            this._renderAppearInSuggestionsExplanation = ()=>{
                if (!this.state.enableReceiveContactSuggestionsSettings)
                    return;
                const e = y.getString("ManageSearchInfoPanel.RecommendationsSecondaryExplanationSplitPolicySettings")
                  , t = z.default.appendLanguageUrlParameter(a.default.getConfigSettingsNoSubscription().privacyUrl.appearInSuggestionsUrl);
                return this._renderSuggestionsAndSearchExplanationWithLearnMoreLink(e, t)
            }
            ,
            this._renderReceiveContactSuggestionsExplanation = ()=>{
                if (!this.state.enableReceiveContactSuggestionsSettings)
                    return;
                const e = y.getString("ManageSearchInfoPanel.ReceiveContactSuggestionsExplanation")
                  , t = z.default.appendLanguageUrlParameter(a.default.getConfigSettingsNoSubscription().privacyUrl.receiveContactSuggestionsUrl);
                return this._renderSuggestionsAndSearchExplanationWithLearnMoreLink(e, t)
            }
            ,
            this._renderSuggestionsAndSearchExplanationWithLearnMoreLink = (e,t)=>{
                let i;
                return o.createElement(o.View, null, o.createElement(o.View, {
                    style: this.getExplanationStyles()
                }, o.createElement(o.View, {
                    style: q.searchTextExplanationColumn,
                    accessibilityLabel: i ? i.label : void 0,
                    accessibilityTraits: i ? i.traits : void 0,
                    importantForAccessibility: void 0,
                    tabIndex: void 0,
                    onPress: void 0,
                    onKeyPress: void 0
                }, o.createElement(H.Caption, {
                    accessibilityHidden: !1
                }, e, this._renderLearnMoreLink(t)))), o.createElement(g, null))
            }
            ,
            this._onLearnMorePressed = (e,t)=>{
                C.openUrlWithParams({
                    origin: h.BrowserOrigin.SearchSuggestionsSettings,
                    url: t,
                    componentContext: this._getContext()
                })
            }
            ,
            this._onLearnMoreKeyPressed = (e,t)=>u.default.maybeHandleKeyPress(e, this._onLearnMorePressed.bind(t)),
            this._onLearnMorePressedForProfile = ()=>{
                const e = z.default.appendLanguageUrlParameter(a.default.getConfigSettingsNoSubscription().privacyUrl.profileLearnMoreUrl);
                C.openUrlWithParams({
                    origin: h.BrowserOrigin.PrivacyProfile,
                    url: e,
                    componentContext: this._getContext()
                })
            }
            ,
            this._onLearnMoreKeyPressedForProfile = e=>u.default.maybeHandleKeyPress(e, this._onLearnMorePressedForProfile)
        }
        _buildState(e, t) {
            const i = s.default.getEntries()
              , {searchable: n, recommendable: o} = k.getIncludeMeInSearchPrivacyOption();
            return {
                entries: i,
                includeMeInSearchEnabled: n,
                includeMeInRecommendationEnabled: o,
                receiveContactSuggestionsEnabled: v.isReceiveSuggestionsToggleEnabled(),
                enableReceiveContactSuggestionsSettings: v.shouldDisplayRecommendationsSettings(),
                isUserAMinor: G.isUserAMinor(_.getSkypeMri()),
                safeAreaHorizontalInsets: N.default.horizontalInsets(d.HorizontalInsetDefault),
                isFullScreenModal: w.default.isMobileScreenSize(this._getRootViewId())
            }
        }
        _getHeaderText(e) {
            return y.getString("ManageSearchInfoPanel.PanelTitleContactsPrivacy")
        }
        render() {
            const e = [q.listItemContainer.row];
            M.hasHorizontalSafeAreas(this.state.safeAreaHorizontalInsets) && e.push(M.horizontalPaddingStyle(this.state.safeAreaHorizontalInsets));
            const t = [this._getPhoneAndMailSection(), this._getSearchTogglesSection(), this._getProfileSection()];
            return o.createElement(o.View, {
                style: q.panel
            }, this._getHeader(), o.createElement(o.ScrollView, {
                style: U.flexOne
            }, o.createElement(o.View, {
                style: e
            }, t)))
        }
        _getProfileSection() {
            return o.createElement(o.View, {
                key: "profile"
            }, this._getProfileHeader(), this._renderProfileVisibilityExplanation(), this._getProfileVisiblityButton())
        }
        _getPhoneAndMailSection() {
            return o.createElement(o.View, {
                key: "phoneMail"
            }, this._getPhoneSection(), this._getEmailSection())
        }
        _getPhoneSection() {
            const e = this._getPhoneNumbers();
            if (n.size(e) > 0)
                return o.createElement(o.View, {
                    key: "phone"
                }, this._getPhoneHeader(), e)
        }
        _getEmailSection() {
            const e = this._getEmails();
            return 0 === n.size(e) ? void 0 : o.createElement(o.View, {
                key: "email"
            }, this._getMailHeader(), e)
        }
        _getPhoneHeader() {
            return o.createElement(o.View, {
                style: U.flexOne
            }, o.createElement(E.SectionTitle, {
                title: y.getString("ManageSearchInfoPanel.PhoneNumberSectionSubtitleCaps")
            }), o.createElement(H.Caption, {
                numberOfLines: 3
            }, y.getString("ManageSearchInfoPanel.PhoneNumberSectionExplanation")))
        }
        _getPhoneNumbers() {
            let e = [];
            return n.each(this.state.entries, t=>{
                t instanceof s.PhoneABCHEntry && e.push(o.createElement(o.View, {
                    key: "phone" + t.Phone
                }, o.createElement(X, {
                    entry: t,
                    canVerifyPhone: this.state.includeMeInSearchEnabled,
                    isEditable: !0
                }), o.createElement(g, null)))
            }
            ),
            e
        }
        _getAddPhoneNumber() {
            return o.createElement(o.View, null, o.createElement(o.Button, {
                onPress: this._onAddPhoneNumberPress,
                style: q.entry.container,
                accessibilityLabel: y.getString("ManageSearchInfoPanel.AddMobileNumberLabel")
            }, o.createElement(H.BodyText, {
                bold: !0,
                accessibilityHidden: !0
            }, y.getString("ManageSearchInfoPanel.AddMobileNumberLabel")), o.createElement(p.default, {
                icon: F.SkypeIcon.Plus,
                size: F.IconSize.size24,
                color: this._themeColors.primaryIconColor,
                style: q.iconFont
            })), o.createElement(g, null))
        }
        _getEmails() {
            let e = [];
            return n.each(this.state.entries, t=>{
                t instanceof s.EmailABCHEntry && "Msa" !== t.Source && e.push(o.createElement(o.View, {
                    key: "email" + t.EmailAddress
                }, o.createElement(J, {
                    entry: t,
                    isEditable: !1
                }), o.createElement(g, null)))
            }
            ),
            e
        }
        _getMailHeader() {
            return o.createElement(o.View, {
                style: U.flexOne
            }, o.createElement(E.SectionTitle, {
                title: y.getString("ManageSearchInfoPanel.EmailSectionSubtitleCaps")
            }), o.createElement(H.Caption, {
                numberOfLines: 3
            }, y.getString("ManageSearchInfoPanel.EmailSectionExplanation")))
        }
        _getSearchTogglesHeader() {
            return o.createElement(E.SectionTitle, {
                key: "searchHeader",
                title: y.getString("ManageSearchInfoPanel.SearchResultsHeaderTitleCapsSplitPolicySettings")
            })
        }
        _getProfileHeader() {
            return o.createElement(E.SectionTitle, {
                key: "profileHeader",
                title: y.getString("ManageSearchInfoPanel.ProfileSectionHeaderCaps")
            })
        }
        _getSearchTogglesSection() {
            let e;
            return e = o.createElement(o.View, null, this._getReceiveContactSuggestionsToggle(), this._renderReceiveContactSuggestionsExplanation(), this._getAppearInSuggestionsToggle(), this._renderAppearInSuggestionsExplanation(), this._getAppearInSearchResultsToggle(), this._renderAppearInSearchResultsExplanation()),
            o.createElement(o.View, {
                key: "toggles"
            }, this._getSearchTogglesHeader(), e)
        }
        _renderProfileVisibilityExplanation() {
            let e;
            const t = y.getString("AudioVideoSettings.LearnMore")
              , i = o.createElement(V.default, {
                url: z.default.appendLanguageUrlParameter(a.default.getConfigSettingsNoSubscription().privacyUrl.profileLearnMoreUrl),
                onPress: this._onLearnMorePressedForProfile,
                blue: !0,
                key: "profileLearnMoreLink "
            }, t);
            return o.createElement(o.View, null, o.createElement(o.View, {
                style: this.getExplanationStyles()
            }, o.createElement(o.View, {
                style: q.searchTextExplanationColumn,
                accessibilityLabel: e ? e.label : void 0,
                accessibilityTraits: e ? e.traits : void 0,
                importantForAccessibility: void 0,
                tabIndex: void 0,
                onPress: void 0,
                onKeyPress: void 0
            }, o.createElement(H.Caption, {
                accessibilityHidden: !1,
                numberOfLines: 3
            }, y.getParts("ManageSearchInfoPanel.ProfileSectionExplanation", {
                learnMoreLink: i
            })))))
        }
        _getProfileVisiblityButton() {
            return o.createElement(j.WideButton, {
                key: "profileVisibility",
                label: y.getString("ManageSearchInfoPanel.ProfileVisiblityButton"),
                labelStyle: x.styles.titleMediumSemiLarge,
                onPressed: this._onPressProfileVisiblityButton
            })
        }
        _getHeader() {
            const e = {
                closeButtonType: this.props.isAloneInNavStack ? D.CloseButtonType.Close : D.CloseButtonType.Back
            }
              , t = y.getString("ManageSearchInfoPanel.PanelTitleContactsPrivacy");
            return o.createElement(D.SimplePanelHeader, {
                panelName: t,
                leftButton: e,
                allowTextWrap: !0
            })
        }
        _getAppearInSuggestionsToggle() {
            if (!this.state.enableReceiveContactSuggestionsSettings)
                return;
            const e = y.getString("UserSettingsPanel.IncludeMeInRecommendation")
              , t = y.getString("ManageSearchInfoPanel.RecommendationsSecondaryExplanationSplitPolicySettings");
            return o.createElement(r, {
                key: "includeMeInRecommendation",
                style: q.includeInSearch.row,
                isOn: this.state.includeMeInRecommendationEnabled,
                accessibilityLabel: c.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeIncludeMeInRecommendation,
                showSpinner: n.isUndefined(this.state.includeMeInRecommendationEnabled)
            }, o.createElement(E.SwitchLabel, {
                title: e
            }))
        }
        _getReceiveContactSuggestionsToggle() {
            if (!this.state.enableReceiveContactSuggestionsSettings)
                return;
            const e = y.getString("UserSettingsPanel.ReceiveContactSuggestions")
              , t = y.getString("ManageSearchInfoPanel.ReceiveContactSuggestionsExplanation");
            return o.createElement(r, {
                key: "receiveContactsSuggestions",
                style: q.includeInSearch.row,
                isOn: this.state.receiveContactSuggestionsEnabled,
                accessibilityLabel: c.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeReceiveContactsSuggestions,
                showSpinner: n.isUndefined(this.state.receiveContactSuggestionsEnabled)
            }, o.createElement(E.SwitchLabel, {
                title: e
            }))
        }
        _getAppearInSearchResultsToggle() {
            return o.createElement(r, {
                key: "includeMeInSearchAndSuggestions",
                style: q.includeInSearch.row,
                isOn: !this.state.isUserAMinor && this.state.includeMeInSearchEnabled,
                accessibilityLabel: y.getString("UserSettingsPanel.IncludeMeInSearchAndSuggestions"),
                onChange: this._onChangeIncludeMeInSearch,
                showSpinner: n.isUndefined(this.state.includeMeInSearchEnabled),
                disable: this.state.isUserAMinor
            }, o.createElement(E.SwitchLabel, {
                title: y.getString("UserSettingsPanel.IncludeMeInSearchAndSuggestionsSplitPolicySettings"),
                subtitle: this.state.isUserAMinor ? y.getString("UserSettingsPanel.DontIncludeMinorsInSearchAndSuggestions") : void 0
            }))
        }
        _renderLearnMoreLink(e) {
            return o.createElement(V.default, {
                url: e,
                onPress: this._onLearnMorePressed,
                blue: !0,
                key: "suggestionsLearnMoreLink"
            }, " ", y.getString("AudioVideoSettings.LearnMore"))
        }
    }
    t.default = $
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(50)
      , s = i(10)
      , r = i(5)
      , a = i(4)
      , l = i(3016)
      , c = i(22)
      , d = i(44)
      , u = i(14)
      , g = r.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        containerDesktop: ()=>n.Styles.createViewStyle({
            marginHorizontal: 20
        }),
        containerMobile: ()=>n.Styles.createViewStyle({
            marginHorizontal: 10
        })
    });
    class h extends o.default {
        constructor(e) {
            super(e),
            this._leftButton = {
                closeButtonType: d.CloseButtonType.Back
            }
        }
        static getHeaderText() {
            return a.getString("UserSettingsPanel.ManageContactsTitle")
        }
        _buildState(e, t) {
            return {
                isUsingStackNavigationContext: c.default.isUsingStackNavigationContext()
            }
        }
        render() {
            const e = this.state.isUsingStackNavigationContext ? g.containerMobile : g.containerDesktop;
            return n.createElement(n.View, {
                style: [g.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, n.createElement(d.SimplePanelHeader, {
                panelName: a.getString("UserSettingsPanel.ManageContactsTitle"),
                delayHeaderFocus: this._getContext().isPresentedByMobileStackNavigator,
                leftButton: this._leftButton
            }), n.createElement(n.ScrollView, {
                style: u.flexOne
            }, n.createElement(n.View, {
                style: e
            }, n.createElement(l.default, {
                buttonStyles: this.state.isUsingStackNavigationContext ? void 0 : s.ListItem.small.shortHeightStyle
            }))))
        }
        _getHeaderText(e) {
            return h.getHeaderText()
        }
    }
    e.exports = h
}
, , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(0)
      , r = i(568)
      , a = i(50)
      , l = i(10)
      , c = i(2)
      , d = i(3)
      , u = i(121)
      , g = i(5)
      , h = i(4)
      , p = i(17)
      , m = i(349)
      , S = i(430)
      , C = i(695)
      , y = i(1149)
      , f = i(47)
      , _ = i(393)
      , b = i(8)
      , v = i(18)
      , T = i(23)
      , P = i(11)
      , A = i(49)
      , k = i(15)
      , I = i(29)
      , w = i(9)
      , N = i(183)
      , M = g.lazyProperties({
        codeContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "center"
        }),
        codeInput: ()=>s.Styles.createTextInputStyle({
            padding: 6,
            font: T.font.uiDisplayRegular,
            fontSize: T.fontSize.size32,
            backgroundColor: b.Color.transparent,
            color: b.Color.white,
            width: 48,
            height: 48,
            textAlignVertical: "top"
        }),
        resendContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between",
            marginTop: 40
        }),
        resendButton: ()=>s.Styles.createButtonStyle({
            marginLeft: 20,
            borderRadius: 30,
            backgroundColor: b.Color.black
        }),
        callmeButton: ()=>s.Styles.createButtonStyle({
            marginLeft: 20,
            marginTop: 20,
            borderRadius: 30,
            backgroundColor: b.Color.black
        }),
        resendButtonText: ()=>s.Styles.createTextStyle({
            color: b.Color.white,
            padding: 5,
            alignSelf: "center",
            textAlign: "center"
        }),
        timerText: ()=>s.Styles.createTextStyle({
            color: b.Color.white,
            font: T.font.uiDisplayBold,
            fontSize: T.fontSize.size18,
            alignSelf: "center",
            marginRight: 20
        }),
        animationContainer: ()=>s.Styles.createViewStyle({
            height: 300,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible"
        }),
        errorDescriptionText: ()=>s.Styles.createTextStyle({
            color: b.Color.pink
        }),
        descriptionText: ()=>s.Styles.createTextStyle({
            marginBottom: 10,
            color: b.Color.white,
            paddingHorizontal: 20,
            alignItems: "center",
            textAlign: "center"
        })
    });
    class E extends a.default {
        constructor() {
            super(...arguments),
            this._automaticallyFocusKeyboardOnce = !1,
            this._stopWatchTimer = 0,
            this._isSMSReaderRegistered = !1,
            this._onVerifyingTextContentViewRef = e=>{
                this._verifyingTextContentView = e || void 0
            }
            ,
            this._onVerifiedTextContentViewRef = e=>{
                this._verifiedTextContentView = e || void 0
            }
            ,
            this._onOnboardingDialogWizardRef = e=>{
                if (e) {
                    this._onboardingDialogWizard = e;
                    let t = !!this.state && this.state.verified;
                    this._onboardingDialogWizard.disableNextButton(!t)
                }
            }
            ,
            this._onTextInputRefCode1 = e=>{
                this._textInputCode1 = e || void 0
            }
            ,
            this._onTextInputRefCode2 = e=>{
                this._textInputCode2 = e || void 0
            }
            ,
            this._onTextInputRefCode3 = e=>{
                this._textInputCode3 = e || void 0
            }
            ,
            this._onTextInputRefCode4 = e=>{
                this._textInputCode4 = e || void 0
            }
            ,
            this._onCloseButtonClicked = ()=>{
                this._sendScenarioEvent(y.PnvScenarioStep.CodeBack),
                this._navigateToPnvEnterNumber()
            }
            ,
            this._onSkipButtonClicked = ()=>{
                this._sendScenarioEvent(y.PnvScenarioStep.CodeSkip),
                this._goNext()
            }
            ,
            this._onKeyDown = e=>!(e.keyCode !== u.ENTER || !this.state.verified) && (this._goNext(),
            !0),
            this._onChangeTextCode1 = e=>{
                this._textInputCode2 && e.match(/^\d+$/) && this._textInputCode2.requestFocus(),
                this._checkToken(e, this.state.code2, this.state.code3, this.state.code4),
                this.setState({
                    code1: e
                })
            }
            ,
            this._onChangeTextCode2 = e=>{
                this._textInputCode3 && e.match(/^\d+$/) && this._textInputCode3.requestFocus(),
                this._checkToken(this.state.code1, e, this.state.code3, this.state.code4),
                this.setState({
                    code2: e
                })
            }
            ,
            this._onChangeTextCode3 = e=>{
                this._textInputCode4 && e.match(/^\d+$/) && this._textInputCode4.requestFocus(),
                this._checkToken(this.state.code1, this.state.code2, e, this.state.code4),
                this.setState({
                    code3: e
                })
            }
            ,
            this._onChangeTextCode4 = e=>{
                this._checkToken(this.state.code1, this.state.code2, this.state.code3, e),
                this.setState({
                    code4: e
                })
            }
            ,
            this._onKeyPress2 = e=>{
                this._textInputCode1 && e.keyCode === u.DELETE && !this.state.code2 && this._textInputCode1.requestFocus()
            }
            ,
            this._onKeyPress3 = e=>{
                this._textInputCode2 && e.keyCode === u.DELETE && !this.state.code3 && this._textInputCode2.requestFocus()
            }
            ,
            this._onKeyPress4 = e=>{
                this._textInputCode3 && e.keyCode === u.DELETE && !this.state.code4 && this._textInputCode3.requestFocus()
            }
            ,
            this._onSubmitEditing = ()=>{
                this._submitCode(this._getToken())
            }
            ,
            this._onPressNextButton = e=>{
                e.stopPropagation(),
                this._submitCode(this._getToken())
            }
            ,
            this._onPressResendButton = e=>{
                e.stopPropagation(),
                this._resendCode(S.VerificationMethod.SMS),
                this._sendScenarioEvent(y.PnvScenarioStep.CodeResend)
            }
            ,
            this._onPressCallmeButton = e=>{
                e.stopPropagation(),
                this._resendCode(S.VerificationMethod.Voice),
                this._sendScenarioEvent(y.PnvScenarioStep.CodeCall)
            }
        }
        _buildState(e, t) {
            let i = {}
              , n = S.default.getLastPhoneVerificationStatus();
            return i.phoneNumber = n.PhoneNumber,
            i.countryIsoCode = n.CountryIsoCode,
            i.countryCallingCode = n.CountryCallingCode,
            i.errorCode = n.ErrorCode,
            i.verified = n.Verified,
            t && n.ThrottleDuration && n.ThrottleDuration > 0 && (i.resendButtonDisabled = !0),
            n.ErrorCode && (i.code1 = "",
            i.code2 = "",
            i.code3 = "",
            i.code4 = "",
            this._automaticallyFocusKeyboardOnce = !1),
            i
        }
        componentDidMount() {
            super.componentDidMount(),
            this.state.resendButtonDisabled && this._scheduleEnableResendButton(),
            s.Input.keyDownEvent.subscribe(this._onKeyDown),
            C.default.canAutoSubmitCode() && (this._isSMSReaderRegistered = !0,
            o.default.registerSMSReader("pnvsmsreader", e=>{
                if (e) {
                    let t;
                    n.each(e, e=>{
                        const i = e.match(/\b[0-9]{4}\b/);
                        i && 1 === i.length && (t = i[0])
                    }
                    ),
                    t && this._submitCode(t, !0)
                }
            }
            ))
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            f.isMobileScreenReaderEnabled() && (this._verifyingTextContentView && this.state.verifying && !t.verifying && (this._verifyingTextContentView.requestFocus(),
            v.getPlatformType() === c.PlatformType.Android && s.Accessibility.announceForAccessibility(h.getString("PhoneNumberVerification.EnterCodeVerifyingText"))),
            this._verifiedTextContentView && this.state.verified && !t.verified && this._verifiedTextContentView.requestFocus())
        }
        _componentDidRender() {
            if (super._componentDidRender(),
            !this._getToken() && this._textInputCode1 && !this._automaticallyFocusKeyboardOnce)
                if (this._automaticallyFocusKeyboardOnce = !0,
                f.shouldAnnounceForAccessibility()) {
                    const e = 500;
                    this._textInputCode1.setAccessibilityFocus(),
                    I.setTimeout(()=>{
                        this._textInputCode1 && this._textInputCode1.requestFocus()
                    }
                    , e)
                } else
                    this._textInputCode1.requestFocus()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._clearStopWatchTimer(),
            s.Input.keyDownEvent.unsubscribe(this._onKeyDown),
            this._isSMSReaderRegistered && o.default.unregisterSMSReader("pnvsmsreader")
        }
        _getCodeInputComponent() {
            const e = s.createElement(s.TextInput, {
                style: this._isValidCode(this.state.code1) ? M.codeInput : [M.codeInput, M.errorDescriptionText],
                value: this.state.code1,
                multiline: !1,
                blurOnSubmit: !0,
                placeholder: "•",
                placeholderTextColor: b.Color.white,
                keyboardType: "numeric",
                accessibilityLabel: h.getString("AccessibilityLabel.EnterCode"),
                maxLength: 1,
                ref: this._onTextInputRefCode1,
                onChangeText: this._onChangeTextCode1,
                onSubmitEditing: this._isPossibleToken(this._getToken()) ? this._onSubmitEditing : void 0,
                clearButtonMode: "never"
            })
              , t = s.createElement(s.TextInput, {
                style: this._isValidCode(this.state.code2) ? M.codeInput : [M.codeInput, M.errorDescriptionText],
                value: this.state.code2,
                multiline: !1,
                blurOnSubmit: !0,
                placeholder: "•",
                placeholderTextColor: b.Color.white,
                keyboardType: "numeric",
                accessibilityLabel: h.getString("AccessibilityLabel.EnterCode"),
                maxLength: 1,
                ref: this._onTextInputRefCode2,
                onKeyPress: this._onKeyPress2,
                onChangeText: this._onChangeTextCode2,
                onSubmitEditing: this._isPossibleToken(this._getToken()) ? this._onSubmitEditing : void 0,
                clearButtonMode: "never"
            })
              , i = s.createElement(s.TextInput, {
                style: this._isValidCode(this.state.code3) ? M.codeInput : [M.codeInput, M.errorDescriptionText],
                value: this.state.code3,
                multiline: !1,
                placeholder: "•",
                placeholderTextColor: b.Color.white,
                keyboardType: "numeric",
                accessibilityLabel: h.getString("AccessibilityLabel.EnterCode"),
                maxLength: 1,
                ref: this._onTextInputRefCode3,
                onKeyPress: this._onKeyPress3,
                onChangeText: this._onChangeTextCode3,
                onSubmitEditing: this._isPossibleToken(this._getToken()) ? this._onSubmitEditing : void 0,
                clearButtonMode: "never"
            })
              , n = s.createElement(s.TextInput, {
                style: this._isValidCode(this.state.code4) ? M.codeInput : [M.codeInput, M.errorDescriptionText],
                value: this.state.code4,
                multiline: !1,
                placeholder: "•",
                placeholderTextColor: b.Color.white,
                keyboardType: "numeric",
                accessibilityLabel: h.getString("AccessibilityLabel.EnterCode"),
                maxLength: 1,
                ref: this._onTextInputRefCode4,
                onKeyPress: this._onKeyPress4,
                onChangeText: this._onChangeTextCode4,
                onSubmitEditing: this._isPossibleToken(this._getToken()) ? this._onSubmitEditing : void 0,
                clearButtonMode: "never"
            });
            return s.createElement(s.View, {
                style: M.codeContainer
            }, e, t, i, n)
        }
        _getHeaderText(e) {
            return e.verified || e.verifying ? void 0 : h.getString("PhoneNumberVerification.EnterCodeHeaderText")
        }
        render() {
            const e = this.props.compositeNavContainerWidth || N.default.measureWindow(this._getRootViewId()).width
              , t = this.state.verified || this.state.verifying ? s.createElement(s.View, {
                style: M.animationContainer
            }, s.createElement(r, {
                animation: this.state.verified ? _.default.ONBOARDING_SYNC_ADDRESSBOOK : _.default.SPLASH_LOADER,
                loop: !0,
                shortSide: e
            })) : void 0
              , i = this.state.verified || this.state.verifying ? void 0 : this._getCodeInputComponent()
              , n = this._getHeaderText(this.state);
            let o, a;
            this.state.verified || this.state.verifying ? o = void 0 : this.state.errorCode ? (o = h.getString("PhoneNumberVerification.EnterCodeErrorText"),
            a = M.errorDescriptionText) : o = h.getString("PhoneNumberVerification.EnterCodeDescriptionText", {
                phonenumber: this.state.phoneNumber
            });
            const c = this.state.verified ? s.createElement(k.Header, {
                size: l.HeaderSize.h4,
                style: M.descriptionText,
                importantForAccessibility: s.Types.ImportantForAccessibility.Yes,
                ref: this._onVerifiedTextContentViewRef
            }, h.getString("PhoneNumberVerification.NumberVerifiedText")) : void 0
              , d = this.state.verifying ? s.createElement(k.Header, {
                size: l.HeaderSize.h4,
                style: M.descriptionText,
                importantForAccessibility: s.Types.ImportantForAccessibility.Yes,
                ref: this._onVerifyingTextContentViewRef
            }, h.getString("PhoneNumberVerification.EnterCodeVerifyingText")) : void 0
              , u = this.state.verifying ? s.createElement(k.BodyText, {
                style: M.descriptionText,
                disableThemeSubscription: !0
            }, h.getString("PhoneNumberVerification.EnterCodeTakeMinuteText")) : void 0
              , g = this.state.verified || this.state.verifying ? void 0 : this._getResendComponent()
              , p = this.state.verifying || this.state.verified
              , S = this.state.verifying || this.state.verified;
            return s.createElement(m, {
                headerText: n,
                descriptionElement: o,
                descriptionElementStyle: a,
                hideSkipButton: p,
                nextButtonIcon: this.props.nextButtonIcon || P.SkypeIcon.Ok,
                hideCloseButton: S,
                closeButtonIcon: A.backIcon(),
                hideNextButton: this.state.verifying,
                onSkipButtonClicked: this._onSkipButtonClicked,
                onNextButtonClicked: this._onPressNextButton,
                onCloseButtonClicked: this._onCloseButtonClicked,
                ref: this._onOnboardingDialogWizardRef,
                scenarioNavigator: this.props.scenarioNavigator,
                disablePresentationAnimation: !0,
                isContentScrollable: !1
            }, i, t, c, d, u, g)
        }
        _getResendComponent() {
            const e = s.createElement(s.Button, {
                style: M.resendButton,
                onPress: this._onPressResendButton,
                disabled: this.state.resendButtonDisabled
            }, s.createElement(s.Text, {
                style: [T.fontStyle.secondaryButton, M.resendButtonText]
            }, h.getString("PhoneNumberVerification.ResendCodeText")))
              , t = s.createElement(s.Button, {
                style: M.callmeButton,
                onPress: this._onPressCallmeButton,
                disabled: this.state.resendButtonDisabled
            }, s.createElement(s.Text, {
                style: [T.fontStyle.secondaryButton, M.resendButtonText]
            }, h.getString("PhoneNumberVerification.CallMeText")));
            return s.createElement(s.View, {
                style: M.resendContainer
            }, s.createElement(s.View, null, e, t), s.createElement(s.Text, {
                style: M.timerText,
                numberOfLines: 1
            }, this.state.timerText))
        }
        _componentId() {
            return "PnvEnterCodeDialog"
        }
        _goBack(e) {
            return d.log(c.LogTraceArea.Navigation, "PnvEnterCodeDialog._goBack, causeId: " + e),
            !!this.state.verifying || (this.state.verified ? this._closeDialog() : (this._navigateToPnvEnterNumber(),
            !0))
        }
        _navigateToPnvEnterNumber() {
            this._closeDialog(),
            p.navigateToPnvEnterNumber(void 0, this._getContext())
        }
        _closeDialog() {
            const e = w.newCauseId();
            return d.log(c.LogTraceArea.Navigation, "PnvEnterCodeDialog._closeDialog, causeId: " + e),
            this.props.scenarioNavigator ? (this.props.scenarioNavigator.goBack(),
            !0) : super._goBack(e)
        }
        _goNext() {
            this.props.scenarioNavigator ? this.props.scenarioNavigator.goNext() : this.props.onNextButtonPressed ? this.props.onNextButtonPressed() : this._closeDialog()
        }
        _isValidCode(e) {
            return !e || "•" === e || e.match(/^\d+$/)
        }
        _checkToken(e, t, i, n) {
            let o = !1;
            if (e && t && i && n) {
                const s = e + t + i + n;
                this._isPossibleToken(s) && (o = !0)
            }
            this._onboardingDialogWizard.disableNextButton(!o)
        }
        _getToken() {
            let e = "";
            return this.state.code1 && this.state.code2 && this.state.code3 && this.state.code4 && (e = this.state.code1 + this.state.code2 + this.state.code3 + this.state.code4),
            e
        }
        _isPossibleToken(e) {
            return !!e && (4 === e.length && e.match(/^\d+$/))
        }
        _submitCode(e, t=!1) {
            this._sendScenarioEvent(y.PnvScenarioStep.CodeNext),
            this.state.verified ? this._goNext() : S.default.isVerifyingToken(this.state.phoneNumber, this.state.countryIsoCode, this.state.countryCallingCode) || (this.setState({
                verifying: !0
            }),
            S.default.verifyPhoneWithToken(this.state.phoneNumber, this.state.countryIsoCode, this.state.countryCallingCode, e).then(e=>{
                t && e.Verified && I.setTimeout(()=>{
                    this.isComponentMounted() && this._goNext()
                }
                , 5e3)
            }
            ).finally(()=>{
                this.isComponentMounted() && this.setState({
                    verifying: !1
                })
            }
            ))
        }
        _scheduleEnableResendButton() {
            if (this.isComponentMounted()) {
                let e = S.default.getTokenRequestThrottleDurationInMS()
                  , t = this._convertMStoMinutesSeconds(e);
                this.setState({
                    timerText: t
                }),
                this._clearStopWatchTimer(),
                this._stopWatchTimer = I.setInterval(()=>{
                    let i = !0;
                    e -= 1e3,
                    e > 0 ? t = this._convertMStoMinutesSeconds(e) : (this._clearStopWatchTimer(),
                    t = "",
                    i = !1),
                    this.isComponentMounted() && this.setState({
                        timerText: t,
                        resendButtonDisabled: i
                    })
                }
                , 1e3)
            }
        }
        _clearStopWatchTimer() {
            this._stopWatchTimer && (I.clearInterval(this._stopWatchTimer),
            this._stopWatchTimer = 0)
        }
        _resendCode(e) {
            this.setState({
                resendButtonDisabled: !0
            }),
            S.default.provisionPhoneForVerification(this.state.phoneNumber, this.state.countryIsoCode, this.state.countryCallingCode, e, h.getLocale()).then(e=>{
                this.isComponentMounted() && this._textInputCode1 && this._textInputCode1.requestFocus()
            }
            ).finally(()=>{
                this._scheduleEnableResendButton()
            }
            )
        }
        _convertMStoMinutesSeconds(e) {
            const t = Math.floor(e / 6e4)
              , i = Math.floor((e - 6e4 * t) / 1e3);
            let n = i < 10 ? ":0" : ":";
            return t.toString() + n + i.toString()
        }
        _sendScenarioEvent(e) {
            this.state.verified || this.state.verifying || y.default.get().markStep(e)
        }
    }
    t.default = E
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(36)
      , o = i(0)
      , s = i(568)
      , r = i(51)
      , a = i(58)
      , l = i(10)
      , c = i(715)
      , d = i(81)
      , u = i(2)
      , g = i(80)
      , h = i(27)
      , p = i(3)
      , m = i(5)
      , S = i(4)
      , C = i(17)
      , y = i(22)
      , f = i(349)
      , _ = i(315)
      , b = i(430)
      , v = i(695)
      , T = i(93)
      , P = i(1149)
      , A = i(195)
      , k = i(47)
      , I = i(393)
      , w = i(8)
      , N = i(18)
      , M = i(23)
      , E = i(11)
      , x = i(49)
      , D = i(226)
      , L = i(15)
      , R = i(29)
      , B = i(9)
      , O = i(183)
      , F = m.lazyProperties({
        phoneNumberContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "center"
        }),
        underline: ()=>o.Styles.createViewStyle({
            borderBottomWidth: 1,
            borderStyle: "solid",
            borderColor: w.Color.white,
            marginTop: 2
        }),
        callingCodeView: ()=>o.Styles.createViewStyle({
            marginLeft: 50,
            marginRight: 10
        }),
        callingCodeText: ()=>o.Styles.createTextInputStyle({
            padding: 6,
            font: M.font.uiDisplayRegular,
            fontSize: M.controlFontSize.body,
            backgroundColor: w.Color.transparent,
            width: 50,
            height: 32,
            textAlignVertical: "top"
        }),
        phoneNumberView: ()=>o.Styles.createViewStyle({
            marginRight: 50
        }),
        textInput: ()=>o.Styles.createTextInputStyle({
            padding: 6,
            font: M.font.uiDisplayRegular,
            fontSize: M.controlFontSize.body,
            backgroundColor: w.Color.transparent,
            color: w.Color.white,
            marginLeft: 10,
            width: 200,
            height: 32,
            textAlignVertical: "top"
        }),
        animationContainer: ()=>o.Styles.createViewStyle({
            height: 300,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible"
        }),
        descriptionText: ()=>o.Styles.createTextStyle({
            marginBottom: 10,
            color: w.Color.white,
            paddingHorizontal: 20,
            alignItems: "center",
            textAlign: "center"
        }),
        errorDescriptionText: ()=>o.Styles.createTextStyle({
            color: w.Color.pink
        }),
        callMeButton: ()=>o.Styles.createButtonStyle({
            alignSelf: "center",
            justifyContent: "center",
            padding: 20,
            marginTop: 60,
            borderRadius: 30,
            backgroundColor: w.Color.black
        }),
        callMeButtonText: ()=>o.Styles.createTextStyle({
            color: w.Color.white,
            alignSelf: "center",
            textAlign: "center",
            fontSize: M.fontSize.size20
        }),
        iconStyle: ()=>o.Styles.createTextStyle({
            marginTop: 6,
            paddingLeft: 3
        }),
        countryList: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            marginTop: 50,
            marginLeft: 50,
            marginRight: 50
        }),
        countryTextContainer: ()=>o.Styles.createTextStyle({
            flexDirection: "row"
        }),
        countrySelectorPopupContainer: ()=>o.Styles.createViewStyle({
            height: 350,
            width: 300
        }),
        countryText: ()=>o.Styles.createTextStyle({
            color: w.Color.white,
            font: M.font.uiDisplayBold,
            fontSize: M.fontSize.size18,
            textAlign: "center",
            marginRight: 5
        })
    });
    class V extends r.default {
        constructor(e) {
            super(e),
            this._automaticallyFocusKeyboardOnce = !1,
            this._onVerifyingTextContentViewRef = e=>{
                this._verifyingTextContentView = e || void 0
            }
            ,
            this._onCountryListRef = e=>{
                this._countryListRef = e || void 0
            }
            ,
            this._onCountrySelectorPress = e=>{
                e.stopPropagation(),
                this._automaticallyFocusKeyboardOnce = !1,
                y.default.isUsingStackNavigationContext() ? (d.dismissAll(),
                C.navigateToCountrySelector(this._getContext())) : this._openCountrySelectorModal()
            }
            ,
            this._openCountrySelectorModal = ()=>{
                const e = e=>{
                    const t = this.state.countries[e];
                    A.default.setSelectedCountry(t),
                    a.default.dismissPopup("pnvCountrySelectorPopup", this._getRootViewId()),
                    this._numberTextInput && this._numberTextInput.requestFocus()
                }
                  , t = {
                    getAnchor: ()=>this._countryListRef,
                    renderPopup: (t,i,n,s)=>o.createElement(D, {
                        anchorPosition: t,
                        anchorOffset: i,
                        popupWidth: n,
                        popupHeight: s,
                        fillColor: this._themeColors.popoverBackgroundColor,
                        strokeColor: this._useDarkTheme() ? this._themeColors.popupBorderColor : void 0,
                        skipPopupAutoFocus: !0
                    }, o.createElement(o.View, {
                        style: F.countrySelectorPopupContainer
                    }, o.createElement(c, {
                        countries: this.state.countries,
                        onSelect: e
                    }))),
                    positionPriorities: ["top", "bottom"],
                    dismissIfShown: !0,
                    rootViewId: this._getRootViewId()
                };
                a.default.showPopup(t, "pnvCountrySelectorPopup")
            }
            ,
            this._onPressCallMeButton = e=>{
                e.stopPropagation(),
                P.default.get().markStep(P.PnvScenarioStep.NumberCall),
                this._submitPhoneNumber(b.VerificationMethod.Voice)
            }
            ,
            this._onNumberTextInputRef = e=>{
                this._numberTextInput = e || void 0
            }
            ,
            this._onCloseButtonClicked = ()=>{
                P.default.get().markStep(P.PnvScenarioStep.NumberBack),
                this._closeDialog()
            }
            ,
            this._onOnboardingDialogWizardRef = e=>{
                e && (this._onboardingDialogWizard = e,
                this._disableNextButton())
            }
            ,
            this._onChangeText = e=>{
                this.setState({
                    phoneNumber: e
                })
            }
            ,
            this._onSubmitEditing = ()=>{
                this._submitPhoneNumber()
            }
            ,
            this._onPressNextButton = e=>{
                e.stopPropagation(),
                this._submitPhoneNumber()
            }
            ,
            b.default.initialize()
        }
        _buildState(e, t) {
            let i = {}
              , n = b.default.getLastPhoneVerificationStatus();
            return !t && this.state.phoneNumber || (i.phoneNumber = n.PhoneNumber),
            t && e.initialPhoneNumber && (i.phoneNumber = e.initialPhoneNumber),
            i.countries = _.default.getCountries(),
            i.selectedCountry = A.default.getSelectedCountry(),
            i.errorCode = n.ErrorCode,
            i
        }
        componentDidMount() {
            super.componentDidMount(),
            A.default.initializeCountrySelection(),
            v.default.canPrefillPhoneNumber() && n.default.getPhoneNumber().then(e=>{
                if (this.isComponentMounted() && e && !this.state.phoneNumber) {
                    const t = T.default.parseAndFormat(e, T.PhoneNumberFormat.NATIONAL, this.state.selectedCountry.country);
                    t && this.setState({
                        phoneNumber: t
                    })
                }
            }
            )
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this._verifyingTextContentView && this.state.provisioning && !t.provisioning && k.isMobileScreenReaderEnabled() && (this._verifyingTextContentView.requestFocus(),
            N.getPlatformType() === u.PlatformType.Android && o.Accessibility.announceForAccessibility(S.getString("PhoneNumberVerification.EnterNumberVerifyingText"))),
            this._disableNextButton()
        }
        _componentDidRender() {
            if (super._componentDidRender(),
            this.state.phoneNumber,
            this._numberTextInput && !this._automaticallyFocusKeyboardOnce)
                if (this._automaticallyFocusKeyboardOnce = !0,
                k.shouldAnnounceForAccessibility()) {
                    const e = 500;
                    this._numberTextInput.setAccessibilityFocus(),
                    R.setTimeout(()=>{
                        this._numberTextInput && this._numberTextInput.requestFocus()
                    }
                    , e)
                } else
                    this._numberTextInput.requestFocus()
        }
        _getCountryListComponent() {
            let e = S.getString("PSTNDialerPanel.UnknownCountry");
            return this.state.selectedCountry && (e = this.state.selectedCountry.countryName),
            o.createElement(o.Button, {
                style: F.countryList,
                onPress: this._onCountrySelectorPress,
                accessibilityLabel: S.getString("PSTNDialerPanel.CountriesAndRegionsAccessibilityLabel", {
                    countryTitle: e
                })
            }, o.createElement(g.default, {
                ref: this._onCountryListRef,
                style: F.countryTextContainer
            }, o.createElement(o.Text, {
                style: F.countryText,
                numberOfLines: 1
            }, e), o.createElement(h.default, {
                icon: E.SkypeIcon.DownChevron,
                size: E.IconSize.size12,
                color: w.Color.white,
                style: F.iconStyle
            })))
        }
        _getPhoneNumberInputComponent() {
            const e = this.state.selectedCountry ? "+" + this.state.selectedCountry.countryCode : "+00"
              , t = o.createElement(o.TextInput, {
                style: F.callingCodeText,
                multiline: !1,
                blurOnSubmit: !0,
                placeholder: e,
                placeholderTextColor: w.Color.gray300,
                editable: !1,
                importantForAccessibility: o.Types.ImportantForAccessibility.No,
                clearButtonMode: "never"
            })
              , i = o.createElement(o.View, {
                style: F.underline
            })
              , n = o.createElement(o.TextInput, {
                style: F.textInput,
                value: this.state.phoneNumber,
                multiline: !1,
                blurOnSubmit: !0,
                placeholder: S.getString("PhoneNumberVerification.EnterNumberPlaceHolderText"),
                placeholderTextColor: w.Color.white,
                keyboardType: "numeric",
                accessibilityLabel: S.getString("AccessibilityLabel.EnterPhoneNumber"),
                ref: this._onNumberTextInputRef,
                onChangeText: this._onChangeText,
                onSubmitEditing: this._isCurrentPhoneNumberValid() ? this._onSubmitEditing : void 0,
                clearButtonMode: "never"
            });
            return o.createElement(o.View, {
                style: F.phoneNumberContainer
            }, o.createElement(o.View, {
                style: F.callingCodeView
            }, t, i), o.createElement(o.View, {
                style: F.phoneNumberView
            }, n, i))
        }
        _renderProgress() {
            const e = this.props.compositeNavContainerWidth || O.default.measureWindow(this._getRootViewId()).width
              , t = o.createElement(o.View, {
                style: F.animationContainer
            }, o.createElement(s, {
                animation: I.default.SPLASH_LOADER,
                loop: !0,
                shortSide: e
            }))
              , i = o.createElement(L.Header, {
                size: l.HeaderSize.h4,
                style: F.descriptionText,
                importantForAccessibility: o.Types.ImportantForAccessibility.Yes,
                ref: this._onVerifyingTextContentViewRef
            }, S.getString("PhoneNumberVerification.EnterNumberVerifyingText"))
              , n = o.createElement(L.BodyText, {
                style: F.descriptionText,
                disableThemeSubscription: !0
            }, S.getString("PhoneNumberVerification.EnterCodeTakeMinuteText"));
            return o.createElement(f, {
                hideSkipButton: !0,
                nextButtonIcon: this.props.nextButtonIcon || E.SkypeIcon.Ok,
                hideCloseButton: !0,
                closeButtonIcon: x.backIcon(),
                hideNextButton: !0,
                onNextButtonClicked: this._onPressNextButton,
                onCloseButtonClicked: this._onCloseButtonClicked,
                ref: this._onOnboardingDialogWizardRef,
                scenarioNavigator: this.props.scenarioNavigator,
                disablePresentationAnimation: !0
            }, t, i, n)
        }
        render() {
            if (this.state.provisioning)
                return this._renderProgress();
            const e = this.state.errorCode ? S.getString("PhoneNumberVerification.EnterNumberErrorText") : S.getString("PhoneNumberVerification.EnterNumberDescriptionText")
              , t = this.state.errorCode ? F.errorDescriptionText : void 0
              , i = this._showCallMeButton() ? o.createElement(o.Button, {
                style: F.callMeButton,
                onPress: this._onPressCallMeButton,
                disabled: !this._isCurrentPhoneNumberValid()
            }, o.createElement(o.Text, {
                style: [M.fontStyle.primaryButtonLarge, F.callMeButtonText]
            }, S.getString("PhoneNumberVerification.CallMeText"))) : void 0;
            return o.createElement(f, {
                headerText: S.getString("PhoneNumberVerification.EnterNumberHeaderText"),
                descriptionElement: e,
                descriptionElementStyle: t,
                hideSkipButton: !0,
                nextButtonIcon: this.props.nextButtonIcon || E.SkypeIcon.Ok,
                hideCloseButton: this.props.hideCloseButton,
                closeButtonIcon: this.props.closeButtonIcon,
                onNextButtonClicked: this._onPressNextButton,
                onCloseButtonClicked: this._onCloseButtonClicked,
                ref: this._onOnboardingDialogWizardRef,
                scenarioNavigator: this.props.scenarioNavigator,
                disablePresentationAnimation: !0,
                isContentScrollable: !1
            }, this._getPhoneNumberInputComponent(), this._getCountryListComponent(), i)
        }
        _componentId() {
            return "PnvEnterNumberDialog"
        }
        _goBack(e) {
            return p.log(u.LogTraceArea.Navigation, "PnvEnterNumberDialog._goBack, causeId: " + e),
            !!this.state.provisioning || (this.props.scenarioNavigator ? (this.props.scenarioNavigator.goBack(),
            !0) : super._goBack(e))
        }
        _showCallMeButton() {
            return "SendTokenError:UnsupportedVerifyMethod" === this.state.errorCode
        }
        _closeDialog() {
            const e = B.newCauseId();
            return p.log(u.LogTraceArea.Navigation, "PnvEnterNumberDialog._closeDialog, causeId: " + e),
            this.props.scenarioNavigator ? (this.props.scenarioNavigator.goBack(),
            !0) : super._goBack(e)
        }
        _isPossiblePhoneNumber(e, t) {
            let i = !1;
            return e && t && (i = T.default.isPossibleNumber(e, t)),
            i
        }
        _isCurrentPhoneNumberValid() {
            let e = !1;
            if (this.state && this.state.selectedCountry && this.state.phoneNumber && (e = this._isPossiblePhoneNumber(this.state.phoneNumber, this.state.selectedCountry.country),
            e)) {
                const t = T.default.parse(this.state.phoneNumber, this.state.selectedCountry.country);
                e = T.default.isValidNumber(t)
            }
            return e
        }
        _disableNextButton() {
            this._onboardingDialogWizard && this._onboardingDialogWizard.disableNextButton(!this._isCurrentPhoneNumberValid())
        }
        _submitPhoneNumber(e=b.VerificationMethod.SMS) {
            if (P.default.get().markStep(P.PnvScenarioStep.NumberNext),
            b.default.isWaitingForToken(this.state.phoneNumber, this.state.selectedCountry.country, this.state.selectedCountry.countryCode.toString()))
                this._navigateToPnvEnterCode();
            else if (!b.default.isProvisioningPhone(this.state.phoneNumber, this.state.selectedCountry.country, this.state.selectedCountry.countryCode.toString())) {
                this.setState({
                    provisioning: !0
                });
                const t = T.default.parse(this.state.phoneNumber, this.state.selectedCountry.country)
                  , i = t ? T.default.format(t, T.PhoneNumberFormat.NATIONAL) : "";
                b.default.provisionPhoneForVerification(i, this.state.selectedCountry.country, this.state.selectedCountry.countryCode.toString(), e, S.getLocale()).then(e=>{
                    e.ErrorCode || this._navigateToPnvEnterCode()
                }
                ).finally(()=>{
                    this.isComponentMounted() && this.setState({
                        provisioning: !1
                    })
                }
                )
            }
        }
        _navigateToPnvEnterCode() {
            this._closeDialog(),
            C.navigateToPnvEnterCode(this._getContext())
        }
    }
    t.default = V
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(413)
      , s = i(50)
      , r = i(28)
      , a = i(77)
      , l = i(2)
      , c = i(5)
      , d = i(4)
      , u = i(20)
      , g = i(427)
      , h = i(177)
      , p = i(862)
      , m = i(84)
      , S = i(44)
      , C = i(23)
      , y = i(14)
      , f = i(15)
      , _ = i(67)
      , b = c.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        content: ()=>n.Styles.createViewStyle({
            flex: 1,
            paddingHorizontal: 20
        }),
        contentSection: ()=>n.Styles.createViewStyle({
            paddingVertical: 10
        }),
        visibilityTitle: ()=>n.Styles.createViewStyle({
            paddingBottom: 15
        }),
        visibilitySubtitle: ()=>n.Styles.createViewStyle({
            paddingBottom: 10
        }),
        avatarContainer: ()=>n.Styles.createViewStyle({
            alignItems: "center",
            alignSelf: "center",
            padding: 10
        }),
        radioButton: ()=>n.Styles.createTextStyle({
            paddingVertical: 10
        })
    });
    class v extends s.default {
        constructor() {
            super(...arguments),
            this._changeProfilePictureVisibility = e=>{
                e !== this.state.avatarPolicy && h.setAvatarPolicy(e, l.AvatarPolicyChangeOrigin.ProfilePicturePanel)
            }
        }
        static getHeaderText() {
            return d.getString("UserSettingsPanel.ProfilePictureTitle")
        }
        _buildState(e, t) {
            return {
                avatarPolicy: h.getAvatarPolicy(),
                hasPhoto: !!r.getDisplayableProfile(u.getSkypeMri()).getAvatarUrl()
            }
        }
        render() {
            const e = this.state.hasPhoto ? d.getString("UserSettingsPanel.ProfilePictureCaptionWithPhoto") : d.getString("UserSettingsPanel.ProfilePictureCaptionNoPhoto")
              , t = n.createElement(n.View, {
                style: b.contentSection
            }, n.createElement(n.View, null, n.createElement(m.SectionTitle, {
                title: e,
                titleStyles: y.flexOne,
                numberOfLines: 2
            })), n.createElement(o.default, {
                mri: u.getSkypeMri(),
                iconSize: _.UserIconSize.Size160,
                style: b.avatarContainer,
                accessibilityLabel: d.getString("MyProfilePanel.SelectAvatarAccessibilityLabel"),
                origin: l.AvatarPickerOrigin.ProfilePicturePanel,
                showUploadPictureButton: !0,
                showAltViewAsMediaIcon: !0
            }))
              , i = [{
                key: g.OptionsServiceAvatarPolicyValueType.EVERYONE_CAN_SEE,
                text: d.getString("UserSettingsPanel.ProfilePicturePublicLabel"),
                secondaryText: d.getString("UserSettingsPanel.ProfilePicturePublicDescription"),
                disabled: !this.state.hasPhoto
            }, {
                key: g.OptionsServiceAvatarPolicyValueType.BUDDIES_OR_AUTHORIZED_CAN_SEE,
                text: d.getString("UserSettingsPanel.ProfilePictureContactsOnlyLabel"),
                secondaryText: d.getString("UserSettingsPanel.ProfilePictureContactsOnlyDescription"),
                disabled: !this.state.hasPhoto
            }]
              , s = [C.bodyFontStyle(this._currentTheme)]
              , r = [C.captionFontStyle(this._currentTheme)];
            this.state.hasPhoto || (s.push(this._themeStyles.disabledTextColorStyle),
            r.push(this._themeStyles.disabledTextColorStyle));
            const c = n.createElement(n.View, {
                style: [b.contentSection]
            }, n.createElement(m.SectionTitle, {
                title: d.getString("UserSettingsPanel.ProfilePictureVisibilitySubtitle"),
                titleStyles: b.visibilitySubtitle,
                numberOfLines: 2
            }), n.createElement(p.default, {
                radioButtons: i,
                selectedKey: this.state.hasPhoto ? this.state.avatarPolicy : void 0,
                rowStyle: b.radioButton,
                textStyle: s,
                secondaryTextStyle: r,
                dividerType: p.DividerType.None,
                onSelected: this._changeProfilePictureVisibility
            }));
            return n.createElement(n.View, {
                style: b.panel
            }, n.createElement(S.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: {
                    closeButtonType: S.CloseButtonType.Back
                }
            }), n.createElement(n.ScrollView, {
                style: y.flexOne
            }, n.createElement(n.View, {
                style: b.content
            }, t, n.createElement(f.BodyText, {
                style: b.visibilityTitle
            }, d.getString("UserSettingsPanel.ProfilePictureVisibilityTitle")), n.createElement(a, null), c)))
        }
        _getHeaderText(e) {
            return v.getHeaderText()
        }
    }
    t.default = v
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(36)
      , s = i(70)
      , r = i(0)
      , a = i(13)
      , l = i(63)
      , c = i(7)
      , d = i(51)
      , u = i(10)
      , g = i(160)
      , h = i(2)
      , p = i(206)
      , m = i(80)
      , S = i(27)
      , C = i(3)
      , y = i(5)
      , f = i(4)
      , _ = i(364)
      , b = i(54)
      , v = i(184)
      , T = i(17)
      , P = i(697)
      , A = i(349)
      , k = i(180)
      , I = i(232)
      , w = i(466)
      , N = i(376)
      , M = i(75)
      , E = i(24)
      , x = i(275)
      , D = i(66)
      , L = i(8)
      , R = i(23)
      , B = i(11)
      , O = i(49)
      , F = i(25)
      , V = i(29)
      , U = i(9);
    var H;
    !function(e) {
        e[e.Continue = 0] = "Continue",
        e[e.Finish = 1] = "Finish"
    }(H || (H = {}));
    const W = y.lazyProperties({
        fillFlex: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            backgroundColor: L.Color.black
        }),
        panel: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center"
        }),
        imageContainer: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            justifyContent: "flex-end"
        }),
        imageContainerCompact: ()=>r.Styles.createViewStyle({
            justifyContent: "flex-start"
        }),
        imageContainerV2: ()=>r.Styles.createViewStyle({
            justifyContent: "flex-start"
        }),
        image: ()=>r.Styles.createViewStyle({
            borderTopLeftRadius: 20,
            borderTopRightRadius: 20,
            width: 300,
            height: 356,
            backgroundColor: L.Color.transparent,
            alignSelf: "center",
            justifyContent: "center",
            borderColor: L.Color.transparent,
            borderWidth: 0,
            paddingTop: 20
        }),
        imageSmall: ()=>r.Styles.createViewStyle({
            width: 280,
            height: 320,
            alignSelf: "center",
            justifyContent: "flex-start"
        }),
        permissionRow: ()=>r.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            alignSelf: "stretch",
            paddingLeft: 10,
            paddingRight: 20,
            marginVertical: 10
        }),
        fakeText: ()=>r.Styles.createViewStyle({
            height: 6,
            borderRadius: 3,
            flex: 1,
            backgroundColor: L.Color.gray200,
            marginHorizontal: 10
        }),
        fakeTextDark: ()=>r.Styles.createViewStyle({
            backgroundColor: L.Color.gray300
        }),
        descriptionText: ()=>r.Styles.createTextStyle({
            marginHorizontal: 50,
            textAlign: "center",
            lineHeight: 21,
            color: L.Color.black
        }),
        darkThemeDescription: ()=>r.Styles.createTextStyle({
            color: L.Color.white
        }),
        imageNew: ()=>r.Styles.createImageStyle({
            alignSelf: "center",
            borderColor: L.Color.transparent,
            borderWidth: 0,
            width: 200,
            height: 198
        }),
        imageContainerCentered: ()=>r.Styles.createViewStyle({
            justifyContent: "center",
            flexGrow: 0,
            marginVertical: 64
        }),
        imageContainerCenteredSmall: ()=>r.Styles.createViewStyle({
            justifyContent: "center",
            flexGrow: 0,
            marginTop: 30,
            marginBottom: 38
        }),
        textLarge: ()=>r.Styles.createTextStyle({
            fontSize: R.fontSize.size18
        })
    });
    class z extends d.default {
        constructor() {
            super(...arguments),
            this._orientationLockKey = n.uniqueId("PromptPermissionDialog"),
            this._onContentLayout = e=>{
                this.state.availableHeight !== e.height && this.setState({
                    availableHeight: e.height
                })
            }
            ,
            this._navigateToNext = ()=>{
                if (this._sendTelemetryEvent(g.DialogNavExit.Submit),
                this.props.scenarioNavigator)
                    return C.log(h.LogTraceArea.Onboarding, "PromptPermissionDialog navigateToNext - with scenario navigator"),
                    void this.props.scenarioNavigator.goNext();
                C.log(h.LogTraceArea.Onboarding, "PromptPermissionDialog navigateToNext - no scenario navigator"),
                T.navigateToRecentsTab()
            }
            ,
            this._onCloseButtonClicked = ()=>{
                const e = U.newCauseId();
                C.log(h.LogTraceArea.Onboarding, "PromptPermissionDialog._onCloseButtonClicked,  causeId: " + e),
                this._goBack(e)
            }
            ,
            this._promptForPermissions = ()=>{
                const e = M.default.systemPromptHasNotBeenDisplayed(F.PermissionType.Notifications)
                  , t = M.default.systemPromptHasNotBeenDisplayed(F.PermissionType.Microphone)
                  , i = M.default.systemPromptHasNotBeenDisplayed(F.PermissionType.Camera);
                c.Resolved().then(()=>{
                    if (t)
                        return this._requestPermission(F.PermissionType.Microphone).then(n.noop)
                }
                ).then(()=>{
                    if (i && !this.state.enableInContextCameraPermission)
                        return this._requestPermission(F.PermissionType.Camera).then(n.noop)
                }
                ).then(()=>{
                    if (e || !p.default.isSetupWizardCompleted(!1))
                        return this._telemetryEvent && this._telemetryEvent.markPermissionRequested(F.PermissionType.Notifications),
                        P.default.initNotificationsAndRequestPermissions().then(e=>{
                            this._telemetryEvent && this._telemetryEvent.markPermissionGranted(F.PermissionType.Notifications, e);
                            let t = e ? s.PermissionStatus.Granted : s.PermissionStatus.Denied;
                            C.log(h.LogTraceArea.Onboarding, "PromptPermissionDialog notification permission: " + e),
                            M.default.setPermissionStatus(F.PermissionType.Notifications, t, t, s.PermissionOrigin.OnboardingPromptDialog)
                        }
                        )
                }
                , ()=>{
                    this._telemetryEvent && this._telemetryEvent.markNotificationPermissionRequestFailed(),
                    C.log(h.LogTraceArea.Onboarding, "Notification permission request failed")
                }
                ).finally(()=>{
                    this._navigateToNext()
                }
                )
            }
        }
        _buildState(e, t) {
            const i = this._getRootViewId()
              , n = {
                animationIsPending: N.isAnimationPending(),
                deviceSize: E.default.deviceSize(i)
            };
            if (t) {
                const t = w.getOnboardingFeatures(e.scenarioNavigator);
                n.themeAwareOnboardingEnabled = t.themeAwareOnboardingEnabled,
                n.enableInContextCameraPermission = t.enableInContextCameraPermission,
                n.enableDesignV2 = t.enableStepsRedesign,
                n.learnMoreLink = t.features.userProfileScreen.learnMoreLink,
                n.buttonTitles = t.features.buttonTitles;
                const i = M.default.systemPromptHasNotBeenDisplayed(F.PermissionType.Notifications)
                  , o = M.default.systemPromptHasNotBeenDisplayed(F.PermissionType.Microphone);
                let s = !1;
                n.enableInContextCameraPermission || (s = M.default.systemPromptHasNotBeenDisplayed(F.PermissionType.Camera)),
                n.showUIPrompts = e.showUIPrompts && (i || o || s),
                n.availableHeight = 0,
                this._setupTelemetryEvent(e, i, o, s)
            }
            return n
        }
        componentDidMount() {
            super.componentDidMount(),
            _.addOrUpdateOrientationLock(this._orientationLockKey, o.DeviceOrientation.Portrait),
            this.state.animationIsPending || this.state.showUIPrompts || this._promptForPermissions()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.animationIsPending || !t.animationIsPending || this.state.showUIPrompts || this._promptForPermissions()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            _.removeOrientationLock(this._orientationLockKey),
            this._sendTelemetryEvent(g.DialogNavExit.CancelOrBack)
        }
        render() {
            if (this.state.showUIPrompts) {
                const e = this.state.deviceSize === E.DeviceSize.Small
                  , t = this.state.deviceSize === E.DeviceSize.Large
                  , i = e ? 320 : 356
                  , n = [W.imageContainer, this.state.availableHeight < i ? W.imageContainerCompact : void 0, this.state.enableDesignV2 ? W.imageContainerV2 : void 0]
                  , o = {
                    imageSource: l.Collection.ONBOARDING_PERMISSIONS_VARIANT_DESKTOP,
                    imageStyle: [W.imageNew]
                }
                  , s = [W.imageContainer, W.imageContainerCentered, W.imageContainerV2, e ? W.imageContainerCenteredSmall : void 0]
                  , a = r.createElement(m.default, {
                    style: s
                }, r.createElement(r.Image, {
                    key: "imageHeaderAndDesc",
                    style: o.imageStyle,
                    resizeMode: "contain",
                    source: o.imageSource
                }))
                  , c = [W.descriptionText, t ? W.textLarge : void 0];
                let d;
                this._useDarkTheme() && c.push(W.darkThemeDescription),
                d = this.state.enableDesignV2 ? r.createElement(r.View, {
                    style: n
                }, a, r.createElement(r.Text, {
                    style: c
                }, f.getString("PromptPermissionPanel.DescriptionText2"))) : r.createElement(m.default, {
                    style: n
                }, r.createElement(r.View, {
                    style: [W.image, e ? W.imageSmall : void 0]
                }, this._renderPermissionsRow(F.PermissionType.Microphone, 0), this._renderPermissionsRow(F.PermissionType.Camera, 1), this._renderPermissionsRow(F.PermissionType.Notifications, 2)));
                const h = this.props.origin === g.DialogNavOrigin.Onboarding ? k.OnboardingDialogWizardNextButtonVariant.TextAndIcon : k.OnboardingDialogWizardNextButtonVariant.IconOnly;
                let p = this.props.origin === g.DialogNavOrigin.Onboarding ? f.getString("Onboarding.WizardGenericStepContinueButton") : void 0;
                return this.state.enableDesignV2 && this.state.buttonTitles.enabled && this.state.buttonTitles.syncContactType === H.Finish && (p = f.getString("PromptPermissionPanel.FinishButton")),
                r.createElement(A, {
                    headerText: z._getHeaderText(this.state),
                    descriptionElement: !this.state.enableDesignV2 && f.getString("PromptPermissionPanel.DescriptionText"),
                    hideCloseButton: this.props.hideCloseButton,
                    hideSkipButton: !0,
                    onNextButtonClicked: this._promptForPermissions,
                    onSkipButtonClicked: this._navigateToNext,
                    closeButtonIcon: O.backIcon(),
                    nextButtonVariant: h,
                    nextButtonTitle: p,
                    disablePresentationAnimation: !0,
                    onCloseButtonClicked: this._onCloseButtonClicked,
                    showTopButtonsRowEvenIfEmpty: !0,
                    enableDesignV2: this.state.enableDesignV2,
                    nextButtonSize: this.state.enableDesignV2 ? u.SXButtonSize.Small : void 0,
                    nextButtonIcon: this.state.enableDesignV2 ? B.SkypeIcon.Blank : void 0,
                    isLargeDevice: t
                }, r.createElement(r.View, {
                    style: W.panel,
                    onLayout: this._onContentLayout
                }, d))
            }
            return r.createElement(r.View, {
                style: W.fillFlex
            }, r.createElement(D.default, {
                size: u.SXActivityIndicatorSize.Large,
                tintColor: L.Color.white
            }))
        }
        static _getHeaderText(e) {
            return e.enableDesignV2 ? f.getString("PromptPermissionPanel.HeaderText2") : f.getString("PromptPermissionPanel.HeaderText")
        }
        _setupTelemetryEvent(e, t, i, n) {
            let o, s, r = w.getTypedScenarioNavigator(e.scenarioNavigator);
            r && (o = r.getCurrentStep(),
            s = r.getTotalNumberOfSteps()),
            this._telemetryEvent = new x.PromptPermissionDialogEvent(e.origin,x.PromptPermissionDialogVersion.V1,o,s),
            this._telemetryEvent.markWhetherSystemPromptsHaveAlreadyBeenDisplayed(t, i, n)
        }
        _renderPermissionsRow(e, t) {
            return r.createElement(G, {
                permissionType: e,
                useDarkTheme: this._useDarkTheme(),
                animationDelay: 100 * (t + 1)
            })
        }
        _componentId() {
            return "PromptPermissionsDialog"
        }
        _goBack(e) {
            return this._sendTelemetryEvent(g.DialogNavExit.Close),
            this.props.scenarioNavigator ? (C.log(h.LogTraceArea.Onboarding, "PromptPermissionDialog goBack - with scenario navigator, causeId: " + e),
            this.props.scenarioNavigator.goBack(),
            !0) : (C.log(h.LogTraceArea.Onboarding, "PromptPermissionDialog goBack - no scenario navigator, causeId: " + e),
            super._goBack(e))
        }
        _requestPermission(e) {
            return this._telemetryEvent && this._telemetryEvent.markPermissionRequested(e),
            M.default.requestPermission(e, F.PermissionPromptOptions.SkipPrePrompt | F.PermissionPromptOptions.PromptAgainIfDenied, s.PermissionOrigin.OnboardingPromptDialog).then(t=>(this._telemetryEvent && this._telemetryEvent.markPermissionGranted(e, t === s.PermissionStatus.Granted),
            c.Resolved(t === s.PermissionStatus.Granted)))
        }
        _sendTelemetryEvent(e) {
            this._telemetryEvent && (this._telemetryEvent.setExit(e),
            I.default.track(this._telemetryEvent),
            this._telemetryEvent = void 0)
        }
    }
    class G extends a.ComponentBase {
        constructor() {
            super(...arguments),
            this._animatedOpacityValue = new r.Animated.Value(0),
            this._animatedVerticalValue = new r.Animated.Value(30),
            this._animatedStyle = r.Styles.createAnimatedViewStyle({
                opacity: this._animatedOpacityValue,
                transform: [{
                    translateY: this._animatedVerticalValue
                }]
            })
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.animationDelay ? V.setTimeout(()=>{
                this.isComponentMounted() && (C.log(h.LogTraceArea.Onboarding, "PromptPermissionDialogRow animate"),
                r.Animated.parallel([v.timing(this._animatedVerticalValue, {
                    toValue: 0,
                    duration: 300,
                    easing: r.Animated.Easing.OutBack(),
                    useNativeDriver: !0
                }), v.timing(this._animatedOpacityValue, {
                    toValue: 1,
                    duration: 300,
                    easing: r.Animated.Easing.Out(),
                    useNativeDriver: !0
                })]).start())
            }
            , this.props.animationDelay) : (this._animatedVerticalValue.setValue(0),
            this._animatedOpacityValue.setValue(1))
        }
        render() {
            let e;
            switch (this.props.permissionType) {
            case F.PermissionType.Camera:
                e = B.SkypeIcon.Camera;
                break;
            case F.PermissionType.Microphone:
                e = B.SkypeIcon.Microphone;
                break;
            case F.PermissionType.Notifications:
                e = B.SkypeIcon.Alert
            }
            const t = e ? r.createElement(S.default, {
                icon: e,
                size: B.IconSize.size30,
                color: b.getPrimaryColorNoSubscription()
            }) : void 0
              , i = [W.fakeText, this.props.useDarkTheme ? W.fakeTextDark : void 0];
            return r.createElement(r.Animated.View, {
                style: [this.props.style, this._animatedStyle]
            }, r.createElement(r.View, {
                style: W.permissionRow
            }, t, r.createElement(r.View, {
                style: i
            })))
        }
    }
    e.exports = z
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1174);
    class o extends n.default {
        _getMenuSections() {
            return this.props.getMenuSections
        }
        _currentMenuText() {
            return this.props.currentMenuText
        }
        _accessibilityText() {
            return this.props.accessibilityText
        }
        _onHandleMenuCommand(e) {
            super._onHandleMenuCommand(e),
            this.props.onHandleMenuCommand(e)
        }
    }
    t.SimpleDesktopUtilityBar = o,
    t.default = o
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1753)
      , s = i(65)
      , r = i(38)
      , a = i(4)
      , l = i(32);
    class c extends o.default {
        constructor() {
            super(...arguments),
            this._allowReset = !1,
            this._includeNumbers = !0
        }
        _getPanelName() {
            return "Raw app preferences"
        }
        _getSubscribedState() {
            const e = l.default.getUserPreferencesLocal()
              , t = l.default.internal_getUserPreferencesLocalDefaults();
            return {
                preferences: e,
                overrides: this._calculateOverrides(e, t)
            }
        }
        _calculateOverrides(e, t) {
            const i = {};
            return n.each(e, (e,o)=>{
                if (void 0 === t[o])
                    void 0 !== e && (i[o] = e);
                else if (n.isObject(e)) {
                    const s = this._calculateOverrides(e, t[o]);
                    n.isEmpty(s) || (i[o] = s)
                } else
                    r.default(e, t[o]) || (i[o] = e)
            }
            ),
            {
                MyUserPreferencesLocalStore: i
            }
        }
        _generateConfigItems(e) {
            const t = [];
            n.each(e.preferences, (i,n)=>{
                this._generateListOfItemsRecursive(t, "MyUserPreferencesLocalStore", [n], i, e.overrides)
            }
            );
            const i = n.sortBy(t, "featureName");
            return i.unshift(this._createHeaderItem("MyUserPreferencesLocalStore")),
            i
        }
        _generateOverrideItems(e) {
            const t = [];
            return n.each(e.overrides, (e,i)=>{
                t.push(this._createHeaderItem(i)),
                n.each(e, (e,n)=>{
                    this._generateListOfItemsRecursive(t, i, [n], e)
                }
                )
            }
            ),
            t
        }
        _onResetAll() {
            const e = [{
                text: a.getString("Global.CancelLabel"),
                isCancel: !0
            }, {
                text: a.getString("Global.DeleteLabel"),
                onPress: ()=>{
                    l.default.reset()
                }
                ,
                style: "destructive",
                isSubmit: !0
            }]
              , t = "Are you sure you want to reset all local preferences?";
            s.default.showWithOptions({
                title: "Reset all preferences",
                dialogAccessibilityTitle: t,
                message: t,
                buttons: e,
                rootViewId: this._getRootViewId()
            })
        }
        _onListItemClickBuilder(e, t, i) {
            return ()=>{
                const e = {};
                n.set(e, t, i),
                l.default.setUserPreferencesLocal(e)
            }
        }
        _onResetPressBuilder(e, t) {
            return e=>{
                e.stopPropagation()
            }
        }
    }
    t.default = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(50)
      , s = i(10)
      , r = i(1584)
      , a = i(5)
      , l = i(503)
      , c = i(4)
      , d = i(44)
      , u = i(41)
      , g = i(8)
      , h = i(23)
      , p = i(15)
      , m = a.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        scrollContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            marginLeft: 20,
            marginRight: 20
        }),
        textHeader: ()=>n.Styles.createTextStyle({
            paddingTop: 20,
            paddingBottom: 20
        }),
        textInputContainer: ()=>n.Styles.createViewStyle({
            borderRadius: 10,
            marginTop: 10
        }),
        textInput: ()=>n.Styles.createTextInputStyle({
            padding: 6,
            borderRadius: 10,
            font: h.font.uiDisplayRegular,
            fontSize: h.controlFontSize.body,
            wordBreak: "break-word",
            backgroundColor: g.Color.transparent,
            height: 180,
            textAlignVertical: "top"
        }),
        buttonContainer: ()=>n.Styles.createViewStyle({
            alignItems: "stretch",
            marginTop: 20
        }),
        linksContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignItems: "flex-end",
            justifyContent: "center",
            flexDirection: "row",
            marginBottom: 20,
            marginTop: 50
        }),
        linkDivider: ()=>n.Styles.createTextStyle({
            marginLeft: 8,
            marginRight: 8
        })
    });
    class S extends o.default {
        constructor() {
            super(...arguments),
            this._openTerms = ()=>{
                l.openTerms()
            }
            ,
            this._openPrivacy = ()=>{
                l.openPrivacy()
            }
            ,
            this._onChangeText = e=>{
                this.setState({
                    userInput: e
                })
            }
            ,
            this._onSendButtonPressed = ()=>{
                r.handleSubmitFeedbackIntent(void 0, !0, !1, this._getRootViewId(), this.state.userInput)
            }
        }
        static getHeaderText() {
            return c.getString("SendDiagnosticLogsDialog.SendDiagnosticLogs")
        }
        _buildState(e, t) {
            let i = {};
            return t && (i.userInput = ""),
            i
        }
        render() {
            const e = n.createElement(d.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: {
                    closeButtonType: d.CloseButtonType.Back
                }
            });
            return n.createElement(n.View, {
                style: [m.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, e, n.createElement(n.ScrollView, null, n.createElement(n.View, {
                style: m.scrollContainer
            }, n.createElement(p.Header, {
                size: 4,
                style: m.textHeader
            }, c.getString("SendDiagnosticLogsDialog.TextTitle")), n.createElement(p.BodyText, null, c.getString("SendDiagnosticLogsDialog.TextBody")), n.createElement(n.View, {
                style: [m.textInputContainer, this._themeStyles.rowHighlightViewStyle]
            }, n.createElement(n.TextInput, {
                style: [m.textInput, this._themeStyles.primaryTextColorStyle],
                value: this.state.userInput,
                onChangeText: this._onChangeText,
                autoCorrect: !0,
                multiline: !0,
                autoCapitalize: "sentences",
                placeholder: c.getString("SendDiagnosticLogsDialog.TextInputPlaceholder"),
                placeholderTextColor: this._themeColors.secondaryTextColor,
                maxLength: 1e3,
                clearButtonMode: "never"
            })), n.createElement(n.View, {
                style: m.buttonContainer
            }, n.createElement(u, {
                buttonStyle: s.SXButtonStyle.ThemeFill,
                onPress: this._onSendButtonPressed,
                title: c.getString("SendDiagnosticLogsDialog.SendDiagnosticLogs"),
                disabled: 0 === this.state.userInput.length,
                allowTextWrap: !0
            })), n.createElement(n.View, {
                style: m.linksContainer
            }, n.createElement(n.Button, {
                onPress: this._openTerms
            }, n.createElement(p.Subtitle, null, c.getString("ReportAProblemDialog.TermsOfUseButton"))), n.createElement(p.Subtitle, {
                style: m.linkDivider
            }, "|"), n.createElement(n.Button, {
                onPress: this._openPrivacy
            }, n.createElement(p.Subtitle, null, c.getString("ReportAProblemDialog.PrivacyAndCookiePolicyButton")))))))
        }
        _getHeaderText(e) {
            return S.getHeaderText()
        }
    }
    t.default = S
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(7)
      , s = i(102)
      , r = i(50)
      , a = i(31)
      , l = i(112)
      , c = i(10)
      , d = i(5)
      , u = i(899)
      , g = i(37)
      , h = i(44)
      , p = i(11)
      , m = i(14)
      , S = d.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsBlockContainer: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingHorizontal: 10,
            overflow: "visible",
            flexGrow: 1
        }),
        settingsBlockContainerDesktop: ()=>n.Styles.createViewStyle({
            paddingHorizontal: 20
        }),
        toggle: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            marginTop: 6
        })
    })
      , C = [{
        label: "Production",
        value: l.ConversationServiceUrlType.Prod
    }, {
        label: "Dev",
        value: l.ConversationServiceUrlType.Dev
    }]
      , y = [{
        label: "Production",
        value: l.UdpTransportUrlType.Prod
    }, {
        label: "Dev",
        value: l.UdpTransportUrlType.Dev
    }]
      , f = [{
        label: "Production",
        value: l.KeyDistributionUrlType.Prod
    }, {
        label: "Dev",
        value: l.KeyDistributionUrlType.Dev
    }]
      , _ = [{
        label: "4",
        value: "4"
    }, {
        label: "10",
        value: "10"
    }, {
        label: "12",
        value: "12"
    }, {
        label: "51",
        value: "51"
    }];
    class b extends r.default {
        constructor() {
            super(...arguments),
            this._onHeaderResetButtonClick = e=>{
                this._updateSlimcoreProperty(l.SlimcoreSetupKeys.ConversationServiceUrl, e ? l.ConversationServiceUrlType.Prod : l.ConversationServiceUrlType.Dev, !1),
                this._updateSlimcoreProperty(l.SlimcoreSetupKeys.UdpTransportUrl, e ? l.UdpTransportUrlType.Prod : l.UdpTransportUrlType.Dev, !1),
                this._updateSlimcoreProperty(l.SlimcoreSetupKeys.KeyDistributionUrl, e ? l.KeyDistributionUrlType.Prod : l.KeyDistributionUrlType.Dev, !1),
                this._updateSlimcoreProperty(l.SlimcoreSetupKeys.EnableUdpCanary, e, !1),
                this._updateSlimcoreProperty(l.SlimcoreSetupKeys.UdpEnabled, e, !1),
                this.forceUpdate()
            }
            ,
            this._updateSlimcoreProperty = (e,t,i=!0)=>{
                const n = "boolean" == typeof t ? t ? "1" : "0" : t;
                a.default.CallingStore.setupKey(e, n),
                i && this.forceUpdate()
            }
        }
        _buildState(e, t) {
            return {
                safeAreaHorizontalPaddingStyle: this._getContext().isPresentedInDesktopSubview ? void 0 : g.default.horizontalPaddingStyle(c.HorizontalInsetZero),
                udpEnabled: !0,
                maxNrOfVideosVisibleInUI: 12,
                conversationServiceUrl: l.ConversationServiceUrlType.Prod,
                udpTransportUrl: l.UdpTransportUrlType.Prod,
                keyDistributionUrl: l.KeyDistributionUrlType.Prod,
                enableDnsCache: !0,
                additionalVideoLinesForGroupCalls: !0,
                enableEncryptedHttp: !0,
                enableEncryptedHttpForBroker: !0,
                enableUdpCanary: !0,
                autoJoinOnConflict: !0,
                enableEcoMode: !1
            }
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i);
            const n = [a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.UdpEnabled), a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.MaxNrOfVideosVisibleInUI), a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.EnableDnsCache), a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.AdditionalVideoLinesForGroupCalls), a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.EnableEncryptedHttp), a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.EnableEncryptedHttpForBroker), a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.EnableUdpCanary), a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.AutoJoinOnConflict), a.default.CallingStore.getIntKey(l.SlimcoreSetupKeys.EnableEcoMode)];
            o.all(n).then(e=>{
                const [t,i,n,o,s,r,a,l,c] = e;
                this.setState({
                    udpEnabled: 1 === t,
                    maxNrOfVideosVisibleInUI: i,
                    enableDnsCache: 1 === n,
                    additionalVideoLinesForGroupCalls: 1 === o,
                    enableEncryptedHttp: 1 === s,
                    enableEncryptedHttpForBroker: 1 === r,
                    enableUdpCanary: 1 === a,
                    autoJoinOnConflict: 1 === l,
                    enableEcoMode: 1 === c
                })
            }
            );
            const s = [a.default.CallingStore.getKey(l.SlimcoreSetupKeys.ConversationServiceUrl), a.default.CallingStore.getKey(l.SlimcoreSetupKeys.UdpTransportUrl), a.default.CallingStore.getKey(l.SlimcoreSetupKeys.KeyDistributionUrl)];
            o.all(s).then(e=>{
                const [t,i,n] = e;
                this.setState({
                    conversationServiceUrl: t,
                    udpTransportUrl: i,
                    keyDistributionUrl: n
                })
            }
            )
        }
        render() {
            const e = [S.settingsBlockContainer];
            this._getContext().isPresentedInGenericDesktopModal && e.push(S.settingsBlockContainerDesktop),
            this.state.safeAreaHorizontalPaddingStyle && e.push(this.state.safeAreaHorizontalPaddingStyle);
            const t = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                closeButtonType: this.props.isAloneInNavStack ? h.CloseButtonType.Close : h.CloseButtonType.Back
            }
              , i = [{
                onPress: ()=>this._onHeaderResetButtonClick(!1),
                icon: p.SkypeIcon.Bot,
                title: "Reset to Dev"
            }, {
                onPress: ()=>this._onHeaderResetButtonClick(!0),
                icon: p.SkypeIcon.TV,
                title: "Reset to Prod"
            }]
              , o = n.createElement(h.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: t,
                rightButtons: i
            });
            return n.createElement(n.View, {
                style: [S.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, o, n.createElement(n.ScrollView, {
                style: m.flexOne
            }, n.createElement(n.View, {
                style: e
            }, this._renderListPicker(l.SlimcoreSetupKeys.ConversationServiceUrl, C), this._renderListPicker(l.SlimcoreSetupKeys.UdpTransportUrl, y), this._renderListPicker(l.SlimcoreSetupKeys.KeyDistributionUrl, f), this._renderListPicker(l.SlimcoreSetupKeys.MaxNrOfVideosVisibleInUI, _), this._renderToggle(l.SlimcoreSetupKeys.UdpEnabled, this.state.udpEnabled), this._renderToggle(l.SlimcoreSetupKeys.EnableEcoMode, this.state.enableEcoMode), this._renderToggle(l.SlimcoreSetupKeys.EnableDnsCache, this.state.enableDnsCache), this._renderToggle(l.SlimcoreSetupKeys.AdditionalVideoLinesForGroupCalls, this.state.additionalVideoLinesForGroupCalls), this._renderToggle(l.SlimcoreSetupKeys.EnableEncryptedHttp, this.state.enableEncryptedHttp), this._renderToggle(l.SlimcoreSetupKeys.EnableEncryptedHttpForBroker, this.state.enableEncryptedHttpForBroker), this._renderToggle(l.SlimcoreSetupKeys.EnableUdpCanary, this.state.enableUdpCanary), this._renderToggle(l.SlimcoreSetupKeys.AutoJoinOnConflict, this.state.autoJoinOnConflict))))
        }
        _renderToggle(e, t) {
            return n.createElement(s, {
                id: e,
                style: S.toggle,
                isOn: t,
                accessibilityLabel: e,
                onChange: (t,i)=>this._updateSlimcoreProperty(e, i)
            }, n.createElement(n.Text, null, this._getTitle(e)))
        }
        _renderListPicker(e, t) {
            return n.createElement(u, {
                id: e,
                items: t,
                rowTitle: this._getTitle(e),
                isItemSelected: t=>this._isItemSelected(e, t),
                onHandleItemSelection: t=>this._updateSlimcoreProperty(e, t),
                selectedItemLabel: this._getSelectedItemLabel(e)
            })
        }
        _isItemSelected(e, t) {
            switch (e) {
            case l.SlimcoreSetupKeys.ConversationServiceUrl:
                return t === this.state.conversationServiceUrl;
            case l.SlimcoreSetupKeys.UdpTransportUrl:
                return t === this.state.udpTransportUrl;
            case l.SlimcoreSetupKeys.KeyDistributionUrl:
                return t === this.state.keyDistributionUrl;
            case l.SlimcoreSetupKeys.MaxNrOfVideosVisibleInUI:
                return t === this.state.maxNrOfVideosVisibleInUI;
            default:
                return !1
            }
        }
        _getSelectedItemLabel(e) {
            switch (e) {
            case l.SlimcoreSetupKeys.ConversationServiceUrl:
                return this.state.conversationServiceUrl === l.ConversationServiceUrlType.Dev ? "Dev" : "Production";
            case l.SlimcoreSetupKeys.UdpTransportUrl:
                return this.state.udpTransportUrl === l.UdpTransportUrlType.Dev ? "Dev" : "Production";
            case l.SlimcoreSetupKeys.KeyDistributionUrl:
                return this.state.keyDistributionUrl === l.KeyDistributionUrlType.Dev ? "Dev" : "Production";
            case l.SlimcoreSetupKeys.MaxNrOfVideosVisibleInUI:
                return this.state.maxNrOfVideosVisibleInUI + " participants";
            default:
                return ""
            }
        }
        _getTitle(e) {
            return Object.getOwnPropertyNames(l.SlimcoreSetupKeys).find(t=>l.SlimcoreSetupKeys[t] === e)
        }
        _getHeaderText(e) {
            return "Manage Slimcore Flags"
        }
    }
    t.default = b
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(50)
      , r = i(2)
      , a = i(3)
      , l = i(4)
      , c = i(22)
      , d = i(44)
      , u = i(456)
      , g = i(14)
      , h = i(3051)
      , p = i(9)
      , m = i(3052);
    class S extends s.default {
        constructor() {
            super(...arguments),
            this._onCloseButtonPress = e=>{
                e && e.stopPropagation();
                const t = p.newCauseId();
                a.log(r.LogTraceArea.Navigation, "SpeechConsent panel close, causeId: " + t),
                this._goBack(t)
            }
            ,
            this._onContribute = ()=>{
                u.default.setSpeechConsentValue(!0),
                this.setState({
                    showReceipt: !0
                })
            }
            ,
            this._onDoNotContribute = ()=>{
                u.default.setSpeechConsentValue(!1),
                this._onCloseButtonPress()
            }
        }
        _buildState(e, t) {
            let i = {
                isUsingStackNavigationContext: c.default.isUsingStackNavigationContext(),
                privacyStatementUrl: o.default.getConfigSettings().translator.privacyStatementUrl
            };
            return t && (i.showReceipt = !1),
            i
        }
        _getHeaderText(e) {
            return l.getString("SpeechConsentPanel.PanelTitle")
        }
        _getCloseButtonTitle() {
            return l.getString("Global.CloseButtonTitle")
        }
        render() {
            const e = this._getCloseButtonTitle()
              , t = this.state.isUsingStackNavigationContext ? {
                closeButtonType: d.CloseButtonType.Close,
                color: this._themeColors.headerIconColor,
                title: e
            } : {
                closeButtonType: this.props.isAloneInNavStack ? d.CloseButtonType.Close : d.CloseButtonType.Back,
                color: this._themeColors.headerIconColor,
                hoverColor: this._themeColors.iconHoverColor,
                onPress: this._onCloseButtonPress,
                title: this.props.isAloneInNavStack ? e : l.getString("Global.BackButtonTitle")
            }
              , i = n.createElement(d.SimplePanelHeader, {
                useTransparentBackground: !0,
                hideBottomBorder: !0,
                leftButton: t
            });
            let o;
            return o = this.state.showReceipt ? n.createElement(h.default, {
                onDone: this._onCloseButtonPress
            }) : n.createElement(m.default, {
                onContribute: this._onContribute,
                onDoNotContribute: this._onDoNotContribute
            }),
            n.createElement(n.View, {
                style: [g.flexOne, this._themeStyles.primaryBackgroundColorStyle]
            }, i, o)
        }
    }
    t.SpeechConsentPanel = S,
    t.default = S
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(6)
      , r = i(50)
      , a = i(863)
      , l = i(42)
      , c = i(10)
      , d = i(77)
      , u = i(146)
      , g = i(5)
      , h = i(4)
      , p = i(62)
      , m = i(37)
      , S = i(44)
      , C = i(1220)
      , y = i(3053)
      , f = i(14)
      , _ = g.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        container: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingHorizontal: 10,
            overflow: "visible",
            flexGrow: 1
        }),
        containerDesktop: ()=>n.Styles.createViewStyle({
            paddingHorizontal: 20
        }),
        toggle: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            marginTop: 6
        })
    });
    class b extends r.default {
        static getHeaderText() {
            return h.getString("CallingSettingsPanel.SubtitlesButtonLabel")
        }
        _buildState(e, t) {
            const i = s.default.getS4LCMCFeatures();
            return {
                enableSubtitlesForAllCalls: p.default.getEnableSubtitlesForAllCalls(),
                enableOnlyShowSubtitlesForOtherParticipants: p.default.getOnlyShowSubtitlesForOtherParticipants(),
                enableMessageTranslation: i.enableMessageTranslation,
                callCaptionsEnableForAllCallsOption: i.callCaptionsEnableForAllCallsOption,
                safeAreaHorizontalPaddingStyle: this._getContext().isPresentedInDesktopSubview ? void 0 : m.default.horizontalPaddingStyle(c.HorizontalInsetZero),
                isSpokenLanguageSupported: u.default.isDeviceLanguageSupportedForTranslation()
            }
        }
        render() {
            const e = [_.container];
            this._getContext().isPresentedInGenericDesktopModal && e.push(_.containerDesktop),
            this.state.safeAreaHorizontalPaddingStyle && e.push(this.state.safeAreaHorizontalPaddingStyle);
            const t = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                closeButtonType: this.props.isAloneInNavStack ? S.CloseButtonType.Close : S.CloseButtonType.Back
            }
              , i = n.createElement(S.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: t
            });
            return n.createElement(n.View, {
                style: [_.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, i, n.createElement(n.ScrollView, {
                style: f.flexOne
            }, n.createElement(n.View, {
                style: e
            }, this._getSpokenLanguageSetting(), this._getSubtitleForAllCallsToggle(), this._getSubtitlesForOtherOnlyToggle(), this._getSubtitleSettingsMessage())))
        }
        _getHeaderText(e) {
            return b.getHeaderText()
        }
        _getSpokenLanguageSetting() {
            if (this.state.enableMessageTranslation)
                return this._wrapElementWithDivider(n.createElement(C, {
                    rowTitle: !0,
                    caption: !0,
                    onHandleMenuCommand: e=>{
                        p.default.setCallTranslatorBotSpokenLanguageLocale(e)
                    }
                }))
        }
        _getSubtitleForAllCallsToggle() {
            if (!this.state.callCaptionsEnableForAllCallsOption)
                return;
            const e = h.getString("SubtitlesSettingsPanel.EnableSubtitlesForAllCallsLabel")
              , t = h.getString("SubtitlesSettingsPanel.EnableSubtitlesForAllCallsExplanation");
            return this._wrapElementWithDivider(n.createElement(o, {
                style: _.toggle,
                isOn: this.state.enableSubtitlesForAllCalls && this.state.isSpokenLanguageSupported,
                disable: !this.state.isSpokenLanguageSupported,
                accessibilityLabel: l.default.combinedAccessibilityLabel(e, t),
                onChange: (e,t)=>{
                    p.default.setEnableSubtitlesForAllCalls(t)
                }
            }, a.renderLabels(e, t, !this.state.isSpokenLanguageSupported)))
        }
        _getSubtitlesForOtherOnlyToggle() {
            const e = h.getString("SubtitlesSettingsPanel.OnlyShowSubtitlesForOtherParticipantsLabel")
              , t = h.getString("SubtitlesSettingsPanel.OnlyShowSubtitlesForOtherParticipantsExplanation");
            return this._wrapElementWithDivider(n.createElement(o, {
                style: _.toggle,
                isOn: this.state.enableOnlyShowSubtitlesForOtherParticipants && this.state.isSpokenLanguageSupported,
                disable: !this.state.isSpokenLanguageSupported,
                accessibilityLabel: l.default.combinedAccessibilityLabel(e, t),
                onChange: (e,t)=>{
                    p.default.setOnlyShowSubtitlesForOtherParticipants(t)
                }
            }, a.renderLabels(e, t, !this.state.isSpokenLanguageSupported)))
        }
        _getSubtitleSettingsMessage() {
            if (!this.state.enableMessageTranslation)
                return n.createElement(y, null)
        }
        _wrapElementWithDivider(e) {
            return n.createElement(n.View, null, e, n.createElement(d, {
                marginTop: 10
            }))
        }
    }
    t.default = b
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(0)
      , r = i(50)
      , a = i(189)
      , l = i(160)
      , c = i(2)
      , d = i(3)
      , u = i(5)
      , g = i(4)
      , h = i(364)
      , p = i(54)
      , m = i(349)
      , S = i(180)
      , C = i(232)
      , y = i(466)
      , f = i(24)
      , _ = i(76)
      , b = i(275)
      , v = i(8)
      , T = i(11)
      , P = i(14)
      , A = i(15)
      , k = i(109)
      , I = i(92)
      , w = i(3054)
      , N = i(135)
      , M = i(457)
      , E = i(9)
      , x = u.lazyProperties({
        panel: ()=>s.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible",
            marginTop: 50
        }),
        panelSmall: ()=>s.Styles.createViewStyle({
            marginTop: 20
        }),
        newToggleButtonContainer: ()=>s.Styles.createViewStyle({
            alignSelf: "center",
            alignItems: "center",
            width: 320
        }),
        newToggleButtonContainerCompact: ()=>s.Styles.createViewStyle({
            width: 280
        }),
        newToggleButtonInnerContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center",
            alignSelf: "stretch",
            padding: 12
        }),
        highContrastToggle: ()=>s.Styles.createViewStyle({
            alignSelf: "stretch",
            marginTop: 20,
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center",
            paddingHorizontal: 12
        }),
        highContrastToggleText: ()=>s.Styles.createTextStyle({
            color: v.Color.gray400
        })
    });
    class D extends r.default {
        constructor() {
            super(...arguments),
            this._orientationLockKey = n.uniqueId("ColorThemeDialog"),
            this._onCloseButtonClicked = ()=>{
                const e = E.newCauseId();
                d.log(c.LogTraceArea.ConversationColorStore, "ThemeDialog._onCloseButtonClicked causeId: " + e),
                this._goBack(e)
            }
            ,
            this._onNextButtonClicked = ()=>{
                const e = E.newCauseId();
                d.log(c.LogTraceArea.ConversationColorStore, "ThemeDialog._onNextButtonClicked causeId: " + e),
                I.setTheme(this.state.currentTheme);
                const t = this._adjustedUserColor(this.state.currentTheme);
                t !== this.state.userColor && p.setUserColor(t, e),
                this._sendTelemetryEvent(l.DialogNavExit.Submit),
                this._performNavigation()
            }
            ,
            this._onSkipButtonPressed = ()=>{
                this._sendTelemetryEvent(l.DialogNavExit.Skip),
                this._performNavigation()
            }
            ,
            this._onLightTogglePressed = ()=>this._onLightDarkTogglePressed(!1),
            this._onDarkTogglePressed = ()=>this._onLightDarkTogglePressed(!0),
            this._onHighContrastTogglePress = ()=>{
                const e = !this.state.useHighContrastTheme
                  , t = g.getString(e ? "ColorThemeDialog.SelectedHighContrastTitleAccessible" : "ColorThemeDialog.DeselectedHighContrastTitleAccessible");
                this._updateThemeForSimpleLayout(this.state.isDarkTheme, e, ()=>{
                    s.Accessibility.announceForAccessibility(t)
                }
                )
            }
        }
        static getHeaderText() {
            return g.getString("ColorThemeDialog.HeaderText")
        }
        _buildState(e, t) {
            const i = {
                userColor: p.getColorInfo(),
                selectedTheme: I.colorTheme()
            }
              , n = this._getRootViewId();
            if (t) {
                let t = y.getOnboardingFeatures(e.scenarioNavigator);
                i.themeAwareOnboardingEnabled = t.themeAwareOnboardingEnabled,
                i.useHighContrastTheme = I.useAccessibleTheme(),
                i.isMobileScreenReaderEnabled = _.default.isMobileScreenReaderEnabled(),
                i.originalTheme = i.selectedTheme,
                i.isSmallDevice = f.default.isSmallDevice(n),
                i.currentTheme = I.colorTheme(),
                i.isDarkTheme = I.useDarkTheme(),
                this._setupTelemetryEvent(e)
            }
            return i
        }
        componentDidMount() {
            super.componentDidMount(),
            this._getContext().isPresentedInDesktopSubview || h.addOrUpdateOrientationLock(this._orientationLockKey, o.DeviceOrientation.Portrait)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            h.removeOrientationLock(this._orientationLockKey),
            this._sendTelemetryEvent(l.DialogNavExit.CancelOrBack)
        }
        _componentId() {
            return "ThemeDialog"
        }
        _goBack(e) {
            return d.log(c.LogTraceArea.ConversationColorStore, "ThemeDialog._goBack causeId: " + e),
            this._sendTelemetryEvent(l.DialogNavExit.Close),
            this.props.scenarioNavigator ? (this.props.scenarioNavigator.goBack(),
            !0) : super._goBack(e)
        }
        _setupTelemetryEvent(e) {
            let t, i, n = y.getTypedScenarioNavigator(e.scenarioNavigator);
            n && (t = n.getCurrentStep(),
            i = n.getTotalNumberOfSteps()),
            this._telemetryEvent = new b.ThemeDialogEvent(e.origin,t,i)
        }
        _onLightDarkTogglePressed(e) {
            if (this.state.isDarkTheme === e)
                return;
            this._telemetryEvent && this._telemetryEvent.markDidToggleLightDarkTab();
            this._updateThemeForSimpleLayout(e, this.state.useHighContrastTheme, ()=>{
                const t = this._getAccessibleTitleForLightOrDarkTheme(e, !0);
                t && s.Accessibility.announceForAccessibility(t)
            }
            )
        }
        _updateThemeForSimpleLayout(e, t, i) {
            const n = t ? e ? k.Theme.AccessibleDark : k.Theme.Accessible : e ? k.Theme.DelphiDark : k.Theme.Delphi;
            this.setState({
                currentTheme: n,
                isDarkTheme: e,
                useHighContrastTheme: t
            }, i)
        }
        _performNavigation() {
            const e = E.newCauseId();
            d.log(c.LogTraceArea.ConversationColorStore, "ThemeDialog._performNavigation causeId: " + e),
            this.props.scenarioNavigator ? this.props.scenarioNavigator.goNext() : this.props.onNextButtonPressed ? this.props.onNextButtonPressed() : this._getContext().isPresentedByMobileStackNavigator ? this._isComponentVisible() && this._goBack(e) : this._goBack(e)
        }
        _getAccessibleTitleForLightOrDarkTheme(e, t) {
            return t ? g.getString(e ? "ColorThemeDialog.SelectedDarkToggleTitleAccessible" : "ColorThemeDialog.SelectedLightToggleTitleAccessible") : g.getString(e ? "ColorThemeDialog.DarkToggleTitleAccessible" : "ColorThemeDialog.LightToggleTitleAccessible")
        }
        _renderToggleButton(e, t) {
            const i = this._getAccessibleTitleForLightOrDarkTheme(e, t && !1)
              , n = [s.Types.AccessibilityTrait.Button];
            t && n.push(s.Types.AccessibilityTrait.Selected);
            const o = this.state.themeAwareOnboardingEnabled ? this.state.currentTheme : void 0;
            return s.createElement(w.default, {
                key: "thumb" + e,
                size: w.ThumbnailSize.Small,
                dark: e,
                selected: t,
                compact: this.state.isSmallDevice,
                highContrast: this.state.useHighContrastTheme,
                accessibilityTraits: n,
                accessibilityLabel: i,
                colorThemeOverride: o,
                onPress: e ? this._onDarkTogglePressed : this._onLightTogglePressed
            })
        }
        _adjustedUserColor(e) {
            const t = N.isMonoTheme(e)
              , i = N.isClassicTheme(e);
            return (t || i) && (t && !N.isMonoTheme(this.state.selectedTheme) || i && !N.isClassicTheme(this.state.selectedTheme)) ? a.getColorInfoForSerializedColor(a.SerializedColorByNumber.Mint) : this.state.userColor
        }
        _sendTelemetryEvent(e) {
            this._telemetryEvent && (this._telemetryEvent.setExit(e),
            this.state.originalTheme !== this.state.currentTheme && e === l.DialogNavExit.Submit && this._telemetryEvent.markDidSelectNewTheme(),
            this._telemetryEvent.setFinalTheme(e === l.DialogNavExit.Submit ? this.state.currentTheme : this.state.originalTheme),
            C.default.track(this._telemetryEvent),
            this._telemetryEvent = void 0)
        }
        _getHeaderText(e) {
            return D.getHeaderText()
        }
        render() {
            const e = [x.panel];
            let t;
            this.state.isSmallDevice,
            e.push(x.panelSmall);
            const i = [this._renderToggleButton(!1, !this.state.isDarkTheme), this._renderToggleButton(!0, this.state.isDarkTheme)]
              , n = g.getString("ColorThemeDialog.HighContrastThemeTitle")
              , o = this.state.useHighContrastTheme ? g.getString("Global.ItemSelectedAccessibilityLabel", {
                text: n
            }) : n
              , r = [P.overflowVisible, x.newToggleButtonContainer];
            this.state.isSmallDevice && r.push(x.newToggleButtonContainerCompact);
            const a = this.state.themeAwareOnboardingEnabled ? this.state.currentTheme : void 0;
            t = s.createElement(s.View, {
                style: r
            }, s.createElement(s.View, {
                style: [P.overflowVisible, x.newToggleButtonInnerContainer]
            }, i), s.createElement(s.Button, {
                style: x.highContrastToggle,
                accessibilityLabel: o,
                activeOpacity: .8,
                onPress: this._onHighContrastTogglePress
            }, s.createElement(A.BodyText, {
                style: this.state.themeAwareOnboardingEnabled ? void 0 : x.highContrastToggleText,
                numberOfLines: 2,
                disableThemeSubscription: !this.state.themeAwareOnboardingEnabled,
                colorThemeOverride: a
            }, n), s.createElement(M.default, {
                isOn: this.state.useHighContrastTheme,
                colorThemeOverride: a
            })));
            const c = this.props.origin === l.DialogNavOrigin.Onboarding ? S.OnboardingDialogWizardNextButtonVariant.TextAndIcon : S.OnboardingDialogWizardNextButtonVariant.IconOnly
              , d = this.props.origin === l.DialogNavOrigin.Onboarding ? g.getString("Onboarding.WizardGenericStepContinueButton") : void 0;
            return s.createElement(m, {
                headerText: this.props.hideHeader ? void 0 : this._getHeaderText(this.state),
                descriptionElement: g.getString("ColorThemeDialog.DescriptionText"),
                onNextButtonClicked: this._onNextButtonClicked,
                onCloseButtonClicked: this._onCloseButtonClicked,
                onSkipButtonClicked: this.props.hideSkipButton ? void 0 : this._onSkipButtonPressed,
                showTopButtonsRowEvenIfEmpty: !0,
                hideSkipButton: this.props.hideSkipButton,
                hideCloseButton: this.props.hideCloseButton,
                hideNextButton: !1,
                closeButtonIcon: this.props.closeButtonIcon,
                nextButtonIcon: this.props.nextButtonIcon || T.SkypeIcon.Ok,
                nextButtonTheme: this.state.currentTheme,
                nextButtonUserColor: this._adjustedUserColor(this.state.currentTheme),
                nextButtonVariant: c,
                nextButtonTitle: d,
                disablePresentationAnimation: !0,
                disableContentFocusOnMount: this.props.hideHeader,
                scenarioNavigator: this.props.scenarioNavigator,
                isContentScrollable: !0,
                colorThemeOverride: this.state.themeAwareOnboardingEnabled ? this.state.currentTheme : k.Theme.Colorful
            }, s.createElement(s.View, {
                style: e
            }, t))
        }
    }
    t.default = D
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(166)
      , s = i(3055)
      , r = i(0)
      , a = i(50)
      , l = i(5)
      , c = i(4)
      , d = i(44)
      , u = i(8)
      , g = i(23)
      , h = g.fontSize.size13Deprecated
      , p = l.lazyProperties({
        rootPanel: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            backgroundColor: u.Color.white
        }),
        thirdPartyNoticesText: ()=>r.Styles.createTextInputStyle({
            paddingHorizontal: 15,
            font: g.font.uiDisplayRegular,
            fontSize: h,
            color: u.Color.black
        })
    });
    class m extends a.default {
        constructor() {
            super(...arguments),
            this._renderItem = (e,t)=>{
                const i = Number(e.key)
                  , n = this.state.legalParagraphs[i];
                return r.createElement(r.Text, {
                    style: p.thirdPartyNoticesText
                }, n)
            }
        }
        static getHeaderText() {
            return c.getString("ThirdPartyNoticesPanel.ThirdPartyNoticesTitle")
        }
        _buildState(e, t) {
            let i = {};
            if (t) {
                const e = s.default.getNotices()
                  , t = 77;
                i.legalParagraphs = n.compact(e.split("\n")),
                i.itemList = n.map(i.legalParagraphs, (e,i)=>({
                    key: i.toString(),
                    measureHeight: !0,
                    height: Math.max(Math.round(e.length * h / t), h),
                    template: "legal"
                }))
            }
            return i
        }
        _getHeaderText(e) {
            return m.getHeaderText()
        }
        render() {
            return r.createElement(r.View, {
                style: p.rootPanel
            }, r.createElement(d.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: {
                    closeButtonType: this.props.isAloneInNavStack ? d.CloseButtonType.Close : d.CloseButtonType.Back
                }
            }), r.createElement(o.VirtualListView, {
                itemList: this.state.itemList,
                renderItem: this._renderItem
            }))
        }
    }
    e.exports = m
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(50)
      , r = i(10)
      , a = i(77)
      , l = i(5)
      , c = i(4)
      , d = i(62)
      , u = i(37)
      , g = i(44)
      , h = i(1220)
      , p = i(3057)
      , m = i(14)
      , S = i(3058)
      , C = i(1714)
      , y = l.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsBlockContainer: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingHorizontal: 10,
            overflow: "visible",
            flexGrow: 1
        }),
        settingsBlockContainerDesktop: ()=>n.Styles.createViewStyle({
            paddingHorizontal: 20
        })
    });
    class f extends s.default {
        constructor() {
            super(...arguments),
            this._onSpokenLanguagePickerHandleMenuCommand = e=>{
                d.default.setCallTranslatorBotSpokenLanguageLocale(e)
            }
            ,
            this._onSubtitleLanguagePickerHandleMenuCommand = e=>{
                d.default.setCallTranslatorBotSubtitleLanguageLocale(e)
            }
        }
        static getHeaderText() {
            return c.getString("UserSettingsPanel.TranslationSettingsTitle")
        }
        _buildState(e, t) {
            return {
                enableSubtitlesForAllCalls: d.default.getEnableSubtitlesForAllCalls(),
                enableOnlyShowSubtitlesForOtherParticipants: d.default.getOnlyShowSubtitlesForOtherParticipants(),
                safeAreaHorizontalPaddingStyle: this._getContext().isPresentedInDesktopSubview ? void 0 : u.default.horizontalPaddingStyle(r.HorizontalInsetZero),
                enableMessageTranslation: o.default.getS4LCMCFeatures().enableMessageTranslation,
                enableSpeechConsentFlow: o.default.getS4LCMCFeatures().enableSpeechConsentFlow
            }
        }
        render() {
            const e = [y.settingsBlockContainer];
            this._getContext().isPresentedInGenericDesktopModal && e.push(y.settingsBlockContainerDesktop),
            this.state.safeAreaHorizontalPaddingStyle && e.push(this.state.safeAreaHorizontalPaddingStyle);
            const t = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                closeButtonType: this.props.isAloneInNavStack ? g.CloseButtonType.Close : g.CloseButtonType.Back
            }
              , i = n.createElement(g.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: t
            });
            return n.createElement(n.View, {
                style: [y.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, i, n.createElement(n.ScrollView, {
                style: m.flexOne
            }, n.createElement(n.View, {
                style: e
            }, this._getSpokenLanguagePicker(), this._getSubtitleLanguagePicker(), this._getTranslationVoicePicker(), this._getTranslatorPrivacySwitch())))
        }
        _getHeaderText(e) {
            return f.getHeaderText()
        }
        _getSpokenLanguagePicker() {
            return this._wrapElementWithDivider(n.createElement(h, {
                rowTitle: !0,
                caption: !0,
                onHandleMenuCommand: this._onSpokenLanguagePickerHandleMenuCommand
            }))
        }
        _getTranslationVoicePicker() {
            return this._wrapElementWithDivider(n.createElement(S, null))
        }
        _getSubtitleLanguagePicker() {
            if (!this.state.enableMessageTranslation)
                return this._wrapElementWithDivider(n.createElement(p, {
                    rowTitle: !0,
                    caption: !0,
                    onHandleMenuCommand: this._onSubtitleLanguagePickerHandleMenuCommand
                }))
        }
        _getTranslatorPrivacySwitch() {
            if (!this.state.enableSpeechConsentFlow)
                return n.createElement(C.default, null)
        }
        _wrapElementWithDivider(e) {
            return n.createElement(n.View, null, e, n.createElement(a, {
                marginTop: 10
            }))
        }
    }
    t.default = f
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(491)
      , r = i(50)
      , a = i(10)
      , l = i(160)
      , c = i(2)
      , d = i(3)
      , u = i(5)
      , g = i(108)
      , h = i(4)
      , p = i(266)
      , m = i(62)
      , S = i(20)
      , C = i(349)
      , y = i(180)
      , f = i(291)
      , _ = i(232)
      , b = i(466)
      , v = i(360)
      , T = i(24)
      , P = i(275)
      , A = i(19)
      , k = i(41)
      , I = i(8)
      , w = i(23)
      , N = i(11)
      , M = i(49)
      , E = i(15)
      , x = i(29)
      , D = i(885)
      , L = i(67)
      , R = i(45)
      , B = i(9)
      , O = u.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "flex-start",
            overflow: "visible",
            paddingTop: 40
        }),
        containerSmall: ()=>o.Styles.createViewStyle({
            paddingTop: 0
        }),
        userCardContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            marginHorizontal: 20
        }),
        privacyContainer: ()=>o.Styles.createViewStyle({
            marginTop: 30,
            marginHorizontal: 50,
            flex: 1,
            justifyContent: "flex-start"
        }),
        privacyContainerSmall: ()=>o.Styles.createViewStyle({
            marginTop: 15
        }),
        phoneEmailButtonsContainer: ()=>o.Styles.createViewStyle({
            margin: 30
        }),
        centeredText: ()=>o.Styles.createTextStyle({
            textAlign: "center",
            lineHeight: 21
        }),
        textLarge: ()=>o.Styles.createTextStyle({
            fontSize: w.fontSize.size18
        }),
        actionButton: ()=>o.Styles.createButtonStyle({
            marginBottom: 15
        }),
        learnMoreContainer: ()=>o.Styles.createTextStyle({
            textAlign: "center"
        }),
        learnMoreLink: ()=>o.Styles.createTextStyle({
            color: I.Color.blue
        })
    });
    class F extends r.default {
        constructor() {
            super(...arguments),
            this._exitEditingModeTime = 100,
            this._onProfileFocus = ()=>{
                d.log(c.LogTraceArea.Onboarding, "_onProfileFocus"),
                this.setState({
                    isEditing: !0
                })
            }
            ,
            this._onProfileBlur = ()=>{
                d.log(c.LogTraceArea.Onboarding, "_onProfileBlur"),
                x.setTimeout(()=>{
                    this.setState({
                        isEditing: !1
                    })
                }
                , this._exitEditingModeTime)
            }
            ,
            this._onPressLearnMore = ()=>{
                g.openUrlWithParams({
                    origin: c.BrowserOrigin.UserProfileOnboarding,
                    url: this.state.userProfileScreen.learnMoreLink,
                    componentContext: this._getContext()
                })
            }
            ,
            this._onUserCardRef = e=>{
                this._userCardRef = e || void 0
            }
            ,
            this._onNextButtonClicked = ()=>{
                var e;
                const t = null === (e = this.state.userContacts) || void 0 === e ? void 0 : e.phoneNumbersAndParts[0];
                t && t.phoneParts && t.source && (this._showPhoneNumberInSearch(t.phoneParts, t.source),
                m.default.setOnboardingUserProfileScreenSeen(!0)),
                this._performNavigation()
            }
            ,
            this._onBackButtonClicked = ()=>{
                const e = B.newCauseId();
                d.log(c.LogTraceArea.Onboarding, "UserProfileDialog._onBackButtonClicked causeId: " + e),
                this._sendTelemetryEvent(l.DialogNavExit.Close),
                p.default.redirectToLogout(c.LogoutReason.Onboarding)
            }
        }
        _buildState(e, t) {
            const i = b.getOnboardingFeatures(e.scenarioNavigator)
              , n = R.getFullUserProfileByMri(S.getSkypeMri())
              , o = s.default.getParsedProfile()
              , r = this._getRootViewId()
              , a = {
                userProfile: n,
                userProfileScreen: i.features.userProfileScreen,
                userContacts: o,
                isEditing: !1,
                enableDesignV2: i.enableStepsRedesign,
                deviceSize: T.default.deviceSize(r)
            };
            return t && this._setupTelemetryEvent(e),
            a
        }
        componentDidMount() {
            super.componentDidMount(),
            this._userCardRef && this._userCardRef.requestFocus()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._sendTelemetryEvent(l.DialogNavExit.CancelOrBack)
        }
        _getHeaderText() {
            return F.getHeaderText()
        }
        static getHeaderText() {
            return h.getString("UserProfileDialog.HeaderText")
        }
        _setupTelemetryEvent(e) {
            var t, i;
            const n = b.getTypedScenarioNavigator(e.scenarioNavigator)
              , o = null === (t = n) || void 0 === t ? void 0 : t.getCurrentStep()
              , s = null === (i = n) || void 0 === i ? void 0 : i.getTotalNumberOfSteps();
            this._telemetryEvent = new P.UserProfileDialogEvent(e.origin,o,s)
        }
        render() {
            let e = [];
            const t = this.state.deviceSize === T.DeviceSize.Small
              , i = this.state.deviceSize === T.DeviceSize.Large;
            if (this.state.userContacts && this.state.userContacts.phoneNumbersAndParts) {
                e = [...this.state.userContacts.phoneNumbersAndParts.map(e=>e.phoneNumber), ...this.state.userContacts.emails]
            }
            const s = h.getString("UserProfileDialog.PrivacyStatement", {
                source: e.join(", ")
            })
              , r = o.createElement(o.Link, {
                key: "learnMore",
                url: this.state.userProfileScreen.learnMoreLink,
                onPress: this._onPressLearnMore,
                style: O.learnMoreLink
            }, h.getString("UserSettingsPanel.HotkeysLearnMoreLink"))
              , l = this._isHiddenContent()
              , d = S.getSkypeMri()
              , u = this.state.userProfileScreen.closeBackIconEnabled ? M.closeIcon() : M.backIcon()
              , g = [O.container, t ? O.containerSmall : void 0]
              , p = [O.privacyContainer, t ? O.privacyContainerSmall : void 0]
              , m = [O.centeredText, i ? O.textLarge : void 0]
              , f = [O.learnMoreContainer, i ? O.textLarge : void 0];
            return !n.isEmpty(this.state.userContacts) && o.createElement(C, {
                enableDesignV2: this.state.enableDesignV2,
                headerText: this._getHeaderText(),
                onNextButtonClicked: this._onNextButtonClicked,
                onCloseButtonClicked: this._onBackButtonClicked,
                hideSkipButton: !0,
                closeButtonIcon: u,
                nextButtonVariant: y.OnboardingDialogWizardNextButtonVariant.TextAndIcon,
                nextButtonTitle: h.getString("Onboarding.WizardGenericStepContinueButton"),
                disablePresentationAnimation: !0,
                hideNextButton: l,
                nextButtonIcon: N.SkypeIcon.Blank,
                nextButtonSize: a.SXButtonSize.Small,
                isLargeDevice: i
            }, o.createElement(o.View, {
                style: g
            }, o.createElement(o.View, {
                style: O.userCardContainer
            }, o.createElement(D.default, {
                ref: this._onUserCardRef,
                origin: c.AvatarUpdateLocation.UserProfileOnboarding,
                userMri: d,
                allowOpenAvatarInMediaViewer: !1,
                allowEditAvatar: !0,
                replaceHeader: !0,
                hideGradientBackground: !0,
                hideUserStatus: !0,
                onProfileFocus: this._onProfileFocus,
                onProfileBlur: this._onProfileBlur,
                userIconSize: this.state.enableDesignV2 ? L.UserIconSize.Size120 : void 0,
                enableDesignV2: this.state.enableDesignV2
            })), !l && o.createElement(o.View, {
                style: p
            }, o.createElement(E.BodyText, {
                style: m
            }, s), o.createElement(E.BodyText, {
                style: f
            }, r), this._getPhoneEmailButtons())))
        }
        _isHiddenContent() {
            return !1
        }
        _getPhoneEmailButtons() {
            const e = {
                style: O.actionButton,
                buttonStyle: a.SXButtonStyle.BlueFill,
                title: h.getString("UserProfileDialog.AddPhoneNumber"),
                buttonSize: a.SXButtonSize.Medium,
                onPress: this._onAddPhoneButtonClicked
            }
              , t = {
                style: O.actionButton,
                buttonStyle: a.SXButtonStyle.BlueFill,
                title: h.getString("UserProfileDialog.AddEmail"),
                buttonSize: a.SXButtonSize.Medium,
                onPress: this._onAddEmailButtonClicked
            }
              , {enableAddPhone: i, enableAddEmail: s} = this.state.userProfileScreen || {};
            return this.state.userContacts ? o.createElement(o.View, {
                style: O.phoneEmailButtonsContainer
            }, i && n.isEmpty(this.state.userContacts.phoneNumbersAndParts) && o.createElement(k, Object.assign({}, e)), s && n.isEmpty(this.state.userContacts.emails) && o.createElement(k, Object.assign({}, t))) : null
        }
        _onAddPhoneButtonClicked() {
            d.track(new f.UserProfileChange({
                origin: l.DialogNavOrigin.UserProfilePage,
                addPhoneNumber: !0
            }))
        }
        _onAddEmailButtonClicked() {
            d.track(new f.UserProfileChange({
                origin: l.DialogNavOrigin.UserProfilePage,
                addEmail: !0
            }))
        }
        _performNavigation() {
            const e = B.newCauseId();
            d.log(c.LogTraceArea.Onboarding, "UserProfileDialog._performNavigation causeId: " + e),
            this._sendTelemetryEvent(l.DialogNavExit.Submit),
            this.props.scenarioNavigator && this.props.scenarioNavigator.goNext()
        }
        _showPhoneNumberInSearch(e, t) {
            s.default.showPhoneNumberInSearch(e, t).then(()=>{
                d.track(new v.PhoneNumberDiscoverabilityPrivacyEvent(!0,v.PhoneDiscoverabilityOrigin.UserProfile))
            }
            ).catch(e=>{
                var t;
                d.track(new v.PhoneNumberDiscoverabilityPrivacyEvent(void 0,v.PhoneDiscoverabilityOrigin.UserProfile,{
                    errorStatusCode: null === (t = e) || void 0 === t ? void 0 : t.code,
                    errorMessage: A.errorAsString(e)
                })),
                d.log(c.LogTraceArea.ManageSearchInfo, "Service error while trying to enable phone number for discoverability. Error: " + A.errorAsString(e))
            }
            )
        }
        _goBack(e) {
            return d.log(c.LogTraceArea.Onboarding, "UserProfileDialog._goBack causeId: " + e),
            this._sendTelemetryEvent(l.DialogNavExit.CancelOrBack),
            this.props.scenarioNavigator ? (this.props.scenarioNavigator.goBack(),
            !0) : super._goBack(e)
        }
        _sendTelemetryEvent(e) {
            this._telemetryEvent && (this._telemetryEvent.setExit(e),
            _.default.track(this._telemetryEvent),
            this._telemetryEvent = void 0)
        }
        test_showPhoneNumberInSearch(e, t) {
            return this._showPhoneNumberInSearch(e, t)
        }
    }
    t.default = F
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(104)
      , r = i(104)
      , a = i(939)
      , l = i(7)
      , c = i(6)
      , d = i(61)
      , u = i(141)
      , g = i(3)
      , h = i(1526)
      , p = i(21);
    t.default = new class {
        constructor(e=[]) {
            this._SERVICE_NAME = "QuickActionsService",
            p.RegisterStartupable(this, this._SERVICE_NAME, e)
        }
        startup() {
            if (!d.UICapabilities.quickActionsSupported() || !a.default.isSystemSupported)
                return l.Resolved();
            this._pinnedShortcutsTelemetry();
            let e = !1;
            const t = this._updateQuickActionsMenu();
            return c.default.subscribe(()=>{
                e || (e = !0,
                u.default.queueIdleTask("QuickActions", u.TaskTypeFlags.UsesNetworking, ()=>{
                    s.log(r.LogTraceArea.QuickActionsService, "Received ECS Updates."),
                    e = !1,
                    t.then(()=>{
                        this._updateQuickActionsMenu()
                    }
                    , e=>{
                        s.warn(r.LogTraceArea.QuickActionsService, "Update Failed." + n.pii.Omit(JSON.stringify(e)))
                    }
                    )
                }
                ))
            }
            ),
            l.Resolved()
        }
        getInitialUrl() {
            return a.default.getAndClearInitialUrl()
        }
        _updateQuickActionsMenu() {
            s.log(r.LogTraceArea.QuickActionsService, "updating.");
            const e = c.default.getS4LNativePlatformsEcsConfig().quickActions
              , t = e.enabled;
            if (!t && t !== this._lastEnable)
                return s.log(r.LogTraceArea.QuickActionsService, "Ecs disabled, removing all shortcuts."),
                this._lastEnable = t,
                a.default.removeAll();
            if (!t && this._lastEnable === t)
                return l.Rejected("ECS remains disabled, no updates necessary");
            const i = e.options;
            if (s.log(r.LogTraceArea.QuickActionsService, "Quick Actions Ecs is enabled, with Options: " + n.pii.Omit(JSON.stringify(i))),
            this._lastEnable === t && i) {
                if (this._lastOptions || i === this._lastOptions)
                    return l.Rejected("No change in ECS, update rejected.");
                this._lastOptions = i
            }
            return this._lastEnable = t,
            i ? a.default.updateAll(i) : a.default.updateAll([])
        }
        _pinnedShortcutsTelemetry() {
            return a.default.getAllPinnedShortcuts().then(e=>{
                o.isEmpty(o.xor(e, this._lastPinnedShortcuts)) || (g.track(new h.QuickActionsEvent(void 0,e)),
                this._lastPinnedShortcuts = e)
            }
            , e=>{
                s.warn(r.LogTraceArea.QuickActionsService, "Fail to send Telemetry." + n.pii.Omit(JSON.stringify(e)))
            }
            )
        }
    }
}
, , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(3062)
      , s = i(3063)
      , r = i(1765)
      , a = i(3065)
      , l = i(1105)
      , c = i(1803)
      , d = i(1163)
      , u = i(867)
      , g = i(58)
      , h = i(3066)
      , p = i(1217)
      , m = i(1805)
      , S = i(2)
      , C = (i(110),
    i(3))
      , y = i(1806)
      , f = i(1807)
      , _ = i(1768)
      , b = i(565)
      , v = i(17)
      , T = i(55)
      , P = i(22)
      , A = i(716)
      , k = i(24)
      , I = i(3072)
      , w = i(343)
      , N = i(1154)
      , M = i(3073)
      , E = i(3076);
    class x {
        constructor() {
            this._modalIndex = 0,
            this._onLaunchModal = e=>{
                C.log(S.LogTraceArea.Navigation, "ManagedModalNavigationHelper._onLaunchModal causeId: " + e.causeId);
                const t = e.modalId || "modal" + this._modalIndex++
                  , i = {
                    isPresentedInManagedModal: !0,
                    isAloneInNavStack: !0,
                    dialogId: t,
                    closeModal: ()=>{
                        g.default.dismissModal(t, e.rootViewId),
                        this._dispatchCloseModalEvent()
                    }
                }
                  , v = {
                    rootViewId: e.rootViewId,
                    useScopedModalId: e.useScopedModalId
                };
                let x;
                if (e.context instanceof T.UnansweredCallNavigationContext)
                    x = E.show(e.context.state.unansweredCallOutput, t, v, e.causeId);
                else if (e.context instanceof T.CaptureComboNavigationContext)
                    if (e.context.state.allowOfficeLens && A.isOfficeLensAvailable()) {
                        const t = e.context.state.onSendFlowComplete
                          , i = e.context.state.capturedContentHandler;
                        i && A.launchInCameraMode(i).then(e=>{
                            e && t && t()
                        }
                        )
                    } else
                        c.show(e.context.state, v, ()=>{
                            e.onDismiss && e.onDismiss(),
                            this._dispatchCloseModalEvent()
                        }
                        );
                else if (e.context instanceof T.CapturePreviewNavigationContext) {
                    const o = e.context
                      , s = n.createElement(u, Object.assign({
                        localMediaObjectUri: o.state.localMediaObjectUri,
                        localMediaThumbnailUri: o.state.localMediaThumbnailUri,
                        localMediaIsVideo: o.state.localMediaIsVideo,
                        mediaSelection: o.state.mediaSelection,
                        fileSize: o.state.fileSize,
                        mediaHeight: o.state.height,
                        mediaWidth: o.state.width,
                        skipShareWithPanel: o.state.skipShareWithPanel,
                        onCaptureFlowComplete: o.state.onCaptureFlowComplete,
                        conversationId: o.state.conversationId,
                        callId: o.state.callId,
                        markupEnabled: !0,
                        unlockOrientation: o.state.unlockOrientation,
                        performMarkupOnly: o.state.performMarkupOnly,
                        capturedContentHandler: o.state.capturedContentHandler,
                        captureSessionTelemetry: o.state.captureSessionTelemetry,
                        entryPoint: o.state.entryPoint,
                        inlinePreview: o.state.inlinePreview,
                        iconForClose: o.state.iconForClose,
                        onReject: o.state.onReject,
                        fileExtension: o.state.fileExtension
                    }, i));
                    g.default.showModal(s, t, v)
                } else if (e.context instanceof T.CaptureMultiPreviewNavigationContext) {
                    const i = e.context
                      , o = n.createElement(d.default, {
                        mediaPreviews: i.state.mediaPreviews,
                        conversationId: i.state.conversationId,
                        onReject: i.state.onReject
                    });
                    g.default.showModal(o, t, v)
                } else if (e.context instanceof T.LocationPickerContext) {
                    const o = n.createElement(p.default, null, n.createElement(y, Object.assign({
                        conversationId: e.context.state.conversationId
                    }, i)));
                    g.default.showModal(o, t, v)
                } else if (e.context instanceof T.ScreenShareModalContext) {
                    const i = e.context
                      , o = n.createElement(p.default, null, n.createElement(M, {
                        currentScreenSharingSource: i.state.currentScreenSharingSource,
                        currentScreenSharingSourceType: i.state.currentScreenSharingSourceType,
                        isScreenSharingActive: i.state.isScreenSharingActive,
                        onSelectSource: i.state.onSelectSource,
                        onClose: i.state.onClose,
                        initialShareSounds: i.state.shareSounds
                    }));
                    g.default.showModal(o, t, v)
                } else if (e.context instanceof b.MeetNowJoinLinkPanelNavigationContext) {
                    const i = e.context
                      , o = n.createElement(p.default, null, n.createElement(_.default, Object.assign({}, i.state)));
                    g.default.showModal(o, t, v)
                } else if (e.context instanceof T.LocationViewerContext) {
                    const o = e.context
                      , s = n.createElement(p.default, null, n.createElement(f, Object.assign({
                        message: o.state.message,
                        userMri: o.state.userMri,
                        isUserLocation: o.state.isUserLocation,
                        addressFriendlyName: o.state.addressFriendlyName,
                        shortAddress: o.state.shortAddress,
                        fullAddress: o.state.fullAddress,
                        latitude: o.state.latitude,
                        longitude: o.state.longitude
                    }, i)));
                    g.default.showModal(s, t, v)
                } else if (e.context instanceof T.DocumentViewerContext) {
                    const o = n.createElement(p.default, null, n.createElement(m, Object.assign({
                        message: e.context.state.message,
                        documentUri: e.context.state.fileUri,
                        fileName: e.context.state.fileName
                    }, i)));
                    g.default.showModal(o, t, v)
                } else if (e.context instanceof T.DesktopCaptureComboViewNavigationContext) {
                    const o = n.createElement(p.default, null, n.createElement(h, Object.assign({
                        key: "desktopCapturePanel",
                        conversationId: e.context.state.conversationId,
                        onShareComplete: e.context.state.onShareComplete
                    }, i)));
                    g.default.showModal(o, t, v)
                } else if (e.context instanceof T.AugmentedPermissionsViewNavigationContext) {
                    if (void 0 === e.permissionType)
                        return void C.error(S.LogTraceArea.Navigation, "AugmentedPermissions event fired without a permission type, no UI shown");
                    x = s.show(t, v, e.permissionType, e.causeId, e.context.state.conversationMri, e.context.state.onContinueAfterPermissionsDenied)
                } else if (e.context instanceof T.AndroidCallMonitorPermissionNavigationContext) {
                    const e = n.createElement(o.default, Object.assign({
                        deviceWidth: k.default.getWidthNoSubscription(v.rootViewId)
                    }, i));
                    g.default.showModal(e, t, v)
                } else if (e.context instanceof T.CQFNavigationContext) {
                    const o = e.context.state.callInfo
                      , s = e.context.state
                      , r = n.createElement(a.default, Object.assign({
                        callId: o.callId,
                        conversationMri: o.conversationMri,
                        endpointId: s.endpointId,
                        nodeId: s.nodeId,
                        participantId: s.participantId,
                        pstnCdrId: s.pstnCdrId,
                        problemSections: l.problemSections(o.callId, s.includedVideo),
                        isPresentedInDesktopSubview: !P.default.isUsingStackNavigationContextNoSubscription(),
                        maxConnectedParticipants: s.maxConnectedParticipants
                    }, i));
                    g.default.showModal(r, t, v)
                } else if (e.context instanceof w.default.NavigationContext.ScheduleNextCallNavigationContext) {
                    const o = e.context.state.callEndedInfo
                      , s = n.createElement(N.default.ScheduleNextCallPanel, Object.assign({
                        conversationMri: o.conversationMri,
                        callDuration: o.durationSeconds
                    }, i));
                    g.default.showModal(s, t, v)
                } else
                    e.context instanceof T.CallPreviewNavigationContext ? r.maybePresentCallPreviewPanel(Object.assign({}, e.context.state), v) : e.context instanceof T.RinglessCallInterstitialNavigationContext && I.maybePresentRinglessCallInterstitial(Object.assign({}, e.context.state), v);
                this._onHandleCloseModal = x
            }
            ,
            this._onCloseModal = e=>{
                C.log(S.LogTraceArea.Navigation, "ManagedModalNavigationHelper._onCloseModal"),
                this._onHandleCloseModal ? this._onHandleCloseModal(e.modalId) : e.modalId ? g.default.dismissModal(e.modalId, e.rootViewId, e.useScopedModalId) : n.Modal.dismissAll(),
                this._dispatchCloseModalEvent()
            }
            ,
            C.log(S.LogTraceArea.Navigation, "ManagedModalNavigationHelper constructor"),
            v.launchModalEvent.subscribe(this._onLaunchModal),
            v.closeModalEvent.subscribe(this._onCloseModal)
        }
        static open() {
            C.log(S.LogTraceArea.Navigation, "ManagedModalNavigationHelper.open"),
            this._modalNavigationHelper || (this._modalNavigationHelper = new x)
        }
        static close() {
            C.log(S.LogTraceArea.Navigation, "ManagedModalNavigationHelper.close"),
            this._modalNavigationHelper && (this._modalNavigationHelper._close(),
            this._modalNavigationHelper = void 0)
        }
        _close() {
            C.log(S.LogTraceArea.Navigation, "ManagedModalNavigationHelper._close"),
            this._launchModalToken && (this._launchModalToken.unsubscribe(),
            this._launchModalToken = void 0),
            this._closeModalToken && (this._closeModalToken.unsubscribe(),
            this._closeModalToken = void 0)
        }
        _dispatchCloseModalEvent() {
            0
        }
    }
    e.exports = x
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._videoDuration = e,
            this._videoSize = t,
            this._success = !1,
            this._error = ""
        }
        getEventName() {
            return "camera_vim"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Action: this.getActionName(),
                IsSuccess: this._success,
                VideoDuration: this._videoDuration,
                VideoSize: this._videoSize,
                TransactionId: this._transactionId || "",
                Error: this._error
            })
        }
        setStatus(e, t, i="") {
            this._success = e,
            this._transactionId = t,
            this._error = i
        }
    }
    t.RecordEvent = class extends s {
        getActionName() {
            return "Record"
        }
    }
    ;
    t.UploadEvent = class extends s {
        getActionName() {
            return "Upload"
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(82);
    var o, s;
    !function(e) {
        e[e.BackButton = 0] = "BackButton",
        e[e.CancelButton = 1] = "CancelButton",
        e[e.ClickOutside = 2] = "ClickOutside",
        e[e.Esc = 3] = "Esc"
    }(o = t.ScreenSharingPanelCancelOrigin || (t.ScreenSharingPanelCancelOrigin = {})),
    function(e) {
        e[e.StartButton = 0] = "StartButton",
        e[e.DoubleClickSource = 1] = "DoubleClickSource",
        e[e.EnterWithKeyboardNavigation = 2] = "EnterWithKeyboardNavigation"
    }(s = t.ScreenSharingStartOrigin || (t.ScreenSharingStartOrigin = {}));
    const r = i(39);
    class a extends r.TelemetryEventBase {
        constructor(e, t, i, n) {
            super(),
            this._screensCount = e,
            this._windowsCount = t,
            this._origin = i,
            this._isSwitchingScreen = n
        }
        getEventName() {
            return "calling_screen_sharing_panel"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e.IsSwitchingScreen = this._isSwitchingScreen,
            e.ScreensCount = this._screensCount,
            e.WindowsCount = this._windowsCount,
            e.Origin = this._origin,
            e
        }
    }
    t.ScreenSharingPanelCancelEvent = class extends a {
        constructor(e, t, i, n) {
            super(t, i, o[e], n)
        }
        getActionName() {
            return "ScreenSharingPanelCancel"
        }
        getAttributes() {
            return super.getAttributes()
        }
    }
    ;
    t.ScreenSharingPanelStartedSharingEvent = class extends a {
        constructor(e, t, i, n, o) {
            super(i, n, s[t], o),
            this._sourceType = e
        }
        getActionName() {
            return "ScreenSharingPanelStartedSharing"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.SourceType = n.SharingSourceType[this._sourceType],
            e
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(164)
      , s = i(0)
      , r = i(6)
      , a = i(10)
      , l = i(245)
      , c = i(2)
      , d = i(110)
      , u = i(567)
      , g = i(3)
      , h = i(124)
      , p = i(4)
      , m = i(17)
      , S = i(55)
      , C = i(22)
      , y = i(97)
      , f = i(262)
      , _ = i(165)
      , b = i(373)
      , v = i(156)
      , T = i(306)
      , P = i(92)
      , A = i(135)
      , k = i(9);
    class I {
        static registerKeyboardHandlers() {
            const e = I._registrationTokenCounter++;
            return this._registeredTokens.push(e),
            g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper.registerKeyboardHandlers token: " + e),
            this._keyboardHandlersRegistered || (g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper.registerKeyboardHandlers, registering handlers"),
            h.default.addHandler(c.KeyboardShortcut.OpenThemePicker, this._navigateToThemePicker),
            h.default.addHandler(c.KeyboardShortcut.OpenHelpInABrowser, this._openHelpInABrowser),
            h.default.addHandler(c.KeyboardShortcut.ToggleTheme, this._toggleLightOrDarkTheme),
            h.default.addHandler(c.KeyboardShortcut.SendFeedback, this._navigateToFeedback),
            h.default.addHandler(c.KeyboardShortcut.OpenContactsPanel, this._navigateToContactsPanel),
            h.default.addHandler(c.KeyboardShortcut.OpenNotificationPanel, this._navigateToNotificationsPanel),
            h.default.addHandler(c.KeyboardShortcut.OpenDialpad, this._openMainDialpad),
            h.default.addHandler(c.KeyboardShortcut.OpenKeyboardShortcuts, this._navigateToKeyboardShortcuts),
            h.default.addHandler(c.KeyboardShortcut.OpenAppSettings, this._navigateToSettings),
            h.default.addHandler(c.KeyboardShortcut.StartNewConversation, this._startNewConversation),
            h.default.addHandler(c.KeyboardShortcut.NewGroup, this._startNewGroupConversation),
            h.default.addHandler(c.KeyboardShortcut.Search, this._navigateToSearch),
            this._keyboardHandlersRegistered = !0),
            e
        }
        static unregisterKeyboardHandlers(e) {
            g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper.unregisterKeyboardHandlers token: " + e),
            this._registeredTokens = n.remove(this._registeredTokens, t=>t === e),
            this._keyboardHandlersRegistered && n.isEmpty(this._registeredTokens) && (g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper.unregisterKeyboardHandlers, unregistering handlers"),
            h.default.removeHandler(c.KeyboardShortcut.OpenThemePicker, this._navigateToThemePicker),
            h.default.removeHandler(c.KeyboardShortcut.OpenHelpInABrowser, this._openHelpInABrowser),
            h.default.removeHandler(c.KeyboardShortcut.ToggleTheme, this._toggleLightOrDarkTheme),
            h.default.removeHandler(c.KeyboardShortcut.SendFeedback, this._navigateToFeedback),
            h.default.removeHandler(c.KeyboardShortcut.OpenContactsPanel, this._navigateToContactsPanel),
            h.default.removeHandler(c.KeyboardShortcut.OpenNotificationPanel, this._navigateToNotificationsPanel),
            h.default.removeHandler(c.KeyboardShortcut.OpenDialpad, this._openMainDialpad),
            h.default.removeHandler(c.KeyboardShortcut.OpenKeyboardShortcuts, this._navigateToKeyboardShortcuts),
            h.default.removeHandler(c.KeyboardShortcut.OpenAppSettings, this._navigateToSettings),
            h.default.removeHandler(c.KeyboardShortcut.StartNewConversation, this._startNewConversation),
            h.default.removeHandler(c.KeyboardShortcut.NewGroup, this._startNewGroupConversation),
            this._keyboardHandlersRegistered = !1)
        }
        static navigateToSettings() {
            this._navigateToSettings()
        }
        static navigateToSearch(e=c.SearchPanelInitiator.KeyboardShortcut) {
            this._navigateToSearchWithOrigin(e)
        }
        static startNewConversation(e=c.NavigationConversationOrigin.KeyboardShortcut) {
            this._startNewConversationWithOrigin(e)
        }
        static startNewGroupConversation(e=c.NavigationConversationOrigin.KeyboardShortcut) {
            this._startNewGroupConversationWithOrigin(e)
        }
        static navigateToFeedback() {
            this._navigateToFeedback()
        }
        static _navigateToSearchWithOrigin(e) {
            const t = k.newCauseId();
            g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._navigateToSearch causeId: " + t),
            m.closeGenericDesktopModal(t, void 0);
            I._openInMainWindow(t, i=>{
                m.navigateToSearch({
                    searchOrigin: e
                }, t),
                d.setFocusWithDelay(d.FocusEvent.SearchInput, 0)
            }
            )
        }
        static _startNewConversationWithOrigin(e) {
            const t = k.newCauseId();
            g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._startNewConversation causeId: " + t),
            m.closeGenericDesktopModal(t, void 0);
            I._openInMainWindow(t, t=>{
                new l.default({
                    creating1on1Conversation: !0,
                    peopleType: v.PeopleType.All,
                    filterPeopleType: v.FilterType.None,
                    isSingleContactSelect: !0,
                    navigationOrigin: e,
                    wizardSteps: [y.WizardSteps.setConvParticipants]
                }).start(a.MainRootViewId)
            }
            )
        }
        static _startNewGroupConversationWithOrigin(e) {
            const t = k.newCauseId();
            g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._startNewGroupConversation causeId: " + t),
            m.closeGenericDesktopModal(t, void 0);
            I._openInMainWindow(t, t=>{
                new l.default({
                    navigationOrigin: e,
                    peopleType: v.PeopleType.All,
                    filterPeopleType: v.FilterType.GroupCapable
                }).start(a.MainRootViewId)
            }
            )
        }
        static _openInMainWindow(e, t) {
            g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._maybeOpenMainWindow causeId: " + e),
            this._intOpenInWindow(e, !0, t)
        }
        static _openInCurrentWindow(e, t) {
            g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._openInCurrentWindow causeId: " + e),
            this._intOpenInWindow(e, !1, t)
        }
        static _intOpenInWindow(e, t, i) {
            g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._intOpenInWindow causeId: " + e),
            C.default.isUsingSplitViewNoSubscription() ? o.default.getLastActiveSplitView().then(n=>{
                const o = n && n.isActive ? n.id : a.MainRootViewId;
                i(o),
                o !== a.MainRootViewId && t && m.openMainWindow(!1, o, e)
            }
            , t=>{
                g.log(c.LogTraceArea.Navigation, "getLastActiveSplitView() failed. error: " + t + " causeId: " + e),
                i(a.MainRootViewId)
            }
            ) : i(a.MainRootViewId)
        }
    }
    I._keyboardHandlersRegistered = !1,
    I._registrationTokenCounter = 1,
    I._registeredTokens = [],
    I._navigateToThemePicker = ()=>{
        const e = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._navigateToAVSettings causeId: " + e),
        m.closeGenericDesktopModal(e, void 0);
        return I._openInMainWindow(e, t=>{
            m.navigateToDesktopSettingsGroup(S.SettingsGroup.ThemeSettings, void 0, e)
        }
        ),
        !0
    }
    ,
    I._navigateToSearch = ()=>(I._navigateToSearchWithOrigin(c.SearchPanelInitiator.KeyboardShortcut),
    !0),
    I._navigateToContactsPanel = ()=>{
        const e = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._navigateToContactsPanel causeId: " + e),
        m.closeGenericDesktopModal(e, void 0);
        return I._openInMainWindow(e, t=>{
            m.navigateToContactsPanelInLeftNav(e),
            d.setFocusWithDelay(d.FocusEvent.Contacts, 0)
        }
        ),
        !0
    }
    ,
    I._navigateToNotificationsPanel = ()=>{
        const e = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._navigateToNotificationsPanel causeId: " + e),
        m.closeGenericDesktopModal(e, void 0);
        return I._openInMainWindow(e, t=>{
            m.navigateToNotificationsPanelInLeftNav(e),
            d.setFocusWithDelay(d.FocusEvent.Notifications, 0)
        }
        ),
        !0
    }
    ,
    I._navigateToSettings = ()=>{
        const e = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._navigateToSettings causeId: " + e),
        m.closeGenericDesktopModal(e, void 0);
        return I._openInMainWindow(e, t=>{
            g.track(new _.SettingsTelemetry(c.SettingsOrigin.Shortcut)),
            m.navigateToDesktopSettings(void 0, e)
        }
        ),
        !0
    }
    ,
    I._startNewConversation = ()=>(I._startNewConversationWithOrigin(c.NavigationConversationOrigin.KeyboardShortcut),
    !0),
    I._startNewGroupConversation = ()=>(I._startNewGroupConversationWithOrigin(c.NavigationConversationOrigin.KeyboardShortcut),
    !0),
    I._openMainDialpad = ()=>{
        const e = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._openMainDialpad causeId: " + e),
        m.closeGenericDesktopModal(e, void 0);
        return I._openInMainWindow(e, t=>{
            m.navigateToPSTNDialerWithParams({
                causeId: e,
                navigationSource: c.DialerNavigationSource.RootCompositeNavigationView
            }, void 0)
        }
        ),
        !0
    }
    ,
    I._navigateToFeedback = ()=>{
        const e = k.newCauseId();
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._navigateToFeedback causeId: " + e);
        return I._openInCurrentWindow(e, t=>{
            g.track(new f.NavigationHelpAndFeedback(y.NavigationSettingsItem.ReportAProblem,y.NavigationSettingsOrigin.ApplicationMenu)),
            m.closeGenericDesktopModal(e, {
                rootViewId: t
            }),
            b.reportProblem(!0, t)
        }
        ),
        !0
    }
    ,
    I._openHelpInABrowser = ()=>{
        const e = u.getTelemetryCorrelationId();
        g.track(new f.NavigationHelpAndFeedback(y.NavigationSettingsItem.GetHelp,y.NavigationSettingsOrigin.KeyboardShortcut,e)),
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._openHelpInABrowser");
        let t = T.addSsoFlagToUrl(r.default.getConfigSettings().helpGoParam.supportArticles, !0);
        t = u.addCommonTrackingParams(t, !0, !0);
        const i = {
            tcg: e
        };
        return m.navigateToHelpAndFeedbackLink(t, "", p.getString("MyProfilePanel.GetHelpTitle"), a.MainRootViewId, i),
        !0
    }
    ,
    I._toggleLightOrDarkTheme = ()=>{
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._toggleLightOrDarkTheme"),
        P.toggleLightOrDarkTheme();
        const e = A.isDarkTheme(P.colorThemeNoSubscription())
          , t = p.getString(e ? "ColorThemeDialog.ShortcutThemeToggleDarkAccessible" : "ColorThemeDialog.ShortcutThemeToggleLightAccessible");
        return s.Accessibility.announceForAccessibility(t),
        !0
    }
    ,
    I._navigateToKeyboardShortcuts = ()=>{
        const e = k.newCauseId();
        if (!r.default.getS4LUiFeaturesNoSubscription().enableHotKeysPanel)
            return g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._navigateToKeyboardShortcuts, not enabled. causeId: " + e),
            !1;
        g.log(c.LogTraceArea.Navigation, "KeyboardShortcutUIHelper._navigateToKeyboardShortcuts causeId: " + e),
        m.closeGenericDesktopModal(e, void 0);
        return I._openInCurrentWindow(e, t=>{
            m.navigateToDesktopSettingsGroup(S.SettingsGroup.HotKeys, void 0, e)
        }
        ),
        !0
    }
    ,
    t.default = I
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(143)
      , s = i(43)
      , r = i(27)
      , a = i(5)
      , l = i(8)
      , c = i(11)
      , d = i(15)
      , u = a.lazyProperties({
        nametagContainer: ()=>n.Styles.createViewStyle({
            backgroundColor: l.Color.blackOverlay50,
            borderRadius: 5,
            paddingHorizontal: 10,
            paddingVertical: 5,
            flexDirection: "row",
            alignItems: "center"
        }),
        nameText: ()=>n.Styles.createTextStyle({
            color: l.Color.white
        }),
        iconLeft: ()=>n.Styles.createViewStyle({
            marginRight: 6
        }),
        iconRight: ()=>n.Styles.createViewStyle({
            marginLeft: 6
        })
    });
    class g extends s.default {
        constructor() {
            super(...arguments),
            this.onKeyPress = e=>o.default.maybeHandleKeyPress(e, ()=>{
                this.props.onPress && this.props.onPress(e)
            }
            )
        }
        render() {
            const e = this._iconView(this.props.leftIcon, u.iconLeft)
              , t = this._iconView(this.props.rightIcon, u.iconRight)
              , i = this.props.onPress || this.props.onMouseEnter || this.props.onMouseLeave;
            return n.createElement(n.Animated.View, {
                style: [u.nametagContainer, this.props.style],
                onPress: this.props.onPress,
                onKeyPress: this.props.onPress ? this.onKeyPress : void 0,
                accessibilityLabel: this.props.accessibilityLabel,
                tabIndex: this.props.onPress ? 0 : void 0,
                accessibilityTraits: this.props.onPress ? n.Types.AccessibilityTrait.Button : void 0,
                onMouseEnter: this.props.onMouseEnter,
                onMouseLeave: this.props.onMouseLeave,
                blockPointerEvents: !i
            }, this.props.leftElement, e, n.createElement(d.Caption, {
                style: u.nameText,
                disableThemeSubscription: !0
            }, this.props.displayText), t)
        }
        _iconView(e, t) {
            return e ? n.createElement(r.default, {
                icon: e,
                color: l.Color.white,
                size: c.IconSize.size12,
                style: t
            }) : void 0
        }
    }
    t.default = g
}
, , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(86)
      , s = i(0)
      , r = i(6)
      , a = i(3095)
      , l = i(2)
      , c = i(1593)
      , d = i(80)
      , u = i(3)
      , g = i(1811)
      , h = i(5)
      , p = i(1819)
      , m = i(3191)
      , S = i(3192)
      , C = i(17)
      , y = i(55)
      , f = i(64)
      , _ = i(214)
      , b = i(24)
      , v = i(3282)
      , T = i(358)
      , P = i(94)
      , A = i(8)
      , k = i(25)
      , I = i(14)
      , w = i(12)
      , N = i(3291)
      , M = i(3304)
      , E = i(9)
      , x = i(183)
      , D = h.lazyProperties({
        contentContainerStyle: ()=>s.Styles.createViewStyle({
            alignSelf: "stretch",
            flex: 1
        }),
        contentWrapper: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignSelf: "stretch"
        }),
        rightPanelShim: ()=>s.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
            backgroundColor: A.Color.blackOverlay50
        })
    });
    class L extends w.default {
        constructor() {
            super(...arguments),
            this._statusBarKey = n.uniqueId("RootCompositeNavigationView:"),
            this._rightPanelShimOpacityValue = new s.Animated.Value(0),
            this._rightPanelShimOpacityStyle = s.Styles.createAnimatedViewStyle({
                opacity: this._rightPanelShimOpacityValue
            }),
            this._closeRightPanel = ()=>{
                const e = E.newCauseId();
                u.log(l.LogTraceArea.Navigation, "RootCompositeNavigationView._closeRightPanel,  causeId: " + e),
                C.closeRightPanel(e, this._getRootViewId())
            }
            ,
            this._onRightSidebarView = e=>{
                this._rightSidebarView = e || void 0
            }
            ,
            this._onPan = e=>{
                this._rightSidebarView && this._rightSidebarView.onPan(e, this._closeRightPanel)
            }
        }
        _buildState(e, t) {
            const i = _.default.modalNavigatorIdForRootViewId(this._getRootViewId())
              , n = f.default.getCurrentModalStackNavigationContext(i)
              , o = n && n.isValid() ? n : void 0
              , s = _.default.rightSideBarNavigatorIdForRootViewId(this._getRootViewId())
              , a = f.default.getCurrentSidebarStackNavigationContext(s)
              , l = e.useTabletUI && !!o
              , c = this._getRootViewId();
            return {
                responsiveWidth: b.default.getResponsiveWidth(c),
                showShimForRightPanel: e.useTabletUI,
                fixedContainerHeight: l ? x.default.windowHeightWithoutStatusBar(this._getRootViewId()) : 0,
                shouldDisplayRightNavigation: f.default.shouldDisplayRightNavigation(c),
                activeModalSplitContext: o,
                rightSidebarStackNavContext: a,
                showFooter: !f.default.getCompositeCallVisible(c) || r.default.getS4LUiFeatures().enableWebFooterEverywhere
            }
        }
        componentDidMount() {
            super.componentDidMount();
            const e = P.mergeStyles([P.createHiddenStyle(!1), P.createBarStyle(this._themeColors.defaultStatusBarTheme), P.createBackgroundColorStyle(A.Color.sxStatusBarDefault)]);
            T.default.addOrUpdateStyle(this._statusBarKey, e),
            this.state.showShimForRightPanel && this._rightPanelShimOpacityValue.setValue(this._hasRightNavContext(this.props, this.state) ? 1 : 0),
            this._registerKeyboardHandlers()
        }
        componentDidUpdate(e, t, i) {
            if (super.componentDidUpdate(e, t, i),
            this.state.showShimForRightPanel) {
                const i = this._hasRightNavContext(this.props, this.state);
                i !== this._hasRightNavContext(e, t) && o.timing.easeOut({
                    value: this._rightPanelShimOpacityValue,
                    toValue: i ? 1 : 0,
                    duration: o.timing.Duration.Short,
                    useNativeDriver: !0
                }).start()
            }
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._updateStatusBar(),
            this._unregisterKeyboardHandlers()
        }
        render() {
            const e = [I.flexOne];
            this.props.useTabletUI && e.push(I.overflowVisible);
            const t = this._renderCompositeSplitView(this.props.splitNavContext, this.state.showFooter ? void 0 : e)
              , i = this.state.showFooter ? s.createElement(a, null) : void 0;
            return s.createElement(s.View, {
                style: e
            }, t, i)
        }
        _registerKeyboardHandlers() {
            this._keyboardShortcutToken = g.default.registerKeyboardHandlers()
        }
        _unregisterKeyboardHandlers() {
            this._keyboardShortcutToken && (g.default.unregisterKeyboardHandlers(this._keyboardShortcutToken),
            this._keyboardShortcutToken = void 0)
        }
        _renderCompositeSplitView(e, t) {
            let i = [];
            const o = e.getMasterContext()
              , r = !!o && e instanceof y.RootCompositeSplitViewContext && !e.shouldDisplayMainAreaFullScreen()
              , a = !!o && o.state.viewMode === y.LeftNavViewMode.Search
              , l = this.state.showShimForRightPanel && this._hasRightNavContext(this.props, this.state) ? s.Types.ImportantForAccessibility.NoHideDescendants : void 0;
            let u = !0;
            o && (o instanceof y.LeftNavigationViewContext ? r && (i.push(s.createElement(p, {
                key: "leftNav",
                navContext: o,
                viewMode: o.state.viewMode,
                importantForAccessibility: l
            })),
            this.state.responsiveWidth <= k.ResponsiveWidth.Tiny && a && (u = !1)) : i.push(s.createElement(m, {
                key: "leftNav",
                navContext: o,
                importantForAccessibility: l
            })));
            let g, h = y.RightSidebarViewMode.None;
            if (u) {
                if (this.state.rightSidebarStackNavContext) {
                    const e = n.last(this.state.rightSidebarStackNavContext.getNavStack());
                    h = _.default.deriveViewModeFromRightNavContext(e)
                }
                let t = s.createElement(S, {
                    key: "mainStage",
                    splitNavContext: e
                });
                this.props.useTabletUI && (t = s.createElement(s.View, {
                    key: "mainStage",
                    style: I.flexOne,
                    importantForAccessibility: l
                }, t)),
                i.push(t)
            }
            if (this.state.shouldDisplayRightNavigation) {
                if (this.state.showShimForRightPanel) {
                    const e = h !== y.RightSidebarViewMode.None
                      , t = e ? s.createElement(s.GestureView, {
                        style: I.flexOne,
                        onPanHorizontal: this._onPan,
                        onTap: this._closeRightPanel
                    }) : void 0;
                    i.push(s.createElement(d.HiddenAnimatedView, {
                        key: "rightNavShim",
                        style: [D.rightPanelShim, this._rightPanelShimOpacityStyle],
                        disableTouchOpacityAnimation: !0,
                        blockPointerEvents: !e
                    }, t))
                }
                let e = !1;
                const t = this.props.splitNavContext.getNavStack();
                e = !!t && n.last(t)instanceof y.CallNavigationContext,
                i.push(s.createElement(v, {
                    key: "rightNav",
                    ref: this._onRightSidebarView,
                    stackNavContext: this.state.rightSidebarStackNavContext,
                    leftNavCollapsedOrHidden: !o || !r,
                    suppressAnimation: e
                }))
            }
            this.state.activeModalSplitContext && (g = s.createElement(c.default, {
                activeModalSplitContext: this.state.activeModalSplitContext,
                showOverflow: !!this.props.useTabletUI
            }));
            const C = [D.contentWrapper];
            g && this.state.fixedContainerHeight ? C.push(s.Styles.createViewStyle({
                height: this.state.fixedContainerHeight,
                width: x.default.measureWindow(this._getRootViewId()).width
            }, !1)) : C.push(I.flexOne);
            const f = [t || D.contentContainerStyle];
            return this.props.useTabletUI && (f.push(I.overflowVisible),
            C.push(I.overflowVisible)),
            s.createElement(s.View, {
                style: f
            }, s.createElement(N.default, null), s.createElement(s.View, {
                style: C,
                importantForAccessibility: void 0
            }, i), g, s.createElement(M.default, null))
        }
        _updateStatusBar() {
            const e = P.mergeStyles([P.createHiddenStyle(!1), P.createBarStyle(this._themeColors.defaultStatusBarTheme), P.createBackgroundColorStyle(A.Color.sxStatusBarDefault)]);
            T.default.addOrUpdateStyle(this._statusBarKey, e)
        }
        _hasRightNavContext(e, t) {
            return !!t.rightSidebarStackNavContext && t.rightSidebarStackNavContext.getNavStack().length > 0
        }
        _updateCurrentTheme(e, t) {
            const i = super._updateCurrentTheme(e, t);
            return t || this._updateStatusBar(),
            i
        }
    }
    e.exports = L
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(6)
      , r = i(148)
      , a = i(51)
      , l = i(519)
      , c = i(1820)
      , d = i(267)
      , u = i(115)
      , g = i(10)
      , h = i(333)
      , p = i(3096)
      , m = i(3098)
      , S = i(669)
      , C = i(3100)
      , y = i(2)
      , f = i(40)
      , _ = i(3)
      , b = i(5)
      , v = i(1226)
      , T = i(3190)
      , P = i(4)
      , A = i(17)
      , k = i(55)
      , I = i(22)
      , w = i(64)
      , N = i(1234)
      , M = i(75)
      , E = i(321)
      , x = i(526)
      , D = i(251)
      , L = i(8)
      , R = i(11)
      , B = i(14)
      , O = i(59)
      , F = i(29)
      , V = i(9)
      , U = [k.HubTab.Recents, k.HubTab.Calls, k.HubTab.People, k.HubTab.Notifications]
      , H = b.lazyProperties({
        viewContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch"
        }),
        innerContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            borderRightWidth: 1,
            borderStyle: "solid",
            borderColor: L.Color.gray50
        }),
        searchOverlayContainerHidden: ()=>o.Styles.createViewStyle({
            height: 0
        }),
        searchBoxContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            alignItems: "stretch",
            justifyContent: "center",
            flexDirection: "row",
            height: 50,
            paddingLeft: 8,
            paddingRight: 10,
            paddingTop: 10,
            paddingBottom: 0
        }),
        searchBoxContainerTopTabs: ()=>o.Styles.createViewStyle({
            paddingLeft: 8,
            paddingRight: 8,
            paddingBottom: 8,
            marginTop: -6
        }),
        searchButtonContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            justifyContent: "center"
        }),
        fullScreenOverrides: ()=>b.lazyProperties({
            mainContent: ()=>o.Styles.createViewStyle({
                flex: 1,
                borderRightWidth: 0
            })
        }),
        dragHandle: ()=>o.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            right: -15,
            bottom: 0,
            width: 20,
            backgroundColor: L.Color.transparent
        }),
        dragHandleDesktop: ()=>o.Styles.createViewStyle({
            cursor: "ew-resize"
        }),
        tabsWrapper: ()=>o.Styles.createViewStyle({
            paddingBottom: 8,
            paddingTop: 2,
            borderBottomWidth: 1,
            borderColor: L.Color.transparent
        }),
        tabsWrapperMoreSpace: ()=>o.Styles.createViewStyle({
            marginTop: 10,
            paddingBottom: 12
        }),
        floatingShadow: ()=>o.Styles.createViewStyle({
            shadowOffset: {
                height: 0,
                width: 0
            },
            shadowRadius: 16,
            shadowColor: L.Color.blackOverlay20
        }),
        callBackground: ()=>o.Styles.createViewStyle({
            backgroundColor: L.Color.gray400
        })
    });
    class W extends a.default {
        constructor() {
            super(...arguments),
            this._animatedWrapperWidthValue = new o.Animated.Value(0),
            this._animatedWrapperWidthStyle = o.Styles.createAnimatedViewStyle({
                width: this._animatedWrapperWidthValue
            }),
            this._animatedContentWidthValue = new o.Animated.Value(0),
            this._animatedContentWidthStyle = o.Styles.createAnimatedViewStyle({
                width: this._animatedContentWidthValue
            }),
            this._headerPanelRef = ()=>this._headerRef ? this._headerRef.getUserIconRef() : void 0,
            this._onTabPress = (e,t)=>{
                const i = V.newCauseId();
                switch (_.log(y.LogTraceArea.Navigation, "LeftNavigationView._onTabPress, causeId: " + i),
                e) {
                case k.HubTab.Recents:
                    A.navigateToDesktopRecents(i);
                    break;
                case k.HubTab.Calls:
                    A.navigateToQuickCallPanelInLeftNav({
                        causeId: i
                    });
                    break;
                case k.HubTab.People:
                    A.navigateToContactsPanelInLeftNav(i);
                    break;
                case k.HubTab.Notifications:
                    A.navigateToNotificationsInLeftNav()
                }
            }
            ,
            this._onTabLongPress = (e,t)=>{
                const i = V.newCauseId();
                switch (_.log(y.LogTraceArea.Navigation, "LeftNavigationView._onTabLongPress, causeId: " + i),
                e) {
                case k.HubTab.Recents:
                case k.HubTab.Notifications:
                    E.default.showDesktopTabOptionsMenu(e, ()=>this._tabRef(e), this._getRootViewId(), t)
                }
            }
            ,
            this._onDesktopHubTabBarRef = e=>{
                this._tabBar = e || void 0
            }
            ,
            this._onDesktopNavigationHeaderRef = e=>{
                this._headerRef = e || void 0
            }
            ,
            this._onPanDragHandle = e=>{
                let t;
                t = this._isDragging ? e.pageX - this._currentDragX : e.pageX - e.initialPageX,
                this._currentDragX = e.pageX,
                this._currentWidth += t,
                this._currentWidth < this.state.minWidth ? this._currentWidth = this.state.minWidth : this._currentWidth > g.SideBarWidths.max && (this._currentWidth = g.SideBarWidths.max),
                this._animatedContentWidthValue.setValue(this._currentWidth),
                e.isComplete ? (this._expandedWidth = this._currentWidth,
                this._animatedWrapperWidthValue.setValue(this._expandedWidth),
                D.default.putWidth(D.SideBar.Left, this._expandedWidth),
                this._isDragging = !1,
                this.forceUpdate()) : this._isDragging || (this._isDragging = !0,
                this.forceUpdate());
                const i = this._currentWidth < g.SideBarWidths.compact;
                this.state.useCompactIcons !== i && this.setState({
                    useCompactIcons: i
                })
            }
            ,
            this._onSearchButtonClick = e=>{
                const t = V.newCauseId();
                _.log(y.LogTraceArea.Navigation, "LeftNavigationView._onSearchButtonClick, causeId: " + t),
                e && e.stopPropagation(),
                A.navigateToSearch({
                    searchOrigin: y.SearchPanelInitiator.RecentsListSearchButton
                }, t)
            }
            ,
            this._onTabletBackButtonPressed = ()=>{
                const e = V.newCauseId();
                switch (_.log(y.LogTraceArea.Navigation, "LeftNavigationView._onTabletBackButtonPressed, causeId: " + e),
                this.props.viewMode) {
                case k.LeftNavViewMode.Search:
                    return A.closeSearchPanel(e, this._getContext()),
                    !0;
                case k.LeftNavViewMode.CallSearch:
                    return A.closeCallSearchPanel(e, this._getContext()),
                    !0
                }
                return !1
            }
            ,
            this._onDialpadButtonClick = ()=>{
                const e = V.newCauseId();
                _.log(y.LogTraceArea.Navigation, "DesktopNavigation._onDialpadButtonClick causeId: " + e),
                A.navigateToPSTNDialerWithParams({
                    causeId: e,
                    navigationSource: y.DialerNavigationSource.DesktopNavigationSearchBox
                }, this._getContext())
            }
        }
        _buildState(e, t) {
            const i = S.default.collapseDesktopStackNavContext()
              , n = D.default.resizingEnabled(D.SideBar.Left)
              , o = e.viewMode === k.LeftNavViewMode.Search
              , r = e.viewMode === k.LeftNavViewMode.ConversationInCall ? g.SideBarWidths.base : g.SideBarWidths.min
              , a = O.useTabletUI()
              , c = I.default.isUsingSplitView() && s.default.getS4LUiFeatures().doubleClickConversationsEnabled
              , d = s.default.getS4LMessagingFeatures().enableNotificationPrompt && M.default.shouldShowNotificationsPrompt()
              , u = l.default.isBookmarkAdded()
              , p = {
                useDesktopUI: i,
                useTabletUI: a,
                requireDoubleClick: c,
                isResizeable: n,
                showNotificationsPrompt: d,
                mainStageViewMode: n ? w.default.getCompositeMainStageNavViewMode(g.MainRootViewId) : void 0,
                renderPreMountedSearch: o || !t && this.state.renderPreMountedSearch,
                minWidth: r,
                conversationsListMode: a ? h.default.getConversationsListMode() : void 0,
                useExtraCompactLayout: E.default.useExtraCompactLayoutAndChanges(),
                isBookmarkAdded: u,
                isMeetNowEnabled: s.default.getS4LCMCFeatures().enableMeetNow
            };
            if (t || r !== this.state.minWidth) {
                this._currentDragX = 0,
                this._expandedWidth = Math.max(r, D.default.getWidth(D.SideBar.Left)),
                this._currentWidth = this._expandedWidth,
                this._animatedWrapperWidthValue.setValue(this._currentWidth),
                this._animatedContentWidthValue.setValue(this._currentWidth);
                const e = this._currentWidth <= g.SideBarWidths.compact;
                t && (this._useCompactIconsOnMount = e),
                p.useCompactIcons = e
            }
            return p
        }
        componentDidMount() {
            super.componentDidMount(),
            this.state.useTabletUI && r.subscribe(this._onTabletBackButtonPressed),
            this.state.renderPreMountedSearch || F.setTimeout(()=>{
                this.isComponentMounted() && this.setState({
                    renderPreMountedSearch: !0
                })
            }
            , 2500)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this._isDragging || (this._currentWidth = e.viewMode === k.LeftNavViewMode.None ? 0 : this._expandedWidth,
            this._animatedWrapperWidthValue.setValue(this._currentWidth),
            this._animatedContentWidthValue.setValue(this._currentWidth)),
            this._shouldFocusSearchButton = !n.isUndefined(e.viewMode) && this.props.viewMode === k.LeftNavViewMode.Search && !e.navContext.state.isMessageSent
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            r.unsubscribe(this._onTabletBackButtonPressed)
        }
        render() {
            if (this.props.viewMode === k.LeftNavViewMode.None)
                return null;
            const e = [H.viewContainer]
              , t = [H.innerContainer, this.state.useTabletUI ? this._themeStyles.primaryBackgroundColorStyle : this._themeStyles.secondaryBackgroundColorStyle];
            let i, s;
            this.state.isResizeable && t.push(B.flexOne),
            this._getContext().isPresentedInDesktopContentPanel ? (e.push(B.flexOne),
            t.push(H.fullScreenOverrides.mainContent)) : (e.push(this._animatedWrapperWidthStyle, B.overflowVisible),
            t.push(this._themeStyles.dividerBorderColorStyle, this._animatedContentWidthStyle)),
            this._useDarkTheme() && t.push(this._themeStyles.headerShadowBorderColorStyle),
            this._isDragging && t.push(H.floatingShadow),
            this.props.viewMode !== k.LeftNavViewMode.ConversationInCall && (i = this._renderHeader(),
            s = this._renderSearchBox());
            const r = this.state.isResizeable ? o.createElement(o.GestureView, {
                style: [H.dragHandle, H.dragHandleDesktop],
                preferredPan: o.Types.PreferredPanGesture.Horizontal,
                onPanHorizontal: this._onPanDragHandle
            }) : void 0;
            let a, l;
            if (this.state.useDesktopUI) {
                const e = this.props.viewMode
                  , t = e === k.LeftNavViewMode.Search;
                let i = W._hubTabForNavigationContext(this.props.navContext.state.searchViewModeContext, this.props.viewMode);
                n.isUndefined(i) && (i = k.HubTab.Recents);
                const s = !this.state.isMeetNowEnabled || i !== k.HubTab.Recents && i !== k.HubTab.Calls && i !== k.HubTab.People ? void 0 : o.createElement(C.default, {
                    selectedHubTab: i
                })
                  , r = W._showTabsForViewMode(e) ? o.createElement(p.default, {
                    ref: this._onDesktopHubTabBarRef,
                    style: [H.tabsWrapper, this._themeStyles.dividerBorderColorStyle, this.state.isMeetNowEnabled ? H.tabsWrapperMoreSpace : void 0],
                    tabs: U,
                    currentHubTab: i,
                    smallTabsThreshold: g.SideBarWidths.compact,
                    useSmallTabsOnMount: this._useCompactIconsOnMount,
                    hideLabels: this.state.useExtraCompactLayout,
                    onTabPress: this._onTabPress,
                    onTabLongPress: this._onTabLongPress
                }) : void 0
                  , l = this.state.showNotificationsPrompt ? o.createElement(N.default, null) : void 0
                  , c = t ? this._renderSearchContextContent() : this._renderContent();
                let d;
                if (this.state.renderPreMountedSearch || this._isShowingSearch()) {
                    const e = [B.absoluteFill, t ? void 0 : H.searchOverlayContainerHidden];
                    d = o.createElement(o.View, {
                        style: e
                    }, this._renderSearchPanel())
                }
                let u, h = [B.flexOne];
                t && (h.push(B.displayNone),
                u = o.Types.ImportantForAccessibility.NoHideDescendants),
                a = o.createElement(o.View, {
                    style: B.flexOne
                }, o.createElement(o.View, {
                    style: h,
                    importantForAccessibility: u
                }, l, r, s, c), d)
            } else
                l = this._renderSearchPanel(),
                this._isShowingSearch() || (a = this._renderContent());
            let c = o.createElement(o.Animated.View, {
                style: t,
                importantForLayout: !this.state.isResizeable,
                importantForAccessibility: this.state.isResizeable ? void 0 : this.props.importantForAccessibility
            }, i, s, l, a, r, this._getBookmarkTooltip());
            return this.state.isResizeable && (this._isDragging && e.push(B.floatingStyle),
            e.push(this._backgroundColorStyle()),
            c = o.createElement(o.Animated.View, {
                style: e,
                importantForLayout: !0,
                importantForAccessibility: this.props.importantForAccessibility
            }, c)),
            c
        }
        _getBookmarkTooltip() {
            return this.state.isBookmarkAdded && !d.default.isCoachMarkBeingShown() ? o.createElement(c.default, {
                title: P.getString("BookmarksTooltips.BookmarkAdded"),
                accessibilityLabel: P.getString("BookmarksTooltips.BookmarkAdded"),
                anchor: this._headerPanelRef,
                offsetY: -2
            }) : void 0
        }
        _tabRef(e) {
            return this._tabBar ? this._tabBar.tabRef(e) : void 0
        }
        _renderHeader() {
            if (!this.state.useTabletUI)
                return o.createElement(m, {
                    ref: this._onDesktopNavigationHeaderRef
                })
        }
        _renderSearchBox() {
            if (!W._showSearchBoxForNavigationContext(this.props.viewMode) || this.state.useTabletUI)
                return;
            const e = [H.searchBoxContainer];
            return this.state.useDesktopUI && e.push(H.searchBoxContainerTopTabs),
            o.createElement(o.View, {
                style: e
            }, o.createElement(o.View, {
                style: H.searchButtonContainer
            }, o.createElement(x, {
                placeholderText: P.getString("HubHeaderPanel.SearchHubTitle"),
                accessibilityLabel: P.getString("HubHeaderPanel.SearchHubAccessibilityLabel"),
                buttonOnly: !0,
                showSearchIcon: !0,
                onPress: this._onSearchButtonClick,
                autoFocusButton: this._shouldFocusSearchButton,
                buttonAccessoryView: this.state.useDesktopUI ? this._renderDialpadButton() : void 0
            })))
        }
        _renderContent() {
            const e = this.props.navContext;
            if (this.state.useTabletUI) {
                const t = W._convertLevNavContextToNavStack(e, this.state.conversationsListMode)
                  , i = e.getConversationsListContext();
                return o.createElement(T, {
                    navContextStack: t,
                    selectedConversationId: i ? i.state.selectedConversationId : void 0,
                    useDesktopUI: this.state.useDesktopUI
                })
            }
            const t = {
                isPresentedInDesktopLeftNav: !0,
                isCollapsed: !1,
                useCompactIcon: this.state.useCompactIcons,
                requireDoubleClick: this.state.requireDoubleClick
            };
            return v.default.renderComponentForLeftNavContext(e, this.props.viewMode, t, this.state.useDesktopUI)
        }
        _isShowingSearch() {
            return this.props.viewMode === k.LeftNavViewMode.Search
        }
        _renderSearchPanel() {
            const e = this.props.navContext.getConversationsListContext()
              , t = e ? e.state.selectedConversationId : void 0
              , i = {
                isPresentedInDesktopLeftNav: !0,
                isCollapsed: !1,
                hidden: !this._isShowingSearch(),
                useCompactIcon: this.state.useCompactIcons,
                requireDoubleClick: this.state.requireDoubleClick
            }
              , n = this.props.navContext.getSearchContext();
            return v.default.renderComponent(n, i, !1, t)
        }
        _renderSearchContextContent() {
            if (!this.props.navContext.state.searchViewModeContext || !this.state.useDesktopUI)
                return;
            const e = {
                isPresentedInDesktopLeftNav: !0,
                isCollapsed: !1,
                useCompactIcon: this.state.useCompactIcons,
                requireDoubleClick: this.state.requireDoubleClick
            };
            return v.default.renderComponentForLeftNavContext(this.props.navContext, this.props.navContext.state.searchViewModeContext, e, this.state.useDesktopUI, !0)
        }
        _createContext() {
            const e = super._createContext();
            return e.isPresentedInDesktopLeftNav = !0,
            e.getCoachMarkArea = ()=>u.CoachMarkAreaType.LeftNavigation,
            e
        }
        _renderDialpadButton() {
            return o.createElement(f.default, {
                key: "dialpad",
                size: R.IconSize.size18,
                color: this._themeColors.primaryIconColor,
                hoverColor: this._themeColors.iconHoverColor,
                icon: R.SkypeIcon.Dialpad,
                title: P.getString("PeopleList.PstnDialpadLabel"),
                onPress: this._onDialpadButtonClick
            })
        }
        _backgroundColorStyle() {
            switch (this.state.mainStageViewMode) {
            case k.MainStageNavViewMode.Call:
            case k.MainStageNavViewMode.MeetNow:
                return H.callBackground;
            case k.MainStageNavViewMode.DesktopContentPanel:
                return this._themeStyles.messageStreamBackgroundColorStyle;
            case k.MainStageNavViewMode.WelcomeScreen:
                return this._themeStyles.primaryBackgroundColorStyle;
            default:
                return
            }
        }
        static _convertLevNavContextToNavStack(e, t) {
            const i = n.clone(e.getConversationsListContext());
            switch (i.id = -1,
            e.state.viewMode) {
            case k.LeftNavViewMode.Recents:
                if (t === h.ConversationsListMode.ArchivedConversations) {
                    return [i, n.clone(e.getArchivedConversationsContext())]
                }
                return [i];
            case k.LeftNavViewMode.Search:
                const o = n.clone(e.getSearchContext());
                return o.id = -2,
                [i, o];
            case k.LeftNavViewMode.CallSearch:
                const s = n.clone(e.getCallSearchContext());
                return s.id = -4,
                [i, s];
            case k.LeftNavViewMode.ConversationInCall:
                const r = n.clone(e.getConversationInCallContext());
                return r ? (r.id = -3,
                [r]) : []
            }
            return []
        }
        static _showSearchBoxForNavigationContext(e) {
            switch (e) {
            case k.LeftNavViewMode.Search:
                return !1;
            default:
                return !0
            }
        }
        static _hubTabForNavigationContext(e, t) {
            return t === k.LeftNavViewMode.Search && e ? this._hubTabForViewMode(e) : this._hubTabForViewMode(t)
        }
        static _hubTabForViewMode(e) {
            switch (e) {
            case k.LeftNavViewMode.Recents:
                return k.HubTab.Recents;
            case k.LeftNavViewMode.Calls:
                return k.HubTab.Calls;
            case k.LeftNavViewMode.Contacts:
                return k.HubTab.People;
            case k.LeftNavViewMode.Notifications:
                return k.HubTab.Notifications;
            default:
                return
            }
        }
        static _showTabsForViewMode(e) {
            switch (e) {
            case k.LeftNavViewMode.Recents:
            case k.LeftNavViewMode.Calls:
            case k.LeftNavViewMode.Contacts:
            case k.LeftNavViewMode.Notifications:
            case k.LeftNavViewMode.Search:
                return !0;
            default:
                return !1
            }
        }
    }
    e.exports = W
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = (i(36),
    i(0))
      , s = i(6)
      , r = i(115)
      , a = i(42)
      , l = i(467)
      , c = i(10)
      , d = i(3097)
      , u = i(118)
      , g = i(5)
      , h = i(4)
      , p = i(409)
      , m = i(134)
      , S = i(54)
      , C = i(55)
      , y = (i(24),
    i(37))
      , f = i(60)
      , _ = i(11)
      , b = i(574)
      , v = i(59)
      , T = i(12)
      , P = i(9)
      , A = i(183)
      , k = g.lazyProperties({
        contentContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            flexDirection: "row",
            justifyContent: "space-around",
            alignItems: "center",
            overflow: "visible"
        }),
        tabShadow: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            top: -1,
            height: 1
        })
    });
    class I extends T.default {
        constructor() {
            super(...arguments),
            this._mountedRefsMap = new m.default,
            this._renderTab = (e,t,i)=>{
                let s;
                return n.isUndefined(this.props.focussedHubTab) || (s = this.props.focussedHubTab === e.tab ? 0 : -1),
                o.createElement(d.default, {
                    ref: this._mountedRefsMap.onComponentRef("tab" + e.tab),
                    key: e.tab,
                    tabDescriptor: e,
                    tabGroup: this.props.tabs,
                    tabBarHeight: t,
                    widthStyle: i,
                    onTabPress: this.props.onTabPress,
                    onTabLongPress: this.props.onTabLongPress,
                    coachMarkType: e.coachMarkType,
                    tabIndex: s,
                    includeTabCountOnDesktop: !l.default.useTabListContainer(),
                    useSmallTitles: this.props.useSmallTitles,
                    useSmallTabs: this.props.useSmallTabs,
                    hideLabel: this.props.hideLabels
                })
            }
        }
        _buildState(e, t) {
            const i = b.default.isSyncingConversationList() || b.default.isSyncingMessages();
            this._getRootViewId();
            let o = {
                gradientColors: S.getGradientColors(),
                tabDescriptors: n.map(e.tabs, t=>this._descriptorForTab(e, t, i)),
                safeAreaPadding: this._getContext().isPresentedByMobileStackNavigator || !u.isKeyboardSeen() ? y.default.bottomSafeAreaInset() : 0,
                useIOSLandscapeStyles: !1,
                useTabletUI: v.useTabletUI(),
                isSyncInProgress: i,
                enableNewMeetNowName: s.default.getS4LCMCFeatures().enableNewMeetNowName
            };
            return e.hideLabels ? o.tabBarHeight = c.TabBarHeight.CompactDesktop : o.useIOSLandscapeStyles ? o.tabBarHeight = c.TabBarHeight.iosLandscape : o.useTabletUI ? o.tabBarHeight = c.TabBarHeight.Tablet : o.tabBarHeight = c.TabBarHeight.Default,
            o
        }
        _shouldComponentUpdate(e, t, i, n, o, s) {
            return e ? i.tabBarHeight !== o.tabBarHeight : super._shouldComponentUpdate(e, t, i, n, o, s)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            if (super.UNSAFE_componentWillUpdate(e, t, i),
            e.hasFocus && !n.isUndefined(e.focussedHubTab) && this.props.focussedHubTab !== e.focussedHubTab) {
                const t = this.tabRef(e.focussedHubTab);
                t && t.requestFocus && t.requestFocus()
            }
        }
        tabRef(e) {
            return this._mountedRefsMap.ref("tab" + e)
        }
        render() {
            let e;
            const t = [k.contentContainer, this._isPresentedInDesktopLeftNav() ? void 0 : this._themeStyles.primaryBackgroundColorStyle, l.default.tabBarHeightStyle(this.state.tabBarHeight)];
            if (this.state.useIOSLandscapeStyles) {
                const t = this.state.tabDescriptors.length
                  , i = 10 * t
                  , n = Math.floor((A.default.measureWindow(this._getRootViewId()).width - i) / t);
                e = t ? o.Styles.createViewStyle({
                    width: n
                }, !1) : void 0
            }
            this.state.safeAreaPadding && (t.push(f.paddingBottomStyle(this.state.safeAreaPadding)),
            t.push(f.heightStyle(l.default.tabBarHeight(this.state.tabBarHeight) + this.state.safeAreaPadding))),
            this.props.style && t.push(this.props.style);
            return o.createElement(o.View, {
                style: t,
                onKeyPress: this.props.onKeyPress,
                onFocus: this.props.onFocus,
                onBlur: this.props.onBlur,
                onLayout: this.props.onLayout,
                accessibilityTraits: l.default.useTabListContainer() ? o.Types.AccessibilityTrait.TabList : void 0
            }, void 0, n.map(this.state.tabDescriptors, t=>this._renderTab(t, this.state.tabBarHeight, e)))
        }
        _descriptorForTab(e, t, i) {
            let n, o = 0, s = e.showSpinnerWhenSyncing && i && t === C.HubTab.Recents;
            return t === C.HubTab.Recents ? o = e.activeConversationsCount || 0 : t === C.HubTab.Notifications && (o = e.unreadAlertsCount || 0),
            t === C.HubTab.People && (n = r.CoachMarkType.People),
            Object.assign(Object.assign({}, I._displayInfoForTab(t, o)), {
                selected: e.currentHubTab === t,
                tab: t,
                badgeCount: o,
                showSpinner: s,
                coachMarkType: n,
                disabled: e.disableCamera && t === C.HubTab.CaptureHub
            })
        }
        static _displayInfoForTab(e, t) {
            switch (e) {
            case C.HubTab.Recents:
                const i = h.getString("Hub.RecentsTabTitle");
                return {
                    icon: _.SkypeIcon.Message,
                    selectedIcon: _.SkypeIcon.ChatsInverted,
                    title: i,
                    accessibilityLabel: a.default.combinedAccessibilityLabel(i, h.getString("Hub.UnreadCounterScreenReaderLabel", {
                        count: t
                    }))
                };
            case C.HubTab.MeetNowChats:
            case C.HubTab.MeetNowCalls:
                const n = h.getString("MeetNow.FeatureName");
                return {
                    icon: p.default.getMeetNowIcon(),
                    title: n,
                    accessibilityLabel: n
                };
            case C.HubTab.Calls:
                return {
                    icon: _.SkypeIcon.CallStart,
                    selectedIcon: _.SkypeIcon.CallsInverted,
                    title: h.getString("Hub.CallsTabTitle")
                };
            case C.HubTab.CaptureHub:
                return {
                    icon: _.SkypeIcon.Camera,
                    selectedIcon: _.SkypeIcon.CameraInverted,
                    title: h.getString("Hub.CameraButtonTitle")
                };
            case C.HubTab.People:
                return {
                    icon: _.SkypeIcon.People,
                    selectedIcon: _.SkypeIcon.PeopleFill,
                    title: h.getString("Hub.ContactsTabTitle")
                };
            case C.HubTab.Notifications:
                const o = h.getString("Notifications.Notify");
                return {
                    icon: _.SkypeIcon.Alert,
                    selectedIcon: _.SkypeIcon.AlertFillNewFont,
                    title: o,
                    accessibilityLabel: a.default.combinedAccessibilityLabel(o, h.getString("Hub.NotificationCounterScreenReaderLabel", {
                        count: t
                    }))
                };
            default:
                return P.switchStatementExhaustiveChecking(e)
            }
        }
        _pauseWhenNotVisible() {
            return !0
        }
    }
    t.HubTabBar = I,
    t.default = I
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(422)
      , s = i(351)
      , r = i(2)
      , a = i(3)
      , l = i(4)
      , c = i(17)
      , d = i(55)
      , u = i(22)
      , g = i(97)
      , h = i(262)
      , p = i(73)
      , m = i(9);
    class S {
        static showMenu(e, t, i, n) {
            const o = {
                anchor: t,
                buttons: this.menuItems(e),
                cancelButtonTitleIOS: l.getString("Global.CancelLabel")
            };
            p.default.showWithActionMenuConfig({
                options: o,
                callback: e=>this.handleOverflowActionMenuCommand(e, i),
                maintainAnchor: !0,
                rootViewId: i,
                invokingEvent: n
            })
        }
        static menuItems(e) {
            const t = [];
            return e && t.push({
                text: l.getString("AlertsPanel.MarkAllAsReadButton"),
                command: o.AlertMenuItemCommand.markAllRead
            }),
            t.push({
                text: l.getString("AlertsPanel.NotificationsSettingsButton"),
                command: o.AlertMenuItemCommand.settings
            }),
            t
        }
        static menuItemTitle(e, t) {
            switch (e) {
            case o.AlertTypeFilter.All:
                return t ? l.getString("AlertsPanel.AllFilterUppercase") : l.getString("AlertsPanel.AllFilter");
            case o.AlertTypeFilter.HighPriorityMessages:
                return t ? l.getString("AlertsPanel.HighPriorityFilterUppercase") : l.getString("AlertsPanel.HighPriorityFilter");
            case o.AlertTypeFilter.Reactions:
                return t ? l.getString("AlertsPanel.ReactionsFilterUppercase") : l.getString("AlertsPanel.ReactionsFilter")
            }
            return ""
        }
        static menuItemCommand(e) {
            switch (e) {
            case o.AlertTypeFilter.All:
                return o.AlertMenuItemCommand.all;
            case o.AlertTypeFilter.HighPriorityMessages:
                return o.AlertMenuItemCommand.highPriority;
            case o.AlertTypeFilter.Reactions:
                return o.AlertMenuItemCommand.reactions
            }
            return ""
        }
        static filterForCommand(e) {
            switch (e) {
            case o.AlertMenuItemCommand.highPriority:
                return o.AlertTypeFilter.HighPriorityMessages;
            case o.AlertMenuItemCommand.reactions:
                return o.AlertTypeFilter.Reactions;
            case o.AlertMenuItemCommand.all:
                return o.AlertTypeFilter.All
            }
        }
    }
    t.default = S,
    S.handleOverflowActionMenuCommand = (e,t)=>{
        const i = m.newCauseId();
        switch (a.log(r.LogTraceArea.Navigation, "AlertsHubUIUtils.handleOverflowActionMenuCommand, causeId: " + i),
        e) {
        case o.AlertMenuItemCommand.markAllRead:
            return n.Accessibility.announceForAccessibility(l.getString("AlertsPanel.MarkAllAsReadConfirmation")),
            s.default.markAllAsRead(),
            !0;
        case o.AlertMenuItemCommand.settings:
            return u.default.isUsingStackNavigationContextNoSubscription() ? c.navigateToSettingsGroup(d.SettingsGroup.Notifications, {
                rootViewId: t
            }) : c.navigateToDesktopSettingsGroup(d.SettingsGroup.Notifications, {
                rootViewId: t
            }, i),
            a.track(new h.NavigationNotificationSettings(g.NavigationSettingsOrigin.NotificationsPanel)),
            !0;
        case p.SXActionMenuCancel:
            return !0
        }
        return !1
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        getEventName() {
            return "all_notifications_panel"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.AlertsPanelOpened = class extends r {
        constructor(e, t) {
            super(),
            this._alertTypesInfo = e,
            this._conversationsCount = t
        }
        getActionName() {
            return "Opened"
        }
        getAttributes() {
            return n.assign({}, super.getAttributes(), {
                ReactionItemsCount: this._alertTypesInfo.reactionsCount,
                EngagementItemsCount: this._alertTypesInfo.engagementsCount,
                QuoteItemsCount: this._alertTypesInfo.quotesCount,
                MentionItemsCount: this._alertTypesInfo.mentionsCount,
                ConversationsCount: this._conversationsCount
            })
        }
    }
    ;
    t.AlertClicked = class extends r {
        constructor(e) {
            super(),
            this._type = e
        }
        getActionName() {
            return "ItemClicked"
        }
        getAttributes() {
            return n.assign({}, super.getAttributes(), {
                Type: o.AlertTypeForTelemetry[this._type]
            })
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(70)
      , o = i(3104)
      , s = i(0)
      , r = i(13)
      , a = i(89)
      , l = i(10)
      , c = i(2)
      , d = i(3)
      , u = i(5)
      , g = i(697)
      , h = i(1230)
      , p = i(75)
      , m = i(41)
      , S = i(8)
      , C = i(23)
      , y = i(25)
      , f = u.lazyProperties({
        buttonTextStyle: ()=>s.Styles.createTextStyle({
            fontSize: C.controlFontSize.smallButton
        })
    });
    class _ extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._displayTracked = !1,
            this._pressed = !1,
            this._onPress = ()=>{
                this._pressed = !0;
                const e = p.default.permissionStatus(y.PermissionType.Notifications);
                n.PermissionStatus.Granted,
                this._log("permission " + n.PermissionStatus[e] + ", prompting"),
                g.default.initNotificationsAndRequestPermissions().then(e=>{
                    this._onAttemptToChangeNotificationPermissionStatus(e ? n.PermissionStatus.Granted : n.PermissionStatus.Denied),
                    e || this._launchSettings()
                }
                , this._handlePermissionRequestFailure)
            }
            ,
            this._handlePermissionRequestFailure = ()=>{
                this._log("NotificationQueueService initialization failed"),
                this.props.onNotificationPermissionRequestFailed && this.props.onNotificationPermissionRequestFailed(),
                this._launchSettings()
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            n.default.notificationsPermissionStatus().then(e=>this._status = e),
            this._activationSubscription = a.default.subscribeForChanges("NotificationPermissionPromptActionButton", e=>{
                switch (e) {
                case s.Types.AppActivationState.Background:
                    this._appBackgrounded = !0;
                    break;
                case s.Types.AppActivationState.Active:
                    this._appBackgrounded && (this._appBackgrounded = !1,
                    n.default.notificationsPermissionStatus().then(e=>{
                        this._onAttemptToChangeNotificationPermissionStatus(e)
                    }
                    ))
                }
            }
            ),
            this._displayTracked || (d.track(new h.NotificationsPromptDisplayed(this.props.origin)),
            this._displayTracked = !0)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._activationSubscription && (this._activationSubscription.unsubscribe(),
            this._activationSubscription = void 0)
        }
        render() {
            return s.createElement(m, {
                buttonSize: l.SXButtonSize.Small,
                buttonStyle: l.SXButtonStyle.Custom,
                textStyleDeprecated: this.props.textStyle || f.buttonTextStyle,
                style: this.props.style,
                title: this.props.title,
                allowTextWrap: !0,
                buttonConfig: this._getButtonConfig(),
                onPress: this._onPress
            })
        }
        _getButtonConfig() {
            return this.props.buttonConfig ? this.props.buttonConfig : {
                textColor: S.Color.black,
                backgroundColor: S.Color.white
            }
        }
        _onAttemptToChangeNotificationPermissionStatus(e) {
            this._log("notification permission status changed: " + n.PermissionStatus[e]),
            this._openSettingsEvent ? (e === n.PermissionStatus.Granted && this._openSettingsEvent.enabledNotifications(),
            d.track(this._openSettingsEvent),
            this._openSettingsEvent = void 0,
            p.default.setPermissionStatus(y.PermissionType.Notifications, e, e, n.PermissionOrigin.NotificationPrompt)) : e === n.PermissionStatus.Granted && p.default.setPermissionStatus(y.PermissionType.Notifications, e, e, n.PermissionOrigin.NotificationPromptExternal),
            this._status === e && this._pressed && (this._pressed = !1),
            this.props.onAttemptToChangeNotificationPermissionStatus && this.props.onAttemptToChangeNotificationPermissionStatus(e)
        }
        _launchSettings() {
            this._openSettingsEvent = new h.NotificationsPromptSettingsOpened(this.props.origin),
            o.default.openAppNotificationsSettings()
        }
        _log(e) {
            d.log(c.LogTraceArea.Permissions, "NotificationPermissionPromptActionButton in " + h.NotificationPromptOrigin[this.props.origin] + " area: " + e)
        }
    }
    t.NotificationPermissionPromptActionButton = _
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(3135)
      , r = i(13);
    var a, l;
    !function(e) {
        e[e.None = 0] = "None",
        e[e.StartingMic = 1] = "StartingMic",
        e[e.Recording = 2] = "Recording",
        e[e.GettingAudio = 3] = "GettingAudio",
        e[e.HasAudio = 4] = "HasAudio"
    }(a = t.RecordingState || (t.RecordingState = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.StartFailed = 1] = "StartFailed",
        e[e.StopFailed = 2] = "StopFailed"
    }(l = t.RecordingError || (t.RecordingError = {}));
    let c = class extends r.StoreBase {
        constructor() {
            super(...arguments),
            this._sessionCounter = 0,
            this._state = a.None,
            this._error = l.None,
            this._elapsedTime = 0,
            this._currentSession = this._sessionCounter,
            this._session = null,
            this._volumeSamples = null,
            this._currentAudioResult = null
        }
        getRecordingState() {
            return this._state
        }
        getRecordingError() {
            return this._error
        }
        getVolumeSamples() {
            return o.clone(this._volumeSamples)
        }
        getElapsedTimeMs() {
            return this._elapsedTime
        }
        getRecordingResult() {
            return o.clone(this._currentAudioResult)
        }
        _isValid(e, t) {
            return e === this._currentSession && t === this._state
        }
        startRecording(e=500) {
            this._state = a.StartingMic,
            this._currentSession = ++this._sessionCounter,
            this._session = s.default.createRecordingSession(),
            this._volumeSamples = [],
            this._currentAudioResult = null;
            const t = Date.now()
              , i = this._currentSession;
            this._session.startRecording(e=>{
                this._isValid(i, a.Recording) && (this._volumeSamples.push(e),
                this._elapsedTime = Date.now() - t,
                this.trigger())
            }
            , e).then(()=>{
                this._isValid(i, a.StartingMic) && (this._state = a.Recording,
                this.trigger())
            }
            , ()=>{
                this._isValid(i, a.StartingMic) && this._reset(l.StartFailed)
            }
            ),
            this.trigger()
        }
        stopRecording() {
            const e = this._session;
            this._session = null,
            this._state = a.GettingAudio;
            const t = this._currentSession;
            e.stopRecording().then(e=>{
                this._isValid(t, a.GettingAudio) && (this._state = a.HasAudio,
                this._volumeSamples = null,
                this._currentAudioResult = Object.assign(Object.assign({}, e), {
                    durationMs: this._elapsedTime
                }),
                this.trigger())
            }
            , ()=>{
                this._isValid(t, a.GettingAudio) && this._reset(l.StopFailed)
            }
            )
        }
        reset() {
            this._reset()
        }
        _reset(e=l.None) {
            const t = this._session;
            this._state = a.None,
            this._error = e,
            this._session = null,
            this._volumeSamples = null,
            this._elapsedTime = 0,
            this._currentAudioResult = null,
            t && t.stopRecording(),
            this.trigger()
        }
    }
    ;
    n.__decorate([r.autoSubscribe], c.prototype, "getRecordingState", null),
    n.__decorate([r.autoSubscribe], c.prototype, "getRecordingError", null),
    n.__decorate([r.autoSubscribe], c.prototype, "getVolumeSamples", null),
    n.__decorate([r.autoSubscribe], c.prototype, "getElapsedTimeMs", null),
    n.__decorate([r.autoSubscribe], c.prototype, "getRecordingResult", null),
    c = n.__decorate([r.AutoSubscribeStore], c),
    t.default = new c
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(7)
      , r = i(71)
      , a = i(21)
      , l = i(29);
    let c = class extends o.StoreBase {
        constructor() {
            super(),
            this._fire = ()=>{
                this.trigger(),
                l.clearTimeout(this._timer),
                this._initTimer()
            }
            ,
            a.RegisterStartupable(this, "DayChangedNotifierStore", [])
        }
        startup() {
            return this._initTimer(),
            s.Resolved()
        }
        _getTomorrowTimestamp() {
            let e = new Date(Date.now());
            return e.setDate(e.getDate() + 1),
            e.setHours(0),
            e.setMinutes(0),
            e.setSeconds(0)
        }
        _initTimer() {
            const e = this._getTomorrowTimestamp();
            this._timer = l.setExpiration(this._fire, e + 3e3)
        }
        getDisplayDateString(e) {
            return r.getDisplayDateString(e)
        }
    }
    ;
    n.__decorate([o.autoSubscribe], c.prototype, "getDisplayDateString", null),
    c = n.__decorate([o.AutoSubscribeStore], c),
    t.default = new c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(52)
      , s = i(902);
    t.default = class {
        constructor() {
            this._items = [],
            this.listChanged = new o.default
        }
        addItems(e, t, i) {
            let n = {
                type: s.ListModificationType.AddItems,
                items: t,
                insertIndex: e,
                options: i
            };
            this.apply(n)
        }
        removeItems(e, t, i) {
            let n = {
                type: s.ListModificationType.RemoveItems,
                removeIndex: e,
                count: t,
                options: i
            };
            this.apply(n)
        }
        replaceItems(e, t, i) {
            let n = {
                type: s.ListModificationType.ReplaceItems,
                items: t,
                removeIndex: e,
                insertIndex: e,
                count: t.length,
                options: i
            };
            this.apply(n)
        }
        moveItems(e, t, i, n, o) {
            let r = {
                type: s.ListModificationType.MoveItems,
                removeIndex: e,
                insertIndex: t,
                count: n,
                options: o,
                items: i
            };
            this.apply(r)
        }
        getItemList() {
            return this._items
        }
        setItemList(e) {
            this._items = n.clone(e);
            let t = {
                type: s.ListModificationType.ReplaceItems,
                items: this._items,
                removeIndex: 0,
                count: this._items.length
            };
            this.listChanged.fire(t, this._items)
        }
        _canConvertRemoveAddToReplace(e) {
            return 2 === e.length && e[0].type === s.ListModificationType.RemoveItems && e[1].type === s.ListModificationType.AddItems && n.size(e[1].items) > 0 && e[0].count === n.size(e[1].items)
        }
        _getReplaceModification(e, t, i) {
            let o, r;
            return n.each(e, e=>{
                this.apply(e, t, i, !0),
                e.type === s.ListModificationType.RemoveItems ? r = e : e.type === s.ListModificationType.AddItems && (o = e)
            }
            ),
            {
                count: r.count,
                insertIndex: o.insertIndex,
                removeIndex: r.removeIndex,
                items: o.items,
                type: s.ListModificationType.ReplaceItems
            }
        }
        applyMany(e, t, i) {
            if (this._canConvertRemoveAddToReplace(e)) {
                const n = this._getReplaceModification(e, t, i);
                this.listChanged.fire(n, this._items)
            } else
                n.each(e, e=>{
                    this.apply(e, t, i)
                }
                );
            if (0 === e.length) {
                t && t(this._items);
                let e = {
                    type: s.ListModificationType.Metadata
                };
                this.listChanged.fire(e, this._items)
            }
        }
        apply(e, t, i, n) {
            i && i(e, this._items),
            e.type === s.ListModificationType.AddItems ? this._items = [...this._items.slice(0, e.insertIndex), ...e.items, ...this._items.slice(e.insertIndex)] : e.type === s.ListModificationType.RemoveItems ? this._items = [...this._items.slice(0, e.removeIndex), ...this._items.slice(e.removeIndex + e.count)] : e.type === s.ListModificationType.ReplaceItems ? this._items = [...this._items.slice(0, e.removeIndex), ...e.items, ...this._items.slice(e.removeIndex + e.items.length)] : e.type === s.ListModificationType.MoveItems && (e.removeIndex < e.insertIndex ? this._items = [...this._items.slice(0, e.removeIndex), ...this._items.slice(e.removeIndex + e.count, e.insertIndex + e.count), ...e.items, ...this._items.slice(e.insertIndex + e.count)] : this._items = [...this._items.slice(0, e.insertIndex), ...e.items, ...this._items.slice(e.insertIndex, e.removeIndex), ...this._items.slice(e.removeIndex + e.count)]),
            t && t(this._items),
            n || this.listChanged.fire(e, this._items)
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(357)
      , s = i(104)
      , r = (i(70),
    i(1049))
      , a = i(3182)
      , l = (i(169),
    i(0),
    i(82),
    i(7))
      , c = i(138)
      , d = i(351)
      , u = i(6)
      , g = (i(502),
    i(808))
      , h = i(398)
      , p = (i(505),
    i(31))
      , m = (i(824),
    i(112))
      , S = (i(112),
    i(904))
      , C = i(79)
      , y = i(57)
      , f = i(153)
      , _ = (i(46),
    i(116))
      , b = i(161)
      , v = i(191)
      , T = i(16)
      , P = i(48)
      , A = (i(10),
    i(1590),
    i(788))
      , k = i(69)
      , I = i(1009)
      , w = (i(384),
    i(300),
    i(30))
      , N = i(887)
      , M = i(130)
      , E = (i(228),
    i(1211),
    i(28))
      , x = i(312)
      , D = (i(390),
    i(1054))
      , L = i(579)
      , R = i(202)
      , B = i(188)
      , O = i(2)
      , F = (i(469),
    i(206),
    i(146),
    i(142))
      , V = i(98)
      , U = i(3)
      , H = (i(190),
    i(1236))
      , W = (i(340),
    i(453))
      , z = i(1756)
      , G = i(198)
      , K = i(4)
      , j = (i(434),
    i(266))
      , q = (i(896),
    i(147),
    i(179),
    i(807),
    i(1065),
    i(194))
      , Q = i(276)
      , X = i(32)
      , J = i(62)
      , $ = i(20)
      , Y = i(17)
      , Z = i(22)
      , ee = i(155)
      , te = (i(1842),
    i(512),
    i(1090),
    i(318),
    i(75),
    i(217),
    i(1033))
      , ie = i(600)
      , ne = i(599)
      , oe = (i(3183),
    i(1231),
    i(87))
      , se = i(3184)
      , re = i(361)
      , ae = i(487)
      , le = i(638)
      , ce = i(756)
      , de = i(34)
      , ue = (i(343),
    i(140),
    i(1071))
      , ge = i(182)
      , he = (i(1199),
    i(639),
    i(1427))
      , pe = i(456)
      , me = i(21)
      , Se = (i(1471),
    i(19))
      , Ce = i(18)
      , ye = (i(25),
    i(29),
    i(53))
      , fe = i(35)
      , _e = i(45)
      , be = i(9)
      , ve = /^\/[a-z_!]+(?:\s|$)/i
      , Te = [{
        command: "refresh",
        isVisible: !1,
        usageHint: "[info|chat|alerts|all]",
        description: K.getString("SlashCommandDescriptions.Refresh"),
        action: (e,t)=>{
            const i = e.trim().toLowerCase();
            if ("info" === i)
                F.default.fireAllEarly(),
                _e.slashCommand_refreshProfiles(),
                D.default.requestUpdate();
            else if ("chat" === i)
                v.default.forceResyncAllConversations();
            else if ("alerts" === i)
                d.default.slashCommand_refresh();
            else if ("all" === i)
                F.default.fireAllEarly(),
                _e.slashCommand_refreshProfiles(),
                D.default.requestUpdate(),
                v.default.forceResyncAllConversations(),
                d.default.slashCommand_refresh();
            else {
                if (i)
                    return H.ActionResult.InvalidParameters;
                v.default.forceResyncConversation(t)
            }
            return H.ActionResult.None
        }
    }, {
        command: "crashapp",
        isVisible: !1,
        isEnabled: ()=>u.default.isMurphyUser(),
        description: "Crashes the app",
        action: (e,t,i,n)=>{
            const o = e.trim().toLowerCase();
            return "" === o || "js" === o ? (void 0).boom() : a.default.crashApp(o).catch(e=>{
                const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, e.message);
                n(i)
            }
            ),
            H.ActionResult.None
        }
    }, {
        command: "me",
        isVisible: !0,
        usageHint: "[emote text]",
        description: K.getString("SlashCommandDescriptions.Me"),
        action: (e,t,i)=>{
            if (!e.trim())
                return H.ActionResult.InvalidParameters;
            const o = E.getDisplayName($.getSkypeMri())
              , s = be.escapeXml(o).length + 1;
            let r = 3
              , a = [];
            n.each(i, e=>{
                if (r > 0) {
                    const t = e.text();
                    if (t.length < r)
                        r -= t.length;
                    else {
                        const e = o + t.substr(r);
                        a.push(new V.UnhandledEntity(e)),
                        r = 0
                    }
                } else
                    a.push(e)
            }
            );
            const l = M.createEmoteMessageInfo(t, O.PostSource.SlashCommand, a, s);
            return oe.default.postMessage(l),
            H.ActionResult.None
        }
    }, {
        command: "swift",
        isVisible: !1,
        usageHint: "[todo | weather | trello | hotel | receipt | signin]",
        description: "Adds a test Swift card to the stream",
        action: (e,t,i,n)=>{
            const o = e.trim()
              , s = M.createSwiftFakeMessage(t, O.PostSource.SlashCommand, o);
            return s ? (n(s),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "adaptive",
        isVisible: !1,
        usageHint: "[text | news]",
        description: "Adds a test adaptive card to the stream",
        action: (e,t,i,n)=>{
            const o = e.trim()
              , s = M.createAdaptiveFakeMessage(t, O.PostSource.SlashCommand, o);
            return s ? (n(s),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "poll",
        isVisible: !0,
        usageHint: "[title],[option1],[option2],[option3], ...",
        description: K.getString("SlashCommandDescriptions.Poll"),
        isEnabled: ()=>u.default.getS4LMessagingFeatures().enablePollExtension,
        action: (e,t)=>{
            const i = e.split(",");
            if (i && i.length > te.MinPollOptionCount) {
                const e = i[0]
                  , o = n.take(i.slice(1), te.MaxPollOptionCount);
                return ne.postPollMessage(t, e, o, ne.getDefaultExpirationTimeMs(), ie.CreatePollOrigin.SlashCommand),
                H.ActionResult.None
            }
            return H.ActionResult.InvalidParameters
        }
    }, {
        command: "tokenrefresh",
        isVisible: !1,
        description: "Force refresh of SkypeToken",
        action: ()=>(ye.default.skypeTokenInvalid(ye.default.getRawSkypeToken()),
        H.ActionResult.None)
    }, {
        command: "epidrefresh",
        isVisible: !1,
        description: "Force refresh of EndpointId",
        action: ()=>(ge.markEndpointMissing(ge.getEndpointId()),
        H.ActionResult.None)
    }, {
        command: "add",
        isVisible: !1,
        usageHint: "[user]",
        description: K.getString("SlashCommandDescriptions.Add"),
        action: (e,t)=>H.ActionResult.None
    }, {
        command: "leave",
        isVisible: !0,
        description: K.getString("SlashCommandDescriptions.Leave"),
        isEnabled: e=>Pe(e),
        action: (e,t)=>{
            f.leaveConversationAsync(t, b.RemoveMemberFromThreadSource.LeaveCommand);
            const i = be.newCauseId();
            return U.log(O.LogTraceArea.SlashCommandUtils, "/leave", de.mriOrId(t), " causeId:", i),
            Z.default.isUsingStackNavigationContext() ? Y.navigateToRecentsTab() : Y.navigateToDesktopRecents(i),
            H.ActionResult.None
        }
    }, {
        command: "kick",
        isVisible: !1,
        usageHint: "[Skype Name]",
        description: "Eject chat member",
        isEnabled: e=>{
            const t = w.default.getConversation(e);
            return Pe(e) && !q.isRegularMemberInModeratedGroup(t)
        }
        ,
        action: (e,t)=>{
            const i = e.trim();
            return i ? (n.each(i.split(" "), e=>{
                const i = T.sanitizeMri(e, T.Namespaces.SkypeId);
                f.removeParticipantFromConversation(i, t, b.RemoveMemberFromThreadSource.KickCommand)
            }
            ),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "kickban",
        isVisible: !0,
        usageHint: "[Skype Name]",
        description: K.getString("SlashCommandDescriptions.KickBan"),
        isEnabled: e=>{
            const t = w.default.getConversation(e);
            return Pe(e, !0) && !q.isRegularMemberInModeratedGroup(t)
        }
        ,
        action: (e,t)=>{
            const i = e.trim();
            if (!i)
                return H.ActionResult.InvalidParameters;
            const o = w.default.getConversation(t);
            let s = o ? o.getBannedSkypeIds() : [];
            return n.each(i.split(" "), e=>{
                const i = T.sanitizeMri(e, T.Namespaces.SkypeId);
                f.removeParticipantFromConversation(i, t, b.RemoveMemberFromThreadSource.KickCommand),
                s.push(e)
            }
            ),
            s = n.uniq(s),
            C.setBannedSkypeIds(t, s),
            H.ActionResult.None
        }
    }, {
        command: "getbanlist",
        isVisible: !0,
        description: K.getString("SlashCommandDescriptions.GetBanList"),
        isEnabled: e=>{
            const t = w.default.getConversation(e);
            return Pe(e, !0) && !q.isRegularMemberInModeratedGroup(t)
        }
        ,
        action: (e,t,i,o)=>{
            const s = w.default.getConversation(t);
            if (s) {
                let e = "BANNED USERS:\n";
                const i = s.getBannedSkypeIds();
                n.each(i, t=>{
                    e += `   ${t}\n`
                }
                ),
                o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, e))
            }
            return H.ActionResult.None
        }
    }, {
        command: "setbanlist",
        isVisible: !0,
        usageHint: "[[+|-][Skype Name]]",
        description: K.getString("SlashCommandDescriptions.SetBanList"),
        isEnabled: e=>{
            const t = w.default.getConversation(e);
            return Pe(e, !0) && !q.isRegularMemberInModeratedGroup(t)
        }
        ,
        action: (e,t)=>{
            const i = e.trim();
            if (!i)
                return H.ActionResult.InvalidParameters;
            const o = w.default.getConversation(t);
            if (o) {
                let e = !1
                  , s = o.getBannedSkypeIds();
                if (n.each(i.split(" "), t=>{
                    "+" === t[0] ? s.push(T.asSkypeId(t.slice(1))) : "-" === t[0] ? n.remove(s, e=>e === t.slice(1)) : e = !0
                }
                ),
                e)
                    return H.ActionResult.InvalidParameters;
                s = n.uniq(s),
                C.setBannedSkypeIds(t, s)
            }
            return H.ActionResult.None
        }
    }, {
        command: "showmembers",
        isVisible: !0,
        description: K.getString("SlashCommandDescriptions.ShowMembers"),
        isEnabled: e=>Pe(e),
        action: (e,t,i,o)=>{
            const s = w.default.getConversation(t);
            if (s) {
                let e = "CONVERSATION MEMBERS:\n";
                const i = s.getThreadMembers();
                n.each(i, t=>{
                    if (T.isAgent(t.id)) {
                        const i = c.default.getAgentDescriptionForMri(t.id);
                        e += `   ${i.getDisplayName()} (${t.id}): ${t.role}\n`
                    } else {
                        const i = T.getSkypeIdFromMri(t.id);
                        i && (e += `   ${i}: ${t.role}\n`)
                    }
                }
                ),
                o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, e))
            }
            return H.ActionResult.None
        }
    }, {
        command: "setrole",
        isVisible: !0,
        usageHint: "[Skype Name] [Admin|User]",
        description: K.getString("SlashCommandDescriptions.SetRole"),
        isEnabled: e=>{
            const t = w.default.getConversation(e);
            return Pe(e) && !q.isRegularMemberInModeratedGroup(t)
        }
        ,
        action: (e,t)=>{
            const i = e.split(" ");
            if (2 !== i.length || i[1].toLowerCase() !== _.ThreadMemberRoles.Admin.toLowerCase() && "master" !== i[1].toLowerCase() && i[1].toLowerCase() !== _.ThreadMemberRoles.User.toLowerCase())
                return H.ActionResult.InvalidParameters;
            const n = T.sanitizeMri(i[0], T.Namespaces.SkypeId)
              , o = w.default.getConversation(t);
            return o && o.isUserMember(n) ? ($.getSkypeMri() === n || C.serviceAddMemberToThread(t, n, b.AddMemberToThreadSource.SetRoleCommand, i[1].toLowerCase() === _.ThreadMemberRoles.Admin.toLowerCase() || "master" === i[1].toLowerCase()),
            H.ActionResult.None) : H.ActionResult.None
        }
    }, {
        command: "showconv",
        isVisible: !1,
        description: "Displays raw conversation info",
        action: (e,t,i,n)=>{
            const o = w.default.getConversation(t);
            if (o) {
                n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(o)))
            }
            return H.ActionResult.None
        }
    }, {
        command: "showconvid",
        isVisible: !1,
        description: "Displays conversation id",
        action: (e,t,i,n)=>(n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(t))),
        H.ActionResult.None)
    }, {
        command: "dumprawalerts",
        isVisible: !1,
        usageHint: "[count]",
        description: "Dumps raw alerts info",
        action: (e,t,i,n)=>{
            const o = d.default.test_getAllRawAlerts()
              , s = Number(e.trim());
            return s > 0 && o.splice(s),
            n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(o))),
            H.ActionResult.None
        }
    }, {
        command: "dumpalerts",
        isVisible: !1,
        usageHint: "[count]",
        description: "Dumps visible alerts info",
        action: (e,t,i,o)=>{
            let s = d.default.getRecentAlerts();
            const r = Number(e.trim());
            if (r > 0) {
                let e = n.clone(s);
                e.splice(r),
                s = e
            }
            return o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(s))),
            H.ActionResult.None
        }
    }, {
        command: "syncinfo",
        isVisible: !1,
        description: "Displays conversation's sync info",
        action: (e,t,i,n)=>{
            const o = y.default.getConversationMetaFromMemoryCache(t);
            if (!o)
                return H.ActionResult.None;
            let s = "Conversation: " + t + ", Version: " + o.conv.convViewVersion + ", MessagesStale: " + o.syncInfo.messagesStale + ", MessagesSyncState: " + o.syncInfo.messagesSyncState;
            return o.conv.isThread() && (s += ", ThreadDetailsVersion: " + o.conv.threadDetailsVersion + ", ThreadPropsVersion: " + o.conv.getThreadProperty(T.ThreadProps.ThreadDetailsVersion)),
            n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, s)),
            H.ActionResult.None
        }
    }, {
        command: "language",
        isVisible: !1,
        description: K.getString("SlashCommandDescriptions.Language"),
        usageHint: "[ll-CC|ll|reset]",
        action: e=>e.trim() ? (U.track(new z.LanguageSlashCommandChangedEvent(K.getLocale(),e)),
        "reset" === e.trim() ? (W.resetLocaleToSystem(),
        U.log(O.LogTraceArea.SlashCommandUtils, "Resetting language to default via slash command")) : (W.setLocale(e),
        U.log(O.LogTraceArea.SlashCommandUtils, `Locale set via slash command to [${e}]`)),
        H.ActionResult.None) : H.ActionResult.InvalidParameters
    }, {
        command: "rtl",
        isVisible: !1,
        description: "Force right-to-left layout",
        usageHint: "[on|off]",
        action: (e,t,i,n)=>{
            const o = e.trim();
            if ("on" !== o && "off" !== o)
                return H.ActionResult.InvalidParameters;
            const s = "on" === o;
            if (ce.default.forceRTL(s),
            !ce.ForceRTLBasedOnLanguage) {
                X.default.setUserPreferencesLocal({
                    rtl: s
                });
                const e = "The app needs to be restarted for this change to take effect";
                n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, e))
            }
            return H.ActionResult.None
        }
    }, {
        command: "forcecqf",
        isVisible: !1,
        usageHint: "[on|off]",
        description: "Forces Call Quality Feedback for all calls",
        action: (e,t)=>{
            const i = e.trim().toLowerCase();
            return i && "on" !== i && "off" !== i ? H.ActionResult.InvalidParameters : (X.default.setUserPreferencesLocal({
                forceCQF: "on" === i
            }),
            H.ActionResult.None)
        }
    }, {
        command: "callinfo",
        isVisible: !1,
        description: "Display call info in the conversation",
        action: (e,t,i,o)=>{
            const s = p.default.CallingStore.getCallIdsForConversationMri(t)
              , r = s.length ? n.head(s) : p.default.CallingStore.getMostRecentCallId();
            return r ? (p.default.CallingStore.getDebugInformation(r, !!s.length).then(e=>{
                if (!e)
                    return;
                const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, e);
                o(i)
            }
            ),
            H.ActionResult.None) : H.ActionResult.None
        }
    }, {
        command: "calltechinfo",
        isVisible: !1,
        description: "Display call technical information in the conversation",
        action: (e,t,i,o)=>{
            const s = p.default.CallingStore.getCallIdsForConversationMri(t);
            s.length ? n.head(s) : p.default.CallingStore.getMostRecentCallId();
            return H.ActionResult.None
        }
    }, {
        command: "golive",
        isVisible: !0,
        usageHint: "",
        description: K.getString("SlashCommandDescriptions.GoLive"),
        isEnabled: e=>{
            const t = w.default.getConversation(e);
            return T.isGroupConversation(e) && !q.isRegularMemberInModeratedGroup(t)
        }
        ,
        action: (e,t,i,n)=>{
            const o = be.newCauseId();
            return T.isThread(t) ? p.default.CallNavigationHelper.isGoLiveAllowed(t, o) ? (U.log(O.LogTraceArea.SlashCommandUtils, "/golive", de.mriOrId(t), " causeId:", o),
            p.default.CallNavigationHelper.startGoLiveCall({
                conversationMri: t,
                withVideo: !0,
                origin: O.NavigationCallOrigin.GoLiveSlashCommand
            }, o),
            H.ActionResult.None) : (U.log(O.LogTraceArea.SlashCommandUtils, "Ignoring /golive ", de.mriOrId(t), "- golive is not allowed"),
            H.ActionResult.None) : H.ActionResult.None
        }
    }, {
        command: "flamingo",
        isVisible: !1,
        usageHint: "[on|off]",
        description: "Forces MSNP pushes for all calls",
        action: (e,t)=>{
            const i = e.trim().toLowerCase();
            return i && "on" !== i && "off" !== i ? H.ActionResult.InvalidParameters : (X.default.setUserPreferencesLocal({
                forceFlamingo: "on" === i
            }),
            H.ActionResult.None)
        }
    }, {
        command: "showreconnect",
        isVisible: !1,
        usageHint: "[on|off|none]",
        description: "Force-render reconnect UI",
        action: (e,t,i,n)=>{
            if (!h.default.isCallingBundleLoaded())
                return H.ActionResult.InvalidParameters;
            const o = e.trim().toLowerCase();
            if (o && "on" !== o && "off" !== o && "none" !== o)
                return H.ActionResult.InvalidParameters;
            const s = "on" === o ? m.NetworkConnectionState.Connecting : "off" === o ? m.NetworkConnectionState.Connected : m.NetworkConnectionState.LostConnection
              , r = be.newCauseId()
              , a = p.default.CallingStore.getConnectedAndNotOnHoldCallId();
            return a ? (U.log(O.LogTraceArea.SlashCommandUtils, "Setting call reconnect UI networkState: " + m.NetworkConnectionState[s] + " callId: " + a + " causeId: " + r),
            p.default.CallingStore.networkConnectionEvent().fire({
                callId: a,
                eventType: m.CallNetworkQualityEventType.NetworkReconnection,
                networkState: s,
                causeId: r
            }),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "showpoorconnection",
        isVisible: !1,
        usageHint: "[on|off]",
        description: "Force-render poor connection UI",
        action: (e,t,i,n)=>{
            const o = e.trim().toLowerCase();
            if (o && "on" !== o && "off" !== o)
                return H.ActionResult.InvalidParameters;
            if (!h.default.isCallingBundleLoaded())
                return H.ActionResult.InvalidParameters;
            const s = "on" === o
              , r = be.newCauseId()
              , a = p.default.CallingStore.getConnectedAndNotOnHoldCallId();
            return a ? (U.log(O.LogTraceArea.SlashCommandUtils, (s ? "Showing" : "Hiding") + " calling poor connection UI callId: " + a + " causeId: " + r),
            p.default.CallingStore.networkConnectionEvent().fire({
                callId: a,
                eventType: m.CallNetworkQualityEventType.NetworkReceiveQuality,
                networkState: s ? m.NetworkConnectionState.LostConnection : m.NetworkConnectionState.Connected,
                causeId: r
            }),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "showaudioonlyprompt",
        isVisible: !1,
        usageHint: "[on|off]",
        description: "Force-render catastrophic network event",
        action: (e,t,i,n)=>{
            if (!h.default.isCallingBundleLoaded())
                return H.ActionResult.InvalidParameters;
            const o = e.trim().toLowerCase();
            if (o && "on" !== o && "off" !== o && "none" !== o)
                return H.ActionResult.InvalidParameters;
            let s = m.NetworkConnectionState.LostConnection;
            "on" === o ? s = m.NetworkConnectionState.Connecting : "off" === o && (s = m.NetworkConnectionState.Connected);
            const r = be.newCauseId()
              , a = p.default.CallingStore.getConnectedAndNotOnHoldCallId();
            return a ? (U.log(O.LogTraceArea.SlashCommandUtils, "Setting audio only prompt UI networkState: " + m.NetworkConnectionState[s] + " callId: " + a + " causeId: " + r),
            p.default.CallingStore.networkConnectionEvent().fire({
                callId: a,
                eventType: m.CallNetworkQualityEventType.NetworkReceiveCatastrophic,
                networkState: s,
                causeId: r
            }),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "showcallnetworkconnectioninfo",
        isVisible: !1,
        usageHint: "",
        description: "Displays call network quality values",
        action: (e,t,i,n)=>{
            if (!h.default.isCallingBundleLoaded())
                return H.ActionResult.InvalidParameters;
            const o = p.default.CallingStore.getConnectedAndNotOnHoldCallId();
            if (!o)
                return H.ActionResult.InvalidParameters;
            const s = S.default.getCallReconnectionState(o)
              , r = S.default.isCallQualityPoor(o)
              , a = S.default.isCallCatastrophic(o);
            let l = "Reconnection: " + s;
            return s && (l += ` (${m.NetworkConnectionState[s]})`),
            l = l + "\nQualityPoor: " + r,
            l = l + "\nCatastrophic: " + a,
            n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, l)),
            H.ActionResult.None
        }
    }, {
        command: "dumpmsnp",
        isVisible: !1,
        description: "Display debugging info in the conversation",
        action: (e,t,i,o)=>{
            let s;
            switch (ee.default.getConnectionStatus()) {
            case ee.ConnectionStatus.Connected:
                s = "NetStateConnected";
                break;
            case ee.ConnectionStatus.DisconnectedButNetworkingPossible:
                s = "NetStateConnecting";
                break;
            case ee.ConnectionStatus.DisconnectedNoNetworkingReported:
                s = "NetStateDisconnected";
                break;
            default:
                s = "Unknown"
            }
            const r = $.getMyMris()
              , a = n.filter(r, e=>T.getMriNamespace(e) === T.Namespaces.MSA).map(e=>e.substr(2))
              , l = n.find(a, e=>0 !== e.indexOf("cid-(")) || n.head(a) || "Unknown"
              , c = (new Date).getTimezoneOffset()
              , d = Math.abs(c % 60)
              , u = (c - d) / 60
              , g = (u > 0 ? "-" : "+") + (u < 10 ? "0" + u : u) + ":" + (d < 10 ? "0" + d : d)
              , h = ge.getEndpointInfo()
              , p = ye.default.getSkypeToken()
              , m = ae.default.debug_getLastPayload()
              , S = C.debug_getCurrentCloudUrl()
              , f = y.default.getUserProperty(T.ServerUserProps.UserRing)
              , b = [["Status", s], ["Dogfood Status", S ? T.isDogfoodCloudUrl(S).toString() : "None"], ["Cloud Url", S || "None"], ["User Ring", n.isUndefined(f) ? "None" : _.UserRing[n.toNumber(f)] || f], ["Login", l], ["Skypename", $.getSkypeId()], ["EPID", h.exists ? h.id : "None"], ["EPFlags", h.exists ? h.featureFlags : "None"], ["Push Sub Id", h.pushSubscriptionId || "None"], ["ClientVersion", Ce.getAppVersion()], ["OSVersion", Ce.getPlatformTypeName() + " " + Ce.getOSVersion()], ["Time", `TZ: UTC${g}, Local: ${Date.now()}    /*, Server */`], ["PnhInfo", m ? JSON.stringify(m) : "None"], ["My Mris", r.join(", ")], ["Locale", K.getLocale()], ["PlatformType", "" + Ce.getPlatformType()], ["Chat Service Connection", C.isConnected() ? "REST/Long Poll" : "None"], ["Skype Token Expiration", p ? "" + p.expiration : "None"], ["FrontendUrl", Ce.getFrontendBaseUrl()]];
            const v = "MSNP: Connection Data:\n" + n.map(b, e=>`* ${e[0]}: ${e[1]}`).join("\n");
            return o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, v)),
            H.ActionResult.None
        }
    }, {
        command: "pnh",
        isVisible: !1,
        description: "Display PNH registrations",
        action: (e,t,i,n)=>(ae.default.debug_enumerateRegistrations().then(e=>{
            const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(e, null, " "));
            n(i)
        }
        ),
        H.ActionResult.None)
    }, {
        command: "tracing",
        isVisible: !1,
        usageHint: "[on|off|(number number number number number number)]",
        description: "Enables or disables debug log tracing",
        action: (e,t)=>{
            const i = e.toLowerCase().trim();
            if ("on" === i)
                U.setLocalTracingMasks([-1, -1, -1, -1, -1, -1, -1, -1, -1]);
            else if ("off" === i)
                U.setLocalTracingMasks([0, 0, 0, 0, 0, 0, 0, 0, 0]);
            else {
                if (!i)
                    return H.ActionResult.InvalidParameters;
                {
                    const e = i.split(" ")
                      , t = n.map(e, e=>Number(e));
                    if (!n.every(t, n.isFinite) || t.length !== s.ECSMaskLength)
                        return H.ActionResult.InvalidParameters;
                    U.setLocalTracingMasks(t)
                }
            }
            return H.ActionResult.None
        }
    }, {
        command: "unreadcounts",
        isVisible: !1,
        description: "Validates unread message counts and dumps details to debug log file",
        action: (e,t,i,n)=>{
            const o = e.toLowerCase().trim();
            if (o && "fix" !== o)
                return H.ActionResult.InvalidParameters;
            const s = y.default.getConversationMetaFromMemoryCache(t);
            return I.validateUnreadMessageCounts([s]).then(e=>{
                const i = e ? "Unread message counts are consistent." : "Unread message counts are inconsistent. Please file a bug."
                  , o = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, i);
                n(o)
            }
            ),
            H.ActionResult.None
        }
    }, {
        command: "resetprefs",
        isVisible: !1,
        usageHint: "[local|roaming]",
        description: "Resets user preferences. By default, both local and roaming are reset.",
        action: (e,t)=>{
            const i = e.trim().toLowerCase()
              , n = "local" === i
              , o = "roaming" === i;
            return !i || n || o ? (n || J.default.reset(),
            o || X.default.reset(),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "usestacknav",
        isVisible: !1,
        usageHint: "[on|off]",
        description: "Overrides navigation context to stack navigation on narrow desktop",
        action: (e,t)=>{
            const i = e.trim().toLowerCase();
            return i && "on" !== i && "off" !== i ? H.ActionResult.InvalidParameters : (X.default.setUserPreferencesLocal({
                useStackNavOnNarrowDesktop: "on" === i
            }),
            H.ActionResult.None)
        }
    }, {
        command: "download",
        isVisible: !1,
        usageHint: "[info|cancel]",
        description: 'Gets info or cancels for all "Downloading" media and files',
        action: (e,t,i,o)=>{
            const [s,r] = e.trim().toLowerCase().split(" ");
            let a = !s || "info" === s;
            "all" !== s || r || (a = !0);
            const l = "cancel" === s || "cancell" === s;
            if (!a && !l)
                return H.ActionResult.InvalidParameters;
            const c = n.cloneDeep(n.values(x.default.debug_allFileDownloads()))
              , d = n.cloneDeep(n.values(x.default.debug_allFileDownloadsCleaningUp()))
              , u = n.cloneDeep(x.default.debug_allDownloadFailedRetryInfo());
            let g = `${a ? "Currently downloading " : "Canceling "}${c.length} as of ${Date.now()}:\n${JSON.stringify(c)}`;
            if (a && (d.length && (g += `\n\nCleaning up ${d.length}:\n${JSON.stringify(d)}`),
            n.isEmpty(u) || (g += "\n\nRetry info:\n" + JSON.stringify(u))),
            l) {
                const e = n.filter(c, e=>!x.default.cancelDownloadForKey(e.key, "666"));
                e.length && (g += `\n\nFailed to cancel ${e.length}:\n${n.map(e, e=>e.id).join(", ")}`)
            }
            return o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, g)),
            H.ActionResult.None
        }
    }, {
        command: "post",
        isVisible: !1,
        usageHint: "[info|cancel] [all]",
        description: 'Gets info or cancels for all "Sending" messages and media uploads in this or all conversation(s)',
        action: (e,t,i,o)=>{
            const [s,r] = e.trim().toLowerCase().split(" ");
            let a = "all" === r
              , c = !s || "info" === s;
            "all" !== s || r || (a = !0,
            c = !0);
            const d = "cancel" === s || "cancell" === s;
            if (!c && !d)
                return H.ActionResult.InvalidParameters;
            const u = e=>{
                const i = n.cloneDeep(n.values(e))
                  , o = a ? i : n.filter(i, e=>!!e.persisted.messagesForPosting[t])
                  , s = n.sortBy(o, e=>e.persisted.postTime);
                return n.map(s, e=>e.getPersistedActionData())
            }
              , g = u(oe.default.debug_allPosts())
              , h = u(oe.default.debug_allPostsCleaningUp())
              , p = n.cloneDeep(oe.default.debug_allPostsFailedRetryInfo())
              , m = n.map(g, e=>{
                const t = n.map(e.messagesForPosting, (e,t)=>P.default.getMessageByCuid(t, T.getCuidForMessage(e)));
                return l.all(t).then(t=>n.some(t, e=>!e) ? e : void 0)
            }
            );
            return l.all(m).then(e=>n.compact(e)).then(e=>{
                const i = a ? "" : " in this conversation";
                let s = `${c ? "Currently sending " : "Canceling "}${g.length}${i} as of ${Date.now()}:\n${JSON.stringify(g)}`;
                if (c && (h.length && (s += `\n\nCleaning up ${h.length}:\n${JSON.stringify(h)}`),
                n.isEmpty(p) || (s += "\n\nRetry info:\n" + JSON.stringify(p))),
                d) {
                    const e = n.filter(g, e=>{
                        const i = a ? n.first(e.conversationIds) : t
                          , o = e.messagesForPosting[i];
                        return !oe.default.cancelPostMessage(i, o.clientmessageid)
                    }
                    );
                    if (e.length) {
                        const t = n.map(e, e=>e.id);
                        s += `\n\nFailed to cancel ${e.length}:\n${t.join(", ")}`
                    }
                }
                if (e.length) {
                    const t = n.map(e, e=>e.id);
                    s += `\n\nMissing DB message for ${e.length}:\n${t.join(", ")}`
                }
                const r = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, s);
                o(r)
            }
            ),
            H.ActionResult.None
        }
    }, {
        command: "getuserinfo",
        isVisible: !1,
        description: "Retrieves a users' User Info, including SkypeID and CID",
        action: (e,t,i,n)=>{
            const o = "User Ids:\n" + $.getMyMris().join("\n");
            return n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, o)),
            H.ActionResult.None
        }
    }, {
        command: "dumpmessages",
        isVisible: !1,
        usageHint: "[all | number of messages] [pretty | JSON spaces]",
        description: "Retrieves raw messages from the database",
        action: (e,t,i,o)=>{
            const [s,r] = e.trim().toLowerCase().split(" ")
              , a = "all" === s ? Number.MAX_VALUE : Number(s);
            return n.isFinite(a) && 0 !== a ? ((a > 0 ? P.default.getMessagesForConversationBeforeTime(t, Number.MAX_VALUE, a, !1) : P.default.getMessagesForConversationAfterTime(t, 0, -a, !1)).then(e=>{
                const i = Number(r) || ("pretty" === r ? 4 : void 0)
                  , s = n.map(e, e=>JSON.stringify(e, null, i)).join(i ? "\n\n" : void 0)
                  , a = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, s);
                o(a),
                U.debug(()=>["dumpmessages", e])
            }
            ),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "getmessagebycuid",
        isVisible: !1,
        usageHint: "cuid",
        description: "Retrieves raw message from the database by cuid",
        action: (e,t,i,n)=>{
            const o = e.trim();
            return !o || /\D/.test(o) ? H.ActionResult.InvalidParameters : (P.default.getMessageByCuid(t, o).then(e=>{
                const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(e));
                n(i),
                U.debug(()=>["getmessagebycuid", e])
            }
            ),
            H.ActionResult.None)
        }
    }, {
        command: "switchconv",
        isVisible: !1,
        usageHint: "conversationId",
        description: "Navigates to a chat conversation",
        action: (e,t)=>{
            const i = be.newCauseId();
            U.log(O.LogTraceArea.SlashCommandUtils, "SlashCommandUtils.switchconv, causeId: " + i);
            const n = e.trim();
            return T.isMri(n) ? (Y.navigateToConversation({
                convId: n,
                origin: O.NavigationConversationOrigin.SlashCommand,
                causeId: i
            }),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, {
        command: "skonsole",
        isVisible: !1,
        description: "Opens a fake conversation to display streaming instrumentation/console lines",
        action: (e,t,i)=>{
            const n = be.newCauseId();
            return U.log(O.LogTraceArea.SlashCommandUtils, "SlashCommandUtils.skonsole, causeId: " + n),
            y.default.createFakeConversation(T.SkonsoleMri, O.ConversationFakedOrigin.SlashCommand),
            Y.navigateToConversation({
                convId: T.SkonsoleMri,
                origin: O.NavigationConversationOrigin.SlashCommand,
                causeId: n
            }),
            H.ActionResult.None
        }
    }, {
        command: "csi",
        isVisible: !1,
        usageHint: "[start|stop|sync]",
        description: "Commands for Cortana Signals",
        action: (e,t)=>{
            switch (e.trim().toLowerCase()) {
            case "start":
                let e = ye.default.getCortanaToken();
                e && r.default.start({
                    clientId: Q.clientIdSkypeApp,
                    token: e.accessToken,
                    refreshToken: ye.default.getMSARefreshToken(),
                    timeOfExpiry: Math.round(e.expiryDateTimeMs / 1e3)
                });
                break;
            case "stop":
                r.default.stop();
                break;
            case "sync":
                r.default.sync();
                break;
            default:
                return H.ActionResult.InvalidParameters
            }
            return H.ActionResult.None
        }
    }, {
        command: "clearmru",
        isVisible: !0,
        description: K.getString("SlashCommandDescriptions.ClearMru"),
        action: (e,t)=>(re.default.clearHistory(),
        H.ActionResult.None)
    }, {
        command: "optoutcortana",
        isVisible: !1,
        description: "Revoke consent and opt out from Cortana",
        action: ()=>(N.disableCortanaAndRemoveUserTokens(),
        H.ActionResult.None)
    }, {
        command: "cortanastatus",
        isVisible: !1,
        description: "Show the status of the Cortana opt-in state and in context suggestions.",
        action: (e,t,i,o)=>{
            const s = J.default.getCortanaOptInHandledTime()
              , r = C.debug_getCurrentCloudUrl()
              , a = [["Skypename", $.getSkypeId()], ["Client Version", Ce.getAppVersion()], ["OS Version", Ce.getPlatformTypeName() + " " + Ce.getOSVersion()], ["Dogfood Status", r ? T.isDogfoodCloudUrl(r).toString() : "None"], ["Cloud Url", r || "None"], ["Cortana Bot ECS Enabled", u.default.getS4LCortanaFeatures().enabled], ["Cortana In Context ECS Enabled", u.default.getS4LCortanaFeatures().inContextEnabled], ["Cortana Opted in", J.default.getCortanaOptedIn()], ["Cortana Opted In Handled Time", s ? (new Date).toUTCString() : "None"]]
              , l = "Cortana Status Information:\n" + n.map(a, e=>`* ${e[0]}: ${e[1]}`).join("\n");
            return o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, l)),
            H.ActionResult.None
        }
    }, {
        command: "geturicomponents",
        isVisible: !1,
        usageHint: "[uri] [native|regex]",
        description: "Get uri components synchronously.",
        action: (e,t,i,o)=>{
            const s = e && n.compact(n.trim(e).split(" "));
            if (0 === s.length)
                return H.ActionResult.InvalidParameters;
            const r = n.trim(s[0]);
            let a, l;
            switch (s.length > 1 ? n.trim(s[1]).toLowerCase() : "default") {
            case "native":
                a = fe.default.test_syncGetUriComponents(r);
                break;
            case "regex":
                a = fe.default.test_regexGetUriComponents(r);
                break;
            default:
                a = fe.default.getURIComponents(r)
            }
            if (a) {
                const e = [["Input", r], ["Is valid", fe.default.isUrlValid(r)], ["Protocol", a.protocol], ["Email Name", a.emailName], ["Skype Participants", a.skypeParticipants], ["Tel Number", a.telNumber], ["Host", a.host], ["Port", a.port], ["Path", a.pathname], ["Querystring", a.queryParameterString], ["Fragment", a.fragment]];
                l = "Uri components:\n" + n.map(e, e=>`* ${e[0]}: ${e[1]}`).join("\n")
            } else
                l = "Failed to parse uri: " + r;
            return o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, be.escapeXml(l))),
            H.ActionResult.None
        }
    }, {
        command: "fetchprofile",
        isVisible: !1,
        usageHint: "[mri]",
        description: "Fetches a profile from the People Service.",
        action: (e,t,i,o)=>e && 0 !== e.length ? (he.default.getProfiles([e]).then(e=>{
            n.each(e.profiles, e=>{
                const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(e));
                o(i)
            }
            )
        }
        ),
        H.ActionResult.None) : H.ActionResult.InvalidParameters
    }, {
        command: "fetchcontact",
        isVisible: !1,
        usageHint: "[mri]",
        description: "Fetches contacts from the Contacts Service and searches for given mri.",
        action: (e,t,i,o)=>e && 0 !== e.length ? (A.default.getContacts($.getSkypeId()).then(i=>{
            if (i.contacts) {
                const s = n.find(i.contacts, t=>t.mri === e);
                let r = i.contacts.length + " total contacts - ";
                if (r += s ? "found " : "did not find ",
                r += '"' + e + '"',
                o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, r)),
                s) {
                    const e = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(s));
                    o(e)
                }
            } else
                o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, "Something went wrong"))
        }
        ).catch(e=>{
            const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, Se.errorAsString(e));
            o(i)
        }
        ),
        H.ActionResult.None) : H.ActionResult.InvalidParameters
    }, {
        command: "getprofilefromdb",
        isVisible: !1,
        usageHint: "[mri]",
        description: "Gets user profile from the local database.",
        action: (e,t,i,n)=>e && 0 !== e.length ? (P.default.getDisplayableUser(e).then(e=>{
            if (e) {
                const i = "Displayable user mini profile:\n\n" + JSON.stringify(e);
                n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, i))
            } else
                n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, "No displayable user mini profile found"))
        }
        ),
        P.default.getUserProfileByMri(e).then(e=>{
            if (e) {
                const i = "Full user profile:\n\n" + JSON.stringify(e);
                n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, i))
            } else
                n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, "No full user profile found"))
        }
        ),
        H.ActionResult.None) : H.ActionResult.InvalidParameters
    }, {
        command: "getcontactswithphones",
        isVisible: !1,
        description: "Fetches contacts with phones from the Contacts Service for the current user.",
        action: (e,t,i,o)=>(A.default.getContacts($.getSkypeId()).then(e=>{
            if (e.contacts) {
                const i = n.filter(e.contacts, e=>!!e.phones || !!e.profile && !!e.profile.phones)
                  , s = n.filter(e.contacts, e=>!!e.phone_hashes)
                  , r = e.contacts.length + " total contacts - " + s.length + " contacts with phone hashes - " + i.length + " contacts with phones";
                o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, r)),
                n.each(i, e=>{
                    const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, JSON.stringify(e));
                    o(i)
                }
                )
            } else
                o(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, "Something went wrong"))
        }
        ).catch(e=>{
            const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, Se.errorAsString(e));
            o(i)
        }
        ),
        H.ActionResult.None)
    }, {
        command: "synccontacts",
        isVisible: !1,
        usageHint: "[full]",
        description: "Trigger syncing of contacts from the Contacts Service",
        action: (e,t,i,n)=>{
            k.default.triggerContactsRefresh("full" === e);
            const o = "full" === e ? "Triggered full sync" : "Triggered delta sync";
            return n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, o)),
            H.ActionResult.None
        }
    }, {
        command: "resynclocaladdressbook",
        isVisible: !1,
        description: "Trigger re-syncing of the local address book",
        action: (e,t,i,n)=>{
            G.default.syncLocalAddressBook();
            return n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, "Attempted to trigger local address book sync. Check contacts permissions.")),
            H.ActionResult.None
        }
    }, {
        command: "azms",
        isVisible: !1,
        usageHint: "[environ ENVIRON)]",
        description: "Set AzMS REST API deployment slot.",
        action: (e,t)=>{
            U.log(O.LogTraceArea.SlashCommandUtils, "AzMS setting user preference: " + e);
            const [i,n] = e.trim().toLowerCase().split(" ");
            return !i || "environ" !== i || !n || ["default", "test", "production"].indexOf(n) < 0 ? H.ActionResult.InvalidParameters : (U.log(O.LogTraceArea.SlashCommandUtils, "AzMS pointing to environment: " + n),
            g.default.setEnvironment(n),
            X.default.setUserPreferencesLocal({
                azmsEnvironment: n
            }),
            H.ActionResult.None)
        }
    }, {
        command: "wipedatabase",
        isVisible: !1,
        description: "Wipes your database",
        action: (e,t,i)=>{
            const n = j.default.internal_setDatabaseWipeFlag()
              , o = me.EnsureStartedExclusive([ue.default]).then(()=>ue.default.nukeDB());
            return l.all([n, o]).always(()=>{
                le.reloadApp("slash-command-wipedatabase")
            }
            ),
            H.ActionResult.None
        }
    }, {
        command: "version",
        isVisible: !0,
        description: K.getString("SlashCommandDescriptions.Version"),
        action: (e,t,i,n)=>{
            const s = o.default.getStack()
              , r = s ? s.getVersion() : void 0;
            return n(M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, "Skype Version: " + Ce.getAppVersion() + "\nCalling Version: " + (r ? r.build : "Unknown") + "\nOVB Revision: " + (r ? r.ovb : "Unknown"))),
            H.ActionResult.None
        }
    }, {
        command: "showplaces",
        isVisible: !1,
        description: "Shows all endpoints and their details",
        action: (e,t,i,o)=>(C.serviceEnumerateEndpoints().then(e=>{
            const i = e.endpoints
              , s = n.map(i, e=>C.serviceGetEndpointPresenceDoc(T.formatEndpointId(e.id)).then(e=>{
                if (!e)
                    return l.Rejected();
                const t = T.getTextualEndpointInfo(e)
                  , o = n.find(i, t=>T.formatEndpointId(t.id) === T.getEndpointIdFromPresenceDoc(e));
                return t + " - isActive: " + o.isActive + ", Subs: " + n.map(o.subscriptions, e=>e.id + ":" + e.channelType).join(",")
            }
            ).catch(()=>"Unknown ID: " + C.serviceGetEndpointPresenceDoc(T.formatEndpointId(e.id))));
            l.all(s).then(e=>{
                const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, e.join("\n"));
                o(i)
            }
            )
        }
        ),
        H.ActionResult.None)
    }, {
        command: "openinext",
        isVisible: !1,
        usageHint: "[on|off]",
        description: "Enable opening links in external browser",
        action: (e,t)=>{
            const i = e.trim().toLowerCase();
            return i && "on" !== i && "off" !== i ? H.ActionResult.InvalidParameters : (X.default.setUserPreferencesLocal({
                openUrlInExternalBrowser: "on" === i
            }),
            H.ActionResult.None)
        }
    }, {
        command: "pullcampaign",
        isVisible: !1,
        usageHint: "[campaing_id] [camapaign_variant] (language)",
        description: "Download pull campaign",
        action: (e,t,i,o)=>{
            const s = n.split(e, " ", 3);
            if (s.length < 2 || s.length > 3) {
                const e = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, "Wrong number of parameters. /pullcampaign campaing_id camapaign_variant (locale)");
                return o(e),
                H.ActionResult.InvalidParameters
            }
            const r = s[0]
              , a = s[1]
              , l = 2 === s.length || 3 === s.length ? K.getLocale() : s[2];
            if (!l || !K.isLocaleSupported(l)) {
                const e = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, 'Invalid language provided. Please use "en-US" format');
                return o(e),
                H.ActionResult.InvalidParameters
            }
            return R.default.slashCommandTriggerPullCampaign(r, a, l).then(e=>{
                L.default.insertRealTimeMessage(e.payload, e.type, B.EngagementSource.EngagementApi);
                const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, "Slash command completed with success. Campaign payload sent to EngagementBotMessageServiceV2 for processing");
                o(i)
            }
            ).fail(e=>{
                const i = M.createMessageInfoFromEscapedText(t, O.PostSource.SlashCommand, e);
                o(i)
            }
            ),
            H.ActionResult.None
        }
    }, {
        command: "speechprivacyconsent",
        isVisible: !1,
        usageHint: "reset",
        description: "Resets value given to speech consent for translations ",
        action: e=>{
            U.log(O.LogTraceArea.SlashCommandUtils, "Changes the value for speech consent for privacy" + e);
            const t = e.trim().toLowerCase();
            return t && n.includes(["reset"], t) ? (pe.default.test_resetState(),
            H.ActionResult.None) : H.ActionResult.InvalidParameters
        }
    }, ...se.default];
    function Pe(e, t=!1) {
        const i = w.default.getConversation(e);
        return i && (i.isThread() && !t || i.isModerated()) || !1
    }
    function Ae(e, t) {
        return !t.isEnabled || t.isEnabled(e)
    }
    var ke;
    !function(e) {
        e[e.None = 0] = "None",
        e[e.InvalidLooksLikeCommand = 1] = "InvalidLooksLikeCommand",
        e[e.FoundCommand = 2] = "FoundCommand"
    }(ke = t.FindResult || (t.FindResult = {})),
    t.getSlashCommands = function() {
        return Te
    }
    ,
    t.getVisibleCommands = function(e) {
        return n.filter(Te, t=>t.isVisible && Ae(e, t))
    }
    ,
    t.findSlashCommand = function(e, t) {
        if ((t[0]instanceof V.CommandEntity || t[0]instanceof V.UnhandledEntity || t[0]instanceof V.SmsEntity) && "/" === t[0].text().charAt(0)) {
            const i = n.map(t, e=>e.text()).join("");
            if (ve.test(i)) {
                let t = i.indexOf(" ");
                -1 === t && (t = i.length);
                const o = i.substr(1, t - 1).toLowerCase()
                  , s = i.substr(t + 1)
                  , r = n.find(Te, t=>t.command === o && Ae(e, t));
                return {
                    result: r ? ke.FoundCommand : ke.InvalidLooksLikeCommand,
                    command: r,
                    params: s
                }
            }
        }
        return {
            result: ke.None
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(866)
      , r = i(86)
      , a = i(0)
      , l = i(218)
      , c = i(1227)
      , d = i(351)
      , u = i(89)
      , g = i(6)
      , h = i(51)
      , p = i(519)
      , m = i(1820)
      , S = i(1092)
      , C = i(264)
      , y = i(265)
      , f = i(115)
      , _ = i(467)
      , b = i(10)
      , v = i(879)
      , T = i(229)
      , P = i(1232)
      , A = i(81)
      , k = i(2)
      , I = i(443)
      , w = i(110)
      , N = i(1821)
      , M = i(898)
      , E = i(172)
      , x = i(3)
      , D = i(38)
      , L = i(1056)
      , R = i(858)
      , B = i(5)
      , O = i(4)
      , F = i(132)
      , V = i(3189)
      , U = i(54)
      , H = i(17)
      , W = i(55)
      , z = i(97)
      , G = i(64)
      , K = i(262)
      , j = i(282)
      , q = i(1176)
      , Q = i(897)
      , X = i(321)
      , J = i(24)
      , $ = i(37)
      , Y = (i(47),
    i(44))
      , Z = i(94)
      , ee = i(1238)
      , te = i(1838)
      , ie = i(73)
      , ne = i(8)
      , oe = i(18)
      , se = i(11)
      , re = (i(14),
    i(59))
      , ae = i(109)
      , le = (i(183),
    i(611));
    var ce;
    !function(e) {
        e[e.Primary = 0] = "Primary",
        e[e.Secondary = 1] = "Secondary",
        e[e.Experimental = 2] = "Experimental"
    }(ce || (ce = {}));
    const de = [W.HubTab.Recents, W.HubTab.Calls, W.HubTab.People]
      , ue = [W.HubTab.Recents, W.HubTab.Calls, W.HubTab.People, W.HubTab.Notifications]
      , ge = B.lazyProperties({
        hub: ()=>a.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        hubAndroid: ()=>a.Styles.createViewStyle({
            backgroundColor: ne.Color.transparent
        }),
        headerStyle: ()=>a.Styles.createViewStyle({
            height: 70
        }),
        headerStyleSmall: ()=>a.Styles.createViewStyle({
            height: 60
        }),
        headerLandscapeStyle: ()=>a.Styles.createViewStyle({
            height: 44
        }),
        tabShadow: ()=>a.Styles.createViewStyle({
            left: 0,
            right: 0,
            height: 1
        }),
        contentContainer: ()=>a.Styles.createViewStyle({
            flex: 1,
            flexDirection: "column-reverse"
        }),
        contentInnerContainer: ()=>a.Styles.createViewStyle({
            flex: 1,
            alignItems: "stretch"
        }),
        tabWrapper: ()=>a.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        headerWrapper: ()=>a.Styles.createViewStyle({
            flex: 0,
            overflow: "visible"
        }),
        fab: ()=>a.Styles.createViewStyle({
            position: "absolute",
            bottom: 15,
            right: 15
        }),
        stackedFab: ()=>a.Styles.createViewStyle({
            marginTop: 10
        })
    });
    class he extends h.default {
        constructor(e) {
            super(e),
            this._shadowOpacityValue = new a.Animated.Value(1),
            this._shadowOpacityStyle = a.Styles.createAnimatedViewStyle({
                opacity: this._shadowOpacityValue
            }),
            this._statusPillInstance = new ee.default,
            this._miniToastKey = n.uniqueId("MobileHub"),
            this._conversationsScrolledToTop = !0,
            this._callsScrolledToTop = !0,
            this._skipUpdatingHeaderTab = !1,
            this._skypeToPhoneCardExperimentSettings = {
                location: I.ExperimentLocation.CallsPanel,
                name: "DialpadFab",
                layoutOption: "default"
            },
            this._resetTransitionTransformValue = new a.Animated.Value(0),
            this._resetTransitionOpacityValue = new a.Animated.Value(1),
            this._resetSearchTransitionStyle = a.Styles.createAnimatedViewStyle({
                opacity: this._resetTransitionOpacityValue,
                transform: [{
                    translateY: this._resetTransitionTransformValue
                }]
            }),
            this._contentTransformValue = new a.Animated.Value(0),
            this._contentOpacityValue = new a.Animated.Value(1),
            this._contentAnimatedStyle = a.Styles.createAnimatedViewStyle({
                opacity: this._contentOpacityValue,
                transform: [{
                    translateX: this._contentTransformValue
                }]
            }),
            this._fabOpacityValue = new a.Animated.Value(1),
            this._fabOpacityStyle = a.Styles.createAnimatedViewStyle({
                opacity: this._fabOpacityValue
            }),
            this._hubHeaderPanelRef = ()=>this._hubHeaderPanel,
            this._onTabLongPress = e=>{
                switch (e) {
                case W.HubTab.Recents:
                case W.HubTab.Notifications:
                    X.default.showOptionsMenu(e, ()=>this._tabRef(e), this._getRootViewId(), void 0)
                }
            }
            ,
            this._onConversationListPanel = e=>{
                this._conversationsListPanel = e || void 0
            }
            ,
            this._onHubHeaderPanel = e=>{
                this._hubHeaderPanel = e || void 0
            }
            ,
            this._onAppStateChange = e=>{
                this._handleAppStateChange(e)
            }
            ,
            this._tabConfig = e=>{
                switch (e) {
                case W.HubTab.Recents:
                    return this._getWrappedRecentsTabConfig();
                case W.HubTab.Calls:
                    return this._getCallsTabConfig();
                case W.HubTab.People:
                    return this._getContactsTabConfig();
                case W.HubTab.Notifications:
                    return this._getNotificationsTabConfig();
                case W.HubTab.CaptureHub:
                case W.HubTab.MeetNowChats:
                case W.HubTab.MeetNowCalls:
                    return
                }
            }
            ,
            this._goToRecent = ()=>{
                this._onBottomTabPress(W.HubTab.Recents, void 0)
            }
            ,
            this._onBottomTabPress = (e,t)=>{
                if (this._getContext().isPresentedInDesktopLeftNav && A.dismissAll(),
                e !== W.HubTab.CaptureHub)
                    if (this.state.currentTab !== e) {
                        const t = this._convertTabEnumToIndex(e)
                          , i = this._convertTabEnumToIndex(this.state.currentTab)
                          , o = 20 * (t > i ? 1 : -1)
                          , s = n.clone(this.state.tabRenderFlags);
                        s[e] = !0;
                        const a = !D.default(s, this.state.tabRenderFlags);
                        if (this._skipUpdatingHeaderTab = a,
                        this.isComponentMounted()) {
                            const n = ()=>{
                                if (this._swipableTabView && i !== t) {
                                    const e = r.timing.Duration.Tiny
                                      , i = ()=>{
                                        this._skipUpdatingHeaderTab = !1,
                                        this._updateHeaderTab(this.state.currentTab, !0),
                                        this._contentTransformValue.setValue(o),
                                        this._contentOpacityValue.setValue(.4),
                                        this._fabOpacityValue.setValue(1),
                                        this._swipableTabView && this._swipableTabView.goToTab(t, !1),
                                        r.parallel([r.timing.shotgun({
                                            value: this._contentTransformValue,
                                            toValue: 0,
                                            duration: e,
                                            useNativeDriver: !0
                                        }), r.timing.shotgun({
                                            value: this._contentOpacityValue,
                                            toValue: 1,
                                            duration: e,
                                            useNativeDriver: !0
                                        })]).start()
                                    }
                                    ;
                                    if (a) {
                                        this._fabOpacityValue.setValue(0);
                                        const t = !0;
                                        r.parallel([r.timing.easeOut({
                                            value: this._contentTransformValue,
                                            toValue: -o,
                                            duration: e,
                                            useNativeDriver: t
                                        }), r.timing.easeOut({
                                            value: this._contentOpacityValue,
                                            toValue: 0,
                                            duration: e,
                                            useNativeDriver: t
                                        })]).start(e=>{
                                            e.finished && i()
                                        }
                                        )
                                    } else
                                        this._contentOpacityValue.setValue(0),
                                        i()
                                }
                            }
                            ;
                            a ? this.setState({
                                tabRenderFlags: s,
                                currentTab: e
                            }, n) : this.setState({
                                currentTab: e
                            }, n)
                        }
                        0
                    } else
                        switch (e) {
                        case W.HubTab.Recents:
                            this._conversationsListPanel && this._conversationsListPanel.scrollToTop();
                            break;
                        case W.HubTab.Calls:
                            this._quickCallPanel && this._quickCallPanel.scrollToTop();
                            break;
                        case W.HubTab.People:
                            this._contactsPanel && this._contactsPanel.scrollToTop();
                            break;
                        case W.HubTab.Notifications:
                            this._notificationsPanel && this._notificationsPanel.scrollToTop()
                        }
                else
                    C.navigateToCaptureComboWithParams({
                        capturedContentHandler: new S.CapturedContentHandlerForSharing(this._getContext()),
                        allowVideo: !0,
                        willDismissOnSend: !0,
                        mediaPickerShouldCollapseFully: !0,
                        pressTime: t
                    }, this._getContext())
            }
            ,
            this._onTabChangeEnd = (e,t)=>{
                if (this.isComponentMounted()) {
                    const t = this._convertIndexToTabEnum(e)
                      , i = W.HubTab[t];
                    x.track(new K.NavigationTab(i));
                    const o = oe.isUsingExperimentalNav();
                    o && this.isComponentMounted() && this.state.currentTab !== t && (x.log(k.LogTraceArea.MobileHub, "MobileHub: setting currentTab to " + t),
                    this.setState({
                        currentTab: t
                    })),
                    n.defer(()=>{
                        H.updateHubNavigationContext(t, !o)
                    }
                    )
                }
            }
            ,
            this.handleFocusEvent = e=>(x.log(k.LogTraceArea.GenericUnsafe, "MobileHub.handleFocusEvent"),
            e === w.FocusEvent.OpenCallSideBar && (this._focusCenterControl(),
            !0)),
            this._renderCallsTabContent = ()=>a.createElement(Q, {
                ref: this._onQuickCallPanelRef,
                hideHeader: !0,
                hideSearchBar: this.state.mobileHubFABEnabled,
                bottomPadding: this._fabBottomPadding(W.HubTab.Calls),
                onScroll: this.state.mobileHubFABEnabled ? void 0 : this._onCallsScroll
            }),
            this._onContactsTabCountUpdated = e=>{
                if (!this.isComponentMounted())
                    return;
                const t = 1 === e;
                t !== this.state.showShadowForPeopleTab && this.setState({
                    showShadowForPeopleTab: t
                })
            }
            ,
            this._onSwipableTabViewRef = e=>{
                this._swipableTabView = e
            }
            ,
            this._onHandleTabLongPress = e=>{
                this._onTabLongPress(e)
            }
            ,
            this._onPrimaryFABPress = e=>{
                const t = M.default.actionButtonForHubTab(this.state.currentTab, this.state.superComposerEnabled, this.state.disableHighBandwidthOperations);
                t && this._isCTAExperiment() && R.default.registerCallButtonClickAction(this._skypeToPhoneCardExperimentSettings),
                this._intFABPress(e, t, ()=>this._fabIcon, this._getRootViewId())
            }
            ,
            this._onSecondaryFABPress = e=>{
                const t = M.default.secondaryActionButtonForHubTab(this.state.currentTab, this.state.disableHighBandwidthOperations);
                t && this._isCTAExperiment() && R.default.registerDialerButtonClickAction(this._skypeToPhoneCardExperimentSettings),
                this._intFABPress(e, t, ()=>this._secondaryFabIcon, this._getRootViewId())
            }
            ,
            this._onQuickCallPanelRef = e=>{
                this._quickCallPanel = e || void 0
            }
            ,
            this._onContactsPanelV2Ref = e=>{
                this._contactsPanel = e || void 0
            }
            ,
            this._onNotificationsPanelRef = e=>{
                this._notificationsPanel = e || void 0
            }
            ,
            this._onContentWrapperRef = e=>{
                this._wrappedContentTransitionView = e || void 0
            }
            ,
            this._onFabIconRef = e=>{
                this._fabIcon = e || void 0
            }
            ,
            this._onSecondaryFabIconRef = e=>{
                this._secondaryFabIcon = e || void 0
            }
            ,
            this._onTabBarRef = e=>{
                this._tabBar = e || void 0
            }
            ,
            this._onCallsScroll = (e,t)=>{
                const i = e <= 0;
                this._callsScrolledToTop !== i && (this.state.currentTab === W.HubTab.Calls && this._shadowOpacityValue.setValue(i ? 0 : 1),
                this._callsScrolledToTop = i)
            }
            ,
            this._onConversationsListScroll = (e,t)=>{
                if (this.state.mobileHubFABEnabled)
                    return;
                const i = e <= 0;
                this._conversationsScrolledToTop !== i && (this.state.currentTab === W.HubTab.Recents && this._shadowOpacityValue.setValue(i ? 0 : 1),
                this._conversationsScrolledToTop = i)
            }
            ,
            this._initialTab = e.currentTab,
            j.default.transitionInfoEvent().subscribe(e=>{
                j.default.isHubSearchTransition() && e.progress ? this._setAnimatedValues(e.progress, 0) : e.fromRoute && e.fromRoute.type === j.RouteType.Hub && this._clearAnimatedValues()
            }
            ),
            this._navigationStateStoreToken = G.default.subscribe(()=>this._onNavigationStateStoreHubTabChange(), z.TriggerKeys.HubTab)
        }
        _buildState(e, t) {
            const i = {};
            i.shouldSkipRendering = L.default.shouldSkipMobileHub(),
            t && (i.unreadAlertsCount = 0,
            i.activeConversationsCount = 0);
            const s = g.default.getS4LUiFeatures();
            i.disableHighBandwidthOperations = E.default.isUsingGogoNetwork(),
            i.isCameraAvailable = !i.disableHighBandwidthOperations && y.default.isCameraAvailable(),
            i.enableIOSCallsFABExperiment = !1;
            const r = this._getRootViewId();
            if (i.onTopOfNavStack = G.default.isHubOnTopOfNavStack(),
            i.deviceOrientation = J.default.getDeviceOrientation(r),
            i.leavePaddingForStatusBar = a.StatusBar.isOverlay() && i.deviceOrientation === o.DeviceOrientation.Portrait,
            i.statusBarHeight = $.default.statusBarHeight(),
            i.bottomSafeAreaInset = $.default.bottomSafeAreaInset(),
            i.useCompactLayout = J.default.isSmallDevice(r),
            i.onTopOfNavStack && (i.unreadAlertsCount = d.default.getUnreadAlertsCount(),
            i.activeConversationsCount = T.default.getActiveRecentsConversationCount()),
            !t && oe.isUsingExperimentalNav() || (i.currentTab = e.currentTab),
            i.superComposerEnabled = s.superComposerEnabled,
            i.isTablet = re.isTablet(),
            i.windowHeight = J.default.getHeight(r),
            i.unreadConversationIds = n.keys(T.default.getConversationsWithUnreadCounts()),
            t ? (i.tabRenderFlags = {
                [e.currentTab]: !0
            },
            i.showShadowForPeopleTab = !1) : i.deviceOrientation !== this.state.deviceOrientation && (i.tabRenderFlags = this._resetTabRenderFlags(i)),
            i.mobileHubFABEnabled = !1,
            i.mobileHubFABEnabled) {
                const e = {};
                0,
                i.fabRenderFlags = e,
                i.gradientColors = U.getGradientColors()
            } else
                i.enableIOSCallsFABExperiment ? (i.fabRenderFlags = {
                    [W.HubTab.Calls]: !0
                },
                i.gradientColors = U.getGradientColors()) : (i.fabRenderFlags = {},
                i.gradientColors = void 0);
            return i
        }
        _renderHeaderWithOptions(e) {
            const t = this.state.deviceOrientation === o.DeviceOrientation.Landscape;
            let i;
            return i = e.heightOverride ? a.Styles.createViewStyle({
                height: e.heightOverride
            }, !1) : t ? ge.headerLandscapeStyle : this.state.useCompactLayout ? ge.headerStyleSmall : ge.headerStyle,
            a.createElement(V, {
                ref: this._onHubHeaderPanel,
                style: i,
                initialHubTab: n.isUndefined(this._initialTab) ? W.HubTab.Recents : this._initialTab,
                unreadAlertsCount: e.hideAlertsButton ? void 0 : this.state.unreadAlertsCount,
                deviceOrientation: this.state.deviceOrientation,
                isVisible: this.state.currentTab !== W.HubTab.CaptureHub,
                mobileHubFABEnabled: e.mobileHubFABEnabled,
                superComposerEnabled: e.superComposerEnabled,
                animatedTransitionStyle: e.contentTransitionStyle,
                suppressFocus: e.suppressFocus,
                hideAlertsButton: e.hideAlertsButton,
                disableHighBandwidthOperations: this.state.disableHighBandwidthOperations,
                shouldTrackUnreadAlerts: e.shouldTrackUnreadAlerts,
                showCallsActionButton: e.showCallsActionButton
            })
        }
        _getBookmarkTooltip() {
            return this.state.showBookmarkTooltip ? a.createElement(m.default, {
                title: O.getString("BookmarksTooltips.BookmarksCanBeFoundHere"),
                accessibilityLabel: O.getString("BookmarksTooltips.BookmarksCanBeFoundHere"),
                anchor: this._hubHeaderPanelRef
            }) : void 0
        }
        _renderHeaderShadow() {
            return a.createElement(a.Animated.View, {
                style: [ge.tabShadow, this._themeStyles.headerShadowColorStyle, this._shadowOpacityStyle]
            })
        }
        _renderConnectivityStatus() {
            return a.createElement(te.StatusPillView, {
                disableAbsolutePosition: !0,
                statusPillInstance: this._statusPillInstance,
                connectionStatusOnly: !0
            })
        }
        _getRecentsTabConfig(e) {
            return Object.assign(Object.assign({}, e.params), {
                accessibilityLabel: this._tabAccessibilityLabel(W.HubTab.Recents),
                renderContent: ()=>{
                    if (e.hideContent)
                        return;
                    const t = e.wrapperStyle
                      , i = this.state.currentTab === W.HubTab.Recents
                      , n = a.createElement(P, {
                        ref: this._onConversationListPanel,
                        selectedConversationId: this.state.selectedConversationId,
                        useMobileView: !0,
                        showFilterIcon: !0,
                        isScrollToTopTarget: i && this._scrollsToTop(),
                        isActiveTab: i,
                        topInset: this._topScrollInset(),
                        bottomPadding: e.bottomPadding,
                        hideSearchBar: e.hideSearchBar,
                        onScroll: this._onConversationsListScroll
                    });
                    return e.contentWrapper ? e.contentWrapper(n) : a.createElement(a.View, {
                        key: "conversation-list",
                        style: t
                    }, n)
                }
            })
        }
        _placeholderTabConfig() {
            return {
                renderContent: ()=>{}
            }
        }
        _tabAccessibilityLabel(e) {
            let t = "";
            const i = this._convertTabEnumToIndex(e) + 1;
            switch (e) {
            case W.HubTab.Recents:
                t += O.getString("Hub.RecentsTabScreenReaderLabel", {
                    count: this.state.activeConversationsCount
                });
                break;
            case W.HubTab.CaptureHub:
                t = this._tabTitle(W.HubTab.CaptureHub)
            }
            return t += " " + O.getString("AccessibilityLabel.TabControlLabel") + " " + O.getString("AccessibilityLabel.TabCountLabel", {
                currentTab: i,
                totalTabs: this._totalTabs()
            }),
            t
        }
        _tabTitle(e) {
            switch (e) {
            case W.HubTab.Recents:
                return O.getString("Hub.RecentsTabTitle");
            case W.HubTab.CaptureHub:
                return O.getString("Hub.CaptureTabTitle")
            }
            return ""
        }
        render() {
            if (this.state.shouldSkipRendering)
                return null;
            const e = [ge.hub, this._themeStyles.primaryBackgroundColorStyle];
            const t = this._additionalContainerStyles();
            return t && e.push(t),
            a.createElement(a.Animated.View, {
                style: e,
                key: "panel"
            }, this._renderContent())
        }
        _renderContent() {
            const e = this._getTabs(this.state, !this.state.isCameraAvailable);
            let t = n.compact(n.map(e, this._tabConfig));
            oe.isRTL() && n.reverse(t);
            const i = this._isPresentedInTabletLeftNav()
              , o = n.includes(e, W.HubTab.Notifications)
              , r = this.props.hideHeader ? void 0 : this._renderHeaderWithOptions({
                mobileHubFABEnabled: this.state.mobileHubFABEnabled,
                superComposerEnabled: this.state.superComposerEnabled,
                heightOverride: Y.HeaderHeight,
                contentTransitionStyle: this._contentAnimatedStyle,
                suppressFocus: !0,
                hideAlertsButton: i || this.state.isTablet || o,
                shouldTrackUnreadAlerts: o,
                showCallsActionButton: this.state.enableIOSCallsFABExperiment
            });
            let l;
            if (r) {
                const e = this.state.currentTab !== W.HubTab.People || this.state.showShadowForPeopleTab ? this._renderHeaderShadow() : void 0
                  , t = this.state.currentTab === W.HubTab.People || this._getContext().isPresentedInDesktopLeftNav ? void 0 : a.createElement(q.default, {
                    key: "networkConnectionAlert"
                });
                let n;
                if (!i || this.state.currentTab === W.HubTab.Recents) {
                    const e = a.Styles.createViewStyle({
                        position: "absolute",
                        top: Y.HeaderHeight,
                        alignSelf: "center"
                    }, !1);
                    n = a.createElement(a.View, {
                        key: "connectionStatusWrapper",
                        style: e
                    }, this._renderConnectivityStatus())
                }
                l = [a.createElement(a.View, {
                    key: "headerWrapper",
                    style: ge.headerWrapper
                }, r, this._getBookmarkTooltip(), e, t), n]
            }
            const c = [ge.contentContainer]
              , d = [ge.contentInnerContainer];
            return a.createElement(le, {
                ref: this._onContentWrapperRef,
                style: c,
                shouldGroupAccessibilityChildren: this._getContext().isPresentedInDesktopLeftNav
            }, a.createElement(a.View, {
                style: d
            }, a.createElement(a.Animated.View, {
                style: [ge.contentInnerContainer, this._contentAnimatedStyle]
            }, a.createElement(s.default, {
                ref: this._onSwipableTabViewRef,
                startingTabIndex: this._convertTabEnumToIndex(this._initialTab),
                tabConfigs: t,
                tabHeight: 0,
                swipeDisabled: !0,
                tabsHidden: !0,
                hideTabUnderline: !0,
                isRTL: oe.isRTL(),
                contentOnly: !0,
                onTabChangeEnd: this._onTabChangeEnd,
                initialTabCountToRender: e.length
            }), this._renderFABContent()), a.createElement(N.default, {
                ref: this._onTabBarRef,
                tabs: e,
                currentHubTab: this.state.currentTab,
                disableCamera: !this.state.isCameraAvailable,
                showSpinnerWhenSyncing: !0,
                activeConversationsCount: n.includes(e, W.HubTab.Recents) ? this.state.activeConversationsCount : void 0,
                unreadAlertsCount: n.includes(e, W.HubTab.Notifications) ? this.state.unreadAlertsCount : void 0,
                onTabPress: this._onBottomTabPress,
                onTabLongPress: this._onHandleTabLongPress
            })), l)
        }
        _tabRef(e) {
            return this._tabBar ? this._tabBar.tabRef(e) : void 0
        }
        _getTabs(e, t=!0) {
            let i;
            return i = this._getContext().isPresentedInDesktopSubview || e.isTablet ? ue : de,
            t ? n.without(i, W.HubTab.CaptureHub) : i
        }
        componentDidMount() {
            super.componentDidMount(),
            this._activationSubToken = u.default.subscribeForChanges("MobileHub", this._onAppStateChange),
            this._indexToTabEnumMap = this._generateIndexToTabEnumMap(),
            this._tabEnumToIndexMap = this._generateTabEnumToIndexMap(),
            this.props.getSelectedConversationIdEvent && (this._selectedConversationIdToken = this.props.getSelectedConversationIdEvent().subscribe(e=>{
                this.isComponentMounted() && this.state.selectedConversationId !== e && this.setState({
                    selectedConversationId: e
                })
            }
            )),
            this._focusCenterControl(!1),
            this._updateStatusBarForTab(this.state.currentTab),
            this._updateHeaderTab(this.state.currentTab),
            this._addBottomMargin(),
            this._isPresentedInTabletLeftNav() && w.register(w.FocusEvent.OpenCallSideBar, this),
            r.NativeUtils.markAnimatedValue(this._contentTransformValue, 0),
            r.NativeUtils.markAnimatedValue(this._contentOpacityValue, 1)
        }
        _shouldComponentUpdate(e, t, i, n, o, s) {
            return e ? i.deviceOrientation !== o.deviceOrientation || i.useCompactLayout !== o.useCompactLayout || i.leavePaddingForStatusBar !== o.leavePaddingForStatusBar || i.statusBarHeight !== o.statusBarHeight || i.windowHeight !== o.windowHeight || i.shouldSkipRendering !== o.shouldSkipRendering || i.onTopOfNavStack !== o.onTopOfNavStack : super._shouldComponentUpdate(e, t, i, n, o, s)
        }
        _componentWillUpdate(e, t, i, o, s) {
            super._componentWillUpdate(e, t, i, o, s),
            this._updateStatusBarForTab(t.currentTab);
            const r = this._getTabs(t, !t.isCameraAvailable);
            if (n.includes(r, W.HubTab.Recents)) {
                const e = n.includes(o.unreadConversationIds, o.selectedConversationId) || n.includes(t.unreadConversationIds, t.selectedConversationId);
                if (t.activeConversationsCount !== o.activeConversationsCount && !e) {
                    const e = O.getString("Hub.RecentsTabScreenReaderLabel", {
                        count: t.activeConversationsCount || 0
                    });
                    a.Accessibility.announceForAccessibility(e)
                }
            }
            if (t.unreadAlertsCount !== o.unreadAlertsCount && n.includes(r, W.HubTab.Notifications)) {
                const e = O.getString("Hub.UnreadCounterScreenReaderLabel", {
                    count: t.unreadAlertsCount || 0
                });
                a.Accessibility.announceForAccessibility(e)
            }
            t.shouldSkipRendering !== o.shouldSkipRendering && x.log(k.LogTraceArea.MobileHub, "MobileHub.UNSAFE_componentWillUpdate: shouldSkipRendering " + t.shouldSkipRendering)
        }
        _componentDidUpdate(e, t, i) {
            super._componentDidUpdate(e, t, i),
            t.currentTab !== this.state.currentTab && this._updateHeaderTab(this.state.currentTab, !0),
            this.state.onTopOfNavStack !== t.onTopOfNavStack && (this.state.onTopOfNavStack ? this._addBottomMargin() : F.default.removeBottomMargin(this._miniToastKey)),
            this.state.onTopOfNavStack && !t.onTopOfNavStack && this._hubHeaderPanel && this._hubHeaderPanel.focusCenterControl(),
            n.delay(()=>{
                this.isComponentMounted() && this.setState({
                    showBookmarkTooltip: p.default.shouldDisplayTooltipOnMobile(this.state.onTopOfNavStack)
                })
            }
            , 1e3)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._activationSubToken && (this._activationSubToken.unsubscribe(),
            this._activationSubToken = void 0),
            this._statusPillInstance && this._statusPillInstance.destroy(),
            this._navigationStateStoreToken && (G.default.unsubscribe(this._navigationStateStoreToken),
            this._navigationStateStoreToken = void 0),
            this._selectedConversationIdToken && (this._selectedConversationIdToken.unsubscribe(),
            this._selectedConversationIdToken = void 0),
            F.default.removeBottomMargin(this._miniToastKey),
            w.unregister(w.FocusEvent.OpenCallSideBar, this)
        }
        _addBottomMargin() {
            F.default.addOrUpdateBottomMargin(this._miniToastKey, _.default.tabBarHeight(b.TabBarHeight.Default) + Math.max(10, this.state.bottomSafeAreaInset + 10))
        }
        _focusCenterControl(e=!0) {
            const t = ()=>{
                this.isComponentMounted() && this._hubHeaderPanel && this._hubHeaderPanel.focusCenterControl()
            }
            ;
            e ? n.delay(t, 100) : t()
        }
        _resetTabRenderFlags(e) {
            const t = {};
            return t[n.isUndefined(e.currentTab) ? this.state.currentTab : e.currentTab] = !0,
            t[W.HubTab.Recents] = !0,
            t
        }
        _onNavigationStateStoreHubTabChange() {
            if (this.isComponentMounted()) {
                const e = G.default.getCurrentHubTab();
                x.log(k.LogTraceArea.MobileHub, "MobileHub._onNavigationStateStoreHubTabChange " + e),
                this._swipableTabView && e !== this.state.currentTab && this._swipableTabView.goToTab(this._convertTabEnumToIndex(e), !1)
            }
        }
        _updateHeaderTab(e, t=!1) {
            if (this._skipUpdatingHeaderTab)
                return;
            const i = !!this._hubHeaderPanel && this._hubHeaderPanel.updateHubTab(e);
            let n = 1;
            this.state.mobileHubFABEnabled || (e === W.HubTab.Recents ? n = this._conversationsScrolledToTop ? 0 : 1 : e === W.HubTab.Calls && (n = this._callsScrolledToTop ? 0 : 1)),
            this._shadowOpacityValue.setValue(n),
            t && i && this._isPresentedInTabletLeftNav() && this._focusCenterControl()
        }
        _getContactsTabConfig() {
            return this.state.tabRenderFlags[W.HubTab.People] ? {
                renderContent: ()=>a.createElement(v, {
                    ref: this._onContactsPanelV2Ref,
                    hideHeader: !0,
                    hideSearchBar: this.state.mobileHubFABEnabled,
                    bottomPadding: this._fabBottomPadding(W.HubTab.People),
                    isHidden: this.state.currentTab !== W.HubTab.People || !this.state.onTopOfNavStack,
                    onTabCountUpdated: this._onContactsTabCountUpdated
                })
            } : this._placeholderTabConfig()
        }
        _getCallsTabConfig() {
            return this.state.tabRenderFlags[W.HubTab.Calls] ? {
                renderContent: this._renderCallsTabContent
            } : this._placeholderTabConfig()
        }
        _getNotificationsTabConfig() {
            return this.state.tabRenderFlags[W.HubTab.Notifications] ? {
                renderContent: ()=>a.createElement(c, {
                    ref: this._onNotificationsPanelRef,
                    hideHeader: !0,
                    onClose: this._goToRecent
                })
            } : this._placeholderTabConfig()
        }
        _getWrappedRecentsTabConfig() {
            if (!this.state.tabRenderFlags[W.HubTab.Recents])
                return this._placeholderTabConfig();
            const e = {
                wrapperStyle: this._wrapperStyle(),
                bottomPadding: this._fabBottomPadding(W.HubTab.Recents),
                hideSearchBar: this.state.mobileHubFABEnabled,
                params: {}
            };
            return this._getRecentsTabConfig(e)
        }
        _fabBottomPadding(e) {
            return this.state.fabRenderFlags[e] ? 80 * (e === W.HubTab.Calls ? 2 : 1) : 0
        }
        _updateStatusBarForTab(e, t=!0) {
            const i = this._getStatusBarStyle(this._themeColors.defaultStatusBarTheme, this._themeColors.defaultStatusBarBackgroundColor, t);
            this._updateStatusBarStyle(i)
        }
        _getStatusBarStyle(e, t, i=!0) {
            return Z.mergeStyles([Z.createHiddenStyle(!1), Z.createBarStyle(e), Z.createBackgroundColorStyle(t, i)])
        }
        _renderFABContent() {
            if (!this.state.fabRenderFlags[this.state.currentTab])
                return;
            const e = M.default.actionButtonForHubTab(this.state.currentTab, this.state.superComposerEnabled, this.state.disableHighBandwidthOperations, this.state.enableIOSCallsFABExperiment)
              , t = M.default.secondaryActionButtonForHubTab(this.state.currentTab, this.state.disableHighBandwidthOperations)
              , i = ge.stackedFab
              , n = e && e.ctaExperimentalUI
              , o = e ? this._renderFAB({
                type: n ? ce.Experimental : ce.Primary,
                icon: e.icon,
                title: e.title,
                disabled: e.disabled,
                onPress: this._onPrimaryFABPress
            }, i) : void 0
              , s = t ? this._renderFAB({
                type: ce.Secondary,
                icon: t.icon,
                title: t.title,
                disabled: t.disabled,
                onPress: this._onSecondaryFABPress
            }, i) : void 0;
            return a.createElement(a.Animated.View, {
                style: [ge.fab, this._fabOpacityStyle],
                ignorePointerEvents: !0
            }, s, o)
        }
        _renderFAB(e, t) {
            return this._isCTAExperiment() && e.type === ce.Secondary && R.default.registerOpenAction(this._skypeToPhoneCardExperimentSettings),
            a.createElement(l.default, {
                ref: e.type === ce.Primary ? this._onFabIconRef : this._onSecondaryFabIconRef,
                style: t,
                size: l.ActionButtonSize.FAB,
                icon: e.icon,
                iconSize: se.IconSize.size24,
                iconColor: this._currentTheme !== ae.Theme.AccessibleDark ? ne.Color.white : void 0,
                accessibilityLabel: e.title,
                experimentalStyle: e.type === ce.Experimental,
                useSolidStyle: e.type !== ce.Experimental,
                disabled: e.disabled,
                disabledOpacity: e.disabled ? 1 : void 0,
                onPress: e.onPress
            })
        }
        _intFABPress(e, t, i, n) {
            if (t && t.onPressCallback) {
                const o = {
                    show: (t,i)=>{
                        ie.default.showWithActionMenuConfig({
                            options: t,
                            callback: i,
                            maintainAnchor: !0,
                            rootViewId: this._getRootViewId(),
                            invokingEvent: e
                        })
                    }
                };
                t.onPressCallback(n, e, o, i)
            }
        }
        _wrapperStyle() {
            return [ge.tabWrapper]
        }
        _setAnimatedValues(e, t) {
            if (this._wrappedContentTransitionView) {
                const i = a.Styles.createAnimatedViewStyle({
                    opacity: e.interpolate({
                        inputRange: [t - 1, t, t + .5, t + 1],
                        outputRange: [1, 1, 0, 0]
                    }),
                    transform: [{
                        translateY: e.interpolate({
                            inputRange: [t - 1, t, t + 1],
                            outputRange: [0, 0, -100]
                        })
                    }]
                });
                this._wrappedContentTransitionView.setAnimatedStyle(i)
            }
        }
        _clearAnimatedValues() {
            this._wrappedContentTransitionView && this._wrappedContentTransitionView.setAnimatedStyle(this._resetSearchTransitionStyle)
        }
        _scrollsToTop() {
            return !!this.state.onTopOfNavStack && !1
        }
        _topScrollInset() {
            return 0
        }
        _totalTabs() {
            return 4
        }
        _additionalContainerStyles() {
            0
        }
        _handleAppStateChange(e) {
            if (!this.isComponentMounted())
                return;
            x.log(k.LogTraceArea.MobileHub, "MobileHub._handleAppStateChange, reset tab render flags");
            const t = this._resetTabRenderFlags(this.state);
            D.default(this.state.tabRenderFlags, t) || this.setState({
                tabRenderFlags: t
            })
        }
        _generateIndexToTabEnumMap() {
            let e = n.clone(this._getTabs(this.state));
            return e = oe.isRTL() ? n.reverse(e) : e,
            _.default.generateIndexToTabEnumMap(e)
        }
        _generateTabEnumToIndexMap() {
            let e = n.clone(this._getTabs(this.state));
            return e = oe.isRTL() ? n.reverse(e) : e,
            _.default.generateTabEnumToIndexMap(e)
        }
        _convertIndexToTabEnum(e) {
            return this._indexToTabEnumMap || (this._indexToTabEnumMap = this._generateIndexToTabEnumMap()),
            this._indexToTabEnumMap[e]
        }
        _convertTabEnumToIndex(e) {
            this._tabEnumToIndexMap || (this._tabEnumToIndexMap = this._generateTabEnumToIndexMap());
            const t = n.isUndefined(e) ? W.HubTab.Recents : e;
            return this._tabEnumToIndexMap[t]
        }
        _isCTAExperiment() {
            return this.state.currentTab === W.HubTab.Calls
        }
        _pauseWhenNotVisible() {
            return !0
        }
        _componentId() {
            return "MobileHub"
        }
        _createContext() {
            const e = super._createContext();
            return e.getCoachMarkArea = ()=>f.CoachMarkAreaType.MobileHub,
            e
        }
        _goBack(e) {
            return x.log(k.LogTraceArea.MobileHub, "MobileHub._goBack: causeId: " + e),
            this.state.onTopOfNavStack,
            !1
        }
    }
    t.default = he
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(1467)
      , r = i(2)
      , a = i(3)
      , l = i(5)
      , c = i(134)
      , d = i(17)
      , u = i(376)
      , g = i(8)
      , h = i(12)
      , p = i(29)
      , m = l.lazyProperties({
        sceneContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignSelf: "stretch"
        }, !1),
        cardStyleAndroid: ()=>o.Styles.createViewStyle({
            backgroundColor: g.Color.transparent
        }, !1)
    });
    class S extends h.default {
        constructor() {
            super(...arguments),
            this._mountedRefsMap = new c.default,
            this._navigateBackCompleted = ()=>{}
            ,
            this._transitionStarted = (e,t,i,n,o)=>{
                const s = t ? this._navContextForNavigatorRouteId(parseInt(t, 10)) : void 0
                  , r = i ? this._navContextForNavigatorRouteId(parseInt(i, 10)) : void 0;
                d.stackNavigationStarted(e, s, r, n, o)
            }
            ,
            this._transitionCompleted = ()=>{
                a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: _transitionCompleted"),
                this._clearPendingNavigationAnimation(!1),
                n.defer(()=>{
                    d.stackNavigationCompleted()
                }
                )
            }
            ,
            this._onNavigatorRef = e=>{
                this._navigator = e || void 0
            }
            ,
            this._renderScene = e=>{
                if (!e)
                    return;
                const t = this._navContextForNavigatorRoute(e);
                t || a.warn(r.LogTraceArea.Navigation, "No nav context found corresponding to the Navigator Route");
                const i = this._routeIdKey(e)
                  , n = this._renderSceneContent(t, i);
                return o.createElement(o.View, {
                    style: m.sceneContainer
                }, n)
            }
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            if (super.UNSAFE_componentWillUpdate(e, t, i),
            this._prevNavContextStack = this.props.navContextStack,
            !this._navigator)
                return;
            const n = e.navContextStack;
            let o = this._prevNavContextStack.length;
            n.length < o && (o = n.length);
            let s = 0;
            for (; s < o && this._prevNavContextStack[s].id === n[s].id; s++)
                ;
            const l = this._prevNavContextStack.length - s
              , c = n.length - s;
            if (c > 1 && a.warn(r.LogTraceArea.Navigation, "Only 1 scene can be added to the stack in a single transaction."),
            l || c) {
                if (n[n.length - 1].id === this._prevNavContextStack[this._prevNavContextStack.length - 1].id || c > 1) {
                    a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: UNSAFE_componentWillUpdate immediatelyResetRouteStack");
                    const e = this._createNavigatorRouteStack(n);
                    return void this._navigator.immediatelyResetRouteStack(e)
                }
            }
            let d;
            if (1 === c) {
                const e = n[s]
                  , t = s > 0 ? n[s - 1] : void 0;
                d = this._createNavigatorRoute(e, t)
            }
            a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: UNSAFE_componentWillUpdate prev stack length: " + this._prevNavContextStack.length + " next stack length: " + n.length + " totalPushing: " + c + " totalPopping: " + l),
            d && l >= 1 ? (a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: UNSAFE_componentWillUpdate replaceAtIndex, routeId: " + d.routeId),
            this._registerPendingNavigationAnimation(),
            this._navigator.replaceAtIndex(d, s)) : d ? (a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: UNSAFE_componentWillUpdate push, routeId: " + d.routeId),
            this._registerPendingNavigationAnimation(),
            this._navigator.push(d)) : l > 0 && (a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: UNSAFE_componentWillUpdate popToRoute"),
            this._navigator.popToRoute(this._navigator.getCurrentRoutes()[s - 1]))
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this._updateComponentVisibility()
        }
        componentDidMount() {
            super.componentDidMount();
            const e = this._createNavigatorRouteStack(this.props.navContextStack);
            a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: componentDidMount immediatelyResetRouteStack"),
            this._navigator && this._navigator.immediatelyResetRouteStack(e),
            this._updateComponentVisibility()
        }
        _updateComponentVisibility() {
            const e = this._navigator ? n.last(this._navigator.getCurrentRoutes()) : void 0
              , t = this._routeIdKey(e);
            n.each(this._mountedRefsMap.allRefs(), (e,i)=>{
                e.ref && e.ref.setVisible && e.ref.setVisible(!this.props.isWholeStackInvisible && i === t)
            }
            )
        }
        render() {
            const e = this._themeStyles.primaryBackgroundColorStyle;
            return o.createElement(s.default, {
                renderScene: this._renderScene,
                navigateBackCompleted: this._navigateBackCompleted,
                transitionStarted: this._transitionStarted,
                transitionCompleted: this._transitionCompleted,
                ref: this._onNavigatorRef,
                cardStyle: e,
                delegateSelector: s.NavigatorDelegateSelector
            })
        }
        _registerPendingNavigationAnimation() {
            this._clearPendingNavigationAnimation(!1),
            this._pendingAnimationHandle = u.createPendingAnimation(),
            a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: _registerPendingNavigationAnimation " + this._pendingAnimationHandle),
            this._pendingAnimationTimeout = p.setTimeout(()=>{
                this._clearPendingNavigationAnimation(!0)
            }
            , 1e3)
        }
        _clearPendingNavigationAnimation(e) {
            if (this._pendingAnimationTimeout && (p.clearTimeout(this._pendingAnimationTimeout),
            this._pendingAnimationTimeout = void 0),
            this._pendingAnimationHandle) {
                a.log(r.LogTraceArea.Navigation, "RootStackNavigationView: _clearPendingNavigationAnimation " + this._pendingAnimationHandle + " timed out: " + e);
                const t = this._pendingAnimationHandle;
                this._pendingAnimationHandle = void 0,
                u.clearPendingAnimation(t)
            }
        }
        _navContextForNavigatorRoute(e) {
            if (e)
                return this._navContextForNavigatorRouteId(e.routeId)
        }
        _navContextForNavigatorRouteId(e) {
            let t = n.find(this.props.navContextStack, t=>t.id === e);
            return t || (t = n.find(this._prevNavContextStack, t=>t.id === e)),
            t
        }
        _routeIdKey(e) {
            return "routeId" + (e ? e.routeId : n.uniqueId())
        }
        _createNavigatorRouteStack(e) {
            return n.map(e, (t,i)=>{
                const n = i > 0 ? e[i - 1] : void 0;
                return this._createNavigatorRoute(t, n)
            }
            )
        }
        _createNavigatorRoute(e, t) {
            const i = this._navigatorSceneConfigTypeForNavContext(e, t);
            return {
                routeId: e.id,
                sceneConfigType: i.direction,
                gestureResponseDistance: i.gestureResponseDistance,
                customSceneConfig: i.customSceneConfig
            }
        }
    }
    t.BaseStackNavigationView = S,
    t.default = S
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(61)
      , s = i(80)
      , r = i(12);
    class a extends r.default {
        render() {
            const e = o.UICapabilities.inlineTextFormattingSupported();
            return n.createElement(s.HiddenText, {
                style: this.props.style
            }, e ? "|" : " | ")
        }
    }
    t.default = a
}
, , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(51)
      , s = i(10)
      , r = i(5)
      , a = i(3276)
      , l = i(3277)
      , c = i(3278)
      , d = i(3279)
      , u = i(3280)
      , g = i(3281)
      , h = i(14)
      , p = i(15)
      , m = r.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            flexDirection: "row"
        }),
        leftSidebar: ()=>n.Styles.createViewStyle({
            width: s.SideBarWidths.max,
            borderRightWidth: 1
        }),
        innerScroll: ()=>n.Styles.createScrollViewStyle({
            paddingHorizontal: 10,
            paddingVertical: 5
        }),
        contentContainer: ()=>n.Styles.createViewStyle({
            paddingVertical: 20,
            alignItems: "stretch"
        })
    });
    class S extends o.default {
        constructor() {
            super(...arguments),
            this._onScrollViewRed = e=>{
                this._scrollView = e || void 0
            }
            ,
            this._onBackButtonPress = e=>{
                this._goBack("sxplayground")
            }
            ,
            this._onMenuItemPress = e=>{
                this._scrollView && this._scrollView.setScrollTop(0),
                this.setState({
                    currentMenuItem: e
                })
            }
        }
        render() {
            const e = [m.container, this._themeStyles.primaryBackgroundColorStyle, h.absoluteFill]
              , t = [m.leftSidebar, this._themeStyles.dividerBorderColorStyle];
            return n.createElement(n.View, {
                style: e
            }, n.createElement(n.View, {
                style: t
            }, n.createElement(u.default, {
                onBackButtonPress: this._onBackButtonPress,
                onMenuItemPress: this._onMenuItemPress
            })), n.createElement(n.ScrollView, {
                ref: this._onScrollViewRed,
                style: h.flexOne
            }, n.createElement(n.View, {
                style: m.innerScroll
            }, n.createElement(p.Header, {
                size: 1
            }, u.SXPlaygroundMenuItems[this.state.currentMenuItem]), n.createElement(n.View, {
                style: m.contentContainer
            }, this._renderContent()))))
        }
        _renderContent() {
            switch (this.state.currentMenuItem) {
            case u.SXPlaygroundMenuItems.Buttons:
                return n.createElement(l.default, null);
            case u.SXPlaygroundMenuItems.Animations:
                return n.createElement(a.default, null);
            case u.SXPlaygroundMenuItems.Icons:
                return n.createElement(d.default, null);
            case u.SXPlaygroundMenuItems.Colors:
                return n.createElement(c.default, null);
            case u.SXPlaygroundMenuItems.Text:
                return n.createElement(g.default, null);
            default:
                return
            }
        }
    }
    t.default = S
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(56)
      , o = i(106)
      , s = i(129);
    var r, a;
    !function(e) {
        e[e.UserClosed = 0] = "UserClosed",
        e[e.UserOpenedApp = 1] = "UserOpenedApp",
        e[e.RestrictedVideoOpenedInApp = 2] = "RestrictedVideoOpenedInApp",
        e[e.PipDestroyed = 3] = "PipDestroyed"
    }(r = t.FinishReason || (t.FinishReason = {})),
    function(e) {
        e[e.ContentChanged = 0] = "ContentChanged",
        e[e.ContentFailedToLoad = 1] = "ContentFailedToLoad",
        e[e.PlaybackStateChanged = 2] = "PlaybackStateChanged",
        e[e.ViewModeChanged = 3] = "ViewModeChanged"
    }(a || (a = {}));
    t.default = class {
        constructor(e) {
            this._scenario = new s.default(o.ScenarioName.MessagePanelPip),
            this._scenario.setDuplicateStepMarkingEnabled(!0),
            this._scenario.start(this._getBaseTelemetryData(e))
        }
        markViewModeChanged(e, t) {
            const i = this._getBaseTelemetryData(e);
            i.IsLandscape = t.isLandscape,
            i.WasLandscape = t.wasLandscape,
            i.IsFullscreen = t.isFullScreen,
            i.WasFullscreen = t.wasFullScreen,
            this._markStep(a.ViewModeChanged, i)
        }
        markContentChanged(e) {
            this._markStep(a.ContentChanged, this._getBaseTelemetryData(e))
        }
        markContentFailedToLoad(e) {
            this._markStep(a.ContentFailedToLoad, this._getBaseTelemetryData(e))
        }
        markPlaybackStateChanged(e, t) {
            const i = this._getBaseTelemetryData(e);
            i.NewState = t.newState,
            i.OldState = t.oldState,
            this._markStep(a.PlaybackStateChanged, i)
        }
        finish(e, t) {
            const i = this._getBaseTelemetryData(e);
            i.FinishReason = r[t],
            this._scenario.finish(i)
        }
        isFinished() {
            return this._scenario.isResolved()
        }
        _markStep(e, t) {
            this._scenario.markStepCompleted(a[e], t)
        }
        _getBaseTelemetryData(e) {
            const t = {
                ContentType: n.PipContentType[e.contentType]
            };
            if (e.contentType === n.PipContentType.Youtube) {
                const i = e;
                t.HasPreviewImage = !!i.videoPreviewUrl
            }
            return t
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1424);
    class o extends n.default {
        constructor(e, t, i, n, o) {
            super(e, t, i, n, o)
        }
        failed(e, t) {
            this._failed(e, t)
        }
        retry(e, t) {
            this._retry(e, t)
        }
        succeeded() {
            this._succeeded()
        }
    }
    t.default = o
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(72)
      , o = i(7)
      , s = i(6)
      , r = i(210)
      , a = i(3)
      , l = i(236)
      , c = i(1879)
      , d = i(120)
      , u = i(486)
      , g = i(18)
      , h = i(9);
    class p extends d.SkypeRestClient {
        constructor() {
            super(s.default.getConfigSettingsNoSubscription().rps.host),
            this._customErrorHandler = (e,t)=>{
                const i = t.requestOptions
                  , o = {
                    statusCode: t.statusCode,
                    statusText: t.statusText || "",
                    date: t.headers.date || ""
                };
                return 400 === t.statusCode || 401 === t.statusCode || 403 === t.statusCode ? (i.authTelemetry.failed("Request Failed", o),
                n.ErrorHandlingType.DoNotRetry) : (i.authTelemetry.retry("Request Failed, will retry", o),
                n.ErrorHandlingType.RetryCountedWithBackoff)
            }
            ,
            this._defaultOptions.customErrorHandler = this._customErrorHandler,
            this._defaultOptions.priority = n.WebRequestPriority.Critical,
            this._defaultOptions.timeout = 3e5,
            this._defaultOptions.retries = 5
        }
        _getHeaders(e) {
            let t = super._getHeaders(e);
            return t["X-Skype-Caller"] = g.getClientId(),
            t["X-Skype-Request-Id"] = h.newGuid(),
            t
        }
        getSkypeAuthInfoFromRPSAccessToken(e) {
            let t = {
                scopes: "client",
                clientVersion: g.getUIVersion(),
                access_token: e,
                site_name: "lw"
            };
            const i = {
                retries: 5,
                timeout: 3e5,
                priority: n.WebRequestPriority.Critical,
                authTelemetry: new c.default("RpsClient",l.ScenarioName.LoginAuth,{
                    scenario: "skypeAuth",
                    service: "RpsClient"
                })
            };
            return i.authTelemetry.begin(),
            this.performApiPostDetailed("rps/v1/rps/skypetoken", t, i).then(e=>{
                const t = e.body;
                if (!t) {
                    a.track(new r.FundamentalsDebugEmptyBodyEvent("RPS","getSkypeAuthInfoFromRPSAccessToken",e.requestHeaders["X-Skype-Request-Id"],e.statusCode,e.statusText,void 0));
                    const t = {
                        statusCode: e.statusCode || "",
                        statusText: e.statusText || ""
                    };
                    return i.authTelemetry.failed("Undefined response", t),
                    o.Rejected(e)
                }
                return i.authTelemetry.succeeded(),
                {
                    skypeId: t.skypeid,
                    skypeToken: new u(t.skypetoken,Date.now() + 1e3 * t.expiresIn),
                    signinName: t.signinname,
                    anid: t.anid
                }
            }
            )
        }
    }
    t.default = new p
}
, , , , , , , , , function(e, t, i) {
    "use strict";
    (function(e) {
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        const n = i(1)
          , o = i(1890)
          , s = i(104)
          , r = (i(293),
        i(0),
        i(13))
          , a = i(72)
          , l = i(7)
          , c = i(273)
          , d = i(2112)
          , u = i(3)
          , g = i(19)
          , h = i(29);
        t.setupEnvironment = function(e) {
            h.initialize(),
            r.Options.development = !1,
            r.Options.preventTryCatchInRender = !0,
            l.config.catchExceptions = !1,
            l.config.exceptionHandler = e=>{
                if (e)
                    throw u.error(s.LogTraceArea.ExceptionHandling, g.errorAsString(e)),
                    e
            }
            ,
            l.config.unhandledErrorHandler = e=>{
                u.warn(s.LogTraceArea.ExceptionHandling, "Unhandled rejected SyncTask. Error: ", g.errorAsString(e))
            }
            ,
            h.debugLog = u.debug;
            const t = new d.ExceptionReporter;
            t.registerAlertView(e),
            t.registerConsoleView(),
            t.setPrimaryHandler(o.default.handleException),
            r.Options.setTimeout = n.bind(h.setTimeout, h),
            r.Options.clearTimeout = n.bind(h.clearTimeout, h),
            r.Options.shouldComponentUpdateComparator = n.bind(c.default.comparator, c.default),
            a.SimpleWebRequestOptions.MaxSimultaneousRequests = 5,
            a.SimpleWebRequestOptions.setTimeout = n.bind(h.setTimeout, h),
            a.SimpleWebRequestOptions.clearTimeout = n.bind(h.clearTimeout, h)
        }
    }
    ).call(this, i(196))
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1);
    t.default = class {
        constructor(e) {
            this._namedMapping = {},
            e && n.each(e, e=>{
                n.each(e, (e,t)=>{
                    this._namedMapping[t] ? this._namedMapping[t] = [this._namedMapping[t], e].join(",") : this._namedMapping[t] = e
                }
                )
            }
            )
        }
        getExperimentIdsForEventName(e) {
            return [this._namedMapping[e], this._namedMapping._all_].filter(e=>void 0 !== e && "" !== e).join(",")
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._event = e
        }
        getEventName() {
            return this._event.name
        }
        getAttributes() {
            let e = super.getAttributes();
            for (let t in this._event.actions)
                if (this._event.actions.hasOwnProperty(t)) {
                    let i = this._event.actions[t];
                    e[t] = i
                }
            return e
        }
    }
    t.NativeTelemetryEvent = o
}
, , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(104)
      , o = i(3)
      , s = i(19);
    t.ExceptionReporter = class {
        constructor() {
            this._handlers = [],
            window.onerror = (e,t,i,r,...a)=>{
                let l = ""
                  , c = "";
                a && a[0] && (l = a[0].stack || l,
                c = a[0].name || c);
                const d = {
                    errorMessage: e.toString(),
                    source: t,
                    fileNumber: i,
                    columnNumber: r,
                    errorName: c,
                    stackTrace: l
                };
                let u = !1;
                if (this._handlers.forEach(e=>{
                    try {
                        null !== e && e(d)
                    } catch (e) {
                        o.error(n.LogTraceArea.ExceptionHandling, "Error handling Exception: " + s.errorAsString(e))
                    }
                }
                ),
                null !== this._primaryHandler)
                    try {
                        this._primaryHandler(d),
                        u = !0
                    } catch (e) {
                        o.error(n.LogTraceArea.ExceptionHandling, "Error handling Exception: " + s.errorAsString(e))
                    }
                return u
            }
        }
        _wrapGlobalHandler(e, t) {
            let i = "";
            e.stack && (i = e.stack || i);
            const r = {
                errorMessage: e.message,
                source: "",
                fileNumber: -1,
                columnNumber: -1,
                errorName: e.name,
                stackTrace: i
            };
            this._handlers.forEach(e=>{
                try {
                    null !== e && e(r)
                } catch (e) {
                    o.error(n.LogTraceArea.ExceptionHandling, "Error handling Exception: " + s.errorAsString(e))
                }
            }
            ),
            null !== this._primaryHandler && this._primaryHandler(r).then(()=>{
                void 0
            }
            ).catch(e=>{
                o.error(n.LogTraceArea.ExceptionHandling, "Error handling Exception: " + s.errorAsString(e))
            }
            )
        }
        setPrimaryHandler(e) {
            null !== e && (this._primaryHandler = e)
        }
        registerAlertView(e) {
            this._handlers.push(t=>{
                e() && window.alert("DEBUG ALERT: Uncaught Exception\n" + t.errorMessage + "\n" + t.source + " (" + t.fileNumber + "," + t.columnNumber + ")")
            }
            )
        }
        registerConsoleView() {
            this._handlers.push(e=>{
                o.error(n.LogTraceArea.ExceptionHandling, "DEBUG ALERT: Uncaught Exception\n" + e.errorMessage + "\n" + e.source + " (" + e.fileNumber + "," + e.columnNumber + ")\nStack:\n" + e.stackTrace)
            }
            )
        }
        unregister() {
            this._handlers = []
        }
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1363)
      , s = i(7)
      , r = i(6);
    class a extends o.SimpleTransactionStoreHelper {
        getMultiple(e) {
            return n.isArray(e) && e.length > 999 ? this._sharded(e, e=>super.getMultiple(e)).then(e=>n.flatten(e)) : super.getMultiple(e)
        }
        put(e) {
            return n.isArray(e) && e.length > 999 ? this._sharded(e, e=>super.put(e)).then(n.noop) : super.put(e)
        }
        remove(e) {
            return n.isArray(e) && e.length > 999 ? this._sharded(e, e=>super.remove(e)).then(n.noop) : super.remove(e)
        }
        _sharded(e, t) {
            const i = n.chunk(e, 999)
              , o = n.map(i, e=>t(e));
            return s.all(o)
        }
    }
    t.getStore = function(e, t) {
        return r.default.getConfigSettingsNoSubscription().database.splitLargeTransactions ? new a(e,t) : new o.SimpleTransactionStoreHelper(e,t)
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(952)
      , s = i(422)
      , r = i(6)
      , a = i(139)
      , l = i(78)
      , c = i(46)
      , d = i(71)
      , u = i(2)
      , g = i(3)
      , h = i(32)
      , p = i(20)
      , m = i(647)
      , S = i(773)
      , C = i(140)
      , y = i(25);
    t.calcAlertsForUpdatedMessage = function(e, t, i) {
        if (g.log(u.LogTraceArea.AlertsHelpers, "Start calculating alerts for updated message: " + t.cuid),
        c.getMessageTypeGroup(t) === c.MessageTypeGroups.None || e.isMuted())
            return void g.log(u.LogTraceArea.AlertsHelpers, "No alerts displayed because chat is muted or message has None type group");
        const f = d.add(Date.now(), 0, -s.AlertsConstants.DaysOfAlertsToDisplay)
          , _ = t.getMessageNotificationClass();
        if (_ === y.MessageNotificationClass.SystemInformational && t.createdTime >= f)
            return;
        const b = n.filter(i.getAllItems(), e=>!!e.message && t.cuid === e.message.cuid && t.conversationId === e.message.conversationId);
        n.each(b, e=>{
            i.deleteItem(e),
            g.log(u.LogTraceArea.AlertsHelpers, "Removed existing alert for the same item")
        }
        );
        const v = t.getLastReactionTimeExcludingCurrentUser() || t.createdTime;
        if (!t.isDeletedMessage() && v >= f) {
            if (_ === y.MessageNotificationClass.MentionedOrQuoted) {
                const n = e.getConsumptionHorizonTimestamp()
                  , r = o.default.fromScratch(s.AlertType.HighPriorityMessage, t.createdTime, t.createdTime <= n, t);
                i.addItem(r),
                g.log(u.LogTraceArea.AlertsHelpers, "Mention or quote notification added")
            }
            if (r.default.getConfigSettings().chat.notifyLikes) {
                const d = function(e, t) {
                    const i = t.isHighlightsThread();
                    if (i)
                        return;
                    const d = n.filter(e.getEmotionAnnotations(), e=>e.key !== c.MessageAnnotations.ViewCount && e.key !== c.MessageAnnotations.ReactionsConsumptionHorizon);
                    if (d && d.length > 0) {
                        g.log(u.LogTraceArea.AlertsHelpers, "Emoticon annotations length " + d.length);
                        const h = l.chain(d, l.map(e=>e.users), l.flatten());
                        return p.isMyMri(e.creator) ? function(e, t, i) {
                            let r;
                            const l = n.filter(i, e=>!p.isMyMri(e.mri));
                            if (0 === l.length)
                                return;
                            const d = n.map(l, e=>e.time)
                              , u = n.max(d)
                              , g = e.getReactionsReadTimeForCurrentUser() || 0;
                            r = o.default.fromScratch(s.AlertType.Reaction, u, u <= g, e);
                            const h = t.isOneOnOne() ? t.getOtherPartyMri() : e.conversationId;
                            if (!h)
                                return;
                            if (n.some(l, e=>e.mri === h) && a.default.isMriBlocked(h))
                                return;
                            if (c.isPollType(e.messagetype) || c.isScheduledCallType(e.messagetype))
                                return;
                            return r
                        }(e, t, h) : function(e, t, i) {
                            const a = r.default.getS4LMessagingFeatures().notifyForAdditionalReactions;
                            if (!i && !c.isPollType(e.messagetype)) {
                                const i = n.map(t, e=>e.mri)
                                  , r = n.find(p.getMyMris(), e=>n.includes(i, e));
                                if (r) {
                                    const i = l.chain(t, l.filter(e=>e.mri === r), l.map(e=>e.time))
                                      , c = n.min(i) || 1 / 0
                                      , d = e.getReactionsReadTimeForCurrentUser() || 0
                                      , u = n.filter(t, e=>e.mri !== r)
                                      , g = n.max(n.map(u, e=>e.time)) || -1 / 0;
                                    return g > c && a ? o.default.fromScratch(s.AlertType.AdditionalReaction, g, g <= d, e) : void 0
                                }
                            }
                            return
                        }(e, h, i)
                    }
                    return
                }(t, e);
                d && (i.addItem(d),
                g.log(u.LogTraceArea.AlertsHelpers, "Reaction notification added"))
            }
            if (!a.default.isMriBlocked(t.conversationId)) {
                const e = function(e) {
                    if (!c.isScheduledCallType(e.messagetype))
                        return [];
                    const t = S.default.extractScheduledCallFromMessage(e);
                    if (!t)
                        return [];
                    if (!h.default.getUserPreferencesLocal().enableScheduledCallNotifications)
                        return [];
                    const i = []
                      , r = e.getScheduledCallReadTimeForCurrentUser();
                    p.isMyMri(e.creator) ? n.each(t.invitations, (n,a)=>{
                        if (n.invitationStatus && n.invitationStatus !== C.ScheduledCallInvitationStatus.Unknown) {
                            const l = n.updatedTimeMs || Date.now()
                              , c = {
                                type: n.invitationStatus === C.ScheduledCallInvitationStatus.Accepted ? m.ScheduleCallAlertTypes.InvitationAccepted : m.ScheduleCallAlertTypes.InvitationDeclined,
                                initiator: a,
                                subject: t.subject
                            };
                            i.push(o.default.fromScratch(s.AlertType.ScheduledCall, l, l <= r, e, {
                                scheduledCallInfo: c
                            })),
                            g.log(u.LogTraceArea.AlertsHelpers, "Scheduled call invitation notification added")
                        }
                    }
                    ) : (i.push(o.default.fromScratch(s.AlertType.ScheduledCall, e.createdTime, e.createdTime <= r, e, {
                        scheduledCallInfo: {
                            type: m.ScheduleCallAlertTypes.Received,
                            initiator: t.organizer,
                            subject: t.subject
                        }
                    })),
                    g.log(u.LogTraceArea.AlertsHelpers, "Scheduled call invitation received notification added"),
                    t.editedTimeMs && (i.push(o.default.fromScratch(s.AlertType.ScheduledCall, t.editedTimeMs, t.editedTimeMs <= r, e, {
                        scheduledCallInfo: {
                            type: m.ScheduleCallAlertTypes.Edited,
                            initiator: t.organizer,
                            subject: t.subject
                        }
                    })),
                    g.log(u.LogTraceArea.AlertsHelpers, "Scheduled call invitation edited notification added")),
                    t.canceledTimeMs && (i.push(o.default.fromScratch(s.AlertType.ScheduledCall, t.canceledTimeMs, t.canceledTimeMs <= r, e, {
                        scheduledCallInfo: {
                            type: m.ScheduleCallAlertTypes.Canceled,
                            initiator: t.organizer,
                            subject: t.subject
                        }
                    })),
                    g.log(u.LogTraceArea.AlertsHelpers, "Scheduled call invitation canceled notification added")));
                    return i
                }(t);
                n.some(e) && (n.each(e, e=>{
                    i.addItem(e)
                }
                ),
                g.log(u.LogTraceArea.AlertsHelpers, "Scheduled call notifications added"))
            }
        } else
            g.log(u.LogTraceArea.AlertsHelpers, "Updated message is too old or removed");
        g.log(u.LogTraceArea.AlertsHelpers, "Finish calculating alerts for updated message: " + t.cuid)
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    var o;
    !function(e) {
        e[e.Memory = 0] = "Memory",
        e[e.Database = 1] = "Database"
    }(o = t.LoadedFrom || (t.LoadedFrom = {}));
    class s extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._loadedFrom = e
        }
        getEventName() {
            return "messaging_recents_list"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = "LoadedMoreConversations",
            e.LoadedFrom = o[this._loadedFrom],
            e
        }
    }
    t.LoadedMoreConversationsInRecentList = s
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(635)
      , r = i(52)
      , a = i(7)
      , l = i(48)
      , c = i(2)
      , d = i(101)
      , u = i(3)
      , g = i(19)
      , h = i(29);
    t.debug_existingCacheFolderInfo = {
        count: 0
    };
    t.default = class {
        constructor(e, i=[]) {
            this.cacheUpdated = new r.default,
            this._infos = {},
            this._totalSize = 0,
            this.CacheName = e,
            this.BaseUri = s.default.getLocalUriBase(e),
            t.debug_existingCacheFolderInfo.count++,
            s.default.isLocalCacheSupported() && o.each(i, e=>{
                const t = h.setExpiration(this._timerExpiredCallback(e), e.expiration);
                this._infos[e.id] = {
                    pending: !1,
                    addedPromise: a.Resolved(),
                    meta: e,
                    timer: t
                },
                this._totalSize += e.size || 0
            }
            )
        }
        static isLocalCacheSupported() {
            return s.default.isLocalCacheSupported()
        }
        getAllMeta() {
            return o.map(this._infos, e=>e.meta)
        }
        getTotalSize() {
            return this._totalSize
        }
        getMeta(e) {
            return this._infos[e] && this._infos[e].meta
        }
        getUri(e) {
            const t = this._infos[e];
            if (t && !t.pending)
                return s.default.getLocalUri(this.CacheName, this._infos[e].meta.filename)
        }
        addFile(e, t, i, n, o, s) {
            return this._add(e, t, i, n, o, s, !0)
        }
        addMetadata(e, t, i, n, o) {
            return this._add(e, t, i, n, !1, o, !1)
        }
        _add(e, t, i, n, o, r, c) {
            if (this._infos[e]) {
                const t = 'FileCacheMetadataService already knows a file with that id: refusing to "' + (c ? o ? "copy" : "move" : "add") + '", cacheName: ' + this.CacheName + ", id: " + e;
                return a.Rejected(t)
            }
            const d = {
                id: e,
                cacheName: this.CacheName,
                filename: i,
                expiration: n,
                context: r
            }
              , u = a.Resolved().then(()=>this._blockFolderChangesPromise).then(()=>l.default.putFileCacheMetadata(d).then(()=>{
                if (c)
                    return s.default.save(this.CacheName, t, i, o).then(e=>(d.size = e.size,
                    this._totalSize += d.size || 0,
                    l.default.putFileCacheMetadata(d)))
            }
            ))
              , g = h.setExpiration(this._timerExpiredCallback(d), d.expiration)
              , p = {
                pending: !0,
                meta: d,
                addedPromise: u,
                timer: g
            };
            return this._infos[d.id] = p,
            u.then(()=>{
                p.pending = !1,
                this.cacheUpdated.fire(e)
            }
            )
        }
        removeFile(e) {
            return this._remove(e, !0)
        }
        removeMetadata(e) {
            return this._remove(e, !1)
        }
        _remove(e, t) {
            const i = this._infos[e];
            return i ? (i.timer && (h.clearExpiration(i.timer),
            i.timer = void 0),
            i.removedPromise || (i.removedPromise = i.addedPromise.always(()=>this._blockFolderChangesPromise).then(()=>l.default.removeFileCacheMetadata(this.CacheName, e).then(()=>{
                if (delete this._infos[e],
                this._totalSize -= i.meta.size || 0,
                t)
                    return this._cacheRemove(this.CacheName, i.meta.filename)
            }
            ))),
            i.removedPromise.finally(()=>this.cacheUpdated.fire(e))) : a.Resolved()
        }
        _cacheRemove(e, t) {
            const i = [s.default.remove(e, t)];
            return d.isImageExtension(d.extractFileExtension(t)) && i.push(s.default.evictFromImageCache(e, t).catch(o.noop)),
            a.all(i).then(o.noop)
        }
        updateExpiration(e, t) {
            const i = this._infos[e];
            return i ? i.addedPromise.then(()=>{
                if (!i.removedPromise && i.meta.expiration !== t)
                    return i.timer && (h.clearExpiration(i.timer),
                    i.timer = void 0),
                    i.meta.expiration = t,
                    i.timer = h.setExpiration(this._timerExpiredCallback(i.meta), t),
                    l.default.putFileCacheMetadata(i.meta)
            }
            ).done(()=>this.cacheUpdated.fire(e)).catch(o.noop) : a.Resolved()
        }
        cleanupMissingFilesAndMetadata() {
            if (this._blockFolderChangesPromise)
                return this._blockFolderChangesPromise;
            const e = o.flatMap(this._infos, e=>[e.addedPromise, e.removedPromise])
              , t = o.map(e, e=>e && e.catch(o.noop));
            return this._blockFolderChangesPromise = a.all(t).then(()=>s.default.getAllCachedFileNames(this.CacheName)).then(e=>{
                const t = o.keyBy(e)
                  , i = o.keyBy(this._infos, e=>e.meta.filename);
                o.each(e, e=>{
                    i[e] || this._cacheRemove(this.CacheName, e).catch(t=>{
                        u.log(c.LogTraceArea.FileCacheMetadataService, "Ignoring FileCache error during cleanup: cacheName: " + n.pii.Omit(this.CacheName) + ", filename: " + n.pii.Omit(e) + ", error: " + g.errorAsString(t))
                    }
                    )
                }
                ),
                o.each(i, (e,i)=>{
                    e.pending || t[i] || this.removeFile(e.meta.id).catch(t=>{
                        u.log(c.LogTraceArea.FileCacheMetadataService, "Ignoring error during cleanup: cacheName: " + n.pii.Omit(this.CacheName) + ", id: " + n.pii.Omit(e.meta.id) + ", error: " + g.errorAsString(t))
                    }
                    )
                }
                )
            }
            ).always(()=>{
                this._blockFolderChangesPromise = void 0
            }
            ),
            this._blockFolderChangesPromise
        }
        debug_removeAll() {
            const e = o.map(this._infos, e=>this.removeFile(e.meta.id).catch(t=>{
                u.log(c.LogTraceArea.FileCacheMetadataService, "Ignoring error during debug: cacheName: " + n.pii.Omit(this.CacheName) + ", id: " + n.pii.Omit(e.meta.id) + ": error: " + g.errorAsString(t))
            }
            ));
            return a.all(e).then(o.noop)
        }
        _timerExpiredCallback(e) {
            return ()=>{
                u.log(c.LogTraceArea.FileCacheMetadataService, "Removing expired file from cache: " + n.pii.Omit(this.CacheName) + ", id: " + n.pii.Omit(e.id)),
                this._remove(e.id, !0)
            }
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e, t, i, n, o) {
            super(o),
            this._scenarioName = e,
            this._scenarioId = t,
            this._actionAttributes = i,
            this._shouldSendScenarioTelemetry = n
        }
        shouldSend() {
            return this._shouldSendScenarioTelemetry()
        }
        getEventName() {
            return "scenario"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ScenarioName = this._scenarioName,
            e.ScenarioId = this._scenarioId,
            n.each(this._actionAttributes, (t,i)=>{
                e["ScenarioAction_" + i] = t
            }
            ),
            e
        }
    }
    t.default = s
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(13)
      , o = i(6)
      , s = i(20);
    class r extends n.StoreBase {
        constructor() {
            super(),
            this.key = "guest",
            this.flags = ()=>({
                entitlements: {
                    canHaveEntitlements: !this._isGuestUser
                },
                userSettings: {
                    canChangeAppearance: !this._isGuestUser
                },
                navigation: {
                    canAccessProfileSettings: !this._isGuestUser,
                    canAccessGeneralSettings: !this._isGuestUser,
                    canAccessCallingSettings: !this._isGuestUser,
                    canAccessMessagingSettings: !this._isGuestUser,
                    canAccessConversationDetails: !this._isGuestUser,
                    canAccessRecentsList: !this._isGuestUser,
                    canAccessUserDetails: !this._isGuestUser,
                    canAccessPaymentsSettings: !this._isGuestUser
                },
                addins: {
                    canSetupNativeReminders: void 0,
                    canSetupInAppReminders: void 0,
                    canUseAddins: !this._isGuestUser
                },
                onboarding: {
                    canSeeCoachMarks: !this._isGuestUser,
                    canSeeTutorial: !this._isGuestUser
                },
                identity: {
                    canSeeGuestUpsell: this._isGuestUser,
                    canUseSlashCommands: !this._isGuestUser
                },
                contacts: {
                    canInvitePeople: !this._isGuestUser,
                    canHaveContacts: !this._isGuestUser
                },
                meetnow: {
                    canInvitePeople: !this._isGuestUser,
                    canRequestPermissionsBeforeNavigation: !this._isGuestUser,
                    canSetupLeftNavigation: !this._isGuestUser,
                    canNavigateBackFromJoinInvite: !this._isGuestUser,
                    canEditMeetingName: !this._isGuestUser,
                    isUserNameRequired: this._isGuestUser
                },
                call: {
                    canRefreshTokenBeforeRecordingCall: !this._isGuestUser,
                    canSendMessageToParticipant: !this._isGuestUser,
                    canProvideSpeechConsent: !this._isGuestUser
                }
            }),
            s.subscribe(()=>{
                const e = s.isGuestUser();
                this._isGuestUser !== e && (this._isGuestUser = e,
                this.trigger())
            }
            ),
            this._isGuestUser = s.isGuestUser()
        }
    }
    const a = new r;
    class l extends n.StoreBase {
        constructor() {
            super(),
            this.flags = ()=>({
                entitlements: {
                    canHaveEntitlements: void 0
                },
                userSettings: {
                    canChangeAppearance: void 0
                },
                navigation: {
                    canAccessProfileSettings: void 0,
                    canAccessGeneralSettings: void 0,
                    canAccessCallingSettings: void 0,
                    canAccessMessagingSettings: void 0,
                    canAccessConversationDetails: void 0,
                    canAccessRecentsList: void 0,
                    canAccessUserDetails: void 0,
                    canAccessPaymentsSettings: void 0
                },
                addins: {
                    canSetupNativeReminders: void 0,
                    canSetupInAppReminders: void 0,
                    canUseAddins: void 0
                },
                onboarding: {
                    canSeeCoachMarks: void 0,
                    canSeeTutorial: void 0
                },
                identity: {
                    canSeeGuestUpsell: void 0,
                    canUseSlashCommands: void 0
                },
                contacts: {
                    canInvitePeople: void 0,
                    canHaveContacts: void 0
                },
                meetnow: {
                    canInvitePeople: void 0,
                    canRequestPermissionsBeforeNavigation: void 0,
                    canSetupLeftNavigation: void 0,
                    canNavigateBackFromJoinInvite: void 0,
                    canEditMeetingName: void 0,
                    isUserNameRequired: void 0
                },
                call: {
                    canRefreshTokenBeforeRecordingCall: void 0,
                    canSendMessageToParticipant: void 0,
                    canProvideSpeechConsent: void 0
                }
            }),
            o.default.subscribe(()=>{
                this.trigger()
            }
            )
        }
    }
    const c = new l;
    const d = new class {
        constructor() {
            this.key = "platform",
            this.flags = ()=>({
                entitlements: {
                    canHaveEntitlements: void 0
                },
                userSettings: {
                    canChangeAppearance: void 0
                },
                navigation: {
                    canAccessProfileSettings: void 0,
                    canAccessGeneralSettings: void 0,
                    canAccessCallingSettings: void 0,
                    canAccessMessagingSettings: void 0,
                    canAccessConversationDetails: void 0,
                    canAccessRecentsList: void 0,
                    canAccessUserDetails: void 0,
                    canAccessPaymentsSettings: void 0
                },
                addins: {
                    canSetupNativeReminders: !1,
                    canSetupInAppReminders: !1,
                    canUseAddins: void 0
                },
                onboarding: {
                    canSeeCoachMarks: void 0,
                    canSeeTutorial: void 0
                },
                identity: {
                    canSeeGuestUpsell: void 0,
                    canUseSlashCommands: void 0
                },
                contacts: {
                    canInvitePeople: void 0,
                    canHaveContacts: void 0
                },
                meetnow: {
                    canInvitePeople: void 0,
                    canRequestPermissionsBeforeNavigation: void 0,
                    canSetupLeftNavigation: void 0,
                    canNavigateBackFromJoinInvite: void 0,
                    canEditMeetingName: void 0,
                    isUserNameRequired: void 0
                },
                call: {
                    canRefreshTokenBeforeRecordingCall: void 0,
                    canSendMessageToParticipant: void 0,
                    canProvideSpeechConsent: void 0
                }
            })
        }
    }
    ;
    t.providers = {
        ecsProvider: c,
        guestProvider: a,
        platformProvider: d
    },
    t.emptyProviderFlags = {
        entitlements: {
            canHaveEntitlements: void 0
        },
        userSettings: {
            canChangeAppearance: void 0
        },
        navigation: {
            canAccessProfileSettings: void 0,
            canAccessGeneralSettings: void 0,
            canAccessCallingSettings: void 0,
            canAccessMessagingSettings: void 0,
            canAccessConversationDetails: void 0,
            canAccessRecentsList: void 0,
            canAccessUserDetails: void 0,
            canAccessPaymentsSettings: void 0
        },
        addins: {
            canSetupNativeReminders: void 0,
            canSetupInAppReminders: void 0,
            canUseAddins: void 0
        },
        onboarding: {
            canSeeCoachMarks: void 0,
            canSeeTutorial: void 0
        },
        identity: {
            canSeeGuestUpsell: void 0,
            canUseSlashCommands: void 0
        },
        contacts: {
            canInvitePeople: void 0,
            canHaveContacts: void 0
        },
        meetnow: {
            canInvitePeople: void 0,
            canRequestPermissionsBeforeNavigation: void 0,
            canSetupLeftNavigation: void 0,
            canNavigateBackFromJoinInvite: void 0,
            canEditMeetingName: void 0,
            isUserNameRequired: void 0
        },
        call: {
            canRefreshTokenBeforeRecordingCall: void 0,
            canSendMessageToParticipant: void 0,
            canProvideSpeechConsent: void 0
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        getEventName() {
            return "all_notification_registration"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Action: this.getActionName()
            })
        }
    }
    t.GotToken = class extends s {
        getActionName() {
            return "GotToken"
        }
    }
    ;
    t.GaveUpOnFetchingToken = class extends s {
        getActionName() {
            return "GaveUpOnFetchingToken"
        }
    }
    ;
    t.NonFatalErrorFetchingToken = class extends s {
        constructor(e, t, i) {
            super(),
            this._errorCode = e,
            this._errorMessage = t,
            this._networkConnectivityLevel = i
        }
        getActionName() {
            return "NonFatalErrorFetchingToken"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Code: this._errorCode,
                Message: this._errorMessage,
                NetworkConnectivityLevel: this._networkConnectivityLevel
            })
        }
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(36)
      , o = i(0)
      , s = i(7)
      , r = i(6)
      , a = i(10)
      , l = i(2)
      , c = i(3)
      , d = i(24)
      , u = (i(490),
    i(19));
    t.default = class {
        static shouldUseStackNavigationFromScreenSize() {
            if (d.default.isMobileScreenSize(a.MainRootViewId))
                return c.log(l.LogTraceArea.Navigation, "shouldUseStackNavigationFromScreenSize: Is mobile screen size, returning true"),
                s.Resolved(!0);
            let e;
            return e = void 0 === this._screenDpi ? n.default.screenDpi().then(e=>(this._screenDpi = e,
            e), e=>(c.warn(l.LogTraceArea.Navigation, "DeviceUtilities screenDpi failed: " + u.errorAsString(e)),
            0)) : s.Resolved(this._screenDpi),
            e.then(e=>{
                if (0 === e)
                    return c.log(l.LogTraceArea.Navigation, "shouldUseStackNavigationFromScreenSize: screenDpi is unknown, returning " + !0),
                    !0;
                const t = o.UserInterface.getPixelRatio()
                  , i = o.UserInterface.measureWindow()
                  , n = i.width * t / e
                  , s = i.height * t / e
                  , a = Math.sqrt(Math.pow(n, 2) + Math.pow(s, 2))
                  , d = r.default.getS4LUiFeaturesNoSubscription().androidTabletSizeThreshold
                  , u = a < d;
                return c.log(l.LogTraceArea.Navigation, "shouldUseStackNavigationFromScreenSize: screenSize: " + a + " threshold: " + d + " shouldUseStackNav: " + u),
                u
            }
            )
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    const n = i(7)
      , o = i(2412);
    i(71),
    i(29);
    e.exports = class {
        constructor() {
            this._combinedEventDescription = "",
            this._updateAppCenterTimerActive = !1,
            this._eventDate = Date.now()
        }
        initializeAndPause(e) {
            return n.Resolved()
        }
        startUsingUserId() {
            return n.Resolved()
        }
        respondsTo(e) {
            return !0
        }
        supportsEventSampling() {
            return !1
        }
        consumeEvent(e) {
            this._addAppCenterMetaData(e)
        }
        flush() {
            return this._writeToAppCenterMetadata(),
            n.Resolved()
        }
        pause() {}
        resume() {}
        _addAppCenterMetaData(e) {
            0
        }
        _writeToAppCenterMetadata() {
            "" !== this._combinedEventDescription && (o.default.addCrashMetaData({
                applicationTrace: this._combinedEventDescription
            }),
            this._combinedEventDescription = ""),
            this._updateAppCenterTimerActive = !1
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2413)
      , o = i(7)
      , s = (i(790),
    i(2))
      , r = (i(141),
    i(3))
      , a = i(21)
      , l = (i(19),
    i(18));
    t.default = new class {
        constructor() {
            this._running = !1,
            a.RegisterStartupable(this, "AppCenterService")
        }
        startup() {
            if (l.getAppCenterSecret()) {
                const e = !1;
                n.default.configure({
                    applicationSecret: l.getAppCenterSecret(),
                    attachLogsToCrash: !1,
                    detectAppNotTerminatingCleanly: !1,
                    crashAttachmentProviderConfig: {
                        allowUploadUnsanitizedLogs: e
                    }
                }),
                n.default.start(),
                this._running = !0
            } else
                r.error(s.LogTraceArea.AppCenter, "Skipping - no AppCenter secret provided");
            return this.checkForUpdates(),
            o.Resolved()
        }
        onSkypeId(e) {}
        checkForUpdates() {
            r.log(s.LogTraceArea.AppCenter, "Ignoring check for updates - PUBLIC build")
        }
        addCrashMetaData(e) {
            n.default.addCrashMetadata(e)
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    const n = i(2416)
      , o = i(149)
      , s = i(1)
      , r = i(104)
      , a = i(0)
      , l = i(7)
      , c = i(89)
      , d = i(6)
      , u = i(2419)
      , g = i(48)
      , h = i(2420)
      , p = i(210)
      , m = i(4)
      , S = i(20)
      , C = i(19)
      , y = i(18)
      , f = i(39)
      , _ = i(248)
      , b = i(1430)
      , v = i(29)
      , T = i(9);
    e.exports = class {
        constructor() {
            this._ariaLoggers = {},
            this._ready = !1,
            this._pendingEvents = [],
            this._wasInitializedAnonymously = !1,
            this._isAnonymous = void 0,
            this._anonymousEventQueue = [],
            this._dbPutEventQueue = [],
            this._deviceIdContext = {},
            this._userIdContext = {},
            this._sendPost = (e,t,i,n,o,s)=>{
                this._ariaRestClient.sendTelemetryEvents(e, t, i, n, o)
            }
            ,
            this.consumeEvent = e=>{
                if (!this._ready)
                    return void this._pendingEvents.push(e);
                if (this._isAnonymous && e.getLoggedOutSendingPolicy() === f.TelemetryEventLoggedOutPolicy.WaitForUserId)
                    return void this._pendingEvents.push(e);
                const t = this._ariaEventPropertiesForEvent(e);
                t && this._logAriaEvent(t, e.getAriaTenantTokenOverride())
            }
            ,
            this._delayedDbPut = e=>{
                if (b.default.handleEvents(e),
                this._wasInitializedAnonymously) {
                    e = s.clone(e);
                    const t = s.remove(e, e=>this._isAnonymousEvent(e));
                    this._anonymousEventQueue.push(...t)
                }
                if (0 === e.length)
                    return l.Resolved();
                let t = !1;
                !t && s.some(e, e=>"awt_stats" !== e.name && e.priority === o.AWTEventPriority.High) && (t = !0),
                this._dbPutEventQueue.push(...e),
                this._dbPutDeferral || (this._dbPutDeferral = l.Defer(),
                t || v.setTimeout(()=>{
                    this._writeToDb()
                }
                , 500));
                const i = this._dbPutDeferral;
                return t && this._writeToDb(),
                i.promise()
            }
            ,
            this._getTelemetryEvents = ()=>{
                if (!g.default.isInitialized())
                    return l.Resolved(this._anonymousEventQueue);
                const e = d.default.getS4LTelemetryFeaturesNoSubscription().ariaMaxEvents;
                return g.default.countTelemetryEvents().then(t=>{
                    const i = t - (e || t);
                    return g.default.getTelemetryEvents(e || void 0, i > 0 ? i : void 0).then(e=>{
                        r.log(r.LogTraceArea.GenericUnsafe, `Fetched ${e.length} events from DB`);
                        const i = d.default.getS4LTelemetryFeaturesNoSubscription().ariaEventsReportIfGreater;
                        if (i && e.length >= i) {
                            const i = s.first(e);
                            r.log(r.LogTraceArea.GenericUnsafe, `There's ${t} events in the DB!`),
                            this.consumeEvent(new p.AriaGetEventsLimitReached(t,i ? i.timestamp : 0))
                        }
                        let n = [];
                        return n.push(...this._anonymousEventQueue),
                        n.push(...e),
                        n
                    }
                    )
                }
                )
            }
            ,
            this._removeFromDb = e=>{
                const t = [];
                return s.each(e, e=>{
                    const i = s.remove(this._anonymousEventQueue, t=>t.id === e.id);
                    0 === s.remove(this._dbPutEventQueue, t=>t.id === e.id).length && 0 === i.length && t.push(e.id)
                }
                ),
                0 === t.length ? l.Resolved() : g.default.isInitialized() ? g.default.deleteTelemetryEvents(t) : l.Resolved()
            }
            ,
            this._ariaRestClient = new u.default
        }
        initializeAndPause(e) {
            const t = y.getAriaTenantToken()
              , i = {
                httpXHROverride: {
                    sendPOST: this._sendPost
                },
                canSendStatEvent: this._canSendStatEvent,
                clockSkewRefreshDurationInMins: d.default.getS4LTelemetryFeatures().clockSkewRefreshDurationInMins
            };
            o.AWTLogManager.initialize(t, i),
            o.AWTLogManager.setTransmitProfile(o.AWT_BEST_EFFORT),
            o.AWTLogManager.pauseTransmission();
            const s = {
                getEvents: this._getTelemetryEvents,
                putEvents: this._delayedDbPut,
                deleteEvents: this._removeFromDb
            };
            n.AWTCustomStorage.initialize(s);
            const r = o.AWTLogManager.getLogger(t);
            return this._ariaLoggers[t] = r,
            this._defaultAriaLogger = r,
            m.localeChangedEvent.subscribe(e=>{
                o.AWTLogManager.getSemanticContext().setAppLanguage(e)
            }
            ),
            c.default.subscribeForChanges("AriaSink", e=>{
                e === a.Types.AppActivationState.Background && this._writeToDb()
            }
            ),
            this._wasInitializedAnonymously = e,
            this._setAnonymousMode(e)
        }
        _canSendStatEvent(e) {
            const t = f.SampledEvents[e];
            return !s.isNumber(t) || T.sampleForPercentage(t)
        }
        startUsingUserId() {
            return this._setAnonymousMode(!1)
        }
        respondsTo(e) {
            return !0
        }
        supportsEventSampling() {
            return !0
        }
        _logAriaEvent(e, t) {
            if (t) {
                let i = this._ariaLoggers[t];
                i || (i = o.AWTLogManager.getLogger(t),
                this._ariaLoggers[t] = i),
                i.logEvent(e)
            } else
                this._defaultAriaLogger.logEvent(e)
        }
        _ariaEventPropertiesForEvent(e) {
            let t = !1;
            const i = new o.AWTEventProperties;
            if (i.setName(e.getEventName()),
            i.setEventPriority(e.getEventPriority()),
            t = t || this._addTelemetryAttributes(i, e.getAttributes()),
            t = t || this._addTelemetryAttributes(i, e.getCorrelationAttributes()),
            t = t || this._addTelemetryPiiAttributes(i, e.getPiiAttributes()),
            e.shouldExcludeDeviceIdentificationInfo() || (t = t || this._addTelemetryPiiAttributes(i, this._deviceIdContext)),
            e.shouldExcludeUserIdentificationInfo() || (t = t || this._addTelemetryPiiAttributes(i, this._userIdContext)),
            !t)
                return i;
            this.consumeEvent(new _.DevDebug("BrokenTelemetry","Event Name: " + e.getEventName() + ", Data: " + JSON.stringify(e)))
        }
        flush() {
            const e = l.Defer();
            return o.AWTLogManager.flush(()=>e.resolve(void 0)),
            e.promise()
        }
        pause() {
            o.AWTLogManager.pauseTransmission()
        }
        resume() {
            o.AWTLogManager.resumeTransmision()
        }
        _addTelemetryAttributes(e, t) {
            let i = !1;
            return s.each(t, (t,n)=>{
                const o = this._convertTelemetryValueToString(t);
                h.isSerializable(o) || (i = !0),
                e.setProperty(n, o)
            }
            ),
            i
        }
        _addTelemetryPiiAttributes(e, t) {
            let i = !1;
            return s.each(t, (t,n)=>{
                const o = this._convertTelemetryValueToString(t.value);
                h.isSerializable({
                    value: o,
                    piiKind: t.piiKind
                }) || (i = !0),
                e.setPropertyWithPii(n, o, t.piiKind)
            }
            ),
            i
        }
        _convertTelemetryValueToString(e) {
            return !0 === e ? "Y" : !1 === e ? "N" : s.isNumber(e) ? e.toString() : e
        }
        _isAnonymousEvent(e) {
            const t = e.properties["UserInfo.Id"];
            return !t || (s.isNumber(t) || s.isBoolean(t) || s.isString(t) ? !t : !t.value)
        }
        _writeToDb() {
            if (!this._dbPutDeferral)
                return;
            if (!g.default.isInitialized())
                return;
            const e = this._dbPutDeferral
              , t = this._dbPutEventQueue;
            this._dbPutDeferral = void 0,
            0 !== this._dbPutEventQueue.length ? (this._dbPutEventQueue = [],
            g.default.putTelemetryEvents(t).then(()=>{
                e.resolve(void 0)
            }
            , ()=>{
                e.reject()
            }
            )) : e.resolve(void 0)
        }
        _setContextData(e) {
            const t = o.AWTLogManager.getSemanticContext()
              , i = S.isGuestUser();
            return t.setAppVersion(y.getAppVersion()),
            t.setDeviceMake(y.getSystemManufacturer()),
            t.setDeviceModel(y.getSystemModel()),
            t.setAppLanguage(m.getLocale()),
            t.setUserLanguage(y.getSystemLocale()),
            t.setDeviceOsName(y.getPlatformTypeName()),
            t.setDeviceOsVersion(y.getOSVersion()),
            this._deviceIdContext["DeviceInfo.Id"] = {
                value: y.getDeviceId(),
                piiKind: o.AWTPiiKind.NotSet
            },
            this._userIdContext["UserInfo.Id"] = {
                value: e ? "" : S.getSkypeId(),
                piiKind: i ? o.AWTPiiKind.NotSet : o.AWTPiiKind.Identity
            },
            e || i ? (this._userIdContext.MSACID = {
                value: "",
                piiKind: o.AWTPiiKind.NotSet
            },
            this._userIdContext.MSACIDHEX = {
                value: "",
                piiKind: o.AWTPiiKind.NotSet
            },
            l.Resolved()) : l.all([S.getUserCidAsync().then(e=>{
                this._userIdContext.MSACID = {
                    value: e,
                    piiKind: o.AWTPiiKind.NotSet
                }
            }
            ), S.getUserCidHexAsync().then(e=>{
                this._userIdContext.MSACIDHEX = {
                    value: C.toUpper(e),
                    piiKind: o.AWTPiiKind.NotSet
                }
            }
            )]).then(s.noop)
        }
        _setAnonymousMode(e) {
            return this._setContextPromise ? this._setContextPromise.then(()=>{
                this._setAnonymousMode(e)
            }
            ) : e === this._isAnonymous ? l.Resolved() : (this._isAnonymous = e,
            this._ready = !1,
            this._setContextPromise = this._setContextData(this._isAnonymous).thenAsync(()=>{
                this._ready = !0,
                this._setContextPromise = void 0;
                const e = this._pendingEvents;
                this._pendingEvents = [],
                s.each(e, this.consumeEvent)
            }
            ),
            this._setContextPromise)
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(72);
    class s extends o.GenericRestClient {
        constructor() {
            super(""),
            this._defaultOptions.priority = o.WebRequestPriority.DontCare,
            this._defaultOptions.acceptType = "*/*",
            this._defaultOptions.contentType = "application/bond-compact-binary"
        }
        sendTelemetryEvents(e, t, i, o, s) {
            let r = {
                headers: {
                    "Client-Id": "NO_AUTH",
                    "SDK-Version": "AWT-Web-JS"
                }
            };
            return n.isString(t) && (r.headers["Content-Encoding"] = "base64"),
            r.excludeEndpointUrl = !0,
            this.performApiPostDetailed(e, t, r).then(e=>{
                s(e.statusCode, e.headers)
            }
            , e=>{
                !0 === e.timedOut ? i(e.statusCode, e.headers) : o(e.statusCode, e.headers)
            }
            )
        }
    }
    t.default = s
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    t.default = class {
        constructor() {
            this._conversations = new Set,
            this._messagesCount = 0
        }
        markFullSync(e) {
            this._isFullSync = e
        }
        markFirstSync() {
            this._isFirstSync = !0
        }
        accumulateData(e, t) {
            this._messagesCount += t,
            this._conversations.add(e)
        }
        getData() {
            return {
                isFirstSync: this._isFirstSync,
                isFullSync: this._isFullSync,
                conversationsCount: this._conversations.size,
                messagesCount: this._messagesCount
            }
        }
        reset() {
            this._conversations.clear(),
            this._messagesCount = 0,
            this._isFullSync = !1,
            this._isFirstSync = !1
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(129)
      , o = ["Fetched", "BundleProcessed"];
    class s extends n.default {
        constructor() {
            super(...arguments),
            this._syncScenarioFetchCount = 0
        }
        _markStep(e, ...t) {
            const i = o.some(t=>t === e);
            "Fetched" === e && this._syncScenarioFetchCount++,
            super._markStep(i ? `${e} - ${this._syncScenarioFetchCount}` : e, ...t)
        }
    }
    t.default = s
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43);
    class s extends o.default {
        _createContext() {
            const e = super._createContext();
            return e.rootViewId = this.props.rootViewId,
            e.rootViewType = this.props.rootViewType,
            e
        }
        render() {
            return n.createElement(n.View, {
                style: this.props.style
            }, this.props.children)
        }
    }
    t.ModalWrapper = s,
    t.default = s
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    var o;
    !function(e) {
        e[e.Registered = 0] = "Registered",
        e[e.Unregistered = 1] = "Unregistered",
        e[e.Invoked = 2] = "Invoked"
    }(o || (o = {}));
    class s extends n.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._action = e,
            this._hotkey = t,
            this._hotkeyAccelerator = i
        }
        getEventName() {
            return "all_global_hotkeys"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = o[this._action],
            e.Hotkey = this._hotkey,
            this._hotkeyAccelerator && (e.HotkeyAccelerator = this._hotkeyAccelerator),
            e
        }
    }
    t.GlobalHotkeyRegisteredEvent = class extends s {
        constructor(e, t, i) {
            super(o.Registered, t, i),
            this._wasRegistrationSuccessful = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.WasSuccessful = this._wasRegistrationSuccessful,
            e
        }
    }
    ;
    t.GlobalHotkeyUnregisteredEvent = class extends s {
        constructor(e, t, i) {
            super(o.Unregistered, t, i),
            this._wasUnregistrationSuccessful = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.WasSuccessful = this._wasUnregistrationSuccessful,
            e
        }
    }
    ;
    t.GlobalHotkeyInvokedEvent = class extends s {
        constructor(e, t) {
            super(o.Invoked, e, t)
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(10)
      , s = (i(2),
    i(3),
    i(12));
    class r extends s.default {
        constructor() {
            super(...arguments),
            this._onTextElementRef = e=>{
                this._textElement = e || void 0
            }
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount()
        }
        requestFocus() {
            this.isComponentMounted() && this._textElement && this._textElement.requestFocus && this._textElement.requestFocus()
        }
        blur() {
            this.isComponentMounted() && this._textElement && this._textElement.blur && this._textElement.blur()
        }
        render() {
            const e = this._textStyles();
            if (this.props.textThemeColor)
                switch (this.props.textThemeColor) {
                case o.TextThemeColor.Primary:
                    e.push(this._themeStyles.primaryTextColorStyle);
                    break;
                case o.TextThemeColor.Secondary:
                    e.push(this._themeStyles.secondaryTextColorStyle);
                    break;
                case o.TextThemeColor.Disabled:
                    e.push(this._themeStyles.disabledTextColorStyle);
                    break;
                case o.TextThemeColor.Destructive:
                    e.push(this._themeStyles.destructiveTextColorStyle)
                }
            this.props.style && e.push(this.props.style);
            const t = Object.assign(Object.assign({}, this.props), {
                style: e
            });
            return this.props.accessibilityHidden && (t.importantForAccessibility = n.Types.ImportantForAccessibility.NoHideDescendants),
            n.createElement(n.Text, Object.assign({}, t, {
                ref: this._onTextElementRef
            }))
        }
    }
    t.TextBase = r,
    t.default = r
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        constructor(e, t, i, n) {
            super(),
            this._serviceName = e,
            this._statusCode = t,
            this._scenario = i,
            this._tracingHeaders = n
        }
        getEventName() {
            return "ams_failure"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.service_name = this._serviceName,
            e.scenario = this._scenario,
            e.status_code = this._statusCode,
            e.request_id = this._tracingHeaders.requestId,
            e.correlation_id = this._tracingHeaders.correlationId,
            this._tracingHeaders.transactionId && (e.transaction_id = this._tracingHeaders.transactionId),
            e
        }
    }
    t.ASMClientFailure = o
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._eventName = e,
            this._attributes = t
        }
        shouldSend() {
            return !0
        }
        getEventName() {
            return this._eventName
        }
        getAttributes() {
            let e = super.getAttributes();
            return n.assign(e, this._attributes),
            e.Client = "SkypeConsumer",
            e
        }
    }
    t.EcsTelemetryEvent = s
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(568)
      , r = i(10)
      , a = i(5)
      , l = i(393)
      , c = i(9)
      , d = a.lazyProperties({
        extraSmall: ()=>n.Styles.createViewStyle({
            width: 20,
            height: 20
        }),
        small: ()=>n.Styles.createViewStyle({
            width: 40,
            height: 40
        }),
        medium: ()=>n.Styles.createViewStyle({
            width: 60,
            height: 60
        }),
        large: ()=>n.Styles.createViewStyle({
            width: 80,
            height: 80
        })
    });
    class u extends o.ComponentBase {
        render() {
            let e, t;
            switch (this.props.size) {
            case r.SXActivityIndicatorSize.ExtraSmall:
                e = d.extraSmall;
                break;
            case r.SXActivityIndicatorSize.Small:
                e = d.small;
                break;
            case r.SXActivityIndicatorSize.Medium:
                e = d.medium;
                break;
            case r.SXActivityIndicatorSize.Large:
                e = d.large;
                break;
            default:
                e = c.switchStatementExhaustiveChecking(this.props.size)
            }
            switch (this.props.size) {
            case r.SXActivityIndicatorSize.ExtraSmall:
                t = l.default.CIRCLE_SPINNER_40;
                break;
            default:
            case r.SXActivityIndicatorSize.Small:
            case r.SXActivityIndicatorSize.Medium:
            case r.SXActivityIndicatorSize.Large:
                t = l.default.CIRCLE_SPINNER
            }
            return n.createElement(n.View, {
                style: [e, this.props.style]
            }, n.createElement(s, {
                animation: t,
                loop: !0,
                delay: this.props.deferTimeMs,
                hiddenWhileWaiting: !!this.props.deferTimeMs,
                tintColor: this.props.tintColor,
                sizeToFit: !0
            }))
        }
    }
    t.default = u
}
, , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39)
      , s = i(483);
    class r extends o.TelemetryEventBase {
        getEventName() {
            return "s4l_performance"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.CallPerformanceEvent = class extends r {
        constructor(e, t, i, n) {
            super(),
            this._callId = e,
            this._cpuspeed = t,
            this._cpumodel = i,
            this._cores = n,
            this._processMemory = new s.Rate,
            this._freeMemory = new s.Rate,
            this._cpuUsage = new s.Rate,
            this._gpuMemoryWorkingSetSize = new s.Rate,
            this._gpuCpuUsage = new s.Rate,
            this._rendererMemoryWorkingSetSize = new s.Rate,
            this._rendererCpuUsage = new s.Rate
        }
        getActionName() {
            return "CallPerformance"
        }
        getAttributes() {
            const e = {
                CallId: this._callId,
                CPUSpeed: this._cpuspeed,
                CPUModel: this._cpumodel,
                CPUCores: this._cores,
                CPUUsageAverage: this._cpuUsage.average(),
                CPUUsageMax: this._cpuUsage.max(),
                ProcessMemoryAverage: this._processMemory.average(),
                ProcessMemoryMax: this._processMemory.max(),
                FreeMemoryAverage: this._freeMemory.average(),
                FreeMemoryMax: this._freeMemory.max(),
                RendererCPUUsageMax: this._rendererCpuUsage.max(),
                RendererCPUUsageAverage: this._rendererCpuUsage.average(),
                RendererMemoryWSSMax: this._rendererMemoryWorkingSetSize.max(),
                RendererMemoryWSSAverage: this._rendererMemoryWorkingSetSize.average(),
                GPUUsageMax: this._gpuCpuUsage.max(),
                GPUUsageAverage: this._gpuCpuUsage.average(),
                GPUMemoryWSSMax: this._gpuMemoryWorkingSetSize.max(),
                GPUMemoryWSSAverage: this._gpuMemoryWorkingSetSize.average()
            };
            return n.assign(super.getAttributes(), e)
        }
        setMainUsage(e) {
            this._processMemory.push(e.processMemory),
            this._freeMemory.push(e.freeMemory),
            this._cpuUsage.push(e.cpuUsage)
        }
        setGPUUsage(e, t) {
            this._gpuMemoryWorkingSetSize.push(e),
            this._gpuCpuUsage.push(t)
        }
        setRendererUsage(e, t) {
            this._rendererMemoryWorkingSetSize.push(e),
            this._rendererCpuUsage.push(t)
        }
    }
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._attributes = e
        }
        getEventName() {
            return "people_presence_failure"
        }
        getAttributes() {
            return Object.assign(Object.assign({}, super.getAttributes()), {
                ServiceType: this._attributes.serviceType,
                Scenario: this._attributes.scenario,
                StatusCode: this._attributes.statusCode,
                StatusText: this._attributes.statusText,
                DidTimeOut: this._attributes.didTimeOut,
                Url: this._attributes.url,
                CorrelationId: this._attributes.correlationId
            })
        }
    }
    t.PresenceFailureTelemetryEvents = o
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(1);
    const n = /([0-9]+)?\/?([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)\/*([a-zA-Z0-9]*)\/*/;
    t.SkypeVersionParser = class {
        static parse(e) {
            if (!e)
                return;
            const t = e.match(n);
            return t ? {
                platformId: parseInt(t[1], 10),
                version: {
                    major: parseInt(t[2], 10),
                    minor: parseInt(t[3], 10),
                    cobrand: parseInt(t[4], 10),
                    build: parseInt(t[5], 10)
                },
                tag: t.length > 6 ? t[6] : void 0
            } : void 0
        }
        static serialize(e) {
            return (e.platformId ? e.platformId + "/" : "") + e.version.major + "." + e.version.minor + "." + e.version.cobrand + "." + e.version.build + (e.tag ? "/" + e.tag : "")
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(82)
      , o = i(137)
      , s = i(443)
      , r = i(18)
      , a = i(39);
    var l, c;
    !function(e) {
        e[e.BalanceStatePanel = 0] = "BalanceStatePanel",
        e[e.DialerPanel = 1] = "DialerPanel",
        e[e.GroupCall = 2] = "GroupCall"
    }(l = t.NavigateToDestination || (t.NavigateToDestination = {})),
    function(e) {
        e[e.InterruptPrompt = 0] = "InterruptPrompt",
        e[e.InChat = 1] = "InChat",
        e[e.Dialpad = 2] = "Dialpad"
    }(c = t.CallerIdLocations || (t.CallerIdLocations = {}));
    class d extends a.TelemetryEventBase {
        getAriaTenantTokenOverride() {
            return r.getAriaCommerceTenantToken()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    class u extends d {
        constructor(e, t, i) {
            super(),
            this._settings = e,
            this._userEntitlementsSummary = t,
            this._isFreeTrialAvailable = i
        }
        getEventName() {
            return "s4l_entitlement_experiments"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ExperimentName = this._settings.name,
            e.ExperimentLocation = s.ExperimentLocation[this._settings.location],
            this._settings.layoutOption && (e.LayoutOption = this._settings.layoutOption),
            this._userEntitlementsSummary && (e.UserEntitlementsSummary = this._userEntitlementsSummary),
            this._isFreeTrialAvailable && (e.IsFreeTrialAvailable = this._isFreeTrialAvailable),
            e
        }
    }
    t.ExperimentOpenAction = class extends u {
        getActionName() {
            return "ExperimentOpen"
        }
    }
    ;
    t.ExperimentBannerCloseAction = class extends u {
        getActionName() {
            return "BannerClose"
        }
    }
    ;
    t.ExperimentButtonClickAction = class extends u {
        constructor(e, t, i, n) {
            super(t, i, n),
            this._navigateTo = e
        }
        getActionName() {
            return "ButtonClick"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.NavigateTo = l[this._navigateTo],
            e
        }
    }
    ;
    t.UnansweredCallCTA = class extends d {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "s4l_entitlement_ucux_cta"
        }
        getActionName() {
            return this._action
        }
    }
    ;
    class g extends d {
        constructor(e, t, i) {
            super(),
            this._action = e,
            this._location = t,
            this._layoutOption = i
        }
        getEventName() {
            return "s4l_callerId"
        }
        getActionName() {
            return o.Action[this._action]
        }
        getAttributes() {
            const e = super.getAttributes();
            return void 0 !== this._location && (e.Location = c[this._location]),
            void 0 !== this._layoutOption && (e.LayoutOption = this._layoutOption),
            e
        }
    }
    t.CallerIdEvents = g;
    t.CallerIdCallIgnoreEvent = class extends g {
        constructor(e) {
            super(o.Action.IgnoreCall),
            this._terminatedReason = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.TerminatedReasonName = n.TerminatedReason[this._terminatedReason],
            e
        }
    }
    ;
    t.CallerIdFeatureToggleEvent = class extends g {
        constructor(e, t, i, n, o) {
            super(e),
            this._promptShownCount = t,
            this._messageShownCount = i,
            this._dialpadShowCount = n,
            this._campaignDurationDays = o
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.PromptShownCount = this._promptShownCount,
            e.MessageShownCount = this._messageShownCount,
            e.DialpadShowCount = this._dialpadShowCount,
            void 0 !== this._campaignDurationDays && (e.CampaignDurationDays = this._campaignDurationDays),
            e
        }
    }
    ;
    t.FailureScreenEvent = class extends d {
        constructor(e, t, i, n) {
            super(),
            this._action = e,
            this._location = t,
            this._layoutOption = i,
            this._copiesOption = n
        }
        getEventName() {
            return "s4l_failure_screen"
        }
        getActionName() {
            return o.Action[this._action]
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Location = o.Location[this._location],
            this._layoutOption && (e.LayoutOption = this._layoutOption),
            this._copiesOption && (e.CopiesOption = this._copiesOption),
            e
        }
    }
    ;
    t.ComponentActionEvent = class extends d {
        constructor(e, t, i) {
            super(),
            this._action = e,
            this._component = t,
            this._location = i
        }
        getEventName() {
            return "s4l_component"
        }
        getActionName() {
            return this._action
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Location = this._location,
            e.Component = this._component,
            e
        }
    }
    ;
    t.TasterTelemetryEvent = class extends d {
        constructor(e, t) {
            super(),
            this._duration = e,
            this._terminatedReason = t
        }
        getActionName() {
            return "CallEnd"
        }
        getEventName() {
            return "s4l_taster_call_ended"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.CallDuration = this._duration,
            e.TerminatedReason = this._terminatedReason,
            e
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.tryGetDndOsState = function(e) {}
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(0)
      , r = i(13)
      , a = i(6)
      , l = i(1078)
      , c = i(176)
      , d = i(273)
      , u = i(2)
      , g = i(3)
      , h = i(438)
      , p = i(150)
      , m = i(19)
      , S = i(18)
      , C = i(29);
    var y;
    !function(e) {
        e[e.NothingToLoad = 0] = "NothingToLoad",
        e[e.Loading = 1] = "Loading",
        e[e.Loaded = 2] = "Loaded",
        e[e.Error = 3] = "Error"
    }(y || (y = {}));
    let f = {
        prev: {},
        cur: {}
    };
    p.subscribe(()=>{
        f = {
            prev: {},
            cur: {}
        }
    }
    ),
    C.setInterval(()=>{
        f.prev = f.cur,
        f.cur = {}
    }
    , 36e5);
    class _ extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._attemptedTokenRefresh = !1,
            this._onAuthRefreshed = ()=>{
                const e = this.isComponentMounted() && this.state.loadingState !== y.Loaded;
                g.log(u.LogTraceArea.ErrorSafeImage, "Auth token refreshed; is going to try one more time=", e, n.pii.Omit(this.props.sourceUrl)),
                e && this.setState({
                    loadingState: y.Loading,
                    retryCount: this._retryCount() + 1
                })
            }
            ,
            this._onImageLoadSuccess = e=>{
                this.props.sourceUrl && (this._nativeDimensions = e,
                this.props.shouldInstrument && this._telemetryEvent && (this._telemetryEvent.endLoad(),
                this._telemetryEvent.setStatus(!0, u.MessagingFailureReason.None),
                g.track(this._telemetryEvent)),
                this._onImageLoadCommon() && (this.props.onLoad && this.props.onLoad(e),
                this.setState({
                    loadingState: y.Loaded
                })))
            }
            ,
            this._onImageLoadError = e=>{
                if (!this.props.sourceUrl)
                    return void g.log(u.LogTraceArea.ErrorSafeImage, "There was an error, but there is also no sourceUrl ... ", "this should not happen because ErrorSafeImage does not call Image if sourceUrl is empty");
                const t = this._retryCount();
                if (g.log(u.LogTraceArea.ErrorSafeImage, "Image failed to load: " + n.pii.Omit(this.props.sourceUrl) + " nth try: " + (t + 1) + " error: " + m.errorAsString(e)),
                this.props.shouldInstrument && this._telemetryEvent && (this._telemetryEvent.endLoad(),
                this._telemetryEvent.setStatus(!1, u.MessagingFailureReason.AMSFailure),
                g.track(this._telemetryEvent)),
                this._onImageLoadCommon()) {
                    if (!this.props.noRetryOnError) {
                        if (t < 3)
                            return void C.setTimeout(()=>{
                                if (this.isComponentMounted()) {
                                    const i = this.props.sourceUrl ? n.pii.Omit(this.props.sourceUrl) : "no source";
                                    g.log(u.LogTraceArea.ErrorSafeImage, "Retrying image load - previous retryCount=", t, i, m.errorAsString(e)),
                                    this.setState({
                                        retryCount: t + 1
                                    })
                                }
                            }
                            , 1e3);
                        this._attemptedTokenRefresh ? g.log(u.LogTraceArea.ErrorSafeImage, "Image already attempted to refresh the token before this error response. Failing.", n.pii.Omit(this.props.sourceUrl)) : (this._attemptedTokenRefresh = !0,
                        l.attemptTokenRefresh(this.props.sourceUrl).then(this._onAuthRefreshed, o.noop))
                    }
                    if (!this.props.noRetryOnError || this.props.shouldInstrument) {
                        const t = e ? m.errorAsString(e) : void 0;
                        g.log(u.LogTraceArea.ErrorSafeImage, "Image load failed: ", this._telemetryEvent || t && e && e.message)
                    }
                    _._cacheBadImage(this.props.sourceUrl),
                    this.props.onError && this.props.onError(e),
                    this.setState({
                        loadingState: y.Error
                    })
                }
            }
        }
        _buildState(e, t) {
            const i = {
                skypetokenAllowedDomains: a.default.getS4LMessagingFeatures().skypetokenAllowedDomains
            }
              , n = this.props;
            return (t || e.sourceUrl !== n.sourceUrl) && (i.isDomainTrusted = !!e.sourceUrl && c.checkIfSafeDomainToRender(e.sourceUrl, e.origin),
            i.isStaticAsyncMedia = !!e.sourceUrl && c.isStaticAsyncMediaUrl(e.sourceUrl),
            i.loadingState = y.NothingToLoad,
            i.retryCount = 0,
            e.sourceUrl && (i.loadingState = _._isBadImage(e.sourceUrl) ? y.Error : y.Loading)),
            i.hasNetworkConnectivity = p.isNetworkingAvailable(),
            i
        }
        shouldComponentUpdate(e, t) {
            return !d.default.comparator(this.props, e) || t.loadingState !== y.Loaded && !d.default.comparator(this.state, t)
        }
        componentDidMount() {
            super.componentDidMount(),
            this._logSourceURL(),
            this.props.shouldInstrument && this.props.sourceUrl && (this._telemetryEvent = new h.ImageLoad(this.props.sourceUrl,this.props.origin,this.props.telemetryProperties),
            this._telemetryEvent.startLoad()),
            this.state.loadingState === y.Error && this.props.onError && this.props.onError()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.props.sourceUrl !== e.sourceUrl && this._logSourceURL(),
            !t.hasNetworkConnectivity && this.state.hasNetworkConnectivity && this.state.loadingState === y.Error && this._retryCount() > 0 && this.setState({
                retryCount: 0,
                loadingState: this.props.sourceUrl ? y.Loading : y.NothingToLoad
            })
        }
        _logSourceURL() {
            g.log(u.LogTraceArea.ErrorSafeImage, "Attempting to display image: " + n.pii.Omit(this.props.sourceUrl))
        }
        render() {
            const e = this._retryCount()
              , t = `image-${this.props.sourceUrl || ""}-${e}`;
            return this.state.loadingState === y.Error || this.props.blockUntrustedDomains && !this.state.isDomainTrusted ? null : s.createElement(s.Image, {
                key: t,
                style: this.props.style,
                source: this.props.sourceUrl,
                onError: this._onImageLoadError,
                onLoad: this._onImageLoadSuccess,
                resizeMode: this.props.resizeMode,
                resizeMethod: "resize",
                headers: this._getHeaders(this.props.sourceUrl)
            })
        }
        _getHeaders(e) {
            const t = {}
              , i = a.default.getConfigSettingsNoSubscription().images.cacheControlRequestHeader;
            if (i && (t["Cache-Control"] = i),
            this.props.isCors && (t.origin = S.getFrontendBaseUrl()),
            this.props.skypeToken) {
                const i = /^(?:https?:\/\/)?(?:www\.)?([^:\/\n?]+)/gim.exec(e)
                  , s = i && i[1];
                s && o.includes(this.state.skypetokenAllowedDomains, s) ? (t["X-SkypeToken"] = this.props.skypeToken.rawToken,
                g.log(u.LogTraceArea.ErrorSafeImage, "Set X-SkypeToken header for image request: " + n.pii.Omit(this.props.sourceUrl))) : g.warn(u.LogTraceArea.ErrorSafeImage, "Attempted to send SkypeToken to a non-whitelisted domain: " + s)
            }
            return Object.keys(t).length > 0 ? t : void 0
        }
        _onImageLoadCommon() {
            return !!this.isComponentMounted()
        }
        _retryCount() {
            return this.state.retryCount || 0
        }
        getNativeImageSize() {
            return this._nativeDimensions
        }
        static _cacheBadImage(e) {
            f.prev[e] || (g.log(u.LogTraceArea.ErrorSafeImage, `Caching image ${n.pii.Omit(e)} in badImagesCache`, n.pii.Omit(e)),
            f.cur[e] = !0)
        }
        static _isBadImage(e) {
            return f.prev[e] || f.cur[e]
        }
    }
    t.default = _
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e, t, i) {
            super(),
            this._failureOrigin = e,
            this._statusCode = t,
            this._statusText = i
        }
        getEventName() {
            return "skype_cdn_token_failure"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.status_code = this._statusCode ? this._statusCode : -1,
            e.status_text = this._statusText ? this._statusText : " ",
            e.failure_origin = n.SkypeCdnTokenFailureOrigin[this._failureOrigin],
            e
        }
    }
    t.SkypeCdnTokenFailure = s
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(5)
      , a = i(134)
      , l = i(1493)
      , c = i(12)
      , d = r.lazyProperties({
        menuContainer: ()=>o.Styles.createViewStyle({
            minWidth: 160
        })
    });
    class u extends c.default {
        constructor() {
            super(...arguments),
            this._mountedRefsMap = new a.default,
            this._menuForDescriptor = (e,t,i)=>o.createElement(l.default, {
                ref: this._mountedRefsMap.onComponentRef("menu" + t),
                key: e.key,
                title: e.title,
                menuItems: e.menuItems,
                onSelectItem: this.props.onSelectItem,
                menuTextStyles: e.menuTextStyles || this.props.menuTextStyles,
                menuButtonStyles: e.menuButtonStyles || this.props.menuButtonStyles,
                showDivider: t !== i - 1,
                accessibilityTraits: this.props.accessibilityTraits,
                shouldReleaseKeyboardFocus: e=>this._shouldReleaseKeyboardFocus(e, t, i)
            })
        }
        _buildState(e, t) {
            return {
                sections: n.filter(e.sections, e=>e.menuItems.length > 0)
            }
        }
        componentDidMount() {
            super.componentDidMount();
            const e = this._mountedRefsMap.ref("menu0");
            e && e.focusFirt()
        }
        render() {
            const e = this.state.sections.length
              , t = n.map(this.state.sections, (t,i)=>this._menuForDescriptor(t, i, e));
            return o.createElement(o.View, {
                style: d.menuContainer
            }, t)
        }
        _shouldReleaseKeyboardFocus(e, t, i) {
            const n = t === i - 1;
            if (0 === t && e === s.SXMenuNavigationDirection.Up || n && e === s.SXMenuNavigationDirection.Down || e === s.SXMenuNavigationDirection.None)
                return !1;
            if (e === s.SXMenuNavigationDirection.Up) {
                const e = t - 1
                  , i = this._mountedRefsMap.ref("menu" + e);
                i && i.focusLast()
            } else if (e === s.SXMenuNavigationDirection.Down) {
                const e = t + 1
                  , i = this._mountedRefsMap.ref("menu" + e);
                i && i.focusFirt()
            }
            return !0
        }
    }
    t.default = u
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(805)
      , s = i(0)
      , r = i(13)
      , a = i(1059)
      , l = i(5)
      , c = i(393)
      , d = i(14)
      , u = i(9);
    var g, h, p;
    !function(e) {
        e[e.Small = 0] = "Small",
        e[e.Medium = 1] = "Medium",
        e[e.Large = 2] = "Large"
    }(g = t.IndicatorSize || (t.IndicatorSize = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.OneThird = 1] = "OneThird",
        e[e.TwoThirds = 2] = "TwoThirds",
        e[e.Complete = 3] = "Complete"
    }(h || (h = {})),
    function(e) {
        e[e.None = 0] = "None",
        e[e.OneThird = 1] = "OneThird",
        e[e.OneThirdLooping = 2] = "OneThirdLooping",
        e[e.TwoThirds = 3] = "TwoThirds",
        e[e.TwoThirdsLooping = 4] = "TwoThirdsLooping",
        e[e.Complete = 5] = "Complete"
    }(p || (p = {}));
    const m = l.lazyProperties({
        small: ()=>s.Styles.createViewStyle({
            width: 40,
            height: 40
        }),
        medium: ()=>s.Styles.createViewStyle({
            width: 60,
            height: 60
        }),
        large: ()=>s.Styles.createViewStyle({
            width: 80,
            height: 80
        })
    });
    class S extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._animatedValue = new s.Animated.Value(0)
        }
        _buildState(e, t) {
            let i = {}
              , n = h.None;
            return n = !e.progress || e.progress < .33 ? h.None : e.progress < .66 ? h.OneThird : e.progress < 1 ? h.TwoThirds : h.Complete,
            i.progressStep = n,
            (t || this.state.progressStep === h.None) && (i.animationStep = this._animationStepForProgressStep(n)),
            i
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this._shouldAnimate(this.state) && !this._shouldAnimate(t) && this._loopAnimation()
        }
        _shouldAnimate(e) {
            return e.progressStep !== h.None
        }
        _loopAnimation() {
            if (!this.isComponentMounted())
                return;
            const e = this._animationDuration(this.state.animationStep);
            this._animatedValue.setValue(0),
            s.Animated.timing(this._animatedValue, {
                toValue: 1,
                duration: e,
                easing: s.Animated.Easing.Linear(),
                isInteraction: !1
            }).start(()=>{
                if (this.isComponentMounted()) {
                    let e = this.state.animationStep
                      , t = !1
                      , i = !1;
                    switch (this.state.animationStep) {
                    case p.OneThird:
                    case p.OneThirdLooping:
                        e = this._animationStepForProgressStep(this.state.progressStep, this.state.progressStep === h.OneThird),
                        i = this.state.progressStep > h.OneThird,
                        t = !0;
                        break;
                    case p.TwoThirds:
                    case p.TwoThirdsLooping:
                        e = this._animationStepForProgressStep(this.state.progressStep, this.state.progressStep === h.TwoThirds),
                        i = this.state.progressStep > h.TwoThirds,
                        t = !0
                    }
                    t && (e > this.state.animationStep && i && (e = this._nextAnimationStep(this.state.animationStep)),
                    this._setAnimationStepAndStartAnimation(e, !0))
                }
            }
            )
        }
        _setAnimationStepAndStartAnimation(e, t=!0) {
            this.state.animationStep !== e ? this.setState({
                animationStep: e
            }, ()=>{
                t && this._loopAnimation()
            }
            ) : t && this._loopAnimation()
        }
        _animationDuration(e) {
            const t = this._animationInfoForActivityStep(e);
            return t && t.durationMs || 1e3
        }
        _nextAnimationStep(e, t=!0) {
            if (t)
                switch (e) {
                case p.None:
                    return p.OneThird;
                case p.OneThird:
                    return p.TwoThirds;
                case p.TwoThirds:
                    return p.Complete
                }
            return e === p.Complete ? e : e + 1
        }
        _animationStepForProgressStep(e, t=!1) {
            switch (e) {
            case h.OneThird:
                return t ? p.OneThirdLooping : p.OneThird;
            case h.TwoThirds:
                return t ? p.TwoThirdsLooping : p.TwoThirds;
            case h.Complete:
                return p.Complete
            }
            return p.None
        }
        _animationInfoForActivityStep(e) {
            switch (e) {
            case p.OneThird:
                return c.default.CIRCLE_STEP0;
            case p.OneThirdLooping:
                return c.default.CIRCLE_STEP1;
            case p.TwoThirds:
                return c.default.CIRCLE_STEP2;
            case p.TwoThirdsLooping:
                return c.default.CIRCLE_STEP3;
            case p.Complete:
                return c.default.CIRCLE_STEP4;
            case p.None:
                return;
            default:
                return u.switchStatementExhaustiveChecking(e)
            }
        }
        render() {
            if (this.state.animationStep !== p.None) {
                const e = this._animationInfoForActivityStep(this.state.animationStep);
                if (!e)
                    return null;
                let t = [];
                if (n.isUndefined(this.props.size))
                    t.push(d.flexOne);
                else {
                    const e = this.props.size === g.Small ? m.small : this.props.size === g.Medium ? m.medium : m.large;
                    t.push(e)
                }
                this.props.style && t.push(this.props.style);
                const i = a.default.getAssetSourceWithColor(e, this.props.tintColor);
                return s.createElement(s.View, {
                    style: t
                }, s.createElement(o.default, Object.assign({}, i, {
                    style: d.flexOne,
                    progress: this._animatedValue
                })))
            }
            return null
        }
    }
    t.default = S
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(1);
    const n = i(675)
      , o = i(303)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._prefetchState = e,
            this._nativeCached = t
        }
        getEventName() {
            return "messaging_prefetched_image"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = "queried",
            e.PrefetchState = n.ImagePrefetchState[this._prefetchState],
            e.IsNativeCached = void 0 !== this._nativeCached ? this._nativeCached : "",
            e
        }
    }
    t.QueryPrefetchedImage = r;
    t.QueryPrefetchedEmoticonImage = class extends r {
        constructor(e, t, i) {
            super(e, t),
            this._url = i;
            o.getBaseUrl()
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.EmoticonUrl = this._url,
            e
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(106)
      , s = i(129);
    t.default = class {
        constructor() {
            this._parameters = {}
        }
        start(e, t, i) {
            this._parameters = {
                avatarSelected: !1,
                navigationOrigin: t,
                wizardSteps: i,
                participantCount: 0,
                userDidChangeGroupColor: !1,
                visitedParticipantPicker: !1,
                visitedSetConvInfoPanel: !1,
                existingConversationFound: !1
            },
            this._scenario = new s.default(o.ScenarioName.NewGroupChat,void 0,{},e),
            this._scenario.start(this._getStartAndFinishProperties())
        }
        setAvatarSelection(e) {
            this._parameters.avatarSelected = e
        }
        setGroupColor(e, t=!1) {
            this._parameters.groupColor = e,
            this._parameters.userDidChangeGroupColor = t || this._parameters.userDidChangeGroupColor
        }
        setVisitedSetConvInfoPanel() {
            this._parameters.visitedSetConvInfoPanel = !0
        }
        setVisitedParticipantPicker() {
            this._parameters.visitedParticipantPicker = !0
        }
        setExistingConversationFound() {
            this._parameters.existingConversationFound = !0
        }
        setParticipantCount(e) {
            this._parameters.participantCount = e
        }
        markFunnelCompleted() {
            this._scenario && this._scenario.markStepCompleted("FunnelCompleted", this._getFunnelProperties())
        }
        markFunnelDropped() {
            this._scenario && (this._scenario.markStepCompleted("FunnelDropped", this._getFunnelProperties()),
            this._scenario.finish(this._getStartAndFinishProperties()),
            this._reset())
        }
        markConversationCreated() {
            this._scenario && (this._scenario.markStepCompleted("ConversationCreated"),
            this._scenario.finish(this._getStartAndFinishProperties()),
            this._reset())
        }
        finish() {
            this._scenario && (this._scenario.finish(this._getStartAndFinishProperties()),
            this._reset())
        }
        fail(e, t, i, n, o) {
            if (!this._scenario)
                return;
            const s = {
                skypeErrorMessage: e || "",
                skypeErrorCode: t || "",
                httpStatusText: n || "",
                httpStatusCode: i || "",
                errorPayload: o || ""
            };
            this._scenario.fail(void 0, s),
            this._reset()
        }
        _reset() {
            this._parameters = {},
            this._scenario = void 0
        }
        _getFunnelProperties() {
            return {
                AvatarSelected: !!this._parameters.avatarSelected,
                GroupColor: this._parameters.groupColor ? this._parameters.groupColor.key : "",
                ParticipantsCount: this._parameters.participantCount || -1,
                UserDidChangeGroupColor: !!this._parameters.userDidChangeGroupColor,
                VisitedParticipantPicker: !!this._parameters.visitedParticipantPicker,
                VisitedSetConvInfoPanel: !!this._parameters.visitedSetConvInfoPanel,
                ExistingConversationFound: !!this._parameters.existingConversationFound,
                NewGroupChatNavOrigin: this._parameters.navigationOrigin ? n.NavigationConversationOrigin[this._parameters.navigationOrigin] : "",
                WizardSteps: this._parameters.wizardSteps || ""
            }
        }
        _getStartAndFinishProperties() {
            return {
                NewGroupChatNavOrigin: this._parameters.navigationOrigin ? n.NavigationConversationOrigin[this._parameters.navigationOrigin] : ""
            }
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(117)
      , o = i(86)
      , s = i(0)
      , r = i(189)
      , a = i(42)
      , l = i(10)
      , c = i(27)
      , d = i(5)
      , u = i(54)
      , g = i(66)
      , h = i(1512)
      , p = i(8)
      , m = i(23)
      , S = i(11)
      , C = i(14)
      , y = i(15)
      , f = d.lazyProperties({
        centeredText: ()=>s.Styles.createTextStyle({
            textAlign: "center"
        }),
        backgroundPadding: ()=>s.Styles.createViewStyle({
            paddingLeft: 25,
            paddingRight: 25
        }),
        backgroundStyleStroke: ()=>s.Styles.createViewStyle({
            borderWidth: 1
        }),
        titleStyleDarkText: ()=>s.Styles.createTextStyle({
            color: p.Color.gray400
        }),
        titleStyleWhiteText: ()=>s.Styles.createTextStyle({
            color: p.Color.white
        }),
        innerContainerStyle: ()=>s.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center",
            height: 60,
            borderRadius: 30
        }),
        innerContainerMediumStyle: ()=>s.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center",
            height: 40,
            borderRadius: 20
        }),
        innerContainerFlexibleHeight: ()=>s.Styles.createViewStyle({
            height: void 0,
            minHeight: 60
        }),
        innerContainerFlexibleHeightMedium: ()=>s.Styles.createViewStyle({
            height: void 0,
            minHeight: 40
        }),
        floatingActivityIndicator: ()=>s.Styles.createViewStyle({
            position: "absolute",
            left: 10
        }),
        iconAndTextContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center"
        }),
        iconAndTextContainerReverse: ()=>s.Styles.createViewStyle({
            flexDirection: "row-reverse"
        }),
        iconHorizontalMargin: ()=>s.Styles.createViewStyle({
            marginRight: 8
        }),
        iconHorizontalMarginReverse: ()=>s.Styles.createViewStyle({
            marginLeft: 8
        }),
        subtitleContainer: ()=>s.Styles.createViewStyle({
            justifyContent: "center"
        }),
        borderWidth: ()=>s.Styles.createViewStyle({
            borderWidth: 1
        }),
        secondaryIconAndTextContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            overflow: "visible"
        }),
        secondaryIcon: ()=>s.Styles.createViewStyle({
            marginLeft: 8
        }),
        image: ()=>s.Styles.createViewStyle({
            width: 24,
            height: 24
        })
    });
    class _ extends h.default {
        _buildState(e, t) {
            let i;
            if (e.buttonConfig && (e.buttonConfig.backgroundColor || e.buttonConfig.borderColor) ? (i = [],
            e.buttonConfig.borderColor && (i.push(f.backgroundStyleStroke),
            i.push(s.Styles.createViewStyle({
                borderColor: e.buttonConfig.borderColor
            }, !1))),
            e.buttonConfig.backgroundColor && i.push(s.Styles.createViewStyle({
                backgroundColor: e.buttonConfig.backgroundColor
            }, !1))) : i = this._viewStyleForButtonStyle(e.buttonStyle, e.colorInfoOverride),
            e.minHeight) {
                const t = e.buttonSize === l.SXButtonSize.Medium ? 40 : 60;
                i.push(s.Styles.createViewStyle({
                    minHeight: e.minHeight,
                    borderRadius: (e.minHeight > t ? e.minHeight : t) / 2
                }, !1))
            }
            return {
                viewStyle: i,
                textColorInfo: e.buttonConfig && e.buttonConfig.textColor ? {
                    color: e.buttonConfig.textColor,
                    subtitleColor: e.buttonConfig.subtitleTextColor || e.buttonConfig.textColor,
                    colorStyle: s.Styles.createTextStyle({
                        color: e.buttonConfig.textColor
                    }, !1)
                } : this._textInfoForButtonStyle(e.buttonStyle, e.colorInfoOverride, f.titleStyleWhiteText, f.titleStyleDarkText),
                updateOpacityOnHover: !e.buttonConfig || !e.buttonConfig.hoverBackgroundColor,
                gradientColors: e.buttonStyle === l.SXButtonStyle.GradientFill ? e.colorInfoOverride ? r.gradientColorsForColorInfo(e.colorInfoOverride) : u.getGradientColors() : void 0
            }
        }
        _onHoverStart(e) {
            this.setState({
                isHovering: !0
            }, ()=>super._onHoverStart(e))
        }
        _onHoverEnd(e) {
            this.state.isHovering ? this.setState({
                isHovering: !1
            }, ()=>super._onHoverEnd(e)) : super._onHoverEnd(e)
        }
        _updateButton(e, t=!0) {
            super._updateButton(e && !!this.state.updateOpacityOnHover, t)
        }
        render() {
            const e = this.props.buttonSize === l.SXButtonSize.Medium
              , t = [e ? f.innerContainerMediumStyle : f.innerContainerStyle, this.props.allowTextWrap ? e ? f.innerContainerFlexibleHeightMedium : f.innerContainerFlexibleHeight : void 0, f.backgroundPadding, this.state.viewStyle];
            let i, r;
            if (this.props.buttonConfig && this.props.buttonConfig.hoverBackgroundColor && this.state.isHovering && t.push(s.Styles.createViewStyle({
                backgroundColor: this.props.buttonConfig.hoverBackgroundColor
            }, !1)),
            this.props.showShadow && t.push(C.shadowLightStyle),
            this.props.addBorderColor && t.push([f.borderWidth, s.Styles.createViewStyle({
                borderColor: this.props.addBorderColor
            }, !1)]),
            this.props.backgroundStyle && t.push(s.Styles.createViewStyle(this.props.backgroundStyle, !1)),
            this.props.title) {
                const t = [e ? m.fontStyle.bodyBold : m.fontStyle.primaryButtonLarge, this.state.textColorInfo.colorStyle];
                if (this.props.allowTextWrap && (t.push(f.centeredText),
                this.props.icon && t.push(C.flexOne)),
                this.props.textStyleDeprecated && t.push(this.props.textStyleDeprecated),
                i = s.createElement(s.Text, {
                    style: t,
                    numberOfLines: this.props.allowTextWrap ? void 0 : 1
                }, this.props.title),
                this.props.subtitle) {
                    const e = [s.Styles.createTextStyle({
                        color: this.state.textColorInfo.subtitleColor
                    }, !1)];
                    this.props.allowTextWrap && e.push(f.centeredText),
                    i = s.createElement(s.View, {
                        style: [f.subtitleContainer, C.flexOne]
                    }, i, s.createElement(y.Caption, {
                        style: e,
                        numberOfLines: this.props.allowTextWrap ? void 0 : 1,
                        disableThemeSubscription: !0
                    }, this.props.subtitle))
                }
            }
            i && (r = this._getAccessoryMarginStyle());
            let d, u, h = this.props.renderAccessoryView ? this.props.renderAccessoryView(this.state.textColorInfo.color, r) : void 0;
            if (h || (this.props.icon ? h = s.createElement(c.default, {
                icon: this.props.icon,
                size: this.props.iconSize || (e ? S.IconSize.size16 : S.IconSize.size24),
                color: this.state.textColorInfo.color,
                style: r
            }) : this.props.imageSource && (h = s.createElement(s.Image, {
                source: this.props.imageSource,
                style: [r, f.image]
            }))),
            h)
                if (i) {
                    const e = [f.iconAndTextContainer];
                    this.props.iconPositon === l.SXButtonIconPosition.End && e.push(f.iconAndTextContainerReverse),
                    i = s.createElement(s.View, {
                        style: e
                    }, h, i)
                } else
                    i = h;
            if (this.props.secondaryIcon) {
                const t = [f.secondaryIcon];
                this.props.secondaryIconMarginLeft && t.push(s.Styles.createViewStyle({
                    marginLeft: this.props.secondaryIconMarginLeft
                }, !1)),
                this.props.secondaryIconMarginRight && t.push(s.Styles.createViewStyle({
                    marginRight: this.props.secondaryIconMarginRight
                }, !1)),
                i = s.createElement(s.View, {
                    style: f.secondaryIconAndTextContainer
                }, i, s.createElement(c.default, {
                    style: t,
                    icon: this.props.secondaryIcon,
                    size: this.props.secondaryIconSize || this.props.iconSize || (e ? S.IconSize.size16 : S.IconSize.size24),
                    color: this.props.secondaryIconColor || this.state.textColorInfo.color
                }))
            }
            if (this.props.showActivityIndicator && (d = s.createElement(g.default, {
                style: i ? f.floatingActivityIndicator : void 0,
                size: i ? l.SXActivityIndicatorSize.ExtraSmall : l.SXActivityIndicatorSize.Small,
                tintColor: this._indicatorColorForButtonStyle(this.props.buttonStyle, this.props.colorInfoOverride)
            })),
            this.state.gradientColors) {
                const t = [e ? f.innerContainerMediumStyle : f.innerContainerStyle, this.state.viewStyle, C.absoluteFill];
                this.props.backgroundStyle && t.push(this.props.backgroundStyle),
                u = s.createElement(n.GradientView, {
                    style: t,
                    colors: this.state.gradientColors,
                    direction: n.GradientDirection.RIGHT
                })
            }
            const p = this.props.disabled && !this.props.disabledOpacityOverride || this.props.showActivityIndicator
              , _ = this.props.accessibilityLabel || this.props.title || ""
              , b = a.default.buttonAccessibilityInfo(_, !!p);
            return s.createElement(s.Button, {
                ref: this._onButtonRef,
                style: this.props.style,
                title: this.props.hoverText ? this.props.hoverText : this.props.title,
                onFocus: this.props.disabled ? void 0 : this.props.onFocus,
                onPress: this.props.disabled ? void 0 : this.props.onPress,
                onPressIn: this._onPressIn,
                onPressOut: this._onPressOut,
                onLongPress: this.props.disabled ? void 0 : this.props.onLongPress,
                onHoverStart: this._onHoverStartBound,
                onHoverEnd: this._onHoverEndBound,
                onKeyPress: this.props.disabled ? void 0 : this.props.onKeyPress,
                disabled: p,
                accessibilityLabel: b.accessibilityLabel,
                accessibilityTraits: this.props.accessibilityTraits || b.accessibilityTraits,
                tabIndex: this.props.tabIndex,
                disableTouchOpacityAnimation: !0,
                autoFocus: this.props.autoFocus,
                importantForAccessibility: this.props.accessibilityHidden ? s.Types.ImportantForAccessibility.NoHideDescendants : this.props.importantForAccessibility
            }, s.createElement(o.View, {
                ref: this._onAnimatedInnerButtonRef,
                style: t
            }, u, d, i))
        }
        _getAccessoryMarginStyle() {
            let e;
            switch (this.props.iconPositon) {
            case l.SXButtonIconPosition.End:
                e = this.props.iconHorizontalMargin ? s.Styles.createViewStyle({
                    marginLeft: this.props.iconHorizontalMargin
                }, !1) : f.iconHorizontalMarginReverse;
                break;
            default:
                e = this.props.iconHorizontalMargin ? s.Styles.createViewStyle({
                    marginRight: this.props.iconHorizontalMargin
                }, !1) : f.iconHorizontalMargin
            }
            return e
        }
    }
    t.PrimaryButton = _,
    t.default = _
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(117)
      , o = i(86)
      , s = i(0)
      , r = i(189)
      , a = i(10)
      , l = i(27)
      , c = i(5)
      , d = (i(4),
    i(54))
      , u = i(66)
      , g = i(1512)
      , h = i(8)
      , p = i(23)
      , m = i(11)
      , S = i(14)
      , C = i(15)
      , y = c.lazyProperties({
        titleStyle: ()=>s.Styles.createTextStyle({
            color: h.Color.white
        }),
        darkTitleStyle: ()=>s.Styles.createTextStyle({
            color: h.Color.gray400
        }),
        hiddenTitle: ()=>s.Styles.createViewStyle({
            opacity: 0
        }),
        innerContainerStyle: ()=>s.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center",
            paddingLeft: 15,
            paddingRight: 15
        }),
        innerContainerStroke: ()=>s.Styles.createViewStyle({
            borderWidth: 1
        }),
        activityIndicatorContainer: ()=>s.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center"
        }),
        iconAndTextContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center"
        }),
        iconAndTextContainerReverse: ()=>s.Styles.createViewStyle({
            flexDirection: "row-reverse"
        }),
        iconHorizontalMargin: ()=>s.Styles.createViewStyle({
            marginRight: 5
        }),
        iconHorizontalMarginReverse: ()=>s.Styles.createViewStyle({
            marginLeft: 5
        }),
        borderWidth: ()=>s.Styles.createViewStyle({
            borderWidth: 1
        }),
        secondaryIcon: ()=>s.Styles.createViewStyle({
            marginLeft: 8
        }),
        secondaryIconAndTextContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            overflow: "visible"
        }),
        image: ()=>s.Styles.createViewStyle({
            width: 24,
            height: 24
        })
    });
    class f extends g.default {
        constructor() {
            super(...arguments),
            this._onPillLayout = e=>{
                this.isComponentMounted() && e.height > 0 && this.state.pillHeight !== e.height && this.setState({
                    pillHeight: e.height
                })
            }
        }
        _buildState(e, t) {
            return {
                viewStyle: this._viewStyleForButtonStyle(e.buttonStyle, e.colorInfoOverride),
                textColorInfo: this._textInfoForButtonStyle(e.buttonStyle, e.colorInfoOverride, y.titleStyle, y.darkTitleStyle),
                gradientColors: e.buttonStyle === a.SXButtonStyle.GradientFill ? e.colorInfoOverride ? r.gradientColorsForColorInfo(e.colorInfoOverride) : d.getGradientColors() : void 0,
                pillHeight: e.minHeight || 30
            }
        }
        render() {
            const e = [];
            this.props.showShadow && e.push(S.overflowVisible),
            this.props.style && e.push(this.props.style);
            const t = [y.innerContainerStyle];
            this.props.buttonConfig && (this.props.buttonConfig.backgroundColor || this.props.buttonConfig.borderColor) ? (this.props.buttonConfig.borderColor && (t.push(y.innerContainerStroke),
            t.push(s.Styles.createViewStyle({
                borderColor: this.props.buttonConfig.borderColor
            }, !1))),
            this.props.buttonConfig.backgroundColor && t.push(s.Styles.createViewStyle({
                backgroundColor: this.props.buttonConfig.backgroundColor
            }, !1))) : t.push(this.state.viewStyle),
            t.push(s.Styles.createViewStyle({
                borderRadius: this.state.pillHeight / 2,
                minHeight: this.props.minHeight || 30
            }, !1)),
            this.props.showShadow && t.push(S.shadowLightStyle),
            this.props.addBorderColor && t.push([y.borderWidth, s.Styles.createViewStyle({
                borderColor: this.props.addBorderColor
            }, !1)]);
            const i = [p.fontStyle.tertiaryButton, y.titleStyle, S.flexNegativeOne, this.props.textStyleOverride || void 0];
            let r, c, d, g;
            if (this.props.buttonConfig && this.props.buttonConfig.textColor ? (r = this.props.buttonConfig.textColor,
            c = s.Styles.createTextStyle({
                color: this.props.buttonConfig.textColor
            }, !1)) : (r = this.state.textColorInfo.color,
            c = this.state.textColorInfo.colorStyle),
            i.push(c),
            this.props.textStyleDeprecated && i.push(this.props.textStyleDeprecated),
            this.props.showActivityIndicator && i.push(y.hiddenTitle),
            this.props.title && (d = s.createElement(s.Text, {
                style: i,
                numberOfLines: this.props.allowTextWrap ? void 0 : 1
            }, this.props.title),
            this.props.subtitle)) {
                let e;
                e = this.props.buttonConfig ? this.props.buttonConfig.subtitleTextColor || this.props.buttonConfig.textColor : this.state.textColorInfo.subtitleColor;
                const t = [s.Styles.createTextStyle({
                    color: e
                }, !1), S.flexNegativeOne];
                d = s.createElement(s.View, {
                    style: S.flexNegativeOne
                }, d, s.createElement(C.Caption, {
                    style: t,
                    numberOfLines: this.props.allowTextWrap ? void 0 : 1,
                    disableThemeSubscription: !0
                }, this.props.subtitle))
            }
            d && (g = this._getAccessoryMarginStyle());
            let h = this.props.renderAccessoryView ? this.props.renderAccessoryView(r, g) : void 0;
            if (!h && this.props.icon) {
                const e = [g];
                this.props.showActivityIndicator && e.push(y.hiddenTitle),
                h = s.createElement(l.default, {
                    icon: this.props.icon,
                    size: this.props.iconSize || m.IconSize.size16,
                    color: r,
                    style: e
                })
            } else
                !h && this.props.imageSource && (h = s.createElement(s.Image, {
                    source: this.props.imageSource,
                    style: [g, y.image]
                }));
            if (d) {
                const e = [y.iconAndTextContainer, S.flexNegativeOne];
                this.props.iconPositon === a.SXButtonIconPosition.End && e.push(y.iconAndTextContainerReverse),
                d = s.createElement(s.View, {
                    style: e
                }, h, d)
            } else
                d = h;
            if (this.props.secondaryIcon) {
                const e = [y.secondaryIcon];
                this.props.secondaryIconMarginLeft && e.push(s.Styles.createViewStyle({
                    marginLeft: this.props.secondaryIconMarginLeft
                }, !1)),
                this.props.secondaryIconMarginRight && e.push(s.Styles.createViewStyle({
                    marginRight: this.props.secondaryIconMarginRight
                }, !1)),
                d = s.createElement(s.View, {
                    style: y.secondaryIconAndTextContainer
                }, d, s.createElement(l.default, {
                    style: e,
                    icon: this.props.secondaryIcon,
                    size: this.props.secondaryIconSize || this.props.iconSize || m.IconSize.size16,
                    color: this.props.secondaryIconColor || r
                }))
            }
            d || (d = s.createElement(s.Text, {
                style: i
            }, ""));
            const f = this.props.showActivityIndicator ? s.createElement(s.View, {
                style: [S.absoluteFill, y.activityIndicatorContainer]
            }, s.createElement(u.default, {
                size: a.SXActivityIndicatorSize.ExtraSmall,
                tintColor: this.props.buttonConfig && this.props.buttonConfig.indicatorColor ? this.props.buttonConfig.indicatorColor : this._indicatorColorForButtonStyle(this.props.buttonStyle, this.props.colorInfoOverride)
            })) : void 0
              , _ = this.state.gradientColors ? s.createElement(n.GradientView, {
                style: [...t, S.absoluteFill],
                colors: this.state.gradientColors,
                direction: n.GradientDirection.RIGHT
            }) : void 0
              , b = [...t];
            this.props.backgroundStyle && b.push(s.Styles.createViewStyle(this.props.backgroundStyle, !1));
            const v = !!this.props.onPress || !!this.props.onLongPress
              , T = this.props.disabled && !this.props.disabledOpacityOverride || this.props.showActivityIndicator;
            let P = this.props.accessibilityLabel || this.props.title || "";
            let A = this.props.accessibilityTraits;
            !A && v && (A = [s.Types.AccessibilityTrait.Button],
            T && A.push(s.Types.AccessibilityTrait.Disabled));
            const k = v ? s.Button : s.View;
            return s.createElement(k, {
                ref: this._onButtonRef,
                style: e,
                title: this.props.hoverText ? this.props.hoverText : this.props.title,
                onFocus: this.props.disabled ? void 0 : this.props.onFocus,
                onPress: !this.props.disabled && v ? this.props.onPress : void 0,
                onPressIn: v ? this._onPressIn : void 0,
                onPressOut: v ? this._onPressOut : void 0,
                onLongPress: !this.props.disabled && v ? this.props.onLongPress : void 0,
                onKeyPress: this.props.disabled ? void 0 : this.props.onKeyPress,
                onHoverStart: this._onHoverStartBound,
                onHoverEnd: this._onHoverEndBound,
                disabled: T,
                accessibilityLabel: P,
                accessibilityTraits: A,
                tabIndex: this.props.tabIndex,
                disableTouchOpacityAnimation: !0,
                autoFocus: this.props.autoFocus,
                importantForAccessibility: this.props.accessibilityHidden ? s.Types.ImportantForAccessibility.NoHideDescendants : this.props.importantForAccessibility
            }, s.createElement(o.View, {
                ref: this._onAnimatedInnerButtonRef,
                style: b,
                onLayout: this._onPillLayout
            }, _, d, f))
        }
        _getAccessoryMarginStyle() {
            let e;
            switch (this.props.iconPositon) {
            case a.SXButtonIconPosition.End:
                e = this.props.iconHorizontalMargin ? s.Styles.createViewStyle({
                    marginLeft: this.props.iconHorizontalMargin
                }, !1) : y.iconHorizontalMarginReverse;
                break;
            default:
                e = this.props.iconHorizontalMargin ? s.Styles.createViewStyle({
                    marginRight: this.props.iconHorizontalMargin
                }, !1) : y.iconHorizontalMargin
            }
            return e
        }
    }
    t.TertiaryButton = f,
    t.default = f
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(16)
      , s = i(360)
      , r = i(39)
      , a = i(295)
      , l = i(1098);
    class c extends r.TelemetryEventBase {
        constructor() {
            super()
        }
        getEventName() {
            return "navigation_deeplink"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.DeepLinkTelemetryEventBase = c;
    var d;
    t.OpenDeepLinkEvent = class extends c {
        constructor(e, t) {
            super(),
            this._urlComponents = e,
            this._conversationId = t
        }
        getActionName() {
            return "OpenDeepLink"
        }
        getAttributes() {
            var e;
            const t = super.getAttributes();
            if (t.UrlType = a.UrlType[this._urlComponents.type],
            t.UrlProtocol = this._urlComponents.protocol,
            this._urlComponents.host && (t.UrlHost = this._urlComponents.host),
            this._urlComponents.type === a.UrlType.Web && this._urlComponents.pathname) {
                const i = this._urlComponents.pathname.split("/")[0];
                if (i && o.isMri(i) && o.isThread(i)) {
                    t.UrlIntent = "JoinConversation";
                    const i = this._urlComponents.queryParameterKeyValues;
                    i && (n.includes(l.UrlNavigationAction, null === (e = i.action) || void 0 === e ? void 0 : e.toLocaleLowerCase()) && (t.UrlParamAction = i.action.toLocaleLowerCase()),
                    i.source && (t.UrlParamSource = i.source)),
                    this._conversationId && (t.ConversationId = this._conversationId)
                }
            }
            return t
        }
    }
    ,
    function(e) {
        e[e.OpenConfirmation = 0] = "OpenConfirmation",
        e[e.Confirm = 1] = "Confirm",
        e[e.Reject = 2] = "Reject",
        e[e.RejectOutside = 3] = "RejectOutside"
    }(d = t.PhoneDiscoverabilityDialogCommand || (t.PhoneDiscoverabilityDialogCommand = {}));
    t.PhoneDiscoverabilityEvent = class extends c {
        constructor(e) {
            super(),
            this._phoneDiscoverabilityEventParams = e
        }
        getActionName() {
            return "PhoneDiscoverability"
        }
        getAttributes() {
            const e = super.getAttributes();
            return this._phoneDiscoverabilityEventParams.userPhonesCount && (e.UserPhonesCount = this._phoneDiscoverabilityEventParams.userPhonesCount),
            void 0 !== this._phoneDiscoverabilityEventParams.command && (e.DialogCommand = d[this._phoneDiscoverabilityEventParams.command]),
            void 0 !== this._phoneDiscoverabilityEventParams.origin && (e.Origin = s.PhoneDiscoverabilityOrigin[this._phoneDiscoverabilityEventParams.origin]),
            e
        }
    }
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "systray_icon"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this._action,
            e
        }
    }
    t.SystemTrayEvent = o
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(16)
      , o = i(17);
    t.default = class {
        static navigateToConversationOrScheduleNavigationOnLaunch(e) {
            e.convId && !n.isHighlightsThread(e.convId) && o.navigateToNonHighlightsConversationOrScheduleNavigationOnLaunch(e)
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(16)
      , s = i(2)
      , r = i(39)
      , a = i(159);
    var l;
    !function(e) {
        e[e.Processed = 0] = "Processed",
        e[e.Clicked = 1] = "Clicked"
    }(l || (l = {}));
    class c extends r.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._action = e,
            this._conversationId = t
        }
        getEventName() {
            return "messaging_reaction_notification"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = l[this._action],
            e.IsGroupConversation = o.isGroupConversation(this._conversationId),
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = a.getTrackableConversationId(this._conversationId);
            return t && (e.ConversationId = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.ReactionNotificationProcessed = class extends c {
        constructor(e, t) {
            super(l.Processed, e),
            this._messageProcessResult = t
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ProcessResult = s.MessageProcessResult[this._messageProcessResult],
            e
        }
    }
    ;
    t.ReactionNotificationClicked = class extends c {
        constructor(e) {
            super(l.Clicked, e)
        }
    }
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(104)
      , r = i(19)
      , a = i(39);
    class l extends a.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._name = e;
            const i = r.parseJsonErrorable(t);
            o.isError(i) ? s.error(s.LogTraceArea.Ndi, "NdiTelemetryEvent constructor failed to parse json payload", r.errorAsString(i), n.pii.Omit(JSON.stringify(t))) : this._payload = i
        }
        getEventName() {
            return this._name
        }
        getAttributes() {
            return o.assign(super.getAttributes(), this._payload)
        }
    }
    t.NdiTelemetryEvent = l
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(42)
      , s = i(5)
      , r = i(22)
      , a = i(15)
      , l = i(12)
      , c = s.lazyProperties({
        frame: ()=>n.Styles.createViewStyle({
            minHeight: 30
        }),
        innerContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignItems: "center",
            marginHorizontal: 10,
            paddingTop: 10,
            paddingBottom: 0
        }),
        innerContainerBottomBorder: ()=>n.Styles.createViewStyle({
            borderBottomWidth: 1
        }),
        innerContainerDesktop: ()=>n.Styles.createViewStyle({
            marginHorizontal: 15
        })
    });
    class d extends l.default {
        static getMenuItemHeight() {
            return 30
        }
        _buildState(e, t) {
            return {
                isUsingStackNav: r.default.isUsingStackNavigationContext()
            }
        }
        render() {
            const e = [c.innerContainer];
            this.props.hideBorder || e.push(this._themeStyles.dividerBorderColorStyle, c.innerContainerBottomBorder),
            this.state.isUsingStackNav || e.push(c.innerContainerDesktop);
            const t = o.default.headerAccessibilityInfo(this.props.title);
            let i;
            return i = this.props.rowHeight ? n.Styles.createViewStyle({
                height: this.props.rowHeight
            }, !1) : c.frame,
            n.createElement(n.View, {
                style: i
            }, n.createElement(n.View, {
                style: e,
                accessibilityLabel: t.accessibilityLabel,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes,
                accessibilityTraits: t.accessibilityTraits
            }, n.createElement(a.Subtitle, {
                colorThemeOverride: this.props.colorThemeOverride,
                accessibilityHidden: !0
            }, this.props.title)))
        }
    }
    t.default = d,
    d.buildRow = e=>n.createElement(d, Object.assign({}, e))
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(58)
      , s = i(143)
      , r = i(2677)
      , a = i(2)
      , l = i(3)
      , c = "customactionmenu";
    t.default = new class {
        show(e, t) {
            if (l.log(a.LogTraceArea.GenericUnsafe, "CustomActionMenuPopupController.show causeId: " + t),
            this._showing && this.close(e.rootViewId),
            !e.anchor || !e.anchor())
                return l.error(a.LogTraceArea.GenericUnsafe, "CustomActionMenuPopupController.show, anchor is undefined!"),
                void this.close(e.rootViewId);
            if (!s.default.maybeMountedAnchor(e.anchor()))
                return l.error(a.LogTraceArea.GenericUnsafe, "CustomActionMenuPopupController.show, anchor is not mounted!"),
                void this.close(e.rootViewId);
            const i = {
                getAnchor: ()=>s.default.maybeMountedAnchor(e.anchor()),
                renderPopup: (t,i,s,d)=>n.createElement(r.default, {
                    anchorPosition: t,
                    anchorOffset: i,
                    offset: e.offset,
                    popupWidth: s,
                    popupHeight: d,
                    title: e.getTitle(),
                    subtitle: e.getSubtitle ? e.getSubtitle() : void 0,
                    hideSubtitleDivider: e.hideSubtitleDivider,
                    content: e.content,
                    headerConfig: e.headerConfig,
                    staticContent: e.staticContent,
                    hidePopupArrow: e.hidePopupArrow,
                    colorThemeOverride: e.colorThemeOverride,
                    menuHeight: e.menuHeight,
                    menuWidth: e.menuWidth,
                    backgroundColor: e.backgroundColor,
                    borderRadius: e.borderRadius,
                    useBlurredBackground: e.useBlurredBackground,
                    onDismiss: t=>{
                        l.log(a.LogTraceArea.GenericUnsafe, "CustomActionMenuPopupController.onHandleDismiss causeId: " + t),
                        o.default.dismissPopup(c, e.rootViewId)
                    }
                }),
                positionPriorities: ["bottom", "top"],
                dismissIfShown: !0,
                onDismiss: ()=>{
                    l.log(a.LogTraceArea.GenericUnsafe, "CustomActionMenuPopupController.onDismiss causeId: " + t),
                    e.onCloseMenu(t)
                }
                ,
                rootViewId: e.rootViewId
            };
            this._showing = o.default.showPopup(i, c)
        }
        close(e) {
            l.log(a.LogTraceArea.GenericUnsafe, "CustomActionMenuPopupController.close"),
            this._showing && (this._showing = !1,
            o.default.dismissPopup(c, e))
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(658)
      , s = i(0)
      , r = i(148)
      , a = i(596)
      , l = i(2)
      , c = i(3)
      , d = i(5)
      , u = i(44)
      , g = i(226)
      , h = i(234)
      , p = i(15)
      , m = i(12)
      , S = i(92)
      , C = i(135)
      , y = i(9)
      , f = d.lazyProperties({
        captionContainerBase: ()=>s.Styles.createViewStyle({
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            marginHorizontal: 8
        }),
        captionContainerFixedHeight: ()=>s.Styles.createViewStyle({
            height: 40
        }),
        captionContainerFlexibleHeight: ()=>s.Styles.createViewStyle({
            minHeight: 40
        }),
        caption: ()=>s.Styles.createTextStyle({
            textAlign: "center",
            alignSelf: "stretch"
        }),
        title: ()=>s.Styles.createViewStyle({
            alignSelf: "stretch"
        })
    });
    class _ extends m.default {
        constructor() {
            super(...arguments),
            this._onBackButtonPressed = ()=>{
                const e = y.newCauseId();
                return c.log(l.LogTraceArea.HardwareBackButton, "CustomActionMenuPopup._onBackButtonPressed, causeId: " + e),
                !!this.props.onDismiss && (this.props.onDismiss(e),
                !0)
            }
        }
        _buildState(e, t) {
            return {
                themeColors: n.isUndefined(e.colorThemeOverride) ? S.themeColors() : h.themeColorsForTheme(e.colorThemeOverride)
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            r.subscribe(this._onBackButtonPressed)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            r.unsubscribe(this._onBackButtonPressed)
        }
        render() {
            const e = this.props.menuHeight || void 0
              , t = this.props.staticContent || !e
              , i = this.props.title || this.props.headerConfig && this.props.headerConfig.headerType !== a.HeaderType.Slim ? s.createElement(u.SimplePanelHeader, {
                panelName: this.props.title,
                hideBottomBorder: !0,
                useCenteredControls: !0,
                style: f.title,
                rightButtons: this.props.headerConfig ? this.props.headerConfig.rightButton : void 0,
                colorThemeOverride: this.props.colorThemeOverride,
                useTransparentBackground: !0
            }) : void 0
              , n = this.props.subtitle ? s.createElement(s.View, {
                style: [f.captionContainerBase, t ? f.captionContainerFlexibleHeight : f.captionContainerFixedHeight]
            }, s.createElement(p.Caption, {
                style: f.caption,
                colorThemeOverride: this.props.colorThemeOverride
            }, this.props.subtitle)) : void 0
              , r = (e || 0) + (i ? u.HeaderHeight : 0) + (n ? 40 : 0);
            let l = this.props.menuWidth ? this.props.menuWidth : a.PopupWidth;
            const c = l - (t ? 0 : 30)
              , d = t ? s.Styles.createViewStyle({
                minHeight: r,
                maxWidth: c
            }, !1) : s.Styles.createViewStyle({
                height: r,
                maxWidth: c
            }, !1)
              , h = this.props.useBlurredBackground ? C.isDarkTheme(this._currentTheme) ? o.BlurStyle.Dark : o.BlurStyle.ExtraLight : void 0
              , m = s.Styles.createViewStyle({
                width: l
            }, !1)
              , S = t ? s.View : s.ScrollView;
            return s.createElement(g, {
                anchorPosition: this.props.anchorPosition,
                anchorOffset: this.props.anchorOffset,
                offset: this.props.offset,
                popupWidth: this.props.popupWidth,
                popupHeight: this.props.popupHeight,
                fillColor: this.props.backgroundColor ? this.props.backgroundColor : this.state.themeColors.primaryBackgroundColor,
                strokeColor: this.state.themeColors.popupBorderColor,
                importantForAccessibility: s.Types.ImportantForAccessibility.No,
                popupAccessibilityTitle: this.props.title,
                popupBeakHeight: this.props.hidePopupArrow ? 0 : void 0,
                popupBeakWidth: this.props.hidePopupArrow ? 0 : void 0,
                blurBackgroundStyle: h,
                borderRadius: this.props.borderRadius
            }, s.createElement(s.View, {
                style: d
            }, i, s.createElement(S, {
                style: m
            }, n, this.props.content)))
        }
    }
    t.default = _
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(460)
      , s = i(164)
      , r = i(0)
      , a = i(408)
      , l = i(31)
      , c = i(126)
      , d = i(61)
      , u = i(16)
      , g = i(10)
      , h = i(287)
      , p = i(28)
      , m = i(80)
      , S = i(1141)
      , C = i(5)
      , y = i(4)
      , f = i(22)
      , _ = i(64)
      , b = i(214)
      , v = i(8)
      , T = i(25)
      , P = i(15)
      , A = i(12)
      , k = i(109)
      , I = i(92)
      , w = i(186)
      , N = i(67)
      , M = C.lazyProperties({
        container: ()=>r.Styles.createViewStyle({
            flex: 1,
            flexDirection: "column",
            justifyContent: "space-between",
            backgroundColor: v.Color.callStageDark,
            padding: 18
        }),
        metadataContainer: ()=>r.Styles.createViewStyle({
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "space-between",
            marginVertical: 10,
            flex: 1,
            paddingLeft: 3
        }),
        message: ()=>r.Styles.createTextStyle({
            flex: 1,
            color: v.Color.gray300Overlay80,
            alignSelf: "center",
            textAlign: "center"
        }),
        title: ()=>r.Styles.createTextStyle({
            flex: 1,
            color: v.Color.white,
            alignSelf: "flex-start",
            justifyContent: "center",
            textAlign: "center"
        }),
        titleContainer: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            flexDirection: "row"
        }),
        userIcon: ()=>r.Styles.createViewStyle({
            marginRight: 6,
            marginBottom: 16
        })
    });
    class E extends A.default {
        constructor() {
            super(...arguments),
            this._getIncomingCallStrings = (e,t,i,n)=>e ? {
                message: y.getString("CallBanner.IncomingCallEncryptedCaption"),
                accessibilityLabel: y.getString("CallBanner.IncomingCallEncryptedAccessibilityLabel", {
                    callerName: i
                })
            } : u.isGroupConversation(t) ? {
                message: y.getString("CallBanner.IncomingCallGroupCaption", {
                    callerName: i
                }),
                accessibilityLabel: y.getString("CallBanner.IncomingCallGroupAccessibilityLabel", {
                    groupName: n,
                    callerName: i
                })
            } : {
                message: y.getString("CallBanner.IncomingCallOneOnOneCaption"),
                accessibilityLabel: y.getString("CallBanner.IncomingCallOneOnOneAccessibilityLabel", {
                    callerName: i
                })
            },
            this._onPress = ()=>{
                this.props.nativeWindow.close(),
                f.default.isUsingSplitViewNoSubscription() || s.MainWindow.requestFocus()
            }
        }
        _buildState(e, t) {
            const i = b.default.modalNavigatorIdForComponentContext(this._getContext())
              , o = _.default.getCurrentModalStackNavigationContext(i)
              , s = o && o.isValid() ? o : void 0
              , r = n.first(l.default.CallingStore.getIncomingCallIds());
            r || e.nativeWindow.close();
            const a = r || e.callId
              , u = l.default.CallingStore.getCallConversationMri(a) || e.conversationMri
              , g = l.default.CallingStore.getCallCreator(a) || e.callerMri;
            let h;
            const m = c.default.useHighContrastThemeAndChanges();
            h = I.useDarkTheme() ? m ? k.Theme.Accessible : k.Theme.Colorful : m ? k.Theme.AccessibleDark : k.Theme.ColorfulDark;
            const S = p.getDisplayableProfile(g)
              , C = u === g ? S : p.getDisplayableProfile(u)
              , f = w.default.getAuthenticatedUrl(C.getAvatarUrl(T.AvatarSize.Medium))
              , v = l.default.CallingStore.isEncryptedCall(a)
              , P = S.getDisplayName()
              , A = C.getDisplayName()
              , N = l.default.CallingStore.getConnectedAndNotOnHoldCallId()
              , M = !!N && N !== a
              , E = l.default.CallingStore.isPSTNCall(a)
              , x = l.default.CallingStore.isEncryptedCall(a)
              , D = M && l.default.CallingFeaturesHelper.allowMergeCall({
                isPSTNCall: E,
                isEncryptedCall: x,
                conversationMri: u,
                connectedCallId: N,
                callId: a
            })
              , L = this._getIncomingCallStrings(v, u, P, A);
            return {
                callId: a,
                conversationMri: u,
                activeModalSplitContext: s,
                connectedCallId: N,
                isEncrypted: x,
                isPSTN: E,
                themeOverride: h,
                avatarUrl: f,
                message: M ? D ? y.getString("CallBanner.IncomingCallMergeCallWarning") : y.getString("CallBanner.IncomingCallMultiCallWarning") : L.message,
                connectedToAnotherCall: !!N && N !== a,
                conversationDisplayName: p.getDisplayName(u),
                isMergePossible: D,
                callMergeSupported: d.CallingCapabilities.callMergeSupported()
            }
        }
        render() {
            const e = this.props.nativeWindow.getWindow();
            return r.createElement(r.View, {
                style: [M.container]
            }, e ? r.createElement(o.default, {
                key: "customFocusOutline",
                window: e
            }) : void 0, r.createElement(r.View, {
                style: M.metadataContainer,
                onPress: this._onPress
            }, r.createElement(m.default, {
                style: M.userIcon
            }, r.createElement(h.default, {
                size: N.ConversationIconSize.Size100,
                conversationId: this.state.conversationMri
            })), r.createElement(r.View, {
                style: M.titleContainer
            }, r.createElement(P.BodyText, {
                bold: !0,
                style: M.title,
                disableThemeSubscription: !0,
                numberOfLines: 1
            }, this.state.conversationDisplayName)), r.createElement(P.Caption, {
                style: M.message,
                disableThemeSubscription: !0
            }, this.state.message)), r.createElement(S, {
                onPress: this._onPress,
                conversationMri: this.state.conversationMri,
                callId: this.state.callId,
                forMobile: !1,
                isEncryptedCall: !!this.state.isEncrypted,
                isPSTNCall: !!this.state.isPSTN,
                buttonSize: a.CallButtonSize.Small,
                colorThemeOverride: this.state.themeOverride,
                showMergeButton: this.state.connectedToAnotherCall && this.state.callMergeSupported,
                isMergePossible: this.state.isMergePossible,
                hasSmallerSpacing: this.state.callMergeSupported
            }))
        }
        _createContext() {
            const e = super._createContext();
            return e.rootViewId = this.props.rootViewId,
            e.rootViewType = g.RootViewType.NativeWindow,
            e.isPresentedInSplitView = !0,
            e.isPresentedInDesktopSubview = !0,
            e.isPresentedInGenericDesktopModal = !0,
            e.shouldUseThemePreview = !0,
            e
        }
    }
    t.default = E
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(5)
      , r = i(341)
      , a = i(4)
      , l = i(8)
      , c = s.lazyProperties({
        checkboxView: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignSelf: "flex-start",
            paddingVertical: 6
        }),
        reasonText: ()=>n.Styles.createTextStyle({
            flex: 1,
            color: l.Color.white
        })
    });
    t.ReportReasonCodes = {
        spam: "spam",
        pornography: "pornography",
        childExploitation: "child-exploitation",
        harassment: "harassment"
    };
    class d extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._onPress = e=>{
                this.props.onPress(this.props.reason)
            }
        }
        render() {
            return n.createElement(n.Button, {
                style: c.checkboxView,
                onPress: this._onPress
            }, n.createElement(r, {
                isOn: this.props.isSelected
            }), n.createElement(n.Text, {
                style: c.reasonText
            }, this._getDisplayTextForBlockReason(this.props.reason)))
        }
        _getDisplayTextForBlockReason(e) {
            switch (e) {
            case t.ReportReasonCodes.spam:
                return a.getString("BlockUnblockDialog.SpamDisplayText");
            case t.ReportReasonCodes.pornography:
                return a.getString("BlockUnblockDialog.PornographyDisplayText");
            case t.ReportReasonCodes.childExploitation:
                return a.getString("BlockUnblockDialog.ChildExploitationDisplayText");
            case t.ReportReasonCodes.harassment:
                return a.getString("BlockUnblockDialog.HarassmentDisplayText");
            default:
                return null
            }
        }
    }
    t.default = d
}
, , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(18)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        getEventName() {
            return "credit_upsell"
        }
        getAriaTenantTokenOverride() {
            return n.getAriaSkypeFraudTelemetryTenantToken()
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.SetUpCallForwardingClicked = class extends s {
        getActionName() {
            return "SetUpCallForwarding"
        }
    }
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(127)
      , o = i(39)
      , s = i(159);
    var r;
    !function(e) {
        e[e.DownloadClick = 0] = "DownloadClick",
        e[e.DownloadRetryClick = 1] = "DownloadRetryClick",
        e[e.DownloadCancelClick = 2] = "DownloadCancelClick",
        e[e.DownloadFailure = 3] = "DownloadFailure",
        e[e.OpenClick = 4] = "OpenClick"
    }(r = t.FileAction || (t.FileAction = {}));
    class a extends n.MessageTelemetryBase {
        constructor(e, t, i) {
            super(i, i.conversationId),
            this._action = e,
            this._fileType = t;
            const n = s.getClientMessageId(i);
            this._clientMessageId = n || ""
        }
        getEventName() {
            return "file_action"
        }
        getEventTraceMode() {
            return o.TelemetryTraceMode.EventName
        }
        getCorrelationAttributes() {
            const e = super.getCorrelationAttributes();
            return e.Client_Message_Id = this._clientMessageId,
            e
        }
        getAttributes() {
            const e = super.getAttributes();
            e.file_type = this._fileType;
            let t = r[this._action];
            return this._action === r.OpenClick && (t = "open_click"),
            e.action = t,
            e
        }
        _useOldAttributeNames() {
            return !0
        }
    }
    class l extends a {
        constructor(e, t, i, n, o) {
            super(e, t, i),
            this._fileSize = n,
            this._fileSizeRaw = o
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.file_size = this._fileSize,
            e.file_size_bytes = this._fileSizeRaw,
            e
        }
    }
    t.FileDownloadClick = class extends l {
        constructor(e, t, i, n) {
            super(r.DownloadClick, e, t, i, n)
        }
    }
    ;
    t.FileDownloadRetryClick = class extends l {
        constructor(e, t, i, n) {
            super(r.DownloadRetryClick, e, t, i, n)
        }
    }
    ;
    t.FileDownloadCancelClick = class extends l {
        constructor(e, t, i, n) {
            super(r.DownloadCancelClick, e, t, i, n)
        }
    }
    ;
    t.FileDownloadFailure = class extends l {
        constructor(e, t, i, n) {
            super(r.DownloadFailure, e, t, i, n)
        }
    }
    ;
    t.FileOpenClick = class extends a {
        constructor(e, t) {
            super(r.OpenClick, e, t),
            this._serverMessageId = t.getOriginalServerId() || ""
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Clicked_Timestamp = this._eventCreationTime,
            e.Server_Message_Id = this._serverMessageId,
            e
        }
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(52)
      , s = i(51)
      , r = i(42)
      , a = i(58)
      , l = i(5)
      , c = i(4)
      , d = i(24)
      , u = i(44)
      , g = i(432)
      , h = l.lazyProperties({
        modalInnerContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            paddingTop: 10,
            paddingHorizontal: 25,
            paddingBottom: 25
        })
    });
    class p extends s.default {
        constructor() {
            super(...arguments),
            this._closeAnimationEvent = new o.default,
            this._onAnimateCloseModal = ()=>{
                const e = this._getRootViewId();
                this._closeAnimationEvent.fire(()=>this._onCloseModal(e))
            }
        }
        _buildState(e, t) {
            const i = this._getRootViewId();
            return {
                isMobileScreenSize: d.default.isMobileScreenSize(i)
            }
        }
        static displayModalWithConfig(e) {
            const t = e.isPopup ? r.default.combinedAccessibilityLabel(c.getString("Global.PopupAnnouncement"), e.title) : e.title
              , i = n.createElement(p, {
                title: e.title,
                accessibilityTitle: t,
                content: e.content,
                modalHeight: e.modalHeight,
                modalWidth: e.modalWidth,
                isPresentedInDesktopSubview: !0
            });
            a.default.showModal(i, "desktopModal", {
                rootViewId: e.rootViewId
            })
        }
        static closeModel(e) {
            a.default.dismissModal("desktopModal", e)
        }
        render() {
            const e = {
                onPress: this._onAnimateCloseModal,
                closeButtonType: u.CloseButtonType.Close
            };
            return n.createElement(g, {
                modalTitle: this.props.title,
                modalWidth: this.props.modalWidth || 400,
                modalHeight: this.props.modalHeight || void 0,
                onClickOutside: this._onAnimateCloseModal,
                closeAnimationEvent: this._closeAnimationEvent,
                fullSize: !!this.state.isMobileScreenSize
            }, n.createElement(u.SimplePanelHeader, {
                panelName: this.props.title,
                accessibleName: this.props.accessibilityTitle,
                leftButton: e,
                useTransparentBackground: !0,
                hideBottomBorder: !0
            }), n.createElement(n.View, {
                style: h.modalInnerContainer
            }, this.props.content))
        }
        _onCloseModal(e) {
            a.default.dismissModal("desktopModal", e)
        }
    }
    t.default = p
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(4)
      , r = i(2764)
      , a = i(12)
      , l = i(109);
    var c;
    !function(e) {
        e.default = "0",
        e.accessibility = "1",
        e.audio = "2",
        e.callDrops = "3",
        e.messagesChat = "4",
        e.notificationsFeed = "5",
        e.performanceCrashing = "6",
        e.profilesProfilePictures = "7",
        e.search = "8",
        e.statusPresence = "9",
        e.videoScreenSharing = "10",
        e.other = "11"
    }(c || (c = {}));
    class d extends a.default {
        constructor() {
            super(...arguments),
            this._reportCategories = [],
            this._onHandleMenuCommand = e=>{
                this.setState({
                    selectedReportCategory: e
                }),
                this.props.onHandleMenuCommand(e)
            }
            ,
            this._isSelected = e=>e === this.state.selectedReportCategory
        }
        componentDidMount() {
            super.componentDidMount(),
            n.each(c, e=>{
                e !== c.default && this._reportCategories.push({
                    label: this._getCategoryName(e),
                    value: e
                })
            }
            )
        }
        _buildState(e, t) {
            return {
                items: this._reportCategories,
                selectedReportCategory: t ? c.default : this.state.selectedReportCategory
            }
        }
        render() {
            return o.createElement(r.MultilineListPicker, {
                colorThemeOverride: l.Theme.ColorfulDark,
                id: "reportCategoryPickerMenu",
                items: this._reportCategories,
                rowTitle: s.getString("FeedbackMechanism.FeedbackCategoryRowTitle"),
                isItemSelected: this._isSelected,
                onHandleItemSelection: this._onHandleMenuCommand,
                selectedItemLabel: this._getSelectedItemLabel()
            })
        }
        _getCategoryName(e) {
            switch (e) {
            case c.accessibility:
                return s.getString("FeedbackMechanism.FeedbackCategoryAccessibility");
            case c.audio:
                return s.getString("FeedbackMechanism.FeedbackCategoryAudio");
            case c.callDrops:
                return s.getString("FeedbackMechanism.FeedbackCategoryCallDrops");
            case c.messagesChat:
                return s.getString("FeedbackMechanism.FeedbackCategoryMessagesChat");
            case c.notificationsFeed:
                return s.getString("FeedbackMechanism.FeedbackCategoryNotificationsFeed");
            case c.performanceCrashing:
                return s.getString("FeedbackMechanism.FeedbackCategoryPerformanceCrashing");
            case c.profilesProfilePictures:
                return s.getString("FeedbackMechanism.FeedbackCategoryProfilesProfilePictures");
            case c.search:
                return s.getString("FeedbackMechanism.FeedbackCategorySearch");
            case c.statusPresence:
                return s.getString("FeedbackMechanism.FeedbackCategoryStatusPresence");
            case c.videoScreenSharing:
                return s.getString("FeedbackMechanism.FeedbackCategoryVideoOrScreenSharing");
            case c.other:
                return s.getString("FeedbackMechanism.FeedbackCategoryOther");
            default:
                return s.getString("FeedbackMechanism.FeedbackCategoryDefault")
            }
        }
        _getSelectedItemLabel() {
            const e = n.find(this._reportCategories, e=>e.value === this.state.selectedReportCategory);
            return e ? e.label : this._getCategoryName(c.default)
        }
    }
    t.FeedbackCategoryPicker = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(42)
      , s = i(10)
      , r = i(523)
      , a = i(5)
      , l = i(4)
      , c = i(76)
      , d = i(103)
      , u = i(73)
      , g = (i(14),
    i(15))
      , h = i(12)
      , p = a.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            justifyContent: "center"
        }),
        content: ()=>n.Styles.createViewStyle({
            justifyContent: "space-between",
            flexDirection: "row",
            alignItems: "center",
            alignSelf: "stretch"
        }),
        button: ()=>n.Styles.createButtonStyle({
            flexDirection: "row",
            alignItems: "stretch"
        }),
        chevron: ()=>n.Styles.createTextStyle({
            marginTop: 4
        }),
        withCaption: ()=>n.Styles.createViewStyle({
            marginTop: 10,
            marginBottom: 5
        })
    });
    class m extends h.default {
        constructor() {
            super(...arguments),
            this._onPickerButtonRef = e=>{
                this._pickerButton = e || void 0
            }
            ,
            this._onPickerClick = e=>{
                const t = {
                    anchor: ()=>this._pickerButton,
                    useTheme: !0,
                    positionPriorities: ["bottom", "top"]
                };
                return u.default.showWithOptions({
                    id: this.props.id,
                    config: t,
                    getMenuItems: this._getMenuItems,
                    handleMenuCommand: this._onHandleMenuCommand,
                    rootViewId: this._getRootViewId(),
                    invokingEvent: e
                })
            }
            ,
            this._getMenuItems = ()=>this.props.items.map(e=>({
                text: e.label,
                command: e.value,
                selected: this.props.isItemSelected(e.value),
                isCheckbox: !0
            })),
            this._onHandleMenuCommand = e=>{
                e !== u.SXActionMenuCancel && this.props.onHandleItemSelection(e)
            }
        }
        _buildState(e, t) {
            return {
                isMobileScreenReaderEnabled: c.default.isMobileScreenReaderEnabled()
            }
        }
        render() {
            const e = o.default.combinedAccessibilityLabel(this.props.rowTitle + ", " + this.props.selectedItemLabel, l.getString("Global.SelectedAccessibilityLabel"))
              , t = [p.container, s.ListItem.small.shortHeightStyle, this.props.style];
            let i = [p.content];
            const a = this._getCaption();
            return a && i.push(p.withCaption),
            n.createElement(n.View, {
                style: t
            }, this._getRowTitle(), n.createElement(n.View, {
                style: i
            }, n.createElement(r, {
                ref: this._onPickerButtonRef,
                style: p.button,
                label: this.props.selectedItemLabel,
                useBodyBoldLabel: !0,
                labelMaxWidth: 270,
                chevronStyle: p.chevron,
                onPress: this._onPickerClick,
                accessibilityLabel: e
            })), a)
        }
        _getRowTitle() {
            return n.createElement(n.View, null, n.createElement(g.RowTitle, {
                colorThemeOverride: this.props.colorThemeOverride || this._currentTheme,
                importantForAccessibility: this.state.isMobileScreenReaderEnabled ? n.Types.ImportantForAccessibility.No : void 0
            }, this.props.rowTitle))
        }
        _getCaption() {
            return this.props.caption ? n.createElement(g.Caption, {
                style: d.styles.subtitleMediumSemiLarge
            }, this.props.caption) : void 0
        }
    }
    t.MultilineListPicker = m
}
, , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(7)
      , o = i(6)
      , s = i(1143);
    e.exports = class {
        constructor() {
            this._enabled = !1,
            this._appConfigStoreSubscribeCallback = ()=>{
                this._enabled = o.default.getEngagementFeatures().clientTriggeredEngagement.enabled
            }
        }
        initializeAndPause(e) {
            return o.default.subscribe(this._appConfigStoreSubscribeCallback),
            this._appConfigStoreSubscribeCallback(),
            n.Resolved(void 0)
        }
        respondsTo(e) {
            if (!this._enabled)
                return !1;
            const t = e.getEventName();
            return s.default.isSubscribedToEventName(t)
        }
        supportsEventSampling() {
            return !1
        }
        consumeEvent(e) {
            this._enabled && s.default.processEvent({
                eventName: e.getEventName(),
                attributes: e.getAttributes()
            })
        }
        startUsingUserId() {
            return n.Resolved(void 0)
        }
        flush() {
            return n.Resolved(void 0)
        }
        pause() {}
        resume() {}
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(10)
      , s = i(124)
      , r = i(5)
      , a = i(17)
      , l = i(64)
      , c = i(214)
      , d = i(2779)
      , u = i(8)
      , g = i(12)
      , h = i(9)
      , p = r.lazyProperties({
        parentWindowOverlay: ()=>n.Styles.createViewStyle({
            flex: 1,
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            backgroundColor: u.Color.blackOverlay50
        })
    });
    class m extends g.default {
        constructor() {
            super(...arguments),
            this._onEscapePressed = ()=>{
                var e, t;
                return !!(null === (e = this.props.nativeWindow) || void 0 === e ? void 0 : e.hasFocus()) && (null === (t = this.props.nativeWindow) || void 0 === t || t.close(),
                !0)
            }
        }
        _buildState(e, t) {
            const i = c.default.modalNavigatorIdForComponentContext(this._getContext())
              , n = l.default.getCurrentModalStackNavigationContext(i);
            return {
                activeModalSplitContext: n.isValid() ? n : void 0
            }
        }
        _createContext() {
            const e = super._createContext();
            return e.rootViewId = this.props.rootViewId,
            e.rootViewType = o.RootViewType.NativeWindow,
            e.isPresentedInSplitView = !0,
            e.isPresentedInDesktopSubview = !0,
            e.isPresentedInGenericDesktopModal = !0,
            e.shouldUseThemePreview = !0,
            e
        }
        componentDidMount() {
            super.componentDidMount(),
            s.default.addEscapeHandler(this._onEscapePressed)
        }
        componentWillUnmount() {
            super.componentWillUnmount();
            const e = h.newCauseId();
            return a.closeGenericDesktopModal(e, this._getContext()),
            s.default.removeEscapeHandler(this._onEscapePressed),
            !0
        }
        render() {
            return n.createElement(n.View, {
                style: p.parentWindowOverlay
            }, !!this.props.nativeWindow && n.createElement(d.default, {
                rootViewId: this.props.rootViewId,
                nativeWindow: this.props.nativeWindow
            }))
        }
    }
    t.default = m
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(460)
      , o = i(0)
      , s = i(10)
      , r = i(313)
      , a = i(1593)
      , l = i(709)
      , c = i(64)
      , d = i(214)
      , u = i(1221)
      , g = i(24)
      , h = i(14)
      , p = i(12);
    class m extends p.default {
        constructor() {
            super(...arguments),
            this._onLayout = e=>{
                g.default.putWindowSize(e.width, e.height, this._getRootViewId())
            }
        }
        _buildState(e, t) {
            const i = d.default.modalNavigatorIdForComponentContext(this._getContext())
              , n = c.default.getCurrentModalStackNavigationContext(i);
            return {
                activeModalSplitContext: n && n.isValid() ? n : void 0
            }
        }
        render() {
            const e = this.props.nativeWindow.getWindow();
            return o.createElement(o.View, {
                style: [this._themeStyles.primaryBackgroundColorStyle, h.flexOne],
                onLayout: this._onLayout
            }, o.createElement(a.default, {
                activeModalSplitContext: this.state.activeModalSplitContext,
                showOverflow: !1
            }), e ? o.createElement(n.default, {
                key: "modalFocusOutline",
                window: e
            }) : null, o.createElement(r.DesktopContextMenuTarget, {
                key: "contextmenuanchor"
            }), o.createElement(l, null), o.createElement(u, null))
        }
        _createContext() {
            const e = super._createContext();
            return e.rootViewId = this.props.rootViewId,
            e.rootViewType = s.RootViewType.NativeWindow,
            e.isPresentedInSplitView = !0,
            e.isPresentedInDesktopSubview = !0,
            e.isPresentedInGenericDesktopModal = !0,
            e.shouldUseThemePreview = !0,
            e
        }
    }
    t.default = m
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(1594)
      , s = i(1611)
      , r = i(1156)
      , a = i(832)
      , l = i(1618)
      , c = i(1619)
      , d = i(1620)
      , u = i(1160)
      , g = i(1621)
      , h = i(1623)
      , p = i(2881)
      , m = i(482)
      , S = i(2887)
      , C = i(871)
      , y = i(1647)
      , f = i(1167)
      , _ = i(1652)
      , b = i(1653)
      , v = i(1655)
      , T = i(863)
      , P = i(1657)
      , A = i(1169)
      , k = i(1658)
      , I = i(1659)
      , w = i(1663)
      , N = i(879)
      , M = i(1670)
      , E = i(1672)
      , x = i(1673)
      , D = i(2917)
      , L = i(2918)
      , R = i(2919)
      , B = i(1675)
      , O = i(1184)
      , F = i(225)
      , V = i(2926)
      , U = i(2929)
      , H = i(2962)
      , W = i(1708)
      , z = i(345)
      , G = i(1715)
      , K = i(1716)
      , j = i(1720)
      , q = i(1721)
      , Q = i(1722)
      , X = i(1723)
      , J = i(1750)
      , $ = i(2)
      , Y = i(1752)
      , Z = i(1754)
      , ee = i(1755)
      , te = i(895)
      , ie = i(1757)
      , ne = i(1758)
      , oe = i(896)
      , se = i(1769)
      , re = i(1770)
      , ae = i(1525)
      , le = i(20)
      , ce = i(55)
      , de = i(1771)
      , ue = i(1772)
      , ge = i(1773)
      , he = i(91)
      , pe = i(1774)
      , me = i(1775)
      , Se = i(893)
      , Ce = i(1776)
      , ye = i(1777)
      , fe = i(1778)
      , _e = i(1779)
      , be = i(897)
      , ve = i(1781)
      , Te = i(343)
      , Pe = i(1218)
      , Ae = i(1782)
      , ke = i(1783)
      , Ie = i(1784)
      , we = i(1785)
      , Ne = i(1219)
      , Me = i(1786)
      , Ee = i(1194)
      , xe = i(1787)
      , De = i(1788)
      , Le = i(1789)
      , Re = i(1790)
      , Be = i(1791)
      , Oe = i(1792)
      , Fe = i(1793)
      , Ve = i(1794)
      , Ue = i(1195)
      , He = i(1795)
      , We = i(1796)
      , ze = i(1797)
      , Ge = i(1798)
      , Ke = i(1799);
    t.default = class {
        static renderComponent(e, t) {
            var i, je;
            let qe, Qe;
            if (e instanceof ce.PSTNDialerNavigationContext)
                qe = n.createElement(K, Object.assign({
                    prefilledNumber: e.state.prefilledNumber,
                    conversationId: e.state.conversationId,
                    callId: e.state.callId,
                    reopenOnInvalidNumber: e.state.navigationSource === $.DialerNavigationSource.CallFailedInvalidNumber
                }, t)),
                Qe = K.getHeaderText();
            else if (e instanceof ce.QuickCallNavigationContext)
                qe = n.createElement(be, Object.assign({
                    conversationId: e.state.conversationId,
                    callId: e.state.callId,
                    newGroup: e.state.newGroup,
                    searchOnly: e.state.searchOnly
                }, t));
            else if (e instanceof ce.GetBalanceStateNavigationContext)
                qe = n.createElement(C.default, Object.assign({
                    showHeader: !0,
                    source: e.state.source,
                    scrollTo: e.state.scrollTo
                }, t)),
                Qe = C.default.getHeaderText();
            else if (e instanceof ce.PurchaseContinuationNavigationContext)
                qe = n.createElement(_e, Object.assign({
                    offerType: e.state.offerType,
                    campaignRef: e.state.campaignRef
                }, t)),
                Qe = _e.getHeaderText(e.state.offerType);
            else if (e instanceof ce.SubscriptionIntroNavigationContext)
                qe = n.createElement(Fe.default, Object.assign({}, t)),
                Qe = Fe.default.getHeaderText();
            else if (e instanceof ce.CallerIdPromptContext)
                qe = n.createElement(_.default, Object.assign({
                    dialogId: "callerIdDialog"
                }, t)),
                Qe = _.default.getHeaderText();
            else if (e instanceof ce.CallFailurePromptContext)
                qe = n.createElement(v.default, Object.assign({
                    dialogId: "pstnDialog",
                    phoneNumber: e.state.phoneNumber,
                    reason: e.state.reason
                }, t)),
                Qe = v.default.getHeaderText();
            else if (e instanceof ce.SmsFailurePromptContext)
                qe = n.createElement(Re.default, Object.assign({
                    dialogId: "smsDialog",
                    phoneNumber: e.state.phoneNumber,
                    isSmsInfo: e.state.isSmsInfo
                }, t)),
                Qe = Re.default.getHeaderText(e.state.isSmsInfo);
            else if (e instanceof ce.TasterPostCallPanelContext)
                qe = n.createElement(He.default, Object.assign({
                    dialogId: "taster"
                }, t)),
                Qe = He.default.getHeaderText();
            else if (e instanceof ce.CallFailurePostPurchasePromptContext)
                qe = n.createElement(b.default, Object.assign({
                    dialogId: "successfulPurchaseDialog",
                    phoneNumber: e.state.phoneNumber
                }, t)),
                Qe = b.default.getHeaderText();
            else if (e instanceof ce.DesktopSettingsGroupNavigationContext)
                qe = n.createElement(U.default, Object.assign({
                    key: e.state.group,
                    group: e.state.group
                }, t)),
                e.state.group !== ce.SettingsGroup.AccountAndProfile && (Qe = U.default.getHeaderText(e.state.group, !!t && !!t.isPresentedInSplitView));
            else if (e instanceof ce.ManageUsersSettingsPanelNavigationContext)
                qe = n.createElement(ne, Object.assign({}, t)),
                Qe = ne.getHeaderText();
            else if (e instanceof ce.DesktopCortanaNotebookNavigationContext)
                qe = n.createElement(R.default, Object.assign({
                    notebookUrl: e.state.notebookUrl,
                    cortanaAccessToken: e.state.cortanaAccessToken
                }, t)),
                Qe = R.default.getHeaderText();
            else if (e instanceof ce.MySettingsNavigationContext)
                qe = n.createElement(V, Object.assign({}, t));
            else if (e instanceof ce.DesktopCloseAccountNavigationContext)
                qe = n.createElement(L, Object.assign({}, t)),
                Qe = L.getHeaderText();
            else if (e instanceof ce.CreateConversationNavigationContext)
                qe = n.createElement(ke, Object.assign({
                    navigator: e.navigator
                }, t)),
                Qe = ke.getHeaderText((null === (je = null === (i = e.navigator) || void 0 === i ? void 0 : i.context) || void 0 === je ? void 0 : je.navigationOrigin) === $.NavigationConversationOrigin.NewModeratedGroup);
            else if (e instanceof ce.ConversationParticipantsNavigationContext)
                qe = n.createElement(Ie, Object.assign({
                    key: "setconvparticipants" + e.state.isSuperComposer
                }, e.state, {
                    navigator: e.navigator
                }, t));
            else if (e instanceof ce.DetailsNavigationContext)
                qe = n.createElement(W.DetailsPanel, Object.assign({
                    key: "details",
                    mri: e.state.mri,
                    conversationId: e.state.conversationId,
                    showConversationSettings: !!e.state.showConversationSettings,
                    origin: e.state.origin || z.DetailsPanelOrigin.Unknown
                }, t));
            else if (e instanceof ce.ChatConfigNavigationContext)
                qe = n.createElement(I.default, Object.assign({
                    key: "chatSettings",
                    mri: e.state.mri,
                    conversationId: e.state.conversationId
                }, t)),
                Qe = I.default.getHeaderText();
            else if (e instanceof ce.BotsListNavigationContext)
                qe = n.createElement(u, Object.assign({
                    filterFunction: e.state.filterBotsFunction,
                    showHeader: !0,
                    sortByProperty: e.state.sortBotsByProperty,
                    title: e.state.botMarketplaceTitle
                }, t));
            else if (e instanceof ce.BotDiscoveryNavigationContext)
                qe = n.createElement(d, Object.assign({}, t)),
                Qe = d.getHeaderText();
            else if (e instanceof ce.ShareContactsToConversationContext)
                qe = n.createElement(we, Object.assign({
                    key: "shareContactsToConversation",
                    panelTitle: e.state.panelTitle,
                    accessibilityLabelTitle: e.state.accessibilityLabelTitle,
                    userMrisToExclude: e.state.userMrisToExclude,
                    entryPoint: e.state.entryPoint,
                    conversationId: e.state.conversationId,
                    onShareComplete: e.state.onShareComplete
                }, t)),
                Qe = e.state.panelTitle;
            else if (e instanceof ce.ShareWithPanelNavigationContext)
                qe = n.createElement(Ne, Object.assign({
                    key: "shareWithPanel",
                    multipleMessagesParameters: e.state.multipleMessageParameters,
                    onShareComplete: e.state.onShareComplete,
                    onPostComplete: e.state.onPostComplete,
                    shareMessageTitle: e.state.shareMessageTitle,
                    accessibilityLabelTitle: e.state.accessibilityLabelTitle,
                    onShareCancel: e.state.onShareCancel,
                    userMrisToExclude: e.state.userMrisToExclude,
                    enableMediaPreview: e.state.enableMediaPreview,
                    sharePreviewType: e.state.sharePreviewType,
                    showForwardPreview: e.state.showForwardPreview,
                    entryPoint: e.state.entryPoint
                }, t));
            else if (e instanceof ce.CaptivePortalQuestionnaireContext)
                qe = n.createElement(k.default, Object.assign({
                    key: "captivePortalQuestionnaire"
                }, t)),
                Qe = k.default.getHeaderText();
            else if (e instanceof ce.PesSearchNavigationContext)
                e.state.searchType === he.TabType.Emoticon ? qe = n.createElement(X.EmoticonSearchPanel, {
                    searchType: e.state.searchType,
                    conversationId: e.state.conversationId,
                    onMessageSent: e.state.onMessageSent,
                    onCloseSearch: e.state.onCloseSearch,
                    clearEditInChatsComposer: e.state.clearEditInChatsComposer,
                    isPresentedInDesktopSubview: !0
                }) : e.state.searchType === he.TabType.Moji ? qe = n.createElement(se.MojiSearchPanel, {
                    searchType: e.state.searchType,
                    conversationId: e.state.conversationId,
                    isPresentedInDesktopSubview: !0
                }) : e.state.searchType === he.TabType.ChatSticker && (qe = n.createElement(Oe.StickerSearchPanel, {
                    searchType: e.state.searchType,
                    conversationId: e.state.conversationId,
                    isPresentedInDesktopSubview: !0
                }));
            else if (e instanceof ce.UserProfileContext)
                qe = n.createElement(Ke.default, Object.assign({
                    origin: e.state.origin,
                    isFirstLogin: e.state.isFirstLogin,
                    closeButtonIcon: e.state.closeButtonIcon,
                    scenarioNavigator: e.navigator
                }, t));
            else if (e instanceof ce.ThemeContext)
                qe = n.createElement(We.default, Object.assign({
                    origin: e.state.origin,
                    hideSkipButton: e.state.hideSkipButton,
                    hideCloseButton: e.state.hideCloseButton,
                    isFirstLogin: e.state.isFirstLogin,
                    closeButtonIcon: e.state.closeButtonIcon,
                    nextButtonIcon: e.state.nextButtonIcon,
                    scenarioNavigator: e.navigator
                }, t)),
                Qe = We.default.getHeaderText();
            else if (e instanceof ce.InviteLinkQRPanelNavigationContext)
                qe = n.createElement(q.default, Object.assign({
                    inviteLink: e.state.inviteLink,
                    displayName: e.state.displayName
                }, t)),
                Qe = q.default.getHeaderText();
            else if (e instanceof ce.AVSettingsContext) {
                const i = e.state.settingsMode || m.SettingsMode.All;
                qe = n.createElement(p, Object.assign({
                    key: i,
                    origin: e.state.origin,
                    hideSkipButton: !!e.state.hideSkipButton,
                    isFirstLogin: !!e.state.isFirstLogin,
                    hideCloseButton: !!e.state.hideCloseButton,
                    closeButtonIcon: e.state.closeButtonIcon,
                    nextButtonIcon: e.state.nextButtonIcon,
                    scenarioNavigator: e.navigator,
                    settingsMode: i
                }, t)),
                Qe = p.getHeaderText(i)
            } else
                e instanceof ce.ChooseAvatarContext ? qe = n.createElement(h, Object.assign({
                    origin: e.state.origin,
                    hideSkipButton: e.state.hideSkipButton,
                    isFirstLogin: e.state.isFirstLogin,
                    hideCloseButton: e.state.hideCloseButton,
                    closeButtonIcon: e.state.closeButtonIcon,
                    nextButtonIcon: e.state.nextButtonIcon,
                    scenarioNavigator: e.navigator,
                    showCaptureViewFirst: e.state.showCaptureViewFirst
                }, t)) : e instanceof ce.ChooseAvatarCommonPickerContext ? qe = n.createElement(g, Object.assign({
                    origin: e.state.origin,
                    hideSkipButton: e.state.hideSkipButton,
                    isFirstLogin: e.state.isFirstLogin,
                    hideCloseButton: e.state.hideCloseButton,
                    closeButtonIcon: e.state.closeButtonIcon,
                    nextButtonIcon: e.state.nextButtonIcon,
                    scenarioNavigator: e.navigator,
                    showCaptureViewFirst: e.state.showCaptureViewFirst
                }, t)) : e instanceof ce.ContactsPanelV2NavigationContext ? (qe = n.createElement(N, Object.assign({
                    initialTab: e.state.currentTab
                }, t)),
                Qe = N.getHeaderText()) : e instanceof ce.AddContactPanelNavigationContext ? (qe = n.createElement(s, Object.assign({}, t, {
                    origin: e.state.origin
                })),
                Qe = s.getHeaderText()) : e instanceof ce.DesktopMsaPhoneAccrualNavigationContext ? qe = n.createElement(ae.default, Object.assign({
                    phoneNumber: e.state.phoneNumber,
                    email: e.state.email,
                    isEmailAccrual: e.state.isEmailAccrual
                }, t)) : e instanceof ce.SearchNavigationContext ? qe = n.createElement(Pe, Object.assign({
                    searchPanelInitiator: e.state.searchOrigin,
                    isPresentedInModal: !0,
                    modalTitle: e.state.modalTitle
                }, t)) : e instanceof ce.SendMoneyPanelNavigationContext ? (qe = n.createElement(re, Object.assign({
                    key: "moneyDashboard",
                    viewId: e.state.viewId,
                    entry: e.state.entry,
                    conversationId: e.state.conversationId,
                    orderId: e.state.orderId,
                    displayInModal: !0
                }, t)),
                Qe = re.getHeaderText()) : e instanceof ce.CallingSettingsEntryNavigationContext ? qe = n.createElement(D.DesktopCallingSettingsWebPanel, Object.assign({
                    link: e.state.link,
                    source: e.state.source,
                    title: e.state.title,
                    goTarget: e.state.goTarget,
                    enableWebViewBackNavigation: e.state.enableWebViewBackNavigation,
                    titleAccessibilityRegion: e.state.titleAccessibilityRegion
                }, t)) : e instanceof ce.SkypeNumberWebFlowNavigationContext ? qe = n.createElement(D.DesktopCallingSettingsWebPanel, Object.assign({}, e.state, t)) : e instanceof ce.Payments3dsNavigationContext ? (qe = n.createElement(de.Payments3dsWebPanel, Object.assign({}, e.state, t)),
                Qe = de.Payments3dsWebPanel.getHeaderText()) : e instanceof ce.SkypeNumberPanelNavigationContext ? (qe = n.createElement(Ee.default, Object.assign({}, t)),
                Qe = Ee.default.getHeaderText()) : e instanceof ce.SkypeNumberPanelPurchaseFlowNavigationContext ? (qe = n.createElement(De.default, Object.assign({}, t)),
                Qe = Ee.default.getHeaderText()) : e instanceof ce.CallingSettingsPanelNavigationContext ? (qe = n.createElement(T.default, Object.assign({}, t)),
                Qe = T.default.getHeaderText()) : e instanceof ce.BackgroundEffectsSettingsNavigationContext ? (qe = n.createElement(S.default, Object.assign({}, t)),
                Qe = T.default.getHeaderText()) : e instanceof ce.AdvancedCallingSettingsPanelNavigationContext ? (qe = n.createElement(c.default, Object.assign({}, t)),
                Qe = c.default.getHeaderText()) : e instanceof ce.SubtitlesCallingSettingsPanelNavigationContext ? (qe = n.createElement(Ve.default, Object.assign({}, t)),
                Qe = Ve.default.getHeaderText()) : e instanceof ce.TranslationSettingsPanelNavigationContext ? (qe = n.createElement(Ge.default, Object.assign({}, t)),
                Qe = Ge.default.getHeaderText()) : e instanceof ce.CallRosterNavigationContext ? (qe = n.createElement(P.default, Object.assign({
                    key: "CallRosterPanel",
                    conversationId: e.state.conversationId,
                    callId: e.state.callId
                }, t)),
                Qe = P.default.getHeaderText()) : e instanceof ce.AddToCallNavigationContext ? qe = n.createElement(be, Object.assign({
                    key: "quickCallPanel",
                    conversationId: e.state.conversationId,
                    callId: e.state.callId,
                    searchOnly: e.state.searchOnly,
                    addToCallTelemetryOrigin: e.state.origin,
                    newGroup: e.state.newGroup
                }, t)) : e instanceof ce.DiagnosticToolsNavigationContext ? (qe = n.createElement(G.default, Object.assign({}, t)),
                Qe = G.default.getHeaderText()) : e instanceof ce.SendDiagnosticLogsNavigationContext ? (qe = n.createElement(Ae.default, Object.assign({}, t)),
                Qe = Ae.default.getHeaderText()) : e instanceof ce.BlockedUsersListNavigationContext ? (qe = n.createElement(y.default, Object.assign({}, t)),
                Qe = y.default.getHeaderText()) : e instanceof ce.ConnectedUsersListNavigationContext ? (qe = n.createElement(w.default, Object.assign({}, t)),
                Qe = w.default.getHeaderText()) : e instanceof ce.ProfilePicturePanelNavigationContext ? (qe = n.createElement(ye.default, Object.assign({}, t)),
                Qe = ye.default.getHeaderText()) : e instanceof ce.SyncAddressBookContext ? qe = n.createElement(Ue, Object.assign({
                    origin: e.state.origin,
                    hideSkipButton: e.state.hideSkipButton,
                    hideCloseButton: e.state.hideCloseButton,
                    isFirstLogin: e.state.isFirstLogin,
                    closeButtonIcon: e.state.closeButtonIcon,
                    nextButtonIcon: e.state.nextButtonIcon,
                    scenarioNavigator: e.navigator,
                    compositeNavContainerWidth: F.DefaultWidth
                }, t)) : e instanceof ce.PeopleYouMayKnowNoticeContext ? (qe = n.createElement(ge, Object.assign({
                    origin: e.state.origin,
                    hideSkipButton: e.state.hideSkipButton,
                    hideCloseButton: e.state.hideCloseButton,
                    isFirstLogin: e.state.isFirstLogin,
                    closeButtonIcon: e.state.closeButtonIcon,
                    nextButtonIcon: e.state.nextButtonIcon,
                    scenarioNavigator: e.navigator,
                    compositeNavContainerWidth: F.DefaultWidth
                }, t)),
                Qe = ge.getHeaderText()) : e instanceof ce.PnvEnterNumberContext ? qe = n.createElement(me.default, {
                    compositeNavContainerWidth: F.DefaultWidth,
                    initialPhoneNumber: e.state.phoneNumber,
                    isPresentedInDesktopSubview: !0
                }) : e instanceof ce.PnvEnterCodeContext ? qe = n.createElement(pe.default, Object.assign({
                    compositeNavContainerWidth: F.DefaultWidth
                }, t)) : e instanceof ce.EffectsPrivacyNavigationContext ? (qe = n.createElement(Q.default, Object.assign({
                    showHeader: !0
                }, t)),
                Qe = Q.default.getHeaderText()) : e instanceof ce.FeatureFlagListNavigationContext ? qe = n.createElement(Y.default, Object.assign({}, t)) : e instanceof ce.SlimcoreFlagListNavigationContext ? qe = n.createElement(Le.default, Object.assign({}, t)) : e instanceof ce.RawPreferencesNavigationContext ? qe = n.createElement(ve.default, Object.assign({}, t)) : e instanceof ce.LanguagePickerPanelNavigationContext ? (qe = n.createElement(ee.default, Object.assign({}, t)),
                Qe = ee.default.getHeaderText()) : e instanceof ce.ManageSearchInfoPanelNavigationContext ? qe = n.createElement(ie.default, Object.assign({}, t, {
                    origin: e.state.origin
                })) : e instanceof ce.LoadingPanelNavigationContext ? qe = n.createElement(te, {
                    isPresentedInDesktopSubview: !0,
                    message: e.state.message
                }) : e instanceof ce.DiscoverPeoplePanelNavigationContext ? (qe = n.createElement(j, Object.assign({}, t, {
                    origin: e.state.origin
                })),
                Qe = j.getHeaderText()) : e instanceof ce.PSTNCountrySelectorNavigationContext ? (qe = n.createElement(E, Object.assign({}, t, {
                    onCountrySelected: e.state.onCountrySelected,
                    countriesFiltered: e.state.countriesFiltered,
                    hideRecentCountries: e.state.hideRecentCountries
                })),
                Qe = E.getHeaderText()) : e instanceof ce.SkypeNumberCountryAreaSelectorNavigationContext ? (qe = n.createElement(Me, Object.assign({}, t, {
                    onCountryAreaSelected: e.state.onCountryAreaSelected
                })),
                Qe = Me.getHeaderText()) : e instanceof ce.SkypeNumberPrefixSelectorNavigationContext ? (qe = n.createElement(xe, Object.assign({}, t, {
                    onPrefixSelected: e.state.onPrefixSelected
                })),
                Qe = xe.getHeaderText()) : e instanceof ce.ThirdPartyNoticesNavigationContext ? (qe = n.createElement(ze, Object.assign({}, t)),
                Qe = ze.getHeaderText()) : e instanceof ce.PromptPermissionContext ? qe = n.createElement(fe, Object.assign({
                    origin: e.state.origin,
                    showUIPrompts: !0,
                    scenarioNavigator: e.navigator,
                    hideCloseButton: e.state.hideCloseButton
                }, t)) : e instanceof ce.SettingsMenuContext ? (qe = n.createElement(H, Object.assign({
                    title: e.state.title
                }, t)),
                Qe = H.getHeaderText()) : e instanceof ce.ActiveNowPanelNavigationContext ? (qe = n.createElement(o, Object.assign({}, t)),
                Qe = o.getHeaderText()) : e instanceof ce.InviteShareNavigationContext ? (qe = n.createElement(Ce.default, Object.assign({
                    skypeMri: e.state.mri,
                    displayName: e.state.displayName,
                    origin: e.state.origin
                }, t)),
                Qe = Ce.default.getHeaderText()) : e instanceof ce.ConversationShareNavigationContext ? (qe = n.createElement(M.default, Object.assign({
                    displayName: e.state.displayName,
                    skypeMri: e.state.mri,
                    origin: e.state.origin
                }, t)),
                Qe = M.default.getHeaderText()) : e instanceof ce.GuestUpsellNavigationContext ? (qe = n.createElement(Z.GuestUpsellPanel, Object.assign({}, t)),
                Qe = Z.GuestUpsellPanel.getHeaderText()) : e instanceof ce.AboutPeopleYouMayKnowNavigationContext ? qe = n.createElement(ue.default, Object.assign({}, t)) : e instanceof ce.AddPhoneNumberPanelNavigationContext ? (qe = n.createElement(l, Object.assign({}, t, {
                    origin: e.state.origin,
                    contactMriToEdit: e.state.contactMriToEdit,
                    phoneNumbers: e.state.phoneNumbers,
                    contactName: e.state.contactName,
                    onSave: e.state.onSave,
                    onCancel: e.state.onCancel
                })),
                Qe = l.getHeaderText(e.state.origin)) : e instanceof ce.EngagementSharePanelContext ? qe = n.createElement(J, Object.assign({
                    key: "engagementSharePanel",
                    onShareComplete: e.state.onShareComplete,
                    onPostComplete: e.state.onPostComplete,
                    onShareCancel: e.state.onShareCancel,
                    shareableContentConfigs: e.state.shareableContentConfigs,
                    accessibilityLabelTitle: e.state.accessibilityLabelTitle,
                    userMrisToExclude: e.state.userMrisToExclude
                }, t)) : e instanceof ce.MeControlNavigationContext ? qe = n.createElement(O, Object.assign({
                    key: "DesktopMeControlPanel",
                    userMri: le.getSkypeMri()
                }, t)) : e instanceof Te.default.NavigationContext.ScheduleCallNavigationContext ? (Qe = Te.default.StackNavigator.getHeaderText(),
                qe = Te.default.StackNavigator.renderSceneContent(e, t)) : e instanceof oe.default.NavigationContext.MeetNowNavigationContext ? (Qe = oe.default.StackNavigator.getHeaderText(),
                qe = oe.default.StackNavigator.renderSceneContent(e, t)) : e instanceof Se.default.NavigationContext.PollCreationPanelNavigationContext || e instanceof Se.default.NavigationContext.PollSummaryPanelNavigationContext || e instanceof Se.default.NavigationContext.PollVotersListPanelNavigationContext ? (qe = Se.default.StackNavigator.renderSceneContent(e, t),
                Qe = Se.default.StackNavigator.getHeaderText()) : e instanceof a.OneDriveAddinPanelNavigationContext ? (Qe = e.state.integration.name,
                qe = r.default.AddinStackNavigator.renderSceneContent(e, t)) : e instanceof ce.LocationPickerContext ? (Qe = B.getHeaderText(),
                qe = n.createElement(B, Object.assign({
                    conversationId: e.state.conversationId,
                    displayInModal: !0
                }, t))) : e instanceof ce.InAppBrowserNavigationContext ? qe = n.createElement(f, Object.assign({}, e.state, t)) : e instanceof ce.CallingDebugPanelNavigationContext ? qe = n.createElement(A.default, {
                    callId: e.state.callId || "",
                    nativeWindow: e.state.nativeWindow || !1
                }) : e instanceof ce.CustomReactionsPanelNavigationContext ? qe = n.createElement(x.CustomReactionsPanel, Object.assign({}, t)) : e instanceof ce.SpeechConsentNavigationContext && (qe = n.createElement(Be.default, Object.assign({}, t)));
            return qe ? {
                component: qe,
                title: Qe
            } : void 0
        }
    }
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        constructor(e) {
            super(),
            this._connectType = e
        }
        getEventName() {
            return "people_search_connect_on_skype"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this._connectType,
            e
        }
    }
    t.ConnectOnSkypeTelemetryEvents = o
}
, , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(106)
      , o = i(129);
    var s;
    !function(e) {
        e.MaybeLaterClicked = "MaybeLaterClicked",
        e.SureClicked = "SureClicked",
        e.AuthorizationCancelled = "AuthorizationCancelled",
        e.AuthorizationComplete = "AuthorizationComplete",
        e.AuthorizationFailed = "AuthorizationFailed",
        e.AuthorizationTimedOut = "AuthorizationTimedOut",
        e.ViewLearnMore = "ViewLearnMore"
    }(s || (s = {}));
    t.SuggestionsConsentScenario = class {
        constructor() {
            this._scenario = new o.default(n.ScenarioName.SuggestionsConsent),
            this._scenario.setDuplicateStepMarkingEnabled(),
            this._scenario.start()
        }
        maybeLaterClicked() {
            this._scenario.markStepCompleted(s.MaybeLaterClicked),
            this._scenario.finish()
        }
        sureClicked() {
            this._scenario.markStepCompleted(s.SureClicked)
        }
        authorizationCancelled() {
            this._scenario.markStepCompleted(s.AuthorizationCancelled),
            this._scenario.finish()
        }
        authorizationComplete() {
            this._scenario.markStepCompleted(s.AuthorizationComplete),
            this._scenario.finish()
        }
        authorizationFailed() {
            this._scenario.markStepCompleted(s.AuthorizationFailed),
            this._scenario.finish()
        }
        authorizationTimedOut() {
            this._scenario.markStepCompleted(s.AuthorizationTimedOut),
            this._scenario.finish()
        }
        viewLearnMore() {
            this._scenario.markStepCompleted(s.ViewLearnMore)
        }
    }
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(143)
      , s = i(80)
      , r = i(5)
      , a = i(341)
      , l = i(4)
      , c = i(8)
      , d = i(12)
      , u = r.lazyProperties({
        checkboxButton: ()=>n.Styles.createViewStyle({
            flexDirection: "column",
            alignSelf: "flex-start",
            alignItems: "center",
            justifyContent: "center"
        }),
        checkboxLabel: ()=>n.Styles.createTextStyle({
            flex: -1,
            color: c.Color.white,
            marginLeft: 5,
            lineHeight: 24
        }),
        checkboxButtonView: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignSelf: "flex-start"
        }),
        secondaryTextStyle: ()=>n.Styles.createTextStyle({
            paddingTop: 4,
            paddingLeft: 40,
            alignSelf: "stretch"
        })
    });
    class g extends d.default {
        constructor() {
            super(...arguments),
            this._onButtonRef = e=>{
                this._componentRef = e || void 0
            }
            ,
            this._onViewRef = e=>{
                this._componentRef = e || void 0
            }
            ,
            this._onKeyPress = e=>o.default.maybeHandleKeyPress(e, ()=>{
                this._onPress(e)
            }
            ),
            this._onPress = e=>{
                e.stopPropagation();
                this.props.onShouldToggleCheckbox(!!this.props.value);
                this.props.onPress && this.props.onPress(e)
            }
        }
        requestFocus() {
            this._componentRef && this._componentRef.requestFocus()
        }
        render() {
            const e = [n.Types.AccessibilityTrait.CheckBox];
            let t = "";
            this.props.value && e.push(n.Types.AccessibilityTrait.Checked),
            this.props.accessibilityLabelPrefix && (t += this.props.accessibilityLabelPrefix + ", ");
            const i = n.Button
              , o = this._onButtonRef;
            return t += this.props.text,
            this.props.secondaryText && (t += " " + this.props.secondaryText),
            this.props.disable && (t += ". " + l.getString("AccessibilityLabel.Disabled")),
            n.createElement(i, {
                ref: o,
                style: [u.checkboxButton, this.props.style],
                onPress: this.props.disable ? void 0 : this._onPress,
                onKeyPress: void 0,
                accessibilityTraits: e,
                accessibilityLabel: t,
                tabIndex: void 0,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes
            }, n.createElement(s.default, {
                style: u.checkboxButtonView
            }, n.createElement(a, {
                isOn: !!this.props.value,
                disable: this.props.disable,
                disableSelectionAnimation: this.props.disableSelectionAnimation
            }), n.createElement(n.Text, {
                style: [u.checkboxLabel, this.props.textStyle]
            }, this.props.text)), this._secondaryText())
        }
        _secondaryText() {
            if (this.props.secondaryText)
                return n.createElement(s.HiddenText, {
                    style: [u.secondaryTextStyle, this.props.secondaryTextStyle]
                }, this.props.secondaryText)
        }
        _getCheckboxAccessibilityLabel(e, t) {
            const i = this._getCheckboxCheckedState(t);
            return l.getString("FeedbackMechanism.AccLabelCheckbox", {
                checkboxTitle: e,
                state: i
            })
        }
        _getCheckboxCheckedState(e) {
            return e ? l.getString("FeedbackMechanism.AccLabelCheckboxChecked") : l.getString("FeedbackMechanism.AccLabelCheckboxUnchecked")
        }
    }
    e.exports = g
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(523)
      , a = i(5)
      , l = i(4)
      , c = i(73)
      , d = i(15)
      , u = i(12)
      , g = a.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            justifyContent: "space-between",
            flexDirection: "row",
            alignItems: "center",
            alignSelf: "stretch"
        }),
        button: ()=>o.Styles.createButtonStyle({
            flexDirection: "row",
            alignItems: "stretch",
            marginLeft: 10
        })
    });
    class h extends u.default {
        constructor() {
            super(...arguments),
            this._onPickerButtonRef = e=>{
                this._pickerButton = ()=>e || void 0
            }
            ,
            this._onPickerClick = e=>{
                e.stopPropagation();
                const t = {
                    anchor: this._pickerButton,
                    useTheme: !0,
                    positionPriorities: ["bottom", "top"],
                    colorThemeOverride: this.props.colorThemeOverride
                };
                return c.default.showWithOptions({
                    id: "textPickerMenu",
                    config: t,
                    getMenuItems: this._getMenuItems,
                    handleMenuCommand: this._onHandleMenuCommand,
                    rootViewId: this._getRootViewId(),
                    invokingEvent: e
                })
            }
            ,
            this._getMenuItems = ()=>this.props.items.map(e=>({
                text: e.label,
                command: e.value
            })),
            this._onHandleMenuCommand = e=>{
                if (e === c.SXActionMenuCancel)
                    return;
                const t = n.findIndex(this.props.items, t=>t.value === e);
                this.props.onValueChange(e, t)
            }
        }
        render() {
            const e = this.props.title + ", " + this._getSelectedItemLabel() + ", " + l.getString("Global.SelectedAccessibilityLabel");
            return o.createElement(o.View, {
                style: [g.container, s.ListItem.small.shortHeightStyle]
            }, o.createElement(d.RowTitle, {
                colorThemeOverride: this._currentTheme,
                disabled: this.props.disabled
            }, this.props.title), o.createElement(r, {
                disabled: this.props.disabled,
                ref: this._onPickerButtonRef,
                style: g.button,
                label: this._getSelectedItemLabel(),
                labelMaxWidth: 270,
                onPress: this._onPickerClick,
                accessibilityLabel: e,
                tabIndex: this.props.tabIndex
            }))
        }
        _getSelectedItemLabel() {
            const e = n.find(this.props.items, e=>e.value === this.props.selectedValue);
            return e ? e.label : ""
        }
    }
    e.exports = h
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(869)
      , s = i(2880)
      , r = i(70)
      , a = i(0)
      , l = i(7)
      , c = i(337)
      , d = i(43)
      , u = i(2)
      , g = (i(101),
    i(3))
      , h = i(5)
      , p = i(4)
      , m = i(75)
      , S = i(171)
      , C = i(19)
      , y = i(8)
      , f = i(25)
      , _ = i(9)
      , b = h.lazyProperties({
        container: ()=>a.Styles.createViewStyle({
            flex: 1,
            backgroundColor: y.Color.white
        }),
        containerDark: ()=>a.Styles.createViewStyle({
            flex: 1,
            backgroundColor: y.Color.gray400
        }),
        rnGalleryDefaultStyle: ()=>a.Styles.createViewStyle({
            flex: 1,
            justifyContent: "center",
            backgroundColor: y.Color.gray400,
            borderColor: y.Color.blue
        })
    });
    class v extends d.default {
        constructor() {
            super(...arguments),
            this._pendingSelectionItemIds = [],
            this._mediaItemCache = {},
            this._onMediaPickerViewRef = e=>{
                this._mediaPickerView = e || void 0
            }
            ,
            this._onSelectImages = e=>{
                if (this.props.onItemSelected && e.nativeEvent.edge) {
                    const t = e.nativeEvent.edge;
                    if (!t || !t.node || !t.node.image)
                        return;
                    const i = !!e.nativeEvent.selected
                      , s = t.node.image.uri
                      , r = e.nativeEvent.count;
                    let a = this._mediaItemCache[s];
                    a ? this.props.onItemSelected(s, a, i, r) : i ? (this._pendingSelectionItemIds.push(s),
                    o.default.prepareMediaSelection(0, s, t).then(e=>{
                        n.includes(this._pendingSelectionItemIds, s) && (this.props.onItemSelected && this.props.onItemSelected(s, e, i, r),
                        this._pendingSelectionItemIds = n.without(this._pendingSelectionItemIds, s))
                    }
                    )) : (this.props.onItemSelected(s, a, i, r),
                    this._pendingSelectionItemIds = n.without(this._pendingSelectionItemIds, s))
                }
            }
            ,
            this._onScrolledToTop = e=>{
                this.props.onScrolledToTop && this.props.onScrolledToTop(e.nativeEvent.scrolledToTop)
            }
            ,
            this._onPhotosLoaded = e=>{
                this.props.onPhotosLoaded && this.props.onPhotosLoaded(e.nativeEvent.loadedCount)
            }
        }
        _buildState(e, t) {
            return {
                cameraRollPermissionStatus: m.default.permissionStatus(f.PermissionType.CameraRoll)
            }
        }
        componentDidMount() {
            if (super.componentDidMount(),
            !this.props.pauseLoading) {
                const e = _.newCauseId();
                g.log(u.LogTraceArea.MediaPickerWrapperView, "componentDidMount causeId:", e),
                this._maybeLoadPhotos(e)
            }
        }
        componentDidUpdate(e, t, i) {
            if (super.componentDidUpdate(e, t, i),
            this.props.albumName !== e.albumName) {
                const e = _.newCauseId();
                g.log(u.LogTraceArea.MediaPickerWrapperView, "componentDidUpdate album change causeId:", e),
                this._reset(),
                this._maybeLoadPhotos(e)
            }
            if (!this.props.pauseLoading && e.pauseLoading) {
                const e = _.newCauseId();
                g.log(u.LogTraceArea.MediaPickerWrapperView, "componentDidUpdate pauseLoading change causeId: ", e),
                this._maybeLoadPhotos(e)
            }
        }
        scrollToTop() {
            this._mediaPickerView && this._mediaPickerView.scrollToTop()
        }
        _maybeLoadPhotos(e) {
            this.props.pauseLoading || (g.log(u.LogTraceArea.MediaPickerWrapperView, "_maybeLoadPhotos: causeId:", e),
            this._getCameraRollPermission().catch(e=>{
                g.log(u.LogTraceArea.MediaPickerWrapperView, "_maybeLoadPhotos: error:", C.errorAsString(e)),
                this.props.onClose()
            }
            ))
        }
        _getCameraRollPermission() {
            return this.state.cameraRollPermissionStatus === r.PermissionStatus.Granted ? l.Resolved() : m.default.requestPermission(f.PermissionType.CameraRoll, f.PermissionPromptOptions.SkipPrePrompt | f.PermissionPromptOptions.PromptAgainIfDenied).then(e=>e === r.PermissionStatus.Granted ? l.Resolved() : (S.showDeniedPromptWithSettingsOption(f.PermissionType.CameraRoll, this._getRootViewId()),
            l.Rejected("Permission denied")))
        }
        _reset() {
            this._pendingSelectionItemIds = [],
            this._mediaItemCache = {},
            this.props.onReset()
        }
        _desiredThumbnailSize() {
            return this.props.maxThumbnailSize || 120
        }
        _maxSelectionCount() {
            return n.isUndefined(this.props.maxSelectionCount) || n.isNull(this.props.maxSelectionCount) ? 5 : this.props.maxSelectionCount
        }
        render() {
            const e = this._maxSelectionCount()
              , t = this.state.cameraRollPermissionStatus !== r.PermissionStatus.Granted || this.props.pauseLoading ? null : a.createElement(s.default, {
                ref: this._onMediaPickerViewRef,
                allowMultipleSelections: e > 1,
                style: b.rnGalleryDefaultStyle,
                maxSelectionCount: e,
                gridPadding: 0,
                disableGifs: this.props.disableGifs,
                allowVideo: this.props.mediaType !== c.MediaType.PhotoOnly,
                disableScrolling: this.props.disableScrolling,
                maxThumbnailSize: this._desiredThumbnailSize(),
                album: this.props.albumName,
                onSelectImages: this._onSelectImages,
                onScrolledToTop: this._onScrolledToTop,
                onPhotosLoaded: this._onPhotosLoaded,
                typePhotoAccessibilityLabel: p.getString("Global.Photo"),
                typeVideoAccessibilityLabel: p.getString("Global.Video"),
                accessibilityLabelSelected: p.getString("MediaPickerPanel.MediaPickerGalleryItemSelected", {
                    index: s.MediaPickerConsts.IndexReplacementKey,
                    total: s.MediaPickerConsts.TotalReplacementKey,
                    type: s.MediaPickerConsts.TypeReplacementKey
                }),
                accessibilityLabelDefault: p.getString("MediaPickerPanel.MediaPickerGalleryItem", {
                    index: s.MediaPickerConsts.IndexReplacementKey,
                    total: s.MediaPickerConsts.TotalReplacementKey,
                    type: s.MediaPickerConsts.TypeReplacementKey
                }),
                screenChangeOnSelection: this.props.screenChangeOnSelection
            });
            return a.createElement(a.View, {
                style: this.props.darkTheme ? b.containerDark : b.container
            }, t)
        }
    }
    t.MediaPickerWrapperView = v,
    t.default = v
}
, , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(1637)
      , s = i(482)
      , r = i(50)
      , a = i(160)
      , l = i(2)
      , c = i(3)
      , d = i(4)
      , u = i(349)
      , g = i(180)
      , h = i(232)
      , p = i(466)
      , m = i(275)
      , S = i(8)
      , C = i(11)
      , y = i(109)
      , f = i(9);
    class _ extends r.default {
        constructor() {
            super(...arguments),
            this._onCloseButtonClicked = ()=>{
                const e = f.newCauseId();
                c.log(l.LogTraceArea.Navigation, "AVSettingsDialog._onCloseButtonClicked,  causeId: " + e),
                this._sendTelemetryEvent(a.DialogNavExit.Close),
                this._goBack(e)
            }
            ,
            this._onNextButtonClicked = ()=>{
                const e = f.newCauseId();
                c.log(l.LogTraceArea.Navigation, "AVSettingsDialog._onNextButtonClicked,  causeId: " + e),
                this._sendTelemetryEvent(a.DialogNavExit.Submit),
                this.props.scenarioNavigator ? this.props.scenarioNavigator.goNext() : this._goBack(e)
            }
            ,
            this._onSkipButtonClicked = ()=>{
                const e = f.newCauseId();
                c.log(l.LogTraceArea.Navigation, "AVSettingsDialog._onSkipButtonClicked,  causeId: " + e),
                this._sendTelemetryEvent(a.DialogNavExit.Skip),
                this.props.scenarioNavigator ? this.props.scenarioNavigator.goNext() : this._goBack(e)
            }
            ,
            this._onCameraSelected = e=>{
                this._telemetryEvent && e && this._telemetryEvent.markDidChangeCameraSetting()
            }
            ,
            this._onMicrophoneSelected = e=>{
                this._telemetryEvent && e && this._telemetryEvent.markDidChangeMicSetting()
            }
            ,
            this._onSpeakerSelected = e=>{
                this._telemetryEvent && e && this._telemetryEvent.markDidChangeSpeakerSetting()
            }
            ,
            this._onRingingDeviceSelected = e=>{
                this._telemetryEvent && e && this._telemetryEvent.markDidChangeRingingDeviceSetting()
            }
            ,
            this._onMicrophoneAdjusted = ()=>{
                this._telemetryEvent && this._telemetryEvent.markDidAdjustMicrophone()
            }
            ,
            this._onMicrophoneAutoAdjustChanged = e=>{
                this._telemetryEvent && this._telemetryEvent.markDidChangeMicrophoneAutoAdjustment(e)
            }
            ,
            this._onAudioTestPerformed = ()=>{
                this._telemetryEvent && this._telemetryEvent.markAudioTestPerformed()
            }
            ,
            this._onTestCallPerformed = ()=>{
                this._telemetryEvent && this._telemetryEvent.markTestCallPerformed()
            }
            ,
            this._onSpeakerVolumeChanged = ()=>{
                this._telemetryEvent && this._telemetryEvent.markDidChangeSpeakerVolume()
            }
        }
        static getHeaderText(e) {
            return e === s.SettingsMode.Audio ? d.getString("AudioVideoSettings.AudioTestTitle") : e === s.SettingsMode.Video ? d.getString("AudioVideoSettings.VideoTestTitle") : d.getString("AudioVideoSettings.Title")
        }
        _buildState(e, t) {
            let i = {};
            if (t) {
                this._setupTelemetryEvent(e);
                let t = p.getOnboardingFeatures(e.scenarioNavigator);
                i.themeAwareOnboardingEnabled = t.themeAwareOnboardingEnabled
            }
            return i
        }
        render() {
            const e = this.props.origin === a.DialogNavOrigin.Onboarding ? g.OnboardingDialogWizardNextButtonVariant.TextAndIcon : g.OnboardingDialogWizardNextButtonVariant.IconOnly
              , t = this._getNextButtonTitle()
              , i = this.props.scenarioNavigator && !this.state.themeAwareOnboardingEnabled && !this._useDarkTheme()
              , s = this._useDarkTheme() ? S.Color.darkThemeBackground : S.Color.white;
            return n.createElement(u, {
                headerText: this._getHeaderText(this.state),
                descriptionElement: d.getString("AudioVideoSettings.AVTestBody"),
                hideSkipButton: this.props.hideSkipButton,
                nextButtonIcon: this.props.nextButtonIcon || C.SkypeIcon.Ok,
                hideCloseButton: this.props.hideCloseButton,
                closeButtonIcon: this.props.closeButtonIcon,
                nextButtonVariant: e,
                nextButtonTitle: t,
                scenarioNavigator: this.props.scenarioNavigator,
                onSkipButtonClicked: this._onSkipButtonClicked,
                onNextButtonClicked: this._onNextButtonClicked,
                onCloseButtonClicked: this._onCloseButtonClicked,
                disablePresentationAnimation: !0,
                isContentScrollable: !0
            }, n.createElement(o.default, {
                settingsMode: this.props.settingsMode,
                colorThemeOverride: i ? y.Theme.Colorful : void 0,
                backgroundColor: i ? S.Color.white : s,
                onCameraSelected: this._onCameraSelected,
                onMicrophoneSelected: this._onMicrophoneSelected,
                onSpeakerSelected: this._onSpeakerSelected,
                onRingingDeviceSelected: this._onRingingDeviceSelected,
                onMicrophoneAdjusted: this._onMicrophoneAdjusted,
                onMicrophoneAutoAdjustChanged: this._onMicrophoneAutoAdjustChanged,
                onSpeakerVolumeChanged: this._onSpeakerVolumeChanged,
                onAudioTestPerformed: this._onAudioTestPerformed,
                onTestCallPerformed: this._onTestCallPerformed,
                isInOnboarding: !0,
                hideBackgroundBlurCapability: !0
            }))
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._sendTelemetryEvent(a.DialogNavExit.CancelOrBack)
        }
        _componentId() {
            return "AVSettingsDialog"
        }
        _goBack(e) {
            return c.log(l.LogTraceArea.Navigation, "AVSettingsDialog._goBack,  causeId: " + e),
            this.props.scenarioNavigator ? (this.props.scenarioNavigator.goBack(),
            !0) : super._goBack(e)
        }
        _getNextButtonTitle() {
            if (this.props.origin === a.DialogNavOrigin.Onboarding)
                return d.getString("Onboarding.WizardGenericStepContinueButton")
        }
        _setupTelemetryEvent(e) {
            let t, i, n = p.getTypedScenarioNavigator(e.scenarioNavigator);
            n && (t = n.getCurrentStep(),
            i = n.getTotalNumberOfSteps()),
            this._telemetryEvent = new m.AVSettingsDialogEvent(e.settingsMode,e.origin,t,i)
        }
        _sendTelemetryEvent(e) {
            this._telemetryEvent && (this._telemetryEvent.setExit(e),
            h.default.track(this._telemetryEvent),
            this._telemetryEvent = void 0)
        }
        _getHeaderText(e) {
            return _.getHeaderText(this.props.settingsMode)
        }
    }
    e.exports = _
}
, , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(117)
      , s = i(0)
      , r = i(121)
      , a = i(5)
      , l = i(54)
      , c = i(8)
      , d = i(14)
      , u = i(12)
      , g = a.lazyProperties({
        gestureViewStyle: ()=>s.Styles.createViewStyle({
            backgroundColor: c.Color.transparent
        })
    });
    class h extends u.default {
        constructor() {
            super(...arguments),
            this._trackHeight = 10,
            this._handleSize = 20,
            this._animatedSelectedBackgroundWidthValue = new s.Animated.Value(0),
            this._animatedSelectedBackgroundStyle = s.Styles.createAnimatedViewStyle({
                width: this._animatedSelectedBackgroundWidthValue
            }),
            this._animatedDragHandlePositionValue = new s.Animated.Value(0),
            this._animatedDragHandlePositionStyle = s.Styles.createAnimatedViewStyle({
                left: this._animatedDragHandlePositionValue
            }),
            this._onPanDragHandle = e=>{
                let t = e.pageX - e.initialPageX;
                s.International.isRTL() && (t = -t);
                let i = this._currentPosition + t;
                i < 0 ? i = 0 : i > this.state.dragAreaWidth && (i = this.state.dragAreaWidth),
                this.state.dragAreaWidth && (!this.props.dragStep || 0 === i || i === this.state.dragAreaWidth || Math.abs(i / this.state.dragAreaWidth - this._currentValue) >= this.props.dragStep) && this._updatePosition(i, this.state.dragAreaWidth),
                e.isComplete && (this._currentPosition = i)
            }
            ,
            this._onTap = e=>{
                let t = e.clientX;
                s.International.isRTL() && (t = this.state.dragAreaWidth - t),
                t < 0 ? t = 0 : t > this.state.dragAreaWidth && (t = this.state.dragAreaWidth),
                this.state.dragAreaWidth && this._updatePosition(t, this.state.dragAreaWidth),
                this._currentPosition = t
            }
            ,
            this._onLayout = e=>{
                const t = e.width - this._handleSize;
                t !== this.state.dragAreaWidth && this.setState({
                    dragAreaWidth: t
                })
            }
            ,
            this._onKeyPress = e=>{
                const t = this.props.keyboardNavStep || .05;
                e.keyCode === r.LEFT || e.keyCode === r.DOWN ? (this.updateValue(this._currentValue - t),
                e.preventDefault()) : e.keyCode !== r.RIGHT && e.keyCode !== r.UP || (this.updateValue(this._currentValue + t),
                e.preventDefault())
            }
        }
        _buildState(e, t) {
            const i = l.getColorInfo().colors.slice().reverse()
              , n = {
                selectedBackgroundColorStyle: l.getPrimaryBackgroundColorStyle(),
                gradientColors: i
            };
            return t && (this._currentValue = e.value || 0,
            this._currentPosition = 0,
            this._trackHeight = e.trackHeight || 10,
            this._handleSize = e.handleSize || 20,
            n.dragAreaWidth = 0),
            n
        }
        componentDidMount() {
            super.componentDidMount(),
            this._currentValue && this.state.dragAreaWidth && this._updatePosition(this._currentValue * this.state.dragAreaWidth, this.state.dragAreaWidth, !1)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i);
            let o = !1;
            n.isUndefined(e.value) || e.value === this.props.value || (this._currentValue = e.value,
            o = !0),
            (o || this.state.dragAreaWidth !== t.dragAreaWidth) && (this._currentPosition = this._currentValue * t.dragAreaWidth,
            this._updatePosition(this._currentPosition, t.dragAreaWidth, !1))
        }
        updateValue(e) {
            e < 0 ? e = 0 : e > 1 && (e = 1),
            this._currentValue = e,
            this.state.dragAreaWidth && this._updatePosition(e * this.state.dragAreaWidth, this.state.dragAreaWidth)
        }
        _updatePosition(e, t, i=!0) {
            this._currentValue = t ? e / t : 0,
            this.props.onProgressChange && i && this.props.onProgressChange(this._currentValue),
            this._animatedDragHandlePositionValue.setValue(e),
            this._animatedSelectedBackgroundWidthValue.setValue(e + this._handleSize / 2)
        }
        render() {
            const e = {
                container: s.Styles.createViewStyle({
                    alignSelf: "stretch",
                    height: this._handleSize,
                    alignItems: "center",
                    justifyContent: "center"
                }, !1),
                backgroundContainer: s.Styles.createViewStyle({
                    alignSelf: "stretch",
                    height: this._trackHeight,
                    borderRadius: this._trackHeight / 2,
                    marginHorizontal: this._handleSize / 2
                }, !1),
                selectedBackground: s.Styles.createViewStyle({
                    height: this._trackHeight,
                    borderRadius: this._trackHeight / 2
                }, !1),
                dragHandleContainer: s.Styles.createViewStyle({
                    position: "absolute",
                    width: this._handleSize,
                    height: this._handleSize,
                    borderRadius: this._handleSize / 2,
                    overflow: "hidden"
                }, !1)
            }
              , t = [e.selectedBackground, this.state.selectedBackgroundColorStyle, this._animatedSelectedBackgroundStyle]
              , i = [e.dragHandleContainer, this._animatedDragHandlePositionStyle]
              , n = [d.absoluteFill, g.gestureViewStyle]
              , r = [e.selectedBackground, s.Styles.createViewStyle({
                width: this.state.dragAreaWidth
            }, !1)]
              , a = [e.dragHandleContainer, this._themeStyles.sliderHandleColorStyle, this._themeStyles.viewBorderStyle];
            return s.createElement(s.View, {
                style: [e.container, this.props.style],
                onLayout: this._onLayout,
                onKeyPress: this._onKeyPress,
                tabIndex: 0,
                accessibilityTraits: s.Types.AccessibilityTrait.Adjustable,
                accessibilityLabel: this.props.accessibilityLabel,
                ariaValueNow: this.props.ariaValueNow
            }, s.createElement(s.View, {
                style: [e.backgroundContainer, this._themeStyles.secondaryBackgroundColorStyle]
            }, s.createElement(s.Animated.View, {
                style: t
            }, s.createElement(o.GradientView, {
                style: r,
                colors: this.state.gradientColors,
                direction: o.GradientDirection.RIGHT
            }))), s.createElement(s.Animated.View, {
                style: i
            }, s.createElement(s.View, {
                style: a
            })), s.createElement(s.GestureView, {
                style: n,
                preferredPan: s.Types.PreferredPanGesture.Horizontal,
                onPanHorizontal: this._onPanDragHandle,
                onTap: this._onTap
            }))
        }
    }
    e.exports = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(719)
      , r = i(720)
      , a = i(31)
      , l = i(2)
      , c = i(3)
      , d = i(5)
      , u = i(4)
      , g = i(32)
      , h = i(15)
      , p = i(12)
      , m = i(9)
      , S = d.lazyProperties({
        toggleContainer: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            marginBottom: 5
        }),
        toggleText: ()=>n.Styles.createTextStyle({
            flexGrow: 1,
            flexShrink: 1,
            marginRight: 10
        })
    });
    class C extends p.default {
        constructor() {
            super(...arguments),
            this._onToggleSecondaryRingerEnabled = (e,t)=>{
                g.default.setUserPreferencesLocal({
                    secondaryRingerOptionEnabled: t
                })
            }
            ,
            this._onRingingSpeakerSelected = e=>{
                const t = m.newCauseId();
                c.log(l.LogTraceArea.AVSettings, "_onRingingSpeakerSelected " + e + " causeId: " + t),
                this.props.onRingerDeviceSelected && this.props.onRingerDeviceSelected(e !== this.state.selectedRingerDevice),
                a.default.DeviceStore.chooseSecondarySpeakerDevice(e, t)
            }
        }
        _buildState(e, t) {
            return {
                secondaryRingerOptionEnabled: !!g.default.getUserPreferencesLocal().secondaryRingerOptionEnabled,
                ringerDevices: a.default.DeviceStore.getSecondarySpeakers(),
                selectedRingerDevice: a.default.DeviceStore.getCurrentSecondarySpeakerDevice()
            }
        }
        render() {
            return n.createElement(n.View, null, this._getRingerToggle(), this._getRingerDevicePicker())
        }
        _getRingerToggle() {
            return n.createElement(o, {
                key: "ringAdditionalDevices",
                style: S.toggleContainer,
                isOn: this.state.secondaryRingerOptionEnabled,
                accessibilityLabel: u.getString("AudioVideoSettings.RingAdditionalDeviceLabel"),
                onChange: this._onToggleSecondaryRingerEnabled
            }, n.createElement(h.BodyText, {
                style: S.toggleText,
                colorThemeOverride: this.props.colorThemeOverride
            }, u.getString("AudioVideoSettings.RingAdditionalDeviceLabel")))
        }
        _getRingerDevicePicker() {
            if (!this.state.secondaryRingerOptionEnabled)
                return;
            const e = r.formatDevicesForPicker(this.state.ringerDevices);
            return n.createElement(s, {
                title: u.getString("AudioVideoSettings.RingingDeviceLabel"),
                items: e,
                onValueChange: this._onRingingSpeakerSelected,
                selectedValue: this.state.selectedRingerDevice || "",
                colorThemeOverride: this.props.colorThemeOverride
            })
        }
    }
    t.default = C
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(50)
      , s = i(1639)
      , r = i(5)
      , a = i(4)
      , l = i(44)
      , c = i(14)
      , d = r.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        container: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            padding: 20,
            overflow: "visible",
            flexGrow: 1
        })
    });
    class u extends o.default {
        _getHeaderText() {
            return a.getString("AudioVideoSettings.CameraBackgroundReplacementLabel")
        }
        render() {
            const e = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                closeButtonType: this.props.isAloneInNavStack ? l.CloseButtonType.Close : l.CloseButtonType.Back
            }
              , t = n.createElement(l.SimplePanelHeader, {
                panelName: this._getHeaderText(),
                leftButton: e
            });
            return n.createElement(n.View, {
                style: [d.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, t, n.createElement(n.ScrollView, {
                style: c.flexOne
            }, n.createElement(n.View, {
                style: d.container
            }, n.createElement(s.default, {
                fullList: !0
            }))))
        }
    }
    t.default = u
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(128)
      , o = i(91)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._params = e
        }
        getEventName() {
            return "messaging_pesitem"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.IsDefaultTone = void 0 === this._params.itemTone || this._params.itemTone === n.DefaultDiverseTone,
            e.PickerWidth = this._params.pickerWidth,
            e.ColumnIndex = this._params.itemIndex,
            e.SectionIndex = this._params.sectionIndex,
            e.TabIndex = this._params.tabIndex,
            e.Type = o.TabType[this._params.type],
            e.isSearchMode = this._params.isSearchMode || !1,
            void 0 !== this._params.groupIndex && (e.GroupIndex = this._params.groupIndex),
            e
        }
        shouldExcludeUserIdentificationInfo() {
            return !0
        }
        shouldExcludeDeviceIdentificationInfo() {
            return !0
        }
    }
    t.PesItemTelemetryEvent = r
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(454)
      , s = i(0)
      , r = i(6)
      , a = i(50)
      , l = i(2)
      , c = i(3)
      , d = i(5)
      , u = i(4)
      , g = i(266)
      , h = i(165)
      , p = i(44)
      , m = d.lazyProperties({
        modalBackground: ()=>s.Styles.createViewStyle({
            flex: 1,
            alignItems: "stretch"
        })
    });
    class S extends a.default {
        constructor() {
            super(...arguments),
            this._closeMyAccountUrl = r.default.getConfigSettings().profileCard.closeMyAccountUrl,
            this._closeMyAccountEndUrl = r.default.getConfigSettings().profileCard.closeMyAccountEndUrl,
            this._onNavigationStateChange = e=>{
                if (this.setState({
                    currentUrl: e.url
                }),
                e.url && n.startsWith(e.url, this._closeMyAccountEndUrl) && -1 !== e.url.toLowerCase().indexOf("message=closeacctself"))
                    return c.track(new h.CloseMyAccountClicked),
                    void g.default.redirectToLogout(l.LogoutReason.CloseAccount, !0, !1)
            }
        }
        _buildState(e, t) {
            return {
                currentUrl: r.default.getConfigSettings().profileCard.closeMyAccountUrl
            }
        }
        _renderPanelContent() {
            const e = s.Types.WebViewSandboxMode.AllowForms | s.Types.WebViewSandboxMode.AllowScripts | s.Types.WebViewSandboxMode.AllowPopups | s.Types.WebViewSandboxMode.AllowSameOrigin;
            return s.createElement(o.WebViewBridge, {
                style: this.props.style,
                url: this._closeMyAccountUrl,
                javaScriptEnabled: !0,
                scalesPageToFit: !1,
                onNavigationStateChange: this._onNavigationStateChange,
                startInLoadingState: !0,
                domStorageEnabled: !0,
                sandbox: e,
                ariaLabel: u.getString("UserSettingsPanel.CloseAccountLabel")
            })
        }
        render() {
            return s.createElement(s.View, {
                style: m.modalBackground
            }, s.createElement(p.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: {
                    closeButtonType: this.props.isAloneInNavStack ? p.CloseButtonType.Close : p.CloseButtonType.Back
                }
            }), this._renderPanelContent())
        }
        _getHeaderText(e) {
            return S.getHeaderText()
        }
        static getHeaderText() {
            return u.getString("UserSettingsPanel.CloseAccountLabel")
        }
    }
    e.exports = S
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1650)
      , o = i(0)
      , s = i(50)
      , r = i(2)
      , a = i(3)
      , l = i(5)
      , c = i(4)
      , d = i(44)
      , u = i(49)
      , g = i(9)
      , h = l.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        })
    });
    class p extends s.default {
        constructor() {
            super(...arguments),
            this._closeModal = ()=>{
                const e = g.newCauseId();
                a.log(r.LogTraceArea.Navigation, "DesktopCortanaNotebookPanel._closeModal,  causeId: " + e),
                this._goBack(e)
            }
        }
        static getHeaderText() {
            return c.getString("UserSettingsPanel.CortanaNotebookTitle")
        }
        render() {
            let e;
            if (!this.props.isAloneInNavStack || !this._getContext().isPresentedInSplitView) {
                const t = {
                    icon: this.props.isAloneInNavStack ? u.closeIcon() : u.backIcon(),
                    onPress: this._closeModal,
                    title: c.getString(this.props.isAloneInNavStack ? "Global.CloseButtonTitle" : "Global.BackButtonTitle")
                };
                e = o.createElement(d.SimplePanelHeader, {
                    panelName: this._getHeaderText(this.state),
                    leftButton: t,
                    useTransparentBackground: !0,
                    hideBottomBorder: !1
                })
            }
            const t = {
                "X-Search-DelegationRPSToken": this.props.cortanaAccessToken
            };
            return o.createElement(o.View, {
                style: h.container
            }, e, o.createElement(n.InAppWebBrowser, {
                origin: "AppSettings ",
                url: this.props.notebookUrl,
                headers: t,
                statusBarPadding: 0,
                sandbox: void 0
            }))
        }
        _getHeaderText(e) {
            return p.getHeaderText()
        }
    }
    t.default = p
}
, , , , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(6)
      , r = i(216)
      , a = i(50)
      , l = i(10)
      , c = i(345)
      , d = i(125)
      , u = i(2)
      , g = i(3)
      , h = i(5)
      , p = i(4)
      , m = i(192)
      , S = i(20)
      , C = i(17)
      , y = i(55)
      , f = i(97)
      , _ = i(262)
      , b = i(360)
      , v = i(76)
      , T = i(84)
      , P = i(2927)
      , A = i(44)
      , k = i(8)
      , I = i(11)
      , w = i(25)
      , N = i(14)
      , M = i(59)
      , E = i(885)
      , x = i(67)
      , D = i(886)
      , L = i(45)
      , R = i(9)
      , B = i(406)
      , O = i(90)
      , F = h.lazyProperties({
        panel: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        pannelPadding: ()=>o.Styles.createViewStyle({
            paddingBottom: 16
        }),
        container: ()=>o.Styles.createViewStyle({
            marginHorizontal: 20
        }),
        sectionHeader: ()=>o.Styles.createTextStyle({
            paddingTop: 30,
            paddingBottom: 10
        })
    });
    class V extends a.default {
        constructor() {
            super(...arguments),
            this._onScroll = (e,t)=>{
                const i = e > c.DetailsPanelHeaderSizes.scrollOffsetDesktop;
                this.state.showHeader !== i && this.setState({
                    showHeader: i
                })
            }
            ,
            this._onUserCardRef = e=>{
                this._userCardRef = e || void 0
            }
            ,
            this._onHelpAndFeedbackButtonPressed = ()=>{
                const e = R.newCauseId();
                g.log(u.LogTraceArea.Navigation, "DesktopMySettingsPanel._onHelpAndFeedbackButtonPressed causeId: " + e),
                g.track(new _.NavigationHelpAndFeedback(f.NavigationSettingsItem.HelpAndFeedback,f.NavigationSettingsOrigin.MySettingsPanel)),
                C.navigateToDesktopSettingsGroup(y.SettingsGroup.HelpAndFeedback, this._getContext(), e)
            }
            ,
            this._goToPrivacy = ()=>{
                C.navigateToManageSearchInfoPanel(b.ManageSearchOrigin.ApplicationSettings, this._getContext())
            }
            ,
            this._closeModal = ()=>{
                const e = R.newCauseId();
                g.log(u.LogTraceArea.Navigation, "DesktopMySettingsPanel.causeId causeId: " + e),
                this._goBack(e)
            }
        }
        _buildState(e, t) {
            const i = L.getFullUserProfileByMri(S.getSkypeMri())
              , o = d.getCreditEntitlement()
              , s = d.getSubscriptions()
              , a = {
                userFormattedBalance: r.getFormattedBalance(o),
                userSubscriptionsCount: s ? n.size(s) : 0,
                displayName: i.getDisplayName(),
                gender: i && i.gender || w.eGender.Unspecified,
                myUserStatus: m.getStatus(),
                useTabletUI: M.useTabletUI(),
                showScreenReaderHeader: v.default.isMobileScreenReaderEnabled()
            };
            return t && (a.showHeader = !1),
            a
        }
        componentDidMount() {
            super.componentDidMount(),
            s.default.getS4LCommerceFeatures().offerStore.prefetch && B.default.requestUpdate()
        }
        render() {
            const e = this.state.showHeader || this.state.showScreenReaderHeader
              , t = {
                closeButtonType: A.CloseButtonType.Close,
                color: e ? this._themeColors.primaryIconColor : k.Color.white,
                hoverColor: e ? this._themeColors.iconHoverColor : k.Color.whiteOverlay80,
                onPress: this._closeModal,
                title: p.getString("UserSettingsPanel.CloseSettings")
            }
              , i = e ? this.state.showScreenReaderHeader ? p.getString("UserSettingsPanel.SettingsTitle") : this.state.displayName : void 0
              , n = o.createElement(A.SimplePanelHeader, {
                floating: !this.state.showScreenReaderHeader,
                panelName: i,
                useTransparentBackground: !e,
                hideBottomBorder: !e,
                leftButton: t,
                ignorePointerEvents: !e,
                delayHeaderFocus: !1
            })
              , s = o.createElement(P, {
                origin: u.ContactInviteOrigin.ShareProfile
            })
              , r = this._getSectionTitle(p.getString("UserSettingsPanel.OtherHeaderUpper"), "other");
            return o.createElement(o.Animated.View, {
                style: [F.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, o.createElement(o.View, {
                style: [F.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, n, o.createElement(o.ScrollView, {
                style: N.flexOne,
                onScroll: this._onScroll,
                scrollEventThrottle: 32
            }, o.createElement(o.View, {
                style: [F.panel, F.pannelPadding, this._themeStyles.primaryBackgroundColorStyle]
            }, o.createElement(E.default, {
                ref: this._onUserCardRef,
                allowEditAvatar: !0,
                allowOpenAvatarInMediaViewer: !1,
                replaceHeader: !0,
                userIconSize: x.UserIconSize.Size120,
                userMri: S.getSkypeMri(),
                readOnlyView: !1
            }), o.createElement(o.View, {
                style: F.container
            }, s, this._getSectionTitle(p.getString("UserSettingsPanel.MyProfileTitleUpper"), "profile"), o.createElement(D, {
                userMri: S.getSkypeMri()
            }), r, this._getSupportSettings())))))
        }
        _getSectionTitle(e, t) {
            return o.createElement(T.SectionTitle, {
                key: t,
                title: e,
                titleStyles: F.sectionHeader
            })
        }
        _getSupportSettings() {
            return o.createElement(o.View, null, this._getManagePrivacyButton(), this._getHelpAndFeedbackButton())
        }
        _getHelpAndFeedbackButton() {
            return this._getWideButton({
                icon: I.SkypeIcon.Question,
                label: p.getString("UserSettingsPanel.HelpAndAboutTitle"),
                key: y.SettingsGroup[y.SettingsGroup.HelpAndFeedback],
                onPressed: this._onHelpAndFeedbackButtonPressed
            })
        }
        _getManagePrivacyButton() {
            return this._getWideButton({
                icon: I.SkypeIcon.ContactGroup,
                label: p.getString("MyUserInfo.ManagePrivacyTitle"),
                onPressed: this._goToPrivacy
            })
        }
        _getWideButton(e) {
            return o.createElement(O.WideButton, Object.assign({}, e, {
                buttonStyles: l.ListItem.small.shortHeightStyle
            }))
        }
        _getHeaderText(e) {
            return e.displayName + " " + p.getString("MyProfilePanel.SettingsTitle")
        }
    }
    e.exports = V
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(1189)
      , s = i(1689)
      , r = i(1637)
      , a = i(482)
      , l = i(871)
      , c = i(50)
      , d = i(1691)
      , u = i(10)
      , g = i(1693)
      , h = i(2945)
      , p = i(225)
      , m = i(160)
      , S = i(2)
      , C = i(1697)
      , y = i(1701)
      , f = i(3)
      , _ = i(1702)
      , b = i(5)
      , v = i(4)
      , T = i(1190)
      , P = i(54)
      , A = i(55)
      , k = i(1193)
      , I = i(76)
      , w = i(44)
      , N = i(1194)
      , M = i(11)
      , E = i(49)
      , x = i(14)
      , D = i(1195)
      , L = i(1706)
      , R = i(9);
    var B;
    !function(e) {
        e[e.Default = 0] = "Default",
        e[e.HeaderOnly = 1] = "HeaderOnly",
        e[e.None = 2] = "None"
    }(B || (B = {}));
    const O = b.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        innerContainer: ()=>n.Styles.createViewStyle({
            marginHorizontal: 20
        })
    })
      , F = {
        [A.SettingsGroup.AppSettings]: "DesktopProfileMenu.AppSettingsTitle",
        [A.SettingsGroup.AudioVideoSettings]: "AudioVideoSettings.Title",
        [A.SettingsGroup.AudioSettings]: "AudioVideoSettings.AudioSettingsTitle",
        [A.SettingsGroup.AccountAndProfile]: "UserSettingsPanel.AccountAndProfileSettingsTitle",
        [A.SettingsGroup.ThemeSettings]: "ColorThemeDialog.HeaderText",
        [A.SettingsGroup.HelpAndFeedback]: "UserSettingsPanel.HelpAndAboutTitle",
        [A.SettingsGroup.About]: "UserSettingsPanel.AboutButton",
        [A.SettingsGroup.Notifications]: "UserSettingsPanel.NotificationsTitle",
        [A.SettingsGroup.Chat]: "UserSettingsPanel.MessagingAndChatsTitle",
        [A.SettingsGroup.General]: "UserSettingsPanel.GeneralTitle",
        [A.SettingsGroup.Contacts]: "UserSettingsPanel.ContactsTitle",
        [A.SettingsGroup.MyAccountAndProfile]: "UserSettingsPanel.MyAccountAndProfileTitle",
        [A.SettingsGroup.BalanceState]: "BalanceStatePanel.Title",
        [A.SettingsGroup.SkypeNumber]: "SkypeNumberPanel.Title",
        [A.SettingsGroup.SyncAddressBook]: "SyncAddressBookDialog.HeaderText",
        [A.SettingsGroup.HotKeys]: "KeyboardShortcuts.Title2",
        [A.SettingsGroup.ManagePayments]: "UserSettingsPanel.ManagePaymentsSettingsTitle"
    }
      , V = Object.assign(Object.assign({}, F), {
        [A.SettingsGroup.HotKeys]: "KeyboardShortcuts.Title2",
        [A.SettingsGroup.ThemeSettings]: "ColorThemeDialog.HeaderTextShort"
    });
    class U extends c.default {
        constructor() {
            super(...arguments),
            this._setRightButton = e=>{
                this.setState({
                    rightButton: e
                })
            }
            ,
            this._closeModal = ()=>{
                const e = R.newCauseId();
                f.log(S.LogTraceArea.Navigation, "DesktopSettingsGroupPanel._closeModal,  causeId: " + e),
                this._goBack(e)
            }
        }
        static getHeaderText(e, t) {
            const i = t ? F[e] : V[e];
            return i || f.warn(S.LogTraceArea.GenericUnsafe, "DesktopSettingsGroupPanel._getHeaderText, no title key found"),
            v.getString(i || "UserSettingsPanel.SettingsTitle")
        }
        _buildState(e, t) {
            const i = {
                isMobileScreenReaderEnabled: I.default.isMobileScreenReaderEnabled(),
                myUserColor: P.getColorInfo(!0)
            };
            return t && (i.rightButton = void 0),
            i
        }
        render() {
            let e;
            switch (this._contentContainerStyle()) {
            case B.None:
                e = this._renderContent();
                break;
            case B.HeaderOnly:
                e = this._renderContentInContainer(!1);
                break;
            case B.Default:
                e = this._renderContentInContainer(!0)
            }
            return n.createElement(n.View, {
                style: O.container
            }, e)
        }
        _contentContainerStyle() {
            switch (this.props.group) {
            case A.SettingsGroup.About:
            case A.SettingsGroup.BalanceState:
                return B.None;
            case A.SettingsGroup.SyncAddressBook:
                return B.HeaderOnly;
            default:
                return B.Default
            }
        }
        _renderContentInContainer(e) {
            const t = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : {
                icon: this.props.isAloneInNavStack ? E.closeIcon() : E.backIcon(),
                onPress: this._closeModal,
                title: v.getString(this.props.isAloneInNavStack ? "Global.CloseButtonTitle" : "Global.BackButtonTitle")
            };
            let i;
            this.props.isAloneInNavStack && !this.state.isMobileScreenReaderEnabled && this._getContext().isPresentedInSplitView || (i = n.createElement(w.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: t,
                rightButtons: this.state.rightButton,
                useTransparentBackground: !0,
                delayHeaderFocus: !1
            }));
            let o = this._renderContent();
            if (e) {
                const e = this.props.isPresentedInSplitView && this.props.group === A.SettingsGroup.AccountAndProfile && !0;
                o = n.createElement(n.ScrollView, {
                    style: x.flexOne,
                    ignoreRTL: e
                }, o)
            }
            return n.createElement(n.View, {
                style: O.container
            }, i, o)
        }
        _renderContent() {
            const e = {
                isPresentedInDesktopSubview: !0,
                isAloneInNavStack: this.props.isAloneInNavStack,
                isFullScreenModal: this.props.isFullScreenModal,
                isPresentedInSplitView: this.props.isPresentedInSplitView,
                buttonStyles: u.ListItem.small.shortHeightStyle,
                closeModal: this.props.closeModal,
                setRightButton: this._setRightButton
            };
            switch (this.props.group) {
            case A.SettingsGroup.AppSettings:
                return n.createElement(h.default, Object.assign({}, e));
            case A.SettingsGroup.Notifications:
                return n.createElement(k.default, Object.assign({
                    style: O.innerContainer
                }, e));
            case A.SettingsGroup.AudioVideoSettings:
                return n.createElement(r.default, Object.assign({
                    settingsMode: a.SettingsMode.All
                }, e));
            case A.SettingsGroup.AudioSettings:
                return n.createElement(r.default, Object.assign({
                    settingsMode: a.SettingsMode.Audio
                }, e));
            case A.SettingsGroup.MyAccountAndProfile:
                return n.createElement(T.default, Object.assign({
                    style: O.innerContainer
                }, e));
            case A.SettingsGroup.AccountAndProfile:
                return n.createElement(s.default, Object.assign({
                    style: O.innerContainer
                }, e));
            case A.SettingsGroup.BalanceState:
                return n.createElement(l.default, Object.assign({
                    showHeader: !0,
                    source: "DesktopSettings.navigateBalanceState"
                }, e));
            case A.SettingsGroup.SkypeNumber:
                return n.createElement(N.default, Object.assign({}, e));
            case A.SettingsGroup.ThemeSettings:
                return n.createElement(L.default, Object.assign({
                    origin: m.DialogNavOrigin.Settings,
                    style: O.innerContainer
                }, e));
            case A.SettingsGroup.HelpAndFeedback:
                return n.createElement(y.default, Object.assign({
                    style: O.innerContainer
                }, e));
            case A.SettingsGroup.About:
                return n.createElement(o.default, Object.assign({
                    showHeader: !0
                }, e));
            case A.SettingsGroup.Chat:
                return n.createElement(d.default, Object.assign({
                    style: O.innerContainer
                }, e));
            case A.SettingsGroup.Contacts:
                return n.createElement(g.default, Object.assign({
                    style: O.innerContainer
                }, e));
            case A.SettingsGroup.General:
                return n.createElement(C.default, Object.assign({
                    style: O.innerContainer
                }, e));
            case A.SettingsGroup.SyncAddressBook:
                return n.createElement(D, Object.assign({
                    origin: m.DialogNavOrigin.Settings,
                    hideHeader: !0,
                    hideSkipButton: !0,
                    hideCloseButton: !0,
                    nextButtonIcon: M.SkypeIcon.Ok,
                    compositeNavContainerWidth: p.DefaultWidth
                }, e));
            case A.SettingsGroup.HotKeys:
                return n.createElement(_.default, Object.assign({}, e));
            default:
                return
            }
        }
        _getHeaderText(e) {
            return U.getHeaderText(this.props.group, !!this.props.isPresentedInSplitView)
        }
    }
    t.default = U
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = (i(10),
    i(200))
      , s = (i(1068),
    i(859))
      , r = i(2)
      , a = (i(27),
    i(5))
      , l = i(4)
      , c = (i(66),
    i(8))
      , d = i(18)
      , u = (i(11),
    i(15),
    i(12));
    a.lazyProperties({
        wrapper: ()=>n.Styles.createViewStyle({
            marginTop: 6,
            marginBottom: 6,
            flexDirection: "row",
            alignItems: "center"
        }),
        statusMessage: ()=>n.Styles.createTextStyle({
            marginLeft: 6,
            flexShrink: 1
        }),
        actionButton: ()=>a.lazyProperties({
            button: ()=>n.Styles.createButtonStyle({
                backgroundColor: c.Color.blue,
                borderRadius: 16,
                marginLeft: 12,
                paddingHorizontal: 16,
                paddingVertical: 6,
                alignSelf: "center"
            }),
            hover: ()=>n.Styles.createButtonStyle({
                backgroundColor: c.Color.blueOverlay70
            }),
            text: ()=>n.Styles.createTextStyle({
                color: c.Color.white
            })
        })
    });
    class g extends u.default {
        constructor() {
            super(...arguments),
            this._onActionButtonPress = ()=>{
                g._installUpdate(this._getRootViewId())
            }
            ,
            this._onActionButtonHoverStart = ()=>{
                this.setState({
                    updateStatus: this.state.updateStatus,
                    isHoveringActionButton: !0
                })
            }
            ,
            this._onActionButtonHoverEnd = ()=>{
                this.setState({
                    updateStatus: this.state.updateStatus,
                    isHoveringActionButton: !1
                })
            }
        }
        _buildState() {
            return {
                updateStatus: o.getUpdateStatus(),
                isHoveringActionButton: !1
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            o.checkForUpdates()
        }
        render() {
            return null
        }
        _getUpdateMessage() {
            return d.getPlatformType() === r.PlatformType.Linux ? l.getString("AboutPanel.UpdateDownloadedLinux") : l.getString("AboutPanel.UpdateDownloaded")
        }
        _getUpdateButton() {
            return d.getPlatformType() === r.PlatformType.Linux ? l.getString("AboutPanel.UpdateButtonLinux") : l.getString("AboutPanel.UpdateButton")
        }
    }
    g._retryUpdate = ()=>{
        o.checkForUpdates()
    }
    ,
    g._installUpdate = e=>{
        s.tryToQuitAndInstallUpdate(e)
    }
    ,
    e.exports = g
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(6)
      , r = i(216)
      , a = i(42)
      , l = i(10)
      , c = i(43)
      , d = i(125)
      , u = i(4)
      , g = i(17)
      , h = i(41)
      , p = i(11)
      , m = i(725)
      , S = i(90);
    class C extends c.default {
        constructor() {
            super(...arguments),
            this._onUserInfoSectionPress = ()=>{
                g.navigateToBalanceStatePanel("MySettingsPanel.fromCTA", this._getContext())
            }
            ,
            this._onSkypeToPhonePress = ()=>{
                g.navigateToBalanceStatePanel("MySettingsPanel.fromCombinedSettings", this._getContext())
            }
        }
        _buildState(e, t) {
            const i = d.getCreditEntitlement()
              , o = d.getSubscriptions();
            return {
                userFormattedBalance: r.getFormattedBalance(i),
                userSubscriptionsCount: o ? n.size(o) : 0,
                userEntitlementsSummary: r.getEntitlementCombination(i, o),
                skypeToPhoneInProfile: s.default.getS4LEntitlementFeatures().SCE.UserServices.Client.Experiments.SkypeToPhoneInProfile
            }
        }
        render() {
            const e = this.state.userFormattedBalance ? u.getString("BalanceStatePanel.SkypeCreditAndSubscriptionsAccessibilityText", {
                amount: this.state.userFormattedBalance,
                count: this.state.userSubscriptionsCount
            }) : void 0;
            if ("none" === this.state.userEntitlementsSummary && this.state.skypeToPhoneInProfile) {
                const t = u.getString("Entitlements.SkypeToPhoneTitle")
                  , i = u.getString("Entitlements.AddFundsLabel")
                  , n = u.getString("Entitlements.SkypeToPhoneIntro")
                  , s = a.default.combinedAccessibilityLabel(e || t, i);
                return o.createElement(m, {
                    icon: p.SkypeIcon.SkypeCredit,
                    label: t,
                    labelBottom: n,
                    labelBottomSingleLine: !0,
                    onPress: this._onUserInfoSectionPress,
                    accessibilityLabel: s
                }, o.createElement(h, {
                    buttonSize: l.SXButtonSize.Small,
                    buttonStyle: l.SXButtonStyle.ThemeStroke,
                    title: u.getString("Entitlements.AddFundsLabel"),
                    accessibilityHidden: !0,
                    allowTextWrap: !0
                }))
            }
            const t = this.state.userSubscriptionsCount > 0 ? u.getString("Entitlements.Subscriptions", {
                count: this.state.userSubscriptionsCount
            }) : void 0;
            return o.createElement(S.WideButton, {
                icon: p.SkypeIcon.SkypeCredit,
                label: u.getString("Entitlements.SkypeToPhoneTitle"),
                labelBottom: t,
                labelBottomSingleLine: !0,
                key: "user-credit-and-subscriptions",
                onPressed: this._onSkypeToPhonePress,
                labelRight: this.state.userFormattedBalance,
                accessibilityLabel: e,
                buttonStyles: this.props.buttonStyles
            })
        }
    }
    t.default = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    i(1);
    const n = i(0)
      , o = i(6)
      , s = i(43)
      , r = (i(2),
    i(3))
      , a = (i(108),
    i(4))
      , l = (i(266),
    i(17),
    i(22))
      , c = i(165)
      , d = i(103)
      , u = i(11)
      , g = i(90);
    class h extends s.default {
        constructor() {
            super(...arguments),
            this._onPressCloseAccount = ()=>{
                {
                    r.track(new c.CloseMyAccountInfoLinkClicked);
                    const e = `${this.state.closeMyAccountWebUrl}?setlang=${a.getLocale()}`;
                    return void n.Linking.openUrl(e)
                }
            }
        }
        _buildState(e, t) {
            const i = o.default.getConfigSettings().profileCard;
            return {
                closeMyAccountEndUrl: i.closeMyAccountEndUrl,
                closeMyAccountUrl: i.closeMyAccountUrl,
                closeMyAccountWebUrl: i.closeMyAccountWebUrl,
                isUsingStackNavigation: l.default.isUsingStackNavigationContext()
            }
        }
        render() {
            return n.createElement(g.WideButton, {
                icon: u.SkypeIcon.Cancel,
                key: "closeAccountButton",
                label: a.getString("UserSettingsPanel.CloseAccountLabel"),
                labelStyle: d.styles.titleMediumSemiLarge,
                buttonStyles: this.props.buttonStyles,
                labelBottom: a.getString("UserSettingsPanel.CloseAccountDescription"),
                onPressed: this._onPressCloseAccount
            })
        }
    }
    t.default = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(43)
      , r = i(2)
      , a = i(190)
      , l = i(108)
      , c = i(4)
      , d = i(346)
      , u = i(244)
      , g = i(17)
      , h = i(22)
      , p = i(11)
      , m = i(90);
    class S extends s.default {
        constructor() {
            super(...arguments),
            this._onSkypeMoneySettings = ()=>{
                h.default.isUsingStackNavigationContextNoSubscription() ? l.openUrlWithParams({
                    origin: r.BrowserOrigin.MoneySettings,
                    url: u.default.createUrl({
                        view: u.default.viewIds.dashboard,
                        entry: u.default.entries.settingsPanel
                    }),
                    componentContext: this._getContext()
                }) : g.navigateToDesktopSendMoney(u.default.viewIds.dashboard, u.default.entries.settingsPanel, !1, this._getContext())
            }
        }
        _buildState(e, t) {
            const i = o.default.getSRMFeatures()
              , n = a.default.getMoneyIntegration();
            return {
                isSRMEnabled: n && u.default.isSettingsEnabled(n, i, d.default.isMoneyEnabledOption())
            }
        }
        render() {
            return this.state.isSRMEnabled ? n.createElement(m.WideButton, {
                key: "skype-money",
                buttonStyles: this.props.buttonStyles,
                icon: p.SkypeIcon.SkypeMoney,
                label: c.getString("MediaBar.MoneyTitle"),
                labelBottom: this.props.hideSubtitle ? void 0 : c.getString("MoneyNode.SendMoneyName"),
                onPressed: this._onSkypeMoneySettings
            }) : null
        }
    }
    t.default = S
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(42)
      , r = i(3)
      , a = i(4)
      , l = i(249)
      , c = i(32)
      , d = i(84)
      , u = i(103)
      , g = i(12);
    class h extends g.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                this.state.autoDownloadFilesEnabled !== t && (c.default.setUserPreferencesLocal({
                    autoDownloadFiles: t
                }),
                r.track(new l.AutoDownloadFilesToggleSetting(t)))
            }
        }
        _buildState(e, t) {
            return {
                autoDownloadFilesEnabled: !!c.default.getUserPreferencesLocal().autoDownloadFiles
            }
        }
        render() {
            const e = a.getString("UserSettingsPanel.AutoDownloadFilesTitle")
              , t = a.getString("UserSettingsPanel.AutoDownloadFilesSubtitle")
              , i = [u.styles.controlRow, this._themeStyles.dividerBorderColorStyle]
              , r = s.default.combinedAccessibilityLabel(e, t);
            return n.createElement(o, {
                key: "autoDownloadFiles",
                style: [i, this.props.style],
                isOn: this.state.autoDownloadFilesEnabled,
                accessibilityLabel: r,
                onChange: this._onChange
            }, n.createElement(d.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
    }
    t.default = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(42)
      , r = i(4)
      , a = i(62)
      , l = i(84)
      , c = i(103)
      , d = i(12);
    class u extends d.default {
        constructor() {
            super(...arguments),
            this._onDisplayUrlPreviewsEnabled = (e,t)=>{
                this.state.displayUrlPreviewsEnabled !== t && a.default.setDisplayUrlPreviewsEnabled(t)
            }
        }
        _buildState(e, t) {
            return {
                displayUrlPreviewsEnabled: !!a.default.getDisplayUrlPreviews()
            }
        }
        render() {
            const e = r.getString("UserSettingsPanel.DisplayUrlPreviews")
              , t = r.getString("UserSettingsPanel.DisplayUrlPreviewsSubtitle")
              , i = [c.styles.controlRow, this._themeStyles.dividerBorderColorStyle];
            return n.createElement(o, {
                key: "displayUrlPreviews",
                style: [i, this.props.style],
                isOn: this.state.displayUrlPreviewsEnabled,
                accessibilityLabel: s.default.combinedAccessibilityLabel(e, t),
                onChange: this._onDisplayUrlPreviewsEnabled
            }, n.createElement(l.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
    }
    t.default = u
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(77)
      , a = i(523)
      , l = i(5)
      , c = i(4)
      , d = i(494)
      , u = i(113)
      , g = i(249)
      , h = i(32)
      , p = i(73)
      , m = i(15)
      , S = i(12)
      , C = l.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            justifyContent: "space-between",
            flexDirection: "row",
            alignItems: "center",
            alignSelf: "stretch"
        }),
        button: ()=>o.Styles.createButtonStyle({
            flexDirection: "row",
            alignItems: "stretch",
            marginLeft: 10
        }),
        chevron: ()=>o.Styles.createTextStyle({
            marginTop: 4
        })
    });
    class y extends S.default {
        constructor() {
            super(...arguments),
            this._items = [{
                label: c.getString("UserSettingsPanel.TextSizeSmaller"),
                value: u.MessageStreamFontSize[u.MessageStreamFontSize.Smaller]
            }, {
                label: c.getString("UserSettingsPanel.TextSizeSmall"),
                value: u.MessageStreamFontSize[u.MessageStreamFontSize.Small]
            }, {
                label: c.getString("UserSettingsPanel.TextSizeNormal"),
                value: u.MessageStreamFontSize[u.MessageStreamFontSize.Normal]
            }, {
                label: c.getString("UserSettingsPanel.TextSizeLarge"),
                value: u.MessageStreamFontSize[u.MessageStreamFontSize.Large]
            }, {
                label: c.getString("UserSettingsPanel.TextSizeLarger"),
                value: u.MessageStreamFontSize[u.MessageStreamFontSize.Larger]
            }],
            this._onPickerButtonRef = e=>{
                this._pickerButton = e
            }
            ,
            this._onPickerClick = e=>{
                const t = {
                    anchor: ()=>this._pickerButton,
                    useTheme: !0,
                    positionPriorities: ["bottom", "top"]
                };
                return p.default.showWithOptions({
                    id: "fontSizePickerMenu",
                    config: t,
                    getMenuItems: this._getMenuItems,
                    handleMenuCommand: this._onHandleMenuCommand,
                    rootViewId: this._getRootViewId(),
                    invokingEvent: e
                })
            }
            ,
            this._getMenuItems = ()=>this._items.map(e=>({
                text: e.label,
                command: e.value,
                selected: e.value === u.MessageStreamFontSize[this.state.currentFontSize],
                isCheckbox: !0
            })),
            this._onHandleMenuCommand = e=>{
                if (e === p.SXActionMenuCancel)
                    return;
                let t;
                switch (e) {
                case u.MessageStreamFontSize[u.MessageStreamFontSize.Smaller]:
                    t = u.MessageStreamFontSize.Smaller;
                    break;
                case u.MessageStreamFontSize[u.MessageStreamFontSize.Small]:
                    t = u.MessageStreamFontSize.Small;
                    break;
                case u.MessageStreamFontSize[u.MessageStreamFontSize.Large]:
                    t = u.MessageStreamFontSize.Large;
                    break;
                case u.MessageStreamFontSize[u.MessageStreamFontSize.Larger]:
                    t = u.MessageStreamFontSize.Larger;
                    break;
                case u.MessageStreamFontSize[u.MessageStreamFontSize.Normal]:
                default:
                    t = u.MessageStreamFontSize.Normal
                }
                d.setFontSize(t, g.FontSizeChangeOrigin.Settings)
            }
        }
        _buildState(e, t) {
            return {
                currentFontSize: h.default.getMessageStreamFontSize()
            }
        }
        render() {
            const e = c.getString("UserSettingsPanel.TextSize") + ", " + this._getSelectedItemLabel() + ", " + c.getString("Global.SelectedAccessibilityLabel");
            return o.createElement(o.View, null, o.createElement(o.View, {
                style: [C.container, s.ListItem.small.shortHeightStyle]
            }, o.createElement(m.RowTitle, {
                colorThemeOverride: this._currentTheme
            }, c.getString("UserSettingsPanel.TextSize")), o.createElement(a, {
                ref: this._onPickerButtonRef,
                style: C.button,
                label: this._getSelectedItemLabel(),
                useBodyBoldLabel: !0,
                labelMaxWidth: 270,
                chevronStyle: C.chevron,
                onPress: this._onPickerClick,
                accessibilityLabel: e
            })), o.createElement(r, null))
        }
        _getSelectedItemLabel() {
            const e = n.find(this._items, e=>e.value === u.MessageStreamFontSize[this.state.currentFontSize]);
            return e ? e.label : ""
        }
    }
    e.exports = y
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(4)
      , r = i(32)
      , a = i(84)
      , l = i(103)
      , c = i(12);
    class d extends c.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                this.state.enabled !== t && r.default.setUserPreferencesLocal({
                    openUrlInExternalBrowser: !t
                })
            }
        }
        _buildState(e, t) {
            return {
                enabled: !r.default.getUserPreferencesLocal().openUrlInExternalBrowser
            }
        }
        render() {
            const e = s.getString("UserSettingsPanel.InternalBrowserToggleButton")
              , t = [l.styles.controlRow, this._themeStyles.dividerBorderColorStyle];
            return n.createElement(o, {
                key: "internalBrowserToggle",
                style: [t, this.props.style],
                isOn: this.state.enabled,
                accessibilityLabel: e,
                onChange: this._onChange
            }, n.createElement(a.SwitchLabel, {
                title: e
            }))
        }
    }
    t.default = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(6)
      , r = i(51)
      , a = i(42)
      , l = i(3)
      , c = i(4)
      , d = i(249)
      , u = i(32)
      , g = i(84)
      , h = i(103);
    class p extends r.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                u.default.setUserPreferencesLocal({
                    pasteAsQuotesEnabled: t
                }),
                l.track(new d.PasteAsQuoteToggleSetting(t))
            }
        }
        _buildState() {
            return {
                pasteAsQuotesEnabled: s.default.getS4LMessagingFeatures().enableMultiMessageQuoteOnKeyboard && u.default.getUserPreferencesLocal().pasteAsQuotesEnabled
            }
        }
        render() {
            const e = c.getString("UserSettingsPanel.PasteAsQuotesToggleLabel");
            return n.createElement(o, {
                key: "pasteAsQuote",
                style: [h.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.pasteAsQuotesEnabled,
                accessibilityLabel: a.default.combinedAccessibilityLabel(e),
                onChange: this._onChange
            }, n.createElement(g.SwitchLabel, {
                title: e
            }))
        }
    }
    t.default = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(10)
      , r = i(3)
      , a = i(4)
      , l = i(249)
      , c = i(32)
      , d = i(2941)
      , u = i(103)
      , g = i(12)
      , h = i(90);
    class p extends g.default {
        constructor() {
            super(...arguments),
            this._onChange = e=>{
                this._prefetchOptionsMenu.show(()=>this._wideButton, this._getRootViewId(), e)
            }
            ,
            this._handleModeChange = e=>{
                void 0 !== e && this.state.prefetchStatus !== e && (c.default.setUserPreferencesLocal({
                    picturePrefetchMode: e
                }),
                r.track(new l.PicturePrefetchToggleSetting(e)))
            }
            ,
            this._onRefWideButton = e=>{
                this._wideButton = e || void 0
            }
        }
        _buildState(e, t) {
            return t && (this._prefetchOptionsMenu = new d.default(this._handleModeChange)),
            {
                prefetchStatus: c.default.getUserPreferencesLocal().picturePrefetchMode || o.default.getS4LCMCFeatures().picturePrefetch.status
            }
        }
        render() {
            const e = a.getString("UserSettingsPanel.PicturePrefetchTitle");
            let t;
            switch (this.state.prefetchStatus) {
            case "Off":
                t = a.getString("UserSettingsPanel.PicturePrefetchStatusOff");
                break;
            case "On":
                t = a.getString("UserSettingsPanel.PicturePrefetchStatusOn");
                break;
            case "Wifi":
                t = a.getString("UserSettingsPanel.PicturePrefetchStatusWifi")
            }
            return n.createElement(h.WideButton, {
                ref: this._onRefWideButton,
                key: "manageProfile",
                label: e,
                labelStyle: u.styles.titleMediumSemiLarge,
                buttonStyles: s.ListItem.small.shortHeightStyle,
                labelBottom: t,
                onPressed: this._onChange,
                hideArrow: !0,
                treatAsLink: !1
            })
        }
    }
    t.default = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(4)
      , o = i(73)
      , s = o.default.menuId();
    t.default = class {
        constructor(e) {
            this._feedbackHandler = e,
            this._menuOptions = ()=>[{
                text: n.getString("UserSettingsPanel.PicturePrefetchStatusOn"),
                command: "On"
            }, {
                text: n.getString("UserSettingsPanel.PicturePrefetchStatusWifi"),
                command: "Wifi"
            }, {
                text: n.getString("UserSettingsPanel.PicturePrefetchStatusOff"),
                command: "Off"
            }],
            this._handleMenuCommand = (e,t)=>{
                e !== o.SXActionMenuCancel ? this._feedbackHandler(e) : this._feedbackHandler(void 0)
            }
        }
        show(e, t, i) {
            const r = {
                anchor: e,
                useTheme: !0,
                popupBeakSize: {
                    height: 0,
                    width: 0
                },
                positionPriorities: ["top", "left"]
            };
            o.default.showWithOptions({
                id: s,
                config: r,
                getMenuItems: this._menuOptions,
                handleMenuCommand: e=>this._handleMenuCommand(e, t),
                menuTitle: n.getString("UserSettingsPanel.PicturePrefetchTitle"),
                rootViewId: t,
                invokingEvent: i
            })
        }
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(102)
      , s = i(6)
      , r = i(3)
      , a = i(4)
      , l = i(249)
      , c = i(32)
      , d = i(84)
      , u = i(103)
      , g = i(12);
    class h extends g.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                if (this.state.prefetchEnabled !== t) {
                    const e = t ? "On" : "Off";
                    c.default.setUserPreferencesLocal({
                        picturePrefetchMode: e
                    }),
                    r.track(new l.PicturePrefetchToggleSetting(e))
                }
            }
        }
        _buildState(e, t) {
            return {
                prefetchEnabled: "Off" !== (c.default.getUserPreferencesLocal().picturePrefetchMode || s.default.getS4LCMCFeatures().picturePrefetch.status)
            }
        }
        render() {
            const e = a.getString("UserSettingsPanel.PicturePrefetchTitle");
            return n.createElement(o, {
                key: "autoDownloadFiles",
                style: [u.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.prefetchEnabled,
                accessibilityLabel: e,
                onChange: this._onChange
            }, n.createElement(d.SwitchLabel, {
                title: e
            }))
        }
    }
    e.exports = h
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(51)
      , r = i(42)
      , a = i(2)
      , l = i(3)
      , c = i(4)
      , d = i(249)
      , u = i(32)
      , g = i(84)
      , h = i(103)
      , p = i(18)
      , m = i(59);
    class S extends s.default {
        constructor() {
            super(...arguments),
            this._onChangeSendMessageWithEnter = (e,t)=>{
                u.default.setUserPreferencesLocal({
                    sendMessageWithEnter: t
                }),
                l.track(new d.SendMessageWithEnterToggleSetting(t))
            }
        }
        _buildState(e, t) {
            return {
                sendMessageWithEnterEnabled: !!u.default.getUserPreferencesLocal().sendMessageWithEnter
            }
        }
        render() {
            const e = c.getString("UserSettingsPanel.SendMessageWithEnterToggleLabel")
              , t = this._getSubtitle();
            return n.createElement(o, {
                key: "sendMessageWithEnter",
                style: [h.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.sendMessageWithEnterEnabled,
                accessibilityLabel: r.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChangeSendMessageWithEnter
            }, n.createElement(g.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
        _getSubtitle() {
            if (m.isTabletNoSubscription())
                return c.getString("UserSettingsPanel.TabletSubtextSendMessageWithEnter");
            const e = p.getPlatformType();
            return e === a.PlatformType.Windows ? this.state.sendMessageWithEnterEnabled ? c.getString("UserSettingsPanel.PcSubtextSendMessageWithEnterToggleOn") : c.getString("UserSettingsPanel.PcSubtextSendMessageWithEnterToggleOff") : e === a.PlatformType.OSX || e === a.PlatformType.Linux ? this.state.sendMessageWithEnterEnabled ? c.getString("UserSettingsPanel.MacSubtextSendMessageWithEnterToggleOn") : c.getString("UserSettingsPanel.MacSubtextSendMessageWithEnterToggleOff") : void 0
        }
    }
    t.default = S
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(51)
      , s = i(10)
      , r = i(77)
      , a = i(2)
      , l = i(317)
      , c = i(566)
      , d = i(151)
      , u = i(3)
      , g = i(5)
      , h = i(4)
      , p = i(249)
      , m = i(32)
      , S = i(103)
      , C = i(131)
      , y = i(14)
      , f = i(15)
      , _ = i(9)
      , b = g.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            justifyContent: "space-between",
            flexDirection: "row",
            alignItems: "center",
            alignSelf: "stretch"
        }),
        changeLocationText: ()=>n.Styles.createTextStyle({
            maxWidth: 270
        })
    });
    class v extends o.default {
        constructor() {
            super(...arguments),
            this._fallbackPathName = "Downloads",
            this._onLocationLinkPress = e=>{
                e.preventDefault();
                const t = _.newCauseId();
                u.log(a.LogTraceArea.FileNode, "SetFileDownloadLocationButton._onLocationLinkPress causeId: " + t),
                c.openFolderLocation(this.state.fileDownloadPathDesktop)
            }
            ,
            this._onChangeLocationPress = e=>{
                e.preventDefault();
                l.FilePickerUtils.showOpenDialog({
                    properties: ["openDirectory"]
                }, e=>{
                    if (e.path === this.state.fileDownloadPathDesktop && e.displayName === this.state.fileDownloadDisplayNameDesktop)
                        return;
                    m.default.setFileDownloadPath(e);
                    const t = _.newCauseId();
                    u.track(new p.FileDownloadPathDesktopSetting),
                    u.log(a.LogTraceArea.FileNode, "SetFileDownloadLocationButton._onChangeLocationPress causeId: " + t)
                }
                )
            }
        }
        _buildState(e, t) {
            const i = m.default.getUserPreferencesLocal();
            return {
                fileDownloadPathDesktop: i.fileDownloadPathDesktop || this._fallbackPathName,
                fileDownloadDisplayNameDesktop: i.fileDownloadDisplayNameDesktop || this._fallbackPathName
            }
        }
        render() {
            const e = h.getString("UserSettingsPanel.FileDownloadLocationLabel")
              , t = h.getString("UserSettingsPanel.ChangeFileDownloadLocationButton")
              , i = e + t
              , o = n.createElement(f.RowTitle, {
                colorThemeOverride: this._currentTheme,
                numberOfLines: 2,
                style: S.styles.switchTitleMediumSemiLarge,
                key: "title"
            }, e)
              , a = n.createElement(C.default, {
                url: "#",
                key: "keyDownloadPath",
                blue: !0,
                onPress: this._onLocationLinkPress
            }, this.state.fileDownloadDisplayNameDesktop)
              , l = h.getParts("UserSettingsPanel.FileDownloadDefaultLocation", {
                downloadLocationLink: a
            })
              , c = n.createElement(f.Caption, {
                style: S.styles.subtitleMediumSemiLarge,
                numberOfLines: 4,
                key: "subtitle"
            }, l);
            return n.createElement(n.View, null, n.createElement(n.View, {
                style: [b.container, s.ListItem.small.shortHeightStyle]
            }, n.createElement(n.View, {
                style: y.flexOne
            }, o, c), n.createElement(d.HoverableButton, {
                style: y.noncollapsibleView,
                accessibilityTraits: [n.Types.AccessibilityTrait.Button, n.Types.AccessibilityTrait.HasPopup],
                onPress: this._onChangeLocationPress,
                accessibilityLabel: i
            }, n.createElement(f.BodyText, {
                size: f.BodyTextSize.SmallDeprecated,
                style: b.changeLocationText,
                textThemeColor: f.TextThemeColor.Secondary
            }, t))), n.createElement(r, null))
        }
    }
    t.default = v
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(70)
      , o = i(0)
      , s = i(102)
      , r = i(6)
      , a = i(51)
      , l = i(860)
      , c = i(1158)
      , d = i(42)
      , u = i(10)
      , g = i(588)
      , h = i(691)
      , p = i(887)
      , m = i(281)
      , S = i(160)
      , C = i(28)
      , y = i(1692)
      , f = i(77)
      , _ = i(2)
      , b = i(3)
      , v = i(5)
      , T = i(108)
      , P = i(224)
      , A = i(4)
      , k = i(434)
      , I = i(32)
      , w = i(62)
      , N = i(20)
      , M = i(17)
      , E = i(1193)
      , x = i(177)
      , D = i(360)
      , L = i(1191)
      , R = i(84)
      , B = (i(868),
    i(1696))
      , O = i(394)
      , F = i(66)
      , V = i(131)
      , U = i(15)
      , H = i(53)
      , W = i(90)
      , z = "chat"
      , G = "privacy"
      , K = "cortana"
      , j = v.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            marginHorizontal: 20
        }),
        settingsContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsBlockContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            overflow: "visible"
        }),
        settingContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            alignSelf: "stretch",
            justifyContent: "space-between"
        }),
        switchLabelWrapper: ()=>o.Styles.createTextStyle({
            flex: 1,
            marginVertical: 5
        }),
        switchLabel: ()=>o.Styles.createTextStyle({
            flex: 1,
            paddingRight: 10
        }),
        title: ()=>o.Styles.createTextStyle({
            paddingTop: 30,
            paddingBottom: 10
        }),
        cortanaNotebookSettingContainer: ()=>o.Styles.createViewStyle({
            marginVertical: 2,
            flexDirection: "column",
            justifyContent: "flex-start"
        }),
        cortanaNotebookSpinner: ()=>o.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            alignItems: "center",
            justifyContent: "center"
        })
    });
    class q extends a.default {
        constructor() {
            super(...arguments),
            this._toggleSwitchWithTextStyle = [j.settingContainer, u.ListItem.small.shortHeightStyle],
            this._onShareLocationWithBingRef = e=>{
                this._shareLocationWithBingRef = e || void 0
            }
            ,
            this._onChangeBingLocationConsentGranted = (e,t)=>{
                t ? l.displayModal(this._getRootViewId(), {
                    onModalClosed: this._onBingConsentModalClosed
                }) : (b.track(new c.BingPermissionsInteractionEvent(_.BingPermissionsEntryPoint.BingSettings,n.PermissionStatus.Denied)),
                I.default.setUserPreferencesLocal({
                    bingLocationConsentGranted: !1,
                    locationStoreLastPromptTime: Date.now()
                }))
            }
            ,
            this._onBingConsentModalClosed = ()=>{
                this._shareLocationWithBingRef && this._shareLocationWithBingRef.focusToggle()
            }
            ,
            this._onPressProfilePicture = ()=>{
                M.navigateToProfilePicturePanel(this._getContext())
            }
            ,
            this._onPressManageUsers = ()=>{
                M.navigateToManageUsersSettingsPanel(this._getContext())
            }
            ,
            this._onPressManageSearchInfo = ()=>{
                M.navigateToManageSearchInfoPanel(D.ManageSearchOrigin.ApplicationSettings, this._getContext())
            }
            ,
            this._onPressDiagnosticTools = ()=>{
                M.navigateToDiagnosticTools(this._getContext())
            }
            ,
            this._onPressEffectsPrivacy = ()=>{
                M.navigateToEffectsPrivacy(this._getContext())
            }
            ,
            this._onNotebookLinkPressed = ()=>{
                this.state.cortanaAccessToken && !this.state.isBingAuthCookieInSync || g.authorize(void 0, !0, _.CortanaAuthOrigin.NotebookLink).then(()=>{
                    this.state.notebookUrl && this.state.cortanaAccessToken ? M.navigateToDesktopCortanaNotebook(this.state.notebookUrl, this.state.cortanaAccessToken, this._getContext()) : this.state.cortanaAccessToken
                }
                )
            }
            ,
            this._onToggleSuggestions = (e,t)=>{
                b.track(new m.CortanaActionsEvent(this.state.cortanaOptedIn,t ? _.CortanaActionType.EnableSuggestions : _.CortanaActionType.DisableSuggestions)),
                O.setSuggestionsEnabled(t)
            }
            ,
            this._onCortanaLearnMore = ()=>{
                T.openUrlWithParams({
                    origin: _.BrowserOrigin.CortanaSettingsDescription,
                    url: r.default.getConfigSettingsNoSubscription().cortana.learnMoreUrl,
                    componentContext: this._getContext()
                })
            }
            ,
            this._onToggleCortana = (e,t)=>{
                b.track(new m.CortanaActionsEvent(this.state.cortanaOptedIn,t ? _.CortanaActionType.EnablePersonalization : _.CortanaActionType.DisablePersonalization)),
                t ? (b.track(new m.CortanaInteractionEvent(_.CortanaEntryPoint.CortanaSettings)),
                h.navigateToCortanaConversation(_.CortanaEntryPoint.CortanaSettings, void 0, !0)) : (this.setState({
                    showCortanaSpinner: !0
                }),
                p.disableCortanaAndRemoveUserTokens().always(()=>{
                    this.setState({
                        showCortanaSpinner: !1
                    })
                }
                ))
            }
            ,
            this._onChangeSyncAddressBook = (e,t)=>{
                this.state.syncAddressBookEnabled !== t && (t ? M.navigateToSyncAddressBook({
                    origin: S.DialogNavOrigin.Settings,
                    hideSkipButton: !0
                }, void 0, this._getContext()) : x.setSyncAddressBookPrivacySetting(t))
            }
        }
        _buildState(e, t) {
            const i = I.default.getUserPreferencesLocal()
              , n = H.default.getCortanaToken();
            return {
                syncAddressBookEnabled: x.getSyncAddressBookPrivacySetting(),
                enableLocationSharing: r.default.getS4LMessagingFeatures().enableLocationSharingOnDesktopAndWeb,
                bingLocationConsentGranted: k.bingLocationConsentAndPermissionGranted(),
                suggestionsEnabled: O.getSuggestionsEnabled(),
                ecsSuggestionsConsentEnabled: r.default.getS4LCortanaFeatures().suggestionsConsentEnabled,
                cortanaOptedIn: w.default.getCortanaOptedIn(),
                ecsEffectsEnabled: !1,
                ecsCortanaEnabled: r.default.getS4LCortanaFeatures().enabled,
                isBingAuthCookieInSync: !!i.isBingAuthCookieInSync,
                notebookUrl: r.default.getCortanaNotebookUrl(),
                cortanaAccessToken: n ? n.accessToken : void 0,
                showCortanaSpinner: !1,
                sendReadReceiptsFeatureEnabled: r.default.getS4LMessagingFeatures().enableReadReceipts,
                showAddPhotoLabel: !C.getDisplayableProfile(N.getSkypeMri()).getAvatarUrl()
            }
        }
        render() {
            return this.props.notificationsOnly ? o.createElement(o.View, {
                style: j.container
            }, o.createElement(E.default, {
                buttonStyles: u.ListItem.small.shortHeightStyle
            })) : o.createElement(o.View, {
                style: j.container,
                forceDirection: !0
            }, this._renderChatSettings(), o.createElement(E.default, {
                buttonStyles: u.ListItem.small.shortHeightStyle
            }), o.createElement(B.default, null), this._renderPrivacySettings(), this._renderCortanaSettings())
        }
        _renderChatSettings() {
            return this._getSettingsSection(z, A.getString("UserSettingsPanel.ChatHeaderUpper"), [o.createElement(y.default, {
                style: this._toggleSwitchWithTextStyle,
                key: "displaylargeemoticons"
            })])
        }
        _renderPrivacySettings() {
            let e = [];
            return P.isAddressBookEnabled() && (e.push(o.createElement(s, {
                key: "syncAddressBook",
                style: this._toggleSwitchWithTextStyle,
                isOn: this.state.syncAddressBookEnabled,
                accessibilityLabel: A.getString("UserSettingsPanel.SyncAddressBook"),
                onChange: this._onChangeSyncAddressBook
            }, this._renderSwitchLabel(A.getString("UserSettingsPanel.SyncAddressBook")))),
            e.push(o.createElement(f, {
                key: "syncAddressBookDivider"
            }))),
            this.state.enableLocationSharing && (e.push(o.createElement(s, {
                key: "shareLocationWithBing",
                ref: this._onShareLocationWithBingRef,
                style: this._toggleSwitchWithTextStyle,
                isOn: this.state.bingLocationConsentGranted,
                accessibilityLabel: A.getString("UserSettingsPanel.BingLocation"),
                onChange: this._onChangeBingLocationConsentGranted
            }, this._renderSwitchLabel(A.getString("UserSettingsPanel.BingLocation")))),
            e.push(o.createElement(f, {
                key: "shareLocationWithBingDivider"
            }))),
            this.state.sendReadReceiptsFeatureEnabled && e.push(o.createElement(L.default, {
                style: this._toggleSwitchWithTextStyle,
                key: "sendReadReceipts"
            })),
            this.state.ecsDiagnosticToolsEnabled && e.push(o.createElement(W.WideButton, {
                key: "diagnosticTools",
                label: A.getString("UserSettingsPanel.DiagnosticToolsTitle"),
                onPressed: this._onPressDiagnosticTools,
                buttonStyles: u.ListItem.small.shortHeightStyle
            })),
            e.push(o.createElement(W.WideButton, {
                key: "profilePicture",
                label: A.getString("UserSettingsPanel.ProfilePictureTitle"),
                onPressed: this._onPressProfilePicture,
                buttonStyles: u.ListItem.small.shortHeightStyle,
                labelRight: this.state.showAddPhotoLabel ? A.getString("UserSettingsPanel.AddPhotoLabel") : void 0
            })),
            e.push(o.createElement(W.WideButton, {
                key: "manageUsers",
                label: A.getString("UserSettingsPanel.ManageContactsTitle"),
                onPressed: this._onPressManageUsers,
                buttonStyles: u.ListItem.small.shortHeightStyle
            })),
            e.push(o.createElement(W.WideButton, {
                key: "manageSearchInfo",
                label: A.getString("ManageSearchInfoPanel.PanelTitle"),
                onPressed: this._onPressManageSearchInfo,
                buttonStyles: u.ListItem.small.shortHeightStyle
            })),
            this.state.ecsEffectsEnabled && e.push(o.createElement(W.WideButton, {
                key: "effects",
                label: A.getString("CapturePreview.EffectsTitle"),
                onPressed: this._onPressEffectsPrivacy,
                buttonStyles: u.ListItem.small.shortHeightStyle
            })),
            this._getSettingsSection(G, A.getString("UserSettingsPanel.PrivacyHeaderUpper"), e)
        }
        _renderCortanaSettings() {
            if (!this.state.ecsCortanaEnabled && !this.state.ecsSuggestionsConsentEnabled)
                return;
            const e = A.getString("UserSettingsPanel.CortanaLearnMoreLink")
              , t = o.createElement(V.default, {
                url: r.default.getConfigSettingsNoSubscription().cortana.learnMoreUrl,
                onPress: this._onCortanaLearnMore,
                blue: !0,
                key: "suggestionsLearnMoreLink "
            }, e);
            let i = [];
            if (this.state.ecsSuggestionsConsentEnabled) {
                i.push(o.createElement(s, {
                    key: "suggestionsEnabled",
                    style: this._toggleSwitchWithTextStyle,
                    isOn: this.state.suggestionsEnabled,
                    accessibilityLabel: A.getString("UserSettingsPanel.Suggestions"),
                    onChange: this._onToggleSuggestions
                }, this._renderSwitchLabel(A.getString("UserSettingsPanel.Suggestions"))));
                let e = o.createElement(U.Caption, {
                    key: "suggestionsTitle"
                }, A.getParts("UserSettingsPanel.SuggestionsDescription", {
                    learnMoreLink: t
                }));
                0,
                i.push(e),
                i.push(o.createElement(f, {
                    key: "suggestionsDivider",
                    marginTop: 15
                }))
            }
            if (this.state.ecsCortanaEnabled) {
                i.push(o.createElement(s, {
                    key: "cortanaOptedIn",
                    style: this._toggleSwitchWithTextStyle,
                    isOn: this.state.cortanaOptedIn,
                    accessibilityLabel: A.getString("UserSettingsPanel.CortanaPersonalization"),
                    onChange: this._onToggleCortana,
                    showSpinner: this.state.showCortanaSpinner
                }, this._renderSwitchLabel(A.getString("UserSettingsPanel.CortanaPersonalization"))));
                let e = o.createElement(U.Caption, {
                    key: "cortanaTitle"
                }, A.getParts("UserSettingsPanel.CortanaPersonalizationDescription", {
                    learnMoreLink: t
                }));
                if (i.push(e),
                i.push(o.createElement(f, {
                    key: "cortanaDivider",
                    marginTop: 15
                })),
                this.state.cortanaOptedIn) {
                    const e = this.state.cortanaAccessToken && !this.state.isBingAuthCookieInSync ? o.createElement(o.View, {
                        style: j.cortanaNotebookSpinner
                    }, o.createElement(F.default, {
                        size: u.SXActivityIndicatorSize.Small,
                        tintColor: this._themeColors.secondaryTextColor,
                        useRXIndicator: !0
                    })) : null;
                    i.push(o.createElement(o.View, {
                        style: j.cortanaNotebookSettingContainer,
                        key: "cortanaAdvancedSettingsText"
                    }, o.createElement(W.WideButton, {
                        label: A.getString("UserSettingsPanel.NotebookLink"),
                        onPressed: this._onNotebookLinkPressed,
                        hideDivider: !0,
                        buttonStyles: u.ListItem.small.shortHeightStyle
                    }), o.createElement(U.Caption, {
                        onPress: this._onNotebookLinkPressed
                    }, A.getString("UserSettingsPanel.NotebookDescription")), e, o.createElement(f, {
                        marginTop: 15
                    })))
                }
            }
            return this._getSettingsSection(K, A.getString("UserSettingsPanel.CortanaUpper"), i)
        }
        _wrapCortanaLink(e, t, i) {
            const n = d.default.linkAccessibilityInfo(t);
            return o.createElement(o.View, {
                key: i,
                accessibilityLabel: n ? n.label : void 0,
                accessibilityTraits: n ? n.traits : void 0,
                onPress: this._onCortanaLearnMore,
                importantForAccessibility: o.Types.ImportantForAccessibility.Yes
            }, e)
        }
        _getSettingsSection(e, t, i) {
            return o.createElement(o.View, {
                key: e,
                style: j.settingsBlockContainer
            }, o.createElement(R.SectionTitle, {
                key: e,
                title: t,
                titleStyles: j.title
            }), o.createElement(o.View, {
                style: [j.settingsContainer, this._themeStyles.primaryBackgroundColorStyle]
            }, i))
        }
        _renderSwitchLabel(e) {
            return o.createElement(o.View, {
                style: j.switchLabelWrapper
            }, o.createElement(U.RowTitle, {
                style: j.switchLabel,
                numberOfLines: 2
            }, e))
        }
    }
    t.default = q
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(42)
      , r = i(175)
      , a = i(4)
      , l = i(62)
      , c = i(20)
      , d = i(84)
      , u = i(103)
      , g = i(25)
      , h = i(12)
      , p = i(45);
    class m extends h.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                l.default.setCallNotificationsWhileDNDEnabled(t)
            }
        }
        _buildState(e, t) {
            const i = p.getFullUserProfileByMri(c.getSkypeMri());
            return {
                callNotificationsWhileDNDEnabled: !!l.default.getCallNotificationsWhileDNDEnabled(),
                gender: i && i.gender || g.eGender.Unspecified
            }
        }
        render() {
            const e = a.getString("UserSettingsPanel.CallNotificationsDuringDNDLabel")
              , t = a.getString("UserSettingsPanel.CallNotificationsDuringDNDSecondary", {
                gender: r.getLocalizeParamForGender(this.state.gender)
            });
            return n.createElement(o, {
                key: "callNotificationsDuringDND",
                style: [u.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.callNotificationsWhileDNDEnabled,
                accessibilityLabel: s.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChange
            }, n.createElement(d.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
    }
    t.default = m
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(42)
      , r = i(175)
      , a = i(4)
      , l = i(516)
      , c = i(62)
      , d = i(20)
      , u = i(84)
      , g = i(103)
      , h = i(25)
      , p = i(12)
      , m = i(45);
    class S extends p.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                c.default.setChatNotificationsWhileDNDEnabled(t)
            }
        }
        _buildState(e, t) {
            const i = m.getFullUserProfileByMri(d.getSkypeMri());
            return {
                chatNotificationsWhileDNDEnabled: !!c.default.getChatNotificationsWhileDNDEnabled(),
                gender: i && i.gender || h.eGender.Unspecified,
                enableChatNotifications: l.areNotificationsEnabled()
            }
        }
        render() {
            const e = a.getString("UserSettingsPanel.ChatNotificationsDuringDNDLabel")
              , t = a.getString("UserSettingsPanel.ChatNotificationsDuringDNDSecondary", {
                gender: r.getLocalizeParamForGender(this.state.gender)
            });
            return n.createElement(o, {
                key: "chatNotificationsDuringDND",
                style: [g.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.chatNotificationsWhileDNDEnabled,
                accessibilityLabel: s.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChange,
                disable: !this.state.enableChatNotifications
            }, n.createElement(u.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
    }
    t.default = S
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(1)
      , s = i(13)
      , r = i(211)
      , a = i(2)
      , l = i(3)
      , c = i(429)
      , d = i(427);
    t.TriggerKeys = d.OptionServiceOptions;
    let u = class extends s.StoreBase {
        constructor() {
            super(...arguments),
            this._preferences = {},
            this._fetchPromises = {}
        }
        isEmailMissedCallRemindersEnabled() {
            if (this._getPreference(t.TriggerKeys.EmailMissedCallReminders))
                return this._getPreference(t.TriggerKeys.EmailMissedCallReminders) === d.EmailMissedRemindersOptionValue.Enabled;
            this._fetchEmailMissedContentOptionsAndTrigger()
        }
        isEmailMissedMessageRemindersEnabled() {
            if (this._getPreference(t.TriggerKeys.EmailMissedMessageReminders))
                return this._getPreference(t.TriggerKeys.EmailMissedMessageReminders) === d.EmailMissedRemindersOptionValue.Enabled;
            this._fetchEmailMissedContentOptionsAndTrigger()
        }
        setEmailMissedCallRemindersEnabled(e) {
            const i = e ? d.EmailMissedRemindersOptionValue.Enabled : d.EmailMissedRemindersOptionValue.Disabled;
            return c.default.setEmailMissedContentOption(d.OptionServiceOptions.EmailMissedCallReminders, i).then(()=>{
                l.log(a.LogTraceArea.PreferencesStores, `Setting ${t.TriggerKeys.EmailMissedCallReminders} to ${i}.`),
                l.track(new r.EngagementSettingsTelemetryEvent({
                    source: r.EngagementSettingsSource.EmailMissedCallReminders,
                    isToggled: i === d.EmailMissedRemindersOptionValue.Enabled
                })),
                this._setPreference(t.TriggerKeys.EmailMissedCallReminders, i),
                this.trigger(t.TriggerKeys.EmailMissedCallReminders)
            }
            )
        }
        setEmailMissedMessageRemindersEnabled(e) {
            const i = e ? d.EmailMissedRemindersOptionValue.Enabled : d.EmailMissedRemindersOptionValue.Disabled;
            return c.default.setEmailMissedContentOption(d.OptionServiceOptions.EmailMissedMessageReminders, i).then(()=>{
                l.log(a.LogTraceArea.PreferencesStores, `Setting ${t.TriggerKeys.EmailMissedMessageReminders} to ${i}.`),
                l.track(new r.EngagementSettingsTelemetryEvent({
                    source: r.EngagementSettingsSource.EmailMissedMessageReminders,
                    isToggled: i === d.EmailMissedRemindersOptionValue.Enabled
                })),
                this._setPreference(t.TriggerKeys.EmailMissedMessageReminders, i),
                this.trigger(t.TriggerKeys.EmailMissedMessageReminders)
            }
            )
        }
        _fetchEmailMissedContentOptionsAndTrigger() {
            if (this._fetchPromises[t.TriggerKeys.EmailMissedCallReminders] || this._fetchPromises[t.TriggerKeys.EmailMissedMessageReminders])
                return;
            const e = c.default.getEmailMissedContentOptions();
            this._fetchPromises[t.TriggerKeys.EmailMissedCallReminders] = this._fetchPromises[t.TriggerKeys.EmailMissedMessageReminders] = e,
            e.then(e=>{
                e && (o.each(e.options, e=>this._setPreference(e.name, e.value)),
                this.trigger([t.TriggerKeys.EmailMissedCallReminders, t.TriggerKeys.EmailMissedMessageReminders]))
            }
            ).always(()=>{
                delete this._fetchPromises[t.TriggerKeys.EmailMissedCallReminders],
                delete this._fetchPromises[t.TriggerKeys.EmailMissedMessageReminders]
            }
            )
        }
        _getPreference(e) {
            return this._preferences[e]
        }
        _setPreference(e, t) {
            this._preferences[e] = t
        }
        test_reset() {
            this._preferences = {}
        }
    }
    ;
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.EmailMissedCallReminders)], u.prototype, "isEmailMissedCallRemindersEnabled", null),
    n.__decorate([s.autoSubscribeWithKey(t.TriggerKeys.EmailMissedMessageReminders)], u.prototype, "isEmailMissedMessageRemindersEnabled", null),
    u = n.__decorate([s.AutoSubscribeStore], u),
    t.default = new u
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(42)
      , r = i(2)
      , a = i(3)
      , l = i(175)
      , c = i(4)
      , d = i(62)
      , u = i(20)
      , g = i(1103)
      , h = i(84)
      , p = i(103)
      , m = i(25)
      , S = i(12)
      , C = i(45);
    class y extends S.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                d.default.setNotifyOnPresenceChangeEnabled(t),
                a.track(new g.PresenceChangeNotificationToggleSetting(t)),
                a.log(r.LogTraceArea.PresenceChangeNotification, "Setting notify on presence change, enabled=" + t)
            }
        }
        _buildState(e, t) {
            const i = C.getFullUserProfileByMri(u.getSkypeMri());
            return {
                notifyOnPresenceChangeEnabled: !!d.default.getNotifyOnPresenceChangeEnabled(),
                gender: i && i.gender || m.eGender.Unspecified
            }
        }
        render() {
            const e = c.getString("UserSettingsPanel.NotifyOnPresenceChangeLabel")
              , t = c.getString("UserSettingsPanel.NotifyOnPresenceChangeSecondary", {
                gender: l.getLocalizeParamForGender(this.state.gender)
            });
            return n.createElement(o, {
                key: "notifyOnPresenceChange",
                style: [p.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.notifyOnPresenceChangeEnabled,
                accessibilityLabel: s.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChange
            }, n.createElement(h.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
    }
    t.default = y
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(42)
      , r = i(4)
      , a = i(62)
      , l = i(22)
      , c = i(84)
      , d = i(103)
      , u = i(12);
    class g extends u.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                a.default.setReactionNotificationsEnabled(t)
            }
        }
        _buildState(e, t) {
            return {
                isUsingStackNavigation: l.default.isUsingStackNavigationContext(),
                reactionNotificationsEnabled: !!a.default.getReactionNotificationsEnabled()
            }
        }
        render() {
            const e = r.getString("UserSettingsPanel.EnableReactionPushNotifications")
              , t = r.getString("UserSettingsPanel.EnableReactionPushNotificationsSecondary");
            return n.createElement(o, {
                style: [d.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.reactionNotificationsEnabled,
                accessibilityLabel: s.default.combinedAccessibilityLabel(e, t),
                onChange: this._onChange,
                disable: this.props.disable
            }, n.createElement(c.SwitchLabel, {
                title: e,
                subtitle: t
            }))
        }
    }
    t.default = g
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(6)
      , r = i(61)
      , a = i(42)
      , l = i(43)
      , c = i(2)
      , d = i(3)
      , u = i(108)
      , g = i(4)
      , h = i(32)
      , p = i(17)
      , m = i(55)
      , S = i(84)
      , C = i(103)
      , y = i(275)
      , f = i(131)
      , _ = i(14)
      , b = i(15)
      , v = i(9)
      , T = i(90);
    class P extends l.default {
        constructor() {
            super(...arguments),
            this._onLocalHotKeysPress = ()=>{
                const e = v.newCauseId();
                d.log(c.LogTraceArea.Navigation, "AccessibilitySettings._onLocalHotKeysPress causeId: " + e),
                p.navigateToDesktopSettingsGroup(m.SettingsGroup.HotKeys, this._getContext(), e)
            }
            ,
            this._onSystemHotKeysChanged = (e,t)=>{
                h.default.setUserPreferencesLocal({
                    enableSystemHotKeys: t
                }),
                d.track(new y.GlobalShortcutsSettingTelemetryEvent(t))
            }
            ,
            this._getHotkeysCaptionWithAccessibility = (e,t)=>n.createElement(n.View, {
                accessibilityLabel: t.label,
                accessibilityTraits: t.traits,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes
            }, n.createElement(b.Caption, {
                style: C.styles.subtitleMediumSemiLarge
            }, e)),
            this._onHotkeysLearnMore = ()=>{
                u.openUrlWithParams({
                    origin: c.BrowserOrigin.HotkeysSettingsDescription,
                    url: s.default.getConfigSettingsNoSubscription().hotkeys.learnMoreUrl,
                    componentContext: this._getContext()
                })
            }
        }
        _buildState(e, t) {
            return {
                enableHotKeysPanel: s.default.getS4LUiFeatures().enableHotKeysPanel,
                ecsEnableSystemHotKey: s.default.getS4LNativePlatformsEcsConfig().enableSystemHotKey,
                userEnableSystemHotKey: !!h.default.getUserPreferencesLocal().enableSystemHotKeys
            }
        }
        render() {
            let e;
            this.state.enableHotKeysPanel && (e = n.createElement(T.WideButton, {
                key: "hotkeys",
                label: g.getString("KeyboardShortcuts.Title2"),
                labelStyle: C.styles.titleMediumSemiLarge,
                onPressed: this._onLocalHotKeysPress
            }));
            const t = g.getString("UserSettingsPanel.HotkeysLearnMoreLink")
              , i = n.createElement(f.default, {
                url: s.default.getConfigSettingsNoSubscription().hotkeys.learnMoreUrl,
                onPress: this._onHotkeysLearnMore,
                blue: !0,
                key: "hotkeysLearnMoreLink "
            }, t);
            let l;
            if (r.UICapabilities.systemHotKeysSupported() && this.state.ecsEnableSystemHotKey) {
                const e = g.getString("KeyboardShortcuts.GlobalHotkeysHeader")
                  , s = g.getString("UserSettingsPanel.GlobalHotkeys")
                  , r = a.default.combinedAccessibilityLabel(e, g.getString("UserSettingsPanel.GlobalHotkeysSecondary", {
                    learnMoreLink: ""
                }))
                  , c = g.getParts("UserSettingsPanel.GlobalHotkeysSecondary", {
                    learnMoreLink: i
                })
                  , d = a.default.linkAccessibilityInfo(g.getString("UserSettingsPanel.GlobalHotkeysSecondary", {
                    learnMoreLink: t
                }))
                  , u = this._getHotkeysCaptionWithAccessibility(c, d);
                l = n.createElement(n.View, {
                    key: "systemHotKeysPanel"
                }, n.createElement(o, {
                    key: "systemHotKeysToggle",
                    style: C.styles.controlRowWithDescription,
                    isOn: this.state.userEnableSystemHotKey,
                    accessibilityLabel: r,
                    onChange: this._onSystemHotKeysChanged
                }, n.createElement(n.View, {
                    style: _.flexOne
                }, n.createElement(b.RowTitle, {
                    style: C.styles.switchTitleMediumSemiLarge
                }, s))), u)
            }
            return e || l ? n.createElement(n.View, null, n.createElement(S.SectionTitle, {
                title: g.getString("UserSettingsPanel.AccessibilityTitleUpper")
            }), e, l) : null
        }
    }
    t.default = P
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(10)
      , s = i(43)
      , r = i(2953)
      , a = i(4)
      , l = i(22)
      , c = i(84);
    class d extends s.default {
        _buildState(e, t) {
            return {
                isUsingStackNavigationContext: l.default.isUsingStackNavigationContext()
            }
        }
        render() {
            return n.createElement(n.View, {
                style: this.props.style
            }, n.createElement(c.SectionTitle, {
                title: a.getString("UserSettingsPanel.GeneralTitleUpper")
            }), n.createElement(r.default, {
                buttonStyles: this.state.isUsingStackNavigationContext ? void 0 : o.ListItem.small.shortHeightStyle
            }))
        }
    }
    t.default = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43)
      , s = i(4)
      , r = i(17)
      , a = i(11)
      , l = i(90);
    class c extends o.default {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                r.navigateToLanguagePicker(!1, this._getContext())
            }
        }
        render() {
            return n.createElement(l.WideButton, {
                buttonStyles: this.props.buttonStyles,
                icon: a.SkypeIcon.SkypeTranslator,
                label: s.getString("SettingsLanguages.LanguageLabel"),
                onPressed: this._onPress
            })
        }
    }
    t.default = c
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(10)
      , r = i(43)
      , a = i(2955)
      , l = i(5)
      , c = i(4)
      , d = i(17)
      , u = i(22)
      , g = i(84)
      , h = i(456)
      , p = i(131)
      , m = i(15)
      , S = i(9)
      , C = i(90)
      , y = l.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            paddingBottom: 10
        })
    });
    class f extends r.default {
        constructor() {
            super(...arguments),
            this._onVoiceClipsContributionSettingPressed = ()=>{
                d.showSpeechConsentPanel({
                    causeId: S.newCauseId(),
                    componentContext: this._getContext()
                })
            }
            ,
            this._onLearnMore = e=>{
                e.stopPropagation(),
                e.preventDefault(),
                n.Linking.openUrl(o.default.getConfigSettingsNoSubscription().translator.learnMoreUrl)
            }
        }
        _buildState(e, t) {
            const i = o.default.getS4LCMCFeatures();
            return {
                isUsingStackNavigationContext: u.default.isUsingStackNavigationContext(),
                isTranslationEnabled: i.callTranslatorBotConfig.enabledTranslatorOneOnOneCall || i.callTranslatorBotConfig.enabledTranslatorGroupCall || i.enableMessageTranslation,
                isSpeechConsentFlowEnabled: i.enableSpeechConsentFlow,
                speechConsentValue: i.enableSpeechConsentFlow && h.default.getSpeechConsentValue()
            }
        }
        _getLearnMoreLink() {
            return n.createElement(p.default, {
                linkTextStyle: s.LinkTextStyle.Caption,
                url: "#",
                key: "learnMore",
                blue: !0,
                onPress: this._onLearnMore
            }, c.getString("Global.LearnMore"))
        }
        _getConsentValue() {
            return this.state.speechConsentValue ? c.getString("CallingSettingsPanel.Enabled") : c.getString("CallingSettingsPanel.Disabled")
        }
        render() {
            if (!this.state.isTranslationEnabled)
                return null;
            let e, t;
            if (this.state.isSpeechConsentFlowEnabled) {
                const i = c.getString("SpeechConsentPanel.VoiceClipContribution");
                e = n.createElement(C.WideButton, {
                    label: i,
                    accessibilityLabel: i,
                    labelRight: this._getConsentValue(),
                    onPressed: this._onVoiceClipsContributionSettingPressed,
                    labelNumberOfLines: 3,
                    hideDivider: !0
                }),
                t = n.createElement(m.Caption, null, c.getString("SpeechConsentPanel.VoiceClipContributionCaption"), this._getLearnMoreLink())
            }
            return n.createElement(n.View, {
                style: [this.props.style, y.container]
            }, n.createElement(g.SectionTitle, {
                title: c.getString("LanguageAndTranslationSettingsPanel.TranslationHeader")
            }), n.createElement(a.default, {
                buttonStyles: this.state.isUsingStackNavigationContext ? void 0 : s.ListItem.small.shortHeightStyle
            }), e, t)
        }
    }
    t.default = f
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43)
      , s = i(4)
      , r = i(17)
      , a = i(90);
    class l extends o.default {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                r.navigateToTranslationSettingsPanel(!1, this._getContext())
            }
        }
        render() {
            return n.createElement(a.WideButton, {
                buttonStyles: this.props.buttonStyles,
                label: s.getString("UserSettingsPanel.TranslationSettingsTitle"),
                onPressed: this._onPress
            })
        }
    }
    t.default = l
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(102)
      , r = i(6)
      , a = (i(834),
    i(51))
      , l = i(567)
      , c = i(3)
      , d = i(4)
      , u = i(32)
      , g = i(17)
      , h = i(97)
      , p = i(262)
      , m = i(373)
      , S = i(84)
      , C = i(103)
      , y = i(306)
      , f = i(90);
    class _ extends a.default {
        constructor() {
            super(...arguments),
            this._onDisableShakeAndSendChange = (e,t)=>{
                u.default.setUserPreferencesLocal({
                    disableShakeAndSend: !t
                })
            }
            ,
            this._getDevFeatures = ()=>[],
            this._onPressManageFeatureFlags = ()=>{
                g.navigateToFeatureFlags(this._getContext())
            }
            ,
            this._onPressManageSlimcoreFlags = ()=>{
                g.navigateToSlimcoreFlags(this._getContext())
            }
            ,
            this._onPressShowRawConfig = ()=>{
                g.navigateToRawPreferences(this._getContext())
            }
            ,
            this._sxPlaygroundPress = ()=>{
                g.navigateToSXPlayground()
            }
            ,
            this._getSXPlayground = ()=>{}
            ,
            this._onSendFeedbackButtonPressed = ()=>{
                c.track(new p.NavigationHelpAndFeedback(h.NavigationSettingsItem.SendFeedback,h.NavigationSettingsOrigin.HelpAndFeedbackMenu)),
                m.openFeedbackUrl(r.default.getConfigSettings().feedbackAndProblemGoParam.feedback, d.getString("MyProfilePanel.SendFeedbackButtonTitle"), this._getRootViewId())
            }
            ,
            this._onBrowseKnownIssuesButtonPressed = ()=>{
                const e = l.getTelemetryCorrelationId();
                c.track(new p.NavigationHelpAndFeedback(h.NavigationSettingsItem.BrowseKnownIssues,h.NavigationSettingsOrigin.HelpAndFeedbackMenu,e)),
                this._openHelpUrlWithTrackingParams(r.default.getConfigSettings().helpGoParam.browseKnownIssues, d.getString("MyProfilePanel.BrowseKnownIssuesButtonTitle"), e)
            }
            ,
            this._onSkypeStatusButtonTitleButtonPressed = ()=>{
                const e = l.getTelemetryCorrelationId();
                c.track(new p.NavigationHelpAndFeedback(h.NavigationSettingsItem.SkypeStatus,h.NavigationSettingsOrigin.HelpAndFeedbackMenu,e)),
                this._openHelpUrlWithTrackingParams(r.default.getConfigSettings().helpGoParam.skypeStatus, d.getString("MyProfilePanel.SkypeStatusButtonTitle"), e)
            }
            ,
            this._onSupportArticlesButtonPressed = ()=>{
                const e = l.getTelemetryCorrelationId();
                c.track(new p.NavigationHelpAndFeedback(h.NavigationSettingsItem.GetHelp,h.NavigationSettingsOrigin.HelpAndFeedbackMenu,e)),
                this._openHelpUrlWithTrackingParams(r.default.getConfigSettings().helpGoParam.supportArticles, d.getString("MyProfilePanel.GetHelpTitle"), e)
            }
            ,
            this._onReportAProblemButtonPressed = ()=>{
                c.track(new p.NavigationHelpAndFeedback(h.NavigationSettingsItem.ReportAProblem,h.NavigationSettingsOrigin.HelpAndFeedbackMenu)),
                m.reportProblem(!0, this._getRootViewId())
            }
            ,
            this._onInsiderHubLinkPressed = ()=>{
                c.track(new p.NavigationHelpAndFeedback(h.NavigationSettingsItem.InsiderHub,h.NavigationSettingsOrigin.HelpAndFeedbackMenu)),
                this._openHelpUrl(this.state.insiderHubGoLink, d.getString("ReportAProblemDialog.InsiderHubLinkLabel"))
            }
            ,
            this._onRateUsButtonPressed = ()=>{
                c.track(new p.NavigationHelpAndFeedback(h.NavigationSettingsItem.RateUs,h.NavigationSettingsOrigin.HelpAndFeedbackMenu)),
                m.openFeedbackUrl(r.default.getConfigSettings().feedbackAndProblemGoParam.rating, d.getString("MyProfilePanel.RateUsButtonTitle"), this._getRootViewId())
            }
            ,
            this._onUserVoiceLinkPressed = ()=>{
                c.track(new p.NavigationHelpAndFeedback(h.NavigationSettingsItem.UserVoice,h.NavigationSettingsOrigin.HelpAndFeedbackMenu)),
                o.Linking.openUrl(l.getUserVoiceLinkUrl())
            }
        }
        _buildState(e, t) {
            return {
                ecsShakeToSendEnabled: r.default.getOnboardingFeatures().enableReportProblemViaBot || r.default.getOnboardingFeatures().features.enableReportProblemDirectly,
                enableInsiderHubLink: r.default.getS4LUiFeatures().showInsiderHubButton,
                enableShakeAndSend: !u.default.isShakeAndSendDisabled(),
                insiderHubGoLink: r.default.getConfigSettings().feedbackAndProblemGoParam.insiderHub,
                enableUserVoiceLink: l.isUserVoiceLinkEnabled(),
                enableBrowseKnownIssuesLink: r.default.getS4LUiFeatures().enableBrowseKnownIssuesLink
            }
        }
        render() {
            const e = n.compact([o.createElement(S.SectionTitle, {
                key: "helpTitle",
                title: d.getString("MyProfilePanel.HelpTitle")
            }), this._getHelpbutton(), this.state.enableBrowseKnownIssuesLink ? this._getBrowseKnownIssuesButton() : void 0, this._getSkypeStatusButton(), ...this._getDevFeatures(), o.createElement(S.SectionTitle, {
                key: "feedbackTitle",
                title: d.getString("MyProfilePanel.FeedbackTitle")
            }), this._getSendFeedbackButton(), this._getReportAProblemButton(), this.state.enableUserVoiceLink ? this._getUserVoiceLinkButton() : void 0, this.state.enableInsiderHubLink ? this._getInsiderLinkButton() : void 0, this._getRateUsButton(), void 0]);
            return o.createElement(o.View, {
                style: this.props.style
            }, e)
        }
        _getReportAProblemButton() {
            return o.createElement(f.WideButton, {
                label: d.getString("MyProfilePanel.ReportAProblemButtonTitle"),
                onPressed: this._onReportAProblemButtonPressed,
                key: "reportAProblem",
                buttonStyles: this.props.buttonStyles,
                hideArrow: !0
            })
        }
        _getSendFeedbackButton() {
            return o.createElement(f.WideButton, {
                label: d.getString("MyProfilePanel.GiveFeedbackButtonTitle"),
                onPressed: this._onSendFeedbackButtonPressed,
                key: "sendFeedback",
                buttonStyles: this.props.buttonStyles,
                hideArrow: !0
            })
        }
        _getSkypeStatusButton() {
            return o.createElement(f.WideButton, {
                label: d.getString("MyProfilePanel.SkypeStatusButtonTitle"),
                onPressed: this._onSkypeStatusButtonTitleButtonPressed,
                key: "skypeStatus",
                buttonStyles: this.props.buttonStyles,
                hideArrow: !0
            })
        }
        _getBrowseKnownIssuesButton() {
            return o.createElement(f.WideButton, {
                label: d.getString("MyProfilePanel.BrowseKnownIssuesButtonTitle"),
                onPressed: this._onBrowseKnownIssuesButtonPressed,
                key: "browseKnownIssues",
                buttonStyles: this.props.buttonStyles,
                hideArrow: !0
            })
        }
        _getHelpbutton() {
            return o.createElement(f.WideButton, {
                label: d.getString("MyProfilePanel.GetHelpTitle"),
                onPressed: this._onSupportArticlesButtonPressed,
                key: "supportArticles",
                buttonStyles: this.props.buttonStyles,
                hideArrow: !0
            })
        }
        _getRateUsButton() {
            return o.createElement(f.WideButton, {
                label: d.getString("MyProfilePanel.RateUsButtonTitle"),
                onPressed: this._onRateUsButtonPressed,
                key: "rateUs",
                buttonStyles: this.props.buttonStyles,
                hideArrow: !0
            })
        }
        _getShakeAndSendButton() {
            const e = d.getString("UserSettingsPanel.EnableShakeAndSend");
            return o.createElement(s, {
                key: "enableShakeAndSend",
                style: [C.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.buttonStyles],
                isOn: this.state.enableShakeAndSend,
                accessibilityLabel: e,
                onChange: this._onDisableShakeAndSendChange
            }, o.createElement(S.SwitchLabel, {
                title: e
            }))
        }
        _getInsiderLinkButton() {
            return o.createElement(f.WideButton, {
                label: d.getString("ReportAProblemDialog.InsiderHubLinkLabel"),
                onPressed: this._onInsiderHubLinkPressed,
                key: "insiderHubLink",
                buttonStyles: this.props.buttonStyles,
                hideArrow: !0
            })
        }
        _getUserVoiceLinkButton() {
            return o.createElement(f.WideButton, {
                label: d.getString("MyProfilePanel.UserVoice"),
                onPressed: this._onUserVoiceLinkPressed,
                key: "userVoiceLink",
                buttonStyles: this.props.buttonStyles,
                hideArrow: !0
            })
        }
        _openHelpUrlWithTrackingParams(e, t, i) {
            let n = y.addSsoFlagToUrl(e, !0);
            n = l.addCommonTrackingParams(n, !0, !0);
            const o = {
                tcg: i
            };
            g.navigateToHelpAndFeedbackLink(n, "", t, this._getRootViewId(), o)
        }
        _openHelpUrl(e, t) {
            let i = y.addSsoFlagToUrl(e, !0);
            g.navigateToHelpAndFeedbackLink(i, "", t, this._getRootViewId())
        }
    }
    t.default = _
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(2959)
      , r = i(5)
      , a = i(4)
      , l = i(321)
      , c = i(261)
      , d = i(84)
      , u = i(103)
      , g = i(12)
      , h = r.lazyProperties({
        noBorder: ()=>n.Styles.createViewStyle({
            borderBottomWidth: 0
        })
    });
    class p extends g.default {
        constructor() {
            super(...arguments),
            this._onChangeListMode = (e,t)=>{
                this.state.rowSize === c.RowSize.Compact || this.state.rowSize === c.RowSize.ExtraCompact ? l.default.setRowSizeToDefault() : l.default.setRowSizeToCompact(),
                this.props.onChangeListMode && this.props.onChangeListMode()
            }
            ,
            this._onChangeAvatarMode = (e,t)=>{
                const i = this.state.rowSize === c.RowSize.ExtraCompact;
                l.default.setRowSizeToCompact(i)
            }
        }
        _buildState(e, t) {
            return {
                extraCompactLayoutEnabled: l.default.extraCompactLayoutEnabled(),
                rowSize: l.default.recentRowSizeAndChanges(),
                showIconToggle: l.default.regularCompactLayoutEnabled(),
                isLastMessageAuthorAvatarEnabled: l.default.lastMessageAuthorAvatarEnabled()
            }
        }
        render() {
            if (!this.state.extraCompactLayoutEnabled)
                return this.state.isLastMessageAuthorAvatarEnabled ? n.createElement(n.View, null, n.createElement(d.SectionTitle, {
                    title: a.getString("ColorThemeDialog.SidebarUpper"),
                    titleStyles: this.props.titleStyles
                }), this._getLastAuthorAvatarToggle()) : null;
            const e = [u.styles.controlRow, this.props.buttonStyles]
              , t = this.state.rowSize === c.RowSize.Compact || this.state.rowSize === c.RowSize.ExtraCompact;
            let i;
            if (this.state.showIconToggle) {
                const s = a.getString("ColorThemeDialog.EnableCompactLayoutIcons")
                  , r = [...e];
                this.props.hideBottomBorder ? r.push(h.noBorder) : r.push(this._themeStyles.dividerBorderColorStyle),
                i = n.createElement(o, {
                    key: "enableCompactLayoutIcons",
                    style: r,
                    isOn: this.state.rowSize === c.RowSize.Compact,
                    accessibilityLabel: s,
                    onChange: this._onChangeAvatarMode,
                    disable: !t
                }, n.createElement(d.SwitchLabel, {
                    title: s,
                    disabled: !t
                }))
            }
            const s = [...e];
            !this.props.hideBottomBorder || i ? s.push(this._themeStyles.dividerBorderColorStyle) : s.push(h.noBorder);
            const r = a.getString("ColorThemeDialog.EnableCompactLayout");
            return n.createElement(n.View, null, n.createElement(d.SectionTitle, {
                title: a.getString("ColorThemeDialog.SidebarUpper"),
                titleStyles: this.props.titleStyles
            }), this._getLastAuthorAvatarToggle(), n.createElement(o, {
                key: "enableCompactLayout",
                style: s,
                isOn: t,
                accessibilityLabel: r,
                onChange: this._onChangeListMode
            }, n.createElement(d.SwitchLabel, {
                title: r
            })), i)
        }
        _getLastAuthorAvatarToggle() {
            return this.state.isLastMessageAuthorAvatarEnabled ? n.createElement(s.default, {
                style: this.props.buttonStyles,
                forceTurnOff: this.state.rowSize === c.RowSize.Compact || this.state.rowSize === c.RowSize.ExtraCompact
            }) : void 0
        }
    }
    t.default = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(51)
      , r = i(42)
      , a = i(3)
      , l = i(4)
      , c = i(249)
      , d = i(32)
      , u = i(321)
      , g = i(84)
      , h = i(103);
    class p extends s.default {
        constructor() {
            super(...arguments),
            this._onChange = (e,t)=>{
                d.default.setUserPreferencesLocal({
                    lastMessageAuthorAvatarEnabled: t
                }),
                a.track(new c.LastMessageAuthorAvatarToggleSetting(t))
            }
        }
        _buildState() {
            return {
                lastMessageAuthorAvatarEnabled: u.default.lastMessageAuthorAvatarEnabled() && d.default.getUserPreferencesLocal().lastMessageAuthorAvatarEnabled
            }
        }
        render() {
            const e = l.getString("UserSettingsPanel.LastMessageAuthorAvatarToggleLabel");
            return n.createElement(o, {
                key: "lastMessageAuthorAvatar",
                style: [h.styles.controlRow, this._themeStyles.dividerBorderColorStyle, this.props.style],
                isOn: this.state.lastMessageAuthorAvatarEnabled && !this.props.forceTurnOff,
                accessibilityLabel: r.default.combinedAccessibilityLabel(e),
                onChange: this._onChange,
                disable: this.props.forceTurnOff
            }, n.createElement(g.SwitchLabel, {
                title: e
            }))
        }
    }
    t.default = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(117)
      , s = i(0)
      , r = i(13)
      , a = i(189)
      , l = i(5)
      , c = i(341)
      , d = i(4)
      , u = i(8)
      , g = l.lazyProperties({
        container: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            flexWrap: "wrap",
            alignSelf: "stretch"
        }),
        colorSwatchContainer: ()=>s.Styles.createViewStyle({
            paddingRight: 6,
            paddingBottom: 6
        }),
        colorSwatch: ()=>s.Styles.createViewStyle({
            width: 44,
            height: 44,
            borderRadius: 22,
            backgroundColor: u.Color.gray300
        }),
        checkmark: ()=>s.Styles.createViewStyle({
            position: "absolute",
            right: 3,
            bottom: 3,
            marginRight: 0
        })
    });
    var h;
    !function(e) {
        e[e.Classic = 1] = "Classic",
        e[e.Colorful = 2] = "Colorful",
        e[e.Blue = 3] = "Blue",
        e[e.Fuschia = 4] = "Fuschia",
        e[e.Mint = 5] = "Mint",
        e[e.Orange = 6] = "Orange",
        e[e.Rose = 7] = "Rose",
        e[e.Yellow = 8] = "Yellow"
    }(h = t.ThemeColorOption || (t.ThemeColorOption = {}));
    class p extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._allColors = [],
            this._colorSwatch = e=>{
                let t;
                e.option === h.Classic && (t = this.props.useDarkTheme ? u.Color.delphiDarkBubbleColorSelf : u.Color.delphiBubbleColorSelf);
                const i = e.option === this.props.selectedColorOption;
                return s.createElement(m, {
                    key: "swatch" + e.option,
                    themeColorInfo: e,
                    backgroundColor: t,
                    toggleBorderColor: i ? this.props.backgroundColor : void 0,
                    selected: i,
                    disabled: this.props.disabled,
                    onSelected: this._onColorSelected
                })
            }
            ,
            this._onColorSelected = e=>{
                this.props.onSelectColor(e.option)
            }
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount();
            const e = n.compact([h.Classic, h.Blue, h.Fuschia, h.Mint, h.Rose, h.Yellow]);
            this._allColors = n.map(e, e=>({
                option: e,
                colorInfo: p.themeColorOptionToColorInfo(e),
                accessibilityLabel: p.accessibilityLabelForThemeColorOption(e)
            }))
        }
        render() {
            return s.createElement(s.View, {
                style: [g.container, this.props.style]
            }, n.map(this._allColors, e=>this._colorSwatch(e)))
        }
        static themeColorOptionToColorInfo(e) {
            let t;
            switch (e) {
            case h.Blue:
                t = a.SerializedColorByNumber.Blue;
                break;
            case h.Fuschia:
                t = a.SerializedColorByNumber.Fuschia;
                break;
            case h.Mint:
                t = a.SerializedColorByNumber.Mint;
                break;
            case h.Orange:
                t = a.SerializedColorByNumber.Orange;
                break;
            case h.Rose:
                t = a.SerializedColorByNumber.Rose;
                break;
            case h.Yellow:
                t = a.SerializedColorByNumber.Yellow;
                break;
            case h.Colorful:
            case h.Classic:
            }
            return n.isUndefined(t) ? void 0 : a.getColorInfoForSerializedColor(t)
        }
        static accessibilityLabelForThemeColorOption(e) {
            switch (e) {
            case h.Blue:
                return d.getString("Colors.Blue");
            case h.Fuschia:
                return d.getString("Colors.Fuschia");
            case h.Mint:
                return d.getString("Colors.Mint");
            case h.Orange:
                return d.getString("Colors.Orange");
            case h.Rose:
                return d.getString("Colors.Rose");
            case h.Yellow:
                return d.getString("Colors.Yellow");
            case h.Colorful:
                return d.getString("Colors.Multi");
            case h.Classic:
                return d.getString("Colors.Classic")
            }
            return d.getString("Colors.Custom")
        }
    }
    t.ThemeColorPicker = p;
    class m extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._onPress = ()=>{
                this.props.onSelected(this.props.themeColorInfo);
                const e = d.getString("ColorPickerDialog.ColorWasSetAnnouncement", {
                    color: p.accessibilityLabelForThemeColorOption(this.props.themeColorInfo.option)
                });
                s.Accessibility.announceForAccessibility(e)
            }
        }
        render() {
            let e;
            const t = [g.colorSwatch];
            this.props.backgroundColor && t.push(s.Styles.createViewStyle({
                backgroundColor: this.props.backgroundColor
            }, !1)),
            e = this.props.themeColorInfo.colorInfo ? s.createElement(o.GradientView, {
                style: t,
                colors: this.props.themeColorInfo.colorInfo.colors,
                direction: o.GradientDirection.BOTTOM_RIGHT
            }) : s.createElement(s.View, {
                style: t
            });
            const i = this.props.selected ? s.createElement(c, {
                style: g.checkmark,
                selectionBorderColor: this.props.toggleBorderColor,
                isOn: !0
            }) : void 0
              , n = [s.Types.AccessibilityTrait.Button];
            let r = this.props.themeColorInfo.accessibilityLabel;
            return this.props.disabled ? (n.push(s.Types.AccessibilityTrait.Disabled),
            r += ", " + d.getString("AccessibilityLabel.Disabled")) : this.props.selected && (n.push(s.Types.AccessibilityTrait.Selected),
            r += ", " + d.getString("Global.SelectedAccessibilityLabel")),
            s.createElement(s.Button, {
                style: [g.colorSwatchContainer, this.props.style],
                accessibilityLabel: r,
                accessibilityTraits: n,
                disabled: this.props.disabled,
                onPress: this._onPress
            }, e, i)
        }
    }
    t.default = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(117)
      , s = i(0)
      , r = i(189)
      , a = i(43)
      , l = i(80)
      , c = i(5)
      , d = i(4)
      , u = i(22)
      , g = i(24)
      , h = i(76)
      , p = i(8)
      , m = i(18)
      , S = i(234)
      , C = i(15)
      , y = i(135)
      , f = c.lazyProperties({
        pageInner: ()=>s.Styles.createViewStyle({
            flex: 1,
            borderTopLeftRadius: 20,
            borderTopRightRadius: 20,
            borderBottomLeftRadius: 20,
            borderBottomRightRadius: 20,
            backgroundColor: p.Color.white,
            alignItems: "center",
            paddingTop: 25,
            paddingBottom: 25,
            borderWidth: 1,
            borderStyle: "solid",
            borderColor: p.Color.transparent
        }),
        pageInnerCompact: ()=>s.Styles.createViewStyle({
            borderTopLeftRadius: 10,
            borderTopRightRadius: 10,
            borderBottomLeftRadius: 10,
            borderBottomRightRadius: 10,
            paddingTop: 10,
            paddingBottom: 6,
            borderWidth: 1
        }),
        bubble: ()=>s.Styles.createViewStyle({
            backgroundColor: p.Color.gray400,
            borderTopRightRadius: 10,
            borderBottomLeftRadius: 10,
            borderBottomRightRadius: 10,
            padding: 13,
            alignSelf: "flex-start",
            marginBottom: 4,
            marginLeft: 20,
            marginRight: 50
        }),
        bubbleCompact: ()=>s.Styles.createViewStyle({
            marginLeft: 10
        }),
        bubbleSelf: ()=>s.Styles.createViewStyle({
            backgroundColor: p.Color.gray50,
            borderTopLeftRadius: 10,
            borderTopRightRadius: 10,
            borderBottomLeftRadius: 10,
            padding: 13,
            alignSelf: "flex-end",
            marginBottom: 4,
            marginRight: 30,
            marginLeft: 20
        }),
        bubbleSelfCompact: ()=>s.Styles.createViewStyle({
            marginRight: 10
        }),
        bubbleWithGradient: ()=>s.Styles.createViewStyle({
            backgroundColor: p.Color.transparent
        }),
        bubbleWithSmallerPadding: ()=>s.Styles.createViewStyle({
            padding: 10
        }),
        bubbleRTL: ()=>s.Styles.createViewStyle({
            borderTopRightRadius: 0,
            borderTopLeftRadius: 10,
            borderBottomRightRadius: 10,
            borderBottomLeftRadius: 10
        }),
        bubbleSelfRTL: ()=>s.Styles.createViewStyle({
            borderBottomLeftRadius: 0,
            borderTopRightRadius: 10,
            borderTopLeftRadius: 10,
            borderBottomRightRadius: 10
        }),
        gradient: ()=>s.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            borderTopRightRadius: 10,
            borderBottomLeftRadius: 10,
            borderBottomRightRadius: 10
        }),
        gradientSelf: ()=>s.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            borderTopLeftRadius: 10,
            borderTopRightRadius: 10,
            borderBottomLeftRadius: 10
        }),
        bubbleText: ()=>s.Styles.createTextStyle({
            color: p.Color.white,
            backgroundColor: p.Color.transparent
        })
    });
    class _ extends a.default {
        constructor() {
            super(...arguments),
            this._bubbleText = (e,t)=>{
                let i;
                return 0 === t ? i = "ColorThemeDialog.ClassicThemeBubble1" : 1 === t ? i = "ColorThemeDialog.ClassicThemeBubble2" : 2 === t ? i = "ColorThemeDialog.ClassicThemeBubble3" : 3 === t && (i = "ColorThemeDialog.ClassicThemeBubble4"),
                i ? d.getString(i) : ""
            }
            ,
            this._renderBubble = (e,t)=>{
                const i = S.themeStylesForTheme(this.props.colorTheme)
                  , n = [e.fromSelf ? f.bubbleSelf : f.bubble]
                  , r = [e.fromSelf ? f.gradientSelf : f.gradient];
                let a;
                n.push(e.fromSelf ? f.bubbleSelfCompact : f.bubbleCompact),
                this.state.isRTL && (n.push(e.fromSelf ? f.bubbleSelfRTL : f.bubbleRTL),
                r.push(e.fromSelf ? f.bubbleSelfRTL : f.bubbleRTL));
                const c = e.fromSelf && !e.isFlipped || !e.fromSelf && e.isFlipped;
                c && i.bubbleColorSelfStyle ? n.push(i.bubbleColorSelfStyle) : i.bubbleColorOtherStyle ? n.push(i.bubbleColorOtherStyle) : e.gradientColors && (n.push(f.bubbleWithGradient),
                a = s.createElement(o.GradientView, {
                    style: r,
                    colors: e.gradientColors,
                    direction: o.GradientDirection.RIGHT
                })),
                this.state.useSmallPaddingBubbles && n.push(f.bubbleWithSmallerPadding);
                const d = [f.bubbleText];
                let u;
                return c && i.bubbleTextColorSelfStyle ? d.push(i.bubbleTextColorSelfStyle) : i.bubbleTextColorOtherStyle && d.push(i.bubbleTextColorOtherStyle),
                u = s.createElement(C.BodyText, {
                    style: d,
                    allowFontScaling: !1,
                    disableThemeSubscription: !0
                }, e.text),
                s.createElement(l.default, {
                    key: "bubble" + t,
                    style: n
                }, a, u)
            }
        }
        _buildState(e, t) {
            return {
                isMobileScreenReaderEnabled: h.default.isMobileScreenReaderEnabled(),
                isRTL: m.isRTL(),
                isUsingStackNavigationContext: u.default.isUsingStackNavigationContext(),
                useSmallPaddingBubbles: g.default.isHeightSmallerThanThreshold(630, this._getRootViewId())
            }
        }
        componentMounting(e) {
            super.componentMounting(e),
            this._initColorPages(this.props, e)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this._initColorPages(e, t)
        }
        _initColorPages(e, t) {
            const i = y.isMonoTheme(e.colorTheme)
              , o = e.isFlipped && i
              , s = i ? r.gradientColorsForColorInfo(e.userColor) : void 0;
            this._bubbleTextConfigs = [{
                text: this._bubbleText(e, 0),
                gradientColors: s || r.gradientColorsForSerializedColor(r.SerializedColorByNumber.Yellow),
                isFlipped: o
            }, {
                text: this._bubbleText(e, 1),
                gradientColors: s || r.gradientColorsForSerializedColor(r.SerializedColorByNumber.Fuschia),
                isFlipped: o
            }, {
                text: this._bubbleText(e, 2),
                fromSelf: !0,
                gradientColors: s,
                isFlipped: o
            }, {
                text: this._bubbleText(e, 3),
                gradientColors: s || r.gradientColorsForSerializedColor(r.SerializedColorByNumber.Mint),
                isFlipped: o
            }];
            let a = 3;
            g.default.isHeightSmallerThanThresholdNoSubscription(630, this._getRootViewId()) && (a = Math.min(a, this._bubbleTextConfigs.length - 1)),
            this._bubbleTextConfigs = n.take(this._bubbleTextConfigs, a)
        }
        render() {
            const e = S.themeStylesForTheme(this.props.colorTheme)
              , t = this.props.pageWidth ? s.Styles.createViewStyle({
                width: this.props.pageWidth - 5
            }, !1) : void 0
              , i = [f.pageInner, t, e.messageStreamBackgroundColorStyle, e.dividerBorderColorStyle, f.pageInnerCompact];
            return s.createElement(l.default, {
                style: this.props.style,
                accessibilityLabel: y.getAccessibilityLabel(this.props.colorTheme),
                onPress: this.state.isMobileScreenReaderEnabled ? this.props.onSelectedThemePress : void 0,
                tabIndex: -1
            }, s.createElement(l.default, {
                style: i
            }, n.map(this._bubbleTextConfigs, this._renderBubble)))
        }
    }
    t.ThemePage = _,
    t.default = _
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(6)
      , s = i(50)
      , r = i(2)
      , a = i(80)
      , l = i(3)
      , c = i(190)
      , d = i(5)
      , u = i(4)
      , g = i(346)
      , h = i(244)
      , p = i(17)
      , m = i(55)
      , S = i(1707)
      , C = i(44)
      , y = i(23)
      , f = i(14)
      , _ = i(9)
      , b = i(611)
      , v = d.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        titleContainer: ()=>n.Styles.createViewStyle({
            paddingHorizontal: 15,
            paddingBottom: 15
        })
    });
    class T extends s.default {
        constructor() {
            super(...arguments),
            this._closeSettings = ()=>{
                const e = _.newCauseId();
                l.log(r.LogTraceArea.Navigation, "DesktopSettingsMenu._closeSettings, causeId: " + e),
                this.props.closeModal ? this.props.closeModal() : p.closeGenericDesktopModal(e, this._getContext())
            }
        }
        static getHeaderText() {
            return u.getString("MyProfilePanel.SettingsButtonTitle")
        }
        _buildState(e, t) {
            const i = o.default.getSRMFeatures()
              , n = c.default.getMoneyIntegration()
              , s = {
                isSRMEnabled: n && h.default.isSettingsEnabled(n, i, g.default.isMoneyEnabledOption())
            };
            return e.detailContext && e.detailContext[0]instanceof m.DesktopSettingsGroupNavigationContext ? s.settingsGroup = e.detailContext[0].state.group : s.settingsGroup = void 0,
            s
        }
        render() {
            const e = this.props.isAloneInNavStack && this._getContext().isPresentedInSplitView ? void 0 : n.createElement(C.SimplePanelHeader, {
                panelName: this._getContext().isPresentedInSplitView ? void 0 : this.props.title,
                leftButton: {
                    closeButtonType: C.CloseButtonType.Close,
                    onPress: this._closeSettings
                },
                useTransparentBackground: this._getContext().isPresentedInSplitView
            })
              , t = [v.panel];
            !this._getContext().isPresentedInSplitView || this.props.isAloneInNavStack ? t.push(this._themeStyles.primaryBackgroundColorStyle) : t.push(this._themeStyles.secondaryBackgroundColorStyle);
            const i = this._getContext().isPresentedInSplitView && !this.props.isAloneInNavStack;
            return n.createElement(b, {
                style: t,
                shouldGroupAccessibilityChildren: !1
            }, e, n.createElement(n.ScrollView, {
                style: f.flexOne
            }, n.createElement(n.View, null, i ? this._getTitle() : void 0, n.createElement(S.default, {
                detailContext: this.props.detailContext,
                isAloneInNavStack: this.props.isAloneInNavStack,
                title: this.props.title,
                resetFocus: this.props.resetFocus
            }))))
        }
        _getTitle() {
            const e = u.getString("UserSettingsPanel.SettingsTitle");
            let t = e
              , i = n.Types.AccessibilityTrait.Header;
            return n.createElement(n.View, {
                style: v.titleContainer,
                accessibilityLabel: t,
                accessibilityTraits: i,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes
            }, n.createElement(a.HiddenText, {
                style: [y.fontStyle.messagingHeaderSmall, this._themeStyles.headerTextColorStyle]
            }, e))
        }
        _getHeaderText(e) {
            return T.getHeaderText()
        }
    }
    e.exports = T
}
, , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(50)
      , s = i(10)
      , r = i(5)
      , a = i(37)
      , l = i(44)
      , c = i(14)
      , d = r.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsBlockContainer: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingHorizontal: 10,
            overflow: "visible"
        })
    });
    class u extends o.default {
        _buildState(e, t) {
            return {
                safeAreaPaddingStyle: a.default.horizontalPaddingStyle(s.HorizontalInsetZero)
            }
        }
        render() {
            const e = [d.settingsBlockContainer]
              , t = this.state;
            t.safeAreaPaddingStyle && e.push(t.safeAreaPaddingStyle);
            const i = n.createElement(l.SimplePanelHeader, {
                panelName: this._getHeaderText(this.state),
                leftButton: {
                    closeButtonType: this.props.isAloneInNavStack ? l.CloseButtonType.Close : l.CloseButtonType.Back
                }
            });
            return n.createElement(n.View, {
                style: [d.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, i, n.createElement(n.ScrollView, {
                style: c.flexOne
            }, n.createElement(n.View, {
                style: e
            }, this._renderContent())))
        }
    }
    t.default = u
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(16)
      , r = i(287)
      , a = i(28)
      , l = i(27)
      , c = i(5)
      , d = i(54)
      , u = i(8)
      , g = i(11)
      , h = i(15)
      , p = i(12)
      , m = i(92)
      , S = i(95)
      , C = i(67)
      , y = c.lazyProperties({
        button: ()=>n.Styles.createViewStyle({
            marginLeft: 8,
            marginRight: 8,
            alignItems: "center"
        }),
        cancelBadge: ()=>n.Styles.createViewStyle({
            borderRadius: 12,
            borderWidth: 2,
            borderStyle: "solid",
            height: 24,
            width: 24,
            position: "absolute",
            right: -2,
            top: -2,
            justifyContent: "center",
            alignItems: "center"
        }),
        userName: ()=>n.Styles.createTextStyle({
            maxWidth: C.UserIconSize.Size60
        }),
        lockWrapperStyle: ()=>n.Styles.createViewStyle({
            backgroundColor: u.Color.red,
            borderRadius: 9,
            width: 18,
            height: 18,
            alignItems: "center",
            justifyContent: "center",
            position: "absolute",
            left: 0,
            bottom: 0
        })
    });
    class f extends p.default {
        constructor() {
            super(...arguments),
            this._remove = ()=>{
                this.props.onRemoveClickUserProfile(this.props.profile)
            }
        }
        _buildState(e, t) {
            let i = !1;
            if (e.profile) {
                const t = e.profile.getMri();
                i = !!t && s.isUserMri(t)
            }
            return {
                isUserMri: i,
                backgroundColorStyle: m.useAccessibleTheme() ? this._themeStyles.primaryViewColorStyle : d.getPrimaryBackgroundColorStyle()
            }
        }
        render() {
            const e = this.props.profile.getMri();
            let t;
            t = this.state.isUserMri ? n.createElement(S.UserIcon, {
                userMri: e,
                size: C.UserIconSize.Size60
            }) : n.createElement(r.ConversationIcon, {
                conversationId: e,
                size: C.ConversationIconSize.Size60
            });
            const i = [y.cancelBadge, this._themeStyles.primaryBorderColorStyle, this.state.backgroundColorStyle]
              , o = this.props.accessibilityLabel || (this.props.profile ? this.props.profile.getDisplayName() : void 0)
              , s = this.props.profile && this.props.profile.isEncrypted() ? n.createElement(n.View, {
                style: y.lockWrapperStyle
            }, n.createElement(l.default, {
                icon: g.SkypeIcon.Lock,
                color: u.Color.white,
                size: g.IconSize.size12
            })) : void 0
              , a = this._useAccessibleTheme() && this._themeColors.primaryBadgeTextColor ? this._themeColors.primaryBadgeTextColor : u.Color.white;
            return n.createElement(n.Button, {
                style: [y.button, this.props.style],
                onPress: this._remove,
                accessibilityLabel: o
            }, n.createElement(n.View, null, t, n.createElement(n.View, {
                style: i
            }, n.createElement(l.default, {
                icon: g.SkypeIcon.Cancel,
                color: a,
                size: g.IconSize.size12
            })), s), n.createElement(_, {
                userMri: e,
                useShortName: !0,
                style: [y.userName, this._themeStyles.primaryTextColorStyle]
            }))
        }
    }
    class _ extends o.ComponentBase {
        _buildState(e, t) {
            return {
                displayName: this._getDisplayName()
            }
        }
        _getDisplayName() {
            if (this.props.userMri)
                return this.props.useShortName ? a.getShortDisplayName(this.props.userMri) : a.getDisplayName(this.props.userMri)
        }
        render() {
            return n.createElement(h.Caption, {
                small: !0,
                style: this.props.style,
                numberOfLines: 1
            }, this.state.displayName)
        }
    }
    t.default = f
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43)
      , s = i(4)
      , r = i(17)
      , a = i(103)
      , l = i(90);
    class c extends o.default {
        constructor() {
            super(...arguments),
            this._onPressManageBlockedUsers = ()=>{
                r.navigateToBlockedUsersList(this._getContext())
            }
            ,
            this._onPressManageConnectedUsers = ()=>{
                r.navigateToConnectedUsersList(this._getContext())
            }
        }
        render() {
            return n.createElement(n.View, null, this._getManageConnectedContactsButton(), this._getBlockedContactsButton())
        }
        _getManageConnectedContactsButton() {
            return n.createElement(l.WideButton, {
                key: "connectedUsers",
                label: s.getString("UserSettingsPanel.ConnectedContactsTitle"),
                labelStyle: a.styles.titleMediumSemiLarge,
                buttonStyles: this.props.buttonStyles,
                onPressed: this._onPressManageConnectedUsers
            })
        }
        _getBlockedContactsButton() {
            return n.createElement(l.WideButton, {
                key: "blockedUsers",
                label: s.getString("UserSettingsPanel.BlockedContactsTitle"),
                labelStyle: a.styles.titleMediumSemiLarge,
                buttonStyles: this.props.buttonStyles,
                onPressed: this._onPressManageBlockedUsers
            })
        }
    }
    t.default = c
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(42)
      , s = i(80)
      , r = i(27)
      , a = i(5)
      , l = i(4)
      , c = i(8)
      , d = i(12)
      , u = i(457)
      , g = a.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            justifyContent: "center",
            margin: 2
        }),
        iconStyle: ()=>n.Styles.createViewStyle({
            marginRight: 5
        })
    });
    class h extends d.default {
        constructor() {
            super(...arguments),
            this._onComponentRef = e=>{
                this._componentRef = e || void 0
            }
            ,
            this._toggleButton = e=>{
                this.props.onChange && this.props.onChange(e, !this.props.isOn)
            }
            ,
            this._onAccessibilityTapIOS = e=>{
                e.stopPropagation(),
                this._toggleButton(e)
            }
            ,
            this._getAccessibilityLabel = e=>e ? l.getString("ToggleSwitch.OnWithTextAccessibilityLabel", {
                text: this.props.accessibilityLabel || ""
            }) : l.getString("ToggleSwitch.OffWithTextAccessibilityLabel", {
                text: this.props.accessibilityLabel || ""
            }),
            this._onPress = e=>{
                e.stopPropagation(),
                this._toggleButton(e)
            }
        }
        requestFocus() {
            var e;
            null === (e = this._componentRef) || void 0 === e || e.requestFocus()
        }
        render() {
            const e = this._getAccessibilityLabel(!!this.props.isOn)
              , t = o.default.buttonAccessibilityInfo(e, !!this.props.disable)
              , i = g.iconStyle;
            return n.createElement(n.Button, {
                ref: this._onComponentRef,
                style: g.container,
                onPress: this.props.disable ? void 0 : this._onPress,
                title: t.accessibilityLabel,
                accessibilityTraits: t.accessibilityTraits,
                onAccessibilityTapIOS: this.props.disable ? void 0 : this._onAccessibilityTapIOS,
                disabled: this.props.disable
            }, n.createElement(s.default, {
                style: this.props.style
            }, n.createElement(r.default, {
                icon: this.props.icon,
                size: this.props.iconSize,
                color: c.Color.white,
                style: i
            }), n.createElement(u.default, {
                isOn: this.props.isOn,
                disableInteraction: !0,
                disable: this.props.disable,
                overlayColorAndroid: this.props.overlayColorAndroid,
                accessibilityLabel: this.props.accessibilityLabel,
                onChange: this.props.onChange
            })))
        }
    }
    t.default = h
}
, , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e, t, i, n) {
            super(),
            this._entryPoint = e,
            this._numberOfShares = t,
            this._usedSearch = i,
            this._userAddedContext = n
        }
        getEventName() {
            return "messaging_share_panel"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.EntryPoint = n.SharePanelEntryOrigin[this._entryPoint],
            e.SharesCount = this._numberOfShares,
            e.HasUsedSearch = this._usedSearch,
            e.HasAddedContext = this._userAddedContext,
            e
        }
    }
    t.SharePanelTelemetry = s
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(63)
      , s = i(6)
      , r = i(10)
      , a = i(5)
      , l = i(4)
      , c = i(37)
      , d = i(60)
      , u = i(41)
      , g = i(23)
      , h = i(131)
      , p = i(14)
      , m = i(15)
      , S = i(12)
      , C = a.lazyProperties({
        bodyStyleContainer: ()=>n.Styles.createTextStyle({
            marginVertical: 10
        }),
        panelContainer: ()=>n.Styles.createViewStyle({
            marginHorizontal: 20,
            flex: 1
        }),
        image: ()=>n.Styles.createViewStyle({
            height: 192,
            width: 223,
            margin: 20,
            alignSelf: "center"
        }),
        rightButton: ()=>n.Styles.createViewStyle({
            width: 260,
            marginVertical: 30,
            alignSelf: "center"
        }),
        privacyLinkStyle: ()=>n.Styles.createViewStyle({
            marginTop: 10
        })
    });
    class y extends S.default {
        constructor() {
            super(...arguments),
            this._onPrivacyStatementPress = e=>{
                e.stopPropagation(),
                e.preventDefault(),
                n.Linking.openUrl(this.state.privacyStatementUrl)
            }
            ,
            this._onLearnMorePress = e=>{
                e.stopPropagation(),
                e.preventDefault(),
                n.Linking.openUrl(this.state.learnMoreUrl)
            }
        }
        _buildState(e, t) {
            return {
                privacyStatementUrl: s.default.getConfigSettings().translator.privacyStatementUrl,
                learnMoreUrl: s.default.getConfigSettings().translator.learnMoreUrl,
                statusBarHeight: this._getContext().isPresentedInDesktopSubview ? 0 : c.default.statusBarPadding()
            }
        }
        _renderThankYouReceiptContent() {
            return n.createElement(n.View, {
                style: C.panelContainer
            }, this._getImage(o.Collection.SPEECH_CONSENT_THANK_YOU, C.image), n.createElement(m.PanelHeader, null, l.getString("SpeechConsentPanel.ThankYouReceiptTitle")), n.createElement(n.Text, {
                style: [g.bodyFontStyle(), C.bodyStyleContainer]
            }, l.getString("SpeechConsentPanel.ThankYouReceiptBody"), n.createElement(n.Text, {
                style: [g.bodyBoldFontStyle(this._currentTheme), this._themeStyles.primaryTextColorStyle]
            }, l.getString("SpeechConsentPanel.PanelSettingsPath"))), this._getLink(l.getString("SpeechConsentPanel.ThankYouReceiptLearnMore"), this._onLearnMorePress), this._getLink(l.getString("SpeechConsentPanel.PrivacyStatement"), this._onPrivacyStatementPress))
        }
        _getImage(e, t) {
            return n.createElement(n.Image, {
                source: e,
                style: t,
                resizeMode: "contain"
            })
        }
        _getLink(e, t) {
            return n.createElement(h.default, {
                style: C.privacyLinkStyle,
                linkTextStyle: r.LinkTextStyle.BodyTextSmall,
                url: "#",
                blue: !0,
                onPress: t
            }, e)
        }
        _renderDoneButton() {
            return n.createElement(u, {
                style: C.rightButton,
                buttonStyle: r.SXButtonStyle.ColorFill,
                buttonSize: r.SXButtonSize.Medium,
                title: l.getString("Global.DoneButtonTitle"),
                onPress: this.props.onDone
            })
        }
        render() {
            const e = [p.flexOne, this._themeStyles.primaryBackgroundColorStyle];
            let t;
            this.state.statusBarHeight && (e.push(d.marginTopStyle(this.state.statusBarHeight), p.overflowVisible),
            t = d.marginTopStyle(-1 * this.state.statusBarHeight));
            let i = this._renderThankYouReceiptContent();
            return t && (i = n.createElement(n.View, {
                style: t
            }, i)),
            n.createElement(n.View, {
                style: [p.flexOne, this._themeStyles.primaryBackgroundColorStyle]
            }, n.createElement(n.ScrollView, {
                style: e,
                keyboardShouldPersistTaps: !0
            }, i), this._renderDoneButton())
        }
    }
    t.ThankYouReceipt = y,
    t.default = y
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(63)
      , s = i(6)
      , r = i(10)
      , a = i(77)
      , l = i(5)
      , c = i(4)
      , d = i(37)
      , u = i(60)
      , g = i(456)
      , h = i(41)
      , p = i(23)
      , m = i(131)
      , S = i(14)
      , C = i(15)
      , y = i(12)
      , f = l.lazyProperties({
        bodyStyleContainer: ()=>n.Styles.createTextStyle({
            marginVertical: 10
        }),
        titleContainer: ()=>n.Styles.createTextStyle({
            paddingBottom: 6
        }),
        panelContainer: ()=>n.Styles.createViewStyle({
            marginHorizontal: 20
        }),
        privacyImageDesktop: ()=>n.Styles.createViewStyle({
            height: 64,
            width: 102,
            marginBottom: 16,
            alignSelf: "center"
        }),
        privacyImageMobile: ()=>n.Styles.createViewStyle({
            height: 96,
            width: 155,
            marginTop: 14,
            marginBottom: 16,
            alignSelf: "center"
        }),
        voiceClipsImageDesktop: ()=>n.Styles.createViewStyle({
            height: 64,
            width: 64,
            marginBottom: 16,
            alignSelf: "center"
        }),
        voiceClipsImageMobile: ()=>n.Styles.createViewStyle({
            height: 96,
            width: 122,
            marginTop: 40,
            marginBottom: 16,
            alignSelf: "center"
        }),
        noLimitsImage: ()=>n.Styles.createViewStyle({
            height: 32,
            width: 32
        }),
        imageContainer: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            padding: 16
        }),
        imageContainerMobile: ()=>n.Styles.createViewStyle({
            flexDirection: "column",
            paddingVertical: 16
        }),
        privacyContainerDesktop: ()=>n.Styles.createViewStyle({
            paddingRight: 16
        }),
        voiceClipsContainerDesktop: ()=>n.Styles.createViewStyle({
            paddingLeft: 16
        }),
        noLimitsMainContainer: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            padding: 16
        }),
        noLimitsMainContainerMobile: ()=>n.Styles.createViewStyle({
            marginVertical: 16
        }),
        noLimitsRightContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            marginLeft: 16
        }),
        buttonsWrapper: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            alignItems: "center",
            flexDirection: "row",
            justifyContent: "center",
            margin: 20
        }),
        buttonWrapperMobile: ()=>n.Styles.createViewStyle({
            margin: 0,
            padding: 20,
            paddingBottom: 30
        }),
        leftButton: ()=>n.Styles.createViewStyle({
            flex: 1,
            marginRight: 10
        }),
        rightButton: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexShrink: 0,
            marginLeft: 10
        }),
        privacyLinkStyle: ()=>n.Styles.createViewStyle({
            marginTop: 16,
            marginBottom: 16
        })
    });
    class _ extends y.default {
        constructor() {
            super(...arguments),
            this._backgroundColorNoLimitsStyle = n.Styles.createViewStyle({
                backgroundColor: this._themeColors.secondaryBackgroundColor
            }, !1),
            this._backgroundColorButtonsStyle = n.Styles.createViewStyle({
                backgroundColor: this._themeColors.primaryBackgroundColor
            }, !1),
            this._secondaryHeadingStyle = [p.bodyFontStyle(), f.titleContainer],
            this._secondaryBodyStyle = [p.captionFontStyle(this._currentTheme), this._themeStyles.primaryTextColorStyle],
            this._secondaryBodyBoldStyle = [p.subtitleFontStyle(this._currentTheme), this._themeStyles.primaryTextColorStyle],
            this._onLearnMore = e=>{
                e.stopPropagation(),
                e.preventDefault(),
                n.Linking.openUrl(s.default.getConfigSettingsNoSubscription().translator.learnMoreUrl)
            }
            ,
            this._onPrivacyStatementPress = e=>{
                e.stopPropagation(),
                e.preventDefault(),
                n.Linking.openUrl(s.default.getConfigSettingsNoSubscription().translator.privacyStatementUrl)
            }
            ,
            this._onContributePress = ()=>{
                this.props.onContribute()
            }
            ,
            this._onDoNotContributePress = ()=>{
                this.props.onDoNotContribute()
            }
            ,
            this._setScrollViewRef = e=>{
                this._scrollView = e || void 0
            }
        }
        _buildState(e, t) {
            return {
                statusBarHeight: this._getContext().isPresentedInDesktopSubview ? 0 : d.default.statusBarPadding(),
                currentSpeechConsentValue: g.default.getSpeechConsentValue()
            }
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.statusBarHeight !== t.statusBarHeight && this._scrollView && this._scrollView.setScrollTop(0)
        }
        _getImage(e, t) {
            return n.createElement(n.Image, {
                source: e,
                style: t,
                resizeMode: "contain"
            })
        }
        _getLearnMoreLink() {
            return n.createElement(m.default, {
                linkTextStyle: r.LinkTextStyle.Caption,
                url: "#",
                key: "learnMore",
                blue: !0,
                onPress: this._onLearnMore
            }, c.getString("Global.LearnMore"))
        }
        _getPrivacyStatementLink() {
            return n.createElement(m.default, {
                style: f.privacyLinkStyle,
                linkTextStyle: r.LinkTextStyle.BodyTextSmall,
                url: "#",
                key: "privacyStatement",
                blue: !0,
                onPress: this._onPrivacyStatementPress
            }, c.getString("SpeechConsentPanel.PrivacyStatement"))
        }
        _renderButtons() {
            let e, t;
            return this.state.currentSpeechConsentValue ? (e = c.getString("SpeechConsentPanel.ContinueContribute"),
            t = c.getString("SpeechConsentPanel.StopContribute")) : (e = c.getString("SpeechConsentPanel.AgreeToContributeButton"),
            t = c.getString("SpeechConsentPanel.DisagreeToContributeButton")),
            n.createElement(n.View, {
                style: [f.buttonsWrapper, this._backgroundColorButtonsStyle, void 0]
            }, n.createElement(h, {
                style: f.leftButton,
                buttonStyle: r.SXButtonStyle.ColorFill,
                buttonSize: r.SXButtonSize.Medium,
                title: e,
                onPress: this._onContributePress
            }), n.createElement(h, {
                style: f.rightButton,
                buttonStyle: r.SXButtonStyle.ColorFill,
                buttonSize: r.SXButtonSize.Medium,
                title: t,
                onPress: this._onDoNotContributePress
            }))
        }
        _renderRequestingConsentPanelContent() {
            return n.createElement(n.View, {
                style: f.panelContainer
            }, n.createElement(C.PanelHeader, null, c.getString("SpeechConsentPanel.PanelTitle")), n.createElement(n.Text, {
                style: [p.bodyFontStyle(), f.bodyStyleContainer]
            }, c.getString("SpeechConsentPanel.PanelMainContent")), this._getPrivacyAndVoiceClipsContent(), this._getNoLimitsContent(), this._getPrivacyStatementLink())
        }
        _getPrivacyAndVoiceClipsContent() {
            return n.createElement(n.View, {
                style: [f.imageContainer]
            }, n.createElement(n.View, {
                style: [S.flexOne, f.privacyContainerDesktop]
            }, this._getImage(o.Collection.SPEECH_CONSENT_PRIVACY, f.privacyImageDesktop), n.createElement(n.Text, {
                style: this._secondaryHeadingStyle
            }, c.getString("SpeechConsentPanel.PanelPriorityHeading")), n.createElement(n.Text, {
                style: this._secondaryBodyStyle
            }, c.getString("SpeechConsentPanel.PanelPriorityBody"), this._getLearnMoreLink())), n.createElement(n.View, {
                style: [S.flexOne, f.voiceClipsContainerDesktop]
            }, this._getImage(o.Collection.SPEECH_CONSENT_VOICE_CLIPS, f.voiceClipsImageDesktop), n.createElement(n.Text, {
                style: this._secondaryHeadingStyle
            }, c.getString("SpeechConsentPanel.PanelVoiceHeading")), n.createElement(n.Text, {
                style: this._secondaryBodyStyle
            }, c.getString("SpeechConsentPanel.PanelVoiceBody"))))
        }
        _getNoLimitsContent() {
            return n.createElement(n.View, {
                style: [f.noLimitsMainContainer, this._backgroundColorNoLimitsStyle, void 0]
            }, this._getImage(o.Collection.SPEECH_CONSENT_SUBTITLES, f.noLimitsImage), n.createElement(n.View, {
                style: f.noLimitsRightContainer
            }, n.createElement(n.Text, {
                style: this._secondaryHeadingStyle
            }, c.getString("SpeechConsentPanel.PanelKeyContentHeading")), n.createElement(n.Text, {
                style: this._secondaryBodyStyle
            }, c.getString("SpeechConsentPanel.PanelKeyContentBody"), n.createElement(n.Text, {
                style: this._secondaryBodyBoldStyle
            }, c.getString("SpeechConsentPanel.PanelSettingsPath")))))
        }
        render() {
            const e = [S.flexOne, this._themeStyles.primaryBackgroundColorStyle];
            let t;
            this.state.statusBarHeight && (e.push(u.marginTopStyle(this.state.statusBarHeight), S.overflowVisible),
            t = u.marginTopStyle(-1 * this.state.statusBarHeight));
            let i = this._renderRequestingConsentPanelContent();
            return t && (i = n.createElement(n.View, {
                style: t
            }, i)),
            n.createElement(n.View, {
                style: [S.flexOne, this._themeStyles.primaryBackgroundColorStyle]
            }, n.createElement(n.ScrollView, {
                ref: this._setScrollViewRef,
                style: e,
                keyboardShouldPersistTaps: !0
            }, i), n.createElement(a, {
                marginLeft: 0,
                marginRight: 0
            }), this._renderButtons())
        }
    }
    t.VoiceClipsContribution = _,
    t.default = _
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(6)
      , s = i(31)
      , r = i(146)
      , a = i(453)
      , l = i(4)
      , c = i(76)
      , d = i(103)
      , u = i(131)
      , g = i(14)
      , h = i(15)
      , p = i(12);
    class m extends p.default {
        constructor() {
            super(...arguments),
            this._onLanguageLinkPress = e=>{
                e.preventDefault(),
                s.default.CallNavigationHelper.navigateToTranslationSettingsPanel(!1, this._getContext())
            }
            ,
            this._onLearnMoreLinkPress = e=>{
                n.Linking.openUrl(o.default.getConfigSettingsNoSubscription().translator.help)
            }
        }
        _buildState(e, t) {
            const i = r.default.getLocalCallTranslatorBotSpokenLanguageLocale()
              , n = r.default.getLocalCallTranslatorBotSubtitleLanguageLocale()
              , o = r.default.isDeviceLanguageSupportedForTranslation();
            return {
                spokenLanguageLocale: i,
                subtitleLanguageLocale: n,
                isMobileScreenReaderEnabled: c.default.isMobileScreenReaderEnabled(),
                isSpokenLanguageSupported: o
            }
        }
        render() {
            const e = l.getString("SubtitlesSettingsPanel.LanguageSettingLink")
              , t = n.createElement(u.default, {
                url: "#",
                key: "keyLanguageSetting",
                blue: !0,
                onPress: this._onLanguageLinkPress
            }, e)
              , i = n.createElement(u.default, {
                url: "#",
                key: "keyLearnMore",
                blue: !0,
                onPress: this._onLearnMoreLinkPress
            }, l.getString("UserSettingsPanel.TranslateMessagesAndCallsExplanationLearnMoreLinkText"));
            let o;
            if (this.state.isSpokenLanguageSupported) {
                const e = a.getLanguageTitle(this.state.subtitleLanguageLocale)
                  , i = a.getLanguageTitle(this.state.spokenLanguageLocale);
                o = this.state.spokenLanguageLocale === this.state.subtitleLanguageLocale ? l.getParts("SubtitlesSettingsPanel.SubtitleLanguageSpokenLanguageMatchLink", {
                    language: e,
                    languageSettingsLink: t
                }) : l.getParts("SubtitlesSettingsPanel.SubtitleLanguageSpokenLanguageMisMatchLink", {
                    subtitleLanguage: e,
                    spokenLanguage: i,
                    languageSettingsLink: t
                })
            } else
                o = l.getParts("UserSettingsPanel.TranslateMessagesAndCallsAppLanguageNotSupportedExplanation", {
                    spokenLanguageLink: t,
                    learnMoreLink: i
                });
            let s = n.createElement(h.Caption, {
                style: d.styles.subtitleMediumSemiLarge,
                key: "subtitle",
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes,
                onPress: this.state.isMobileScreenReaderEnabled ? this._onLanguageLinkPress : void 0
            }, o);
            return n.createElement(n.View, {
                style: g.flexOne
            }, s)
        }
    }
    e.exports = m
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(5)
      , r = i(341)
      , a = i(8)
      , l = i(14);
    !function(e) {
        e[e.Default = 0] = "Default",
        e[e.Small = 1] = "Small"
    }(t.ThumbnailSize || (t.ThumbnailSize = {}));
    const c = s.lazyProperties({
        thumbnail: ()=>n.Styles.createViewStyle({
            width: 130,
            height: 130,
            borderRadius: 10,
            borderWidth: 2,
            borderColor: a.Color.transparent,
            paddingHorizontal: 10,
            paddingVertical: 24,
            justifyContent: "space-between",
            overflow: "visible"
        }),
        thumbnailCompact: ()=>n.Styles.createViewStyle({
            width: 110,
            height: 110,
            paddingVertical: 14
        }),
        thumbnailLight: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.white,
            borderColor: a.Color.gray200
        }),
        thumbnailDark: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.black
        }),
        selectedThumbnail: ()=>n.Styles.createViewStyle({
            borderColor: a.Color.blue
        }),
        bubble: ()=>n.Styles.createViewStyle({
            height: 21,
            width: 80,
            borderRadius: 4,
            backgroundColor: a.Color.delphiBubbleColorOther
        }),
        bubbleCompact: ()=>n.Styles.createViewStyle({
            width: 67
        }),
        bubbleWide: ()=>n.Styles.createViewStyle({
            width: 90
        }),
        bubbleAccessible: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.gray400
        }),
        bubbleDark: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.delphiDarkBubbleColorOther
        }),
        bubbleAccessibleDark: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.white
        }),
        myBubble: ()=>n.Styles.createViewStyle({
            alignSelf: "flex-end",
            backgroundColor: a.Color.delphiBubbleColorSelf
        }),
        myBubbleAccessible: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.gray50
        }),
        myBubbleDark: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.delphiDarkBubbleColorSelf
        }),
        myBubbleAccessibleDark: ()=>n.Styles.createViewStyle({
            backgroundColor: a.Color.gray400
        }),
        toggle: ()=>n.Styles.createViewStyle({
            position: "absolute",
            top: -9,
            right: -9,
            marginRight: 0
        })
    });
    class d extends o.ComponentBase {
        render() {
            const e = [c.thumbnail, this.props.compact ? c.thumbnailCompact : void 0, this.props.dark ? c.thumbnailDark : c.thumbnailLight, this.props.selected ? c.selectedThumbnail : void 0]
              , t = [this._renderBubble(0), this._renderBubble(1), this._renderBubble(2)]
              , i = this.props.selected ? n.createElement(r, {
                style: c.toggle,
                isOn: !0,
                selectionColor: a.Color.blue,
                colorThemeOverride: this.props.colorThemeOverride,
                importantForAccessibility: n.Types.ImportantForAccessibility.NoHideDescendants
            }) : void 0;
            return n.createElement(n.View, {
                style: [l.overflowVisible, this.props.style]
            }, n.createElement(n.Button, {
                style: e,
                importantForAccessibility: this.props.importantForAccessibility,
                accessibilityLabel: this.props.accessibilityLabel,
                accessibilityTraits: this.props.accessibilityTraits,
                tabIndex: this.props.tabIndex,
                activeOpacity: .8,
                onPress: this.props.onPress
            }, t), i)
        }
        _renderBubble(e) {
            const t = [c.bubble];
            return 1 === e ? t.push(c.myBubble) : 2 === e && t.push(c.bubbleWide),
            this.props.compact && t.push(c.bubbleCompact),
            this.props.highContrast ? 1 === e ? t.push(this.props.dark ? c.myBubbleAccessibleDark : c.myBubbleAccessible) : t.push(this.props.dark ? c.bubbleAccessibleDark : c.bubbleAccessible) : this.props.dark && t.push(1 === e ? c.myBubbleDark : c.bubbleDark),
            n.createElement(n.View, {
                key: "bubble" + e,
                style: t
            })
        }
    }
    t.ThemeThumbnail = d,
    t.default = d
}
, , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(6)
      , r = i(453)
      , a = i(899)
      , l = i(4)
      , c = i(62)
      , d = i(12);
    class u extends d.default {
        constructor() {
            super(...arguments),
            this._isSelected = e=>{
                if (this.props.defaultOption) {
                    if (e === this.props.defaultOption)
                        return !0
                } else if (e === this.state.subtitleLanguageLocale)
                    return !0;
                return !1
            }
            ,
            this._onHandleMenuCommand = e=>{
                this.props.onHandleMenuCommand("default" === e ? "" : e)
            }
        }
        _buildState(e, t) {
            const i = [];
            if (e.defaultOption)
                i.push({
                    label: e.defaultOption,
                    value: "default"
                });
            else {
                const e = l.getString("SettingsLanguages.ResetLanguageOption");
                i.push({
                    label: e,
                    value: "default"
                })
            }
            return n.each(s.default.getS4LCMCFeatures().callTranslatorBotConfig.languageSupport.tts, e=>{
                const t = r.getLanguageTitle(e);
                n.isEmpty(t) || i.push({
                    label: t,
                    value: e
                })
            }
            ),
            {
                items: i,
                subtitleLanguageLocale: this._getCallTranslatorBotSubtitleLanguageLocale()
            }
        }
        render() {
            return o.createElement(a, {
                id: "subtitleLanguagePicker",
                items: this.state.items,
                rowTitle: l.getString("LanguageAndTranslationSettingsPanel.CallSubtitleLanguageLabel"),
                caption: this._getCaption(),
                isItemSelected: this._isSelected,
                onHandleItemSelection: this._onHandleMenuCommand,
                selectedItemLabel: this._getSelectedItemLabel()
            })
        }
        _getCaption() {
            return this.props.caption ? l.getString("SubtitlesSettingsPanel.SubtitleLanguageExplanation") : void 0
        }
        _getCallTranslatorBotSubtitleLanguageLocale() {
            const e = c.default.getCallTranslatorBotSubtitleLanguageLocale();
            return !e || n.isEmpty(e) ? "default" : e
        }
        _getSelectedItemLabel() {
            if (this.props.defaultOption)
                return this.props.defaultOption;
            const e = n.find(this.state.items, e=>e.value === this.state.subtitleLanguageLocale);
            return e ? e.label : "default"
        }
    }
    e.exports = u
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(672)
      , r = i(3)
      , a = i(899)
      , l = i(4)
      , c = i(62)
      , d = i(12)
      , u = i(1066)
      , g = s.Gender.female;
    class h extends d.default {
        constructor() {
            super(...arguments),
            this._isSelected = e=>e === this.state.translationVoice,
            this._onHandleGenderSelection = e=>{
                const t = e;
                c.default.setCallTranslatorBotTranslationVoice(t),
                r.track(new u.TranslationVoiceChangedEvent(t))
            }
        }
        _buildState(e, t) {
            const i = [];
            return n.each(s.Gender, e=>{
                i.push({
                    label: this._getLabelForGender(e),
                    value: e
                })
            }
            ),
            {
                items: i,
                translationVoice: this._getCallTranslatorBotVoice()
            }
        }
        render() {
            return o.createElement(a, {
                id: "translationVoicePicker",
                items: this.state.items,
                rowTitle: l.getString("LanguageAndTranslationSettingsPanel.TranslationVoiceLabel"),
                caption: l.getString("LanguageAndTranslationSettingsPanel.TranslationVoiceExplanation"),
                isItemSelected: this._isSelected,
                onHandleItemSelection: this._onHandleGenderSelection,
                selectedItemLabel: this._getSelectedItemLabel()
            })
        }
        _getCallTranslatorBotVoice() {
            return c.default.getCallTranslatorBotTranslationVoice() || g
        }
        _getSelectedItemLabel() {
            const e = n.find(this.state.items, e=>e.value === this.state.translationVoice);
            return e ? e.label : this._getLabelForGender(g)
        }
        _getLabelForGender(e) {
            return e === s.Gender.male ? l.getString("LanguageAndTranslationSettingsPanel.TranslatedVoiceOptionMale") : l.getString("LanguageAndTranslationSettingsPanel.TranslatedVoiceOptionFemale")
        }
    }
    e.exports = h
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(36)
      , s = i(117)
      , r = i(86)
      , a = i(0)
      , l = i(46)
      , c = i(10)
      , d = i(30)
      , u = i(28)
      , g = i(680)
      , h = i(2)
      , p = i(3)
      , m = i(5)
      , S = i(516)
      , C = i(810)
      , y = i(54)
      , f = i(17)
      , _ = i(22)
      , b = i(573)
      , v = i(24)
      , T = i(37)
      , P = i(60)
      , A = i(647)
      , k = i(8)
      , I = i(11)
      , w = i(14)
      , N = i(12)
      , M = i(29)
      , E = i(504)
      , x = i(9)
      , D = m.lazyProperties({
        toastContainer: ()=>a.Styles.createViewStyle({
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            position: "absolute",
            overflow: "visible"
        }),
        desktopToastContainer: ()=>a.Styles.createViewStyle({
            justifyContent: "flex-start",
            alignItems: "center"
        }),
        desktopToastContent: ()=>a.Styles.createViewStyle({
            width: 425,
            height: 80,
            justifyContent: "center",
            backgroundColor: k.Color.transparent
        }),
        mobileToastContent: ()=>a.Styles.createViewStyle({
            alignSelf: "stretch",
            marginHorizontal: 10,
            height: 80,
            justifyContent: "center",
            backgroundColor: k.Color.transparent
        }),
        mobileToastContentAndroid: ()=>a.Styles.createViewStyle({
            marginHorizontal: 0
        }),
        gestureViewOverlayDesktop: ()=>a.Styles.createViewStyle({
            backgroundColor: k.Color.transparent,
            justifyContent: "center",
            alignItems: "center",
            overflow: "visible"
        }),
        gestureViewOverlayMobile: ()=>a.Styles.createViewStyle({
            alignSelf: "stretch",
            backgroundColor: k.Color.transparent,
            justifyContent: "center",
            alignItems: "center",
            overflow: "visible"
        }),
        backgroundViewDesktopIOS: ()=>a.Styles.createViewStyle({
            borderRadius: 5
        }),
        shadow: ()=>a.Styles.createViewStyle({
            shadowColor: k.Color.black,
            shadowOpacity: .7,
            shadowRadius: 2,
            shadowOffset: {
                height: 0,
                width: 0
            }
        })
    });
    class L extends N.default {
        constructor() {
            super(...arguments),
            this._wasToastTapped = !1,
            this._onAnimatedViewRef = e=>{
                this._animatedView = e || void 0
            }
            ,
            this._handleIncomingNotification = e=>{
                this.isComponentMounted() && (this._recalcDisplay(e),
                void 0 !== this.state.notificationType && void 0 !== this.state.conversationId && (this._toastEventToSend = new C.MessagingToastEvent(this.state.conversationId,this.state.notificationType,C.MessagingToastActionType.Ignored)))
            }
            ,
            this._onPanVertical = e=>{
                n.isUndefined(this._hideToastTimerId) || !this.state.currentMessage && !this.state.messageText || (M.clearTimeout(this._hideToastTimerId),
                this._hideToastTimerId = void 0);
                let t = e.pageY - e.initialPageY
                  , i = !1;
                t > 30 && (t = 30),
                this._animatedView && this._animatedView.setValue({
                    y: t
                });
                let o = t / 30;
                o < 0 && (o = 0),
                i = this.state.toastHeight - Math.abs(t) < this.state.toastHeight / 2 || Math.abs(e.velocityY) > .35 || t >= 30,
                e.isComplete && (i ? (this._hideToast(0),
                void 0 !== this.state.notificationType && void 0 !== this.state.conversationId && (this._toastEventToSend = new C.MessagingToastEvent(this.state.conversationId,this.state.notificationType,C.MessagingToastActionType.Panned))) : this._showToast(0))
            }
            ,
            this._onTapDismiss = e=>{
                const t = x.newCauseId();
                p.log(h.LogTraceArea.Notifications, "NotificationToast._onTapDismiss " + t),
                this._wasToastTapped = !0,
                this.state.conversationId && (void 0 !== this.state.notificationType && (this._toastEventToSend = new C.MessagingToastEvent(this.state.conversationId,this.state.notificationType,C.MessagingToastActionType.Tapped)),
                o.default.isCurrentSessionInBubbleMode().always(e=>{
                    !0 !== e ? f.navigateToConversation({
                        convId: this.state.conversationId,
                        causeId: t,
                        origin: h.NavigationConversationOrigin.InAppNotification
                    }) : p.log(h.LogTraceArea.Notifications, "Skip navigating to conversation from toast tap as we are in bubble mode")
                }
                )),
                this._isToastCurrentlyHiding || (n.isUndefined(this._hideToastTimerId) || (M.clearTimeout(this._hideToastTimerId),
                this._hideToastTimerId = void 0),
                this._hideToast(0))
            }
            ,
            this._onToastDismissed = ()=>{
                this.state.onToastDismissed && this.state.onToastDismissed(this._wasToastTapped),
                this.setState({
                    onToastDismissed: void 0
                }),
                this._wasToastTapped = !1
            }
            ,
            this._hideToastCallback = ()=>{
                this._isToastCurrentlyHiding = !1,
                E.default.hideCurrentToastMessage(),
                this._onToastDismissed(),
                n.isUndefined(this._toastEventToSend) || p.track(this._toastEventToSend)
            }
        }
        static _topStartingValue(e) {
            return (e.toastHeight ? -e.toastHeight : 0) - 10
        }
        _recalcDisplay(e) {
            const t = x.newCauseId();
            p.log(h.LogTraceArea.Notifications, "NotificationToast._recalcDisplay " + t);
            const i = {}
              , n = this._getRootViewId();
            if (e) {
                const o = v.default.getDeviceOrientation(n)
                  , s = T.default.leavePaddingForStatusBar()
                  , r = _.default.isUsingStackNavigationContext()
                  , a = T.default.statusBarHeight()
                  , l = 80 + (s ? a : 0);
                if (this._animatedView && this._animatedView.setValue({
                    y: -l
                }, t),
                i.leavePaddingForStatusBar = s,
                i.statusBarHeight = a,
                i.toastHeight = l,
                i.toastWidth = v.default.getWidth(n) || 0,
                i.deviceOrientation = o,
                i.safeAreaHorizontalPaddingStyle = T.default.horizontalPaddingStyle(c.HorizontalInsetDefault),
                i.isUsingStackNavigationContext = r,
                e instanceof E.SkypeNotificationToastMessage) {
                    i.messageText = void 0,
                    i.currentMessage = e.message,
                    i.notificationType = S.getMessageNotificationType(e.message);
                    const t = d.default.getConversation(e.message.conversationId)
                      , n = u.getDisplayName(e.message.conversationId)
                      , o = u.getDisplayName(e.message.creator)
                      , s = u.getShortDisplayName(e.message.creator)
                      , r = g.getCompactNotificationDisplayInfo(e.message, t, o, s, n);
                    i.headerText = r.title,
                    i.toastCreator = t && t.isOneOnOne() ? t.getOtherPartyMri() : void 0,
                    i.conversationId = e.message.conversationId
                } else if (e instanceof E.TextNotificationToastMessage)
                    i.messageText = e.textMessage,
                    i.currentMessage = void 0,
                    i.notificationType = void 0,
                    i.headerText = void 0,
                    i.toastCreator = void 0,
                    i.conversationId = e.conversationId,
                    i.onToastDismissed = e.onToastDismissed;
                else if (e instanceof E.ScheduledCallToastMessage) {
                    let t, n;
                    switch (e.scheduledCallInfo.type) {
                    case A.ScheduleCallAlertTypes.Received:
                        n = e.skypeMessage.creator,
                        t = g.getScheduledCallDisplayInfoForInvitationReceivedAlert(n);
                        break;
                    case A.ScheduleCallAlertTypes.InvitationAccepted:
                    case A.ScheduleCallAlertTypes.InvitationDeclined:
                        n = e.scheduledCallInfo.initiator,
                        t = g.getScheduledCallDisplayInfoForInvitationAlert(n, e.scheduledCallInfo.type, e.scheduledCallInfo.subject);
                        break;
                    case A.ScheduleCallAlertTypes.Edited:
                    case A.ScheduleCallAlertTypes.Canceled:
                        n = e.skypeMessage.creator,
                        t = g.getScheduledCallDisplayInfoForInvitationUpdatedAlert(n, e.scheduledCallInfo.type, e.scheduledCallInfo.subject);
                        break;
                    default:
                        return x.switchStatementExhaustiveChecking(e.scheduledCallInfo.type)
                    }
                    t && (i.currentMessage = e.skypeMessage,
                    i.notificationType = b.MessageNotificationType.ScheduledCall,
                    i.messageText = t.body,
                    i.messageTextIcon = I.SkypeIcon.Schedule,
                    i.headerText = t.title,
                    i.conversationId = e.skypeMessage.conversationId,
                    i.toastCreator = n)
                }
                this.setState(i),
                this._animatedView && this._animatedView.setValue({
                    y: L._topStartingValue(i)
                }, t),
                this._showToast()
            } else
                i.messageText = void 0,
                i.currentMessage = void 0,
                i.notificationType = void 0,
                this.setState(i)
        }
        _buildState(e, t) {
            const i = this._getRootViewId();
            if (t) {
                let e = {};
                const t = v.default.getDeviceOrientation(i)
                  , n = T.default.leavePaddingForStatusBar()
                  , o = _.default.isUsingStackNavigationContext()
                  , s = T.default.statusBarHeight()
                  , r = 80 + (n ? s : 0);
                return e.currentMessage = void 0,
                e.notificationType = void 0,
                e.messageText = void 0,
                e.messageTextIcon = void 0,
                e.headerText = void 0,
                e.toastCreator = void 0,
                e.leavePaddingForStatusBar = n,
                e.statusBarHeight = s,
                e.toastHeight = r,
                e.toastWidth = v.default.getWidth(i) || 0,
                e.deviceOrientation = t,
                e.safeAreaHorizontalPaddingStyle = T.default.horizontalPaddingStyle(c.HorizontalInsetDefault),
                e.isUsingStackNavigationContext = o,
                this._isToastCurrentlyHiding = !1,
                e
            }
            return {}
        }
        componentMounting(e) {
            super.componentMounting(e),
            E.default.event_localNotificationReady.subscribe(this._handleIncomingNotification)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            E.default.event_localNotificationReady.unsubscribe(this._handleIncomingNotification)
        }
        render() {
            return this.state.currentMessage || this.state.messageText ? this.state.currentMessage && this.state.currentMessage.messagetype === l.MessageTypes.PopCard ? null : this._renderSimpleToast() : null
        }
        _renderSimpleToast() {
            let e = this._renderNotificationContent();
            if (!e)
                return null;
            const t = [D.toastContainer, D.desktopToastContainer]
              , i = [this.state.isUsingStackNavigationContext ? D.mobileToastContent : D.desktopToastContent];
            const n = this.state.leavePaddingForStatusBar ? Math.max(this.state.statusBarHeight, 10) : (this.state.isUsingStackNavigationContext,
            0);
            n && i.push(P.marginTopStyle(n));
            const o = this.state.isUsingStackNavigationContext ? D.gestureViewOverlayMobile : D.gestureViewOverlayDesktop
              , s = y.getGradientColorsNoSubscription();
            return e = a.createElement(a.View, {
                style: i
            }, this._getBackgroundView(s, !1), e),
            a.createElement(r.View, {
                key: "toast",
                ref: this._onAnimatedViewRef,
                style: t,
                ignorePointerEvents: !0,
                y: -this.state.toastHeight
            }, a.createElement(a.GestureView, {
                style: o,
                onTap: this._onTapDismiss,
                onPanVertical: this._onPanVertical,
                releaseOnRequest: !1
            }, e))
        }
        _getBackgroundView(e, t=!1) {
            const i = [w.absoluteFill];
            return t && i.push(D.backgroundViewDesktopIOS),
            this._themeStyles.notificationColorStyle ? a.createElement(a.View, {
                style: [i, this._themeStyles.notificationColorStyle]
            }) : a.createElement(s.GradientView, {
                style: i,
                direction: s.GradientDirection.RIGHT,
                colors: e
            })
        }
        _showToast(e=500) {
            const t = x.newCauseId();
            p.log(h.LogTraceArea.Notifications, "NotificationToast._showToast causeId: " + t),
            M.setTimeout(()=>{
                if (this.isComponentMounted() && this._animatedView) {
                    const e = 0;
                    this._animatedView.getAnimation({
                        y: {
                            toValue: e,
                            duration: 266,
                            easing: r.Easing.SkypeExpoInOut5
                        }
                    }, t).start(()=>{
                        this.isComponentMounted() && (this._hideToast(),
                        this._announceForAccessibility())
                    }
                    )
                }
            }
            , e)
        }
        _hideToast(e=2500) {
            const t = x.newCauseId();
            p.log(h.LogTraceArea.Notifications, "NotificationToast._hideToast causeId: " + t),
            this._hideToastTimerId = M.setTimeout(()=>{
                this.isComponentMounted() && this._animatedView && (this._isToastCurrentlyHiding = !0,
                this._animatedView.getAnimation({
                    y: {
                        toValue: L._topStartingValue(this.state),
                        duration: 266,
                        easing: r.Easing.SkypeExpoInOut5
                    }
                }, t).start(this._hideToastCallback))
            }
            , e)
        }
        _announceForAccessibility() {
            this.state.messageText && a.Accessibility.announceForAccessibility(this.state.messageText)
        }
    }
    e.exports = L
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(2)
      , o = i(3)
      , s = i(129);
    t.default = class {
        constructor(e) {
            this._contextId = e,
            this._scenarioName = s.ScenarioName[s.ScenarioName.EmergencyRestoreEndpoints],
            this._scenario = new s.default(s.ScenarioName.EmergencyRestoreEndpoints,void 0,{
                contextId: e || ""
            }),
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " Scenario created!: " + this._contextId)
        }
        start() {
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " Scenario started!: " + this._contextId),
            this._scenario.start()
        }
        gotSkypeToken(e) {
            this._scenario.markStepCompleted("GotSkypeToken", {
                refreshNeeded: e
            }),
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " GotSkypeToken:" + (e ? " Refreshed " : " ") + this._contextId)
        }
        endpointMissing(e) {
            this._scenario.markStepCompleted("MarkEndpointsMissing", {
                id: e || ""
            }),
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " MarkEndpointsMissing: " + this._contextId)
        }
        endpointRestored(e) {
            this._scenario.markStepCompleted("EndpointRestored", {
                id: e || ""
            }),
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " EndpointRestored: " + this._contextId)
        }
        pushSubscriptionRestored(e) {
            this._scenario.markStepCompleted("PushSubscriptionRestored", {
                pushSubscriptionId: e
            }),
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " PushSubscriptionRestored: " + this._contextId)
        }
        timedOut() {
            this._scenario.markStepCompleted("TimedOut"),
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " TimedOut: " + this._contextId)
        }
        finish() {
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " Finished: " + this._contextId),
            this._scenario.finish()
        }
        failed(e, t) {
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " Failed: " + this._contextId + ", reason:" + e),
            this._scenario.markStepCompleted("Failed", Object.assign({
                reason: e
            }, t))
        }
        ignored(e) {
            this._scenario.markStepCompleted("Ignored", {
                reason: e
            }),
            o.log(n.LogTraceArea.ScenarioTracker, this._scenarioName + " Ignored: " + this._contextId + ", reason:" + e)
        }
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(157)
      , s = i(869)
      , r = i(70)
      , a = i(460)
      , l = i(1801)
      , c = i(454)
      , d = (i(164),
    i(0))
      , u = i(556)
      , g = i(6)
      , h = i(502)
      , p = i(834)
      , m = i(31)
      , S = i(61)
      , C = i(58)
      , y = i(10)
      , f = i(842)
      , _ = i(313)
      , b = i(2)
      , v = i(3)
      , T = i(363)
      , P = i(5)
      , A = i(4)
      , k = i(1802)
      , I = i(132)
      , w = i(3077)
      , N = i(22)
      , M = i(75)
      , E = i(3078)
      , x = i(756)
      , D = i(37)
      , L = i(105)
      , R = i(162)
      , B = i(44)
      , O = i(592)
      , F = (i(1523),
    i(21))
      , V = i(358)
      , U = i(94)
      , H = (i(19),
    i(8))
      , W = i(18)
      , z = i(49)
      , G = i(25)
      , K = i(14)
      , j = i(234)
      , q = i(59)
      , Q = i(12)
      , X = i(109)
      , J = i(92)
      , $ = i(29)
      , Y = (i(679),
    i(1098))
      , Z = i(35)
      , ee = i(9)
      , te = P.lazyProperties({
        lightBackground: ()=>d.Styles.createViewStyle({
            backgroundColor: H.Color.white
        }),
        darkBackground: ()=>d.Styles.createViewStyle({
            backgroundColor: H.Color.darkThemeBackground
        }),
        fillScreen: ()=>d.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            flexDirection: "column"
        }),
        loadingScreen: ()=>d.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            paddingTop: 20,
            backgroundColor: H.Color.white
        })
    });
    class ie extends Q.default {
        constructor() {
            super(...arguments),
            this._animateSplashScreenStarted = !1,
            this._setNewLanguage = e=>{
                x.default.updateFlags(),
                this.setState({
                    language: e
                })
            }
            ,
            this._shouldOpenForceUpgradeLinkExternalWindow = e=>{
                const t = g.default.getConfigSettings().helpGoParam.upgradeLearnMore + "/";
                return Z.default.removeHost(e) === t
            }
            ,
            this._onSplashScreenRef = e=>{
                this._splashScreen = e || void 0
            }
            ,
            this._onUpgradeDialogOkButtonClick = ()=>{
                this._dismissUpgradeAlertDialog(),
                p.openAppStore()
            }
            ,
            this._onUpgradeDialogCancelButtonClick = ()=>{
                this._dismissUpgradeAlertDialog()
            }
        }
        _buildState(e, t) {
            const i = g.default.getS4LFeatures()
              , n = q.useTabletUI();
            let s = {
                startupComplete: L.default.getStartupUIState() === L.StartupUIState.StartupComplete,
                incomingCallIds: m.default.CallingStore.getIncomingCallIds(),
                uiShown: L.default.isUIDisplayed(),
                isShowingCustomActionMenu: f.default.isCustomActionMenuShown(),
                useMobileCustomActionMenu: N.default.isUsingStackNavigationContext() || n,
                bottomSafeAreaInset: D.default.bottomSafeAreaInset(y.BottomInsetDefault),
                useTabletUI: n,
                appActivationState: h.default.getAppState()
            };
            if (t) {
                o.BrowserEnvironment.isMobile() || d.UserInterface.useCustomScrollbars(),
                s.showSplashScreen = !s.startupComplete,
                s.language = A.getLocale(),
                s.upgradeScreendHasBeenDisplayed = !1
            }
            return !s.startupComplete || !t && this.state.startupComplete || (i.upgrade && i.upgrade.noticeUrl && (s.shouldForceUpgrade = !0,
            v.log(b.LogTraceArea.RootAppView, "Displaying force upgrade screen on initial startup")),
            s.cameraRollGranted = M.default.permissionStatus(G.PermissionType.CameraRoll) === r.PermissionStatus.Granted),
            i.upgrade && (s.upgradeUrl = i.upgrade.noticeUrl,
            s.upgradeRequired = i.upgrade.required),
            !this._hasRingsForState(s) && this._presentingIncomingCallId && (v.log(b.LogTraceArea.RootAppView, "No incoming ring, clearing ring"),
            this._presentingIncomingCallId = void 0),
            d.UserInterface.setNativeFocusOutlineEnabled(!1),
            s
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount();
            const e = F.HasStarted(J) ? this._themeColors : j.themeColorsForTheme(this.props.isDarkThemeActiveCached ? X.Theme.DelphiDark : X.Theme.Delphi)
              , t = U.mergeStyles([U.createBarStyle(e.defaultStatusBarTheme), U.createBackgroundColorStyle(e.defaultStatusBarBackgroundColor)]);
            V.default.addOrUpdateStyle("RootAppView", t, !0)
        }
        componentDidMount() {
            super.componentDidMount();
            const e = ee.newCauseId();
            v.log(b.LogTraceArea.RootAppView, "componentDidMount causeId: " + e),
            this.state.startupComplete && this._startAnimateSplashScreen(),
            this._maybePresentIncomingRing(e),
            this.state.cameraRollGranted && this._preHeatMediaPicker(),
            A.localeChangedEvent.subscribe(this._setNewLanguage);
            const t = F.HasStarted(J) ? this._themeColors : j.themeColorsForTheme(this.props.isDarkThemeActiveCached ? X.Theme.DelphiDark : X.Theme.Delphi);
            V.default.setDefaultStatusBarStyle(t.defaultStatusBarBackgroundColor, t.defaultStatusBarTheme),
            I.default.setBottomMarginDefault(this.state.bottomSafeAreaInset),
            k.open()
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            !this.state.startupComplete && t.startupComplete && this._startAnimateSplashScreen()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i);
            const n = ee.newCauseId();
            v.log(b.LogTraceArea.RootAppView, "componentDidUpdate rings: " + JSON.stringify(this.state.incomingCallIds) + " appState: " + this.state.appActivationState + " causeId: " + n),
            this._maybePresentIncomingRing(n),
            this._hasRingsForState(this.state) || this.state.appActivationState === d.Types.AppActivationState.Background || this._checkAndInstallAppUpgrades(n),
            this._checkElectronForceUpgrade(),
            this.state.cameraRollGranted && !t.cameraRollGranted && this._preHeatMediaPicker(),
            this.state.bottomSafeAreaInset !== t.bottomSafeAreaInset && I.default.setBottomMarginDefault(this.state.bottomSafeAreaInset)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            v.log(b.LogTraceArea.RootAppView, "RootAppView componentWillUnmount"),
            A.localeChangedEvent.unsubscribe(this._setNewLanguage),
            V.default.removeStyle("RootAppView")
        }
        render() {
            const e = this.state.language;
            let t = [];
            t.push(d.createElement(a.default, {
                key: "customFocusOutline",
                window: window
            }));
            const i = F.HasStarted(J) ? this._useDarkTheme() : this.props.isDarkThemeActiveCached
              , n = i ? te.darkBackground : te.lightBackground;
            if (this.state.uiShown) {
                const i = this.state.isShowingCustomActionMenu ? d.Types.ImportantForAccessibility.NoHideDescendants : void 0
                  , o = [te.fillScreen, n];
                this.state.useTabletUI && o.push(K.overflowVisible),
                t.push(d.createElement(E, {
                    style: o,
                    key: "rootNavigationView-" + e,
                    useTabletUI: this.state.useTabletUI,
                    importantForAccessibility: i
                }))
            }
            if (this.state.showSplashScreen) {
                const n = this._isMeetNow()
                  , o = A.getString("SignInSignUp.MeetNowMeetingStartup");
                t.push(d.createElement(O, {
                    ref: this._onSplashScreenRef,
                    key: "appSplashScreen" + e,
                    statusText: n ? o : this.props.startupStatusText,
                    showSpinner: !0,
                    darkThemeEnabled: i,
                    showLoginFallback: this.props.showLoginFallback,
                    loginCallback: this.props.loginCallback,
                    errorCode: this.props.errorCode,
                    isMeetNow: n
                }))
            }
            if (this.state.shouldForceUpgrade && this.state.upgradeUrl && !this.state.upgradeScreendHasBeenDisplayed) {
                t = [];
                const e = {
                    onPress: ()=>{
                        this.setState({
                            shouldForceUpgrade: !1,
                            upgradeScreendHasBeenDisplayed: !0
                        })
                    }
                    ,
                    icon: z.closeIcon(),
                    title: A.getString("Global.CancelLabel")
                };
                t.push(d.createElement(d.View, {
                    style: te.fillScreen,
                    key: "webViewForUpdate"
                }, d.createElement(B.SimplePanelHeader, {
                    leftButton: this.state.upgradeRequired ? void 0 : e,
                    hideBottomBorder: !0,
                    panelName: A.getString("RootAppView.Upgrade")
                }), d.createElement(d.View, {
                    style: te.fillScreen
                }, d.createElement(c.WebViewBridge, {
                    style: te.loadingScreen,
                    url: this.state.upgradeUrl,
                    javaScriptEnabled: !0,
                    ariaLabel: A.getString("RootAppView.Upgrade"),
                    sandbox: d.Types.WebViewSandboxMode.AllowSameOrigin,
                    shouldOpenExternalWindow: this._shouldOpenForceUpgradeLinkExternalWindow
                }))))
            }
            const o = this.state.useMobileCustomActionMenu && this.state.startupComplete ? d.createElement(w.default, null) : void 0
              , s = d.createElement(_.DesktopContextMenuTarget, {
                key: "contextmenuanchor"
            })
              , r = S.UICapabilities.keyboardAwareViewSupported();
            if (r) {
                const e = [K.flexOne];
                this.state.useTabletUI && e.push(K.overflowVisible),
                t = d.createElement(T.default, {
                    style: e,
                    onLayout: this.props.onLayout
                }, t)
            }
            return d.createElement(d.View, {
                style: K.flexOne,
                onLayout: r ? void 0 : this.props.onLayout
            }, s, t, o)
        }
        _preHeatMediaPicker() {
            s.default.open().then(e=>{
                s.default.close(e)
            }
            )
        }
        _hasRingsForState(e) {
            return !n.isEmpty(e.incomingCallIds)
        }
        _checkAndInstallAppUpgrades(e) {
            0
        }
        _checkElectronForceUpgrade() {}
        _startAnimateSplashScreen() {
            this._animateSplashScreenStarted || (this._animateSplashScreenStarted = !0,
            v.log(b.LogTraceArea.RootAppView, "Starting to hide splash screen"),
            n.defer(()=>{
                this.props.onSplashScreenWillBeDismissed();
                const e = e=>{
                    v.log(b.LogTraceArea.RootAppView, "Done hiding splash screen, animation timed out: " + e),
                    this._splashScreenTimeout && ($.clearTimeout(this._splashScreenTimeout),
                    this._splashScreenTimeout = void 0),
                    this.isComponentMounted() && this.setState({
                        showSplashScreen: !1
                    })
                }
                ;
                this._splashScreen ? (this._splashScreen.animateLeave(()=>e(!1)),
                this._splashScreenTimeout = $.setTimeout(()=>{
                    e(!0)
                }
                , 1e3)) : e(!1),
                l.default.onSplashScreenClosed()
            }
            ))
        }
        _maybePresentIncomingRing(e) {
            if (this._hasRingsForState(this.state) && this.state.startupComplete && this.state.appActivationState !== d.Types.AppActivationState.Background) {
                const t = n.head(this.state.incomingCallIds);
                t && t !== this._presentingIncomingCallId && (this._presentingIncomingCallId = t,
                v.log(b.LogTraceArea.RootAppView, "_maybePresentIncomingRing for callId: " + t + " causeId: " + e),
                m.default.CallNavigationHelper.presentIncomingRing(t, e))
            } else
                this._presentingIncomingCallId = void 0
        }
        _showUpgradeAlertDialog(e, t=!1) {
            const i = [{
                text: A.getString(e ? "UpgradeAlertDialog.UpgradeRequiredButtonLabel" : "UpgradeAlertDialog.UpgradeButtonLabel"),
                onPress: this._onUpgradeDialogOkButtonClick
            }];
            let n, o;
            e ? (n = A.getString("UpgradeAlertDialog.TitleRequired"),
            o = A.getString("UpgradeAlertDialog.BodyRequired")) : (n = A.getString("UpgradeAlertDialog.Title"),
            o = A.getString("UpgradeAlertDialog.Body"),
            i.unshift({
                text: A.getString("UpgradeAlertDialog.CancelButtonLabel"),
                onPress: this._onUpgradeDialogCancelButtonClick
            }));
            const s = d.createElement(R.SimpleDialog, {
                dialogId: "upgradealertdialog",
                buttonAlignment: u.SimpleDialogButtonAlignment.HorizontalStack,
                closeOnClickOutside: !e,
                text: n,
                simpleContent: o,
                buttons: t ? void 0 : i,
                horizontalPadding: 20,
                accessibilityLabel: n
            });
            C.default.showModal(s, "upgradealertdialog", {
                rootViewId: this._getRootViewId()
            })
        }
        _dismissUpgradeAlertDialog() {
            C.default.dismissModal("upgradealertdialog", this._getRootViewId())
        }
        _isMeetNow() {
            var e, t, i;
            const o = Z.default.getURIComponents(W.getLoadPath());
            return !!(null === (t = null === (e = o) || void 0 === e ? void 0 : e.queryParameterKeyValues) || void 0 === t ? void 0 : t.action) && n.includes([Y.UrlNavigationAction.CreateMeetNow, Y.UrlNavigationAction.JoinMeetNow], null === (i = o) || void 0 === i ? void 0 : i.queryParameterKeyValues.action)
        }
    }
    e.exports = ie
}
, , , function(e, t, i) {
    "use strict";
    var n, o;
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e[e.Cancel = 0] = "Cancel",
        e[e.ContinueWithoutAV = 1] = "ContinueWithoutAV",
        e[e.PermissionGranted = 2] = "PermissionGranted",
        e[e.None = 3] = "None"
    }(n = t.AVPermissionsAction || (t.AVPermissionsAction = {})),
    function(e) {
        e[e.AllowPrompt = 0] = "AllowPrompt",
        e[e.DenyPrompt = 1] = "DenyPrompt"
    }(o = t.InitialScreen || (t.InitialScreen = {}));
    const s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._initialState = e,
            this._action = n.None
        }
        getEventName() {
            return "calling_permissions_browser"
        }
        setAction(e) {
            this._action = e
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = n[this._action],
            e.InitialState = o[this._initialState],
            e
        }
    }
    t.CallPermissionsBrowserEvent = r
}
, , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(36)
      , s = i(658)
      , r = i(86)
      , a = i(0)
      , l = i(148)
      , c = i(10)
      , d = i(596)
      , u = i(842)
      , g = i(225)
      , h = i(81)
      , p = i(77)
      , m = i(2)
      , S = i(110)
      , C = i(3)
      , y = i(118)
      , f = i(5)
      , _ = i(4)
      , b = i(24)
      , v = i(37)
      , T = i(76)
      , P = i(44)
      , A = i(8)
      , k = i(18)
      , I = i(11)
      , w = i(14)
      , N = i(234)
      , M = i(59)
      , E = i(15)
      , x = i(12)
      , D = i(135)
      , L = i(29)
      , R = i(9)
      , B = i(183)
      , O = f.lazyProperties({
        frame: ()=>a.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            right: 0,
            left: 0,
            bottom: 0,
            alignItems: "center",
            justifyContent: "center"
        }),
        background: ()=>a.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            right: 0,
            left: 0,
            bottom: 0,
            backgroundColor: A.Color.blackOverlay50
        }),
        menuContainer: ()=>a.Styles.createViewStyle({
            position: "absolute",
            bottom: 0,
            right: 0,
            left: 0
        }),
        menuContainerBackground: ()=>a.Styles.createViewStyle({
            position: "absolute",
            bottom: -0,
            right: 0,
            left: 0,
            top: 0,
            borderTopLeftRadius: c.CustomActionSheetBorderRadius,
            borderTopRightRadius: c.CustomActionSheetBorderRadius
        }),
        menuContainerCentered: ()=>a.Styles.createViewStyle({
            borderRadius: c.CustomActionSheetBorderRadius
        }),
        caption: ()=>a.Styles.createTextStyle({
            textAlign: "center",
            alignSelf: "stretch",
            marginBottom: 8,
            marginHorizontal: 8
        }),
        defaultWidthStyle: ()=>a.Styles.createViewStyle({
            width: g.DefaultWidth
        }),
        grabberViewContainer: ()=>a.Styles.createViewStyle({
            alignSelf: "stretch",
            height: 25,
            alignItems: "center",
            justifyContent: "center"
        }),
        grabber: ()=>a.Styles.createViewStyle({
            width: 40,
            height: 6,
            borderRadius: 3,
            opacity: .2
        })
    });
    class F extends x.default {
        constructor() {
            super(...arguments),
            this._renderSlimHeaderGrabber = k.getPlatformType() === m.PlatformType.iOS,
            this._animationInProgress = !1,
            this._containerYPositionValue = new a.Animated.Value(99999),
            this._containerAnimationStyle = a.Styles.createAnimatedViewStyle({
                transform: [{
                    translateY: this._containerYPositionValue
                }]
            }),
            this._backgroundOpacityValue = new a.Animated.Value(0),
            this._backgroundOpacityStyle = a.Styles.createAnimatedViewStyle({
                opacity: this._backgroundOpacityValue
            }),
            this._isDragging = !1,
            this._contentTransform = 0,
            this._onBackButtonPressed = ()=>{
                const e = R.newCauseId();
                return C.log(m.LogTraceArea.HardwareBackButton, "MobileCustomActionMenuContainer._onBackButtonPressed, causeId: " + e),
                this.state.visibleConfiguration ? (this.state.visibleConfiguration.onCloseMenu(e),
                C.log(m.LogTraceArea.HardwareBackButton, "goBack: true componentId: MobileCustomActionMenuContainer, causeId: " + e),
                !0) : (C.log(m.LogTraceArea.HardwareBackButton, "goBack: false componentId: MobileCustomActionMenuContainer"),
                !1)
            }
            ,
            this._onBackgroundPressed = e=>{
                e.stopPropagation();
                const t = R.newCauseId();
                C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer._onBackgroundPressed, causeId: " + t),
                u.default.close(this._getRootViewId(), t)
            }
            ,
            this._onContainerLayout = e=>{
                let t = P.HeaderHeight;
                this.state.visibleConfiguration && this.state.visibleConfiguration.headerConfig && this.state.visibleConfiguration.headerConfig.headerType === d.HeaderType.Slim && (t = this._renderSlimHeaderGrabber ? 25 : 0);
                let i = e.height + t + this.state.safeBottomPadding;
                const n = this.state.useFullscreenLayoutIfNeeded && i >= this.state.screenHeight - this.state.safeTopPadding;
                if (n && (i = this.state.screenHeight),
                !this.state.containerHeight) {
                    const e = this.state.useCenteredLayout ? F._centeredYOffset(i, this._getRootViewId()) : i;
                    C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer._onContainerLayout, no previous container height, positioning container: " + e),
                    this._containerYPositionValue.setValue(this.state.useCenteredLayout ? F._centeredYOffset(i, this._getRootViewId()) : i),
                    this._backgroundOpacityValue.setValue(0)
                }
                this.state.containerHeight === i && this.state.isFullScreenMode === n || (C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer._onContainerLayout, updating container height: " + i),
                this.setState({
                    isFullScreenMode: n,
                    containerHeight: i
                }))
            }
            ,
            this._onHeaderRef = e=>{
                this._headerRef = e || void 0
            }
            ,
            this._dismiss = ()=>{
                const e = R.newCauseId();
                C.log(m.LogTraceArea.HardwareBackButton, "MobileCustomActionMenuContainer._dismiss, causeId: " + e),
                this.state.visibleConfiguration && this.state.visibleConfiguration.onCloseMenu(e)
            }
            ,
            this._onPanVertical = e=>{
                let t = e.pageY - e.initialPageY
                  , i = this._contentTransform + t;
                if (i < -0 && (i = -0),
                this._containerYPositionValue.setValue(i),
                this._isDragging || (this._isDragging = !0),
                e.isComplete)
                    if (this._contentTransform += t,
                    e.velocityY > .1 || this._contentTransform > this.state.containerHeight / 2)
                        this._dismiss();
                    else {
                        const e = R.newCauseId();
                        C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer._onPanVertical, causeId: " + e),
                        this._showContainer(e)
                    }
            }
        }
        _buildState(e, t) {
            const i = this._getRootViewId()
              , n = M.useTabletUI()
              , s = u.default.getCurrent()
              , r = {
                safeTopPadding: v.default.statusBarPadding(),
                safeBottomPadding: v.default.bottomSafeAreaInset(),
                configuration: s && !s.useDesktopPopup ? s : void 0,
                isKeyboardShown: y.isKeyboardSeen(),
                useFullscreenLayoutIfNeeded: b.default.getDeviceOrientation(i) === o.DeviceOrientation.Landscape && !n,
                screenHeight: b.default.getHeight(i),
                safeAreaHorizontalPaddingStyle: v.default.horizontalPaddingStyle(c.HorizontalInsetDefault),
                windowWidth: B.default.measureWindow(this._getRootViewId()).width,
                useCenteredLayout: n,
                isMobileScreenReaderEnabled: T.default.isMobileScreenReaderEnabled()
            };
            return t && (r.containerHeight = 0),
            r
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            if (super.UNSAFE_componentWillUpdate(e, t, i),
            !this.state.configuration && t.configuration)
                this._setConfigurationVisible(t.configuration);
            else if (this.state.configuration && !t.configuration) {
                const e = R.newCauseId();
                C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer.UNSAFE_componentWillUpdate, configuration cleared, causeId: " + e),
                this._hideContainer(e, ()=>{
                    this.isComponentMounted() && this.setState({
                        visibleConfiguration: void 0
                    })
                }
                )
            } else if (this.state.configuration && t.configuration && this.state.configuration.content !== t.configuration.content) {
                const e = R.newCauseId();
                C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer.UNSAFE_componentWillUpdate, configuration updated, causeId: " + e),
                this._hideContainer(e, ()=>this._setConfigurationVisible(t.configuration))
            }
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i);
            const n = this.state.visibleConfiguration && !t.visibleConfiguration
              , o = !this.state.visibleConfiguration && t.visibleConfiguration
              , s = this.state.visibleConfiguration && t.visibleConfiguration && this.state.visibleConfiguration !== t.visibleConfiguration && this.state.visibleConfiguration.menuId !== t.visibleConfiguration.menuId
              , r = this.state.containerHeight && !t.containerHeight;
            if (this.state.containerHeight && n || s || r) {
                const e = R.newCauseId();
                C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer.componentDidUpdate visibleConfigSet: " + n + " visibleConfigChanged: " + s + " containerHeightSet: " + r + " containerHeight: " + (this.state.containerHeight !== t.containerHeight ? t.containerHeight + " -> " + this.state.containerHeight : this.state.containerHeight) + " causeId: " + e),
                l.subscribe(this._onBackButtonPressed),
                n && this.state.containerHeight && (C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer.componentDidUpdate, visibleConfigSet: true positioning container: " + this.state.containerHeight),
                this._containerYPositionValue.setValue(this.state.containerHeight)),
                this._showContainer(e, ()=>{
                    this._headerRef ? this._headerRef.requestFocus() : S.setFocus(S.FocusEvent.CustomActionMenuDisplayed)
                }
                )
            } else
                o && l.unsubscribe(this._onBackButtonPressed)
        }
        _createContext() {
            const e = this.context || {};
            return e.isPresentedInMobileSheet = !0,
            e
        }
        render() {
            if (!this.state.visibleConfiguration)
                return null;
            const e = n.isUndefined(this.state.visibleConfiguration.colorThemeOverride) ? this._themeStyles : N.themeStylesForTheme(this.state.visibleConfiguration.colorThemeOverride)
              , t = a.Styles.createViewStyle({
                paddingTop: this.state.isFullScreenMode ? this.state.safeTopPadding : 0,
                paddingBottom: this.state.safeBottomPadding,
                height: this.state.containerHeight
            }, !1)
              , i = this.state.visibleConfiguration.backgroundColor ? a.Styles.createViewStyle({
                backgroundColor: this.state.visibleConfiguration.backgroundColor
            }, !1) : void 0;
            let o, r;
            if (this.state.useCenteredLayout)
                o = [O.menuContainerCentered, e.primaryBackgroundColorStyle, i, this._containerAnimationStyle, t, O.defaultWidthStyle];
            else if (o = [O.menuContainer, t, this._containerAnimationStyle, w.overflowVisible],
            this.state.visibleConfiguration.useBlurredBackground) {
                const e = this.state.visibleConfiguration.colorThemeOverride || this._currentTheme
                  , t = D.isDarkTheme(e) ? s.BlurStyle.Dark : s.BlurStyle.ExtraLight;
                r = a.createElement(s.BlurView, {
                    style: O.menuContainerBackground,
                    blurStyle: t
                })
            } else
                r = a.createElement(a.View, {
                    style: [O.menuContainerBackground, e.primaryBackgroundColorStyle, i]
                });
            const l = this.state.visibleConfiguration.headerConfig
              , c = l && l.hideCloseButton ? void 0 : {
                icon: I.SkypeIcon.ClosePanel,
                onPress: this._dismiss,
                title: _.getString("Global.CloseButtonTitle")
            }
              , u = this.state.visibleConfiguration.getSubtitle ? this.state.visibleConfiguration.getSubtitle(this.state.isFullScreenMode) : void 0
              , g = u && !this.state.visibleConfiguration.hideSubtitleDivider ? a.createElement(p, {
                key: "divider",
                marginLeft: 10,
                marginRight: 10
            }) : void 0
              , h = u ? [a.createElement(E.Caption, {
                key: "caption",
                style: [O.caption, this.state.safeAreaHorizontalPaddingStyle],
                colorThemeOverride: this.state.visibleConfiguration.colorThemeOverride
            }, u), g] : void 0;
            let m;
            const S = l && l.headerType === d.HeaderType.Slim;
            S ? this._renderSlimHeaderGrabber && (m = a.createElement(a.GestureView, {
                style: O.grabberViewContainer,
                onPanVertical: this._onPanVertical,
                onTap: this._dismiss,
                accessibilityLabel: _.getString("Global.CloseButtonTitle"),
                accessibilityTraits: a.Types.AccessibilityTrait.Button
            }, a.createElement(a.View, {
                style: [O.grabber, e.primaryViewColorStyle]
            }))) : m = a.createElement(P.SimplePanelHeader, {
                ref: this._onHeaderRef,
                panelName: this.state.visibleConfiguration.getTitle(this.state.isFullScreenMode),
                leftButton: c,
                rightButtons: l ? l.rightButton : void 0,
                hideBottomBorder: !0,
                colorThemeOverride: this.state.visibleConfiguration.colorThemeOverride,
                useTransparentBackground: !0
            });
            const C = a.createElement(a.View, {
                style: this.state.safeAreaHorizontalPaddingStyle,
                onLayout: this._onContainerLayout
            }, h, this.state.visibleConfiguration.content)
              , y = this.state.visibleConfiguration.staticContent || !this.state.isFullScreenMode;
            let f = a.createElement(a.ScrollView, {
                style: w.flexOne,
                scrollEnabled: !y
            }, C);
            y && S && !this.state.isMobileScreenReaderEnabled && (f = a.createElement(a.GestureView, {
                onPanVertical: this._onPanVertical
            }, f));
            const b = [O.background, this._backgroundOpacityStyle];
            return this.state.visibleConfiguration.useTransparentShim && b.push(w.transparentBackground),
            a.createElement(a.View, {
                style: O.frame,
                restrictFocusWithin: !0
            }, a.createElement(a.Animated.View, {
                style: b,
                onPress: this._onBackgroundPressed,
                disableTouchOpacityAnimation: !0,
                importantForAccessibility: a.Types.ImportantForAccessibility.No
            }), a.createElement(a.Animated.View, {
                style: o
            }, r, m, f))
        }
        _showContainer(e, t) {
            C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer._showContainer, causeId: " + e),
            this._startContainerAnimation(0, 1, t, e)
        }
        _hideContainer(e, t) {
            C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer._hideContainer, causeId: " + e);
            const i = this.state.useCenteredLayout ? F._centeredYOffset(this.state.containerHeight, this._getRootViewId()) : this.state.containerHeight;
            this._startContainerAnimation(i, 0, t, e)
        }
        _setConfigurationVisible(e) {
            C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer._setConfigurationVisible"),
            this.isComponentMounted() && (a.Modal.dismissAll(),
            this.setState({
                visibleConfiguration: e
            }, ()=>L.setTimeout(()=>h.dismissAll(), 20)))
        }
        _startContainerAnimation(e, t, i, n) {
            C.log(m.LogTraceArea.GenericUnsafe, "MobileCustomActionMenuContainer._startContainerAnimation ytranslation: " + e + " backgroundOpacity: " + t + " animationInProgress: " + this._animationInProgress + " causeId: " + n),
            this._animationInProgress = !0,
            this._contentTransform = e;
            const o = [r.timing.easeOut({
                value: this._containerYPositionValue,
                toValue: e,
                useNativeDriver: !0
            }), r.timing.easeOut({
                value: this._backgroundOpacityValue,
                toValue: t,
                useNativeDriver: !0
            })];
            r.parallel(o).start(()=>{
                this._animationInProgress = !1,
                i && i()
            }
            )
        }
        static _centeredYOffset(e, t) {
            const i = B.default.measureWindow(t).height;
            return e ? i - (i - e) / 2 : i
        }
    }
    t.default = F
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(1810)
      , s = i(842)
      , r = i(669)
      , a = (i(3084),
    i(2))
      , l = (i(3085),
    i(3086),
    i(3))
      , c = i(709)
      , d = i(17)
      , u = i(22)
      , g = i(64)
      , h = i(1221)
      , p = i(24)
      , m = i(1818)
      , S = i(3305)
      , C = i(107)
      , y = i(25)
      , f = i(14)
      , _ = i(12)
      , b = i(9);
    class v extends _.default {
        constructor() {
            super(...arguments),
            this._onDragDrop = e=>{
                e.preventDefault(),
                e.stopPropagation()
            }
        }
        _buildState(e, t) {
            let i, n;
            const o = this._getRootViewId()
              , a = u.default.isUsingStackNavigationContext();
            return a ? i = g.default.getCurrentNavigationStack() : n = g.default.getCurrentStackNavigationContext(C.StackNavigatorId.DesktopContent),
            {
                navContextStack: i,
                compositeSplitNavStack: n,
                isUsingStackNavigationContext: a,
                shouldCollapseSplitNav: r.default.collapseDesktopStackNavContext() && p.default.getResponsiveWidth(o) <= y.ResponsiveWidth.Tiny,
                isCustomActionMenuShown: s.default.isCustomActionMenuShown()
            }
        }
        componentDidMount() {
            if (super.componentDidMount(),
            r.default.collapseDesktopStackNavContextNoSubscription()) {
                const e = b.newCauseId();
                l.log(a.LogTraceArea.Navigation, "RootNavigationView.componentDidMount, causeId: " + e),
                d.collapseSplitNavContext(C.StackNavigatorId.DesktopContent, this.state.shouldCollapseSplitNav, e)
            }
        }
        componentDidUpdate(e, t, i) {
            if (super.componentDidUpdate(e, t, i),
            this.state.shouldCollapseSplitNav !== t.shouldCollapseSplitNav) {
                const e = b.newCauseId();
                l.log(a.LogTraceArea.Navigation, "RootNavigationView.componentDidUpdate, causeId: " + e),
                d.collapseSplitNavContext(C.StackNavigatorId.DesktopContent, this.state.shouldCollapseSplitNav, e)
            }
        }
        componentWillUnmount() {
            super.componentWillUnmount()
        }
        render() {
            const e = [this.props.style, this._themeStyles.primaryBackgroundColorStyle];
            return this.props.useTabletUI && e.push(f.overflowVisible),
            this.state.compositeSplitNavStack ? this._renderCompositeView(this.state.compositeSplitNavStack, e, void 0) : this.state.navContextStack ? this._renderStackView(this.state.navContextStack, e, void 0) : n.createElement(n.View, {
                style: e,
                importantForAccessibility: this.props.importantForAccessibility
            }, void 0)
        }
        _renderStackView(e, t, i) {
            return n.createElement(n.View, {
                key: "app",
                style: t,
                importantForAccessibility: this.props.importantForAccessibility
            }, n.createElement(S, {
                key: "stackView",
                navContextStack: e,
                isWholeStackInvisible: this.state.isCustomActionMenuShown
            }), this._renderOptionalPipView(), this._renderCoachmarkPresenter(), this._renderNotificationToasts(), i)
        }
        _renderCompositeView(e, t, i) {
            const o = [t];
            return this.props.useTabletUI && o.push(f.overflowVisible),
            n.createElement(n.View, {
                style: o,
                onDrop: this._onDragDrop,
                importantForAccessibility: this.props.importantForAccessibility
            }, n.createElement(m, {
                key: "compositeView",
                splitNavContext: e,
                useTabletUI: this.props.useTabletUI
            }), null, this._renderOptionalPipView(), this._renderCoachmarkPresenter(), this._renderNotificationToasts(), i)
        }
        _renderOptionalPipView() {
            return null
        }
        _renderCoachmarkPresenter() {
            return n.createElement(o, null)
        }
        _renderNotificationToasts() {
            return [n.createElement(h, {
                key: "notificationtoast"
            }), n.createElement(c, {
                key: "minitoast"
            })]
        }
    }
    e.exports = v
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = (i(164),
    i(6))
      , s = i(31)
      , r = i(10)
      , a = i(43)
      , l = i(160)
      , c = i(200)
      , d = i(2)
      , u = i(206)
      , g = i(567)
      , h = i(3)
      , p = i(1811)
      , m = i(4)
      , S = i(506)
      , C = i(243)
      , y = i(20)
      , f = i(17)
      , _ = i(55)
      , b = i(97)
      , v = i(262)
      , T = i(291)
      , P = i(232)
      , A = i(614)
      , k = i(306)
      , I = i(583)
      , w = i(9);
    class N extends a.default {
        constructor() {
            super(...arguments),
            this._electronSubscriptions = [],
            this._navigateToMandatoryUpdatePage = ()=>{
                f.navigateToForcedUpgradeScreen()
            }
            ,
            this._navigateToAboutPage = ()=>{
                const e = w.newCauseId();
                h.log(d.LogTraceArea.Navigation, "RootCompositeNavigationView._navigateToAboutPage causeId: " + e),
                f.closeGenericDesktopModal(e, void 0),
                f.navigateToRootDesktopSettingsGroup(_.SettingsGroup.About, void 0, e)
            }
            ,
            this._navigateToSettings = ()=>{
                p.default.navigateToSettings()
            }
            ,
            this._navigateToAVSettings = ()=>{
                const e = w.newCauseId();
                h.log(d.LogTraceArea.Navigation, "RootCompositeNavigationView._navigateToAVSettings causeId: " + e),
                f.closeGenericDesktopModal(e, void 0),
                s.default.CallNavigationHelper.navigateToAVRootDesktopSettings(void 0, e)
            }
            ,
            this._navigateToMeControl = ()=>{
                const e = w.newCauseId();
                h.log(d.LogTraceArea.Navigation, "RootCompositeNavigationView._navigateToMeControl causeId: " + e),
                f.closeGenericDesktopModal(e, void 0),
                f.navigateToMeControl(void 0, e)
            }
            ,
            this._navigateToProfile = ()=>{
                const e = w.newCauseId();
                h.log(d.LogTraceArea.Navigation, "RootCompositeNavigationView._navigateToAVSettings causeId: " + e),
                f.closeGenericDesktopModal(e, void 0),
                f.navigateToMyProfile(void 0, d.ProfileOpenOrigin.Menu)
            }
            ,
            this._navigateToSearch = e=>{
                p.default.navigateToSearch(e)
            }
            ,
            this._navigateToFeedback = ()=>{
                p.default.navigateToFeedback(),
                u.default.isSetupWizardCompleted(!1) || (u.default.setIsSetupWizardCompleted(),
                P.default.track(new T.BugReportedInWizard(l.DialogNavOrigin.Onboarding)))
            }
            ,
            this._navigateToSupport = ()=>{
                const e = g.getTelemetryCorrelationId();
                h.track(new v.NavigationHelpAndFeedback(b.NavigationSettingsItem.GoToSupport,b.NavigationSettingsOrigin.ApplicationMenu,e)),
                this._openHelpUrlWithTrackingParams(o.default.getConfigSettings().helpGoParam.supportArticles, m.getString("MyProfilePanel.GetHelpTitle"), "menu.support", e)
            }
            ,
            this._navigateToStatus = ()=>{
                const e = g.getTelemetryCorrelationId();
                h.track(new v.NavigationHelpAndFeedback(b.NavigationSettingsItem.SkypeStatus,b.NavigationSettingsOrigin.ApplicationMenu,e)),
                this._openHelpUrlWithTrackingParams(o.default.getConfigSettings().helpGoParam.skypeStatus, m.getString("MyProfilePanel.SkypeStatusButtonTitle"), "menu.status", e)
            }
            ,
            this._navigateToSkypeURI = e=>{
                I.getNavigationActionForDeepLink(e, d.NavigationConversationOrigin.ElectronUri).then(t=>{
                    y.isUserLoggedIn() && S.default.isMeetNowUri(e) && h.track(new C.MeetNowUriReceivedEvent(e)),
                    t && t.action()
                }
                )
            }
            ,
            this._startNewConversation = e=>{
                p.default.startNewConversation(e)
            }
            ,
            this._startNewGroupConversation = e=>{
                p.default.startNewGroupConversation(e)
            }
            ,
            this._startNewCall = ()=>{
                const e = w.newCauseId();
                h.log(d.LogTraceArea.Navigation, "RootCompositeNavigationView._startNewCall,  causeId: " + e),
                f.navigateToQuickCallPanel(e, void 0)
            }
            ,
            this._signOut = ()=>{
                A.showSignOutConfirmation(d.LogoutReason.DesktopMenu, r.MainRootViewId)
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._electronSubscriptions.push(c.onMandatoryUpdate.subscribe(this._navigateToMandatoryUpdatePage), c.onNavigateToAboutPage.subscribe(this._navigateToAboutPage), c.onNavigateToSettings.subscribe(this._navigateToSettings), c.onNavigateToAVSettings.subscribe(this._navigateToAVSettings), c.onNavigateToProfile.subscribe(this._navigateToProfile), c.onNavigateToMeControl.subscribe(this._navigateToMeControl), c.onNavigateToSearch.subscribe(()=>{
                this._navigateToSearch(d.SearchPanelInitiator.ElectronMenu)
            }
            ), c.onNavigateToFeedback.subscribe(this._navigateToFeedback), c.onNavigateToSkypeURI.subscribe(this._navigateToSkypeURI), c.onNewConversation.subscribe(()=>{
                this._startNewConversation(d.NavigationConversationOrigin.AppMenu)
            }
            ), c.onNewGroupConversation.subscribe(()=>{
                this._startNewGroupConversation(d.NavigationConversationOrigin.AppMenu)
            }
            ), c.onNewCall.subscribe(this._startNewCall), c.onSignOut.subscribe(this._signOut), c.onNavigateToSupport.subscribe(this._navigateToSupport), c.onNavigateToStatus.subscribe(this._navigateToStatus))
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            n.each(this._electronSubscriptions, e=>{
                e.unsubscribe()
            }
            ),
            this._electronSubscriptions = []
        }
        render() {
            return null
        }
        _openHelpUrlWithTrackingParams(e, t, i, n) {
            let o = k.addSsoFlagToUrl(e, !0);
            o = g.addCommonTrackingParams(o, !0, !0);
            const s = {
                tcg: n
            };
            f.navigateToHelpAndFeedbackLink(o, i, t, r.MainRootViewId, s)
        }
    }
    t.default = N
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(13)
      , r = i(3)
      , a = i(5)
      , l = i(8);
    a.lazyProperties({
        errorBar: ()=>o.Styles.createViewStyle({
            bottom: 0,
            left: 0,
            right: 0,
            padding: 10,
            flexDirection: "row",
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            opacity: .7
        }),
        text: ()=>o.Styles.createTextStyle({
            flex: 1,
            textAlign: "center"
        }),
        barErrorColor: ()=>o.Styles.createViewStyle({
            backgroundColor: l.Color.red
        }),
        barWarningColor: ()=>o.Styles.createViewStyle({
            backgroundColor: l.Color.yellow
        })
    });
    class c extends s.ComponentBase {
        constructor() {
            super(...arguments),
            this._warningCallback = (...e)=>{
                n.defer(()=>{
                    this.isComponentMounted() && this.setState({
                        currentWarningCount: this.state.currentWarningCount + 1
                    })
                }
                )
            }
            ,
            this._errorCallback = (...e)=>{
                n.defer(()=>{
                    this.isComponentMounted() && this.setState({
                        currentErrorCount: this.state.currentErrorCount + 1
                    })
                }
                )
            }
            ,
            this._onPress = ()=>{
                this.setState({
                    currentErrorCount: 0,
                    currentWarningCount: 0
                })
            }
        }
        _buildState(e, t) {
            return t ? {
                currentErrorCount: 0,
                currentWarningCount: 0
            } : {}
        }
        componentDidMount() {
            super.componentDidMount()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            r.devErrorEvent.unsubscribe(this._errorCallback),
            r.devWarningEvent.unsubscribe(this._warningCallback)
        }
        render() {
            return null
        }
    }
    e.exports = c
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(63)
      , r = i(6)
      , a = i(2)
      , l = i(80)
      , c = i(3)
      , d = i(5)
      , u = i(503)
      , g = i(4)
      , h = i(132)
      , p = i(54)
      , m = i(17)
      , S = i(97)
      , C = i(262)
      , y = i(373)
      , f = i(614)
      , _ = i(8)
      , b = i(23)
      , v = i(131)
      , T = i(12)
      , P = d.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            minHeight: 32,
            alignItems: "center",
            justifyContent: "space-between",
            flexDirection: "row",
            flexWrap: "wrap",
            paddingRight: 8
        }),
        containerWithoutPreview: ()=>o.Styles.createViewStyle({
            paddingLeft: 8
        }),
        innerContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            flex: -1,
            alignSelf: "stretch",
            alignItems: "center"
        }),
        webFooterText: ()=>o.Styles.createTextStyle({
            font: b.font.uiDisplayRegular,
            fontSize: b.controlFontSize.webFooter
        }),
        linkText: ()=>o.Styles.createTextStyle({
            color: _.Color.gray200,
            marginHorizontal: 4,
            marginVertical: 4
        }),
        spacerText: ()=>o.Styles.createTextStyle({
            color: _.Color.gray200,
            marginHorizontal: 4,
            top: -2
        }),
        shadow: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            height: 10,
            opacity: .6
        }),
        previewContainer: ()=>o.Styles.createViewStyle({
            paddingHorizontal: 6,
            alignSelf: "stretch",
            justifyContent: "center",
            marginRight: 4
        }),
        borderStyle: ()=>o.Styles.createViewStyle({
            borderTopWidth: 1
        })
    });
    var A;
    !function(e) {
        e[e.Feedback = 0] = "Feedback",
        e[e.Download = 1] = "Download",
        e[e.Language = 2] = "Language",
        e[e.TermsOfUse = 3] = "TermsOfUse",
        e[e.Privacy = 4] = "Privacy",
        e[e.Copyright = 5] = "Copyright",
        e[e.Preview = 6] = "Preview",
        e[e.PublicWebSafety = 7] = "PublicWebSafety",
        e[e.SignOut = 8] = "SignOut"
    }(A || (A = {}));
    const k = [A.Preview, A.Download, A.Feedback, A.Language, A.PublicWebSafety, A.SignOut]
      , I = [A.TermsOfUse, A.Privacy, A.Copyright];
    class w extends T.default {
        constructor() {
            super(...arguments),
            this._renderFooterElement = (e,t)=>{
                let i, n, s = !1;
                switch (e) {
                case A.Preview:
                    this.state.showPreviewBadge && (i = g.getString("WebFooter.Preview2"),
                    s = !0);
                    break;
                case A.Feedback:
                    i = g.getString("WebFooter.Feedback"),
                    n = this._openFeedback;
                    break;
                case A.Language:
                    const e = g.getLocale();
                    i = g.getString("WebFooter.Language") + (e ? " (" + e + ")" : ""),
                    n = this._openLanguagePicker;
                    break;
                case A.Download:
                    i = g.getString("WebFooter.Download"),
                    n = this._openDownloadPage;
                    break;
                case A.TermsOfUse:
                    i = g.getString("WebFooter.TermsOfUse"),
                    n = this._openTerms;
                    break;
                case A.PublicWebSafety:
                    i = g.getString("WebFooter.PublicWebSafety"),
                    n = this._openPublicWebSafety;
                    break;
                case A.SignOut:
                    i = g.getString("WebFooter.SignOut"),
                    n = this._signOut;
                    break;
                case A.Privacy:
                    i = g.getString("WebFooter.Privacy"),
                    n = this._openPrivacy;
                    break;
                case A.Copyright:
                    i = g.getString("WebFooter.Copyright")
                }
                if (i) {
                    const r = this._useAccessibleTheme();
                    let a;
                    const c = [P.webFooterText, P.linkText];
                    let d;
                    s ? d = o.Styles.createTextStyle({
                        color: r ? this._themeColors.primaryBackgroundColor : _.Color.white
                    }, !1) : r && (d = this._themeStyles.primaryTextColorStyle);
                    const u = [P.webFooterText, P.spacerText];
                    if (d && (c.push(d),
                    u.push(d)),
                    n ? a = o.createElement(v.default, {
                        key: "link" + e,
                        style: c,
                        url: "#",
                        onPress: n
                    }, i) : (a = o.createElement(l.HiddenText, {
                        key: "text" + e,
                        style: c
                    }, i),
                    s || (a = o.createElement(o.View, {
                        key: "text" + e,
                        accessibilityLabel: i,
                        tabIndex: -1,
                        importantForAccessibility: o.Types.ImportantForAccessibility.Yes
                    }, a))),
                    s) {
                        const t = r ? o.Styles.createViewStyle({
                            backgroundColor: this._themeColors.primaryTextColor
                        }, !1) : this.state.previewBackgroundStyle;
                        a = o.createElement(o.View, {
                            key: "badge" + e,
                            style: [P.previewContainer, t],
                            accessibilityLabel: i,
                            tabIndex: -1,
                            importantForAccessibility: o.Types.ImportantForAccessibility.Yes
                        }, a)
                    }
                    return [a, t && !s ? o.createElement(l.HiddenText, {
                        key: "spacer" + e,
                        style: u
                    }, ".") : void 0]
                }
            }
            ,
            this._openPrivacy = ()=>{
                u.openPrivacy()
            }
            ,
            this._openTerms = ()=>{
                u.openTerms()
            }
            ,
            this._openLanguagePicker = ()=>{
                m.navigateToLanguagePicker(!0, void 0)
            }
            ,
            this._openDownloadPage = ()=>{
                o.Linking.openUrl(r.default.getConfigSettingsNoSubscription().downloadSkype.downloadSkypeUrl)
            }
            ,
            this._openPublicWebSafety = ()=>{
                o.Linking.openUrl(r.default.getConfigSettingsNoSubscription().skypeGoLinks.publicWebSafety)
            }
            ,
            this._signOut = ()=>{
                f.showSignOutConfirmation(a.LogoutReason.CompositeNavigationFooter, this._getRootViewId())
            }
            ,
            this._openFeedback = ()=>{
                c.track(new C.NavigationHelpAndFeedback(S.NavigationSettingsItem.SendFeedback,S.NavigationSettingsOrigin.WebFooter)),
                y.openFeedbackUrl(r.default.getConfigSettings().feedbackAndProblemGoParam.feedback, g.getString("MyProfilePanel.SendFeedbackButtonTitle"), this._getRootViewId(), !0)
            }
            ,
            this._onLayout = e=>{
                h.default.setBottomMarginBase(e.height + 10)
            }
        }
        _buildState(e, t) {
            return {
                previewBackgroundStyle: p.getPrimaryBackgroundColorStyle(),
                showPreviewBadge: r.default.getS4LUiFeatures().enableWebFooterPreviewBadge
            }
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            h.default.setBottomMarginBase(0)
        }
        _renderFooterElements(e) {
            return n.map(e, (t,i)=>this._renderFooterElement(t, i !== e.length - 1))
        }
        render() {
            const e = this._useAccessibleTheme()
              , t = e ? this._themeStyles.primaryBackgroundColorStyle : o.Styles.createViewStyle({
                backgroundColor: this._themeColors.webFooterColor
            }, !1)
              , i = [P.container, t];
            this.state.showPreviewBadge || i.push(P.containerWithoutPreview),
            e && i.push(this._themeStyles.dividerBorderColorStyle, P.borderStyle);
            const n = e ? void 0 : o.createElement(o.Image, {
                style: P.shadow,
                resizeMode: "stretch",
                source: s.Collection.PHOTO_SHIM
            });
            return o.createElement(o.View, {
                style: i,
                onLayout: this._onLayout
            }, n, o.createElement(o.View, {
                style: P.innerContainer
            }, this._renderFooterElements(k)), o.createElement(o.View, {
                style: P.innerContainer
            }, this._renderFooterElements(I)))
        }
    }
    e.exports = w
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(351)
      , r = i(43)
      , a = i(229)
      , l = i(200)
      , c = i(1821)
      , d = i(121)
      , u = i(55)
      , g = i(251)
      , h = i(29);
    class p extends r.default {
        constructor() {
            super(...arguments),
            this._onKeyPress = e=>{
                if (!this.isComponentMounted())
                    return;
                let t = n.indexOf(this.props.tabs, this.state.focusedHubTab);
                e.keyCode !== d.DOWN && e.keyCode !== d.LEFT || (t -= 1),
                e.keyCode !== d.UP && e.keyCode !== d.RIGHT || (t += 1),
                t < 0 ? t = this.props.tabs.length - 1 : t >= this.props.tabs.length && (t = 0),
                this.setState({
                    focusedHubTab: this.props.tabs[t]
                })
            }
            ,
            this._onBlur = ()=>{
                this._focusResetTimeout && h.clearTimeout(this._focusResetTimeout),
                this._focusResetTimeout = h.setTimeout(()=>{
                    this.isComponentMounted() && this.state.focusedHubTab !== this.props.currentHubTab && this.setState({
                        hasFocus: !1,
                        focusedHubTab: this.props.currentHubTab
                    })
                }
                , 250)
            }
            ,
            this._onFocus = ()=>{
                this.isComponentMounted() && !this.state.hasFocus && this.setState({
                    hasFocus: !0
                }),
                this._focusResetTimeout && (h.clearTimeout(this._focusResetTimeout),
                this._focusResetTimeout = void 0)
            }
            ,
            this._onTabBarRef = e=>{
                this._tabBar = e || void 0
            }
            ,
            this._onTabBarLayout = e=>{
                if (!this.state.resizingEnabled)
                    return;
                const t = e.width <= this.props.smallTabsThreshold;
                this.state.useSmallTabs !== t && this.setState({
                    useSmallTabs: t
                })
            }
        }
        _buildState(e, t) {
            const i = n.includes(e.tabs, u.HubTab.Notifications);
            let o = {
                activeConversationsCount: n.includes(e.tabs, u.HubTab.Recents) ? a.default.getActiveRecentsConversationCount() : 0,
                unreadAlertsCount: i ? s.default.getUnreadAlertsCount() : 0,
                shouldShowUpdateBadge: i && (l.shouldShowUpdateBadge() || l.shouldShowUpdateReminder()),
                focusedHubTab: e.currentHubTab,
                resizingEnabled: g.default.resizingEnabled(g.SideBar.Left)
            };
            return t && (o.hasFocus = !1,
            o.useSmallTabs = e.useSmallTabsOnMount),
            o
        }
        tabRef(e) {
            return this._tabBar ? this._tabBar.tabRef(e) : void 0
        }
        _badgeCount() {
            let e = this.state.unreadAlertsCount || 0;
            return this.state.shouldShowUpdateBadge && e++,
            e
        }
        render() {
            return o.createElement(c.default, {
                ref: this._onTabBarRef,
                style: this.props.style,
                tabs: this.props.tabs,
                currentHubTab: this.props.currentHubTab,
                focussedHubTab: this.state.focusedHubTab,
                activeConversationsCount: this.state.activeConversationsCount,
                unreadAlertsCount: this._badgeCount(),
                hasFocus: this.state.hasFocus,
                useSmallTabs: this.state.useSmallTabs,
                hideLabels: this.props.hideLabels,
                onTabPress: this.props.onTabPress,
                onTabLongPress: this.props.onTabLongPress,
                onKeyPress: this._onKeyPress,
                onFocus: this._onFocus,
                onBlur: this._onBlur,
                onLayout: this.state.resizingEnabled ? this._onTabBarLayout : void 0
            })
        }
    }
    t.DesktopHubTabBar = p,
    t.default = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(532)
      , r = i(230)
      , a = i(42)
      , l = i(467)
      , c = i(10)
      , d = i(2)
      , u = i(80)
      , g = i(27)
      , h = i(5)
      , p = i(54)
      , m = i(8)
      , S = i(18)
      , C = i(23)
      , y = i(11)
      , f = i(14)
      , _ = i(1192)
      , b = i(59)
      , v = i(12)
      , T = i(92)
      , P = h.lazyProperties({
        buttonStyle: ()=>o.Styles.createViewStyle({
            width: 80,
            alignItems: "center",
            justifyContent: "center",
            paddingTop: 2
        }),
        buttonStyleDesktop: ()=>o.Styles.createViewStyle({
            width: 80
        }),
        buttonInnerStyleDesktop: ()=>o.Styles.createViewStyle({
            width: 80,
            alignItems: "center"
        }),
        buttonStyleSmall: ()=>o.Styles.createViewStyle({
            width: 60
        }),
        buttonInnerStyleDesktopSmall: ()=>o.Styles.createViewStyle({
            width: 60,
            alignItems: "center"
        }),
        buttonStyleLandscapeIOS: ()=>o.Styles.createViewStyle({
            flex: -1,
            flexDirection: "row",
            justifyContent: "center",
            width: 100,
            backgroundColor: m.Color.transparent
        }),
        badgeCounterContainer: ()=>o.Styles.createViewStyle({
            position: "absolute",
            height: 24,
            width: 46,
            top: 0,
            overflow: "visible",
            justifyContent: "center",
            alignItems: "flex-end"
        }),
        badgeCounterContainerIOSLandscape: ()=>o.Styles.createViewStyle({
            position: "absolute",
            height: 24,
            width: 24,
            top: -1,
            left: 0,
            overflow: "visible",
            alignItems: "flex-end"
        }),
        syncIndicator: ()=>o.Styles.createViewStyle({
            paddingBottom: 6,
            paddingLeft: 5
        }),
        tabTitle: ()=>o.Styles.createTextStyle({
            textAlign: "center",
            marginTop: 2
        }),
        tabTitleDesktop: ()=>o.Styles.createTextStyle({
            alignSelf: "stretch"
        }),
        tabTitleAndroid: ()=>o.Styles.createTextStyle({
            textAlign: "center",
            marginTop: 5
        }),
        tabTitleIOSLandscape: ()=>o.Styles.createTextStyle({
            flex: -1,
            marginLeft: 5,
            fontSize: C.controlFontSize.tabHeaderSmall
        }),
        tabTitleSmall: ()=>o.Styles.createTextStyle({
            fontSize: C.controlFontSize.captionTiny,
            marginTop: 4
        }),
        tabContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "center"
        }),
        redBadge: ()=>o.Styles.createViewStyle({
            backgroundColor: m.Color.red
        }),
        iconOpacity: ()=>o.Styles.createViewStyle({
            opacity: .8
        }),
        buttonInnerContainer: ()=>o.Styles.createViewStyle({
            justifyContent: "center",
            alignItems: "center"
        })
    });
    class A extends v.default {
        constructor() {
            super(...arguments),
            this._onTabRef = e=>{
                this._componentRef = e || void 0
            }
            ,
            this._onAnchorPress = ()=>{
                this.props.onTabPress(this.props.tabDescriptor.tab, void 0)
            }
            ,
            this._onPress = e=>{
                this.props.onTabPress(this.props.tabDescriptor.tab, e && e.timeStamp)
            }
            ,
            this._onLongPress = ()=>{
                this.props.onTabLongPress && this.props.onTabLongPress(this.props.tabDescriptor.tab)
            }
            ,
            this._onContextMenu = e=>{
                e.stopPropagation(),
                this.props.onTabLongPress && this.props.onTabLongPress(this.props.tabDescriptor.tab, e)
            }
            ,
            this._onHoverStart = ()=>{
                this.isComponentMounted() && this.setState({
                    isHovering: !0
                })
            }
            ,
            this._onHoverEnd = ()=>{
                this.isComponentMounted() && this.setState({
                    isHovering: !1
                })
            }
        }
        _buildState(e, t) {
            let i;
            if (e.tabDescriptor.selected) {
                let e;
                e = T.useAccessibleTheme() ? this._themeColors.tabIndicatorColor : A._iconColorForColor(p.getPrimaryColor()),
                i = o.Styles.createTextStyle({
                    color: e
                }, !1)
            }
            const n = {
                useSmallTitles: !!e.useSmallTitles || b.isTablet() || b.useTabletUI(),
                iconColorStyle: i
            };
            return t && (n.isHovering = !1),
            n
        }
        requestFocus() {
            this._componentRef && this._componentRef.requestFocus && this._componentRef.requestFocus()
        }
        _shouldComponentUpdate(e, t, i, n, o, s) {
            return e ? t.tabBarHeight !== n.tabBarHeight : super._shouldComponentUpdate(e, t, i, n, o, s)
        }
        render() {
            const e = this._isPresentedInDesktopLeftNav()
              , t = this.props.tabBarHeight === c.TabBarHeight.iosLandscape
              , i = S.getPlatformType() === d.PlatformType.Android
              , h = i && !this._useAccessibleTheme() || this.state.isHovering
              , p = this.props.tabDescriptor.selectedIcon && (h || this.props.tabDescriptor.selected) ? this.props.tabDescriptor.selectedIcon : this.props.tabDescriptor.icon
              , b = [this._themeStyles.primaryIconColorStyle]
              , v = 4 === this.props.tabGroup.length;
            let T;
            h && b.push(P.iconOpacity);
            const A = this.props.tabDescriptor.badgeCount
              , k = t ? P.badgeCounterContainerIOSLandscape : P.badgeCounterContainer;
            A && !this.props.tabDescriptor.showSpinner && (T = o.createElement(u.default, {
                style: k,
                blockPointerEvents: !0
            }, o.createElement(s.default, {
                count: t ? void 0 : A.toString(),
                rawCount: A,
                colorStyle: P.redBadge,
                borderColor: e ? this._themeColors.secondaryBackgroundColor : this._themeColors.primaryBackgroundColor,
                badgeSize: t ? s.BadgeSize.Small : s.BadgeSize.Medium,
                borderWidth: 2,
                isHighPriority: !0,
                fixedSize: !0
            })));
            const I = this.props.tabDescriptor.showSpinner ? o.createElement(u.default, {
                style: [k, P.syncIndicator],
                blockPointerEvents: !0
            }, o.createElement(_.default, {
                size: 12,
                color: m.Color.transparent,
                indicatorColor: this._themeColors.secondaryTextColor,
                largeIndicator: !0
            })) : void 0
              , w = l.default.tabBarHeightStyle(this.props.tabBarHeight)
              , N = [P.buttonStyle, w, e ? v && !this.props.useSmallTabs ? P.buttonStyleDesktop : P.buttonStyleSmall : void 0]
              , M = [P.buttonInnerContainer];
            t && M.push(P.buttonStyleLandscapeIOS),
            this.props.widthStyle ? (N.push(this.props.widthStyle),
            M.push(this.props.widthStyle)) : e && M.push(v && !this.props.useSmallTabs ? P.buttonInnerStyleDesktop : P.buttonInnerStyleDesktopSmall, w);
            const E = [t ? C.fontStyle.body : C.fontStyle.captionSmall, this.state.iconColorStyle || this._themeStyles.secondaryTextColorStyle];
            this.props.tabDescriptor.selected || this._useAccessibleTheme() || !this._isPresentedInDesktopLeftNav() || E.push(P.iconOpacity),
            t ? E.push(P.tabTitleIOSLandscape) : (E.push(i ? P.tabTitleAndroid : P.tabTitle),
            this.state.useSmallTitles && E.push(P.tabTitleSmall),
            e && E.push(P.tabTitleDesktop));
            const x = t || e ? y.IconSize.size20 : y.IconSize.size24;
            let D = o.createElement(g.default, {
                key: "icon",
                icon: p,
                color: this._themeColors.primaryIconColor,
                size: x,
                style: this.state.iconColorStyle || b
            });
            t && (D = o.createElement(o.View, {
                key: "icon",
                style: f.overflowVisible
            }, D, T, I));
            const L = a.default.tabAccessibilityLabel(this.props.tabDescriptor.accessibilityLabel || this.props.tabDescriptor.title, n.indexOf(this.props.tabGroup, this.props.tabDescriptor.tab), this.props.tabGroup.length, this.props.includeTabCountOnDesktop)
              , R = a.default.tabAccessibilityTraits(!!this.props.tabDescriptor.selected)
              , B = {
                style: N,
                title: this.props.tabDescriptor.title,
                accessibilityLabel: L,
                accessibilityTraits: R,
                importantForAccessibility: o.Types.ImportantForAccessibility.Yes,
                tabIndex: this.props.tabIndex,
                disabled: this.props.tabDescriptor.disabled,
                onPress: this._onPress,
                onLongPress: void 0,
                onContextMenu: this._onContextMenu,
                onHoverEnd: this._onHoverEnd,
                onHoverStart: this._onHoverStart
            }
              , O = this.props.hideLabel ? void 0 : o.createElement(o.Text, {
                key: "label",
                style: E,
                numberOfLines: 1,
                allowFontScaling: !1
            }, this.props.useSmallTabs ? " " : this.props.tabDescriptor.title)
              , F = o.createElement(o.View, {
                style: M
            }, D, O, e ? T : void 0)
              , V = t || e;
            {
                let e;
                return e = this.props.coachMarkType ? o.createElement(r.default.View, {
                    coachMarkType: this.props.coachMarkType,
                    onAnchorPress: this._onAnchorPress,
                    onPress: B.onPress,
                    anchorAccessibilityLabel: L
                }, F) : F,
                o.createElement(o.Button, Object.assign({
                    style: f.overflowVisible,
                    ref: this._onTabRef
                }, B), e, V ? void 0 : T, V ? void 0 : I)
            }
        }
        static _iconColorForColor(e) {
            switch (e) {
            case m.Color.yellow:
                return m.Color.orange
            }
            return e
        }
        _pauseWhenNotVisible() {
            return !0
        }
    }
    t.HubTab = A,
    t.default = A
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(157)
      , s = i(0)
      , r = i(351)
      , a = i(6)
      , l = i(216)
      , c = i(116)
      , d = i(230)
      , u = i(115)
      , g = i(137)
      , h = i(58)
      , p = i(143)
      , m = i(207)
      , S = i(410)
      , C = i(100)
      , y = i(1184)
      , f = i(3099)
      , _ = i(200)
      , b = i(56)
      , v = i(125)
      , T = i(80)
      , P = i(40)
      , A = i(27)
      , k = i(170)
      , I = i(5)
      , w = i(4)
      , N = i(464)
      , M = i(54)
      , E = i(192)
      , x = i(20)
      , D = i(17)
      , L = i(24)
      , R = i(37)
      , B = i(60)
      , O = i(8)
      , F = i(23)
      , V = i(11)
      , U = i(14)
      , H = i(1192)
      , W = i(574)
      , z = i(15)
      , G = i(12)
      , K = i(92)
      , j = i(29)
      , q = i(95)
      , Q = i(67)
      , X = i(1187)
      , J = i(489)
      , $ = i(45)
      , Y = i(201)
      , Z = Q.UserIconSize.Size36
      , ee = {
        [g.NoCreditPromoColor.Gray]: O.Color.gray300,
        [g.NoCreditPromoColor.Blue]: O.Color.blue,
        [g.NoCreditPromoColor.Green]: O.Color.green,
        [g.NoCreditPromoColor.Orange]: O.Color.orange
    }
      , te = {}
      , ie = I.lazyProperties({
        container: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            paddingVertical: 8,
            justifyContent: "space-between",
            overflow: "visible"
        }),
        controlsContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center",
            paddingLeft: 8,
            paddingRight: 10,
            overflow: "visible"
        }),
        leftControlsContainer: ()=>s.Styles.createViewStyle({
            marginLeft: 8,
            marginRight: 10,
            overflow: "visible"
        }),
        rightControlsContainer: ()=>s.Styles.createViewStyle({
            justifyContent: "flex-end"
        }),
        iconButtonText: ()=>s.Styles.createTextStyle({
            margin: 5,
            fontSize: V.IconSize.size20
        }),
        syncIndicatorContainer: ()=>s.Styles.createViewStyle({
            position: "absolute",
            bottom: -2,
            right: -2
        }),
        userButton: ()=>s.Styles.createViewStyle({
            position: "relative",
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center",
            overflow: "visible",
            width: Z,
            height: Z
        }),
        buttonContainer: ()=>s.Styles.createViewStyle({
            marginLeft: 5
        }),
        topTabs: ()=>I.lazyProperties({
            infoContainer: ()=>s.Styles.createViewStyle({
                alignSelf: "stretch",
                alignItems: "flex-start",
                justifyContent: "center",
                width: 180
            }),
            firstLine: ()=>s.Styles.createViewStyle({
                flexDirection: "row",
                width: 180
            }),
            balance: ()=>s.Styles.createViewStyle({
                flexDirection: "row",
                alignItems: "center",
                flexShrink: 0,
                marginLeft: 8
            }),
            balanceIcon: ()=>s.Styles.createViewStyle({
                marginRight: 4
            }),
            moodText: ()=>s.Styles.createTextStyle({
                width: 180,
                lineHeight: 20
            }),
            moodTextFixedHeight: ()=>s.Styles.createTextStyle({
                height: 20
            }),
            largeWidth: ()=>s.Styles.createViewStyle({
                width: 210
            })
        })
    });
    class ne extends G.default {
        constructor() {
            super(...arguments),
            this.getUserIconRef = ()=>this._myInfoButtonRef,
            this._renderOptionalSyncIndicator = ()=>{
                let e;
                return this.state.isSyncInProgress && (e = s.createElement(s.View, {
                    style: ie.syncIndicatorContainer
                }, s.createElement(H.default, {
                    size: V.IconSize.size16,
                    color: M.getPrimaryColorNoSubscription()
                }))),
                e
            }
            ,
            this._renderAvatar = e=>{
                const t = s.createElement(q.UserIcon, {
                    size: Z,
                    userMri: x.getSkypeMri(),
                    statusTypes: Y.myAllowedStatuses(),
                    statusBorderColor: this._themeColors.secondaryBackgroundColor,
                    onBadgePress: this._showPresenceMenu,
                    onBadgeRef: this._onBadgeRef,
                    allowHoverChevronBadge: !0
                })
                  , i = ne._getEdgeScreenReaderNotice() + w.getString("UserIcon.MyInfo") + (n.isUndefined(this.state.userStatus) ? "" : ", " + Y.userStatusLabel(this.state.userStatus, this.state.gender));
                return s.createElement(d.default.Button, {
                    anchorRef: this._onMyInfoButtonRef,
                    style: [e, ie.userButton, U.noncollapsibleView, U.pointerCursor],
                    activeOpacity: .8,
                    onPress: this._onAvatarClick,
                    onKeyPress: this._onAvatarKeyPress,
                    tabIndex: 0,
                    coachMarkType: u.CoachMarkType.Profile,
                    accessibilityLabel: i,
                    accessibilityTraits: s.Types.AccessibilityTrait.Button,
                    anchorAccessibilityLabel: i,
                    onAnchorPress: this._onAvatarClick,
                    onContextMenu: this._onContextMenu,
                    onBlur: o.BrowserEnvironment.isEdge() ? this._onMyInfoBlur : void 0
                }, t, this._renderOptionalSyncIndicator())
            }
            ,
            this._onContextMenu = e=>{
                e.stopPropagation(),
                e.preventDefault(),
                this._showPresenceMenu(void 0, e)
            }
            ,
            this._showPresenceMenu = (e,t)=>{
                this._presenceBadge && X.UserPresenceMenu.show(()=>this._presenceBadge, this._getRootViewId(), t, J.UserPresenceChangeOrigin.Avatar)
            }
            ,
            this._onOverflowButtonClick = e=>{
                this._overflowButton && f.default.showOptionsMenu(()=>this._overflowButton, this._getRootViewId(), e, this._currentTheme)
            }
            ,
            this._onAvatarClick = ()=>{
                const e = s.createElement(y, {
                    key: "DesktopMeControlPanel",
                    userMri: x.getSkypeMri(),
                    dialogId: "MeControlModal",
                    anchor: ()=>this._myInfoButtonRef
                });
                h.default.showModal(e, "MeControlModal", {
                    rootViewId: this._getRootViewId()
                })
            }
            ,
            this._onAvatarKeyPress = e=>p.default.maybeHandleKeyPress(e, ()=>{
                this._onAvatarClick()
            }
            ),
            this._onBadgeRef = e=>{
                this._presenceBadge = e || void 0
            }
            ,
            this._onOverflowButtonRef = e=>{
                this._overflowButton = e || void 0
            }
            ,
            this._onMyInfoButtonRef = e=>{
                this._myInfoButtonRef = e || void 0
            }
            ,
            this._openBalanceStatePanel = ()=>{
                D.navigateToBalanceStatePanel("DesktopNavigationHeader.fromTopLeftCorner", this._getContext())
            }
            ,
            this._onMyInfoBlur = ()=>{
                o.BrowserEnvironment.isEdge() && s.UserInterface.isNavigatingWithKeyboard() && (ne._myInfoEdgeBlurCount++,
                2 === ne._myInfoEdgeBlurCount && this.forceUpdate())
            }
        }
        _buildState(e, t) {
            let i, o, l, d, u, g;
            const h = this._getRootViewId()
              , p = $.getFullUserProfileByMri(x.getSkypeMri());
            i = p.getDisplayName();
            const m = E.getStatus();
            if (d = n.includes(Y.myAllowedStatuses(), m) ? m : c.UserStatus.Online,
            u = p.gender,
            p.mood) {
                const e = k.convertRawTextToInputEntities(p.mood)
                  , t = k.encode(e)
                  , i = K.themeStyles()
                  , n = K.themeColors()
                  , s = [F.fontStyle.caption, i.secondaryTextColorStyle, ie.topTabs.moodText, ie.topTabs.largeWidth]
                  , r = {
                    processing: {
                        emoticons: b.ProcessingLevel.Full,
                        quotes: b.ProcessingLevel.None,
                        wikiMarkup: b.ProcessingLevel.Stripped,
                        links: b.ProcessingLevel.Full,
                        atMentions: b.ProcessingLevel.Stripped
                    },
                    renderMedia: !1,
                    mediaPlaceholderIconColor: n.secondaryTextColor,
                    allowLargeEmoticons: !1,
                    numberOfLines: 1,
                    textOverrideStyle: s,
                    boldTextStyle: [F.fontStyle.captionSelected, i.secondaryTextColorStyle],
                    regularTextStyle: [F.fontStyle.caption, i.secondaryTextColorStyle],
                    linkStyle: i.linkTextColorStyle
                };
                o = p.mood,
                l = S.renderReact(C.decodeFromContent(t), r).value,
                g = N.getAccessibilityTitle(t)
            }
            const y = {
                unreadAlertsCount: r.default.getUnreadAlertsCount(),
                shouldShowUpdateBadge: _.shouldShowUpdateBadge(),
                isHeartEntryPointEnabled: a.default.getConfigSettings().brb.enableHeartEntryPoint,
                isSyncInProgress: W.default.isSyncingConversationList() || W.default.isSyncingMessages(),
                shouldShowUpdateReminder: _.shouldShowUpdateReminder(),
                responsiveWidth: L.default.getResponsiveWidth(h),
                gradientColors: M.getSubtleGradientColors(),
                shouldShowInsiderHub: a.default.getS4LUiFeatures().showInsiderHubButton,
                statusBarHeight: s.StatusBar.isOverlay() ? R.default.statusBarHeight() : 0,
                userDisplayName: i,
                moodReact: l,
                mood: o,
                userStatus: d,
                gender: u,
                moodLabel: g,
                creditEntitlement: v.getCreditEntitlement(),
                noCreditPromoEnabled: a.default.getS4LCommerceFeatures().noCreditPromo.enabled,
                noCreditPromoKind: a.default.getS4LCommerceFeatures().noCreditPromo.kind,
                noCreditPromoColor: a.default.getS4LCommerceFeatures().noCreditPromo.color,
                noCreditPromoCaption: a.default.getS4LCommerceFeatures().noCreditPromo.caption
            };
            return t && (y.skypeMri = x.getSkypeMri()),
            y
        }
        componentDidMount() {
            super.componentDidMount(),
            ne._isFirstMount && (j.setTimeout(()=>{
                this._myInfoButtonRef && this._myInfoButtonRef.requestFocus()
            }
            , 250),
            ne._isFirstMount = !1),
            m.default.addWebFeebackToast({})
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i);
            const n = this._badgeCount(this.state)
              , o = this._badgeCount(t);
            if (o !== n) {
                const e = w.getString("Hub.NotificationCounterScreenReaderLabel", {
                    count: o
                });
                s.Accessibility.announceForAccessibility(e)
            }
        }
        render() {
            const e = [ie.container]
              , t = [ie.controlsContainer, ie.rightControlsContainer];
            this.state.statusBarHeight && e.push(B.paddingTopStyle(this.state.statusBarHeight + 12)),
            this.props.style && e.push(this.props.style);
            const i = this._renderLeftControls(ie.leftControlsContainer) || s.createElement(s.View, {
                style: ie.controlsContainer
            })
              , n = this._renderRightControls()
              , o = n ? s.createElement(s.View, {
                key: "rightControls",
                style: t
            }, n) : void 0
              , r = this._renderCenterControls();
            return s.createElement(s.View, {
                key: "desktopNavigation",
                style: e
            }, i, r, o)
        }
        _renderLeftControls(e) {
            return this._renderAvatar(e)
        }
        _renderCenterControls() {
            let e;
            if (this.state.moodReact && this.state.mood) {
                const t = this.state.moodLabel
                  , i = s.createElement(T.default, {
                    style: this.state.moodReact ? ie.topTabs.moodTextFixedHeight : void 0
                }, this.state.moodReact);
                e = s.createElement(s.View, {
                    style: U.pointerCursor,
                    onPress: this._onAvatarClick,
                    onKeyPress: this._onAvatarKeyPress,
                    accessibilityLabel: t,
                    accessibilityTraits: s.Types.AccessibilityTrait.Button,
                    importantForAccessibility: s.Types.ImportantForAccessibility.Yes,
                    title: this.state.mood,
                    tabIndex: 0
                }, i)
            }
            const t = [U.flexOne, ie.topTabs.infoContainer, ie.topTabs.largeWidth]
              , i = [ie.topTabs.firstLine, ie.topTabs.largeWidth];
            return s.createElement(s.View, {
                key: "centerControls",
                style: t
            }, s.createElement(s.View, {
                style: i
            }, s.createElement(s.Button, {
                style: U.flexNegativeOne,
                accessibilityLabel: this.state.userDisplayName,
                onPress: this._onAvatarClick
            }, s.createElement(z.Caption, {
                style: [U.flexNegativeOne, this._themeStyles.primaryTextColorStyle],
                numberOfLines: 1,
                accessibilityHidden: !0
            }, this.state.userDisplayName)), this._renderOptionalBalanceInfo()), e)
        }
        _renderRightControls() {
            return [this._renderOverflowButton()]
        }
        _renderOptionalBalanceInfo() {
            if (void 0 === this.state.creditEntitlement)
                return null;
            let e, t, i, n;
            if (l.hasUsableCredit(this.state.creditEntitlement))
                t = l.getFormattedBalance(this.state.creditEntitlement),
                n = w.getString("BalanceStatePanel.SkypeCreditAccessibilityText", {
                    amount: t || ""
                });
            else {
                if (!this.state.noCreditPromoEnabled)
                    return null;
                switch (this.state.noCreditPromoKind === g.NoCreditPromoKind.Icon && (e = s.createElement(A.default, {
                    size: V.IconSize.size12,
                    color: ee[this.state.noCreditPromoColor],
                    icon: V.SkypeIcon.SkypeCredit,
                    style: ie.topTabs.balanceIcon
                })),
                te[this.state.noCreditPromoColor] || (te[this.state.noCreditPromoColor] = s.Styles.createTextStyle({
                    color: ee[this.state.noCreditPromoColor]
                })),
                i = te[this.state.noCreditPromoColor],
                this.state.noCreditPromoCaption) {
                case g.NoCreditPromoCaption.NoCredit:
                    t = w.getString("BalanceStatePanel.NoCreditButtonTitle"),
                    n = t;
                    break;
                case g.NoCreditPromoCaption.AddCredit:
                    t = w.getString("BalanceStatePanel.AddCreditButtonTitle"),
                    n = t;
                    break;
                case g.NoCreditPromoCaption.BuyCredit:
                    t = w.getString("BalanceStatePanel.BuyCreditButtonTitle"),
                    n = t;
                    break;
                case g.NoCreditPromoCaption.Balance:
                    t = l.getFormattedBalance(this.state.creditEntitlement),
                    n = w.getString("BalanceStatePanel.SkypeCreditAccessibilityText", {
                        amount: t || ""
                    })
                }
            }
            return s.createElement(s.Button, {
                style: ie.topTabs.balance,
                accessibilityLabel: n,
                onPress: this._openBalanceStatePanel
            }, e, s.createElement(z.Caption, {
                style: i
            }, t))
        }
        _renderOverflowButton() {
            return s.createElement(P.default, {
                ref: this._onOverflowButtonRef,
                key: "overflow",
                style: ie.buttonContainer,
                size: V.IconSize.size20,
                color: this._themeColors.headerIconColor,
                hoverColor: this._themeColors.iconHoverColor,
                icon: V.SkypeIcon.More,
                onPress: this._onOverflowButtonClick,
                title: w.getString("Global.MoreButtonTitle"),
                iconTextStyle: ie.iconButtonText,
                accessibilityLabel: w.getString("Global.MoreOptions"),
                accessibilityTraits: [s.Types.AccessibilityTrait.Button, s.Types.AccessibilityTrait.HasPopup]
            })
        }
        _badgeCount(e) {
            let t = e.unreadAlertsCount || 0;
            return (e.shouldShowUpdateBadge || e.shouldShowUpdateReminder) && (t += 1),
            t
        }
        static _getEdgeScreenReaderNotice() {
            return o.BrowserEnvironment.isEdge() && ne._myInfoEdgeBlurCount < 2 ? w.getString("Global.AccessibilitySkipLink") + " " + w.getString("Global.AccessibilityDesktopSkipLink") + " " : ""
        }
    }
    ne._isFirstMount = !0,
    ne._myInfoEdgeBlurCount = 0,
    e.exports = ne
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(6)
      , s = i(31)
      , r = i(61)
      , a = i(81)
      , l = i(2)
      , c = i(3)
      , d = i(4)
      , u = i(17)
      , g = i(55)
      , h = i(22)
      , p = i(97)
      , m = i(262)
      , S = i(165)
      , C = i(373)
      , y = i(614)
      , f = i(306)
      , _ = i(73)
      , b = i(234)
      , v = i(9)
      , T = i(388)
      , P = i(696)
      , A = "settings"
      , k = "splitview"
      , I = "apsettings"
      , w = "avsettings"
      , N = "helpandfeedback"
      , M = "reportproblem"
      , E = "rateus"
      , x = "insiderhub"
      , D = "signout"
      , L = "hotkeys";
    var R;
    !function(e) {
        e[e.MobileSettings = 0] = "MobileSettings",
        e[e.DesktopSettings = 1] = "DesktopSettings",
        e[e.DesktopRemainder = 2] = "DesktopRemainder",
        e[e.SplitView = 3] = "SplitView",
        e[e.Feedback = 4] = "Feedback",
        e[e.HelpAndAbout = 5] = "HelpAndAbout",
        e[e.SignOut = 6] = "SignOut",
        e[e.HotKeys = 7] = "HotKeys"
    }(R || (R = {}));
    class B {
        static showOptionsMenu(e, t, i, s) {
            const r = {
                anchor: e,
                useTheme: !0,
                positionPriorities: ["bottom", "right"],
                popupBeakSize: {
                    width: 0,
                    height: 0
                }
            };
            {
                const e = [{
                    key: R.DesktopSettings,
                    menuItems: this._getMenuItems(R.DesktopSettings)
                }]
                  , a = [];
                a.push.apply(a, this._getMenuItems(R.HelpAndAbout)),
                T.default.isSplitViewSupported() && a.push.apply(a, this._getMenuItems(R.SplitView)),
                o.default.getS4LUiFeatures().enableHotKeysPanel && a.push.apply(a, this._getMenuItems(R.HotKeys)),
                n.isEmpty(a) || e.push({
                    key: R.DesktopRemainder,
                    menuItems: a
                }),
                e.push({
                    key: R.SignOut,
                    menuItems: this._getMenuItems(R.SignOut),
                    menuTextStyles: b.themeStylesForTheme(s).destructiveTextColorStyle
                }),
                _.default.showGroupWithOptions({
                    id: "overflowpopup",
                    config: r,
                    getMenuGroups: ()=>e,
                    handleMenuCommand: e=>this._onHandleMenuCommand(e, t),
                    cancelButtonTitleIOS: d.getString("Global.CancelLabel"),
                    rootViewId: t,
                    invokingEvent: i
                })
            }
        }
        static dismissOptionsMenu(e) {
            _.default.dismiss("overflowpopup", e)
        }
        static _getMenuItems(e) {
            switch (e) {
            case R.MobileSettings:
                const e = [{
                    text: d.getString("DesktopProfileMenu.AppSettingsTitle"),
                    command: I
                }];
                return r.UICapabilities.avSettingsSupported() && e.push({
                    text: d.getString("DesktopProfileMenu.AudioVideoSettingsTitle"),
                    command: w
                }),
                e;
            case R.DesktopSettings:
                return [{
                    text: d.getString("UserSettingsPanel.SettingsTitle"),
                    command: A,
                    shortcut: l.KeyboardShortcut.OpenAppSettings
                }];
            case R.SplitView:
                return [{
                    text: h.default.isUsingSplitViewNoSubscription() ? d.getString("UserSettingsPanel.DisableSplitViewMode") : d.getString("UserSettingsPanel.EnableSplitViewMode"),
                    command: k,
                    disabled: s.default.CallingStore.hasConnectedCalls()
                }];
            case R.HotKeys:
                return [{
                    text: d.getString("KeyboardShortcuts.Title2"),
                    command: L,
                    shortcut: l.KeyboardShortcut.OpenKeyboardShortcuts
                }];
            case R.HelpAndAbout:
                const t = [{
                    text: d.getString("MyProfilePanel.HelpAndFeedbackButtonTitle"),
                    command: N
                }];
                return o.default.getS4LUiFeatures().showReportAProblemInDesktopOverflow && t.push({
                    text: d.getString("MyProfilePanel.ReportAProblemButtonTitle"),
                    command: M,
                    shortcut: l.KeyboardShortcut.SendFeedback
                }),
                t;
            case R.Feedback:
                const i = [{
                    text: d.getString("MyProfilePanel.HelpAndFeedbackButtonTitle"),
                    command: N
                }, {
                    text: d.getString("MyProfilePanel.ReportAProblemButtonTitle"),
                    command: M
                }, {
                    text: d.getString("MyProfilePanel.RateUsButtonTitle"),
                    command: E
                }];
                return o.default.getS4LUiFeatures().showInsiderHubButton && i.push({
                    text: d.getString("ReportAProblemDialog.InsiderHubLinkLabel"),
                    command: x
                }),
                i;
            case R.SignOut:
                return [{
                    text: d.getString("MyProfilePanel.SignOutButtonTitle"),
                    command: D
                }]
            }
            return []
        }
    }
    t.default = B,
    B._onHandleMenuCommand = (e,t)=>{
        const i = v.newCauseId();
        switch (c.log(l.LogTraceArea.Navigation, "DesktopOverflowHelper._onHandleMenuCommand causeId: " + i),
        e) {
        case I:
            u.navigateToRootDesktopSettingsGroup(g.SettingsGroup.AppSettings, {
                rootViewId: t
            }, i);
            break;
        case A:
            c.track(new S.SettingsTelemetry(l.SettingsOrigin.DesktopOverflowMenu)),
            u.navigateToDesktopSettings({
                rootViewId: t
            }, i);
            break;
        case k:
            P.default.toggleSplitView(i);
            break;
        case L:
            u.navigateToDesktopSettingsGroup(g.SettingsGroup.HotKeys, {
                rootViewId: t
            }, i);
            break;
        case w:
            s.default.CallNavigationHelper.navigateToAVRootDesktopSettings({
                rootViewId: t
            }, i);
            break;
        case N:
            c.track(new m.NavigationHelpAndFeedback(p.NavigationSettingsItem.HelpAndFeedback,p.NavigationSettingsOrigin.DesktopOverflowMenu)),
            u.navigateToRootDesktopSettingsGroup(g.SettingsGroup.HelpAndFeedback, {
                rootViewId: t
            }, i);
            break;
        case M:
            c.track(new m.NavigationHelpAndFeedback(p.NavigationSettingsItem.ReportAProblem,p.NavigationSettingsOrigin.DesktopOverflowMenu)),
            a.dismissAll(),
            C.reportProblem(!0, t);
            break;
        case E:
            c.track(new m.NavigationHelpAndFeedback(p.NavigationSettingsItem.RateUs,p.NavigationSettingsOrigin.DesktopOverflowMenu)),
            C.openFeedbackUrl(o.default.getConfigSettings().feedbackAndProblemGoParam.rating, d.getString("MyProfilePanel.RateUsButtonTitle"), t);
            break;
        case x:
            c.track(new m.NavigationHelpAndFeedback(p.NavigationSettingsItem.InsiderHub,p.NavigationSettingsOrigin.DesktopOverflowMenu));
            const e = f.addSsoFlagToUrl(o.default.getConfigSettings().feedbackAndProblemGoParam.insiderHub, !0);
            u.navigateToHelpAndFeedbackLink(e, "", d.getString("ReportAProblemDialog.InsiderHubLinkLabel"), t);
            break;
        case D:
            y.showSignOutConfirmation(l.LogoutReason.Settings, t);
            break;
        case _.SXActionMenuCancel:
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(10)
      , r = i(1175)
      , a = i(5)
      , l = i(4)
      , c = i(147)
      , d = i(179)
      , u = i(409)
      , g = i(55)
      , h = i(41)
      , p = i(8)
      , m = i(12)
      , S = a.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center",
            paddingBottom: 2,
            paddingTop: 10,
            paddingHorizontal: 3,
            flexWrap: "wrap"
        }),
        button: ()=>n.Styles.createViewStyle({
            marginHorizontal: 5,
            marginVertical: 3,
            paddingHorizontal: 2,
            alignItems: "stretch",
            flexDirection: "column",
            flex: 1
        })
    });
    class C extends m.default {
        constructor() {
            super(...arguments),
            this._onCreateMeetNow = ()=>{
                const e = this.props.selectedHubTab === g.HubTab.Calls ? d.MeetNowOrigin.CallsHubDesktop : d.MeetNowOrigin.RecentChatsHubDesktop;
                c.MeetNowHelpers.showNewMeetNow(e)
            }
        }
        _buildState(e, t) {
            const {enableMeetNowJoinFlow: i, enableNewMeetNowName: n} = o.default.getS4LCMCFeatures();
            return {
                enableNewMeetNowName: n,
                enableMeetNowJoinFlow: i
            }
        }
        _renderMeetNowButton() {
            if (!this._isMeetNowButtonVisible())
                return;
            if (this.state.enableMeetNowJoinFlow) {
                const e = this.props.selectedHubTab === g.HubTab.Calls ? g.HubTab.MeetNowCalls : g.HubTab.MeetNowChats;
                return n.createElement(r.default, {
                    hubTab: e,
                    iconSize: 17,
                    style: S.button,
                    buttonType: r.DesktopNewActionPickerType.TextButtonWithBorderAndIcon,
                    showGroupedActions: !0
                })
            }
            let e, t;
            this._useAccessibleTheme() ? (e = s.SXButtonStyle.ThemeFill,
            t = p.Color.transparent) : this._useDarkTheme() ? (e = s.SXButtonStyle.DarkFill,
            t = p.Color.gray300Overlay10) : (e = s.SXButtonStyle.LightFill,
            t = p.Color.gray100);
            const i = this.state.enableNewMeetNowName ? "MeetNow.NewMeeting" : "MeetNow.FeatureName";
            return n.createElement(h, {
                accessibilityLabel: l.getString(i),
                icon: u.default.getMeetNowIcon(),
                title: l.getString(i),
                style: S.button,
                iconSize: 17,
                buttonStyle: e,
                buttonSize: s.SXButtonSize.Small,
                minHeight: 32,
                addBorderColor: t,
                onPress: this._onCreateMeetNow
            })
        }
        _isMeetNowButtonVisible() {
            return this.props.selectedHubTab === g.HubTab.Recents || this.props.selectedHubTab === g.HubTab.Calls
        }
        render() {
            return n.createElement(n.View, {
                style: S.container
            }, this._renderMeetNowButton(), n.createElement(r.default, {
                hubTab: this.props.selectedHubTab,
                iconSize: 17,
                style: S.button,
                buttonType: r.DesktopNewActionPickerType.TextButtonWithBorderAndIcon,
                showGroupedActions: !0
            }))
        }
    }
    t.default = C
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(36)
      , s = i(166)
      , r = i(0)
      , a = i(63)
      , l = i(3102)
      , c = i(3106)
      , d = i(3118)
      , u = i(422)
      , g = i(1823)
      , h = i(351)
      , p = i(6)
      , m = i(10)
      , S = i(30)
      , C = i(419)
      , y = i(200)
      , f = i(3119)
      , _ = i(1068)
      , b = i(1153)
      , v = i(2)
      , T = i(110)
      , P = i(3)
      , A = i(118)
      , k = i(5)
      , I = i(4)
      , w = i(54)
      , N = i(731)
      , M = i(731)
      , E = i(416)
      , x = i(353)
      , D = i(22)
      , L = i(455)
      , R = i(321)
      , B = i(24)
      , O = i(37)
      , F = i(66)
      , V = i(8)
      , U = i(14)
      , H = i(15)
      , W = i(12)
      , z = i(253)
      , G = i(67)
      , K = k.lazyProperties({
        panel: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        emptyStateContainer: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            paddingHorizontal: 40
        }),
        emptyStateImageV3: ()=>r.Styles.createImageStyle({
            height: 130,
            width: 130,
            alignSelf: "center"
        }),
        emptyStateMessage: ()=>r.Styles.createTextStyle({
            textAlign: "center"
        }),
        activityIndicatorContainer: ()=>r.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center"
        }),
        itemDividerComposite: ()=>r.Styles.createViewStyle({
            height: 1,
            marginLeft: 68
        }),
        itemDividerStackNav: ()=>r.Styles.createViewStyle({
            height: 1,
            marginLeft: 93
        })
    });
    class j extends W.default {
        constructor() {
            super(...arguments),
            this._currentScrollTop = 0,
            this._haveAlertsBeenTracked = !1,
            this.handleFocusEvent = e=>(P.log(v.LogTraceArea.GenericUnsafe, "AlertsPanel.handleFocusEvent"),
            !(e !== T.FocusEvent.Notifications || !this._vlvRef) && (this._vlvRef.scrollToTop(!1),
            this._vlvRef.focus(!0),
            !0)),
            this._getEmptyStateImageInfo = ()=>this.state.isLandscape ? void 0 : {
                imageStyle: K.emptyStateImageV3,
                imageSource: a.Collection.ONBOARDING_NOTIFICATIONS_EMPTYSTATE_V3
            },
            this._onLayoutVlvContainer = e=>{
                this.isComponentMounted() && (this.state.listItemContainerHeight === e.height && this.state.listItemContainerWidth === e.width || this.setState({
                    listItemContainerHeight: e.height,
                    listItemContainerScreenAvailableHeight: j._getItemContainerHeightDisregardingKeyboard(e.height, this.state),
                    listItemContainerWidth: e.width
                }))
            }
            ,
            this._renderItem = (e,t)=>{
                switch (e.template) {
                case "alp_alert":
                    const t = this.state.alerts[e.key];
                    let i;
                    return this._isPresentedInDesktopLeftNav() || t.alertType === u.AlertType.NotificationPermission || (i = this._renderOptionalDivider()),
                    n.compact([r.createElement(l, {
                        alert: t,
                        key: t.guid,
                        height: e.height,
                        onAlertCardPress: this._onPressAlertCard,
                        requireDoubleClick: this.props.requireDoubleClick,
                        color: e.color,
                        item: e,
                        rowSize: this.state.rowSize
                    }), i]);
                case "alp_update":
                    return r.createElement(f, {
                        key: e.key,
                        rowSize: this.state.rowSize
                    });
                case "alp_spacer":
                    return r.createElement(r.View, {
                        key: e.key
                    });
                case "native_ad":
                    const o = e;
                    let s;
                    return s = o.adsType === C.AdsType.ListItemNarrow ? r.createElement(c.default, {
                        key: o.key,
                        adsGuid: o.adsGuid,
                        adGuid: o.adGuid,
                        dimensions: o.dimensions,
                        placementId: o.placementId,
                        canHide: o.canHide,
                        provider: o.provider
                    }) : r.createElement(d.default, {
                        key: o.key,
                        adsGuid: o.adsGuid,
                        adGuid: o.adGuid,
                        dimensions: o.dimensions,
                        placementId: o.placementId,
                        canHide: o.canHide,
                        provider: o.provider
                    }),
                    n.compact([s, this._renderOptionalDivider()]);
                default:
                    return []
                }
            }
            ,
            this._onScroll = (e,t)=>{
                this.props.onScroll && this.props.onScroll(e, this._currentScrollTop),
                this._currentScrollTop = e
            }
            ,
            this._onPressAlertCard = e=>{
                this.props.onPressAlertCard && this.props.onPressAlertCard(e)
            }
            ,
            this._onVLVRef = e=>{
                this._vlvRef = e || void 0
            }
        }
        _buildState(e, t) {
            const i = p.default.getAdsFeatures()
              , s = i.placementSettings.alertsPanel
              , a = h.default.getRecentAlerts(e.filter)
              , l = {};
            if (!h.default.isLoadingAlertsFromDb() && !this._haveAlertsBeenTracked) {
                const e = S.default.getJoinedDisplayableRecentConversationsSorted().length
                  , t = this._setupAlertTypesInfo(a);
                P.track(new g.AlertsPanelOpened(t,e)),
                this._haveAlertsBeenTracked = !0
            }
            n.each(a, e=>{
                l["n_" + e.guid] = e
            }
            );
            const c = this._getRootViewId()
              , d = D.default.isUsingStackNavigationContext()
              , u = {
                alerts: l,
                isLoadingAlertsFromDb: h.default.isLoadingAlertsFromDb(),
                isUsingStackNavigationContext: d,
                safeAreaHorizontalInsets: O.default.horizontalInsets(m.HorizontalInsetDefault),
                isLandscape: B.default.getDeviceOrientation(c) === o.DeviceOrientation.Landscape && !this._getContext().isPresentedInDesktopSubview,
                rowSize: this._isPresentedInDesktopLeftNav() ? R.default.nonRecentRowSizeAndChanges() : void 0,
                keyboardHeight: A.getUpdateInfo().height
            }
              , f = j._calculateAlertCardHeight(d)
              , b = w.getPrimaryColor();
            u.itemList = n.map(u.alerts, e=>({
                key: "n_" + e.guid,
                height: f,
                template: "alp_alert",
                color: b,
                measureHeight: !0,
                accessibilityTrait: r.Types.AccessibilityTrait.Button
            })),
            y.getUpdateStatus() === _.UpdateDownloaded && (u.itemList = [{
                key: "update_notification",
                height: f,
                template: "alp_update",
                measureHeight: !0,
                accessibilityTrait: r.Types.AccessibilityTrait.Button
            }, ...u.itemList]);
            const v = (i.naExperimentEnabled || i.enabled) && (s.adsType === C.AdsType.ListItem || s.adsType === C.AdsType.ListItemNarrow) && u.itemList.length >= s.minRequiredAdjacentItems ? M.default.getAdsState(s.placementIds[0], {
                refreshIntervalInMinutes: s.refreshIntervalInMinutes,
                isAdMediaClickable: s.isAdMediaClickable,
                placementName: x.NativeAdPlacementName.AlertsPanel,
                provider: s.provider,
                adsType: s.adsType,
                otherProviders: s.otherProviders,
                testDevices: i.testDevices
            }) : void 0;
            return v && v.status === N.AdsStatus.Loaded && this._insertNativeAdIntoList(u, s, v, f),
            u
        }
        scrollToTop() {
            this._vlvRef && this._vlvRef.scrollToTop()
        }
        componentDidMount() {
            super.componentDidMount(),
            h.default.maybeAddOrRemoveNotificationPermissionAlert(),
            h.default.clearAlertsPanelCount(),
            T.register(T.FocusEvent.Notifications, this)
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            n.some(this.state.alerts, e=>e.alertType === u.AlertType.Engagement) && L.default.initialize()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            T.unregister(T.FocusEvent.Notifications, this)
        }
        render() {
            const e = 0 === this.state.itemList.length;
            let t;
            if (e && this.state.isLoadingAlertsFromDb)
                t = r.createElement(r.View, {
                    style: K.activityIndicatorContainer
                }, r.createElement(F.default, {
                    size: m.SXActivityIndicatorSize.Medium,
                    tintColor: V.Color.gray400
                }));
            else if (e) {
                let e, i = this._getEmptyStateImageInfo();
                i && (e = r.createElement(r.Image, {
                    style: i.imageStyle,
                    source: i.imageSource
                })),
                t = r.createElement(r.View, {
                    style: K.emptyStateContainer
                }, e, r.createElement(b.default, {
                    headerText: I.getString("AlertsPanel.EmptyStateHeader")
                }), r.createElement(H.BodyText, {
                    style: K.emptyStateMessage,
                    textThemeColor: H.TextThemeColor.Secondary
                }, I.getString("AlertsPanel.EmptyStateDescriptionAlternative")))
            } else
                t = r.createElement(s.VirtualListView, {
                    ref: this._onVLVRef,
                    itemList: this.state.itemList,
                    renderItem: this._renderItem,
                    animateChanges: !0,
                    horizontalPadding: this.state.safeAreaHorizontalInsets,
                    onScroll: this._onScroll,
                    accessibilityLabel: I.getString("AlertsPanel.NotificationsTitle")
                });
            return r.createElement(r.View, {
                style: [K.panel, U.noncollapsibleView],
                onLayout: this._onLayoutVlvContainer
            }, t)
        }
        _insertNativeAdIntoList(e, t, i, n) {
            if (!e.itemList)
                return;
            const o = this._getRootViewId()
              , s = this.state && this.state.listItemContainerScreenAvailableHeight ? this.state.listItemContainerScreenAvailableHeight : B.default.getHeight(o)
              , r = this._createNativeAdItem(e, t, i, n)
              , a = E.default.calculateNativeAdsPositionInListView({
                maxHeight: s,
                items: e.itemList,
                startPosition: 0,
                nativeAdsHeight: r.height,
                adsConfig: t
            });
            e.itemList.splice(a, 0, r)
        }
        _createNativeAdItem(e, t, i, n) {
            const o = t.placementIds[0]
              , s = this.state && this.state.listItemContainerWidth ? this.state.listItemContainerWidth : 300
              , a = this._getIconSize(!!e.isUsingStackNavigationContext)
              , l = E.default.calculateAlertCardNativeAdDimensions(!!e.isUsingStackNavigationContext, s, n, E.default.includeMediaInAdHeight(i), a, z.getIconSize(a).user, t.dynamicDimensionsSettings, i.adsType);
            return {
                key: "native_ad" + o,
                adsGuid: i.guid,
                adGuid: i.ads[0],
                height: l.totalHeight,
                dimensions: l,
                placementId: o,
                template: "native_ad",
                accessibilityTrait: r.Types.AccessibilityTrait.Group,
                accessibilityLabel: I.getString("NativeAd.AdAccessibilityLabel"),
                canHide: t.canHide,
                provider: i.provider,
                adsType: i.adsType
            }
        }
        _getIconSize(e) {
            return e ? G.AvatarIconSize.Size60 : G.AvatarIconSize.Size40
        }
        _renderOptionalDivider() {
            const e = [this.state.isUsingStackNavigationContext ? K.itemDividerStackNav : K.itemDividerComposite, this._themeStyles.dividerColorStyle];
            return r.createElement(r.View, {
                key: "itemDivider",
                style: e
            })
        }
        _setupAlertTypesInfo(e) {
            return {
                engagementsCount: n.filter(e, e=>e.alertType === u.AlertType.Engagement).length,
                quotesCount: n.filter(e, e=>e.message && e.message.isCurrentUserQuoted()).length,
                reactionsCount: n.filter(e, e=>e.alertType === u.AlertType.Reaction).length,
                mentionsCount: n.filter(e, e=>e.message && e.message.isCurrentUserMentioned()).length
            }
        }
        static _calculateAlertCardHeight(e) {
            const t = B.default.getContentSizeMultiplier()
              , i = e ? 76 : 70;
            return 20 + Math.round(i * Math.min(t, m.MaxContentSizeMultiplier)) + 2
        }
        static _getItemContainerHeightDisregardingKeyboard(e, t) {
            return t.keyboardHeight <= 0 ? e : t.listItemContainerScreenAvailableHeight ? t.listItemContainerScreenAvailableHeight : t.listItemContainerHeight ? t.listItemContainerHeight : e
        }
    }
    e.exports = j
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(117)
      , s = i(0)
      , r = i(422)
      , a = i(1823)
      , l = i(351)
      , c = i(152)
      , d = i(78)
      , u = i(153)
      , g = i(46)
      , h = i(16)
      , p = i(30)
      , m = i(71)
      , S = i(100)
      , C = i(28)
      , y = i(680)
      , f = i(1116)
      , _ = i(56)
      , b = i(202)
      , v = i(1228)
      , T = i(2)
      , P = i(111)
      , A = i(602)
      , k = i(27)
      , I = i(3)
      , w = i(5)
      , N = i(175)
      , M = i(4)
      , E = i(123)
      , x = i(706)
      , D = i(344)
      , L = i(375)
      , R = i(96)
      , B = i(113)
      , O = i(54)
      , F = i(20)
      , V = i(17)
      , U = i(22)
      , H = i(3103)
      , W = i(1229)
      , z = (i(1824),
    i(1230),
    i(522))
      , G = i(261)
      , K = i(647)
      , j = i(8)
      , q = i(18)
      , Q = i(23)
      , X = i(11)
      , J = i(49)
      , $ = i(14)
      , Y = i(59)
      , Z = i(15)
      , ee = i(12)
      , te = i(29)
      , ie = i(95)
      , ne = i(67)
      , oe = i(9);
    var se, re, ae;
    !function(e) {
        e[e.Simple = 1] = "Simple",
        e[e.SecondaryButtons = 2] = "SecondaryButtons"
    }(se || (se = {})),
    function(e) {
        e[e.Standard = 1] = "Standard",
        e[e.Simple = 2] = "Simple"
    }(re || (re = {})),
    function(e) {
        e[e.Standard = 1] = "Standard",
        e[e.WhiteOnBlue = 2] = "WhiteOnBlue"
    }(ae || (ae = {}));
    const le = B.messageTextLineHeight
      , ce = w.lazyProperties({
        cardBody: ()=>s.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignItems: "center",
            backgroundColor: j.Color.transparent
        }),
        container: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            flex: 1,
            paddingLeft: 8,
            paddingRight: 10,
            alignItems: "center"
        }),
        containerWithSimpleLayout: ()=>s.Styles.createViewStyle({
            paddingLeft: 15
        }),
        lightThemeSimpleLayoutBorder: ()=>s.Styles.createViewStyle({
            borderColor: j.Color.gray50
        }),
        darkThemeSimpleLayoutBorder: ()=>s.Styles.createViewStyle({
            borderColor: j.Color.gray400
        }),
        blueBackground: ()=>s.Styles.createViewStyle({
            backgroundColor: j.Color.blue
        }),
        cardBottomBorder: ()=>s.Styles.createViewStyle({
            borderBottomWidth: 10
        }),
        cardText: ()=>s.Styles.createTextStyle({
            lineHeight: le
        }),
        cardContentContainer: ()=>s.Styles.createViewStyle({
            maxHeight: le
        }),
        userIcon: ()=>s.Styles.createViewStyle({
            marginRight: 20,
            overflow: "visible",
            paddingBottom: 5,
            paddingRight: 5
        }),
        contentDetailsContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row"
        }),
        contentDetailsText: ()=>s.Styles.createTextStyle({
            flex: 1,
            lineHeight: le
        }),
        whiteText: ()=>s.Styles.createTextStyle({
            color: j.Color.white
        }),
        timestampText: ()=>s.Styles.createTextStyle({
            flex: 0,
            marginRight: 8
        }),
        optionalSecondaryContentContainer: ()=>s.Styles.createViewStyle({
            marginLeft: 8,
            marginVertical: 4
        }),
        optionalSecondaryContentContainerEngagement: ()=>s.Styles.createViewStyle({
            alignSelf: "center"
        }),
        thumbnailContainer: ()=>s.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center"
        }),
        iconContainer: ()=>s.Styles.createViewStyle({
            alignItems: "center",
            justifyContent: "center",
            borderRadius: 30,
            height: 60,
            width: 60,
            backgroundColor: j.Color.gray300
        }),
        engagementIconStyle: ()=>s.Styles.createImageStyle({
            flex: 0,
            alignSelf: "stretch",
            width: ne.UserIconSize.Size60,
            height: ne.UserIconSize.Size60,
            justifyContent: "center",
            alignItems: "center",
            borderRadius: 10
        }),
        engagementIconStyleDesktop: ()=>s.Styles.createImageStyle({
            width: ne.UserIconSize.Size40,
            height: ne.UserIconSize.Size40
        }),
        engagementIconStyleCompact: ()=>s.Styles.createImageStyle({
            width: 24,
            height: 24
        }),
        alertIconContainer: ()=>s.Styles.createViewStyle({
            position: "absolute",
            bottom: 2,
            right: 2
        }),
        alertMentionQuoteIconContainer: ()=>s.Styles.createViewStyle({
            backgroundColor: j.Color.gray300,
            width: 24,
            height: 24,
            borderRadius: 12,
            bottom: 0,
            right: 0,
            justifyContent: "center"
        }),
        alertMentionQuoteIcon: ()=>s.Styles.createTextStyle({
            color: j.Color.white,
            textAlign: "center",
            textAlignVertical: "center",
            fontSize: Q.controlFontSize.bodyBigDeprecated,
            lineHeight: Q.controlFontSize.bodyBigDeprecated
        }),
        alertMentionIcon: ()=>s.Styles.createTextStyle({
            top: -1
        }),
        userIconBadge: ()=>s.Styles.createViewStyle({
            borderRadius: 15
        }),
        userIconBorder: ()=>s.Styles.createViewStyle({
            padding: 2
        }),
        compactUserIconContainer: ()=>s.Styles.createViewStyle({
            height: 24,
            width: 24,
            alignItems: "center",
            justifyContent: "center",
            overflow: "visible",
            marginRight: 8
        }),
        compositeNav: ()=>w.lazyProperties({
            container: ()=>s.Styles.createViewStyle({
                paddingLeft: 10,
                paddingRight: 15,
                paddingVertical: 10,
                alignItems: "flex-start"
            }),
            userIcon: ()=>s.Styles.createViewStyle({
                marginRight: 10,
                marginTop: 5
            }),
            iconContainer: ()=>s.Styles.createViewStyle({
                borderRadius: 20,
                height: 40,
                width: 40
            }),
            alertIconContainer: ()=>s.Styles.createViewStyle({
                bottom: 0,
                right: 0
            }),
            alertMentionQuoteIconContainer: ()=>s.Styles.createViewStyle({
                bottom: -2,
                right: -2
            })
        }),
        experimentalNav: ()=>w.lazyProperties({
            userIcon: ()=>s.Styles.createViewStyle({
                marginRight: 8,
                marginTop: 5
            }),
            container: ()=>s.Styles.createViewStyle({
                paddingLeft: 10,
                paddingRight: 10,
                paddingVertical: 10,
                alignItems: "flex-start"
            }),
            optionalSecondaryContentContainer: ()=>s.Styles.createViewStyle({
                marginLeft: 2,
                marginVertical: 4
            })
        }),
        ios: ()=>w.lazyProperties({
            alertMentionIcon: ()=>s.Styles.createTextStyle({
                top: -2
            })
        }),
        osx: ()=>w.lazyProperties({
            alertMentionIcon: ()=>s.Styles.createTextStyle({
                top: 0
            })
        }),
        unreadBadge: ()=>w.lazyProperties({
            circle: ()=>s.Styles.createViewStyle({
                marginTop: 1,
                width: 8,
                height: 8,
                borderRadius: 4
            }),
            badgeContainer: ()=>s.Styles.createViewStyle({
                alignItems: "center",
                justifyContent: "center"
            })
        })
    });
    class de extends ee.default {
        constructor() {
            super(...arguments),
            this._clickDelegate = new f,
            this._hoverStart = ()=>{
                this.setState({
                    isHovering: !0
                })
            }
            ,
            this._hoverEnd = ()=>{
                this.setState({
                    isHovering: !1
                })
            }
            ,
            this._onPress = e=>{
                this._clickDelegate.onClick(e, this._onCompletePress)
            }
            ,
            this._onCompletePress = e=>{
                const t = oe.newCauseId();
                if (I.log(T.LogTraceArea.Navigation, "AlertCard._onPress, causeId: " + t),
                I.track(new a.AlertClicked(this._getAlertTypeForTelemetryEvent())),
                this.state.isReaction && this.state.messageToDisplay) {
                    const e = p.default.getConversation(this.state.messageToDisplay.conversationId);
                    e && !e.isHighlightsThread() && I.track(new z.ReactionsSummaryViewed(this.state.messageToDisplay))
                }
                if (this._markRead(),
                this.state.messageToDisplay) {
                    const e = p.default.getConversation(this.state.messageToDisplay.conversationId);
                    e && e.isReactionsThread() ? D.default.showWithMessageConfig({
                        initialMessage: this.state.messageToDisplay,
                        origin: T.NavigationMediaViewerOrigin.Unknown,
                        rootViewId: this._getRootViewId()
                    }) : this.props.alert.scheduledCallInfo && this.props.alert.scheduledCallInfo.type === K.ScheduleCallAlertTypes.Canceled || V.navigateToMessage(this.state.messageToDisplay, {
                        shouldResetNavStack: !1,
                        shouldFlattenNavOnInteraction: !0,
                        causeId: t,
                        origin: T.NavigationConversationOrigin.AlertsPanel
                    }, this._getContext())
                }
                e.stopPropagation(),
                this.props.onAlertCardPress && this.props.onAlertCardPress(this.props.alert)
            }
        }
        _buildState(e, t) {
            const i = e.alert.alertType === r.AlertType.Reaction || e.alert.alertType === r.AlertType.AdditionalReaction;
            let n, o, s, a, l, c, u = !1, m = "", f = e.alert.message, _ = !1;
            if (f) {
                const t = p.default.getConversation(f.conversationId);
                n = f.creator;
                const s = S.decode(f)
                  , l = s.getFirstUriObjectChild(R.UriObjectNode);
                if (l && (a = l.getNameForUI()),
                u = s.hasOnlyQuotedContent(),
                i) {
                    c = y.getReactionAlertAccessibilityLabel(f);
                    const e = d.chain(f.getEmotionAnnotations(), d.filter(e=>e.key !== g.MessageAnnotations.ViewCount && e.key !== g.MessageAnnotations.ReactionsConsumptionHorizon), d.map(e=>e.users), d.flatten());
                    o = y.getReactionsDisplayInfo(e, {
                        objectType: g.getMessageTypeGroup(f),
                        isQuoteOnly: u,
                        isPushNotification: !1
                    }, s),
                    o.mostRecentMri && (n = o.mostRecentMri)
                } else
                    e.alert.alertType === r.AlertType.HighPriorityMessage ? o = y.getMessageDisplayInfo(f, u) : e.alert.alertType === r.AlertType.ScheduledCall && e.alert.scheduledCallInfo && !h.isThread(e.alert.scheduledCallInfo.initiator) && (o = y.getScheduledCallDisplayInfo(e.alert.scheduledCallInfo),
                    n = e.alert.scheduledCallInfo.initiator);
                m = t && !t.isOneOnOne() && !t.isHighlightsThread() && !t.isReactionsThread() && C.getDisplayName(t.id) || ""
            } else if (e.alert.alertType === r.AlertType.Engagement) {
                o = void 0;
                const t = e.alert.popCardInfo;
                s = {
                    title: t && t.title,
                    text: t && t.subtitle,
                    placeholders: t && t.placeholders,
                    showOnlyTitle: t && t.showOnlyTitle
                }
            } else if (e.alert.alertType === r.AlertType.Notice) {
                o = void 0;
                const t = e.alert.noticeMessageInfo;
                s = {
                    title: t && t.title,
                    text: t && t.text,
                    placeholders: t && t.placeholders,
                    showOnlyTitle: t && t.showOnlyTitle
                }
            } else if (e.alert.alertType === r.AlertType.NotificationPermission)
                o = void 0,
                l = M.getString("NotificationsPrompt.ShortText"),
                _ = !0;
            else if (e.alert.alertType === r.AlertType.MissedCallbackReminder && e.alert.missedCallbackReminderCalleeMri) {
                o = void 0;
                const t = C.getDisplayName(e.alert.missedCallbackReminderCalleeMri);
                l = M.getString("Notifications.CallUserAgain", {
                    user: t || ""
                })
            }
            const b = {
                isUsingStackNav: U.default.isUsingStackNavigationContext(),
                messageToDisplay: f,
                description: "",
                descriptionAccessibilityLabel: c,
                posterMri: n,
                isReaction: i,
                notificationDisplayInfo: o,
                engagementDisplayInfo: s,
                formattedTimestamp: this._getElapsedTimeAndUpdateTimer(e.alert.alertTime),
                hideTimestamp: _,
                displayFilenameForIcon: a,
                isQuoteOnlyMessage: u,
                quoteSymbol: J.getQuoteSymbol(),
                convDisplayName: m,
                headerTextOverride: l,
                colors: O.getGradientColors(),
                useTabletUI: Y.useTabletUI()
            };
            t && (b.isHovering = !1);
            const v = this.props;
            return (t || v.requireDoubleClick !== e.requireDoubleClick) && this._clickDelegate.enableDoubleClick(!!e.requireDoubleClick),
            b
        }
        _renderDisplayParts() {
            let e, t, i, n = se.Simple, a = [], l = [], d = re.Standard, u = ae.Standard, p = !1;
            const m = this._useCompactLayout();
            let S;
            S = m ? ne.UserIconSize.Size24 : this.state.isUsingStackNav ? ne.UserIconSize.Size60 : ne.UserIconSize.Size40;
            let C = s.createElement(ie.UserIcon, {
                size: S,
                userMri: this.state.posterMri,
                importantForAccessibility: s.Types.ImportantForAccessibility.NoHideDescendants
            });
            if (this.props.alert.isRead || (t = s.createElement(s.View, {
                style: ce.unreadBadge.badgeContainer,
                accessibilityLabel: M.getString("AlertCard.UnreadAccessibilityLabel")
            }, s.createElement(o.GradientView, {
                style: ce.unreadBadge.circle,
                direction: o.GradientDirection.BOTTOM_RIGHT,
                colors: this.state.colors
            }))),
            this.state.messageToDisplay) {
                this.props.alert.alertType !== r.AlertType.Reaction && this.props.alert.alertType !== r.AlertType.AdditionalReaction || (i = this.state.descriptionAccessibilityLabel,
                this.props.alert.isRead || (i += ", " + M.getString("AlertCard.UnreadAccessibilityLabel")));
                const t = g.getMessageTypeGroup(this.state.messageToDisplay)
                  , n = [ce.alertIconContainer, ce.userIconBadge]
                  , o = [ce.userIconBorder, ce.userIconBadge];
                let a;
                switch (this.state.isUsingStackNav ? n.push(this._themeStyles.primaryBackgroundColorStyle) : (n.push(ce.compositeNav.alertIconContainer),
                n.push(this._themeStyles.popoverBackgroundColorStyle)),
                this.state.isHovering && o.push(this._themeStyles.rowHoverViewStyle),
                m || (a = s.createElement(s.View, {
                    style: n
                }, s.createElement(s.View, {
                    style: o
                }, s.createElement(ie.UserIcon, {
                    size: ne.UserIconSize.Size24,
                    userMri: this.state.posterMri,
                    importantForAccessibility: s.Types.ImportantForAccessibility.NoHideDescendants
                })))),
                t) {
                case g.MessageTypeGroups.Video:
                case g.MessageTypeGroups.Picture:
                    const i = this._renderMediaThumbnail();
                    i && (e = a,
                    C = i);
                    break;
                case g.MessageTypeGroups.Audio:
                case g.MessageTypeGroups.Location:
                case g.MessageTypeGroups.SwiftCard:
                    const n = this._renderIconThumbnail(t);
                    n && (e = a,
                    C = n);
                    break;
                case g.MessageTypeGroups.UriFile:
                    const o = this._renderFileThumbnail();
                    o && (e = a,
                    C = o);
                    break;
                case g.MessageTypeGroups.Text:
                    if (!this.state.isQuoteOnlyMessage) {
                        l = this._renderMessageParts() || []
                    }
                }
            } else if (this.props.alert.alertType === r.AlertType.OnboardingX || this.props.alert.isEngagementAlert()) {
                let e;
                this.props.alert.alertType === r.AlertType.Notice && this.props.alert.noticeMessageInfo && (t = H.default.renderNoticeButton(this.props.alert.noticeMessageInfo, this._getRootViewId()),
                n = t ? se.SecondaryButtons : se.Simple),
                this.props.alert.isEngagementAlert() && this.state.engagementDisplayInfo ? e = v.default.getFormattedAlertContent(this.state.engagementDisplayInfo, !0, n === se.SecondaryButtons) : (e = "\n" + this.state.description,
                i = M.getString("PopCards.NotificationHeader") + ", " + (this.state.descriptionAccessibilityLabel || "")),
                a.push(s.createElement(Z.BodyText, {
                    key: "messagePrefix",
                    style: ce.cardText
                }, e))
            } else
                this.props.alert.alertType === r.AlertType.NotificationPermission && (t = this._renderNotificationPermissionActionButton(),
                n = se.SecondaryButtons);
            const y = [ce.engagementIconStyle];
            switch (m ? y.push(ce.engagementIconStyleCompact) : this.state.isUsingStackNav || y.push(ce.engagementIconStyleDesktop),
            this.props.alert.alertType) {
            case r.AlertType.Notice:
                const t = this.props.alert.noticeMessageInfo;
                switch (t.contentType) {
                case W.NoticeMessageContentType.Notice:
                    C = s.createElement(P, {
                        origin: "NoticeAlertIcon",
                        style: y,
                        containerStyle: y,
                        resizeMode: "cover",
                        source: t.iconUrl
                    });
                    break;
                case W.NoticeMessageContentType.NoticeWithAvatar:
                    if (t.skypeId) {
                        const e = h.skypeIdToMri(h.asSkypeId(t.skypeId));
                        C = s.createElement(ie.UserIcon, {
                            size: S,
                            statusTypes: t.showStatusIndicator ? b.default.getAllowedUserStatuses() : [],
                            userMri: e,
                            importantForAccessibility: s.Types.ImportantForAccessibility.NoHideDescendants
                        })
                    }
                }
                break;
            case r.AlertType.Engagement:
                this.props.alert.popCardInfo && this.props.alert.popCardInfo.iconUrl && (C = s.createElement(P, {
                    origin: "EngagementAlertIcon",
                    style: y,
                    containerStyle: y,
                    resizeMode: "cover",
                    source: this.props.alert.popCardInfo.iconUrl
                }));
                break;
            case r.AlertType.NotificationPermission:
                C = void 0,
                d = re.Simple,
                u = ae.WhiteOnBlue,
                p = !1;
                break;
            case r.AlertType.ScheduledCall:
                d = re.Standard,
                e = this._renderTextBadge(X.SkypeIcon.Schedule, [J.iconStyle(X.IconSize.size16)]);
                break;
            case r.AlertType.MissedCallbackReminder:
                this.props.alert.missedCallbackReminderCalleeMri && (e = this._renderTextBadge(X.SkypeIcon.CallStart, [J.iconStyle(X.IconSize.size16)]),
                C = s.createElement(ie.UserIcon, {
                    size: S,
                    userMri: this.props.alert.missedCallbackReminderCalleeMri
                }))
            }
            if (this.props.alert.alertType === r.AlertType.HighPriorityMessage) {
                let t, i = [];
                this.state.messageToDisplay && (this.state.messageToDisplay.isCurrentUserQuoted() ? (i.push(J.iconStyle(X.IconSize.size16)),
                t = this.state.quoteSymbol) : this.state.messageToDisplay.isCurrentUserMentioned() && (q.getPlatformType() === T.PlatformType.iOS && i.push(ce.ios.alertMentionIcon),
                q.getPlatformType() === T.PlatformType.OSX ? i.push(ce.osx.alertMentionIcon) : i.push(ce.alertMentionIcon),
                t = "@")),
                e = this._renderTextBadge(t, i)
            } else if (this.props.alert.alertType === r.AlertType.Reaction && !e) {
                const t = this.props.alert.message && this.props.alert.message.getReactions();
                if (t && t.length && (1 === t.length || m)) {
                    const i = s.createElement(c.AnimatedEmoticon, {
                        size: c.Size.Small,
                        innerText: t[0].key,
                        emoticonName: t[0].key,
                        isStatic: !0
                    });
                    if (m)
                        e = i;
                    else {
                        const t = [ce.alertIconContainer];
                        this.state.isUsingStackNav || t.push(ce.compositeNav.alertIconContainer),
                        e = s.createElement(s.View, {
                            style: t
                        }, i)
                    }
                }
            }
            return {
                layout: n,
                mainContentPartLayout: d,
                icon: m && e ? void 0 : C,
                secondaryContent: t,
                extraHeaderText: a,
                messageContent: l,
                iconBadge: e,
                mainAccessibilityLabel: i,
                colorVariant: u,
                showBottomDelimiter: p
            }
        }
        _renderTextBadge(e, t) {
            let i = [ce.alertMentionQuoteIcon];
            t && (i = i.concat(t));
            const n = [ce.alertIconContainer, ce.alertMentionQuoteIconContainer];
            if (this.state.isUsingStackNav || (this._useCompactLayout() ? n.push(ce.compositeNav.alertIconContainer) : n.push(ce.compositeNav.alertMentionQuoteIconContainer)),
            !this.props.alert.isRead && this.props.color) {
                const e = s.Styles.createViewStyle({
                    backgroundColor: this.props.color
                }, !1);
                n.push(e)
            }
            return s.createElement(s.View, {
                style: n
            }, s.createElement(s.Text, {
                style: i,
                allowFontScaling: !1,
                importantForAccessibility: s.Types.ImportantForAccessibility.No
            }, e))
        }
        render() {
            const e = this._isPresentedInDesktopLeftNav()
              , t = this._renderDisplayParts()
              , i = [ce.cardBody];
            let n = [ce.contentDetailsText];
            const o = [ce.container, $.noncollapsibleView];
            let r, a, l, c;
            if (t.mainContentPartLayout === re.Simple && (o.push(ce.containerWithSimpleLayout),
            t.showBottomDelimiter && (i.push(ce.cardBottomBorder),
            i.push(this._useDarkTheme() ? ce.darkThemeSimpleLayoutBorder : ce.lightThemeSimpleLayoutBorder))),
            this.state.isUsingStackNav || (o.push(e ? ce.experimentalNav.container : ce.compositeNav.container),
            this._isEngagementAlert() && o.push($.alignItemsCenter)),
            t.colorVariant === ae.WhiteOnBlue && (i.push(ce.blueBackground),
            n.push(ce.whiteText)),
            t.icon) {
                const i = [ce.userIcon];
                this.state.isUsingStackNav || i.push(e ? ce.experimentalNav.userIcon : ce.compositeNav.userIcon),
                r = s.createElement(s.View, {
                    style: i
                }, t.icon, t.iconBadge)
            } else
                t.iconBadge ? r = s.createElement(s.View, {
                    style: ce.compactUserIconContainer
                }, t.iconBadge) : this._useCompactLayout() && (r = s.createElement(s.View, {
                    style: ce.compactUserIconContainer
                }));
            this.state.hideTimestamp || (a = s.createElement(s.View, {
                accessibilityLabel: this.state.formattedTimestamp.valueAccessible
            }, s.createElement(Z.Caption, {
                style: [...n, ce.timestampText]
            }, this.state.formattedTimestamp.value))),
            t.mainContentPartLayout === re.Standard && (l = s.createElement(s.View, {
                style: ce.cardContentContainer
            }, t.messageContent),
            c = s.createElement(s.View, {
                style: ce.contentDetailsContainer
            }, a, s.createElement(Z.Caption, {
                style: n,
                numberOfLines: 1
            }, this.state.convDisplayName)));
            let d = s.createElement(s.View, {
                style: $.flexOne
            }, this._renderCardHeader(t.extraHeaderText || [], !this.props.alert.isRead, t.colorVariant), l, c);
            const u = [e ? ce.experimentalNav.optionalSecondaryContentContainer : ce.optionalSecondaryContentContainer, ce.optionalSecondaryContentContainerEngagement]
              , g = t.secondaryContent ? s.createElement(s.View, {
                style: u
            }, t.secondaryContent) : void 0;
            t.layout === se.SecondaryButtons && (void 0 !== r && (r = s.createElement(s.Button, {
                onPress: this._onPress,
                accessibilityLabel: t.mainAccessibilityLabel
            }, r)),
            d = s.createElement(s.Button, {
                onPress: this._onPress,
                style: $.flexOne,
                accessibilityTraits: s.Types.AccessibilityTrait.Text
            }, d));
            const h = this.state.isHovering ? this._getContext().isPresentedInDesktopLeftNav ? this._themeStyles.secondaryRowHoverViewStyle : this._themeStyles.rowHoverViewStyle : void 0
              , p = s.createElement(s.View, {
                style: [o, h]
            }, r, d, g);
            return t.layout === se.SecondaryButtons ? s.createElement(s.View, {
                style: i,
                underlayColor: this._themeColors.rowHighlightColor
            }, p) : s.createElement(E.default.Button, {
                style: i,
                onPress: this._onPress,
                activeOpacity: .7,
                accessibilityLabel: t.mainAccessibilityLabel,
                onHoverStart: this._hoverStart,
                onHoverEnd: this._hoverEnd
            }, p)
        }
        _renderCardHeader(e, t=!0, i=ae.Standard) {
            let o, r = i === ae.WhiteOnBlue ? ce.whiteText : this._themeStyles.primaryTextColorStyle, a = [ce.cardText, r];
            const l = this.props.rowSize === G.RowSize.ExtraCompact ? Z.BodyTextSize.SmallDeprecated : void 0;
            if (this.props.alert.isEngagementAlert() && this.state.engagementDisplayInfo)
                o = s.createElement(Z.BodyText, {
                    key: "cardHeader",
                    bold: t,
                    size: l,
                    style: a,
                    numberOfLines: 2
                }, v.default.getReplacedPlaceholders(n.toString(this.state.engagementDisplayInfo.title), this.state.engagementDisplayInfo.placeholders));
            else if (this.state.headerTextOverride)
                o = s.createElement(Z.BodyText, {
                    key: "cardHeader",
                    bold: t,
                    size: l,
                    style: a,
                    numberOfLines: 2
                }, this.state.headerTextOverride);
            else if (this.state.notificationDisplayInfo && this.state.notificationDisplayInfo.labelKey) {
                let e = 0;
                o = s.createElement(Z.BodyText, {
                    key: "cardHeader",
                    bold: t,
                    size: l,
                    style: a,
                    numberOfLines: 2,
                    forceDirection: !0
                }, M.getParts(this.state.notificationDisplayInfo.labelKey, {
                    you: s.createElement(s.Text, {
                        key: "you"
                    }, M.getString("AlertCard.YouLowerCase")),
                    all: s.createElement(s.Text, {
                        key: "all"
                    }, M.getString("AlertCard.All")),
                    user: s.createElement(s.Text, {
                        key: "cardHeaderUser"
                    }, this.state.notificationDisplayInfo.creatorDisplayName),
                    firstOtherPerson: s.createElement(s.Text, {
                        key: "firstOtherPerson"
                    }, this.state.notificationDisplayInfo.firstPersonToReact),
                    secondOtherPerson: s.createElement(s.Text, {
                        key: "secondOtherPerson"
                    }, this.state.notificationDisplayInfo.secondPersonToReact),
                    gender: N.getLocalizeParamForGender(this.state.notificationDisplayInfo.gender),
                    otherCount: this.state.notificationDisplayInfo.othersCount,
                    subject: this.state.notificationDisplayInfo.subject
                }, t=>s.createElement(s.Text, {
                    key: "dynamic" + e++
                }, t)))
            }
            return s.createElement(s.Text, {
                numberOfLines: this._isEngagementAlert() ? 0 : 2,
                forceLayoutInRTL: !0,
                forceDirection: !0
            }, n.flatten(n.compact([o, e])))
        }
        _renderMessageParts() {
            if (!this.state.messageToDisplay)
                return;
            const e = [];
            let t = [this.props.rowSize === G.RowSize.ExtraCompact ? Q.fontStyle.bodySmallDeprecated : Q.fontStyle.body, ce.cardText, this._themeStyles.primaryTextColorStyle];
            const i = {
                processing: _.ProcessingDefaults.Preview,
                renderMedia: !1,
                mediaPlaceholderIconColor: this._themeColors.primaryTextColor,
                allowLargeEmoticons: !1,
                trimToFirstLine: !0,
                forceLayoutInRTL: !0,
                numberOfLines: 1,
                textOverrideStyle: t,
                boldTextStyle: t,
                regularTextStyle: t,
                linkStyle: t,
                atMentionStyle: t,
                atMentionMeOverrideStyle: t,
                renderSimpleAtMentions: !0
            };
            return e.push(s.createElement(L, {
                key: "messageContent",
                message: this.state.messageToDisplay,
                options: i
            })),
            e
        }
        _renderFileThumbnail() {
            const e = A.FileIconHelper.getIconFromFileType(this.state.displayFilenameForIcon);
            let t = [ce.iconContainer, e.backgroundStyle]
              , i = X.IconSize.size32;
            return this.state.isUsingStackNav || (t.push(ce.compositeNav.iconContainer),
            i = X.IconSize.size24),
            s.createElement(s.View, {
                style: t
            }, s.createElement(k.default, {
                key: this.props.alert.guid,
                icon: e.icon,
                size: i,
                color: j.Color.white
            }))
        }
        _renderIconThumbnail(e) {
            let t, i = [ce.iconContainer];
            switch (this.state.isUsingStackNav || i.push(ce.compositeNav.iconContainer),
            e) {
            case g.MessageTypeGroups.Audio:
                t = X.SkypeIcon.Microphone;
                break;
            case g.MessageTypeGroups.Location:
                t = X.SkypeIcon.LocationPin;
                break;
            case g.MessageTypeGroups.SwiftCard:
                t = X.SkypeIcon.ContactCard
            }
            const n = t ? s.createElement(k.default, {
                key: this.props.alert.guid,
                icon: t,
                size: X.IconSize.size24,
                color: j.Color.white
            }) : void 0;
            return s.createElement(s.View, {
                style: i
            }, n)
        }
        _renderMediaThumbnail() {
            const e = this.state.isUsingStackNav ? 60 : 40;
            return this.state.messageToDisplay ? s.createElement(s.View, {
                style: ce.thumbnailContainer
            }, s.createElement(x.default, {
                key: this.props.alert.guid,
                message: this.state.messageToDisplay,
                height: e,
                width: e,
                showCreator: !1,
                thumbnailIconsSize: X.IconSize.size24,
                showVideoMediaTypeIcon: !0,
                borderRadius: 10
            })) : void 0
        }
        _renderNotificationPermissionActionButton() {}
        _getElapsedTimeAndUpdateTimer(e) {
            let t = Date.now() - e;
            if (t >= 36e5) {
                let t = m.getDisplayDateTimeString(e);
                return {
                    value: t,
                    valueAccessible: t
                }
            }
            {
                let e = 6e4 - Math.floor(t % 6e4);
                if (te.setTimeout(()=>{
                    this._updateTimeState()
                }
                , e),
                t >= 6e4) {
                    let e = Math.floor(t / 6e4).toString();
                    return {
                        value: M.getString("SearchResultsList.ElapsedTimeMinutes", {
                            minutes: e
                        }),
                        valueAccessible: M.getString("SearchResultsList.ElapsedTimeMinutesAccessible", {
                            minutes: e
                        })
                    }
                }
                return {
                    value: M.getString("SearchResultsList.ElapsedTimeOneMinute"),
                    valueAccessible: M.getString("SearchResultsList.ElapsedTimeOneMinuteAccessible")
                }
            }
        }
        _updateTimeState() {
            this.isComponentMounted() && this.setState({
                formattedTimestamp: this._getElapsedTimeAndUpdateTimer(this.props.alert.alertTime)
            })
        }
        _markRead() {
            this.props.alert.alertType !== r.AlertType.MissedCallbackReminder ? !this.props.alert.isRead && this.state.messageToDisplay && (this.props.alert.alertType === r.AlertType.Reaction || this.props.alert.alertType === r.AlertType.AdditionalReaction ? F.isMyMri(this.state.messageToDisplay.creator) && u.markReactionsAsRead(this.state.messageToDisplay) : this.props.alert.alertType === r.AlertType.ScheduledCall && u.markScheduledCallAsRead(this.state.messageToDisplay)) : l.default.markAsRead(this.props.alert.guid)
        }
        _getAlertTypeForTelemetryEvent() {
            let e = T.AlertTypeForTelemetry.Unknown;
            switch (this.props.alert.alertType) {
            case r.AlertType.Reaction:
            case r.AlertType.AdditionalReaction:
                e = T.AlertTypeForTelemetry.Reaction;
                break;
            case r.AlertType.OnboardingX:
                e = T.AlertTypeForTelemetry.Onboarding;
                break;
            case r.AlertType.Engagement:
                e = T.AlertTypeForTelemetry.Engagement;
                break;
            case r.AlertType.HighPriorityMessage:
                this.state.messageToDisplay && this.state.messageToDisplay.isCurrentUserQuoted() ? e = T.AlertTypeForTelemetry.Quote : this.state.messageToDisplay && this.state.messageToDisplay.isCurrentUserMentioned() && (e = T.AlertTypeForTelemetry.Mention);
                break;
            case r.AlertType.Notice:
                e = T.AlertTypeForTelemetry.Notice;
                break;
            case r.AlertType.ScheduledCall:
                e = T.AlertTypeForTelemetry.ScheduledCall
            }
            return e
        }
        _isEngagementAlert() {
            return this.props.alert.alertType === r.AlertType.Engagement || this.props.alert.alertType === r.AlertType.Notice
        }
        _useCompactLayout() {
            return this.props.rowSize === G.RowSize.Compact || this.props.rowSize === G.RowSize.ExtraCompact
        }
    }
    e.exports = de
}
, , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(200)
      , s = i(859)
      , r = i(2)
      , a = i(5)
      , l = i(4)
      , c = i(123)
      , d = i(261)
      , u = i(515)
      , g = i(8)
      , h = i(18)
      , p = i(23)
      , m = i(11)
      , S = i(15)
      , C = i(12)
      , y = m.IconSize.size40
      , f = m.IconSize.size24
      , _ = a.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignItems: "center",
            paddingVertical: 10,
            paddingHorizontal: 15
        }),
        containerCompact: ()=>n.Styles.createViewStyle({
            paddingHorizontal: 10
        }),
        text: ()=>n.Styles.createTextStyle({
            flex: 1,
            marginLeft: 15,
            marginRight: 10,
            lineHeight: 22
        }),
        textCompact: ()=>n.Styles.createTextStyle({
            marginLeft: 8
        }),
        updateButton: ()=>n.Styles.createViewStyle({
            backgroundColor: g.Color.green,
            height: 30,
            borderRadius: 15,
            paddingHorizontal: 15,
            justifyContent: "center",
            alignItems: "center"
        }),
        mandatoryUpdateButton: ()=>n.Styles.createViewStyle({
            backgroundColor: g.Color.red
        }),
        updateButtonText: ()=>n.Styles.createTextStyle({
            color: g.Color.white,
            fontSize: p.controlFontSize.smallButton
        })
    });
    class b extends C.default {
        constructor() {
            super(...arguments),
            this._onHoverStart = ()=>{
                this.isComponentMounted() && this.setState({
                    isHovering: !0
                })
            }
            ,
            this._onHoverEnd = ()=>{
                this.isComponentMounted() && this.setState({
                    isHovering: !1
                })
            }
            ,
            this._onPress = ()=>{
                s.tryToQuitAndInstallUpdate(this._getRootViewId())
            }
        }
        _buildState(e, t) {
            return {
                isRedBadge: o.shouldShowUpdateReminder()
            }
        }
        render() {
            const e = this.props.rowSize === d.RowSize.ExtraCompact || this.props.rowSize === d.RowSize.Compact
              , t = [_.container, this._themeStyles.updateCard]
              , i = [_.text];
            e && (t.push(_.containerCompact),
            i.push(_.textCompact)),
            this.state.isRedBadge && t.push(this._themeStyles.mandatoryUpdateCard),
            this.state.isHovering && (this.state.isRedBadge ? t.push(this._themeStyles.mandatoryUpdateCardHover) : t.push(this._themeStyles.updateCardHover));
            const o = [_.updateButton];
            return this.state.isRedBadge && o.push(_.mandatoryUpdateButton),
            n.createElement(c.default.Button, {
                style: t,
                onHoverStart: this._onHoverStart,
                onHoverEnd: this._onHoverEnd,
                onPress: this._onPress
            }, n.createElement(u.SkypeLogo, {
                size: e ? f : y
            }), n.createElement(S.BodyText, {
                style: i,
                size: e ? S.BodyTextSize.SmallDeprecated : void 0
            }, this._getUpdateMessage()), n.createElement(n.View, {
                style: o
            }, n.createElement(n.Text, {
                style: _.updateButtonText
            }, this._getUpdateButton())))
        }
        _getUpdateMessage() {
            return this.state.isRedBadge ? l.getString("ElectronUpdateCard.ElectronUpdateMandatory") : h.getPlatformType() === r.PlatformType.Linux ? l.getString("ElectronUpdateCard.ElectronUpdateLinux") : l.getString("ElectronUpdateCard.ElectronUpdate")
        }
        _getUpdateButton() {
            return h.getPlatformType() === r.PlatformType.Linux ? l.getString("ElectronUpdateCard.UpdateButtonLinux") : l.getString("ElectronUpdateCard.UpdateButton")
        }
    }
    e.exports = b
}
, , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(86)
      , s = i(0)
      , r = i(13)
      , a = i(10)
      , l = i(43)
      , c = i(601)
      , d = i(27)
      , u = i(5)
      , g = i(134)
      , h = i(24)
      , p = i(251)
      , m = i(8)
      , S = i(11)
      , C = i(14)
      , y = i(15);
    var f, _;
    !function(e) {
        e[e.Reveal = 0] = "Reveal",
        e[e.Pull = 1] = "Pull"
    }(f = t.SwipeActionLayout || (t.SwipeActionLayout = {})),
    function(e) {
        e[e.Left = 1] = "Left",
        e[e.Right = 2] = "Right"
    }(_ = t.SwipableItemActionSide || (t.SwipableItemActionSide = {}));
    const b = m.Color.white
      , v = u.lazyProperties({
        outerStaticContainer: ()=>s.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row"
        }),
        gestureContainer: ()=>s.Styles.createViewStyle({
            overflow: "visible",
            flex: 1
        }),
        rightSwipeActionContainerReveal: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "flex-end",
            alignItems: "stretch"
        }),
        leftSwipeActionContainerReveal: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "stretch"
        }),
        iconContainerReveal: ()=>s.Styles.createViewStyle({
            justifyContent: "center",
            alignItems: "center",
            padding: 20,
            width: 80
        }),
        rightIconInnerContainerReveal: ()=>s.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            top: 0,
            bottom: 0
        }),
        leftIconInnerContainerReveal: ()=>s.Styles.createViewStyle({
            position: "absolute",
            right: 0,
            top: 0,
            bottom: 0
        }),
        icon: ()=>s.Styles.createTextStyle({
            color: b,
            paddingHorizontal: 4
        }),
        iconButton: ()=>s.Styles.createViewStyle({
            justifyContent: "center",
            alignItems: "center"
        }),
        caption: ()=>s.Styles.createTextStyle({
            marginTop: 8,
            color: b,
            paddingHorizontal: 4,
            textAlign: "center"
        })
    });
    class T extends l.default {
        constructor() {
            super(...arguments),
            this._rightSwipeItemRefs = new g.default,
            this._leftSwipeItemRefs = new g.default,
            this._currentX = 0,
            this._innerMovingContainerXOffsetValue = new s.Animated.Value(0),
            this._innerMovingContainerXOffsetStyle = s.Styles.createAnimatedViewStyle({
                transform: [{
                    translateX: this._innerMovingContainerXOffsetValue
                }]
            }),
            this._rightIconButtonOpacityValue = new s.Animated.Value(0),
            this._rightIconButtonOpacityStyle = s.Styles.createAnimatedViewStyle({
                opacity: this._rightIconButtonOpacityValue
            }),
            this._leftIconButtonOpacityValue = new s.Animated.Value(0),
            this._leftIconButtonOpacityStyle = s.Styles.createAnimatedViewStyle({
                opacity: this._leftIconButtonOpacityValue
            }),
            this._hapticFeedbackPrepared = !1,
            this._hapticFeedbackSent = !1,
            this._isSwiping = !1,
            this._isRevealAdvanceGesture = !1,
            this._renderSwipeAction = (e,t,i,n,o,r)=>{
                const a = t === _.Right ? this._rightSwipeItemRefs.onComponentRef(e) : this._leftSwipeItemRefs.onComponentRef(e);
                return s.createElement(P, {
                    key: e,
                    ref: a,
                    side: t,
                    position: i,
                    commandOrId: this._swipeActionCommandOrId(n),
                    style: r,
                    swipeAction: n,
                    layoutType: this.props.layoutType,
                    allowOverscroll: o,
                    isPresentedInDesktopLeftNav: this._getContext().isPresentedInDesktopLeftNav,
                    useNativeAnimationDriver: !1,
                    onPress: n.onComplete || n.onConfirm ? this._onPerformAction : void 0,
                    numberOfLines: this.props.numberOfLines ? this.props.numberOfLines : 1
                })
            }
            ,
            this._onPerformAction = (e,t)=>{
                const i = i=>{
                    i ? e.onComplete ? (this._cancelSwipe(),
                    e.onComplete(t)) : this._cancelSwipe(()=>{
                        e.onComplete && e.onComplete(t)
                    }
                    ) : this._cancelSwipe()
                }
                ;
                e.onConfirm ? e.onConfirm(t).then(i).catch(e=>i(!1)) : i(!0)
            }
            ,
            this._onContainerRef = e=>{
                this._container = e || void 0
            }
            ,
            this._onPanView = e=>{
                const t = e.pageX - e.initialPageX
                  , i = this.props.layoutType === f.Reveal
                  , o = this.props.layoutType === f.Pull;
                let s = !1;
                if ((this.state.rightActions.length && (t < 0 || this._currentX < 0) || this.state.leftActions && this.state.leftActions.length && (t > 0 || this._currentX > 0)) && (s = !0),
                !s)
                    return;
                this.state.renderActions || this.setState({
                    renderActions: !0
                }),
                this._isSwiping || (this.props.onSwiping && this.props.onSwiping(!0, !!this.state.openSide, !0, this._getCurrentItemRef()),
                this._isSwiping = !0);
                let r = this._currentX + t;
                this._hapticFeedbackPrepared || (this._hapticFeedbackPrepared = !0,
                c.default.prepareFeedback());
                const a = this._allowOverscroll(_.Left)
                  , l = this._allowOverscroll(_.Right);
                let d;
                if (i && (r > 0 && !a ? r = Math.min(80 * this.state.leftActions.length * 1.25, r) : r < 0 && !l && (r = Math.max(80 * this.state.rightActions.length * 1.25 * -1, r))),
                this._rightIconButtonOpacityValue.setValue(r < -1 && this.state.openSide !== _.Left ? 1 : 0),
                this._leftIconButtonOpacityValue.setValue(r > 1 && this.state.openSide !== _.Right ? 1 : 0),
                this.props.overscrollSides || o) {
                    const e = this.props.swipeDistanceThreshold || 160;
                    this.state.openSide !== _.Right && r > e && a ? d = _.Left : this.state.openSide !== _.Left && r < -1 * e && l && (d = _.Right),
                    d ? this._hapticFeedbackSent || (this._hapticFeedbackSent = !0,
                    c.default.triggerFeedback()) : this._isRevealAdvanceGesture && (c.default.triggerFeedback(),
                    this._hapticFeedbackSent = !1)
                }
                if (this._isRevealAdvanceGesture = !!d,
                this._innerMovingContainerXOffsetValue.setValue(r),
                this._updateOffsets(r, !1, d),
                e.isComplete) {
                    if (d) {
                        const e = d === _.Left ? n.first(this.state.leftActions) : n.last(this.state.rightActions);
                        e && this._onPerformAction(e, this._swipeActionCommandOrId(e)),
                        this._cancelSwipe()
                    } else if (i) {
                        let t;
                        this.state.openSide === _.Right ? (e.velocityX < 0 || -1 * r > 80 * this.state.rightActions.length) && (t = _.Right) : this.state.openSide === _.Left && this.state.leftActions ? (e.velocityX > 0 || r > 80 * this.state.leftActions.length) && (t = _.Left) : r > 0 ? (e.velocityX >= 1 || r > 50) && (t = _.Left) : (e.velocityX <= -1 || -1 * r > 50) && (t = _.Right),
                        t ? this._openMenu(t) : this._cancelSwipe()
                    } else
                        this._cancelSwipe();
                    this._isRevealAdvanceGesture = !1,
                    this._hapticFeedbackSent = !1,
                    this._hapticFeedbackPrepared = !1
                }
            }
            ,
            this._close = ()=>{
                this._cancelSwipe()
            }
            ,
            this._cancelSwipe = e=>{
                this.props.onSwiping && this.props.onSwiping(!1, !1, !1, this._getCurrentItemRef()),
                this._isSwiping = !1,
                this._currentX = 0,
                this._updateOffsets(this._currentX, !0);
                o.parallel([o.timing.shotgun({
                    value: this._innerMovingContainerXOffsetValue,
                    toValue: this._currentX,
                    useNativeDriver: !1
                }), o.timing.shotgun({
                    value: this._rightIconButtonOpacityValue,
                    toValue: 0,
                    useNativeDriver: !1
                }), o.timing.shotgun({
                    value: this._leftIconButtonOpacityValue,
                    toValue: 0,
                    useNativeDriver: !1
                })]).start(t=>{
                    e && e(),
                    this.isComponentMounted() && this.state.openSide && (this.setState({
                        openSide: void 0,
                        renderActions: !1
                    }),
                    t.finished || this._innerMovingContainerXOffsetValue.setValue(this._currentX))
                }
                )
            }
            ,
            this._onLongPressClose = ()=>{}
            ,
            this._getCurrentItem = ()=>this.isComponentMounted() ? this : void 0
        }
        _buildState(e, t) {
            let i = {
                rightActions: T._actionsForSide(e, _.Right),
                leftActions: T._actionsForSide(e, _.Left)
            };
            return t && (i.renderActions = e.layoutType !== f.Reveal),
            i
        }
        requestFocus() {
            this._container && this._container.requestFocus()
        }
        close() {
            return !(!this.state.openSide || this._isSwiping) && (this._cancelSwipe(),
            !0)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            c.default.unprepareFeedback()
        }
        render() {
            const e = !n.isEmpty(this.state.rightActions) || !n.isEmpty(this.state.leftActions);
            if (this.props.disableSwipe || !e) {
                const e = [v.outerStaticContainer, C.overflowVisible];
                return s.createElement(s.View, {
                    style: e
                }, this.props.children)
            }
            let t;
            const i = this.state.openSide ? s.createElement(s.View, {
                onPress: this._close,
                onLongPress: this._onLongPressClose,
                style: [C.absoluteFill, C.noncollapsibleView]
            }) : void 0;
            let o, r;
            if (this.state.renderActions) {
                const e = this.state.rightActions
                  , t = e ? e.length : 0
                  , i = !!t && this._allowOverscroll(_.Right)
                  , a = n.map(e, (e,n)=>this._renderSwipeAction("action" + n, _.Right, t - n, e, i, v.iconContainerReveal))
                  , l = [C.absoluteFill, C.overflowVisible, this.props.backgroundStyle];
                if (o = s.createElement(s.Animated.View, {
                    key: "rightactions",
                    style: [l, this._rightIconButtonOpacityStyle, v.rightSwipeActionContainerReveal],
                    ignorePointerEvents: !0
                }, a),
                this.state.leftActions) {
                    const e = this.state.leftActions
                      , t = e ? e.length : 0
                      , i = !!t && this._allowOverscroll(_.Left)
                      , o = n.map(e, (e,n)=>this._renderSwipeAction("action" + n, _.Left, t - n, e, i, v.iconContainerReveal));
                    r = s.createElement(s.Animated.View, {
                        key: "leftactions",
                        style: [l, this._leftIconButtonOpacityStyle, v.leftSwipeActionContainerReveal],
                        ignorePointerEvents: !0
                    }, o)
                }
            }
            return t = n.compact([o, r, s.createElement(s.Animated.View, {
                key: "content",
                style: [this._innerMovingContainerXOffsetStyle, C.overflowVisible]
            }, this.props.children, i)]),
            s.createElement(s.View, {
                ref: this._onContainerRef,
                style: this.props.style || v.outerStaticContainer,
                onLayout: void 0,
                accessibilityActions: this.props.accessibilityActions,
                onAccessibilityAction: this.props.onAccessibilityAction,
                importantForAccessibility: this.props.importantForAccessibility,
                accessibilityLabel: this.props.accessibilityLabel,
                accessibilityTraits: this.props.accessibilityTraits
            }, this._wrapGestureContent(t, v.gestureContainer))
        }
        _allowOverscroll(e) {
            return !(!n.includes(this.props.overscrollSides, e) && this.props.layoutType === f.Reveal)
        }
        _wrapGestureContent(e, t) {
            return s.createElement(s.GestureView, {
                onPanHorizontal: this._onPanView,
                panPixelThreshold: this.props.dragThreshold || 3,
                preferredPan: s.Types.PreferredPanGesture.Horizontal,
                releaseOnRequest: !1,
                importantForAccessibility: s.Types.ImportantForAccessibility.No,
                style: t
            }, e)
        }
        _updateOffsets(e, t, i) {
            const o = 80 * this.state.rightActions.length;
            if (o) {
                const s = this.state.openSide === _.Left ? 0 : Math.min(e, 0)
                  , r = Math.abs(s) / o;
                n.each(this._rightSwipeItemRefs.allRefs(), e=>{
                    e.ref && e.ref.updateOffset(r, t, i === _.Right)
                }
                )
            }
            if (!this.state.leftActions)
                return;
            const s = 80 * this.state.leftActions.length;
            if (s) {
                const o = this.state.openSide === _.Right ? 0 : Math.max(e, 0)
                  , r = Math.abs(o) / s;
                n.each(this._leftSwipeItemRefs.allRefs(), e=>{
                    e.ref && e.ref.updateOffset(r, t, i === _.Left)
                }
                )
            }
        }
        _openMenu(e) {
            this._isSwiping = !1,
            this.props.onSwiping && this.props.onSwiping(!1, !0, !0, this._getCurrentItemRef()),
            e === _.Right ? this._currentX = 80 * this.state.rightActions.length * -1 : this.state.leftActions && (this._currentX = 80 * this.state.leftActions.length),
            this._updateOffsets(this._currentX, !0);
            o.parallel([o.timing.easeOut5({
                value: this._innerMovingContainerXOffsetValue,
                toValue: this._currentX,
                duration: o.timing.Duration.Tiny,
                useNativeDriver: !1
            }), o.timing.easeOut5({
                value: this._rightIconButtonOpacityValue,
                toValue: e === _.Right ? 1 : 0,
                duration: o.timing.Duration.Tiny,
                useNativeDriver: !1
            }), o.timing.easeOut5({
                value: this._leftIconButtonOpacityValue,
                toValue: e === _.Left ? 1 : 0,
                duration: o.timing.Duration.Tiny,
                useNativeDriver: !1
            })]).start(()=>{
                this.isComponentMounted() && this.state.openSide !== e && this.setState({
                    openSide: e
                })
            }
            )
        }
        _getCurrentItemRef() {
            return {
                itemId: this.props.itemId,
                ref: this._getCurrentItem
            }
        }
        _swipeActionCommandOrId(e) {
            return e.command || this.props.itemId
        }
        static _actionsForSide(e, t) {
            const i = e.layoutType !== f.Reveal;
            return t === _.Right ? n.compact(e.rightActions && e.rightActions.length ? i ? [n.first(e.rightActions)] : e.rightActions : []) : n.compact(e.leftActions && e.leftActions.length ? i ? [n.first(e.leftActions)] : e.leftActions : [])
        }
    }
    t.default = T;
    class P extends r.ComponentBase {
        constructor() {
            super(...arguments),
            this._iconHighlighted = !1,
            this._animatedOffsetValue = new s.Animated.Value(0),
            this._animatedBackgroundWidthValue = new s.Animated.Value(136),
            this._animatedBackgroundWidthStyle = s.Styles.createAnimatedViewStyle({
                width: this._animatedBackgroundWidthValue
            }),
            this._animatedIconOpacityValue = new s.Animated.Value(.7),
            this._animatedIconOpacityStyle = s.Styles.createAnimatedViewStyle({
                opacity: this._animatedIconOpacityValue
            }),
            this._animatedIconScaleValue = new s.Animated.Value(1),
            this._animatedIconScaleStyle = s.Styles.createAnimatedViewStyle({
                transform: [{
                    scale: this._animatedIconScaleValue
                }]
            }),
            this._onPress = ()=>{
                this.props.onPress && this.props.onPress(this.props.swipeAction, this.props.commandOrId)
            }
        }
        _buildState(e, t) {
            if (e.allowOverscroll) {
                const t = e.isPresentedInDesktopLeftNav ? p.default.getWidth(p.SideBar.Left) : h.default.getWidth(a.MainRootViewId);
                this._animatedBackgroundWidthValue.setValue(t || 136)
            }
            return {}
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            this._updateAnimatedStyle(this.props.position),
            this._updateStaticStyles(this.props.swipeAction)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this.props.position !== e.position && this._updateAnimatedStyle(e.position);
            const n = this.props.swipeAction
              , o = e.swipeAction;
            n.backgroundColor === o.backgroundColor && n.iconColor === o.iconColor || this._updateStaticStyles(o)
        }
        updateOffset(e, t, i=!1) {
            let n = e;
            if (!this.props.allowOverscroll) {
                const e = this.props.layoutType === f.Reveal ? 1.2 : 1;
                n = n > e ? e : n
            }
            t ? o.timing.easeOut5({
                value: this._animatedOffsetValue,
                toValue: n,
                duration: o.timing.Duration.Tiny,
                useNativeDriver: this.props.useNativeAnimationDriver
            }).start() : this._animatedOffsetValue.setValue(n),
            this._iconHighlighted !== i && (this._animatedIconOpacityValue.setValue(i ? 1 : .7),
            i ? o.timing.bounceIn([{
                value: this._animatedIconScaleValue,
                toValue: 1.25,
                duration: o.timing.Duration.Tiny,
                useNativeDriver: this.props.useNativeAnimationDriver
            }], [{
                value: this._animatedIconScaleValue,
                toValue: 1.2,
                duration: o.timing.Duration.Short,
                useNativeDriver: this.props.useNativeAnimationDriver
            }]).start() : o.timing.easeOut5({
                value: this._animatedIconScaleValue,
                toValue: 1,
                duration: o.timing.Duration.Tiny,
                useNativeDriver: this.props.useNativeAnimationDriver
            }).start(),
            this._iconHighlighted = i)
        }
        render() {
            const e = this.props.swipeAction;
            let t, i;
            e.label && (t = s.createElement(y.Caption, {
                key: "caption",
                style: [v.caption, this._textColorStyle],
                numberOfLines: this.props.numberOfLines,
                disableThemeSubscription: !0
            }, e.label));
            const o = [this.props.side === _.Right ? v.rightIconInnerContainerReveal : v.leftIconInnerContainerReveal, this._animatedBackgroundWidthStyle, this._backgroundColorStyle];
            i = s.createElement(s.Animated.View, {
                style: o
            });
            let r = n.compact([s.createElement(d.AnimatedIconView, {
                key: "icon",
                icon: e.icon,
                color: e.iconColor,
                size: S.IconSize.size20,
                style: [v.icon, this._animatedIconScaleStyle]
            }), t]);
            if (this.props.onPress) {
                const e = [C.absoluteFill, v.iconButton];
                this.props.layoutType === f.Pull && e.push(this._animatedIconOpacityStyle),
                r = s.createElement(s.Animated.View, {
                    style: e,
                    accessibilityLabel: this.props.swipeAction.accessibilityLabel || this.props.swipeAction.label,
                    accessibilityTraits: s.Types.AccessibilityTrait.Button,
                    onPress: this._onPress
                }, r)
            }
            const a = [this.props.style, this._animatedOffsetStyle, C.overflowVisible];
            return s.createElement(s.Animated.View, {
                style: a
            }, i, r)
        }
        _updateAnimatedStyle(e) {
            const t = 80 * e * (this.props.side === _.Right ? 1 : -1);
            this._animatedOffsetStyle = s.Styles.createAnimatedViewStyle({
                transform: [{
                    translateX: this._animatedOffsetValue.interpolate({
                        inputRange: [0, 1],
                        outputRange: [t, 0]
                    })
                }]
            })
        }
        _updateStaticStyles(e) {
            this._backgroundColorStyle = s.Styles.createViewStyle({
                backgroundColor: e.backgroundColor
            }, !1),
            this._textColorStyle = s.Styles.createTextStyle({
                color: e.iconColor
            }, !1)
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(43);
    class s extends o.default {
        constructor() {
            super(...arguments),
            this._isVisible = !0,
            this._onVisibilityChanged = e=>{
                this._isVisible !== e && (this._isVisible = e,
                this.forceUpdate())
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._context.componentVisibilityStatus && (this._visibilitySubscriptionToken = this._context.componentVisibilityStatus.isVisibleEvent().subscribe(this._onVisibilityChanged),
            this._isVisible = this._context.componentVisibilityStatus.isVisible())
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._visibilitySubscriptionToken && (this._visibilitySubscriptionToken.unsubscribe(),
            this._visibilitySubscriptionToken = void 0)
        }
        render() {
            const e = this._getContext();
            return e && e.componentVisibilityStatus && !e.componentVisibilityStatus.isVisible() ? null : n.createElement(n.View, {
                style: this.props.style
            }, this.props.children)
        }
    }
    t.default = s
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(6)
      , s = i(16)
      , r = i(42)
      , a = i(229)
      , l = i(333)
      , c = i(30)
      , d = i(1174)
      , u = i(2)
      , g = i(3)
      , h = i(4)
      , p = i(32)
      , m = i(321)
      , S = i(261)
      , C = i(1177)
      , y = i(47)
      , f = i(73)
      , _ = i(9)
      , b = "recents"
      , v = "archived"
      , T = "time"
      , P = "unread"
      , A = "active"
      , k = "default"
      , I = "compact"
      , w = "markAllRead"
      , N = "showCategoriesToggle";
    class M extends d.default {
        _buildState(e, t) {
            const i = p.default.getUserPreferencesLocal();
            let r = [];
            const d = n.keys(a.default.getConversationsWithUnreadCounts());
            r = n.filter(d, e=>!s.isHighlightsThread(e));
            let u = i.recentsSortedBy || S.RecentsSortBy.Time;
            this._isPresentedInDesktopLeftNav() && u === S.RecentsSortBy.Active && (u = S.RecentsSortBy.Time);
            const g = o.default.getS4LUiFeatures();
            return Object.assign(Object.assign({}, super._buildState(e, t)), {
                sortBy: u,
                unreadConversationIds: r,
                enableExtraCompactLayout: g.enableExtraCompactLayout,
                rowSize: i.recentsRowSize || S.RowSize.Default,
                showCategories: m.default.shouldShowCategories(),
                recentsViewMode: l.default.getConversationsListMode(),
                archivedConversationsCount: c.default.getArchivedConversations().length
            })
        }
        _getMenuSections() {
            const e = [];
            return this.state.archivedConversationsCount > 0 && e.push({
                key: "filterby",
                menuItems: this._getFilterMenuItems()
            }),
            this.state.recentsViewMode === l.ConversationsListMode.AllConversations && e.push({
                key: "sortby",
                title: h.getString("DesktopRecentsFilter.SortBy"),
                menuItems: this._getSortMenuItems()
            }),
            this.state.enableExtraCompactLayout || e.push({
                key: "viewby",
                title: h.getString("DesktopRecentsFilter.Views"),
                menuItems: this._getSizeMenuItems()
            }),
            e.push({
                key: "more",
                title: h.getString("Global.MoreButtonTitle"),
                menuItems: this._getMoreMenuItems()
            }),
            e
        }
        _onHandlePickerClick(e) {
            super._onHandlePickerClick(e)
        }
        _currentMenuText() {
            const e = this._isPresentedInDesktopLeftNav();
            return this.state.recentsViewMode === l.ConversationsListMode.AllConversations ? e ? h.getString("DesktopRecentsFilter.RecentConversationsUppercase") : h.getString("DesktopRecentsFilter.RecentConversations") : e ? h.getString("DesktopRecentsFilter.HiddenConversationsUppercase") : h.getString("DesktopRecentsFilter.HiddenConversations")
        }
        _accessibilityText() {
            return this._accessibilityTextForSortByMode(this.state.sortBy)
        }
        _onHandleMenuCommand(e) {
            super._onHandleMenuCommand(e);
            const t = _.newCauseId();
            g.log(u.LogTraceArea.Navigation, "DesktopRecentsFilter._onHandleMenuCommand, causeId: " + t);
            const i = this._accessibilityAnnouncementForCommand(e);
            i && y.maybeAnnounceForAccessibility(i);
            const o = ()=>{
                const e = new C.RemoteUserAppearanceTelemetryEvent;
                e.setDidUpdateRecentsRowSize(),
                g.track(e)
            }
              , s = ()=>{
                switch (e) {
                case T:
                    m.default.sortByTime();
                    break;
                case P:
                    m.default.sortByUnread();
                    break;
                case A:
                    m.default.sortByActive();
                    break;
                case k:
                    o(),
                    m.default.setRowSizeToDefault();
                    break;
                case I:
                    o(),
                    m.default.setRowSizeToCompact();
                    break;
                case w:
                    m.default.showMarkAllReadConfirmationDialog(this._getRootViewId());
                    break;
                case N:
                    this.state.recentsViewMode !== l.ConversationsListMode.AllConversations && l.default.setConversationsListMode(l.ConversationsListMode.AllConversations),
                    this.state.showCategories ? m.default.hideCategories() : m.default.showCategories();
                    break;
                case b:
                    m.default.showAllConversations();
                    break;
                case v:
                    m.default.showArchivedConversations();
                    break;
                case f.SXActionMenuCancel:
                }
            }
            ;
            switch (e) {
            case T:
            case P:
            case A:
                const t = this._getSortModeFromCommand(e);
                this.isComponentMounted() && this.state.sortBy !== t ? this.setState({
                    sortBy: t
                }, ()=>{
                    n.defer(()=>{
                        s()
                    }
                    )
                }
                ) : s();
                break;
            default:
                s()
            }
        }
        _getSortModeFromCommand(e) {
            switch (e) {
            default:
            case T:
                return S.RecentsSortBy.Time;
            case P:
                return S.RecentsSortBy.Unread;
            case A:
                return S.RecentsSortBy.Active
            }
        }
        _accessibilityTextForSortByMode(e) {
            const t = h.getString("DesktopRecentsFilter.SortByMenu") + ", ";
            return this.state.recentsViewMode === l.ConversationsListMode.ArchivedConversations ? t + h.getString("DesktopRecentsFilter.HiddenConversations") : t + h.getString("DesktopRecentsFilter.RecentConversations")
        }
        _accessibilityAnnouncementForCommand(e) {
            let t;
            switch (e) {
            case T:
                t = h.getString("DesktopRecentsFilter.Time");
                break;
            case P:
                t = h.getString("DesktopRecentsFilter.Unread");
                break;
            case A:
                t = h.getString("DesktopRecentsFilter.Active");
                break;
            case b:
                t = h.getString("DesktopRecentsFilter.RecentConversations");
                break;
            case v:
                t = h.getString("DesktopRecentsFilter.HiddenConversations")
            }
            if (t)
                return r.default.combinedAccessibilityLabel(t, h.getString("Global.SelectedAccessibilityLabel"))
        }
        _getSortMenuItems() {
            const e = [{
                text: h.getString("DesktopRecentsFilter.Time"),
                command: T,
                selected: this.state.sortBy === S.RecentsSortBy.Time,
                isCheckbox: !0
            }, {
                text: h.getString("DesktopRecentsFilter.Unread"),
                command: P,
                selected: this.state.sortBy === S.RecentsSortBy.Unread,
                isCheckbox: !0
            }];
            return this._isPresentedInDesktopLeftNav() || e.push({
                text: h.getString("DesktopRecentsFilter.Active"),
                command: A,
                selected: this.state.sortBy === S.RecentsSortBy.Active,
                isCheckbox: !0
            }),
            e
        }
        _getSizeMenuItems() {
            return [{
                text: h.getString("DesktopRecentsFilter.Standard"),
                command: k,
                selected: this.state.rowSize === S.RowSize.Default,
                isCheckbox: !0
            }, {
                text: h.getString("DesktopRecentsFilter.Compact"),
                command: I,
                selected: this.state.rowSize === S.RowSize.Compact || this.state.rowSize === S.RowSize.ExtraCompact,
                isCheckbox: !0
            }]
        }
        _getMoreMenuItems() {
            const e = [];
            n.isEmpty(this.state.unreadConversationIds) || this.state.recentsViewMode !== l.ConversationsListMode.AllConversations || e.push({
                text: h.getString("MobileRecentsFilter.MarkRead"),
                command: w
            });
            const t = this.state.showCategories ? "DesktopRecentsFilter.HideFavorites" : "DesktopRecentsFilter.ShowFavorites";
            return e.push({
                text: h.getString(t),
                command: N
            }),
            e
        }
        _getFilterMenuItems() {
            return [{
                text: h.getString("DesktopRecentsFilter.RecentConversations"),
                command: b,
                selected: this.state.recentsViewMode === l.ConversationsListMode.AllConversations,
                isCheckbox: !0
            }, {
                text: h.getString("DesktopRecentsFilter.HiddenConversations"),
                command: v,
                selected: this.state.recentsViewMode === l.ConversationsListMode.ArchivedConversations,
                isCheckbox: !0
            }]
        }
    }
    e.exports = M
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._itemType = e,
            this._numberOfItems = t
        }
        getEventName() {
            return "messaging_direct_share"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.ItemType = this._itemType,
            e.NumberOfItems = this._numberOfItems,
            e
        }
    }
    t.DirectShareTelemetry = o
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(289)
      , s = i(27)
      , r = i(5)
      , a = i(4)
      , l = i(8)
      , c = i(11)
      , d = i(15)
      , u = i(12)
      , g = r.lazyProperties({
        overlayPanel: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            justifyContent: "center",
            alignItems: "center",
            position: "absolute",
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
            backgroundColor: l.Color.whiteOverlay90
        }),
        overlayPanelDarkTheme: ()=>n.Styles.createViewStyle({
            backgroundColor: l.Color.blackOverlay70
        }),
        overlayPanelDashedInner: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            margin: 10,
            borderColor: l.Color.gray300,
            borderWidth: 2,
            borderStyle: "dashed"
        }),
        messageContainer: ()=>n.Styles.createViewStyle({
            flex: -1,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            paddingHorizontal: 20
        }),
        messageText: ()=>n.Styles.createTextStyle({
            flex: -1,
            color: l.Color.gray400,
            marginLeft: 10
        }),
        messageTextDarkTheme: ()=>n.Styles.createTextStyle({
            color: l.Color.gray100
        })
    });
    class h extends u.default {
        render() {
            const e = [g.messageText]
              , t = [g.overlayPanel]
              , i = this._useDarkTheme();
            i && (e.push(g.messageTextDarkTheme),
            t.push(g.overlayPanelDarkTheme));
            let o = a.getString("DragAndDrop.FileUploadMessage");
            return this._canDragContacts() && (o = a.getString("DragAndDrop.FileUploadOrContactShareMessage")),
            n.createElement(n.View, {
                style: t,
                ignorePointerEvents: !0
            }, n.createElement(n.View, {
                style: g.overlayPanelDashedInner
            }, n.createElement(n.View, {
                style: g.messageContainer
            }, n.createElement(s.default, {
                icon: c.SkypeIcon.Media,
                size: c.IconSize.size24,
                color: i ? l.Color.gray100 : l.Color.gray400
            }), n.createElement(d.Header, {
                size: 5,
                style: e
            }, o))))
        }
        _canDragContacts() {
            return o.default.isDragAndDropContactsEnabled()
        }
    }
    e.exports = h
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(6)
      , o = i(2)
      , s = i(108)
      , r = i(4)
      , a = i(73);
    var l;
    !function(e) {
        e[e.NegativeFeedback = 0] = "NegativeFeedback",
        e[e.LearnMore = 1] = "LearnMore"
    }(l = t.SuggestionCommandTypes || (t.SuggestionCommandTypes = {}));
    const c = a.default.menuId();
    t.default = class {
        constructor(e) {
            this._feedbackHandler = e,
            this._menuOptions = ()=>[{
                text: r.getString("SwiftQuickReplyListView.TheseAreBad"),
                command: l[l.NegativeFeedback]
            }, {
                text: r.getString("SwiftQuickReplyListView.LearnMore"),
                command: l[l.LearnMore]
            }],
            this._handleMenuCommand = (e,t)=>{
                switch (e) {
                case l[l.NegativeFeedback]:
                    this._feedbackHandler();
                    break;
                case l[l.LearnMore]:
                    s.openUrlWithParams({
                        origin: o.BrowserOrigin.SuggestionsLearnMore,
                        url: n.default.getConfigSettingsNoSubscription().cortana.learnMoreUrl,
                        componentContext: {
                            rootViewId: t
                        }
                    })
                }
            }
        }
        show(e, t, i) {
            const n = {
                anchor: e,
                useTheme: !0,
                popupBeakSize: {
                    height: 0,
                    width: 0
                },
                positionPriorities: ["top", "left"]
            };
            a.default.showWithOptions({
                id: c,
                config: n,
                getMenuItems: this._menuOptions,
                handleMenuCommand: e=>this._handleMenuCommand(e, t),
                menuTitle: r.getString("SwiftQuickReplyListView.SuggestionsMenuTitle"),
                rootViewId: t,
                invokingEvent: i
            })
        }
    }
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(6)
      , s = i(78)
      , r = i(30)
      , a = i(130)
      , l = i(163)
      , c = i(2)
      , d = i(98)
      , u = i(3)
      , g = i(1236)
      , h = i(4)
      , p = i(290)
      , m = i(522)
      , S = {
        command: "addreactions",
        usageHint: "[emoticon1], [emoticon2], ...",
        description: h.getString("SlashCommandDescriptions.AddReactions"),
        isVisible: !0,
        isEnabled: ()=>o.default.getS4LMessagingFeatures().enableCustomReactionsSlashCommands,
        action: (e,t,i)=>{
            if (!e)
                return g.ActionResult.InvalidParameters;
            const o = b(e, i);
            return n.size(o) > 0 && (p.default.addReactions(o),
            p.default.saveReactions(),
            u.track(new m.ReactionsManipulationTelemetry(m.ReactionsManipulationAction.ReactionListBatchAdd,{
                numberOfReactions: n.size(o)
            }))),
            g.ActionResult.None
        }
    }
      , C = {
        command: "removereactions",
        usageHint: "[emoticon1], [emoticon2], ...",
        description: h.getString("SlashCommandDescriptions.RemoveReactions"),
        isVisible: !0,
        isEnabled: ()=>o.default.getS4LMessagingFeatures().enableCustomReactionsSlashCommands,
        action: (e,t,i)=>{
            if (!e)
                return g.ActionResult.InvalidParameters;
            const o = b(e, i);
            return n.size(o) > 0 && (p.default.removeReactions(o),
            p.default.saveReactions(),
            u.track(new m.ReactionsManipulationTelemetry(m.ReactionsManipulationAction.ReactionListBatchRemove,{
                numberOfReactions: n.size(o)
            })),
            p.default.getLocalReactionsCount() || (u.track(new m.ReactionsManipulationTelemetry(m.ReactionsManipulationAction.LastReactionRemovedCallReset)),
            p.default.resetLocalReactions())),
            g.ActionResult.None
        }
    }
      , y = [Object.assign(Object.assign({}, S), {
        command: "addreaction",
        isVisible: !1
    }), S, C, Object.assign(Object.assign({}, C), {
        command: "removereaction",
        isVisible: !1
    }), {
        command: "resetreactions",
        description: "Resets reactions set back to default",
        isVisible: !0,
        isEnabled: ()=>o.default.getS4LMessagingFeatures().enableCustomReactionsSlashCommands,
        action: ()=>(p.default.resetLocalReactions(),
        p.default.resetSavedReactions(),
        u.track(new m.ReactionsManipulationTelemetry(m.ReactionsManipulationAction.ReactionListReset)),
        g.ActionResult.None)
    }, {
        command: "removereactionsat",
        usageHint: "reaction 0-based positions, use /printreactions for more info",
        description: h.getString("SlashCommandDescriptions.RemoveReactionsAt"),
        isVisible: !1,
        isEnabled: ()=>o.default.getS4LMessagingFeatures().enableCustomReactionsSlashCommands,
        action: (e,t,i)=>e && f(e) ? (p.default.removeReactionsAt(_(e)),
        p.default.saveReactions(),
        g.ActionResult.None) : g.ActionResult.InvalidParameters
    }, {
        command: "printreactions",
        usageHint: "(optional) position",
        description: h.getString("SlashCommandDescriptions.PrintReactions"),
        isVisible: !1,
        isEnabled: ()=>o.default.getS4LMessagingFeatures().enableCustomReactionsSlashCommands,
        action: (e,t,i,o)=>{
            if (e && !f(e))
                return g.ActionResult.InvalidParameters;
            const s = n.isEmpty(e) ? [] : _(e);
            if (r.default.getConversation(t)) {
                const e = "Reactions:\n"
                  , i = p.default.getReactions(!0)
                  , r = n.isEmpty(s) ? i.reduce((e,t,i)=>e.concat(`${i}. (${t})\n`), e) : s.reduce((e,t)=>`${t}. (${i[t]})`, e);
                o(a.createMessageInfoFromEscapedText(t, c.PostSource.SlashCommand, r))
            }
            return g.ActionResult.None
        }
    }];
    function f(e) {
        return (e || "").match(/^(\d|\s)+$/)
    }
    function _(e) {
        return s.chain(e, e=>e.trim().toLowerCase().split(" "), e=>e.map(n.toInteger))
    }
    function b(e, t) {
        const i = t.slice(2);
        return n.size(i) > 0 && n.every(i, e=>e instanceof d.EmoticonEntity) ? i.map(e=>e.emoticonName) : s.chain(e, e=>e.trim().toLowerCase().split(" "), e=>e.map(e=>{
            return function(e, t) {
                if (e && (e.id === t || n.includes(e.shortcuts, t)))
                    return e.id;
                0;
                return
            }((t = e,
            l.default.getEmoticonByShortcutNoSubscription(`(${t})`) || l.default.getEmoticonByShortcutNoSubscription(t)), e);
            var t
        }
        ), n.compact)
    }
    t.default = y
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = (i(98),
    i(121))
      , r = i(5)
      , a = (i(4),
    i(47),
    i(8))
      , l = i(23)
      , c = i(12)
      , d = r.lazyProperties({
        textCompletePopup: ()=>o.Styles.createViewStyle({
            position: "absolute",
            left: 0,
            right: 0,
            bottom: 1
        }),
        textCompletePopupTopBorder: ()=>o.Styles.createViewStyle({
            borderTopWidth: 1,
            borderStyle: "solid",
            height: 1,
            alignSelf: "stretch"
        }),
        textCompletePopupDesktop: ()=>o.Styles.createViewStyle({
            borderWidth: 1,
            borderStyle: "solid",
            borderRadius: 8,
            paddingVertical: 4
        }),
        textCompleteItem: ()=>o.Styles.createButtonStyle({
            justifyContent: "center",
            paddingHorizontal: 8,
            height: 38
        }),
        textCompleteItemSelected: ()=>o.Styles.createButtonStyle({
            backgroundColor: a.Color.blueOverlay10
        }),
        textCompleteMenuText: ()=>o.Styles.createTextStyle({
            fontSize: l.fontSize.size13Deprecated,
            font: l.font.uiDisplayRegular
        }),
        textCompleteMenuSelectedText: ()=>o.Styles.createTextStyle({
            color: a.Color.blue
        })
    });
    class u extends c.default {
        constructor() {
            super(...arguments),
            this._animatedHeightValue = new o.Animated.Value(0),
            this._animatedHeightStyle = o.Styles.createAnimatedViewStyle({
                height: this._animatedHeightValue
            })
        }
        _buildState(e, t) {
            if (t)
                return {
                    currentEntityDetector: void 0,
                    candidatesToDisplay: [],
                    selectedIndex: 0
                }
        }
        componentDidUpdate(e, t, i) {
            if (super.componentDidUpdate(e, t, i),
            this.props.inputText !== e.inputText || this.props.maxMenuHeight !== e.maxMenuHeight) {
                let e = this.props.candidatesToDisplay;
                38 * e + 8 > this.props.maxMenuHeight && (e = Math.max(Math.floor((this.props.maxMenuHeight - 8) / 38), 1));
                let t = this.getReplacementCandidates(this.props.inputText, e);
                this.setState({
                    currentEntityDetector: t.entityDetector,
                    candidatesToDisplay: t.candidates,
                    selectedIndex: 0,
                    selectionChangeKeyReceived: !1
                }),
                this.props.onTextReplacementCandidatesShown(t.candidates.length)
            }
            const n = this.state.candidatesToDisplay && this.state.candidatesToDisplay.length
              , s = n && t.candidatesToDisplay && this.state.candidatesToDisplay.length !== t.candidatesToDisplay.length;
            if ((t.selectedIndex !== this.state.selectedIndex || s) && void 0 !== this.state.selectedIndex && n && this.state.currentEntityDetector) {
                const e = this.state.currentEntityDetector.createAccessibilityLabel(this.state.candidatesToDisplay[this.state.selectedIndex], this.state.selectedIndex + 1, this.state.candidatesToDisplay.length);
                o.Accessibility.announceForAccessibility(e)
            }
        }
        render() {
            const e = this.state.candidatesToDisplay ? this.state.candidatesToDisplay.length : 0;
            if (0 === e)
                return null;
            let t = n.map(this.state.candidatesToDisplay, (t,i)=>{
                let n = [d.textCompleteItem]
                  , s = [d.textCompleteMenuText];
                i === this.state.selectedIndex && (n.push(d.textCompleteItemSelected),
                s.push(d.textCompleteMenuSelectedText));
                let r = this.state.currentEntityDetector ? this.state.currentEntityDetector.render(t, i === this.state.selectedIndex && !0) : void 0;
                "string" == typeof r && (r = o.createElement(o.Text, {
                    style: s,
                    numberOfLines: 1
                }, r));
                const a = this.state.currentEntityDetector ? this.state.currentEntityDetector.createAccessibilityLabel(t, i + 1, e) : void 0;
                return o.createElement(o.Button, {
                    style: n,
                    key: t.uniqueKey || t.replacementText,
                    onHoverStart: ()=>this._onMouseOver(i),
                    onPress: e=>this._onClick(e, i),
                    underlayColor: this._themeColors.rowHighlightColor,
                    accessibilityLabel: a
                }, r)
            }
            )
              , i = [d.textCompletePopup, this._themeStyles.popoverBackgroundColorStyle];
            return void 0 !== this.props.leftOffset && i.push(o.Styles.createViewStyle({
                left: this.props.leftOffset
            }, !1)),
            this.state.currentEntityDetector && (this.state.currentEntityDetector.maxPopupWidth && i.push(o.Styles.createViewStyle({
                maxWidth: this.state.currentEntityDetector.maxPopupWidth
            }, !1)),
            i.push([d.textCompletePopupDesktop, this._themeStyles.dividerBorderColorStyle])),
            this.props.style && i.push(this.props.style),
            o.createElement(o.Animated.View, {
                style: i
            }, void 0, t)
        }
        handleKeyDown(e) {
            if (0 === this.state.candidatesToDisplay.length)
                return !1;
            let t = !0;
            return e.keyCode === s.DOWN ? !n.isUndefined(this.state.selectedIndex) && this.state.selectedIndex < this.state.candidatesToDisplay.length - 1 && this.setState({
                selectedIndex: this.state.selectedIndex + 1,
                selectionChangeKeyReceived: !0
            }) : e.keyCode === s.UP ? !n.isUndefined(this.state.selectedIndex) && this.state.selectedIndex > 0 && this.setState({
                selectedIndex: this.state.selectedIndex - 1,
                selectionChangeKeyReceived: !0
            }) : e.keyCode === s.PAGEUP ? 0 !== this.state.selectedIndex && this.setState({
                selectedIndex: 0,
                selectionChangeKeyReceived: !0
            }) : e.keyCode === s.PAGEDOWN ? this.state.selectedIndex !== this.state.candidatesToDisplay.length - 1 && this.setState({
                selectedIndex: this.state.candidatesToDisplay.length - 1,
                selectionChangeKeyReceived: !0
            }) : e.keyCode === s.TAB || e.keyCode === s.RETURN && !e.shiftKey && !e.ctrlKey ? void 0 !== this.state.selectedIndex && this._selectItem(this.state.selectedIndex) : e.keyCode === s.ESCAPE && this.state.candidatesToDisplay.length > 0 ? this.setState({
                candidatesToDisplay: []
            }) : t = !1,
            t
        }
        _onMouseOver(e) {
            e >= 0 && e < this.state.candidatesToDisplay.length && this.state.selectedIndex !== e && this.setState({
                selectedIndex: e
            })
        }
        _onClick(e, t) {
            e.stopPropagation(),
            t >= 0 && t < this.state.candidatesToDisplay.length && this._selectItem(t)
        }
        _selectItem(e) {
            n.delay(()=>{
                let t = this.state.candidatesToDisplay[e];
                this.props.onReplaceText && t && t.entity && this.state.currentEntityDetector && this.props.onReplaceText(t.charsToReplace, t.replacementText, this.state.currentEntityDetector.entityType, t.entity)
            }
            , 140)
        }
        getReplacementCandidates(e, t) {
            if (e) {
                const i = this.props.entityDetectors();
                if (i)
                    for (let o = 0; o < i.length; o++) {
                        let s = i[o]
                          , r = e.match(s.match);
                        if (r && r.length > 1) {
                            const i = r.index;
                            let o = 0 === i || " " === e[i] || " " === e[i - 1] || "\n" === e[i - 1]
                              , a = s.search(r[1], o, t);
                            if (a.length > 0)
                                return a = n.sortBy(a, e=>e.priority),
                                a.length > t && (a = a.slice(0, t)),
                                {
                                    entityDetector: s,
                                    candidates: a
                                }
                        }
                    }
            }
            return {
                entityDetector: void 0,
                candidates: []
            }
        }
    }
    t.TextCompletion = u,
    t.default = u
}
, , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(36)
      , s = i(0)
      , r = i(1822)
      , a = i(351)
      , l = i(6)
      , c = i(532)
      , d = i(116)
      , u = i(230)
      , g = i(115)
      , h = i(42)
      , p = i(58)
      , m = i(10)
      , S = i(1173)
      , C = i(606)
      , y = i(1184)
      , f = i(81)
      , _ = i(2)
      , b = i(110)
      , v = i(1146)
      , T = i(898)
      , P = i(40)
      , A = i(3)
      , k = i(1145)
      , I = i(5)
      , w = i(4)
      , N = i(147)
      , M = i(179)
      , E = i(409)
      , x = i(32)
      , D = i(192)
      , L = i(20)
      , R = i(17)
      , B = i(55)
      , O = i(321)
      , F = i(373)
      , V = i(37)
      , U = i(60)
      , H = i(76)
      , W = i(251)
      , z = i(107)
      , G = i(8)
      , K = i(11)
      , j = i(49)
      , q = i(14)
      , Q = i(59)
      , X = i(15)
      , J = i(12)
      , $ = i(95)
      , Y = i(67)
      , Z = i(45)
      , ee = i(201)
      , te = i(9);
    var ie;
    !function(e) {
        e[e.Left = 0] = "Left",
        e[e.Center = 1] = "Center",
        e[e.Right = 2] = "Right"
    }(ie || (ie = {}));
    const ne = 5 * K.IconSize.size24
      , oe = 2 * K.IconSize.size24
      , se = {
        left: m.RowPadding.left,
        right: m.RowPadding.right
    }
      , re = I.lazyProperties({
        hubHeader: ()=>s.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "space-between",
            backgroundColor: G.Color.transparent,
            overflow: "visible"
        }),
        titleWrapper: ()=>s.Styles.createViewStyle({
            height: K.IconSize.default,
            justifyContent: "center",
            alignItems: "center",
            overflow: "visible"
        }),
        titleWrapperLandscape: ()=>s.Styles.createViewStyle({
            height: K.IconSize.size32
        }),
        leftControls: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            width: ne
        }),
        rightControls: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "flex-end",
            width: ne
        }),
        smallControls: ()=>s.Styles.createViewStyle({
            width: oe
        }),
        iconContainer: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center",
            width: K.IconSize.default,
            height: K.IconSize.default
        }),
        iconContainerSmall: ()=>s.Styles.createViewStyle({
            width: K.IconSize.size32,
            marginRight: 4
        }),
        iconContainerLandscape: ()=>s.Styles.createViewStyle({
            height: K.IconSize.size32,
            marginTop: 5
        }),
        badgeStyle: ()=>s.Styles.createViewStyle({
            position: "absolute",
            top: 2,
            right: 2
        }),
        title: ()=>s.Styles.createTextStyle({
            textAlign: "center"
        }),
        redBadge: ()=>s.Styles.createViewStyle({
            backgroundColor: G.Color.red
        }),
        userIconLeftContainer: ()=>s.Styles.createViewStyle({
            marginLeft: 10
        })
    });
    class ae extends J.default {
        constructor() {
            super(...arguments),
            this.handleFocusEvent = e=>!(e !== b.FocusEvent.CloseRightPanel || !this._userIconRef) && (this._userIconRef.requestFocus(),
            !0),
            this._onLayoutChanged = e=>{
                this.state.viewWidth !== e.width && this.setState({
                    viewWidth: e.width
                })
            }
            ,
            this._onPlusButtonRef = e=>{
                this._plusButton = e || void 0
            }
            ,
            this._onNotificationsSettingsButtonRef = e=>{
                this._notificationsSettingsButton = e || void 0
            }
            ,
            this._onRecentsFilterButtonRef = e=>{
                this._recentsFilterButton = e || void 0
            }
            ,
            this._onContactsFilterButtonRef = e=>{
                this._contactsFilterButton = e || void 0
            }
            ,
            this._onQuickCallButtonClick = (e,t)=>{
                t && t.stopPropagation && t.stopPropagation();
                const i = te.newCauseId();
                A.log(_.LogTraceArea.Navigation, "MobileHubHeader._onQuickCallButtonClick, causeId: " + i),
                this._registerMobileFocusHandler(()=>this._quickCallButton),
                R.navigateToQuickCallPanel(i, this._getContext())
            }
            ,
            this._onFeedbackButtonClick = (e,t)=>{
                t && t.stopPropagation && t.stopPropagation(),
                F.reportProblem(!0, e)
            }
            ,
            this._onMeetNowButtonClick = (e,t)=>{
                t && t.stopPropagation && t.stopPropagation();
                let i = M.MeetNowOrigin.Unknown;
                this.state.currentHubTab === B.HubTab.Recents ? i = M.MeetNowOrigin.RecentChatsTabMobile : this.state.currentHubTab === B.HubTab.Calls && (i = M.MeetNowOrigin.CallsTabMobile),
                N.MeetNowHelpers.showNewMeetNow(i)
            }
            ,
            this._onNotificationsSettingsButtonClick = (e,t)=>{
                t && t.stopPropagation && t.stopPropagation();
                const i = ()=>this._notificationsSettingsButton;
                this._registerMobileFocusHandler(i),
                r.default.showMenu(this.state.hasUnreadAlerts, i, this._getRootViewId(), t)
            }
            ,
            this._onRecentsFilterButtonClick = ()=>{
                O.default.showOptionsMenu(void 0, ()=>this._recentsFilterButton, this._getRootViewId(), void 0)
            }
            ,
            this._onContactsFilterButtonClick = (e,t)=>{
                S.default.showOptionsMenu(()=>this._contactsFilterButton, this._getRootViewId(), t)
            }
            ,
            this._onUserIconAnchorClick = ()=>{
                this._onUserIconButtonClick()
            }
            ,
            this._onUserIconRef = e=>{
                this._userIconRef = e || void 0
            }
            ,
            this._onTitleRef = e=>{
                this._titleRef = e || void 0
            }
            ,
            this._onQuickCallButtonRef = e=>{
                this._quickCallButton = e || void 0
            }
            ,
            this._onUserIconButtonClick = e=>{
                e && e.stopPropagation && e.stopPropagation();
                const t = te.newCauseId();
                if (A.log(_.LogTraceArea.Navigation, "MobileHubHeader._onUserIconButtonClick navigateToMeControl, causeId: " + t),
                f.dismissAll(),
                this._registerMobileFocusHandler(()=>this._userIconRef),
                Q.useTabletUINoSubscription()) {
                    const e = s.createElement(y, {
                        key: "DesktopMeControlPanel",
                        userMri: L.getSkypeMri(),
                        dialogId: "MeControlModal",
                        anchor: ()=>this._userIconRef
                    });
                    p.default.showModal(e, "MeControlModal", {
                        rootViewId: this._getRootViewId()
                    })
                } else
                    R.navigateToMeControl(this._getContext(), t, z.StackNavigationDirection.Present)
            }
            ,
            this._onNotificationsButtonClick = (e,t)=>{
                t && t.stopPropagation && t.stopPropagation(),
                R.navigateToAlertsHub()
            }
        }
        _buildState(e, t) {
            const i = this._isPresentedInTabletLeftNav();
            let r, c, u = V.default.statusBarHeight();
            u && i && (u -= Q.useTabletUI() ? 1 : 7);
            const g = H.default.isMobileScreenReaderEnabled();
            if (g) {
                const e = D.getStatus();
                r = n.includes(ee.myAllowedStatuses(), e) ? e : d.UserStatus.Online,
                c = Z.getFullUserProfileByMri(L.getSkypeMri()).gender
            }
            const h = l.default.getS4LContactsFeatures()
              , p = l.default.getOnboardingFeatures();
            let m = {
                leavePaddingForStatusBar: s.StatusBar.isOverlay() && (e.deviceOrientation === o.DeviceOrientation.Portrait || i),
                statusBarHeight: u,
                safeAreaHorizontalPaddingStyle: V.default.horizontalPaddingStyle(se),
                safeAreaHorizontalInsets: V.default.horizontalInsets(se),
                hasUnreadAlerts: !!e.shouldTrackUnreadAlerts && a.default.hasUnreadAlerts(!0),
                contactsPanelTabSelected: x.default.getUserPreferencesLocal().contactsPanelV2Filter,
                enableAlwaysShowActiveNowFilter: h.enableAlwaysShowActiveNowFilter,
                enableNewMeetNowName: l.default.getS4LCMCFeatures().enableNewMeetNowName,
                enableHeartEntryPoint: l.default.getConfigSettings().brb.enableHeartEntryPoint,
                userStatus: r,
                gender: c,
                isMobileScreenReaderEnabled: g,
                displayUserIconInAllHubs: p.displayUserIconInAllHubs
            };
            return t && (m.currentHubTab = e.initialHubTab,
            m.viewWidth = i ? W.default.getWidth() : 0),
            m
        }
        componentDidMount() {
            super.componentDidMount(),
            this._plusButton && !this.props.suppressFocus && this._plusButton.requestFocus(),
            b.register(b.FocusEvent.ConversationDeleted, this)
        }
        componentWillUnMount() {
            super.componentWillUnmount(),
            b.unregister(b.FocusEvent.ConversationDeleted, this)
        }
        _shouldComponentUpdate(e, t, i, n, o, s) {
            return e ? t.isVisible !== n.isVisible || t.deviceOrientation !== n.deviceOrientation || i.currentHubTab !== o.currentHubTab : super._shouldComponentUpdate(e, t, i, n, o, s)
        }
        _componentDidUpdate(e, t, i) {
            super._componentDidUpdate(e, t, i);
            const n = this.state.currentHubTab !== t.currentHubTab;
            (this.props.isVisible && !e.isVisible || n) && this._plusButton && !this.props.suppressFocus && this._plusButton.requestFocus()
        }
        UNSAFE_componentWillReceiveProps(e, t) {
            if (super.UNSAFE_componentWillReceiveProps(e, t),
            e.unreadAlertsCount !== this.props.unreadAlertsCount) {
                const t = w.getString("Hub.NotificationCounterScreenReaderLabel", {
                    count: e.unreadAlertsCount || 0
                });
                s.Accessibility.announceForAccessibility(t)
            }
        }
        updateHubTab(e) {
            return !(!this.isComponentMounted() || this.state.currentHubTab === e) && (this.setState({
                currentHubTab: e
            }),
            !0)
        }
        requestFocus() {
            this._plusButton && !this.props.suppressFocus && this._plusButton.requestFocus()
        }
        focusCenterControl() {
            this._userIconRef ? this._userIconRef.requestFocus() : this._titleRef && this._titleRef.requestFocus()
        }
        render() {
            const e = T.default.headerButtonLayoutForHubTab({
                hubTab: this.state.currentHubTab,
                useTabletUI: this._isPresentedInTabletLeftNav(),
                enableHeartEntryPoint: this.state.enableHeartEntryPoint,
                mobileHubFABEnabled: !!this.props.mobileHubFABEnabled,
                hideAlertsButton: !!this.props.hideAlertsButton
            })
              , t = this._getLeftControls(e)
              , i = this._getCenterControls(e)
              , n = this._getRightControls(e);
            let o = [re.hubHeader];
            return this.state.leavePaddingForStatusBar && o.push(U.marginTopStyle(this.state.statusBarHeight)),
            this.props.style && o.push(this.props.style),
            this.state.safeAreaHorizontalPaddingStyle && o.push(this.state.safeAreaHorizontalPaddingStyle),
            s.createElement(s.View, {
                style: o,
                onLayout: this._onLayoutChanged
            }, t, i, n)
        }
        _renderIconButton(e, t) {
            let i = this._useLandscapeLayout() ? K.IconSize.size20 : K.IconSize.size24;
            const n = e.onPressCallback;
            let o = n ? e=>n(this._getRootViewId(), e) : void 0;
            o && t && (o = i=>{
                e.onPressCallback && e.onPressCallback(this._getRootViewId(), i, void 0, t)
            }
            );
            const r = e.coachMarkDescriptor
              , a = {
                style: e.iconButtonStyles,
                iconTextStyle: e.textStyle,
                size: i,
                color: this._themeColors.headerIconColor,
                hoverColor: this._themeColors.iconHoverColor,
                icon: e.icon,
                title: e.title,
                accessibilityLabel: e.accessibilityLabel || e.title,
                disabled: e.disabled,
                key: e.key,
                onPress: o
            };
            return r ? s.createElement(u.default.IconButton, Object.assign({
                anchorRef: e.ref,
                coachMarkType: r.type,
                positions: r.positions,
                onAnchorPress: r.onPress,
                anchorAccessibilityLabel: r.accessibilityLabel
            }, a)) : s.createElement(P.default, Object.assign({
                ref: e.ref
            }, a))
        }
        _renderPlusButton(e) {
            const t = T.default.actionButtonForHubTab(this.state.currentHubTab, !!this.props.superComposerEnabled, !!this.props.disableHighBandwidthOperations, !this.props.showCallsActionButton);
            if (t) {
                const i = this.state.currentHubTab === B.HubTab.Recents && this.props.superComposerEnabled && this._isPresentedInTabletLeftNav() ? {
                    type: g.CoachMarkType.Plus,
                    onPress: ()=>{
                        t.onPressCallback && t.onPressCallback(this._getRootViewId())
                    }
                    ,
                    accessibilityLabel: t.title
                } : void 0;
                return this._renderIconButton(Object.assign(Object.assign({}, t), {
                    ref: this._onPlusButtonRef,
                    iconButtonStyles: e,
                    coachMarkDescriptor: i,
                    key: "plus"
                }), ()=>this._plusButton)
            }
        }
        _renderSearchButton(e) {
            const t = T.default.searchButtonForHubTab(this.state.currentHubTab, this.state.isMobileScreenReaderEnabled);
            if (t)
                return this._renderIconButton(Object.assign(Object.assign({}, t), {
                    iconButtonStyles: e,
                    key: "search"
                }))
        }
        _renderMeetNowButton(e) {
            const t = this.state.enableNewMeetNowName ? "MeetNow.NewMeeting" : "MeetNow.FeatureName";
            return this._renderIconButton({
                title: w.getString(t),
                icon: E.default.getMeetNowIcon(),
                iconButtonStyles: e,
                onPressCallback: this._onMeetNowButtonClick,
                key: "meetnow"
            })
        }
        _renderFeedbackButton(e) {
            const t = w.getString("HubHeaderPanel.FeedbackButtonLabel");
            return this._renderIconButton({
                title: t,
                icon: K.SkypeIcon.HeartOutline,
                iconButtonStyles: e,
                onPressCallback: this._onFeedbackButtonClick,
                key: "feedback"
            })
        }
        _renderNotificationsSettingsButton(e) {
            return this._renderIconButton({
                title: w.getString("MyProfilePanel.OverflowButtonTitle"),
                icon: j.moreIcon(),
                iconButtonStyles: e,
                ref: this._onNotificationsSettingsButtonRef,
                onPressCallback: this._onNotificationsSettingsButtonClick,
                key: "notificationsettings"
            })
        }
        _renderRecentsFilterButton(e, t) {
            const i = (ie.Right,
            e);
            return this._renderIconButton({
                title: w.getString("MobileRecentsFilter.ManageChats"),
                icon: t === ie.Right ? j.moreIcon() : K.SkypeIcon.Filter,
                iconButtonStyles: i,
                ref: this._onRecentsFilterButtonRef,
                onPressCallback: this._onRecentsFilterButtonClick,
                key: "filter"
            })
        }
        _renderContactsFilterButton(e, t) {
            const i = (ie.Right,
            e);
            return this.state.contactsPanelTabSelected !== C.ContactsPanelFilter.All || this.state.enableAlwaysShowActiveNowFilter ? this._renderIconButton({
                title: w.getString("ContactsPanelFilter.FilterOptions"),
                icon: t === ie.Right ? j.moreIcon() : K.SkypeIcon.Filter,
                iconButtonStyles: i,
                ref: this._onContactsFilterButtonRef,
                onPressCallback: this._onContactsFilterButtonClick,
                key: "contactsFilter"
            }) : void 0
        }
        _renderNotificationButton(e) {
            const t = w.getString("Hub.NotificationCounterScreenReaderLabel", {
                count: this.props.unreadAlertsCount || 0
            })
              , i = this._renderIconButton({
                title: t,
                accessibilityLabel: t,
                icon: K.SkypeIcon.Alert,
                iconButtonStyles: e,
                onPressCallback: this._onNotificationsButtonClick,
                key: "notifications"
            });
            let n;
            return n = this.props.unreadAlertsCount ? s.createElement(s.View, {
                key: "notifications",
                style: e
            }, i, s.createElement(c.default, {
                style: re.badgeStyle,
                blockPointerEvents: !0,
                count: this.props.unreadAlertsCount.toString(),
                rawCount: this.props.unreadAlertsCount,
                colorStyle: re.redBadge,
                borderColor: this._themeColors.primaryBackgroundColor,
                badgeSize: c.BadgeSize.Medium,
                borderWidth: 2,
                isHighPriority: !0,
                fixedSize: !0,
                importantForAccessibility: s.Types.ImportantForAccessibility.NoHideDescendants
            })) : i,
            s.createElement(s.View, {
                key: "notifications"
            }, n)
        }
        _getLeftControls(e) {
            const t = [re.iconContainer];
            this._useLandscapeLayout() && t.push(re.iconContainerLandscape);
            const i = n.map(e.leftControls, e=>this._renderControlForType(e, t, ie.Left))
              , o = [re.leftControls];
            return e.leftControls.length <= 1 && e.rightControls.length <= 1 && o.push(re.smallControls),
            s.createElement(s.View, {
                style: o
            }, i)
        }
        _renderControlForType(e, t, i) {
            switch (e) {
            case v.HeaderButtonType.Profile:
                const e = w.getString("UserIcon.MyInfo");
                return s.createElement(u.default.Button, {
                    key: "usericon",
                    onPress: this._onUserIconButtonClick,
                    style: re.userIconLeftContainer,
                    activeOpacity: .8,
                    coachMarkType: g.CoachMarkType.Profile,
                    accessibilityLabel: e,
                    anchorAccessibilityLabel: e,
                    onAnchorPress: this._onUserIconAnchorClick,
                    anchorRef: this._onUserIconRef
                }, this._renderUserIcon());
            case v.HeaderButtonType.Notifications:
                return this._renderNotificationButton(t);
            case v.HeaderButtonType.RecentsFilter:
                return this._renderRecentsFilterButton(t, i);
            case v.HeaderButtonType.Feedback:
                return this._renderFeedbackButton(t);
            case v.HeaderButtonType.Action:
                return this._renderPlusButton(t);
            case v.HeaderButtonType.Search:
                return this._renderSearchButton(t);
            case v.HeaderButtonType.NotificationsSettings:
                return this._renderNotificationsSettingsButton(t);
            case v.HeaderButtonType.Call:
                return this._renderIconButton({
                    title: w.getString("HubHeaderPanel.QuickCallButtonLabel"),
                    icon: K.SkypeIcon.CallList,
                    iconButtonStyles: t,
                    onPressCallback: this._onQuickCallButtonClick,
                    ref: this._onQuickCallButtonRef,
                    key: "quickcall"
                });
            case v.HeaderButtonType.ContactsFilter:
                return this._renderContactsFilterButton(t, i);
            case v.HeaderButtonType.MeetNow:
                return this._renderMeetNowButton(t)
            }
        }
        _renderUserIcon() {
            return s.createElement($.UserIcon, {
                key: "usericon",
                size: Y.UserIconSize.Size40,
                userMri: L.getSkypeMri(),
                hideBlockedOverlay: !0,
                statusTypes: ee.myAllowedStatuses(),
                statusBorderColor: this._themeColors.primaryBackgroundColor
            })
        }
        _shouldRenderUserIcon(e) {
            return e.centerControl === v.HeaderButtonType.Profile || k.shouldRunUserIconExperiment(e, this.state.displayUserIconInAllHubs)
        }
        _getCenterControls(e) {
            let t, i, o;
            if (this._shouldRenderUserIcon(e))
                t = this._renderUserIcon();
            else if (e.centerControl === v.HeaderButtonType.Title) {
                let t;
                switch (this.state.currentHubTab) {
                case B.HubTab.Recents:
                    t = w.getString("Hub.RecentsTabTitle");
                    break;
                case B.HubTab.Calls:
                    t = w.getString("Hub.CallsTabTitle");
                    break;
                case B.HubTab.People:
                    t = w.getString("Hub.ContactsTabTitle");
                    break;
                case B.HubTab.Notifications:
                    t = w.getString("Notifications.Notify")
                }
                if (t && this.state.viewWidth) {
                    const n = e.leftControls.length > 1 || e.rightControls.length > 1 ? ne : oe
                      , o = this.state.viewWidth - 2 * n - this.state.safeAreaHorizontalInsets.left - this.state.safeAreaHorizontalInsets.right
                      , r = s.Styles.createViewStyle({
                        width: o
                    }, !1)
                      , a = h.default.headerAccessibilityInfo(t);
                    i = s.createElement(s.View, {
                        style: [re.titleWrapper, this._useLandscapeLayout() ? re.titleWrapperLandscape : void 0],
                        ref: this._onTitleRef,
                        accessibilityLabel: a.accessibilityLabel,
                        importantForAccessibility: s.Types.ImportantForAccessibility.Yes,
                        accessibilityTraits: a.accessibilityTraits
                    }, s.createElement(X.PanelHeader, {
                        key: "title",
                        numberOfLines: 1,
                        style: [re.title, r],
                        accessibilityHidden: !0
                    }, t))
                }
            }
            if (i)
                o = i;
            else {
                const e = w.getString("UserIcon.MyInfo") + (n.isUndefined(this.state.userStatus) ? "" : ", " + ee.userStatusLabel(this.state.userStatus, this.state.gender));
                o = s.createElement(u.default.Button, {
                    key: "usericon",
                    onPress: this._onUserIconButtonClick,
                    style: re.iconContainer,
                    activeOpacity: .8,
                    coachMarkType: g.CoachMarkType.Profile,
                    accessibilityLabel: e,
                    anchorAccessibilityLabel: e,
                    onAnchorPress: this._onUserIconAnchorClick,
                    anchorRef: this._onUserIconRef
                }, t)
            }
            return this.props.animatedTransitionStyle && (o = s.createElement(s.Animated.View, {
                style: this.props.animatedTransitionStyle
            }, o)),
            s.createElement(s.View, {
                style: q.overflowVisible
            }, o)
        }
        _getRightControls(e) {
            const t = [re.iconContainer];
            this._useLandscapeLayout() && t.push(re.iconContainerLandscape);
            const i = n.map(e.rightControls, e=>this._renderControlForType(e, t, ie.Right))
              , o = [re.rightControls];
            return e.leftControls.length <= 1 && e.rightControls.length <= 1 && o.push(re.smallControls),
            s.createElement(s.View, {
                style: o
            }, i)
        }
        _useLandscapeLayout() {
            return this.props.deviceOrientation === o.DeviceOrientation.Landscape && !this._getContext().isPresentedInDesktopLeftNav
        }
        _registerMobileFocusHandler(e) {
            Q.useTabletUINoSubscription() && h.default.registerMobileFocusHandler(b.FocusEvent.CloseMobileModal, e)
        }
        _pauseWhenNotVisible() {
            return !0
        }
    }
    e.exports = ae
}
, function(e, t, i) {
    "use strict";
    const n = i(52)
      , o = i(1844)
      , s = i(1226)
      , r = i(55)
      , a = i(282)
      , l = i(107);
    class c extends o.default {
        constructor() {
            super(...arguments),
            this._selectedConversationIdEvent = new n.default,
            this._getSelectedConversationIdEvent = ()=>this._selectedConversationIdEvent
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.selectedConversationId && this._selectedConversationIdEvent.fire(this.props.selectedConversationId)
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this.props.selectedConversationId !== e.selectedConversationId && this._selectedConversationIdEvent.fire(e.selectedConversationId)
        }
        _renderSceneContent(e, t) {
            if (!e)
                return;
            const i = {
                ref: this._mountedRefsMap.onComponentRef(t),
                isPresentedInDesktopLeftNav: !0
            };
            return e instanceof r.ConversationsListNavigationContext ? s.default.renderComponent(e, Object.assign(Object.assign({}, i), {
                getSelectedConversationIdEvent: this._getSelectedConversationIdEvent
            }), this.props.useDesktopUI) : s.default.renderComponent(e, i, this.props.useDesktopUI)
        }
        _navigatorSceneConfigTypeForNavContext(e, t) {
            return e instanceof r.SearchNavigationContext ? t && t instanceof r.ConversationsListNavigationContext ? a.default.sceneConfigForSearchTransition() : a.default.fade() : e instanceof r.QuickCallNavigationContext ? t && t instanceof r.ConversationsListNavigationContext && e.state.searchOnly ? a.default.sceneConfigForSearchTransition() : a.default.floatFromBottom(0) : e.state.navigationDirection === l.StackNavigationDirection.Present ? a.default.floatFromBottom(0) : a.default.floatFromRight(0)
        }
    }
    e.exports = c
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(51)
      , s = i(115)
      , r = i(10)
      , a = i(5)
      , l = i(1226)
      , c = i(8)
      , d = i(59)
      , u = a.lazyProperties({
        viewContainer: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            borderRightWidth: 1,
            borderStyle: "solid",
            borderColor: c.Color.gray50
        })
    });
    class g extends o.default {
        _buildState(e, t) {
            return {
                sidebarWidth: r.SideBarWidths.base,
                useTabletUI: d.useTabletUI()
            }
        }
        _createContext() {
            const e = super._createContext();
            return e.isPresentedInDesktopLeftNav = !0,
            e.getCoachMarkArea = ()=>s.CoachMarkAreaType.LeftNavigation,
            e
        }
        render() {
            if (!this.props.navContext)
                return null;
            const e = l.default.renderComponent(this.props.navContext, {
                isPresentedInDesktopLeftNav: !0,
                isCollapsed: !1
            }, !0)
              , t = [u.viewContainer, this.state.useTabletUI ? this._themeStyles.primaryBackgroundColorStyle : this._themeStyles.secondaryBackgroundColorStyle, this._themeStyles.dividerBorderColorStyle, n.Styles.createViewStyle({
                width: this.state.sidebarWidth
            }, !1)];
            return this._useDarkTheme() && t.push(this._themeStyles.headerShadowBorderColorStyle),
            n.createElement(n.View, {
                style: t,
                importantForLayout: !0,
                importantForAccessibility: this.props.importantForAccessibility
            }, e)
        }
    }
    e.exports = g
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(16)
      , r = i(43)
      , a = i(2)
      , l = i(110)
      , c = i(3)
      , d = i(124)
      , u = i(4)
      , g = i(3193)
      , h = i(17)
      , p = i(55)
      , m = i(64)
      , S = i(9);
    class C extends r.default {
        constructor() {
            super(...arguments),
            this._navigateToRecents = (e,t)=>{
                if (t !== this._getRootViewId())
                    return !1;
                const i = S.newCauseId();
                return c.log(a.LogTraceArea.Navigation, "MainStageNavigationView._navigateToRecents, causeId: " + i),
                h.navigateToDesktopRecents(i, this._conversationMri, this._callId ? a.NavigationConversationOrigin.Call : void 0),
                l.setFocusWithDelay(l.FocusEvent.Recent, 0),
                !0
            }
            ,
            this._toggleGallery = (e,t)=>{
                if (t !== this._getRootViewId())
                    return !1;
                const i = S.newCauseId();
                return c.log(a.LogTraceArea.Navigation, "MainStageNavigationView._toggleGallery,  causeId: " + i),
                !this._conversationMri || s.isConversationWithPhoneNumber(this._conversationMri) || s.isS4BBridgeMri(this._conversationMri) || (this.state.isGalleryShowing ? (o.Accessibility.announceForAccessibility(u.getString("AccessibilityLabel.GalleryClosed")),
                h.closeGalleryPanel(i, this._getContext())) : (o.Accessibility.announceForAccessibility(u.getString("AccessibilityLabel.GalleryOpened")),
                h.navigateToGallery(this._conversationMri, p.GalleryViewMode.All, this._getContext()))),
                !0
            }
        }
        _buildState(e, t) {
            return {
                isGalleryShowing: m.default.isGalleryShowing(this._getRootViewId())
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._registerKeyboardHandlers()
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._unregisterKeyboardHandlers()
        }
        render() {
            if (!this.props.splitNavContext)
                return null;
            const e = this.props.splitNavContext.getNavStack()
              , t = {
                isPresentedInDesktopContentPanel: !0,
                isAloneInNavStack: e.length <= 1
            }
              , i = g.default.renderComponentForContext(n.last(e), t);
            return this._conversationMri = i.conversationMri,
            this._callId = i.callId,
            i.component || null
        }
        _registerKeyboardHandlers() {
            d.default.addHandler(a.KeyboardShortcut.NavigateToRecents, this._navigateToRecents),
            d.default.addHandler(a.KeyboardShortcut.NavigateToHistory, this._navigateToRecents),
            d.default.addHandler(a.KeyboardShortcut.ToggleGallery, this._toggleGallery)
        }
        _unregisterKeyboardHandlers() {
            d.default.removeHandler(a.KeyboardShortcut.NavigateToRecents, this._navigateToRecents),
            d.default.removeHandler(a.KeyboardShortcut.NavigateToHistory, this._navigateToRecents),
            d.default.removeHandler(a.KeyboardShortcut.ToggleGallery, this._toggleGallery)
        }
    }
    e.exports = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(1845)
      , r = i(3257)
      , a = i(3270)
      , l = i(3271)
      , c = i(1819)
      , d = i(4)
      , u = i(896)
      , g = i(55)
      , h = i(592);
    i(1868);
    t.default = class {
        static renderComponentForContext(e, t) {
            let i, p, m;
            if (e instanceof g.JoiningGuestScreenContext)
                i = o.createElement(h, {
                    showSpinner: !0,
                    statusText: d.getString("UrlConverter.JoiningConversationMessage"),
                    showLoginFallback: !1,
                    loginCallback: n.noop,
                    hideDisclaimer: !0
                });
            else if (e instanceof g.WelcomeScreenContext)
                i = o.createElement(l, Object.assign({}, t));
            else if (e instanceof g.DesktopContentPanelNavigationContext) {
                const n = e.getConversationContext();
                p = n ? n.state.conversationId : void 0,
                i = o.createElement(r, Object.assign({
                    navContext: n
                }, t))
            } else
                e instanceof g.CallNavigationContext ? (m = e.state.callId,
                p = e.state.conversationMri,
                i = o.createElement(s, Object.assign({
                    key: "call" + m,
                    initialConversationMri: p,
                    callId: m,
                    liveState: e.state.liveState,
                    navigationReason: e.state.reason,
                    convertedVideoToAudio: e.state.convertedVideoToAudio
                }, t))) : e instanceof u.default.NavigationContext.MeetNowNavigationContext ? i = u.default.StackNavigator.renderSceneContent(e, t) : e instanceof g.ForcedUpgradeContext ? i = o.createElement(a, Object.assign({}, t)) : e instanceof g.LeftNavigationViewContext ? i = o.createElement(c, Object.assign({
                    navContext: e,
                    viewMode: e.state.viewMode
                }, t)) : g.SXPlaygroundNavigationContext;
            return {
                component: i,
                conversationMri: p,
                callId: m
            }
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(77);
    class r extends o.ComponentBase {
        static rowHeight(e) {
            return 1 + (e.marginTop || 0) + (e.marginBottom || 0)
        }
        render() {
            return n.createElement(s, Object.assign({}, this.props))
        }
    }
    t.default = r,
    r.buildRow = e=>n.createElement(r, Object.assign({}, e))
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(589)
      , r = i(151)
      , a = i(5)
      , l = i(134)
      , c = i(8)
      , d = i(14)
      , u = i(15)
      , g = i(12);
    var h;
    !function(e) {
        e[e.Default = 0] = "Default",
        e[e.Center = 1] = "Center"
    }(h = t.GridAlignment || (t.GridAlignment = {}));
    const p = a.lazyProperties({
        buttonStyle: ()=>o.Styles.createViewStyle({
            height: 80,
            alignSelf: "stretch",
            alignItems: "center",
            justifyContent: "center",
            backgroundColor: c.Color.transparent
        }),
        tabTitle: ()=>o.Styles.createTextStyle({
            textAlign: "center",
            marginTop: 5,
            height: 28
        }),
        gridView: ()=>o.Styles.createViewStyle({
            flexWrap: "wrap",
            flexDirection: "row",
            justifyContent: "space-around",
            alignItems: "center",
            marginTop: 8,
            paddingHorizontal: 10
        }),
        icon: ()=>o.Styles.createViewStyle({
            width: 40,
            height: 40,
            borderRadius: 8,
            alignItems: "center",
            justifyContent: "center"
        })
    });
    class m extends g.default {
        constructor() {
            super(...arguments),
            this._mountedRefsMap = new l.default,
            this._onLayout = e=>{
                this.state.viewWidth !== e.width && this.setState({
                    viewWidth: e.width
                })
            }
            ,
            this._renderButton = (e,t)=>{
                const i = n.isArray(e.icon) ? e.icon : [e.icon];
                return o.createElement(o.View, {
                    key: e.key,
                    style: t
                }, o.createElement(r.HoverableButton, {
                    ref: this._mountedRefsMap.onComponentRef("griditem" + e.key),
                    style: p.buttonStyle,
                    title: e.title,
                    onPress: e.onPress,
                    activeOpacity: .8,
                    accessibilityLabel: e.accessibilityLabel,
                    disableHoverOpacityStyles: !0,
                    hoverStyle: this._themeStyles.rowHoverViewStyle
                }, o.createElement(o.View, {
                    style: [p.icon, this._themeStyles.secondaryBackgroundColorStyle]
                }, o.createElement(s.default, {
                    icons: i
                })), o.createElement(u.Caption, {
                    style: p.tabTitle,
                    numberOfLines: 2,
                    allowFontScaling: !1,
                    colorThemeOverride: this.props.colorThemeOverride
                }, e.title)))
            }
            ,
            this._renderSpacer = (e,t)=>o.createElement(o.View, {
                key: e,
                style: t
            })
        }
        static rowHeight(e, t=4) {
            if (!e)
                return 0;
            return 8 + 80 * Math.ceil(e / t)
        }
        _buildState(e, t) {
            const i = {};
            return t && (i.viewWidth = e.estimatedWidth || 0),
            i
        }
        render() {
            let e;
            if (this.state.viewWidth) {
                const t = this.props.buttonDescriptors
                  , i = Math.min(t.length, this.props.columnCount || 4)
                  , s = [o.Styles.createViewStyle({
                    width: i > 0 ? Math.floor((this.state.viewWidth - 20) / i) : this.state.viewWidth,
                    alignItems: "center",
                    justifyContent: "center"
                }, !1), d.noncollapsibleView];
                if (e = n.map(this.props.buttonDescriptors, e=>this._renderButton(e, s)),
                this.props.gridAlignment !== h.Center) {
                    const n = t.length % i == 0 ? 0 : i - t.length % i;
                    for (let t = 0; t < n; t++)
                        e.push(this._renderSpacer("spacer" + t, s))
                }
            }
            return o.createElement(o.View, {
                style: p.gridView,
                ignorePointerEvents: !0,
                onLayout: this._onLayout
            }, e)
        }
    }
    t.default = m,
    m.buildRow = e=>o.createElement(m, Object.assign({}, e))
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(39);
    class o extends n.TelemetryEventBase {
        getEventName() {
            return "messaging_tabs"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.Action = this.getActionName(),
            e
        }
    }
    t.MessagingTabsHiddenEvent = class extends o {
        constructor(e, t) {
            super(),
            this._visibleTabs = e,
            this._overflownTabs = t
        }
        getActionName() {
            return "TabsHidden"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.VisibleTabs = this._visibleTabs,
            e.HiddenTabs = this._overflownTabs,
            e
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(287)
      , r = i(95)
      , a = i(253)
      , l = i(201);
    class c extends o.ComponentBase {
        render() {
            const e = a.getIconSize(this.props.size);
            return this.props.isOneOnOne ? n.createElement(r.UserIcon, {
                userMri: this.props.mri,
                size: e.user,
                statusTypes: this.props.showStatus ? l.contactAllowedStatuses() : void 0,
                statusBorderColor: this.props.statusBorderColor
            }) : n.createElement(s.ConversationIcon, {
                conversationId: this.props.mri,
                size: e.conversation
            })
        }
    }
    t.default = c
}
, , , function(e, t, i) {
    "use strict";
    const n = i(117)
      , o = i(0)
      , s = i(63)
      , r = i(6)
      , a = i(51)
      , l = i(10)
      , c = i(859)
      , d = i(5)
      , u = i(4)
      , g = i(17)
      , h = i(306)
      , p = i(41)
      , m = i(8)
      , S = i(23)
      , C = i(11)
      , y = d.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            flex: 1,
            backgroundColor: m.Color.blue
        }),
        content: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "center",
            alignItems: "center",
            justifyContent: "center",
            maxWidth: 600,
            marginVertical: 15
        }),
        illustration: ()=>o.Styles.createViewStyle({
            height: 235,
            width: 321,
            marginBottom: 30
        }),
        text: ()=>o.Styles.createTextStyle({
            font: S.font.uiDisplayBold,
            color: m.Color.white,
            textAlign: "center",
            marginBottom: 15
        }),
        title: ()=>o.Styles.createTextStyle({
            fontSize: C.IconSize.size48,
            marginBottom: 15
        }),
        subtitle: ()=>o.Styles.createTextStyle({
            fontSize: C.IconSize.size16,
            marginBottom: 90
        }),
        updateButton: ()=>o.Styles.createButtonStyle({
            height: 60,
            minWidth: 300,
            marginBottom: 15
        }),
        learnMoreButtonText: ()=>o.Styles.createTextStyle({
            fontSize: C.IconSize.size14
        }),
        learnMoreButtonTextHover: ()=>o.Styles.createTextStyle({
            textDecorationLine: "underline"
        })
    });
    class f extends a.default {
        constructor() {
            super(...arguments),
            this._goToLearnMorePage = ()=>{
                const e = h.addSsoFlagToUrl(r.default.getConfigSettings().helpGoParam.upgradeLearnMore, !0);
                g.navigateToSsoWebFlow(e, "", "", this._getRootViewId(), [], !0)
            }
            ,
            this._onLearnMoreHoverStart = ()=>{
                this.setState({
                    isLearnMoreButtonHovered: !0
                })
            }
            ,
            this._onLearnMoreHoverEnd = ()=>{
                this.setState({
                    isLearnMoreButtonHovered: !1
                })
            }
        }
        render() {
            const e = [y.text, y.learnMoreButtonText];
            return this.state.isLearnMoreButtonHovered && e.push(y.learnMoreButtonTextHover),
            o.createElement(n.GradientView, {
                style: y.container,
                colors: l.BlueGradient,
                direction: n.GradientDirection.BOTTOM
            }, o.createElement(o.View, {
                style: y.content
            }, o.createElement(o.Image, {
                style: y.illustration,
                resizeMode: "contain",
                source: s.Collection.ELECTRON_UPDATE_ILLUSTRATION
            }), o.createElement(o.Text, {
                style: [y.text, y.title]
            }, u.getString("ElectronForceUpgradeScreen.Title")), o.createElement(o.Text, {
                style: [y.text, y.subtitle]
            }, u.getString("ElectronForceUpgradeScreen.Subtitle")), o.createElement(p, {
                buttonStyle: l.SXButtonStyle.LightFill,
                title: u.getString("ElectronForceUpgradeScreen.UpdateButton"),
                onPress: c.quitAndUpdate,
                style: y.updateButton
            }), o.createElement(o.Button, {
                onPress: this._goToLearnMorePage,
                onHoverStart: this._onLearnMoreHoverStart,
                onHoverEnd: this._onLearnMoreHoverEnd
            }, o.createElement(o.Text, {
                style: e
            }, u.getString("ElectronForceUpgradeScreen.LearnMoreButton")))))
        }
    }
    e.exports = f
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(6)
      , r = i(502)
      , a = i(413)
      , l = i(51)
      , c = i(114)
      , d = i(3272)
      , u = i(267)
      , g = i(42)
      , h = i(10)
      , p = i(245)
      , m = i(2)
      , S = i(206)
      , C = i(110)
      , y = i(3)
      , f = i(118)
      , _ = i(3273)
      , b = i(1246)
      , v = i(5)
      , T = i(175)
      , P = i(4)
      , A = i(3275)
      , k = i(134)
      , I = i(20)
      , w = i(184)
      , N = i(97)
      , M = i(291)
      , E = i(232)
      , x = i(165)
      , D = i(156)
      , L = i(41)
      , R = i(59)
      , B = i(15)
      , O = i(109)
      , F = i(135)
      , V = i(29)
      , U = i(67)
      , H = i(45)
      , W = i(201)
      , z = i(9)
      , G = i(183);
    var K;
    !function(e) {
        e[e.StartNewConversation = 0] = "StartNewConversation"
    }(K || (K = {}));
    const j = v.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            flex: 1,
            paddingHorizontal: 45,
            alignItems: "center",
            justifyContent: "center"
        }),
        innerContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignItems: "center",
            justifyContent: "center",
            alignSelf: "stretch"
        }),
        headerText: ()=>o.Styles.createTextStyle({
            textAlign: "center",
            wordBreak: "break-word"
        }),
        welcomeSectionContainer: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch",
            flexDirection: "row",
            marginVertical: 50
        }),
        welcomeSectionContainerVertical: ()=>o.Styles.createViewStyle({
            flexDirection: "column"
        }),
        avatarContainer: ()=>o.Styles.createViewStyle({
            alignItems: "center",
            alignSelf: "center"
        }),
        profileUpdateWrapper: ()=>o.Styles.createViewStyle({
            alignItems: "center",
            alignSelf: "stretch",
            justifyContent: "center",
            marginVertical: 38
        }),
        startConversationButton: ()=>o.Styles.createViewStyle({
            marginTop: 36,
            marginBottom: 24,
            alignSelf: "center"
        }),
        startConversationWrapper: ()=>o.Styles.createViewStyle({
            maxWidth: 350
        }),
        startConversationDescription: ()=>o.Styles.createTextStyle({
            textAlign: "center"
        })
    });
    class q extends l.default {
        constructor() {
            super(...arguments),
            this._wasWelcomeTextAnnounced = !1,
            this._animatedOpacityValue = new o.Animated.Value(0),
            this._animatedOpacityStyle = o.Styles.createAnimatedViewStyle({
                opacity: this._animatedOpacityValue
            }),
            this._mountedRefsMap = new k.default,
            this._landingViewDisplayEventTracked = !1,
            this._landingPageShownTracked = !1,
            this._maybeLaunchTutorial = e=>{
                if (!e.isTutorialReady)
                    return;
                const t = !e.isFirstRun && !e.wasTutorialLaunched;
                e.enableCoachMarks && t && V.setTimeout(()=>{
                    this.isComponentMounted() && (E.default.track(new M.TutorialLaunched(M.TutorialLaunchOrigin.LandingScreenStandard,!1)),
                    this._launchTutorial())
                }
                , 1e3)
            }
            ,
            this._maybeAnnounceWelcomeText = ()=>{
                this._wasWelcomeTextAnnounced || (this._wasWelcomeTextAnnounced = !0,
                o.Accessibility.announceForAccessibility(this._getWelcomeText()))
            }
            ,
            this._launchTutorial = ()=>{
                const e = z.newCauseId();
                y.log(m.LogTraceArea.Navigation, "LandingScreen._launchTutorial, causeId: " + e),
                u.default.runFirstRunSequence(m.CoachMarkOrigin.LandingPage, this.state.useTabletUI),
                S.default.setWasTutorialStarted(!0)
            }
            ,
            this._onLayoutProfileLanding = e=>{
                if (this.isComponentMounted()) {
                    const t = e.height < 440;
                    this.state.showSmallProfileLanding !== t && this.setState({
                        showSmallProfileLanding: t
                    })
                }
            }
            ,
            this._onContainerLayout = e=>{
                if (this.isComponentMounted()) {
                    const t = e.height < 700;
                    this.state.showCompactCheckAccountSection !== t && this.setState({
                        showCompactCheckAccountSection: t
                    })
                }
            }
            ,
            this._onMyAvatarSelected = ()=>{
                y.track(new x.MyAvatarChanged(m.AvatarUpdateLocation.LandingScreen))
            }
            ,
            this._onMyAvatarRemoved = ()=>{
                y.track(new x.MyAvatarRemoved(m.AvatarUpdateLocation.LandingScreen))
            }
            ,
            this._onMainScreenCtaButtonClick = e=>{
                e.stopPropagation(),
                this._onCtaButtonPress(K.StartNewConversation)
            }
        }
        _buildState(e, t) {
            var i;
            const n = I.getSkypeMri()
              , o = H.getFullUserProfileByMri(n)
              , a = s.default.getOnboardingFeatures()
              , l = R.useTabletUI();
            let d = {
                displayName: o.getShortName(),
                gender: o.gender,
                userMri: n,
                enableCoachMarks: a.enableCoachMarks && c.default.onboarding().canSeeCoachMarks,
                isFirstRun: S.default.isStartupFirstRun(),
                isNewUser: S.default.isStartupNewUser(),
                isSetupWizardCompleted: S.default.isSetupWizardCompleted(),
                checkAccountGoParam: s.default.getConfigSettings().checkAccountUrl.goParam,
                fixedHeight: l ? G.default.windowHeightWithoutStatusBar(this._getRootViewId()) : 0,
                useTabletUI: l,
                isKeyboardShown: l && f.isKeyboardSeen(),
                isMigrationLandingScreenSeen: S.default.isMigrationLandingScreenSeen(),
                isTutorialReady: S.default.isCoachmarkTutorialReady(),
                wasTutorialLaunched: S.default.wasTutorialStarted(),
                signedInAsId: I.getMsaIdFromSignIn(),
                enableOnboardingLandingScreenConfigs: a.landingPageWithCards,
                setupWizardCompletionTimestamp: S.default.setupWizardCompletionTimestamp(),
                whatsNewFlowAfterAppUpdate: a.landingPageWithCards.whatsNewCardAfterUpdate
            };
            return t && (d.showSmallProfileLanding = !1,
            d.showCompactCheckAccountSection = !1,
            d.enableOnboardingLandingScreenConfigs && d.enableOnboardingLandingScreenConfigs.enabled && (d.landingPageCardIdsForToday = b.default.getLandingPageCardsIdsForToday(),
            d.enableLandingPageCardsShareProfileButton = b.default.shouldDisplayProfileButtonToday()),
            (null === (i = d.whatsNewFlowAfterAppUpdate) || void 0 === i ? void 0 : i.enabled) && r.default.getAppUpdatedStatus() && d.landingPageCardIdsForToday && (d.landingPageCardIdsForToday = b.default.getLandingPageCardsWithWhatsNewCard(d.landingPageCardIdsForToday))),
            d
        }
        componentDidMount() {
            super.componentDidMount(),
            w.timing(this._animatedOpacityValue, {
                toValue: 1,
                delay: w.delayDuration(1e3),
                duration: 300,
                easing: o.Animated.Easing.Out(),
                useNativeDriver: !0
            }).start(()=>{
                this.state.isSetupWizardCompleted && this._maybeAnnounceWelcomeText()
            }
            ),
            this._maybeLaunchTutorial(this.state),
            this._landingPageShownTracked || (E.default.track(new M.LandingPageShown),
            this._landingPageShownTracked = !0)
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            !t.isSetupWizardCompleted && this.state.isSetupWizardCompleted && this._maybeAnnounceWelcomeText(),
            !t.isTutorialReady && this.state.isTutorialReady && this._maybeLaunchTutorial(this.state),
            this._landingViewDisplayEventTracked || (this._landingViewDisplayEventTracked = !0,
            E.default.track(new M.WelcomeViewWithProfileUpdateDisplayed))
        }
        _getWelcomeText() {
            const e = T.getLocalizeParamForGender(this.state.gender);
            return this.state.displayName ? P.getString("Onboarding.LandingScreenTitle", {
                name: this.state.displayName,
                gender: e
            }) : P.getString("Onboarding.LandingScreenTitleNoName")
        }
        _renderWelcomeViewWithProfileUpdate() {
            const e = P.getString("Onboarding.LandingScreenStartConversationAlternativeCallToAction")
              , t = [j.welcomeSectionContainer, j.welcomeSectionContainerVertical, j.profileUpdateWrapper];
            let i;
            return this.state.showSmallProfileLanding || (i = o.createElement(a.default, {
                style: j.avatarContainer,
                mri: I.getSkypeMri(),
                iconSize: U.UserIconSize.Size120,
                statusTypes: W.myAllowedStatuses(),
                statusBorderColor: this._themeColors.primaryBackgroundColor,
                accessibilityLabel: P.getString("MyProfilePanel.SelectAvatarAccessibilityLabel"),
                onAvatarSelected: this._onMyAvatarSelected,
                onAvatarRemoved: this._onMyAvatarRemoved,
                origin: m.AvatarPickerOrigin.LandingScreen
            })),
            o.createElement(o.View, {
                style: j.innerContainer,
                onLayout: this._onLayoutProfileLanding
            }, o.createElement(B.Header, {
                size: this.state.showSmallProfileLanding ? 3 : 2,
                style: j.headerText
            }, this._getWelcomeText()), o.createElement(o.View, {
                style: t
            }, i, o.createElement(A.default, {
                userMri: this.state.userMri
            }), o.createElement(o.View, {
                style: j.startConversationWrapper
            }, o.createElement(L, {
                ref: this._mountedRefsMap.onComponentRef("cta" + K.StartNewConversation),
                style: j.startConversationButton,
                buttonStyle: h.SXButtonStyle.ThemeFill,
                onPress: this._onMainScreenCtaButtonClick,
                buttonSize: this.state.showSmallProfileLanding ? h.SXButtonSize.Small : h.SXButtonSize.Medium,
                title: e
            }), o.createElement(B.BodyText, {
                style: j.startConversationDescription,
                textThemeColor: B.TextThemeColor.Secondary
            }, P.getString("Onboarding.LandingScreenStartConversationDescription")))))
        }
        _renderWelcomeViewWithCards(e, t={}) {
            return o.createElement(o.View, {
                style: j.innerContainer
            }, o.createElement(_.LandingPageCards, {
                cards: e,
                settings: t
            }))
        }
        _renderCheckAccountSection() {
            if (!this.state.isKeyboardShown && !this.state.useTabletUI)
                return o.createElement(d, {
                    signedInAsId: this.state.signedInAsId,
                    checkAccountGoParam: this.state.checkAccountGoParam,
                    useCompactLayout: this.state.showCompactCheckAccountSection
                })
        }
        _updateCurrentTheme(e, t) {
            const i = F.isDarkTheme(e) && !F.isAccessibleTheme(e) ? O.Theme.ColorfulDark : e;
            return super._updateCurrentTheme(i, t)
        }
        render() {
            const e = [j.container, this._themeStyles.primaryBackgroundColorStyle, this._animatedOpacityStyle]
              , t = this._shouldRenderEngagementLandingScreen();
            let i;
            return this.state.useTabletUI && e.push(o.Styles.createViewStyle({
                height: this.state.fixedHeight
            }, !1)),
            i = t ? this._renderEngagementWelcomeScreen() : this._renderWelcomeViewWithProfileUpdate(),
            o.createElement(o.Animated.View, {
                onLayout: this._onContainerLayout,
                style: e
            }, i, this._renderCheckAccountSection())
        }
        _onCtaButtonPress(e) {
            switch (g.default.registerMobileFocusHandler(C.FocusEvent.CloseMobileModal, ()=>this._mountedRefsMap.ref("cta" + e)),
            e) {
            case K.StartNewConversation:
                y.track(new M.StartNewConversationClicked),
                new p.default({
                    navigationOrigin: m.NavigationConversationOrigin.HomeScreen,
                    creating1on1Conversation: !0,
                    isSingleContactSelect: !0,
                    peopleType: D.PeopleType.All,
                    filterPeopleType: D.FilterType.None,
                    wizardSteps: [N.WizardSteps.setConvParticipants]
                }).start(this._getRootViewId())
            }
        }
        _shouldRenderEngagementLandingScreen() {
            const e = !!this.state.enableOnboardingLandingScreenConfigs && this.state.enableOnboardingLandingScreenConfigs.enabled
              , t = !!this.state.landingPageCardIdsForToday && !n.isEmpty(this.state.landingPageCardIdsForToday);
            return e && t
        }
        _renderEngagementWelcomeScreen() {
            if (!this.state.landingPageCardIdsForToday)
                return;
            const e = {
                cardTextAlignCenter: !1,
                cardHideImageBackground: !0,
                cardImageAlignBottom: !1,
                cardSmallImage: !0,
                renderSimplifiedHeader: !1,
                renderUserFullName: !0,
                renderHeaderSubtitle: !0,
                renderProfileShareButton: !!this.state.enableLandingPageCardsShareProfileButton
            };
            return this._renderWelcomeViewWithCards(this.state.landingPageCardIdsForToday, e)
        }
    }
    e.exports = q
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(86)
      , s = i(0)
      , r = i(10)
      , a = i(5)
      , l = i(41)
      , c = i(732)
      , d = i(15)
      , u = a.lazyProperties({
        container: ()=>s.Styles.createViewStyle({
            justifyContent: "space-between",
            paddingBottom: 20
        }),
        component: ()=>s.Styles.createViewStyle({
            height: 100,
            width: 100,
            backgroundColor: "red",
            marginBottom: 20
        }),
        picker: ()=>s.Styles.createPickerStyle({
            maxWidth: 300,
            marginBottom: 20
        }),
        buttons: ()=>s.Styles.createViewStyle({
            flexDirection: "row",
            alignItems: "center"
        })
    });
    class g extends c.default {
        constructor(e) {
            super(e),
            this._fadeIn = ()=>(this._sxAnimatedView.setValue({
                opacity: 0
            }),
            {
                start: ()=>{
                    this._sxAnimatedView.fadeIn()
                }
                ,
                stop: n.noop
            }),
            this._fadeOut = ()=>(this._sxAnimatedView.setValue({
                opacity: 1
            }),
            {
                start: ()=>{
                    this._sxAnimatedView.fadeOut()
                }
                ,
                stop: n.noop
            }),
            this._getTranslateXToValue = ()=>this._isRTL() ? 0 : this._layout.width - 100,
            this._onLayout = e=>{
                this._layout = e,
                this._resetAnimatedStyles()
            }
            ,
            this._onPickerValueChange = e=>{
                this.setState({
                    selectedAnimation: e
                })
            }
            ,
            this._onSXAnimatedViewRef = e=>{
                this._sxAnimatedView = e
            }
            ,
            this._resetAnimatedStyles = ()=>{
                const e = this._getInitX();
                this._sxAnimatedView.setValue({
                    scale: 1,
                    x: e,
                    y: 0,
                    opacity: 1
                })
            }
            ,
            this._scale = ()=>this._sxAnimatedView.getAnimation({
                scale: .5
            }, "sxplayground"),
            this._scaleAndTranslateX = ()=>{
                const e = this._getTranslateXToValue()
                  , t = this._getInitX();
                return this._sxAnimatedView.setValue({
                    x: t
                }),
                this._sxAnimatedView.getAnimation({
                    x: e,
                    scale: .5
                }, "sxplayground")
            }
            ,
            this._start = ()=>{
                this._resetAnimatedStyles(),
                this._testAnimations[this.state.selectedAnimation](this._layout, this._sxAnimatedView).start()
            }
            ,
            this._testAnimations = {
                scale: (e,t)=>this._scale(),
                "x right": (e,t)=>this._translateX(),
                "x left": (e,t)=>this._translateX(),
                "scale, x right": (e,t)=>this._scaleAndTranslateX(),
                "scale, x left": (e,t)=>this._scaleAndTranslateX(),
                "fadeIn()": (e,t)=>this._fadeIn(),
                "fadeOut()": (e,t)=>this._fadeOut()
            },
            this._translateX = ()=>{
                const e = this._getInitX()
                  , t = this._getTranslateXToValue();
                return this._sxAnimatedView.setValue({
                    x: e
                }),
                this._sxAnimatedView.getAnimation({
                    x: t
                }, "sxplayground")
            }
            ,
            this._pickerItems = n.map(n.keys(this._testAnimations), e=>({
                label: e,
                value: e
            })),
            this.state = {
                selectedAnimation: this.state ? this.state.selectedAnimation : this._pickerItems[0].value
            }
        }
        static getHeaderText() {
            return "Animations"
        }
        componentDidMount() {
            super.componentDidMount()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.selectedAnimation !== t.selectedAnimation && this._resetAnimatedStyles()
        }
        render() {
            return s.createElement(s.View, {
                style: u.container,
                onLayout: this._onLayout
            }, s.createElement(d.Header, {
                size: 3,
                selectable: !0
            }, "More coming soon... "), s.createElement(o.View, {
                ref: this._onSXAnimatedViewRef,
                style: u.component
            }), s.createElement(s.Picker, {
                style: u.picker,
                items: this._pickerItems,
                selectedValue: this.state.selectedAnimation,
                onValueChange: this._onPickerValueChange
            }), s.createElement(s.View, {
                style: u.buttons
            }, s.createElement(l, {
                buttonStyle: r.SXButtonStyle.ColorFill,
                buttonSize: r.SXButtonSize.Medium,
                title: "Start",
                onPress: this._start
            }), s.createElement(l, {
                buttonStyle: r.SXButtonStyle.ThemeNoBackground,
                buttonSize: r.SXButtonSize.Medium,
                title: "reset",
                onPress: this._resetAnimatedStyles
            })))
        }
        _getInitX() {
            return this._isRTL() ? this._layout.width - 100 : 0
        }
        _isRTL() {
            return n.includes(this.state.selectedAnimation, "left")
        }
    }
    t.default = g
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(218)
      , r = i(10)
      , a = i(5)
      , l = i(41)
      , c = i(11)
      , d = i(732)
      , u = i(1247)
      , g = i(457)
      , h = a.lazyProperties({
        titleInput: ()=>o.Styles.createTextInputStyle({
            width: 100,
            borderWidth: 1
        }),
        multilineWidth: ()=>o.Styles.createViewStyle({
            maxWidth: 120
        })
    });
    class p extends d.default {
        constructor(e) {
            super(e),
            this.state = {
                buttonStyle: 0,
                title: "Button",
                subtitle: void 0,
                buttonSize: r.SXButtonSize.Medium,
                iconPositon: r.SXButtonIconPosition.Start
            }
        }
        render() {
            return [this._renderComponentSection("ActionButton.tsx", this._renderActionButton()), this._renderComponentSection("SXButton.tsx", this._renderSXButton())]
        }
        _renderActionButton() {
            const e = u.getEnumEntries(s.ActionButtonSize);
            return this._renderPropSection("size", {
                title: "ActionButton.tsx: ActionButtonSize",
                url: "#"
            }, n.map(e, (e,t)=>this._renderPropOptionSection(e, o.createElement(s.default, {
                key: "actioButtonSize" + t,
                icon: c.SkypeIcon.Plus,
                size: t
            }), !1)))
        }
        _renderSXButton() {
            return n.flatten([this._renderTitle(), this._renderSubtitle(), this._renderMultiline(), this._renderSXButtonStyle(), this._renderButtonSize(), this._renderIconSection(), this._renderActivityIndicatorSection()])
        }
        _renderTitle() {
            const e = this._renderInput("Button", e=>{
                this.setState({
                    title: e.length ? e : "Button"
                })
            }
            );
            return this._renderPropSection("title", {
                title: "string",
                url: "#"
            }, e)
        }
        _renderSubtitle() {
            const e = this._renderInput("subtitle", e=>{
                this.setState({
                    subtitle: e.length ? e : void 0
                })
            }
            );
            return this._renderPropSection("subtitle", {
                title: "string",
                url: "#"
            }, e)
        }
        _renderMultiline() {
            const e = o.createElement(g.default, {
                isOn: this.state.allowTextWrap,
                accessibilityLabel: this.props.accessibilityLabel,
                onChange: (e,t)=>{
                    this.setState({
                        allowTextWrap: t
                    })
                }
            });
            return this._renderPropSection("allowTextWrap", {
                title: "boolean",
                url: "#"
            }, e)
        }
        _renderSXButtonStyle() {
            const e = u.getEnumEntries(r.SXButtonStyle)
              , t = n.map(e, (e,t)=>this._renderButtonPropDemo(e + t, e, t === this.state.buttonStyle, {
                buttonStyle: t,
                onPress: ()=>{
                    this.setState({
                        buttonStyle: t
                    })
                }
            }));
            return this._renderPropSection("buttonStyle", {
                title: "CommonUiModels.ts: SXButtonStyle",
                url: "https://aka.ms/skype-coreui-sxbutton-props"
            }, t)
        }
        _renderButtonSize() {
            const e = u.getEnumEntries(r.SXButtonSize)
              , t = n.map(e, (e,t)=>this._renderButtonPropDemo(e + t, e, t === this.state.buttonSize, {
                buttonSize: t,
                onPress: ()=>{
                    this.setState({
                        buttonSize: t
                    })
                }
            }));
            return this._renderPropSection("buttonSize", {
                title: "CommonUIModels.ts: SXButtonSize",
                url: "https://aka.ms/skype-coreui-sxbutton-props"
            }, t)
        }
        _renderIconSection() {
            const e = u.getEnumEntries(r.SXButtonIconPosition)
              , t = this._renderPropSection("iconPosition", {
                title: "CommonUIModels.ts: SXButtonIconPosition",
                url: "https://aka.ms/skype-coreui-sxbutton-props"
            }, n.map(e, (e,t)=>this._renderButtonPropDemo(e + t, e, t === this.state.iconPositon, {
                icon: c.SkypeIcon.SkypeIcon,
                iconPositon: t,
                onPress: ()=>{
                    this.setState({
                        iconPositon: t
                    })
                }
            })))
              , i = u.getEnumEntries(c.IconSize);
            return [t, this._renderPropSection("iconSize", {
                title: "SXIconModels.ts: IconSize",
                url: "https://aka.ms/skype-coreui-sxbutton-props"
            }, n.map(i, (e,t)=>{
                const i = u.getIconSizeFromEnumPropertyName(e);
                return this._renderButtonPropDemo(e + t, e, !1, {
                    icon: c.SkypeIcon.SkypeIcon,
                    iconSize: i
                })
            }
            ))]
        }
        _renderActivityIndicatorSection() {
            const e = n.map([!0, !1], e=>{
                const t = e.toString();
                return this._renderButtonPropDemo("activityIndicator" + t, t, !1, {
                    showActivityIndicator: e
                })
            }
            );
            return e.push(this._renderButtonPropDemo("activityIndicatortruewithicon", "true with icon", !1, {
                showActivityIndicator: !0,
                icon: c.SkypeIcon.SkypeIcon
            })),
            this._renderPropSection("showActivityIndicator", {
                title: "boolean",
                url: "#"
            }, e)
        }
        _renderButtonPropDemo(e, t, i, s) {
            const r = {
                buttonStyle: this.state.buttonStyle,
                title: this.state.title,
                buttonSize: this.state.buttonSize,
                subtitle: this.state.subtitle,
                iconPositon: this.state.iconPositon,
                allowTextWrap: this.state.allowTextWrap,
                style: this.state.allowTextWrap ? h.multilineWidth : void 0
            };
            return this._renderPropOptionSection(t, o.createElement(l, Object.assign({
                key: e
            }, n.extend(r, s))), i)
        }
        _renderInput(e, t) {
            return o.createElement(o.TextInput, {
                key: "textinput" + e,
                style: [h.titleInput, this._themeStyles.viewBorderStyle],
                placeholder: e,
                blurOnSubmit: !0,
                onChangeText: n.debounce(t, 100)
            })
        }
    }
    t.default = p
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(5)
      , r = i(8)
      , a = i(732)
      , l = i(14)
      , c = s.lazyProperties({
        colorContainer: ()=>o.Styles.createViewStyle({
            width: 45,
            height: 45,
            borderRadius: 45
        }),
        propSectionContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "column",
            alignItems: "flex-start"
        }),
        propOptionContainer: ()=>o.Styles.createViewStyle({
            minWidth: 450
        })
    });
    class d extends a.default {
        constructor() {
            super(...arguments),
            this._renderColor = (e,t)=>{
                const i = o.Styles.createViewStyle({
                    backgroundColor: e
                }, !1);
                return this._renderPropOptionSection(t, o.createElement(o.View, {
                    style: [c.colorContainer, l.flexOne, i]
                }), !1, [c.propOptionContainer, l.flexOne])
            }
        }
        render() {
            const e = this._renderPropSection("Color", {
                title: "SXColorModels.ts",
                url: "https://aka.ms/skype-coreui-sxcolormodels"
            }, n.map(r.Color, this._renderColor), [c.propSectionContainer]);
            return this._renderComponentSection("SXColorModels.ts", e)
        }
    }
    t.default = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(40)
      , r = i(11)
      , a = i(732)
      , l = i(1247)
      , c = i(14);
    class d extends a.default {
        constructor(e) {
            super(e),
            this._setIcon = e=>{
                this.setState({
                    icon: e
                })
            }
            ,
            this._setIconSize = e=>{
                this.setState({
                    size: e
                })
            }
            ,
            this.state = {
                icon: r.SkypeIcon.SkypeIcon,
                size: r.IconSize.default
            }
        }
        render() {
            return this._renderSXIconsSection()
        }
        _renderSXIconsSection() {
            const e = l.getEnumEntries(r.IconSize)
              , t = this._renderPropSection("iconSize", {
                title: "SXIconModels.ts: IconSize",
                url: "https://aka.ms/skype-coreui-sxbutton-props"
            }, n.map(e, (e,t)=>{
                const i = l.getIconSizeFromEnumPropertyName(e);
                return this._renderPropOptionSection(e, o.createElement(s.default, {
                    key: "Iconsize" + t,
                    icon: this.state.icon,
                    size: i,
                    color: this._themeColors.primaryIconColor,
                    hoverColor: this._themeColors.iconHoverColor,
                    onPress: ()=>{
                        this._setIconSize(i)
                    }
                }), this.state.size === i)
            }
            ))
              , i = this._renderPropSection("SkypeIcon", {
                title: "https://skypeassets.azurewebsites.net/skype-assets/",
                url: "https://skypeassets.azurewebsites.net/skype-assets/"
            }, n.map(r.SkypeIcon, (e,t)=>this._renderPropOptionSection(t, o.createElement(s.default, {
                key: "icon" + t,
                icon: e,
                size: this.state.size,
                color: this._themeColors.primaryIconColor,
                hoverColor: this._themeColors.iconHoverColor,
                onPress: ()=>{
                    this._setIcon(e)
                }
            }), this.state.icon === e, [c.flexOne])));
            return this._renderComponentSection("SXIconModels.ts", [t, i])
        }
    }
    t.default = d
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(10)
      , r = i(5)
      , a = i(17)
      , l = i(55)
      , c = i(44)
      , d = i(41)
      , u = i(11)
      , g = i(12)
      , h = i(9)
      , p = r.lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch"
        })
    });
    var m;
    !function(e) {
        e[e.Colors = 0] = "Colors",
        e[e.Icons = 1] = "Icons",
        e[e.Buttons = 2] = "Buttons",
        e[e.Text = 3] = "Text",
        e[e.Animations = 4] = "Animations"
    }(m = t.SXPlaygroundMenuItems || (t.SXPlaygroundMenuItems = {}));
    class S extends g.default {
        constructor() {
            super(...arguments),
            this._onSettingsPress = ()=>{
                const e = h.newCauseId();
                a.closeGenericDesktopModal(e, void 0),
                a.navigateToDesktopSettingsGroup(l.SettingsGroup.ThemeSettings, void 0, e)
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this.props.onMenuItemPress(0)
        }
        render() {
            return o.createElement(o.View, {
                style: p.container
            }, o.createElement(c.SimplePanelHeader, {
                panelName: "SX Playground",
                leftButton: {
                    closeButtonType: c.CloseButtonType.Back,
                    onPress: this.props.onBackButtonPress
                },
                rightButtons: {
                    icon: u.SkypeIcon.Settings,
                    onPress: this._onSettingsPress
                }
            }), this._renderMenuItems())
        }
        _renderMenuItems() {
            return n.map(m, e=>{
                const t = m[e];
                return n.isString(t) ? o.createElement(d, {
                    key: "sxmenu" + t,
                    buttonStyle: s.SXButtonStyle.ThemeNoBackground,
                    title: m[e],
                    onPress: ()=>{
                        this.props.onMenuItemPress(e)
                    }
                }) : void 0
            }
            )
        }
    }
    t.default = S
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(5)
      , r = i(113)
      , a = i(732)
      , l = i(1247)
      , c = i(15)
      , d = "One Skype for all your devices"
      , u = s.lazyProperties({
        propSectionContainer: ()=>o.Styles.createViewStyle({
            flexDirection: "column",
            alignItems: "flex-start",
            justifyContent: "flex-start"
        })
    });
    class g extends a.default {
        render() {
            return [this._renderHeader(), this._renderBodyText(), this._renderCaption(), this._renderCardTitle(), this._renderPanelHeader(), this._renderRowTitle(), this._renderSubtitle()]
        }
        _renderHeader() {
            const e = l.getEnumEntries(c.HeaderSize);
            return this._renderComponentSection("Header", this._renderPropSection("size", {
                title: "SXTextModels.ts: HeaderSize",
                url: ""
            }, n.map(e, (e,t)=>this._renderPropOptionSection(e, o.createElement(c.Header, {
                key: "header" + e,
                size: t
            }, d), !1, void 0, "flex-start")), [u.propSectionContainer]))
        }
        _renderBodyText() {
            return this._renderComponentSection("BodyText", this._renderPropSection("bold", {
                title: "boolean",
                url: "#"
            }, [this._renderPropOptionSection("false", o.createElement(c.BodyText, {
                key: "bodytext1"
            }, d), !1, void 0, "flex-start"), this._renderPropOptionSection("true", o.createElement(c.BodyText, {
                key: "bodytext2",
                bold: !0
            }, d), !1, void 0, "flex-start")], [u.propSectionContainer]))
        }
        _renderCaption() {
            const e = l.getEnumEntries(r.MessageStreamFontSize);
            return this._renderComponentSection("Caption", this._renderPropSection("messageStreamFontSize (optional)", {
                title: "MessageStreamModels.ts: MessageStreamFontSize",
                url: "#"
            }, n.map(e, (e,t)=>this._renderPropOptionSection(e, o.createElement(c.Caption, {
                key: "caption" + t,
                messageStreamFontSize: t
            }, d), !1, void 0, "flex-start")), [u.propSectionContainer]))
        }
        _renderCardTitle() {
            return this._renderComponentSection("CardTitle", this._renderPropSection("", {
                title: "",
                url: "#"
            }, this._renderPropOptionSection("", o.createElement(c.CardTitle, {
                key: "cardtitle1"
            }, d), !1, void 0, "flex-start")))
        }
        _renderPanelHeader() {
            return this._renderComponentSection("PanelHeader", this._renderPropSection("", {
                title: "",
                url: "#"
            }, this._renderPropOptionSection("", o.createElement(c.PanelHeader, {
                key: "panelheader1"
            }, d), !1, void 0, "flex-start")))
        }
        _renderRowTitle() {
            return this._renderComponentSection("RowTitle", this._renderPropSection("disabled", {
                title: "boolean",
                url: "#"
            }, [this._renderPropOptionSection("false", o.createElement(c.RowTitle, {
                key: "RowTitle1"
            }, d), !1, void 0, "flex-start"), this._renderPropOptionSection("true", o.createElement(c.RowTitle, {
                key: "RowTitle2",
                disabled: !0
            }, d), !1, void 0, "flex-start")], [u.propSectionContainer]))
        }
        _renderSubtitle() {
            return this._renderComponentSection("Subtitle", this._renderPropSection("", {
                title: "",
                url: "#"
            }, this._renderPropOptionSection("", o.createElement(c.Subtitle, {
                key: "subtitle1"
            }, d), !1, void 0, "flex-start")))
        }
    }
    t.default = g
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(86)
      , s = i(0)
      , r = i(10)
      , a = i(81)
      , l = i(2)
      , c = i(110)
      , d = i(3)
      , u = i(124)
      , g = i(5)
      , h = i(17)
      , p = i(55)
      , m = i(24)
      , S = i(3283)
      , C = i(37)
      , y = i(251)
      , f = i(8)
      , _ = i(18)
      , b = i(14)
      , v = i(59)
      , T = i(12)
      , P = i(9)
      , A = r.SideBarWidths.base
      , k = g.lazyProperties({
        absoluteStyle: ()=>s.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            bottom: 0
        }),
        flyoutContainer: ()=>s.Styles.createViewStyle({
            left: 0,
            width: A,
            flex: 0,
            flexDirection: "column",
            borderLeftWidth: 2,
            borderStyle: "solid",
            borderColor: f.Color.gray50
        }),
        flyoutInnerUnspecified: ()=>s.Styles.createViewStyle({
            flex: 1,
            minWidth: A,
            alignSelf: "stretch",
            borderLeftWidth: 2,
            borderStyle: "solid",
            borderColor: f.Color.gray50
        }),
        flyoutInnerPreview: ()=>s.Styles.createViewStyle({
            borderLeftWidth: 2,
            borderStyle: "solid",
            borderColor: f.Color.gray50
        }),
        flyoutContainerNarrow: ()=>s.Styles.createViewStyle({
            right: 0,
            left: 0
        }),
        floating: ()=>s.Styles.createViewStyle({
            right: 0
        }),
        floatingShadow: ()=>s.Styles.createViewStyle({
            shadowOffset: {
                height: 0,
                width: 0
            },
            shadowRadius: 16,
            shadowColor: f.Color.blackOverlay20
        }),
        floatingNarrow: ()=>s.Styles.createViewStyle({
            right: 0,
            left: 0
        }),
        animatedRightPanelContainer: ()=>s.Styles.createViewStyle({
            alignSelf: "stretch"
        }),
        fixedWidth: ()=>s.Styles.createViewStyle({
            width: A
        }),
        dragHandle: ()=>s.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            left: -10,
            bottom: 0,
            width: 20,
            backgroundColor: f.Color.transparent
        })
    });
    class I extends T.default {
        constructor() {
            super(...arguments),
            this._wrapperWidthValue = new s.Animated.Value(0),
            this._wrapperWidthStyle = s.Styles.createAnimatedViewStyle({
                width: this._wrapperWidthValue
            }),
            this._contentWidthValue = new s.Animated.Value(0),
            this._contentWidthStyle = s.Styles.createAnimatedViewStyle({
                width: this._contentWidthValue
            }),
            this._rightPanelXValue = new s.Animated.Value(I._xValue(A + 20)),
            this._rightPanelXStyle = s.Styles.createAnimatedViewStyle({
                transform: [{
                    translateX: this._rightPanelXValue
                }]
            }),
            this._rightPanelOpacityValue = new s.Animated.Value(0),
            this._rightPanelOpacityStyle = s.Styles.createAnimatedViewStyle({
                opacity: this._rightPanelOpacityValue
            }),
            this._mainViewRefCallback = e=>{
                this._mainView = e || void 0
            }
            ,
            this.onPan = (e,t)=>{
                let i = e.pageX - e.initialPageX;
                if (_.isRTL() ? i > 0 && (i = 0) : i < 0 && (i = 0),
                this._rightPanelXValue.setValue(i),
                e.isComplete) {
                    let n = !1;
                    n = _.isRTL() ? e.velocityX < -.1 || i < A / 2 * -1 : e.velocityX > .1 || i > A / 2,
                    n ? this._closeRightPanel(t) : this._openRightPanel()
                }
            }
            ,
            this._isRestrictedFocus = ()=>{
                const e = this._isRightPanelVisible(this.props)
                  , t = this._isFlyoutFloating(this.props, this.state);
                return e && t
            }
            ,
            this._onPanDragHandle = e=>{
                let t;
                t = this._isDragging ? e.pageX - this._currentDragX : e.pageX - e.initialPageX,
                this._currentDragX = e.pageX,
                this._currentWidth -= t,
                this._currentWidth < r.SideBarWidths.base ? this._currentWidth = r.SideBarWidths.base : this._currentWidth > r.SideBarWidths.maxRight && (this._currentWidth = r.SideBarWidths.maxRight),
                this._contentWidthValue.setValue(this._currentWidth),
                e.isComplete ? (this._expandedWidth = this._currentWidth,
                y.default.putWidth(y.SideBar.Right, this._expandedWidth),
                this.state.resizeOnCommit && this._wrapperWidthValue.setValue(this._currentWidth),
                this._setIsDragging(!1)) : this._isDragging || this._setIsDragging(!0)
            }
            ,
            this._onEscapeKey = ()=>{
                const e = P.newCauseId();
                return d.log(l.LogTraceArea.Navigation, "RightSidebarView._onKeyUp, causeId: " + e),
                h.closeRightPanel(e, this._getRootViewId()),
                !0
            }
            ,
            this._openRightPanel = ()=>{
                if (a.dismissAll(),
                this.state.useTabletUI)
                    this._animateRightPanel(this._rightPanelXValue, 0, !0, !0),
                    this._contentWidthValue.setValue(this._currentWidth),
                    this.state.resizeOnCommit && this._wrapperWidthValue.setValue(this._currentWidth),
                    this._rightPanelOpacityValue.setValue(1);
                else if (this.state.isMinDesktopSize)
                    this._animateRightPanel(this._rightPanelOpacityValue, 1, !0, !1),
                    this._contentWidthValue.setValue(this.state.windowWidth),
                    this.state.resizeOnCommit && this._wrapperWidthValue.setValue(this.state.windowWidth),
                    this._rightPanelXValue.setValue(0);
                else {
                    const e = !!this.props.suppressAnimation && !this._isFlyoutFloating(this.props, this.state);
                    this.state.resizeOnCommit ? (this._contentWidthValue.setValue(this._currentWidth),
                    this._animateRightPanel(this._wrapperWidthValue, this._currentWidth, !e, !1)) : this._animateRightPanel(this._contentWidthValue, this._currentWidth, !e, !1),
                    this._rightPanelOpacityValue.setValue(1),
                    this._rightPanelXValue.setValue(0)
                }
            }
            ,
            this._closeRightPanel = e=>{
                this._intCloseRightPanel(()=>{
                    e && e(),
                    this.isComponentMounted() && this.setState({
                        viewMode: p.RightSidebarViewMode.None,
                        renderedNavContext: void 0
                    }),
                    c.setFocus(c.FocusEvent.CloseRightPanel)
                }
                )
            }
            ,
            this._intCloseRightPanel = e=>{
                if (this.state.useTabletUI)
                    this._animateRightPanel(this._rightPanelXValue, I._xValue(A + 20), !0, !0, e),
                    this._contentWidthValue.setValue(0),
                    this.state.resizeOnCommit && this._wrapperWidthValue.setValue(0),
                    this._rightPanelOpacityValue.setValue(0);
                else if (this.state.isMinDesktopSize)
                    this._animateRightPanel(this._rightPanelOpacityValue, 0, !0, !1, e),
                    this._contentWidthValue.setValue(0),
                    this.state.resizeOnCommit && this._wrapperWidthValue.setValue(0),
                    this._rightPanelXValue.setValue(I._xValue(A));
                else {
                    const t = !!this.props.suppressAnimation && !this._isFlyoutFloating(this.props, this.state);
                    this.state.resizeOnCommit ? this._animateRightPanel(this._wrapperWidthValue, 0, !t, !1, ()=>{
                        this._contentWidthValue.setValue(0),
                        e()
                    }
                    ) : this._animateRightPanel(this._contentWidthValue, 0, !t, !1, e),
                    this._rightPanelOpacityValue.setValue(0),
                    this._rightPanelXValue.setValue(I._xValue(A))
                }
            }
            ,
            this._onInAppWebBrowserClose = ()=>{
                if (this.state.renderedNavContext instanceof p.InAppBrowserNavigationContext) {
                    const e = this.state.renderedNavContext;
                    e.state.onInAppWebBrowserClose && e.state.onInAppWebBrowserClose(),
                    this._onClose()
                }
                return !1
            }
            ,
            this._onClose = ()=>{
                const e = P.newCauseId();
                d.log(l.LogTraceArea.Navigation, "RightSidebarView._onClose, causeId: " + e),
                h.closeRightPanel(e, this._getRootViewId())
            }
        }
        _buildState(e, t) {
            const i = this._getRootViewId()
              , o = v.useTabletUI()
              , s = y.default.resizingEnabled(y.SideBar.Right);
            let a = {
                windowWidth: m.default.getWidth(i),
                isMinDesktopSize: m.default.isMinDesktopWidth(i),
                useTabletUI: o,
                forceFloat: o,
                isResizeable: s,
                resizeOnCommit: s,
                topPadding: o ? C.default.statusBarHeight() : 0
            };
            if (e.stackNavContext) {
                const t = e.stackNavContext.getNavStack();
                t.length > 0 && (a.renderedNavContext = n.last(t))
            }
            return t && (this._currentDragX = 0,
            this._expandedWidth = Math.max(r.SideBarWidths.base, y.default.getWidth(y.SideBar.Right)),
            this._currentWidth = this._expandedWidth,
            this._isDragging = !1),
            a
        }
        _isFlyoutFloating(e, t) {
            if (t.forceFloat)
                return !0;
            return t.windowWidth - A - (e.leftNavCollapsedOrHidden ? 0 : y.default.getWidthNoSubscription()) < 500 && !t.isMinDesktopSize
        }
        render() {
            const e = [k.animatedRightPanelContainer];
            let t = [k.absoluteStyle]
              , i = !1;
            this.state.useTabletUI ? (e.push(k.absoluteStyle, k.floating, k.floatingShadow, k.fixedWidth, this._rightPanelXStyle),
            t.push(k.flyoutContainer)) : this.state.isMinDesktopSize ? (e.push(this._rightPanelOpacityStyle, k.absoluteStyle),
            this._isRightPanelVisible(this.props) && e.push(k.floatingNarrow),
            t.push(k.flyoutContainerNarrow)) : (this.state.isResizeable ? (i = !!this.state.renderedNavContext,
            this.state.resizeOnCommit ? (e.push(this._wrapperWidthStyle, b.overflowVisible),
            t = [k.absoluteStyle, k.flyoutInnerPreview, this._contentWidthStyle],
            this._isDragging && t.push(k.floating, k.floatingShadow)) : (e.push(this._contentWidthStyle),
            t = [k.flyoutInnerUnspecified])) : (e.push(this._contentWidthStyle),
            t.push(k.flyoutContainer)),
            this._isFlyoutFloating(this.props, this.state) && (e.push(k.absoluteStyle, k.floating),
            this.state.resizeOnCommit ? t.push(k.floatingShadow) : e.push(k.floatingShadow))),
            this._useDarkDivider() && t.push(this._themeStyles.headerShadowBorderColorStyle);
            const n = i ? s.createElement(s.GestureView, {
                style: k.dragHandle,
                preferredPan: s.Types.PreferredPanGesture.Horizontal,
                onPanHorizontal: this._onPanDragHandle,
                mouseOverCursor: s.Types.GestureMouseCursor.EWResize
            }) : void 0
              , o = s.createElement(s.Animated.View, {
                style: t,
                restrictFocusWithin: this._isRestrictedFocus(),
                ref: this._mainViewRefCallback
            }, this._renderRightPanelContent());
            return s.createElement(s.Animated.View, {
                key: "container" + this.state.useTabletUI,
                style: e
            }, o, n)
        }
        UNSAFE_componentWillMount() {
            super.UNSAFE_componentWillMount(),
            _.isElectronOsx() && u.default.addEscapeHandler(this._onEscapeKey)
        }
        componentDidMount() {
            super.componentDidMount(),
            this._isRightPanelVisible(this.props) ? this._openRightPanel() : this._mainView && this._mainView.setFocusRestricted(!1)
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            u.default.removeEscapeHandler(this._onEscapeKey)
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i);
            const n = this._isRightPanelVisible(e)
              , o = this._isRightPanelVisible(this.props)
              , s = this._isFlyoutFloating(this.props, this.state);
            this._mainView && this._mainView.setFocusRestricted(this._isRestrictedFocus()),
            o && !n && this._openRightPanel(),
            o && n && t.isMinDesktopSize && this._openRightPanel(),
            !o && n && this._closeRightPanel(),
            y.default.putRightSideBarFloating(s)
        }
        _setIsDragging(e) {
            this._isDragging !== e && (this._isDragging = e,
            this.state.resizeOnCommit && this.forceUpdate())
        }
        _renderRightPanelContent() {
            const e = {
                isPresentedInDesktopSubview: !0,
                isPresentedInDesktopRightNav: !0,
                topPadding: this.state.topPadding,
                onClose: this._onClose
            };
            return S.default.renderComponent(this.state.renderedNavContext, e, this.state.renderedNavContext instanceof p.InAppBrowserNavigationContext ? this._onInAppWebBrowserClose : void 0)
        }
        _useDarkDivider() {
            return this._useDarkTheme() || this._isPresentedInTabletRightNav()
        }
        _isRightPanelVisible(e) {
            return !!e.stackNavContext && e.stackNavContext.getNavStack().length > 0
        }
        _animateRightPanel(e, t, i, n, r) {
            this._rightPanelAnimation && this._rightPanelAnimation.stop(),
            i ? (this._rightPanelAnimation = s.Animated.timing(e, {
                toValue: t,
                easing: o.Easing.SkypeExpoInOut5,
                duration: o.timing.Duration.Default,
                useNativeDriver: n
            }),
            this._rightPanelAnimation.start(()=>{
                this.isComponentMounted() && (this._rightPanelAnimation = void 0,
                r && r())
            }
            )) : (e.setValue(t),
            r && r())
        }
        static _xValue(e) {
            return e * (_.isRTL() ? -1 : 1)
        }
        _createContext() {
            const e = super._createContext();
            return e.isPresentedInDesktopSubview = !0,
            e.isPresentedInDesktopRightNav = !0,
            e
        }
    }
    e.exports = I
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(1156)
      , s = i(1167)
      , r = i(1828)
      , a = i(1169)
      , l = i(1241)
      , c = i(3284)
      , d = i(1675)
      , u = i(1869)
      , g = i(1770)
      , h = i(55)
      , p = i(893)
      , m = i(343);
    t.default = class {
        static renderComponent(e, t, i) {
            return e instanceof h.GalleryNavigationContext ? n.createElement(c, Object.assign({
                conversationId: e.state.conversationId,
                viewMode: e.state.viewMode,
                callId: e.state.callId,
                parentConversationId: e.state.parentConversationId,
                onClose: e.state.onClose
            }, t)) : e instanceof h.SendMoneyPanelNavigationContext ? n.createElement(g, Object.assign({
                key: "sendMoney",
                conversationId: e.state.conversationId,
                viewId: e.state.viewId,
                entry: e.state.entry,
                orderId: e.state.orderId,
                showHeader: !0
            }, t)) : e instanceof h.FindPanelNavigationContext ? n.createElement(u, Object.assign({
                key: "find",
                conversationId: e.state.conversationId,
                overflowActionConfig: e.state.overflowActionConfig,
                onFindComplete: e.state.onFindComplete,
                showHeader: !0
            }, t)) : e instanceof h.LocationPickerContext ? n.createElement(d, Object.assign({
                key: "location",
                conversationId: e.state.conversationId
            }, t)) : e instanceof h.InAppBrowserNavigationContext ? n.createElement(s, Object.assign({
                key: "browser",
                origin: e.state.origin,
                url: e.state.url,
                integrationCorrelationId: e.state.integrationCorrelationId,
                headers: e.state.headers,
                injectedJavaScript: e.state.injectedJavaScript,
                onNavigationStateChange: e.state.onNavigationStateChange,
                isUsingStackNav: !1,
                onClose: i,
                onShareComplete: e.state.onShareComplete,
                onWebViewClose: e.state.onWebViewClose,
                onMessage: e.state.onMessage,
                headerTitle: e.state.headerTitle,
                conversationId: e.state.conversationId,
                messageId: e.state.messageId,
                suggestionAttributes: e.state.suggestionAttributes,
                openIntegrationScenario: e.state.perfScenario
            }, t)) : e instanceof o.default.AddinNavigationContext ? o.default.AddinStackNavigator.renderSceneContent(e, t) : e instanceof m.default.NavigationContext.ScheduleCallNavigationContext ? m.default.StackNavigator.renderSceneContent(e, t) : e instanceof p.default.NavigationContext.PollNavigationContext ? p.default.StackNavigator.renderSceneContent(e, t) : e instanceof h.ConversationInCallNavigationContext ? n.createElement(r.default, Object.assign({
                key: "callConversationPanel",
                conversationId: e.state.conversationId,
                callId: e.state.callId,
                onClose: e.state.onClose
            }, t)) : e instanceof h.SubtitlesNavigationContext ? n.createElement(l, Object.assign({
                key: "callTranscriptionPanelView",
                callId: e.state.callId,
                reactionsMri: e.state.conversationMri,
                onPressClose: e.state.onClose
            }, t)) : e instanceof h.CallingDebugPanelNavigationContext ? n.createElement(a.default, {
                callId: e.state.callId || "",
                nativeWindow: e.state.nativeWindow || !1
            }) : void 0
        }
    }
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(0)
      , s = i(3292)
      , r = i(3293)
      , a = i(3294)
      , l = i(3295)
      , c = i(3296)
      , d = i(3297)
      , u = i(3298)
      , g = i(3299)
      , h = i(3300)
      , p = i(3301)
      , m = i(207)
      , S = i(3302)
      , C = i(3303)
      , y = i(43)
      , f = i(5).lazyProperties({
        container: ()=>o.Styles.createViewStyle({
            alignSelf: "stretch"
        })
    });
    class _ extends y.default {
        _buildState(e, t) {
            return {
                toasts: m.default.getToasts(this._getRootViewId()).map(e=>({
                    id: e.id,
                    type: e.type
                }))
            }
        }
        render() {
            let e = [];
            return n.each(this.state.toasts, t=>{
                switch (t.type) {
                case m.ToastType.IncomingCall:
                    e.push(o.createElement(c.default, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.Notification:
                    e.push(o.createElement(g.default, {
                        toastId: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.CallRecorder:
                    e.push(o.createElement(a.default, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.RemoteCallMediaCapturer:
                    e.push(o.createElement(r.RemoteCompositeCallMediaCapturerToast, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.LocalCallMediaCapturer:
                    e.push(o.createElement(r.LocalCompositeCallMediaCapturerToast, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.IncomingVideoDisabled:
                    e.push(o.createElement(d.default, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.NetworkConnection:
                    e.push(o.createElement(u.default, {
                        toastId: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.CallConnectionQuality:
                    e.push(o.createElement(s.default, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.SpokenLanguageConflictResolution:
                    e.push(o.createElement(h.default, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.CameraDeniedToast:
                    e.push(o.createElement(l.default, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.WebFeedback:
                    e.push(o.createElement(C.default, {
                        toastId: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.Translation:
                    e.push(o.createElement(S.default, {
                        id: t.id,
                        key: t.id
                    }));
                    break;
                case m.ToastType.TeamsInterop:
                    e.push(o.createElement(p.default, {
                        id: t.id,
                        key: t.id
                    }))
                }
            }
            ),
            e.length ? o.createElement(o.View, {
                style: f.container
            }, e) : null
        }
    }
    t.default = _
}
, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(207)
      , s = i(1666)
      , r = i(12)
      , a = i(135);
    class l extends r.default {
        _buildState(e, t) {
            const i = {};
            let n = o.default.getToast(e.toastId);
            if (n && n.state) {
                const t = n.state;
                i.alertType = t.toastType,
                i.themeOverride = a.matchingLightOrDarkTheme(this._getCurrentTheme(e))
            }
            return i
        }
        render() {
            return n.createElement(s.default, {
                fromToast: !0,
                alertType: this.state.alertType,
                colorThemeOverride: this.state.themeOverride
            })
        }
    }
    t.default = l
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(10)
      , r = i(207)
      , a = i(40)
      , l = i(5)
      , c = i(4)
      , d = i(373)
      , u = i(8)
      , g = i(11)
      , h = i(131)
      , p = i(15)
      , m = i(12)
      , S = l.lazyProperties({
        container: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignItems: "center",
            paddingHorizontal: s.CompositeNotificationToastInfo.horizontal,
            paddingVertical: s.CompositeNotificationToastInfo.vertical + 3,
            backgroundColor: s.CompositeNotificationToastInfo.color,
            minHeight: 44
        }),
        contentContainer: ()=>n.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            flexWrap: "wrap",
            paddingHorizontal: 10,
            alignItems: "center"
        }),
        notificationTextStyle: ()=>n.Styles.createTextStyle({
            flex: -1,
            color: u.Color.white,
            wordBreak: "break-word",
            paddingRight: 5
        }),
        closeButtonStyle: ()=>n.Styles.createButtonStyle({
            flex: 1,
            paddingLeft: 10,
            alignItems: "flex-end",
            justifyContent: "flex-start"
        }),
        linkTextHighContrast: ()=>n.Styles.createTextStyle({
            color: u.Color.white
        }),
        linkText: ()=>n.Styles.createTextStyle({
            color: u.Color.sxBlue
        })
    });
    class C extends m.default {
        constructor() {
            super(...arguments),
            this._onCloseButtonPress = e=>{
                r.default.removeToast(this.props.toastId)
            }
            ,
            this._onReportAProblemPress = ()=>{
                d.reportProblem(!0, this._getRootViewId())
            }
            ,
            this._onLeaveFeedbackPress = ()=>{
                d.openFeedbackUrl(o.default.getConfigSettings().feedbackAndProblemGoParam.feedback, c.getString("MyProfilePanel.SendFeedbackButtonTitle"), this._getRootViewId())
            }
        }
        render() {
            const e = this._useAccessibleTheme() ? S.linkTextHighContrast : S.linkText
              , t = n.createElement(h.default, {
                key: "problemlink",
                style: e,
                url: "#",
                linkTextStyle: s.LinkTextStyle.BodyTextSmall,
                onPress: this._onReportAProblemPress
            }, c.getString("WebBanner.ReportAProblemLink"))
              , i = n.createElement(h.default, {
                key: "feedbacklink",
                style: e,
                url: "#",
                linkTextStyle: s.LinkTextStyle.BodyTextSmall,
                onPress: this._onLeaveFeedbackPress
            }, c.getString("WebBanner.LeaveFeedbackLink"))
              , o = c.getParts("WebBanner.BannerText", {
                link1: t,
                link2: i
            });
            return n.createElement(n.View, {
                style: S.container
            }, n.createElement(n.View, {
                style: S.contentContainer
            }, n.createElement(p.BodyText, {
                style: S.notificationTextStyle,
                disableThemeSubscription: !0,
                size: p.BodyTextSize.SmallDeprecated
            }, o)), n.createElement(a.default, {
                size: g.IconSize.size20,
                color: u.Color.white,
                hoverColor: u.Color.whiteOverlay70,
                icon: g.SkypeIcon.ClosePanel,
                style: S.closeButtonStyle,
                title: c.getString("Global.CloseButtonTitle"),
                onPress: this._onCloseButtonPress
            }))
        }
    }
    t.default = C
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(115)
      , s = i(43)
      , r = i(558)
      , a = i(1815)
      , l = i(1111);
    class c extends s.default {
        constructor() {
            super(...arguments),
            this._updateAnchorRect = ()=>{
                this._popupView && this._popupView.updatePosition(this.state.config)
            }
            ,
            this._onPopupViewRef = e=>{
                this._popupView = e || void 0
            }
            ,
            this._getPopUpPositions = e=>[o.PopupAnchorPositon.Top],
            this._getAnchorInfo = ()=>this.state.config,
            this._renderPopupContent = ()=>n.createElement(a.default, {
                displayText: this.state.config.displayText || ""
            })
        }
        _buildState(e, t) {
            return {
                config: l.default.getToolTipConfig(this._getRootViewId())
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._updateAnchorRect()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.config !== t.config && this.state.config && this._updateAnchorRect()
        }
        render() {
            return this.state.config && this.state.config.displayText.length ? n.createElement(r, {
                ref: this._onPopupViewRef,
                disablePositionAnimation: !0,
                getAnchorInfo: this._getAnchorInfo,
                getPopupPositions: this._getPopUpPositions,
                containerOffsetY: 5,
                renderPopup: this._renderPopupContent
            }) : null
        }
    }
    t.default = c
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(1189)
      , r = i(1594)
      , a = i(1611)
      , l = i(1156)
      , c = i(1618)
      , d = i(1619)
      , u = i(1620)
      , g = i(1160)
      , h = i(1227)
      , p = i(1827)
      , m = i(1621)
      , S = i(1623)
      , C = i(871)
      , y = i(1844)
      , f = i(1647)
      , _ = i(1167)
      , b = i(1652)
      , v = i(1653)
      , T = i(1655)
      , P = i(3306)
      , A = i(863)
      , k = i(1845)
      , I = i(1657)
      , w = i(1169)
      , N = i(3307)
      , M = i(1658)
      , E = i(1162)
      , x = i(1163)
      , D = i(867)
      , L = i(1659)
      , R = i(10)
      , B = i(1663)
      , O = i(879)
      , F = i(1670)
      , V = i(1672)
      , U = i(1673)
      , H = i(1708)
      , W = i(345)
      , z = i(1715)
      , G = i(1716)
      , K = i(1720)
      , j = i(1721)
      , q = i(1805)
      , Q = i(1722)
      , X = i(1723)
      , J = i(1750)
      , $ = i(2)
      , Y = i(1752)
      , Z = i(1754)
      , ee = i(1873)
      , te = i(3)
      , ie = i(1755)
      , ne = i(895)
      , oe = i(4)
      , se = i(1806)
      , re = i(1807)
      , ae = i(1757)
      , le = i(1758)
      , ce = i(1634)
      , de = i(1128)
      , ue = i(1568)
      , ge = i(896)
      , he = i(3308)
      , pe = i(3313)
      , me = i(3314)
      , Se = i(3315)
      , Ce = i(1769)
      , ye = i(3316)
      , fe = i(17)
      , _e = i(55)
      , be = i(282)
      , ve = i(214)
      , Te = i(1771)
      , Pe = i(1684)
      , Ae = i(1772)
      , ke = i(1773)
      , Ie = i(91)
      , we = i(833)
      , Ne = i(3317)
      , Me = i(1774)
      , Ee = i(1775)
      , xe = i(893)
      , De = i(1776)
      , Le = i(1777)
      , Re = i(1778)
      , Be = i(1779)
      , Oe = i(897)
      , Fe = i(1781)
      , Ve = i(343)
      , Ue = i(1218)
      , He = i(307)
      , We = i(1782)
      , ze = i(1783)
      , Ge = i(1784)
      , Ke = i(3318)
      , je = i(1785)
      , qe = i(1219)
      , Qe = i(1786)
      , Xe = i(1194)
      , Je = i(1787)
      , $e = i(1788)
      , Ye = i(1789)
      , Ze = i(1790)
      , et = i(1791)
      , tt = i(592)
      , it = i(1685)
      , nt = i(3321)
      , ot = i(107)
      , st = i(1792)
      , rt = i(1793)
      , at = i(1794)
      , lt = i(1868)
      , ct = i(1195)
      , dt = i(1795)
      , ut = i(3326)
      , gt = i(1796)
      , ht = i(1797)
      , pt = i(1798)
      , mt = i(1799)
      , St = i(9);
    class Ct extends y.default {
        constructor() {
            super(...arguments),
            this._navigationDirections = {},
            this._navigateBackCompleted = ()=>{
                n.defer(()=>{
                    const e = St.newCauseId();
                    te.log($.LogTraceArea.Navigation, "RootStackNavigationView: _navigateBackCompleted, causeId: " + e),
                    fe.navigateBack(e, this._getContext())
                }
                )
            }
            ,
            this._onInAppWebBrowserClose = e=>{
                const t = St.newCauseId();
                return te.log($.LogTraceArea.Navigation, "RootStackNavigationView._onInAppWebBrowserClose, causeId: " + t),
                fe.closeInAppBrowser(t, this._getContext()),
                e && e(),
                !0
            }
        }
        _renderSceneContent(e, t) {
            let i;
            const y = {
                ref: this._mountedRefsMap.onComponentRef(t),
                isPresentedByMobileStackNavigator: !0,
                navigationDirection: e ? this._navigationDirections[e.id] : void 0
            };
            if (e instanceof _e.MobileHubNavigationContext)
                i = o.createElement(pe, Object.assign({
                    currentTab: e.state.hubTab
                }, y));
            else if (e instanceof _e.JoiningGuestScreenContext)
                i = o.createElement(tt, {
                    showSpinner: !0,
                    statusText: oe.getString("UrlConverter.JoiningConversationMessage"),
                    showLoginFallback: !1,
                    loginCallback: n.noop,
                    hideDisclaimer: !0
                });
            else if (e instanceof _e.MobileContentPanelNavigationContext) {
                const t = e.getConversationContext();
                He.default.isSelectMessagesModeActive(R.MainRootViewId) && He.default.deactivateSelectMessagesMode(),
                t && (i = o.createElement(he, Object.assign({
                    conversationId: t.state.conversationId,
                    isNewConversation: t.state.isNewConversation,
                    contextConversationId: t.state.contextConversationId,
                    scrollToTimestamp: t.state.scrollToTimestamp,
                    focusedMessageCuid: t.state.focusedMessageCuid,
                    forceRefreshFocus: t.state.forceRefreshFocus,
                    shouldAutoFocusInput: t.state.shouldAutoFocusInput,
                    shouldFlattenNavOnInteraction: t.state.shouldFlattenNavOnInteraction,
                    isFromGlobalSearch: t.state.isFromGlobalSearch,
                    isFromPeopleRecommendations: t.state.isFromPeopleRecommendations,
                    directShareEventData: t.state.directShareEventData,
                    inviteToken: t.state.inviteToken,
                    selectedNumberForSMS: t.state.selectedNumberForSMS,
                    isInConversationBubbleMode: e.state.shouldHideAllExtraControls
                }, y)))
            } else if (e instanceof _e.CallNavigationContext)
                i = o.createElement(k, Object.assign({
                    initialConversationMri: e.state.conversationMri,
                    callId: e.state.callId,
                    liveState: e.state.liveState,
                    navigationReason: e.state.reason,
                    convertedVideoToAudio: e.state.convertedVideoToAudio
                }, y));
            else if (e instanceof _e.GalleryNavigationContext)
                i = o.createElement(nt, Object.assign({
                    conversationId: e.state.conversationId,
                    isActive: !0,
                    showHeader: !0,
                    viewMode: e.state.viewMode
                }, y));
            else if (e instanceof _e.CallRosterNavigationContext)
                i = o.createElement(I.default, Object.assign({
                    conversationId: e.state.conversationId,
                    callId: e.state.callId
                }, y));
            else if (e instanceof _e.CreateConversationNavigationContext)
                i = o.createElement(ze, Object.assign({
                    navigator: e.navigator
                }, y));
            else if (e instanceof _e.ConversationParticipantsNavigationContext)
                i = o.createElement(Ge, Object.assign({
                    isSuperComposer: e.state.isSuperComposer,
                    navigator: e.navigator
                }, y));
            else if (e instanceof _e.DetailsNavigationContext)
                i = o.createElement(H.default, Object.assign({
                    mri: e.state.mri,
                    conversationId: e.state.conversationId,
                    showConversationSettings: e.state.showConversationSettings,
                    origin: e.state.origin || W.DetailsPanelOrigin.Unknown,
                    onBotAdded: e.state.onBotAdded
                }, y));
            else if (e instanceof _e.ChatConfigNavigationContext)
                i = o.createElement(L.default, Object.assign({
                    key: "chatSettings",
                    mri: e.state.mri,
                    conversationId: e.state.conversationId
                }, y));
            else if (e instanceof _e.BotsListNavigationContext)
                i = o.createElement(g, Object.assign({
                    filterFunction: e.state.filterBotsFunction,
                    showHeader: !0,
                    sortByProperty: e.state.sortBotsByProperty,
                    title: e.state.botMarketplaceTitle
                }, y));
            else if (e instanceof _e.BotDiscoveryNavigationContext)
                i = o.createElement(u, Object.assign({}, y));
            else if (e instanceof _e.AlertsHubNavigationContext)
                i = o.createElement(h, Object.assign({}, y));
            else if (e instanceof _e.MeControlNavigationContext)
                i = o.createElement(me, Object.assign({}, y));
            else if (e instanceof _e.MySettingsNavigationContext)
                i = o.createElement(ye, Object.assign({
                    useCloseIcon: e.state.navigationDirection === ot.StackNavigationDirection.Present
                }, y));
            else if (e instanceof _e.PesSearchNavigationContext)
                e.state.searchType === Ie.TabType.Emoticon ? i = o.createElement(X.EmoticonSearchPanel, Object.assign({
                    searchType: e.state.searchType,
                    conversationId: e.state.conversationId,
                    onMessageSent: e.state.onMessageSent,
                    onCloseSearch: e.state.onCloseSearch,
                    clearEditInChatsComposer: e.state.clearEditInChatsComposer
                }, y)) : e.state.searchType === Ie.TabType.Moji ? i = o.createElement(Ce.MojiSearchPanel, Object.assign({
                    searchType: e.state.searchType,
                    conversationId: e.state.conversationId
                }, y)) : e.state.searchType === Ie.TabType.ChatSticker && (i = o.createElement(st.StickerSearchPanel, Object.assign({
                    searchType: e.state.searchType,
                    conversationId: e.state.conversationId
                }, y)));
            else if (e instanceof _e.ChooseAvatarContext)
                i = o.createElement(S, Object.assign({
                    origin: e.state.origin,
                    hideSkipButton: e.state.hideSkipButton,
                    isFirstLogin: e.state.isFirstLogin,
                    hideCloseButton: e.state.hideCloseButton,
                    closeButtonIcon: e.state.closeButtonIcon,
                    scenarioNavigator: e.navigator,
                    showCaptureViewFirst: e.state.showCaptureViewFirst
                }, y));
            else if (e instanceof _e.ChooseAvatarCommonPickerContext)
                i = o.createElement(m, Object.assign({
                    origin: e.state.origin,
                    hideSkipButton: e.state.hideSkipButton,
                    isFirstLogin: e.state.isFirstLogin,
                    hideCloseButton: e.state.hideCloseButton,
                    closeButtonIcon: e.state.closeButtonIcon,
                    scenarioNavigator: e.navigator,
                    showCaptureViewFirst: e.state.showCaptureViewFirst
                }, y));
            else if (e instanceof _e.PnvEnterNumberContext)
                i = o.createElement(Ee.default, Object.assign({
                    initialPhoneNumber: e.state.phoneNumber
                }, y));
            else if (e instanceof _e.PnvEnterCodeContext)
                i = o.createElement(Me.default, Object.assign({}, y));
            else if (e instanceof _e.PnvDebugToolContext)
                i = o.createElement(Ne.default, Object.assign({}, y));
            else if (e instanceof _e.SettingsGroupNavigationContext)
                i = o.createElement(Ke, Object.assign({
                    group: e.state.group,
                    origin: e.state.origin
                }, y));
            else if (e instanceof _e.NewSettingsPanelNavigationContext)
                i = o.createElement(Se.default, Object.assign({}, y));
            else if (e instanceof _e.AboutNavigationContext)
                i = o.createElement(s.default, Object.assign({
                    showHeader: !0
                }, y));
            else if (e instanceof _e.EffectsPrivacyNavigationContext)
                i = o.createElement(Q.default, Object.assign({
                    showHeader: !0
                }, y));
            else if (e instanceof _e.FeatureFlagListNavigationContext)
                i = o.createElement(Y.default, Object.assign({}, y));
            else if (e instanceof _e.SlimcoreFlagListNavigationContext)
                i = o.createElement(Ye.default, Object.assign({}, y));
            else if (e instanceof _e.RawPreferencesNavigationContext)
                i = o.createElement(Fe.default, Object.assign({}, y));
            else if (e instanceof _e.ThirdPartyNoticesNavigationContext)
                i = o.createElement(ht, Object.assign({}, y));
            else if (e instanceof _e.CapturePreviewNavigationContext)
                i = o.createElement(D, Object.assign({
                    localMediaObjectUri: e.state.localMediaObjectUri,
                    localMediaThumbnailUri: e.state.localMediaThumbnailUri,
                    localMediaIsVideo: e.state.localMediaIsVideo,
                    mediaSelection: e.state.mediaSelection,
                    fileSize: e.state.fileSize,
                    mediaHeight: e.state.height,
                    mediaWidth: e.state.width,
                    skipShareWithPanel: e.state.skipShareWithPanel,
                    onCaptureFlowComplete: e.state.onCaptureFlowComplete,
                    conversationId: e.state.conversationId,
                    callId: e.state.callId,
                    markupEnabled: !0,
                    unlockOrientation: e.state.unlockOrientation,
                    performMarkupOnly: e.state.performMarkupOnly,
                    capturedContentHandler: e.state.capturedContentHandler,
                    captureSessionTelemetry: e.state.captureSessionTelemetry,
                    entryPoint: e.state.entryPoint,
                    inlinePreview: e.state.inlinePreview,
                    iconForClose: e.state.iconForClose,
                    onReject: e.state.onReject,
                    showCoachmarksIfNeeded: !0,
                    fileExtension: e.state.fileExtension
                }, y));
            else if (e instanceof _e.CaptureMultiPreviewNavigationContext)
                i = o.createElement(x.default, {
                    mediaPreviews: e.state.mediaPreviews,
                    conversationId: e.state.conversationId,
                    onReject: e.state.onReject
                });
            else if (e instanceof _e.InAppBrowserNavigationContext)
                i = o.createElement(_, Object.assign({
                    origin: e.state.origin,
                    url: e.state.url,
                    integrationCorrelationId: e.state.integrationCorrelationId,
                    headers: e.state.headers,
                    injectedJavaScript: e.state.injectedJavaScript,
                    isUsingStackNav: !0,
                    onNavigationStateChange: e.state.onNavigationStateChange,
                    onClose: ()=>this._onInAppWebBrowserClose(e.state.onInAppWebBrowserClose),
                    onShareComplete: e.state.onShareComplete,
                    onWebViewClose: e.state.onWebViewClose,
                    onMessage: e.state.onMessage,
                    headerTitle: e.state.headerTitle,
                    conversationId: e.state.conversationId,
                    messageId: e.state.messageId,
                    suggestionAttributes: e.state.suggestionAttributes,
                    hideBrowserActions: e.state.hideBrowserActions,
                    openIntegrationScenario: e.state.perfScenario
                }, y));
            else {
                if (e instanceof _e.ShareContactsToConversationContext)
                    return o.createElement(je, Object.assign({
                        key: "shareContactsToConversation",
                        panelTitle: e.state.panelTitle,
                        accessibilityLabelTitle: e.state.accessibilityLabelTitle,
                        userMrisToExclude: e.state.userMrisToExclude,
                        entryPoint: e.state.entryPoint,
                        conversationId: e.state.conversationId
                    }, y));
                if (e instanceof _e.ShareWithPanelNavigationContext)
                    i = o.createElement(qe, Object.assign({
                        multipleMessagesParameters: e.state.multipleMessageParameters,
                        onShareComplete: e.state.onShareComplete,
                        onPostComplete: e.state.onPostComplete,
                        shareMessageTitle: e.state.shareMessageTitle,
                        accessibilityLabelTitle: e.state.accessibilityLabelTitle,
                        userMrisToExclude: e.state.userMrisToExclude,
                        onShareCancel: e.state.onShareCancel,
                        enableMediaPreview: e.state.enableMediaPreview,
                        sharePreviewType: e.state.sharePreviewType,
                        showForwardPreview: e.state.showForwardPreview,
                        entryPoint: e.state.entryPoint
                    }, y));
                else if (e instanceof _e.MediaPickerNavigationContext)
                    i = o.createElement(ce.default, Object.assign({
                        conversationId: e.state.conversationId,
                        allowVideo: e.state.allowVideo,
                        allowMultiple: e.state.allowMultiple,
                        defaultToAlbums: e.state.defaultToAlbums,
                        capturedContentHandler: e.state.capturedContentHandler,
                        onSendFlowComplete: e.state.onSendFlowComplete,
                        onHandleEditMediaSelection: e.state.onHandleEditMediaSelection
                    }, y));
                else if (e instanceof _e.SearchNavigationContext)
                    i = o.createElement(Ue, Object.assign({
                        searchPanelInitiator: e.state.searchOrigin
                    }, y));
                else if (e instanceof _e.QuickCallNavigationContext)
                    i = o.createElement(Oe, Object.assign({
                        conversationId: e.state.conversationId,
                        callId: e.state.callId,
                        newGroup: e.state.newGroup,
                        searchOnly: e.state.searchOnly
                    }, y));
                else if (e instanceof _e.PSTNDialerNavigationContext)
                    i = o.createElement(G, Object.assign({
                        callId: e.state.callId,
                        conversationId: e.state.conversationId,
                        prefilledNumber: e.state.prefilledNumber,
                        reopenOnInvalidNumber: e.state.navigationSource === $.DialerNavigationSource.CallFailedInvalidNumber
                    }, y));
                else if (e instanceof _e.PSTNCountrySelectorNavigationContext)
                    i = o.createElement(V, Object.assign({}, y, {
                        onCountrySelected: e.state.onCountrySelected,
                        countriesFiltered: e.state.countriesFiltered,
                        hideRecentCountries: e.state.hideRecentCountries
                    }));
                else if (e instanceof _e.SkypeNumberCountryAreaSelectorNavigationContext)
                    i = o.createElement(Qe, Object.assign({}, y, {
                        onCountryAreaSelected: e.state.onCountryAreaSelected
                    }));
                else if (e instanceof _e.SkypeNumberPrefixSelectorNavigationContext)
                    i = o.createElement(Je, Object.assign({}, y, {
                        onPrefixSelected: e.state.onPrefixSelected
                    }));
                else if (e instanceof _e.ContactsPanelV2NavigationContext)
                    i = o.createElement(O, Object.assign({
                        initialTab: e.state.currentTab
                    }, y));
                else if (e instanceof _e.AddContactPanelNavigationContext)
                    i = o.createElement(a, Object.assign({}, y, {
                        origin: e.state.origin
                    }));
                else if (e instanceof _e.DiscoverPeoplePanelNavigationContext)
                    i = o.createElement(K, Object.assign({}, y, {
                        origin: e.state.origin
                    }));
                else if (e instanceof _e.SyncAddressBookContext)
                    i = o.createElement(ct, Object.assign({
                        origin: e.state.origin,
                        hideSkipButton: e.state.hideSkipButton,
                        hideCloseButton: e.state.hideCloseButton,
                        isFirstLogin: e.state.isFirstLogin,
                        closeButtonIcon: e.state.closeButtonIcon,
                        nextButtonIcon: e.state.nextButtonIcon,
                        scenarioNavigator: e.navigator
                    }, y));
                else if (e instanceof _e.PeopleYouMayKnowNoticeContext)
                    i = o.createElement(ke, Object.assign({
                        origin: e.state.origin,
                        hideSkipButton: e.state.hideSkipButton,
                        hideCloseButton: e.state.hideCloseButton,
                        isFirstLogin: e.state.isFirstLogin,
                        closeButtonIcon: e.state.closeButtonIcon,
                        nextButtonIcon: e.state.nextButtonIcon,
                        scenarioNavigator: e.navigator
                    }, y));
                else if (e instanceof _e.ThemeContext)
                    i = o.createElement(gt.default, Object.assign({
                        origin: e.state.origin,
                        hideSkipButton: e.state.hideSkipButton,
                        hideCloseButton: e.state.hideCloseButton,
                        isFirstLogin: e.state.isFirstLogin,
                        closeButtonIcon: e.state.closeButtonIcon,
                        nextButtonIcon: e.state.nextButtonIcon,
                        scenarioNavigator: e.navigator
                    }, y));
                else if (e instanceof _e.UserProfileContext)
                    i = o.createElement(mt.default, Object.assign({
                        origin: e.state.origin,
                        closeButtonIcon: e.state.closeButtonIcon,
                        scenarioNavigator: e.navigator
                    }, y));
                else if (e instanceof _e.PromptPermissionContext)
                    i = o.createElement(Re, Object.assign({
                        origin: e.state.origin,
                        showUIPrompts: !0,
                        scenarioNavigator: e.navigator,
                        hideCloseButton: e.state.hideCloseButton
                    }, y));
                else if (e instanceof _e.LocationPickerContext)
                    i = o.createElement(se, Object.assign({
                        conversationId: e.state.conversationId
                    }, y));
                else if (e instanceof _e.LocationViewerContext)
                    i = o.createElement(re, Object.assign({
                        message: e.state.message,
                        userMri: e.state.userMri,
                        isUserLocation: e.state.isUserLocation,
                        addressFriendlyName: e.state.addressFriendlyName,
                        shortAddress: e.state.shortAddress,
                        fullAddress: e.state.fullAddress,
                        latitude: e.state.latitude,
                        longitude: e.state.longitude
                    }, y));
                else if (e instanceof _e.DocumentViewerContext)
                    i = o.createElement(q, Object.assign({
                        message: e.state.message,
                        documentUri: e.state.fileUri,
                        fileName: e.state.fileName
                    }, y));
                else if (e instanceof _e.MediaViewerPanelContext)
                    i = o.createElement(de.MediaViewerPanel, Object.assign({
                        initialMedia: e.state.initialMedia,
                        controller: e.state.controller,
                        totalMedia: e.state.totalMedia,
                        onDidClose: e.state.onClose,
                        onLeftBoundSwipe: e.state.onLeftBoundSwipe,
                        onRightBoundSwipe: e.state.onRightBoundSwipe,
                        closeOnLastItemSwipe: e.state.closeOnLastItemSwipe,
                        mouseControlsSize: e.state.mouseControlsSize,
                        message: e.state.message,
                        cacheMode: e.state.cacheMode
                    }, y));
                else if (e instanceof _e.ConversationMediaViewerPanelContext)
                    i = o.createElement(ue.default, Object.assign({}, e.state, y));
                else if (e instanceof _e.CaptureComboNavigationContext)
                    i = o.createElement(E.default, Object.assign({
                        capturedContentHandler: e.state.capturedContentHandler,
                        conversationId: e.state.conversationId,
                        allowVideo: e.state.allowVideo,
                        mediaPickerOnly: e.state.mediaPickerOnly,
                        allowMultiple: e.state.allowMultiple,
                        defaultToAlbums: e.state.defaultToAlbums,
                        willDismissOnSend: e.state.willDismissOnSend,
                        disableMarkup: e.state.disableMarkup,
                        onSendFlowComplete: e.state.onSendFlowComplete,
                        mediaPickerShouldCollapseFully: e.state.mediaPickerShouldCollapseFully,
                        showCoachmarksIfNeeded: e.state.showCoachmarksIfNeeded,
                        captureMode: e.state.captureMode,
                        disableMediaPicker: e.state.disableMediaPicker
                    }, y));
                else if (e instanceof _e.GetBalanceStateNavigationContext)
                    i = o.createElement(C.default, Object.assign({
                        showHeader: !0,
                        source: e.state.source
                    }, y));
                else if (e instanceof _e.PurchaseContinuationNavigationContext)
                    i = o.createElement(Be, Object.assign({
                        offerType: e.state.offerType,
                        campaignRef: e.state.campaignRef
                    }, y));
                else if (e instanceof _e.SubscriptionIntroNavigationContext)
                    i = o.createElement(rt.default, Object.assign({}, y));
                else if (e instanceof _e.GetProductWebFlowNavigationContext)
                    i = o.createElement(Pe.PaymentsWebFlowPanel, Object.assign({
                        webPurchase: e.state.webPurchase,
                        source: e.state.source,
                        title: e.state.title,
                        useDocumentTitle: e.state.useDocumentTitle
                    }, y));
                else if (e instanceof _e.Payments3dsNavigationContext)
                    i = o.createElement(Te.Payments3dsWebPanel, Object.assign({}, e.state, y));
                else if (e instanceof _e.SsoWebFlowNavigationContext)
                    i = o.createElement(it, Object.assign({}, e.state, y));
                else if (e instanceof _e.CallingSettingsHeaderAuthWebFlowNavigationContext)
                    i = o.createElement(P, Object.assign({
                        link: e.state.link,
                        goTarget: e.state.goTarget,
                        source: e.state.source,
                        title: e.state.title,
                        useDocumentTitle: e.state.useDocumentTitle,
                        titleAllowTextWrap: e.state.titleAllowTextWrap,
                        pathsRequiringHeaders: e.state.pathsRequiringHeaders,
                        disableSpinnerAfterGoLink: e.state.disableSpinnerAfterGoLink,
                        enableWebViewBackNavigation: e.state.enableWebViewBackNavigation
                    }, y));
                else if (e instanceof _e.SkypeNumberWebFlowNavigationContext)
                    i = o.createElement(ee, Object.assign({}, e.state, y));
                else if (e instanceof _e.SkypeNumberPanelNavigationContext)
                    i = o.createElement(Xe.default, Object.assign({}, y));
                else if (e instanceof _e.SkypeNumberPanelPurchaseFlowNavigationContext)
                    i = o.createElement($e.default, Object.assign({}, y));
                else if (e instanceof _e.CallingSettingsPanelNavigationContext)
                    i = o.createElement(A.default, Object.assign({}, y));
                else if (e instanceof _e.AdvancedCallingSettingsPanelNavigationContext)
                    i = o.createElement(d.default, Object.assign({}, y));
                else if (e instanceof _e.SubtitlesCallingSettingsPanelNavigationContext)
                    i = o.createElement(at.default, Object.assign({}, y));
                else if (e instanceof _e.TranslationSettingsPanelNavigationContext)
                    i = o.createElement(pt.default, Object.assign({}, y));
                else if (e instanceof _e.TelemetryPerformanceMonitorNavigationContext)
                    i = o.createElement(ut, Object.assign({
                        showHeader: !0
                    }, y));
                else if (e instanceof _e.DiagnosticToolsNavigationContext)
                    i = o.createElement(z.default, Object.assign({}, y));
                else if (e instanceof _e.SendDiagnosticLogsNavigationContext)
                    i = o.createElement(We.default, Object.assign({}, y));
                else if (e instanceof _e.ProfilePicturePanelNavigationContext)
                    i = o.createElement(Le.default, Object.assign({}, y));
                else if (e instanceof _e.ConnectedUsersListNavigationContext)
                    i = o.createElement(B.default, Object.assign({}, y));
                else if (e instanceof _e.BlockedUsersListNavigationContext)
                    i = o.createElement(f.default, Object.assign({}, y));
                else {
                    if (e instanceof _e.ManageUsersSettingsPanelNavigationContext)
                        return o.createElement(le, Object.assign({}, y));
                    if (e instanceof _e.LanguagePickerPanelNavigationContext)
                        i = o.createElement(ie.default, Object.assign({}, y));
                    else if (e instanceof _e.InviteLinkQRPanelNavigationContext)
                        i = o.createElement(j.default, Object.assign({
                            displayName: e.state.displayName,
                            inviteLink: e.state.inviteLink
                        }, y));
                    else if (e instanceof _e.ManageSearchInfoPanelNavigationContext)
                        i = o.createElement(ae.default, Object.assign({}, y, {
                            origin: e.state.origin
                        }));
                    else if (e instanceof _e.LoadingPanelNavigationContext)
                        i = o.createElement(ne, Object.assign({
                            message: e.state.message
                        }, y));
                    else if (e instanceof _e.InviteShareNavigationContext)
                        i = o.createElement(De.default, Object.assign({
                            origin: e.state.origin,
                            skypeMri: e.state.mri,
                            displayName: e.state.displayName
                        }, y));
                    else if (e instanceof _e.ConversationShareNavigationContext)
                        i = o.createElement(F.default, Object.assign({
                            origin: e.state.origin,
                            displayName: e.state.displayName,
                            skypeMri: e.state.mri
                        }, y));
                    else if (e instanceof _e.GuestUpsellNavigationContext)
                        i = o.createElement(Z.GuestUpsellPanel, Object.assign({}, y));
                    else if (e instanceof _e.ActiveNowPanelNavigationContext)
                        i = o.createElement(r, Object.assign({
                            navigationDirection: e.state.navigationDirection
                        }, y));
                    else if (e instanceof _e.CallerIdPromptContext)
                        i = o.createElement(b.default, Object.assign({
                            dialogId: "callerIdDialog"
                        }, y));
                    else if (e instanceof _e.CallFailurePromptContext)
                        i = o.createElement(T.default, Object.assign({
                            dialogId: "pstnDialog",
                            phoneNumber: e.state.phoneNumber,
                            reason: e.state.reason
                        }, y));
                    else if (e instanceof _e.SmsFailurePromptContext)
                        i = o.createElement(Ze.default, Object.assign({
                            dialogId: "smsDialog",
                            phoneNumber: e.state.phoneNumber,
                            isSmsInfo: e.state.isSmsInfo
                        }, y));
                    else if (e instanceof _e.TasterPostCallPanelContext)
                        i = o.createElement(dt.default, Object.assign({
                            dialogId: "taster"
                        }, y));
                    else if (e instanceof _e.CallFailurePostPurchasePromptContext)
                        i = o.createElement(v.default, Object.assign({
                            dialogId: "successfulPurchaseDialog",
                            phoneNumber: e.state.phoneNumber
                        }, y));
                    else {
                        if (e instanceof _e.AboutPeopleYouMayKnowNavigationContext)
                            return o.createElement(Ae.default, Object.assign({}, y));
                        e instanceof l.default.AddinNavigationContext ? i = l.default.AddinStackNavigator.renderSceneContent(e, y) : e instanceof _e.AddPhoneNumberPanelNavigationContext ? i = o.createElement(c, Object.assign({}, y, {
                            origin: e.state.origin,
                            contactMriToEdit: e.state.contactMriToEdit,
                            phoneNumbers: e.state.phoneNumbers,
                            contactName: e.state.contactName,
                            onSave: e.state.onSave,
                            onCancel: e.state.onCancel
                        })) : e instanceof _e.ArchivedConversationsPanelNavigationContext ? i = o.createElement(p, Object.assign({}, y)) : e instanceof Ve.default.NavigationContext.ScheduleCallNavigationContext ? i = Ve.default.StackNavigator.renderSceneContent(e, y) : e instanceof ge.default.NavigationContext.MeetNowNavigationContext ? i = ge.default.StackNavigator.renderSceneContent(e, y) : e instanceof _e.SXPlaygroundNavigationContext ? i = o.createElement(lt.default, Object.assign({}, y)) : e instanceof xe.default.NavigationContext.PollNavigationContext ? i = xe.default.StackNavigator.renderSceneContent(e, y) : e instanceof _e.CaptivePortalQuestionnaireContext ? i = o.createElement(M.default, Object.assign({}, y)) : e instanceof _e.EngagementSharePanelContext ? i = o.createElement(J, Object.assign({
                            key: "engagementSharePanel",
                            onShareComplete: e.state.onShareComplete,
                            onPostComplete: e.state.onPostComplete,
                            onShareCancel: e.state.onShareCancel,
                            shareableContentConfigs: e.state.shareableContentConfigs,
                            accessibilityLabelTitle: e.state.accessibilityLabelTitle,
                            userMrisToExclude: e.state.userMrisToExclude
                        }, y)) : e instanceof _e.SubtitlesNavigationContext ? i = o.createElement(N, Object.assign({
                            key: "callTranscriptionPanelView",
                            callId: e.state.callId,
                            conversationMri: e.state.conversationMri,
                            onClose: e.state.onClose
                        }, y)) : e instanceof _e.CallingDebugPanelNavigationContext ? i = o.createElement(w.default, {
                            callId: e.state.callId || "",
                            nativeWindow: e.state.nativeWindow || !1
                        }) : e instanceof _e.CustomReactionsPanelNavigationContext ? i = o.createElement(U.CustomReactionsPanel, Object.assign({}, y)) : e instanceof _e.SpeechConsentNavigationContext && (i = o.createElement(et.default, Object.assign({}, y)))
                    }
                }
            }
            return i
        }
        _navigatorSceneConfigTypeForNavContext(e, t) {
            if (this._navigationDirections[e.id] = ve.default.stackNavigationDirection(e, t),
            be.default.transitionHintForPopCard())
                return be.default.popCardsQuickFade();
            if (e instanceof _e.MobileContentPanelNavigationContext) {
                return ve.default.conversationNavigationDirection(t) === ot.StackNavigationDirection.Push ? be.default.floatFromRight(be.ConversationHorizontalGestureResponseDistance) : be.default.floatFromBottom()
            }
            if (e instanceof _e.ShareWithPanelNavigationContext && e.state.isExternalShare)
                return e.state.navigationDirection === ot.StackNavigationDirection.Push ? be.default.floatFromRight(0) : be.default.floatFromBottom(0);
            if (e instanceof _e.InAppBrowserNavigationContext && e.state.navigationDirection !== ot.StackNavigationDirection.Push)
                return be.default.floatFromBottom(64);
            if (e instanceof _e.SearchNavigationContext)
                return t && (t instanceof _e.ContactsPanelV2NavigationContext || t instanceof _e.MobileHubNavigationContext) ? be.default.sceneConfigForSearchTransition() : be.default.fade();
            if (e instanceof _e.QuickCallNavigationContext && e.state.navigationDirection !== ot.StackNavigationDirection.Push)
                return t && t instanceof _e.MobileHubNavigationContext && e.state.searchOnly ? be.default.sceneConfigForSearchTransition() : be.default.floatFromBottom();
            if (e instanceof _e.PSTNCountrySelectorNavigationContext)
                return be.default.floatFromBottomNoScale();
            if (e instanceof _e.SyncAddressBookContext || e instanceof _e.PeopleYouMayKnowNoticeContext || e instanceof _e.ThemeContext)
                return e.state.isFirstLogin ? be.default.noTransition() : be.default.floatFromBottom();
            if (e instanceof _e.PromptPermissionContext)
                return be.default.noTransition();
            if (e instanceof _e.CaptureComboNavigationContext || e instanceof _e.MediaPickerNavigationContext || e instanceof _e.ConversationMediaViewerPanelContext)
                return t && (t instanceof _e.CallNavigationContext || t instanceof _e.GalleryNavigationContext || t instanceof _e.SubtitlesNavigationContext || t instanceof _e.CallingDebugPanelNavigationContext) ? be.default.floatFromBottomNoScale() : be.default.floatFromBottom(100);
            if (e instanceof _e.CallNavigationContext)
                return be.default.floatFromRight(0);
            if (e instanceof _e.ConversationParticipantsNavigationContext && t && t instanceof _e.MobileHubNavigationContext)
                return be.default.floatFromBottom();
            if (e instanceof _e.CreateConversationNavigationContext) {
                if (t && t instanceof _e.MobileHubNavigationContext)
                    return be.default.floatFromBottom()
            } else {
                if (e instanceof l.default.AddinNavigationContext && (e.state.origin === we.AddinOrigin.SwiftQuickReplyView || e.state.origin === we.AddinOrigin.Messaging))
                    return be.default.noTransition(!1);
                if (e.state.navigationDirection === ot.StackNavigationDirection.Present)
                    return be.default.floatFromBottom();
                if (e instanceof _e.CustomReactionsPanelNavigationContext)
                    return be.default.floatFromBottom();
                if (e instanceof _e.UserProfileContext)
                    return be.default.noTransition()
            }
            return be.default.floatFromRight(be.HorizontalGestureResponseDistance)
        }
    }
    e.exports = Ct
}
, , , , , , , , function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(51)
      , s = i(2)
      , r = i(3)
      , a = i(1056)
      , l = i(1843);
    class c extends o.default {
        _buildState(e, t) {
            return {
                shouldSkipRendering: a.default.shouldSkipMobileHub()
            }
        }
        render() {
            return this.state.shouldSkipRendering ? null : n.createElement(l.default, Object.assign({}, this.props))
        }
        _componentId() {
            return "MobileHubWrapper"
        }
        _goBack(e) {
            return r.log(s.LogTraceArea.MobileHub, "MobileHubWrapper._goBack: causeId: " + e),
            !1
        }
    }
    e.exports = c
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(51)
      , s = i(10)
      , r = i(5)
      , a = i(4)
      , l = i(37)
      , c = i(1707)
      , d = i(44)
      , u = i(107)
      , g = i(94)
      , h = i(14)
      , p = r.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsBlockContainer: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingHorizontal: 10,
            overflow: "visible"
        })
    });
    class m extends o.default {
        _buildState(e, t) {
            return {
                safeAreaHorizontalPaddingStyle: l.default.horizontalPaddingStyle(s.HorizontalInsetZero)
            }
        }
        UNSAFE_componentWillUpdate(e, t, i) {
            super.UNSAFE_componentWillUpdate(e, t, i),
            this._updateStatusBarStyle(g.createBarStyle(this._themeColors.defaultStatusBarTheme))
        }
        render() {
            const e = [p.settingsBlockContainer];
            this.state.safeAreaHorizontalPaddingStyle && e.push(this.state.safeAreaHorizontalPaddingStyle);
            const t = {
                closeButtonType: this.props.navigationDirection === u.StackNavigationDirection.Present ? d.CloseButtonType.Close : d.CloseButtonType.Back
            };
            return n.createElement(n.View, {
                style: [p.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, n.createElement(d.SimplePanelHeader, {
                panelName: a.getString("UserSettingsPanel.SettingsTitle"),
                leftButton: t,
                delayHeaderFocus: this._getContext().isPresentedByMobileStackNavigator
            }), n.createElement(n.ScrollView, {
                style: h.flexOne
            }, n.createElement(n.View, {
                style: e
            }, n.createElement(c.default, null))))
        }
    }
    t.default = m
}
, function(e, t, i) {
    "use strict";
    const n = i(36)
      , o = i(0)
      , s = i(6)
      , r = i(51)
      , a = i(10)
      , l = i(3)
      , c = i(329)
      , d = i(5)
      , u = i(4)
      , g = i(192)
      , h = i(20)
      , p = i(17)
      , m = i(55)
      , S = i(97)
      , C = i(262)
      , y = i(128)
      , f = i(360)
      , _ = i(24)
      , b = i(37)
      , v = i(60)
      , T = i(76)
      , P = i(84)
      , A = i(319)
      , k = i(44)
      , I = i(168)
      , w = i(94)
      , N = i(8)
      , M = i(11)
      , E = i(49)
      , x = i(25)
      , D = i(14)
      , L = i(885)
      , R = i(886)
      , B = i(45)
      , O = i(406)
      , F = i(90)
      , V = d.lazyProperties({
        panel: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        container: ()=>o.Styles.createScrollViewStyle({
            marginTop: 10,
            marginHorizontal: 10
        }),
        sectionHeader: ()=>o.Styles.createTextStyle({
            paddingTop: 30,
            paddingBottom: 10
        })
    });
    class U extends r.default {
        constructor() {
            super(...arguments),
            this._onScrollViewRef = e=>{
                this._scrollView = e || void 0
            }
            ,
            this._shareProfile = ()=>{
                const e = h.getSkypeMri();
                p.navigateToInviteShare(e, this.state.displayName, c.InviteLinkOrigin.UserProfile, this._getContext())
            }
            ,
            this._onUserCardRef = e=>{
                this._userCardRef = e || void 0
            }
            ,
            this._onScroll = (e,t)=>{
                const i = e > 100;
                this.state.showHeader !== i && this.setState({
                    showHeader: i
                })
            }
            ,
            this._navigateToGroup = e=>{
                p.navigateToSettingsGroup(e, this._getContext())
            }
            ,
            this._onHelpAndFeedbackButtonPressed = ()=>{
                l.track(new C.NavigationHelpAndFeedback(S.NavigationSettingsItem.HelpAndFeedback,S.NavigationSettingsOrigin.MySettingsPanel)),
                p.navigateToSettingsGroup(m.SettingsGroup.HelpAndFeedback, this._getContext())
            }
            ,
            this._goToPrivacy = ()=>{
                p.navigateToManageSearchInfoPanel(f.ManageSearchOrigin.ApplicationSettings, this._getContext())
            }
            ,
            this._debugSettingsPress = ()=>{
                this._navigateToGroup(m.SettingsGroup.Debug)
            }
        }
        _buildState(e, t) {
            const i = B.getFullUserProfileByMri(h.getSkypeMri())
              , r = this._getRootViewId()
              , l = o.StatusBar.isOverlay() && this._getContext().isPresentedByMobileStackNavigator && _.default.getDeviceOrientation(r) === n.DeviceOrientation.Portrait
              , c = {
                displayName: i.getDisplayName(),
                showScreenReaderHeader: T.default.isMobileScreenReaderEnabled(),
                gender: i && i.gender || x.eGender.Unspecified,
                safeAreaHorizontalInsets: this._getContext().isPresentedInDesktopSubview ? a.HorizontalInsetZero : b.default.horizontalInsets(a.HorizontalInsetDefault),
                leavePaddingForStatusBar: l,
                hugeEmoticonsFeatureEnabled: s.default.getS4LMessagingFeatures().singleEmoticonSize >= y.EmoticonSize.ExtraLarge,
                myUserStatus: g.getStatus(),
                statusBarHeight: l ? b.default.statusBarHeight() : 0
            };
            return t && (c.showHeader = !1),
            c
        }
        componentDidMount() {
            super.componentDidMount(),
            this._userCardRef && this._userCardRef.requestFocus(),
            this._updateStatusBar(),
            s.default.getS4LCommerceFeatures().offerStore.prefetch && O.default.requestUpdate()
        }
        componentDidUpdate(e, t, i) {
            super.componentDidUpdate(e, t, i),
            this.state.showHeader !== t.showHeader && this._updateStatusBar(),
            this.state.statusBarHeight !== t.statusBarHeight && !this.state.showHeader && this._scrollView && this._scrollView.setScrollTop(0)
        }
        render() {
            const e = V.sectionHeader
              , t = this._isHeaderOpaqueStyle()
              , i = t ? this._themeColors.headerIconColor : N.Color.white
              , n = t ? this._themeColors.iconHoverColor : N.Color.whiteOverlay80
              , s = {
                closeButtonType: this.props.useCloseIcon ? k.CloseButtonType.Close : k.CloseButtonType.Back,
                color: i,
                hoverColor: n
            }
              , r = u.getString("UserSettingsPanel.MyProfileTitle")
              , a = o.createElement(k.SimplePanelHeader, {
                floating: !this.state.showScreenReaderHeader,
                panelName: t ? r : void 0,
                useTransparentBackground: !t,
                hideBottomBorder: !t,
                leftButton: s,
                leavePaddingForStatusBar: this.state.leavePaddingForStatusBar,
                ignorePointerEvents: !t
            })
              , l = [D.flexOne, v.horizontalPaddingStyle(this.state.safeAreaHorizontalInsets)];
            let c = [];
            return this.state.statusBarHeight && !this.state.showScreenReaderHeader && (l.push(v.marginTopStyle(this.state.statusBarHeight), D.overflowVisible),
            c.push(v.marginTopStyle(-1 * this.state.statusBarHeight))),
            v.hasHorizontalSafeAreas(this.state.safeAreaHorizontalInsets) && c.push(o.Styles.createViewStyle({
                marginLeft: -1 * this.state.safeAreaHorizontalInsets.left,
                marginRight: -1 * this.state.safeAreaHorizontalInsets.right
            }, !1)),
            o.createElement(o.View, {
                style: [V.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, a, o.createElement(o.ScrollView, {
                ref: this._onScrollViewRef,
                style: l,
                onScroll: this._onScroll,
                scrollEventThrottle: 32,
                keyboardShouldPersistTaps: !0
            }, o.createElement(o.View, {
                style: c
            }, o.createElement(L.default, {
                ref: this._onUserCardRef,
                allowEditAvatar: !0,
                allowOpenAvatarInMediaViewer: !1,
                replaceHeader: !0,
                userMri: h.getSkypeMri()
            })), o.createElement(o.View, {
                style: V.container
            }, this._renderShareProfileOption(), this._getSectionTitle(u.getString("UserSettingsPanel.MyProfileTitleUpper"), "profile", e), o.createElement(R, {
                userMri: h.getSkypeMri()
            }), this._getHelpAndAbout())))
        }
        _getHelpAndAbout() {
            return o.createElement(o.View, null, this._getSectionTitle(u.getString("UserSettingsPanel.OtherUpperTitle"), "other", V.sectionHeader), this._getDebugSettings(), o.createElement(F.WideButton, {
                icon: M.SkypeIcon.ContactGroup,
                label: u.getString("MyUserInfo.ManagePrivacyTitle"),
                onPressed: this._goToPrivacy
            }), o.createElement(F.WideButton, {
                icon: M.SkypeIcon.Info,
                label: u.getString("UserSettingsPanel.HelpAndAboutTitle"),
                onPressed: this._onHelpAndFeedbackButtonPressed
            }))
        }
        _getSectionTitle(e, t, i) {
            return o.createElement(P.SectionTitle, {
                key: t,
                title: e,
                titleStyles: i
            })
        }
        _renderShareProfileOption() {
            return o.createElement(A, {
                icon: E.shareIcon(),
                title: u.getString("ProfileCard.ShareProfileLink"),
                onPress: this._shareProfile
            })
        }
        _getDebugSettings() {}
        _updateStatusBar() {
            this._updateStatusBarStyle(this._isHeaderOpaqueStyle() ? w.createBarStyle(this._themeColors.defaultStatusBarTheme, !0) : w.createBarStyle(I.BarStyleTheme.Light, !0))
        }
        _isHeaderOpaqueStyle() {
            return this.state.showScreenReaderHeader || this.state.showHeader
        }
        _updateCurrentTheme(e, t) {
            const i = super._updateCurrentTheme(e, t);
            return t || this._updateStatusBar(),
            i
        }
    }
    e.exports = U
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(51)
      , s = i(10)
      , r = i(2)
      , a = i(3)
      , l = i(5)
      , c = i(349)
      , d = i(315)
      , u = i(430)
      , g = i(195)
      , h = i(66)
      , p = i(8)
      , m = i(23)
      , S = i(11)
      , C = i(15)
      , y = i(9)
      , f = l.lazyProperties({
        spinner: ()=>n.Styles.createViewStyle({
            position: "absolute",
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            backgroundColor: p.Color.transparent,
            justifyContent: "center",
            alignItems: "center",
            alignSelf: "stretch"
        }),
        textInput: ()=>n.Styles.createTextInputStyle({
            padding: 6,
            borderRadius: 10,
            font: m.font.uiDisplayRegular,
            fontSize: m.controlFontSize.body,
            backgroundColor: p.Color.gray100,
            color: p.Color.black,
            marginLeft: 50,
            marginRight: 50,
            height: 32,
            textAlignVertical: "top"
        }),
        statusLabel: ()=>n.Styles.createTextStyle({
            color: p.Color.white,
            paddingHorizontal: 20,
            marginTop: 50
        }),
        errorText: ()=>n.Styles.createTextStyle({
            color: p.Color.white,
            paddingHorizontal: 20,
            marginTop: 10,
            alignItems: "center",
            textAlign: "center"
        })
    });
    class _ extends o.default {
        constructor() {
            super(...arguments),
            this._onCloseButtonClicked = ()=>{
                const e = y.newCauseId();
                a.log(r.LogTraceArea.Navigation, "PnvDebugDialog._onCloseButtonClicked,  causeId: " + e),
                this._goBack(e)
            }
            ,
            this._onSkipButtonClicked = ()=>{
                const e = y.newCauseId();
                a.log(r.LogTraceArea.Navigation, "PnvDebugDialog._onSkipButtonClicked,  causeId: " + e),
                this.props.scenarioNavigator ? this.props.scenarioNavigator.goNext() : this.props.onNextButtonPressed ? this.props.onNextButtonPressed() : this._goBack(e)
            }
            ,
            this._onChangeText = e=>{
                this.setState({
                    phoneNumber: e
                })
            }
            ,
            this._onPressNextButton = e=>{
                e.stopPropagation();
                const t = y.newCauseId();
                if (a.log(r.LogTraceArea.Navigation, "PnvDebugDialog._onPressNextButton,  causeId: " + t),
                this.state.removalExecuted)
                    this._goBack(t);
                else {
                    this.setState({
                        removalInProgress: !0
                    });
                    const e = d.default.getCountryByCode(this.state.countryIsoCode.toLowerCase())
                      , t = e ? e.countryCode : 1;
                    u.default.removePhoneFromProfile(this.state.phoneNumber, this.state.countryIsoCode, t.toString()).then(e=>{
                        this.isComponentMounted() && this.setState({
                            errorCode: e
                        })
                    }
                    ).finally(()=>{
                        this.isComponentMounted() && this.setState({
                            removalInProgress: !1,
                            removalExecuted: !0
                        })
                    }
                    )
                }
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            g.default.initializeCountrySelection()
        }
        _buildState(e, t) {
            let i = {}
              , n = u.default.getLastPhoneVerificationStatus();
            if (i.phoneNumber = n.PhoneNumber,
            i.countryIsoCode = n.CountryIsoCode,
            i.countryCallingCode = n.CountryCallingCode,
            i.errorCode = n.ErrorCode,
            !this.state || !this.state.countryIsoCode) {
                const e = g.default.getSelectedCountry();
                e && (i.countryIsoCode = e.country)
            }
            return i
        }
        render() {
            const e = this.state.removalInProgress ? n.createElement(n.Button, {
                style: f.spinner
            }, n.createElement(h.default, {
                size: s.SXActivityIndicatorSize.Medium,
                tintColor: p.Color.white
            })) : void 0
              , t = this.state.removalExecuted ? void 0 : n.createElement(n.TextInput, {
                style: f.textInput,
                value: this.state.phoneNumber,
                multiline: !1,
                blurOnSubmit: !0,
                keyboardType: "numeric",
                onChangeText: this._onChangeText,
                clearButtonMode: "never"
            })
              , i = n.createElement(C.Header, {
                size: s.HeaderSize.h5,
                style: f.statusLabel,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes
            }, "Last Error Code:")
              , o = n.createElement(C.BodyText, {
                bold: !0,
                style: f.errorText,
                importantForAccessibility: n.Types.ImportantForAccessibility.Yes,
                disableThemeSubscription: !0
            }, this.state.errorCode ? this.state.errorCode : "Success");
            return n.createElement(c, {
                headerText: "PNV Debug Tool",
                descriptionElement: "Remove your registered number from your profile",
                hideSkipButton: this.props.hideSkipButton,
                nextButtonIcon: this.props.nextButtonIcon || S.SkypeIcon.Ok,
                hideCloseButton: this.props.hideCloseButton,
                closeButtonIcon: this.props.closeButtonIcon,
                onSkipButtonClicked: this._onSkipButtonClicked,
                onNextButtonClicked: this._onPressNextButton,
                onCloseButtonClicked: this._onCloseButtonClicked,
                scenarioNavigator: this.props.scenarioNavigator
            }, t, e, i, o)
        }
        _componentId() {
            return "PnvDebugDialog"
        }
        _goBack(e) {
            return a.log(r.LogTraceArea.Navigation, "PnvDebugDialog._goBack,  causeId: " + e),
            this.props.scenarioNavigator ? (this.props.scenarioNavigator.goBack(),
            !0) : super._goBack(e)
        }
    }
    t.default = _
}
, function(e, t, i) {
    "use strict";
    const n = i(0)
      , o = i(1689)
      , s = i(51)
      , r = i(1691)
      , a = i(10)
      , l = i(1693)
      , c = i(1699)
      , d = i(3319)
      , u = i(160)
      , g = i(1697)
      , h = i(1701)
      , p = i(1702)
      , m = i(5)
      , S = i(4)
      , C = i(1190)
      , y = i(55)
      , f = i(1193)
      , _ = i(3320)
      , b = i(37)
      , v = i(44)
      , T = i(107)
      , P = i(94)
      , A = i(14)
      , k = i(1706)
      , I = m.lazyProperties({
        panel: ()=>n.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch"
        }),
        settingsBlockContainer: ()=>n.Styles.createViewStyle({
            alignSelf: "stretch",
            paddingHorizontal: 10,
            overflow: "visible"
        })
    });
    class w extends s.default {
        constructor(e) {
            super(e),
            this._setRightButton = e=>{
                this.setState({
                    rightButton: e
                })
            }
        }
        _buildState(e, t) {
            return {
                safeAreaHorizontalPaddingStyle: b.default.horizontalPaddingStyle(a.HorizontalInsetZero)
            }
        }
        _createContext() {
            const e = super._createContext();
            return this.props.group === y.SettingsGroup.ThemeSettings && (e.shouldUseThemePreview = !0),
            e
        }
        componentDidMount() {
            super.componentDidMount(),
            this._updateStatusBarStyle(P.createBarStyle(this._themeColors.defaultStatusBarTheme))
        }
        render() {
            let e, t;
            switch (this.props.group) {
            case y.SettingsGroup.Cortana:
                e = S.getString("UserSettingsPanel.Cortana"),
                t = n.createElement(c.default, null);
                break;
            case y.SettingsGroup.Notifications:
                e = S.getString("UserSettingsPanel.NotificationsTitle"),
                t = n.createElement(f.default, null);
                break;
            case y.SettingsGroup.Contacts:
                e = S.getString("UserSettingsPanel.ContactsTitle"),
                t = n.createElement(l.default, null);
                break;
            case y.SettingsGroup.Privacy:
                e = S.getString("UserSettingsPanel.PrivacyHeader"),
                t = n.createElement(_.default, null);
                break;
            case y.SettingsGroup.Chat:
                e = S.getString("UserSettingsPanel.MessagingAndChatsTitle"),
                t = n.createElement(r.default, null);
                break;
            case y.SettingsGroup.HelpAndFeedback:
                e = S.getString("MyProfilePanel.HelpAndFeedbackButtonTitle"),
                t = n.createElement(h.default, null);
                break;
            case y.SettingsGroup.MyAccountAndProfile:
                e = S.getString("UserSettingsPanel.MyAccountAndProfileTitle"),
                t = n.createElement(C.default, null);
                break;
            case y.SettingsGroup.AccountAndProfile:
                e = S.getString("UserSettingsPanel.MyAccountAndProfileTitle"),
                t = n.createElement(o.default, null);
                break;
            case y.SettingsGroup.General:
                e = S.getString("UserSettingsPanel.GeneralTitle"),
                t = n.createElement(g.default, null);
                break;
            case y.SettingsGroup.Debug:
                e = "[Debug]",
                t = n.createElement(d.default, null);
                break;
            case y.SettingsGroup.HotKeys:
                e = S.getString("KeyboardShortcuts.Title2"),
                t = n.createElement(p.default, null);
                break;
            case y.SettingsGroup.ThemeSettings:
                e = S.getString("UserSettingsPanel.AppearanceButton"),
                t = n.createElement(k.default, {
                    origin: u.DialogNavOrigin.Settings,
                    setRightButton: this._setRightButton
                })
            }
            const i = [I.settingsBlockContainer];
            this.state.safeAreaHorizontalPaddingStyle && i.push(this.state.safeAreaHorizontalPaddingStyle);
            const s = {
                closeButtonType: this.props.navigationDirection === T.StackNavigationDirection.Present ? v.CloseButtonType.Close : v.CloseButtonType.Back
            };
            return n.createElement(n.View, {
                style: [I.panel, this._themeStyles.primaryBackgroundColorStyle]
            }, n.createElement(v.SimplePanelHeader, {
                panelName: e,
                leftButton: s,
                rightButtons: this.state.rightButton,
                delayHeaderFocus: this._getContext().isPresentedByMobileStackNavigator
            }), n.createElement(n.ScrollView, {
                style: A.flexOne
            }, n.createElement(n.View, {
                style: i
            }, t)))
        }
    }
    e.exports = w
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(102)
      , s = i(6)
      , r = i(51)
      , a = i(32)
      , l = i(17)
      , c = i(84)
      , d = i(103)
      , u = i(90);
    class g extends r.default {
        constructor() {
            super(...arguments),
            this._getDevFeatures = ()=>[],
            this._onPressTelemetryMonitor = ()=>{
                l.navigateToTelemetryPerformanceMonitor(this._getContext())
            }
            ,
            this._onPressPhoneNumberVerification = ()=>{
                l.navigateToPnvEnterNumber(void 0, this._getContext())
            }
            ,
            this._onPressPnvDebugTool = ()=>{
                l.navigateToPnvDebugTool()
            }
            ,
            this._onPressManageFeatureFlags = ()=>{
                l.navigateToFeatureFlags(this._getContext())
            }
            ,
            this._onPressShowRawConfig = ()=>{
                l.navigateToRawPreferences(this._getContext())
            }
        }
        _buildState(e, t) {
            return {
                ignoreActiveEndpoint: !!a.default.getUserPreferencesLocal().ignoreActiveEndpointFiltering,
                showActiveEndpointFilteringOption: s.default.getS4LMessagingFeatures().allowIgnoringActiveEndpoint
            }
        }
        render() {
            return n.createElement(n.View, null, this._getTelemetryMonitorButton(), this._getPhoneNumberVerificationButton(), this._getPressPnvDebugToolButton(), this.state.showActiveEndpointFilteringOption ? this._getIgnoreActiveEndpointButton() : void 0, this._getDevFeatures())
        }
        _getIgnoreActiveEndpointButton() {
            const e = "Ignore Active Endpoint Filtering";
            return n.createElement(o, {
                key: "ignoreActiveEndpoint",
                style: [d.styles.controlRow, this._themeStyles.dividerBorderColorStyle],
                isOn: this.state.ignoreActiveEndpoint,
                accessibilityLabel: e,
                onChange: (e,t)=>this._toggleLocalPreference({
                    ignoreActiveEndpointFiltering: t
                })
            }, n.createElement(c.SwitchLabel, {
                title: e
            }))
        }
        _getPressPnvDebugToolButton() {
            return n.createElement(u.WideButton, {
                key: "pnvDebugTool",
                label: "PNV Debug Tool",
                labelStyle: d.styles.titleMediumSemiLarge,
                labelBottom: "Remove registered phone number from profile",
                onPressed: this._onPressPnvDebugTool
            })
        }
        _getPhoneNumberVerificationButton() {
            return n.createElement(u.WideButton, {
                key: "enterPhoneNumber",
                label: "Phone Number Verification",
                labelStyle: d.styles.titleMediumSemiLarge,
                labelBottom: "Verify phone number",
                onPressed: this._onPressPhoneNumberVerification
            })
        }
        _getTelemetryMonitorButton() {
            return n.createElement(u.WideButton, {
                key: "manageProfile",
                label: "Telemetry Monitor",
                labelStyle: d.styles.titleMediumSemiLarge,
                labelBottom: "Telemetry events statistics",
                onPressed: this._onPressTelemetryMonitor
            })
        }
        _toggleLocalPreference(e) {
            a.default.setUserPreferencesLocal(e)
        }
    }
    t.default = g
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(6)
      , s = i(50)
      , r = i(1698)
      , a = i(28)
      , l = i(1700)
      , c = i(4)
      , d = i(1694)
      , u = i(20)
      , g = i(17)
      , h = i(1690)
      , p = i(1191)
      , m = i(103)
      , S = i(1695)
      , C = i(90);
    class y extends s.default {
        constructor() {
            super(...arguments),
            this._onPressDiagnosticTools = ()=>{
                g.navigateToDiagnosticTools(this._getContext())
            }
            ,
            this._onPressManageUsers = ()=>{
                g.navigateToManageUsersSettingsPanel(this._getContext())
            }
        }
        static getHeaderText() {
            return c.getString("UserSettingsPanel.PrivacyHeader")
        }
        _buildState(e, t) {
            return {
                ecsDiagnosticToolsEnabled: o.default.getDebugabilitySquad().enableDiagnosticTools,
                sendReadReceiptsFeatureEnabled: o.default.getS4LMessagingFeatures().enableReadReceipts,
                showAddPhotoLabel: !a.getDisplayableProfile(u.getSkypeMri()).getAvatarUrl()
            }
        }
        render() {
            return n.createElement(n.View, {
                style: this.props.style
            }, n.createElement(S.default, {
                buttonStyles: this.props.buttonStyles
            }), this._getSendReadReceiptsButton(), n.createElement(r.default, null), this._getDiagnosticToolsButton(), n.createElement(l.default, null), n.createElement(h.default, {
                buttonStyles: this.props.buttonStyles,
                showAddPhotoLabel: this.state.showAddPhotoLabel
            }), this._getManageContactsButton(), n.createElement(d.default, {
                buttonStyles: this.props.buttonStyles
            }))
        }
        _getSendReadReceiptsButton() {
            return this.state.sendReadReceiptsFeatureEnabled ? n.createElement(p.default, null) : void 0
        }
        _getDiagnosticToolsButton() {
            return this.state.ecsDiagnosticToolsEnabled ? n.createElement(C.WideButton, {
                key: "diagnosticTools",
                label: c.getString("UserSettingsPanel.DiagnosticToolsTitle"),
                labelStyle: m.styles.titleMediumSemiLarge,
                buttonStyles: this.props.buttonStyles,
                onPressed: this._onPressDiagnosticTools
            }) : void 0
        }
        _getManageContactsButton() {
            return n.createElement(C.WideButton, {
                key: "manageUsers",
                label: c.getString("UserSettingsPanel.ManageContactsTitle"),
                labelStyle: m.styles.titleMediumSemiLarge,
                buttonStyles: this.props.buttonStyles,
                onPressed: this._onPressManageUsers
            })
        }
        _getHeaderText(e) {
            return y.getHeaderText()
        }
    }
    t.default = y
}
, , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(13)
      , r = i(78)
      , a = i(5)
      , l = i(4)
      , c = i(706)
      , d = i(134)
      , u = i(274)
      , g = a.lazyProperties({
        panel: ()=>o.Styles.createViewStyle({
            flexDirection: "row",
            flexWrap: "wrap",
            justifyContent: "flex-start"
        }),
        tileContainer: ()=>o.Styles.createViewStyle({
            padding: 2
        }),
        scrollView: ()=>o.Styles.createScrollViewStyle({
            flex: 1,
            alignSelf: "stretch"
        })
    });
    class h extends s.ComponentBase {
        constructor() {
            super(...arguments),
            this._mountedRefsMap = new d.default,
            this._onScroll = (e,t)=>{
                this.props.onScroll && this.props.onScroll(e, t)
            }
            ,
            this._onLayout = e=>{
                const t = this.props.thumbnailsPerRow || 1
                  , i = Math.floor(e.width / t);
                this.setState({
                    tileSize: i
                })
            }
        }
        render() {
            let e = [];
            const t = n.isUndefined(this.props.thumbnailPadding) ? g.tileContainer : o.Styles.createViewStyle({
                padding: this.props.thumbnailPadding
            }, !1);
            return this.state.tileSize && !n.isEmpty(this.props.mediaMessages) && this.props.mediaMessages[0]instanceof u && (e = r.chain(this.props.mediaMessages, r.take(this.props.mediaMessages.length), r.mapWithKey((e,i)=>this._getMediaTile(e, i, t)))),
            o.createElement(o.ScrollView, {
                style: [g.scrollView, this.props.style],
                onScroll: this._onScroll
            }, o.createElement(o.View, {
                style: this.props.contentStyles
            }, o.createElement(o.View, {
                style: g.panel,
                onLayout: this._onLayout
            }, e)))
        }
        _getMediaTile(e, t, i) {
            const n = l.getString("Global.CountOfTotal", {
                count: t + 1,
                total: this.props.mediaMessages.length
            });
            return o.createElement(c.default, {
                key: e.cuid,
                ref: this._mountedRefsMap.onComponentRef(e.cuid),
                message: e,
                style: i,
                height: this.state.tileSize ? Math.round(this.state.tileSize) : void 0,
                width: this.state.tileSize,
                showVideoMediaTypeIcon: this.props.showVideoMediaTypeIcon,
                showOverlay: this.props.showThumbnailOverlay,
                showCreator: this.props.showCreatorOnThumbnails,
                onThumbnailPress: this.props.onGridItemPress,
                messageActions: this.props.getMessageActions ? this.props.getMessageActions(e) : void 0,
                borderRadius: this.props.itemBorderRadius,
                thumbnailIconsSize: this.props.thumbnailIconsSize,
                renderOrigin: this.props.renderOrigin,
                shouldUseMessageAccessibilityLabel: !0,
                accessibilityLabel: n
            })
        }
        getMediaNode(e) {
            return this._mountedRefsMap.ref(e)
        }
    }
    e.exports = h
}
, function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(0)
      , s = i(51)
      , r = i(2)
      , a = i(241)
      , l = i(3)
      , c = i(5)
      , d = i(4)
      , u = i(22)
      , g = i(44)
      , h = i(8)
      , p = i(49)
      , m = i(1430)
      , S = i(15)
      , C = i(9)
      , y = c.lazyProperties({
        panel: ()=>o.Styles.createViewStyle({
            flex: 1,
            alignSelf: "stretch",
            backgroundColor: h.Color.white
        }),
        panelContainer: ()=>o.Styles.createViewStyle({
            flex: 1,
            flexDirection: "column"
        }),
        rowContainer: ()=>o.Styles.createTextStyle({
            flex: 1,
            backgroundColor: h.Color.white,
            alignItems: "center",
            flexDirection: "row",
            margin: 8,
            alignSelf: "stretch",
            justifyContent: "space-between"
        }),
        labelsContainer: ()=>o.Styles.createTextStyle({
            flex: 1,
            flexDirection: "column"
        }),
        bandwidthContainer: ()=>o.Styles.createTextStyle({
            textAlign: "right",
            color: h.Color.gray400
        }),
        rowTitle: ()=>o.Styles.createTextStyle({
            color: h.Color.black
        }),
        rowDescription: ()=>o.Styles.createTextStyle({
            color: h.Color.gray400,
            marginTop: 3
        }),
        delimeter: ()=>o.Styles.createTextStyle({
            height: 1,
            alignSelf: "stretch",
            backgroundColor: h.Color.gray100,
            marginHorizontal: 8
        })
    });
    class f extends s.default {
        constructor() {
            super(...arguments),
            this._closeModal = ()=>{
                const e = C.newCauseId();
                l.log(r.LogTraceArea.Navigation, "TelemetryPerfPanel._closeModal,  causeId: " + e),
                this._goBack(e)
            }
        }
        _buildState(e, t) {
            return {
                monitorEnabled: !0,
                isUsingStackNavigationContext: u.default.isUsingStackNavigationContext(),
                items: m.default.getSortedEventsStatistics()
            }
        }
        componentDidMount() {
            super.componentDidMount(),
            this._statisticsUpdatedSubscriptionToken = m.default.statisticsUpdated.subscribe(()=>{
                this.isComponentMounted() && this.setState({
                    items: m.default.getSortedEventsStatistics()
                })
            }
            )
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            this._statisticsUpdatedSubscriptionToken && (this._statisticsUpdatedSubscriptionToken.unsubscribe(),
            this._statisticsUpdatedSubscriptionToken = void 0)
        }
        render() {
            let e;
            if (this.props.showHeader) {
                const t = this.state.isUsingStackNavigationContext ? {
                    closeButtonType: g.CloseButtonType.Back
                } : {
                    icon: p.backIcon(),
                    title: d.getString("Global.BackButtonTitle"),
                    onPress: this._closeModal
                };
                e = o.createElement(g.SimplePanelHeader, {
                    panelName: "Telemetry Monitor",
                    leftButton: t
                })
            }
            return o.createElement(o.View, {
                style: y.panel
            }, e, o.createElement(o.ScrollView, {
                style: y.panelContainer
            }, this._renderEventsRows()))
        }
        _renderEventsRows() {
            let e = [];
            return this.state.items ? (e.push(...this._renderTotalRow()),
            n.each(this.state.items, t=>{
                const [i,n] = t;
                let o = n.numberOfEvents + " event";
                n.numberOfEvents > 1 && (o += "s");
                const s = o + "  ·  sampling " + n.sampling
                  , r = a.default.formatFileSize(n.numberOfBytes, 1).formattedString;
                e.push(...this._renderEventRow(i, s, r))
            }
            ),
            e) : []
        }
        _renderTotalRow() {
            let e = 0
              , t = 0;
            n.each(this.state.items, i=>{
                const n = i[1];
                e += n.numberOfBytes,
                t += n.numberOfEvents
            }
            );
            const i = a.default.formatFileSize(e, 1).formattedString;
            return this._renderEventRow("[ TOTAL ]", t + " events sent", i)
        }
        _renderEventRow(e, t, i) {
            return [o.createElement(o.View, {
                style: y.rowContainer,
                key: e
            }, o.createElement(o.View, {
                style: y.labelsContainer
            }, o.createElement(S.BodyText, {
                bold: !0,
                size: S.BodyTextSize.BigDeprecated,
                style: y.rowTitle,
                disableThemeSubscription: !0
            }, e), o.createElement(S.BodyText, {
                size: S.BodyTextSize.SmallDeprecated,
                style: y.rowDescription,
                disableThemeSubscription: !0
            }, t)), o.createElement(S.BodyText, {
                bold: !0,
                size: S.BodyTextSize.SmallDeprecated,
                style: y.bandwidthContainer,
                disableThemeSubscription: !0
            }, i)), o.createElement(o.View, {
                style: y.delimeter,
                key: "line" + e
            })]
        }
    }
    e.exports = f
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(460)
      , s = i(0)
      , r = i(31)
      , a = i(16)
      , l = i(1810)
      , c = i(10)
      , d = i(43)
      , u = i(313)
      , g = i(2)
      , h = i(3)
      , p = i(5)
      , m = i(3328)
      , S = i(1802)
      , C = i(709)
      , y = i(17)
      , f = i(64)
      , _ = i(214)
      , b = i(1221)
      , v = i(24)
      , T = i(1818)
      , P = i(105)
      , A = i(592)
      , k = i(25)
      , I = i(14)
      , w = i(9)
      , N = p.lazyProperties({
        contentPanelLowerContents: ()=>s.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            alignSelf: "stretch"
        })
    });
    class M extends d.default {
        constructor() {
            super(...arguments),
            this._onLayout = e=>{
                v.default.putWindowSize(e.width, e.height, this._getRootViewId())
            }
        }
        _buildState(e, t) {
            const i = this._getRootViewId();
            let n = {
                startupUIState: P.default.getStartupUIState(),
                shouldCollapseSplitNav: v.default.getResponsiveWidth(i) <= k.ResponsiveWidth.Tiny
            };
            return n.startupUIState === P.StartupUIState.StartupComplete && (n.compositeSplitNavStack = i ? f.default.getCurrentStackNavigationContext(_.default.mainContentNavigatorIdForRootViewId(i)) : void 0),
            i !== c.MainRootViewId && a.isMri(i) && (n.hasConnectedCall = r.default.CallingStore.hasConnectedCall(i)),
            n
        }
        _createContext() {
            const e = super._createContext();
            return e.rootViewId = this.props.event.eventId,
            e.rootViewType = c.RootViewType.SplitViewContent,
            e
        }
        componentDidMount() {
            super.componentDidMount();
            const e = w.newCauseId();
            h.log(g.LogTraceArea.Navigation, "RootContentView.componentDidMount, causeId: " + e);
            const t = _.default.mainContentNavigatorIdForComponentContext(this._getContext());
            y.collapseSplitNavContext(t, this.state.shouldCollapseSplitNav, e),
            S.open()
        }
        componentDidUpdate(e, t, i) {
            if (super.componentDidUpdate(e, t, i),
            this.state.shouldCollapseSplitNav !== t.shouldCollapseSplitNav) {
                const e = w.newCauseId();
                h.log(g.LogTraceArea.Navigation, "RootContentView.componentDidUpdate, causeId: " + e);
                const t = _.default.mainContentNavigatorIdForComponentContext(this._getContext());
                y.collapseSplitNavContext(t, this.state.shouldCollapseSplitNav, e)
            }
        }
        componentWillUnmount() {
            super.componentWillUnmount(),
            h.log(g.LogTraceArea.RootAppView, "RootContentView.componentWillUnmount")
        }
        render() {
            const e = []
              , t = this.props.nativeWindow && this.props.nativeWindow.getWindow() || window;
            return e.push(s.createElement(o.default, {
                key: "customFocusOutline",
                window: t
            })),
            this.state.startupUIState === P.StartupUIState.LoginDisplayed ? (h.log(g.LogTraceArea.Navigation, "SplitView Login Redirect screen"),
            e.push(this._renderLoginRedirectView("splitview"))) : this.state.startupUIState === P.StartupUIState.StartupComplete && this.state.compositeSplitNavStack ? (h.log(g.LogTraceArea.Navigation, "SplitView Content screen"),
            e.push(this._renderContentPanel(this.state.compositeSplitNavStack, "splitview"))) : (h.log(g.LogTraceArea.Navigation, "SplitView Splash screen"),
            e.push(this._renderSplashScreen("splitview"))),
            this._createRootView(e)
        }
        _createRootView(e) {
            const t = s.createElement(u.DesktopContextMenuTarget, {
                key: "contextmenuanchor"
            });
            return s.createElement(s.View, {
                style: I.flexOne,
                onLayout: this._onLayout
            }, t, e)
        }
        _renderContentPanel(e, t) {
            return s.createElement(s.View, {
                key: "content" + t,
                style: N.contentPanelLowerContents
            }, s.createElement(T, {
                splitNavContext: e
            }), s.createElement(l, null), s.createElement(b, null), s.createElement(C, null))
        }
        _renderLoginRedirectView(e) {
            return s.createElement(m, {
                key: "splitViewLoginRedirectView" + e
            })
        }
        _renderSplashScreen(e) {
            return s.createElement(A, {
                key: "splitViewSplashScreen" + e,
                showSpinner: !0,
                showLoginFallback: !1,
                loginCallback: n.noop
            })
        }
    }
    t.default = M
}
, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(0)
      , o = i(13)
      , s = i(10)
      , r = i(24)
      , a = i(105)
      , l = i(1878);
    class c extends o.ComponentBase {
        constructor() {
            super(...arguments),
            this._appOnlayout = e=>{
                const {width: t, height: i} = e;
                r.default.putWindowSize(t, i, s.MainRootViewId)
            }
            ,
            this._onLoginCompletedInSecondaryWindow = (e,t,i)=>{
                a.default.internal_setSecondaryWindowLoginState(a.SecondaryWindowLoginType.MSALogin, {
                    msaAccessToken: e,
                    msaRefreshToken: t,
                    isSignup: i
                })
            }
            ,
            this._onQuickSignOnInSecondaryWindow = e=>{
                a.default.internal_setSecondaryWindowLoginState(a.SecondaryWindowLoginType.QuickSignOn, {
                    skypeId: e
                })
            }
        }
        render() {
            return n.createElement(l, {
                isFirstTimeSignIn: this.props.isFirstTimeSignIn,
                onLoginCompleted: this._onLoginCompletedInSecondaryWindow,
                onQuickSignOn: this.props.isQuickSignOnActive ? this._onQuickSignOnInSecondaryWindow : void 0,
                onLayout: this._appOnlayout
            })
        }
    }
    t.default = c
}
, , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(460)
      , r = i(0)
      , a = i(82)
      , l = i(7)
      , c = i(31)
      , d = i(88)
      , u = i(43)
      , g = i(28)
      , h = i(2)
      , p = i(40)
      , m = i(3)
      , S = i(38)
      , C = i(124)
      , y = i(5)
      , f = i(4)
      , _ = i(570)
      , b = i(47)
      , v = i(19)
      , T = i(8)
      , P = i(11)
      , A = i(95)
      , k = i(67)
      , I = i(9)
      , w = y.lazyProperties({
        window: ()=>r.Styles.createViewStyle({
            flex: 1,
            flexDirection: "row",
            justifyContent: "center",
            backgroundColor: T.Color.callStageDark,
            alignItems: "center"
        }),
        button: ()=>r.Styles.createButtonStyle({
            borderWidth: 1,
            borderColor: T.Color.gray300Overlay80,
            borderRadius: 15,
            height: 30,
            backgroundColor: T.Color.callStageDark,
            paddingBottom: 1,
            paddingHorizontal: 24,
            margin: 5,
            alignContent: "center",
            opacity: .74
        }),
        pinButton: ()=>r.Styles.createButtonStyle({
            borderWidth: 1,
            borderColor: T.Color.gray300Overlay80,
            borderRadius: 15,
            height: 20,
            backgroundColor: T.Color.callStageDark,
            paddingBottom: 1,
            paddingHorizontal: 4,
            margin: 5,
            alignContent: "center",
            opacity: .74
        }),
        text: ()=>r.Styles.createTextStyle({
            color: T.Color.white,
            fontSize: 12
        }),
        status: ()=>r.Styles.createTextStyle({
            fontSize: 12,
            overflow: "hidden",
            paddingRight: 20,
            flex: 1,
            color: T.Color.white,
            marginLeft: 20
        }),
        avatar: ()=>r.Styles.createViewStyle({
            marginLeft: 5
        })
    });
    var N;
    !function(e) {
        e[e.HIDDEN = 0] = "HIDDEN",
        e[e.VIEWER_REQUESTING_CONTROL = 1] = "VIEWER_REQUESTING_CONTROL",
        e[e.VIEWER_IS_IN_CONTROL = 2] = "VIEWER_IS_IN_CONTROL",
        e[e.SCREEN_SHARING = 3] = "SCREEN_SHARING"
    }(N || (N = {}));
    class M extends u.default {
        constructor() {
            super(...arguments),
            this._viewersListInitialized = !1,
            this._viewersListSize = {
                width: 200,
                height: 50
            },
            this._focusToolbar = (e,t)=>(this.props.nativeWindow.show(),
            !0),
            this._pinToolbar = ()=>{
                this.props.nativeWindow.clearVisiblityIntervalsAndShowWindow(),
                d.default.pinToolbar(this.props.callId, I.newCauseId()),
                this.setState({
                    isPinned: !0
                })
            }
            ,
            this._unpinToolbar = ()=>{
                this.props.nativeWindow.startVisibilityIntervals(this._restorePosition, 100),
                d.default.unPinToolbar(this.props.callId, I.newCauseId()),
                this.setState({
                    isPinned: !1
                })
            }
            ,
            this._onReceiveMessageFromViewersList = (e,...t)=>{
                m.log(h.LogTraceArea.ScreenSharing, `Message from viewersList - name: ${e} args: ${n.pii.Omit(JSON.stringify(t))}`);
                const i = {
                    initialized: ()=>this._onViewersListInitialized(),
                    grantControl: e=>this._onGrantControl(e),
                    hideViewersList: ()=>this._hideViewersList()
                };
                i.hasOwnProperty(e) ? i[e](...t) : m.log(h.LogTraceArea.ScreenSharing, "Unhandled message: " + e)
            }
            ,
            this._hideViewersList = ()=>{
                this._viewersList && (this._viewersList.hide(),
                this.state.isPinned || this.props.nativeWindow.startVisibilityIntervals(this._restorePosition, 1e3))
            }
            ,
            this._onShowViewersList = ()=>{
                m.log(h.LogTraceArea.ScreenSharing, "ShowViewersList"),
                this._viewersList && (this.props.nativeWindow.clearVisiblityIntervalsAndShowWindow(),
                this._viewersList.show(),
                this._viewersList.focusWindow())
            }
            ,
            this._onTerminateControl = ()=>{
                var e;
                const t = I.newCauseId()
                  , i = this.state.viewer;
                i && (m.log(h.LogTraceArea.ScreenSharing, `Terminating control from ${n.pii.Mri(i.mri)} from DesktopScreenSharingToolbar causeId: ${t}`),
                null === (e = this.state.screenSharingControlStore) || void 0 === e || e.terminateControl(i.mri).then(()=>{
                    m.log(h.LogTraceArea.ScreenSharing, `Terminating control from ${n.pii.Mri(i.mri)} succeeded causeId: ${t}`)
                }
                ).catch(e=>{
                    m.log(h.LogTraceArea.ScreenSharing, `Terminating control from ${n.pii.Mri(i.mri)} failed with ${v.errorAsString(e)} causeId: ${t}`)
                }
                ))
            }
            ,
            this._onAcceptControlRequest = ()=>{
                var e;
                const t = I.newCauseId()
                  , i = this.state.viewer;
                i && (m.log(h.LogTraceArea.ScreenSharing, `Accepting control request from ${n.pii.Mri(i.mri)} from DesktopScreenSharingToolbar causeId: ${t}`),
                null === (e = this.state.screenSharingControlStore) || void 0 === e || e.acceptControlRequest(i.mri).then(()=>{
                    m.log(h.LogTraceArea.ScreenSharing, `Accepting control request from ${n.pii.Mri(i.mri)} succeeded causeId: ${t}`)
                }
                ).catch(e=>{
                    m.log(h.LogTraceArea.ScreenSharing, `Accepting control request from ${n.pii.Mri(i.mri)} failed with ${v.errorAsString(e)} causeId: ${t}`)
                }
                ))
            }
            ,
            this._onDenyControlRequest = ()=>{
                var e;
                const t = I.newCauseId()
                  , i = this.state.viewer;
                i && (m.log(h.LogTraceArea.ScreenSharing, `Denying control request from ${n.pii.Mri(i.mri)} from DesktopScreenSharingToolbar causeId: ${t}`),
                null === (e = this.state.screenSharingControlStore) || void 0 === e || e.denyControlRequest(i.mri).then(()=>{
                    m.log(h.LogTraceArea.ScreenSharing, `Denying control request from ${n.pii.Mri(i.mri)} succeeded causeId: ${t}`)
                }
                ).catch(e=>{
                    m.log(h.LogTraceArea.ScreenSharing, `Denying control request from ${n.pii.Mri(i.mri)} failed with ${v.errorAsString(e)} causeId: ${t}`)
                }
                ))
            }
            ,
            this._onSharingStop = ()=>{
                const e = I.newCauseId();
                m.log(h.LogTraceArea.ScreenSharing, "Stopping sharing from DesktopScreenSharingToolbar causeId: " + e),
                c.default.CallingStore.stopScreenSharing(this.props.callId, e, _.StopSharingOrigin.ScreenSharingToolbar).then(()=>{
                    m.log(h.LogTraceArea.ScreenSharing, "Stopping sharing succeeded causeId: " + e)
                }
                ).catch(t=>{
                    m.log(h.LogTraceArea.ScreenSharing, `Stopping sharing failed with ${v.errorAsString(t)} causeId: ${e}`)
                }
                )
            }
        }
        _buildState(e, t) {
            var i, n, s;
            const r = c.default.CallingStore.getCallState(e.callId)
              , l = !t && this.state.isPinned;
            if (r !== a.CallState.Connected)
                return e.nativeWindow.clearVisiblityIntervalsAndHideWindow(),
                {
                    internalState: N.HIDDEN,
                    viewersThatCanBeGrantedControl: [],
                    isPinned: l
                };
            const d = c.default.ScreenSharingControlStoreRegistrar.getStoreFromCallId(e.callId)
              , u = null === (i = d) || void 0 === i ? void 0 : i.viewerRequestingControl()
              , g = null === (n = d) || void 0 === n ? void 0 : n.viewerInControl()
              , h = u ? N.VIEWER_REQUESTING_CONTROL : g ? N.VIEWER_IS_IN_CONTROL : N.SCREEN_SHARING;
            this._restorePosition = {
                x: e.sourceBounds.x || 0,
                y: e.sourceBounds.y || 0,
                width: e.sourceBounds.width,
                height: 5
            },
            t ? e.nativeWindow.startVisibilityIntervals(this._restorePosition, 1e3) : h !== this.state.internalState && (h === N.VIEWER_REQUESTING_CONTROL ? e.nativeWindow.clearVisiblityIntervalsAndShowWindow() : l || e.nativeWindow.startVisibilityIntervals(this._restorePosition, 1e3));
            const p = u || g;
            return {
                viewersThatCanBeGrantedControl: o.map(null === (s = d) || void 0 === s ? void 0 : s.viewersThatCanBeGrantedControl(), this._mapParticipantToViewer),
                internalState: h,
                viewer: p ? this._mapParticipantToViewer(p) : void 0,
                screenSharingControlStore: d,
                isPinned: l
            }
        }
        componentDidUpdate(e, t, i) {
            var n, o, s;
            if (super.componentDidUpdate(e, t, i),
            t.internalState !== this.state.internalState)
                switch (this.state.internalState) {
                case N.VIEWER_REQUESTING_CONTROL:
                    b.maybeAnnounceForAccessibility(f.getString("ScreenSharingToolbar.RequestingControlStatus", {
                        viewer_display_name: (null === (n = this.state.viewer) || void 0 === n ? void 0 : n.displayName) || ""
                    }));
                    break;
                case N.VIEWER_IS_IN_CONTROL:
                    b.maybeAnnounceForAccessibility(f.getString("ScreenSharingToolbar.SharingControlStatus", {
                        viewer_display_name: (null === (o = this.state.viewer) || void 0 === o ? void 0 : o.displayName) || ""
                    }))
                }
            this.state.internalState !== N.SCREEN_SHARING || S.default(this.state.viewersThatCanBeGrantedControl, t.viewersThatCanBeGrantedControl) || this._updateViewersList(),
            (null === (s = this.state.screenSharingControlStore) || void 0 === s ? void 0 : s.canGrantControl()) && d.default.setGiveControlAsPossible(this.props.callId, I.newCauseId())
        }
        componentDidMount() {
            super.componentDidMount(),
            C.default.addSystemHandler(h.KeyboardShortcut.FocusScreenSharingToolbar, this._focusToolbar)
        }
        componentWillUnmount() {
            var e;
            super.componentWillUnmount(),
            C.default.removeSystemHandler(h.KeyboardShortcut.FocusScreenSharingToolbar, this._focusToolbar),
            null === (e = this._viewersList) || void 0 === e || e.destroy()
        }
        render() {
            let e;
            if (this.state.viewer)
                switch (this.state.internalState) {
                case N.HIDDEN:
                    return null;
                case N.VIEWER_IS_IN_CONTROL:
                    e = this._getViewersInControlControls(this.state.viewer);
                    break;
                case N.VIEWER_REQUESTING_CONTROL:
                    e = this._getViewerRequestingControlControls(this.state.viewer)
                }
            else
                e = this._getScreenSharingControls();
            const t = this.props.nativeWindow.getWindow();
            return r.createElement(r.View, {
                style: w.window
            }, t ? r.createElement(s.default, {
                key: "customFocusOutline",
                window: t
            }) : void 0, e)
        }
        _getPinButton() {
            return r.createElement(p.default, {
                key: "pinButton",
                icon: P.SkypeIcon.Pin,
                color: T.Color.white,
                hoverColor: T.Color.white,
                size: P.IconSize.size10,
                style: w.pinButton,
                onPress: this._pinToolbar,
                title: f.getString("ScreenSharingToolbar.PinToolbarTooltip")
            })
        }
        _getUnpinButton() {
            return r.createElement(p.default, {
                key: "unpinButton",
                icon: P.SkypeIcon.PinOff,
                color: T.Color.white,
                hoverColor: T.Color.white,
                size: P.IconSize.size10,
                style: w.pinButton,
                onPress: this._unpinToolbar,
                title: f.getString("ScreenSharingToolbar.UnpinToolbarTooltip")
            })
        }
        _getViewersInControlControls(e) {
            const t = this._getAvatar(e.mri)
              , i = r.createElement(r.Text, {
                style: w.status,
                key: "status"
            }, f.getString("ScreenSharingToolbar.SharingControlStatus", {
                viewer_display_name: e.displayName || ""
            }))
              , n = f.getString("ScreenSharingToolbar.TerminateControl");
            return [t, i, r.createElement(r.Button, {
                style: w.button,
                onPress: this._onTerminateControl,
                accessibilityLabel: n,
                key: "takeControlButton"
            }, r.createElement(r.Text, {
                style: w.text
            }, n)), this._getStopSharingButton(), this.state.isPinned ? this._getUnpinButton() : this._getPinButton()]
        }
        _getViewerRequestingControlControls(e) {
            const t = this._getAvatar(e.mri)
              , i = r.createElement(r.Text, {
                style: w.status,
                key: "status"
            }, f.getString("ScreenSharingToolbar.RequestingControlStatus", {
                viewer_display_name: e.displayName || ""
            }))
              , n = f.getString("ScreenSharingToolbar.AcceptControl")
              , o = r.createElement(r.Button, {
                style: w.button,
                onPress: this._onAcceptControlRequest,
                accessibilityLabel: n,
                key: "acceptButton"
            }, r.createElement(r.Text, {
                style: w.text
            }, n))
              , s = f.getString("ScreenSharingToolbar.DenyControl");
            return [t, i, o, r.createElement(r.Button, {
                style: w.button,
                onPress: this._onDenyControlRequest,
                accessibilityLabel: s,
                key: "declineButton"
            }, r.createElement(r.Text, {
                style: w.text
            }, s))]
        }
        _getAvatar(e) {
            return r.createElement(r.View, {
                key: "avatar-" + e,
                style: w.avatar
            }, r.createElement(A.default, {
                userMri: e,
                size: k.UserIconSize.Size32
            }))
        }
        _getScreenSharingControls() {
            const e = r.createElement(r.Text, {
                style: w.status,
                key: "status"
            }, f.getString("ScreenSharingToolbar.SharingStatusScreen"));
            if (!o.isEmpty(this.state.viewersThatCanBeGrantedControl) && !this._viewersList) {
                const {x: e, y: t} = this._getViewersListCoordinates(this._computeViewersListWidth());
                this._viewersList = window.electronApi.createPopupWindow("screenSharingToolbarViewersList", {
                    contentUri: "file:///screenSharingToolbarViewersList/index.html",
                    preloadScript: "screenSharingToolbarViewersList/Preload.js",
                    visibleOnAllWorkspaces: !0,
                    dontShare: !1,
                    show: !1,
                    x: e,
                    y: t,
                    width: this._viewersListSize.width,
                    height: this._viewersListSize.height,
                    transparent: !0,
                    skipTaskbar: !0,
                    alwaysOnTop: !0,
                    resizable: !1,
                    minimizable: !1,
                    maximizable: !1,
                    closable: !1,
                    fullscreenable: !1,
                    frame: !1
                }, this._onReceiveMessageFromViewersList),
                this._viewersList.on("blur", this._hideViewersList)
            }
            const t = f.getString("ScreenSharingToolbar.GrantControl");
            return [e, o.isEmpty(this.state.viewersThatCanBeGrantedControl) ? void 0 : r.createElement(r.Button, {
                style: w.button,
                onPress: this._onShowViewersList,
                accessibilityLabel: t,
                key: "grantCotnrolButton"
            }, r.createElement(r.Text, {
                style: w.text
            }, t)), this._getStopSharingButton(), this.state.isPinned ? this._getUnpinButton() : this._getPinButton()]
        }
        _onViewersListInitialized() {
            this._viewersListInitialized = !0,
            this._resolveViewersListIntializedDeferred()
        }
        _resolveViewersListIntializedDeferred() {
            if (this._viewersListInitializedDeferred) {
                const e = this._viewersListInitializedDeferred;
                this._viewersListInitializedDeferred = void 0,
                e.resolve(void 0)
            }
        }
        _onGrantControl(e) {
            var t;
            const i = I.newCauseId();
            m.log(h.LogTraceArea.ScreenSharing, `Granting control to ${n.pii.Mri(e)} from DesktopScreenSharingToolbar causeId: ${i}`),
            this._hideViewersList(),
            null === (t = this.state.screenSharingControlStore) || void 0 === t || t.grantControl(e).then(()=>{
                m.log(h.LogTraceArea.ScreenSharing, `Granting control to ${n.pii.Mri(e)} succeeded causeId: ${i}`)
            }
            ).catch(t=>{
                m.log(h.LogTraceArea.ScreenSharing, `Granting control to ${n.pii.Mri(e)} failed with ${v.errorAsString(t)} causeId: ${i}`)
            }
            )
        }
        _mapParticipantToViewer(e) {
            let t = g.getDisplayName(e.mri);
            return t || (t = e.mri),
            {
                username: e.mri,
                displayName: t,
                fallbackAvatarUri: e.image.pngDataUrlFromInitials(),
                mri: e.mri
            }
        }
        _updateViewersList() {
            var e;
            const t = null === (e = this.state.screenSharingControlStore) || void 0 === e ? void 0 : e.viewersThatCanBeGrantedControl()
              , i = o.map(t, this._mapParticipantToViewer)
              , n = this._computeViewersListHeight(this.state.viewersThatCanBeGrantedControl.length);
            this._setViewersListBounds(n),
            this._sendMessageToViewersList("viewersListModified", i, n),
            o.each(t, e=>this._sendAvatarToPopup(e))
        }
        _sendMessageToViewersList(e, ...t) {
            this._viewersList || m.log(h.LogTraceArea.ScreenSharing, `No viewersList. Ignoring message - name: ${e} args: ${n.pii.Omit(JSON.stringify(t))}`),
            this._waitUntilViewersListInitialized().then(()=>{
                this._viewersList ? (m.log(h.LogTraceArea.ScreenSharing, `Sending message to viewersList - name: ${e} args: ${n.pii.Omit(JSON.stringify(t))}`),
                this._viewersList.sendMessage(e, ...t)) : m.log(h.LogTraceArea.ScreenSharing, `No viewersList. Ignoring message - name: ${e} args: ${n.pii.Omit(JSON.stringify(t))}`)
            }
            ).catch(()=>m.log(h.LogTraceArea.ScreenSharing, `Failed send message to viewersList - name: ${e} args: ${n.pii.Omit(JSON.stringify(t))}`))
        }
        _waitUntilViewersListInitialized() {
            return this._viewersListInitialized ? l.Resolved() : (this._viewersListInitializedDeferred || (this._viewersListInitializedDeferred = l.Defer()),
            this._viewersListInitializedDeferred.promise())
        }
        _sendAvatarToPopup(e) {
            const t = e.image;
            t.hasAvatar() && t.avatarPngDataUrl().then(t=>{
                this._sendMessageToViewersList("avatarAvailable", e.mri, t)
            }
            ).catch(e=>{
                m.log(h.LogTraceArea.ScreenSharing, "_sendAvatarToPopup did not complete successfully: error " + v.errorAsString(e))
            }
            )
        }
        _setViewersListBounds(e) {
            if (!this._viewersList)
                return;
            const t = this._computeViewersListWidth()
              , {x: i, y: n} = this._getViewersListCoordinates(t);
            e === this._viewersListSize.height && t === this._viewersListSize.width || ((e < this._viewersListSize.height || t < this._viewersListSize.width) && this._viewersList.setMinimumSize(t, e + 5),
            this._viewersListSize.height = e,
            this._viewersListSize.width = t,
            this._viewersList.setBounds({
                x: i,
                y: n,
                width: t,
                height: e + 5
            }))
        }
        _getViewersListCoordinates(e) {
            const t = this.props.nativeWindow.getBounds() || this.props.position;
            return {
                x: (t.x || 0) + this.props.position.width - e,
                y: (t.y || 0) + this.props.position.height + 1
            }
        }
        _computeViewersListHeight(e) {
            const t = Math.min(4.5, e);
            return Math.round(12 + 45 * t)
        }
        _computeViewersListWidth() {
            const e = this.props.position.width - 200;
            return e >= 200 ? e : 200 - (this.props.position.width - 200) < 20 && this.props.position.width / 2 >= 200 ? this.props.position.width / 2 : 200
        }
        _getStopSharingButton() {
            const e = f.getString("ScreenSharingToolbar.Stop");
            return r.createElement(r.Button, {
                style: w.button,
                onPress: this._onSharingStop,
                accessibilityLabel: e,
                key: "stopSharingButton"
            }, r.createElement(r.Text, {
                style: w.text
            }, e))
        }
    }
    t.default = M
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(72)
      , o = i(7)
      , s = i(1067)
      , r = i(6)
      , a = i(79)
      , l = i(2)
      , c = i(3)
      , d = i(396)
      , u = i(182)
      , g = i(21)
      , h = i(29);
    class p {
        constructor(e, t, i) {
            this._name = e,
            this._setActiveEndpoint = t,
            this._isConnected = i,
            this._exponentialTime = new n.ExponentialTime(1e3,3e5)
        }
        _report() {
            this._retryTimer && (h.clearTimeout(this._retryTimer),
            this._retryTimer = void 0);
            const e = u.getEndpointId();
            if (e && this._shouldSendRequest()) {
                const t = s.default.isActive();
                if (t || s.default.getLastUpdatedInfo().active) {
                    let i;
                    i = t ? s.AETimeoutInSeconds : r.default.getConfigSettingsNoSubscription().endpointPresence.inactiveDelay / 1e3,
                    c.log(l.LogTraceArea.ActiveEndpointService, `[${this._name}] Endpoint is ${t ? "" : "not "}active, setting timeout to ${i}`),
                    s.default.setLastUpdatedInfo({
                        active: t,
                        timestamp: Date.now()
                    }),
                    this._setActiveEndpoint(e, t, i).then(()=>{
                        this._exponentialTime.reset()
                    }
                    , e=>{
                        this._retryTimer = h.setTimeout(()=>this._report(), this._exponentialTime.getTimeAndCalculateNext())
                    }
                    )
                }
            }
        }
        reportIfNeeded(e=!1) {
            r.default.getConfigSettingsNoSubscription().endpointPresence.activeEndpointRequestEnabled && (this._reportIsActive() ? !this._isConnected() || this._aeTimer && !e || (this._report(),
            this._aeTimer && h.clearInterval(this._aeTimer),
            this._aeTimer = h.setInterval(()=>{
                this._report()
            }
            , 1e3 * s.AETimerDurationInSeconds)) : this._aeTimer && (h.clearInterval(this._aeTimer),
            this._aeTimer = void 0,
            this._report()))
        }
        _reportIsActive() {
            return s.default.isActive() && !!u.getEndpointId()
        }
        _shouldSendRequest() {
            return !s.default.isActive() || this._isConnected()
        }
    }
    t.default = new class {
        constructor() {
            this._activityReporters = [new p("ChatService",(e,t,i)=>a.serviceSetActiveEndpointTimeout(e, i),()=>a.isConnected()), new p("UPS",(e,t,i)=>d.upsSetActiveEndpointTimeout(e, t),()=>!0)],
            g.RegisterStartupable(this, "ActiveEndpointService", [s.default, a, d])
        }
        startup() {
            return u.endpointInfoChanged.subscribe((e,t)=>{
                e.id !== t.id && this._reportEndpointActivityIfNeeded()
            }
            ),
            s.default.subscribe(()=>{
                this._reportEndpointActivityIfNeeded()
            }
            ),
            r.default.subscribe(()=>{
                this._reportEndpointActivityIfNeeded()
            }
            ),
            a.reconnected.subscribe(()=>{
                this._reportEndpointActivityIfNeeded(!0)
            }
            ),
            this._reportEndpointActivityIfNeeded(),
            o.Resolved()
        }
        _reportEndpointActivityIfNeeded(e=!1) {
            for (const t of this._activityReporters)
                t.reportIfNeeded(e)
        }
    }
}
, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    class s extends o.TelemetryEventBase {
        constructor(e, t) {
            super(),
            this._msacid = e,
            this._adId = t
        }
        getEventName() {
            return s.EventName
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                ad_id: this._adId || "",
                MSACID: this._msacid
            })
        }
        shouldExcludeUserIdentificationInfo() {
            return !0
        }
        shouldExcludeDeviceIdentificationInfo() {
            return !0
        }
        getPiiAttributes() {
            return {}
        }
    }
    t.AdIdProvisioningEvent = s,
    s.EventName = "adid_provisioning"
}
, function(e, t, i) {
    "use strict";
    const n = i(72)
      , o = i(7)
      , s = i(158)
      , r = i(142)
      , a = i(17)
      , l = i(638)
      , c = i(21)
      , d = i(18)
      , u = i(29);
    e.exports = new class {
        constructor() {
            this._checkVersion = ()=>new n.GenericRestClient(d.getFrontendBaseUrl() + "/version").performApiGet("").then(e=>{
                e && e.AppVersion !== d.getAppVersion() && (a.forceRefreshOnNextNavigation(),
                u.setTimeout(()=>{
                    l.reloadApp("app-needs-to-be-updated")
                }
                , 6e5 + 3e5 * s.random()))
            }
            ),
            c.RegisterStartupable(this, "AppUpdateService", [r.default])
        }
        startup() {
            return r.default.setRefreshOptions("AppUpdateService", {
                interval: 18e5,
                callback: this._checkVersion,
                taskTypeFlags: r.TaskTypeFlags.UsesNetworking
            }),
            o.Resolved()
        }
    }
}
, , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(39);
    !function(e) {
        e.Created = "NotificationCreated",
        e.SelectedTopContactUserProfileIncomplete = "SelectedTopContactUserProfileIncomplete",
        e.PullCampaignContentServiceFailed = "PullCampaignContentServiceFailed",
        e.ContactCutOffLimitReached = "ContactCutOffLimitReached",
        e.NotificationAlreadyShown = "NotificationAlreadyShown"
    }(t.CelebrationNotificationTelemetryEventAction || (t.CelebrationNotificationTelemetryEventAction = {})),
    function(e) {
        e.EngagementPopCard = "EngagementPopCard"
    }(t.CelebrationNotificationType || (t.CelebrationNotificationType = {}));
    class r extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._telemetryEventOptions = e
        }
        shouldSend() {
            return !0
        }
        getEventName() {
            return "celebration_notification"
        }
        getPiiAttributes() {
            return this._telemetryEventOptions.celebratedUserSkypeId ? o.merge(super.getPiiAttributes(), {
                CelebratedUser: {
                    value: this._telemetryEventOptions.celebratedUserSkypeId,
                    piiKind: n.AWTPiiKind.Identity
                }
            }) : super.getPiiAttributes()
        }
        getAttributes() {
            return o.assign(super.getAttributes(), this._getOwnAttributes())
        }
        _getOwnAttributes() {
            return o.assign(super.getAttributes(), {
                Action: this._telemetryEventOptions.action,
                NotificationType: this._telemetryEventOptions.notificationType || "",
                CampaignId: this._telemetryEventOptions.cardCampaignId,
                CardGuid: this._telemetryEventOptions.cardGuid,
                NumberOfTopContacts: this._telemetryEventOptions.numberOfTopContacts,
                DidIdentifyDifferentTopContacts: this._telemetryEventOptions.didIdentifyDifferentTopContacts
            })
        }
    }
    t.CelebrationNotificationTelemetryEvent = r
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(1)
      , s = i(760)
      , r = i(70)
      , a = i(116)
      , l = i(249)
      , c = i(39)
      , d = "Unset"
      , u = "Set";
    class g extends c.TelemetryEventBase {
        constructor(e) {
            super(),
            this._props = e
        }
        getEventName() {
            return "people_census"
        }
        getAttributes() {
            const e = super.getAttributes();
            e.AvatarState = this._props.userHasAvatar ? u : d,
            e.PhoneVerificationState = this._mapBooleanOrUndefinedToCensusState(this._props.userHasVerifiedPhoneNumber),
            e.EmailVerificationState = this._mapBooleanOrUndefinedToCensusState(this._props.userHasVerifiedEmail),
            e.LocalAddressBookState = this._props.userHasAddressBookConnected ? u : d,
            e.AppearInSearchState = this._props.userAppearsInSearch ? u : d,
            e.AppearInSuggestionsState = this._props.userAppearsInSuggestions ? u : d,
            e.UserSearchPrivacyOption = this._props.userSearchPrivacyOption,
            e.AvatarPolicy = e.AvatarPolicy = s.flow(o.camelCase, o.upperFirst)(this._props.userAvatarPolicy),
            e.UserPresenceStatus = this._props.userPresenceStatus,
            e.HideForNowPeopleYouMayKnow = this._props.showPYMKInRecents ? d : u,
            e.UserMoodStatus = this._props.userMoodStatus ? u : d,
            e.DisplayableNonAuthorizedContacts = this._props.displayableNonAuthorizedContacts;
            const {city: t, state: i, province: c, country: g} = this._props.userLocation;
            return e.UserLocationCity = t ? u : d,
            e.UserLocationState = i ? u : d,
            e.UserLocationProvince = c ? u : d,
            e.UserLocationCountry = g ? u : d,
            e.InviteFreeContactsCount = this._props.inviteFreeContactsCount,
            e.ManuallyAddedContactsCount = this._props.manuallyAddedContactsCount,
            e.BlockedContactsCount = this._props.blockedContactsCount,
            e.BotsContactsCount = this._props.botsCount,
            e.FavoritesContactsCount = this._props.favoriteContactsCount,
            e.AllNonBlockedContactsCount = this._props.nonBlockedContactsCount,
            e.OneWayShortCircuitContactsCount = this._props.oneWayShortCircuitContactsCount,
            e.TwoWayShortCircuitContactsCount = this._props.twoWayShortCircuitContactsCount,
            e.PstnContactsCount = this._props.pstnContactsCount,
            e.EngagedContactsCount = this._props.engagedContactsCount,
            e.AllShownContactsCount = this._props.allShownContactsCount,
            e.RemovedAuthorizedContactsCount = this._props.removedAuthorizedContactsCount,
            e.UserDisplayNameWordCount = this._props.displayNamePartsLength,
            e.FirstNameAndLastNameAreMatching = this._props.firstAndSecondAreMatching,
            e.DefaultReactionsCount = this._props.numberOfDefaultReactions,
            e.CustomReactionsCount = this._props.numberOfCustomReactions,
            e.UserIsNew = this._props.userIsNew,
            e.DaysFromWizardCompletion = this._props.daysFromWizardCompletion || d,
            e.WasUpgradedFromDelphiToElectonDate = this._props.migratedDateFromDelphiToElectron || d,
            e.HasReadReceiptsEnabled = o.isUndefined(this._props.hasReadReceiptsEnabled) ? d : this._props.hasReadReceiptsEnabled,
            !1 !== this._props.hasReadReceiptsEnabled ? e.ReadReceiptsDisabledReason = d : e.ReadReceiptsDisabledReason = !1 === this._props.readReceiptsSettingPreference ? l.ReadReceiptsSettingOrigin[l.ReadReceiptsSettingOrigin.UserAction] : this._props.userPresenceStatus === a.UserStatus[a.UserStatus.Hidden] ? l.ReadReceiptsSettingOrigin[l.ReadReceiptsSettingOrigin.UserStatusUpdate] : l.ReadReceiptsSettingOrigin[l.ReadReceiptsSettingOrigin.OptOut],
            e.UserSignedInIdType = this._props.userSignedInIdType || d,
            e.UserSkypeIdType = this._props.userSkypeIdType || d,
            e.Muted1on1ConversationsCount = this._props.muted1on1ConversationsCount,
            e.MutedGroupConversationsCount = this._props.mutedGroupConversationsCount,
            e.MutedConversationsPercentage = this._props.mutedConversationsPercentage,
            e.SmartMutedConversationsCount = this._props.smartMutedConversationsCount,
            e.SmartMutedConversationsPercentage = this._props.smartMutedConversationsPercentage,
            e.TranslatedConversationsCount = this._props.translatedConversationsCount,
            o.isUndefined(this._props.osNotificationsEnabled) || (e.IsOsNotificationPermissionEnabled = this._props.osNotificationsEnabled),
            e.NotificationsPermission = r.PermissionStatus[this._props.notificationsPermission],
            e.CameraPermission = r.PermissionStatus[this._props.cameraPermission],
            e.MicrophonePermission = r.PermissionStatus[this._props.microphonePermission],
            e.ContactsPermission = r.PermissionStatus[this._props.contactsPermission],
            e.RecentListConversationsCount = this._props.numberOfRecentListConversations,
            e.RecentListSkype1on1ConversationsCount = this._props.numberOfRecentListSkype1on1Conversations,
            e.RecentListSkypeGroupConversationsCount = this._props.numberOfRecentListSkypeGroupConversations,
            e.RecentListSkypeBotConversationsCount = this._props.numberOfRecentListSkypeBotConversations,
            e.RecentListPstnConversationsCount = this._props.numberOfRecentListPstnConversations,
            e.RecentListPrivateConversationsCount = this._props.numberOfRecentListPrivateConversations,
            e.RecentListConversationsWithTabsCount = this._props.numberOfRecentListConversationsWithTabs,
            e.RecentListOtherConversationsCount = this._props.numberOfRecentListOtherConversations,
            n.isUndefined(this._props.profileMigrationParams) || (e.ProfileMigratedV2 = this._mapBooleanOrUndefinedToCensusState(!0),
            e.ProfilePhonesCount = this._props.profileMigrationParams.phonesCount,
            e.ProfileMsaPhonesCount = this._props.profileMigrationParams.msaPhonesCount,
            e.ProfileSkypeVerifiedPhonesCount = this._props.profileMigrationParams.skypeVerifiedPhonesCount,
            e.ProfileSkypeVisiblePhonesCount = this._props.profileMigrationParams.skypeVisiblePhonesCount,
            e.ProfileEmailsCount = this._props.profileMigrationParams.emailsCount,
            e.ProfileMsaEmailsCount = this._props.profileMigrationParams.msaEmailsCount,
            e.ProfileSkypeVerifiedEmailsCount = this._props.profileMigrationParams.skypeVerifiedEmailsCount,
            e.ProfileCountry = this._mapBooleanOrUndefinedToCensusState(this._props.profileMigrationParams.countryVisible),
            e.ProfileBirthday = this._mapBooleanOrUndefinedToCensusState(this._props.profileMigrationParams.birthdayVisible),
            e.ProfileGender = this._mapBooleanOrUndefinedToCensusState(this._props.profileMigrationParams.genderVisible)),
            e
        }
        _mapBooleanOrUndefinedToCensusState(e) {
            return n.isUndefined(e) ? "Unknown" : e ? u : d
        }
    }
    t.CensusTelemetryEvent = g
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(7)
      , s = i(57)
      , r = i(16)
      , a = i(30)
      , l = i(2)
      , c = i(3)
      , d = i(266)
      , u = i(20)
      , g = i(17)
      , h = i(55)
      , p = i(22)
      , m = i(64)
      , S = i(34)
      , C = i(107)
      , y = i(21)
      , f = i(9);
    e.exports = new class {
        constructor() {
            y.RegisterStartupable(this, "CheckForValidNavigationStateService", [s.default, a.default])
        }
        startup() {
            return a.default.subscribe(()=>this._checkState("ConversationsStore")),
            s.default.messagesProcessed.subscribe(()=>this._checkState("ChatServiceDataService")),
            this._checkState("startup"),
            o.Resolved()
        }
        _checkState(e) {
            n.defer(()=>{
                let t;
                const i = p.default.isUsingStackNavigationContext()
                  , o = i ? C.StackNavigatorId.Mobile : C.StackNavigatorId.DesktopContent
                  , s = n.last(m.default.getCurrentNavigationStack(o));
                let y = !1;
                if (s instanceof h.CallNavigationContext)
                    t = s.state.conversationMri,
                    y = r.isPhoneMri(t);
                else if (s instanceof h.MobileContentPanelNavigationContext || s instanceof h.DesktopContentPanelNavigationContext) {
                    const e = s.getConversationContext();
                    e && (t = e.state.conversationId)
                }
                if (t && !y && !a.default.ableToViewConversation(t)) {
                    const n = f.newCauseId();
                    c.log(l.LogTraceArea.Navigation, "CheckForValidNavigationStateService._checkState not able to view currentConversationId: " + S.mriOrId(t) + " reason: " + e + " causeId: " + n),
                    u.isGuestUser() ? d.default.redirectToLogout(l.LogoutReason.GuestSessionEnded) : i ? g.navigateToRecentsTab() : g.navigateToWelcomeScreen(n)
                }
            }
            )
        }
    }
}
, , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(18)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        getAriaTenantTokenOverride() {
            return o.getAriaCortanaSignalsTenantToken()
        }
        getAttributes() {
            return {
                AppInfo_Id: o.getAppIdentifier() || ""
            }
        }
        shouldExcludeUserIdentificationInfo() {
            return !0
        }
    }
    t.ClientSideInferencesEvent = class extends r {
        constructor(e, t) {
            super(),
            this._eventName = e,
            this._eventProperties = t
        }
        getEventName() {
            return this._eventName
        }
        getAttributes() {
            let e = super.getAttributes();
            return n.each(this._eventProperties, (t,i)=>{
                e[i] = t
            }
            ),
            e
        }
    }
    ;
    class a extends r {
        constructor(e, t) {
            super(),
            this._traceLevelName = e,
            this._message = t
        }
        getEventName() {
            return a._traceLevelNameToEventName[this._traceLevelName]
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.Trace_Level = this._traceLevelName,
            e.Trace_Message = this._message,
            e
        }
    }
    t.ClientSideInferencesTrace = a,
    a._traceLevelNameToEventName = {
        Information: "csitraceinfo",
        Warning: "csitracewarning",
        Error: "csitraceerror"
    }
}
, , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(7)
      , s = i(48)
      , r = i(142)
      , a = i(74)
      , l = i(21)
      , c = i(18);
    e.exports = new class {
        constructor() {
            this._doCleanup = ()=>{
                if (a.default.getData(s.InternalKeys.LastDBCleanupVersion) === c.getAppVersion())
                    return;
                const e = []
                  , t = n.map(s.InternalKeys, e=>e)
                  , i = a.default.getKeys();
                let r;
                return n.each(i, i=>{
                    n.includes(t, i) || e.push(i)
                }
                ),
                r = e.length > 0 ? a.default.deleteKeys(e) : o.Resolved(),
                r.then(()=>a.default.putData(s.InternalKeys.LastDBCleanupVersion, c.getAppVersion()))
            }
            ,
            l.RegisterStartupable(this, "DatabaseCleanupService", [r.default, a.default])
        }
        startup() {
            return r.default.setRefreshOptions("DBCleanup", {
                interval: 6048e5,
                callback: this._doCleanup,
                taskTypeFlags: r.TaskTypeFlags.CpuIntensive
            }),
            o.Resolved()
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(2)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e, t, i=0, n, o, s) {
            super(),
            this._failureSource = e,
            this._firstSendTime = t,
            this._numberRetries = i,
            this._statusCode = n,
            this._statusText = o,
            this._errorMetadata = s
        }
        getEventName() {
            return "download_service"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.operation = this.getOperation(),
            e.failure_source = o.PostingTransferSource[this._failureSource],
            e.time_to_failure = this._eventCreationTime - this._firstSendTime,
            e.number_retries = this._numberRetries,
            e.status_code = this._statusCode,
            e.status_text = this._statusText ? this._statusText : "",
            n.extend(e, this._errorMetadata),
            e
        }
    }
    t.PermanentDownloadFailure = class extends r {
        getOperation() {
            return "download_failure"
        }
    }
    ;
    t.DownloadRecovered = class extends r {
        getOperation() {
            return "download_recovered"
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(149)
      , o = i(1)
      , s = i(39)
      , r = i(159)
      , a = i(9);
    class l extends s.TelemetryEventBase {
        constructor(e) {
            super(),
            this._params = e
        }
        shouldSend() {
            const e = s.SampledEvents[this.getEventName() + "_" + this._params.eventCode];
            return !o.isNumber(e) || a.sampleForPercentage(e)
        }
        getEventName() {
            return "push_notification"
        }
        getAttributes() {
            let e = super.getAttributes();
            return e.EventType = this._params.eventType,
            e.EventCode = this._params.eventCode,
            e.MessageId = this._params.messageId,
            e.ClientMessageId = this._params.clientMessageId,
            e.IsMyMessage = this._params.isMyMessage,
            e.Result = this._params.result,
            e.MessageCorrelationId = this._params.messageCorrelationId,
            e.ErrorCode = this._params.errorCode || 0,
            e.CorrelationVector = this._params.correlationVector || "",
            e
        }
        getPiiAttributes() {
            const e = super.getPiiAttributes()
              , t = r.getTrackableConversationId(this._params.conversationId);
            return t && (e.ConversationId = {
                value: t,
                piiKind: n.AWTPiiKind.Identity
            }),
            e
        }
    }
    t.default = l
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(7)
      , o = i(6)
      , s = i(141)
      , r = i(142)
      , a = i(38)
      , l = i(21)
      , c = i(18)
      , d = i(29)
      , u = r.TaskTypeFlags.UsesNetworking;
    t.default = new class {
        constructor() {
            this._footprintServiceIntervalInMinutes = 0,
            this._monitorId = "S4LW",
            this._configUrls = [],
            this.schedulePostingJob = ()=>{
                const e = o.default.getS4LCMCFeatures().footprintServiceIntervalInMinutes;
                let t = o.default.getS4LCMCFeatures().footprintServiceConfigUrls
                  , i = !1;
                if (e !== this._footprintServiceIntervalInMinutes && (this._footprintServiceIntervalInMinutes = e,
                i = !0),
                a.default(this._configUrls, t) || (this._configUrls = t.slice(),
                i = !0),
                i && (this._stopScheduledJob(),
                this._footprintServiceIntervalInMinutes > 0 && this._configUrls.length > 0)) {
                    const e = 60 * this._footprintServiceIntervalInMinutes * 1e3;
                    this._serviceTimer = d.setInterval(()=>this._postNetworkFootprintTelemetry(), e)
                }
                return n.Resolved()
            }
            ,
            l.RegisterStartupable(this, "FootprintService", [])
        }
        startup() {
            return s.default.queueIdleTask("NetworkFootprint", u, this.schedulePostingJob),
            o.default.subscribe(()=>{
                s.default.queueIdleTask("NetworkFootprint", u, this.schedulePostingJob)
            }
            ),
            n.Resolved()
        }
        dispose() {
            this._stopScheduledJob(),
            this._footprintServiceIntervalInMinutes = 0
        }
        _postNetworkFootprintTelemetry() {
            const e = [{
                TenantId: c.getFootprintTenantId()
            }];
            let t = [...this._configUrls];
            Footprint.start(this._monitorId, t, 1, JSON.stringify(e), "")
        }
        _stopScheduledJob() {
            this._serviceTimer && (d.clearInterval(this._serviceTimer),
            this._serviceTimer = void 0)
        }
    }
}
, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(26)
      , o = i(13)
      , s = i(7)
      , r = i(69)
      , a = i(2)
      , l = i(3)
      , c = i(17)
      , d = i(105)
      , u = i(21)
      , g = i(9);
    let h = class extends o.StoreBase {
        constructor() {
            super(),
            this._contactStoreCallback = e=>{
                if (d.default.isUIDisplayed()) {
                    const t = g.newCauseId();
                    l.log(a.LogTraceArea.Contacts, "processContactBlockChangeNotificationPotentiallyBeforeStartup causeId: " + t),
                    c.navigateAfterBlock(e, t, void 0)
                }
            }
            ,
            u.RegisterStartupable(this, "NavigationEventStore", [r.default])
        }
        startup() {
            return r.default.contactBlockedEventReceived.subscribe(this._contactStoreCallback),
            s.Resolved()
        }
    }
    ;
    h = n.__decorate([o.AutoSubscribeStore], h),
    t.NavigationEventStore = h,
    t.default = new h
}
, , function(e, t, i) {
    "use strict";
    const n = i(7)
      , o = i(191)
      , s = i(229)
      , r = i(228)
      , a = i(4)
      , l = i(64)
      , c = i(543)
      , d = i(21)
      , u = i(29);
    e.exports = new class {
        constructor() {
            this._firstSyncFinished = !1,
            this._basePageTitle = "Skype",
            this._currentBlinkingActivityItemCount = 0,
            this._blinkingIndicatorIsShowingActivity = !1,
            d.RegisterStartupable(this, "PageTitleService", [o.default, s.default, l.default])
        }
        startup() {
            return n.Resolved()
        }
        _redisplayTitle() {
            this._firstSyncFinished && (this._clearBlinkingTimer(),
            !r.isCurrentUserActive() && this._currentBlinkingActivityItemCount > 0 && (this._blinkingActivityInterval = u.setInterval(()=>this._toggleBetweenBaseTitleAndActivity(), 1200)))
        }
        _toggleBetweenBaseTitleAndActivity() {
            r.isCurrentUserActive() ? this._clearBlinkingTimer() : (this._blinkingIndicatorIsShowingActivity ? document.title = this._getActivityTitle() : document.title = this._basePageTitle,
            this._blinkingIndicatorIsShowingActivity = !this._blinkingIndicatorIsShowingActivity)
        }
        _clearBlinkingTimer() {
            this._blinkingActivityInterval && (u.clearInterval(this._blinkingActivityInterval),
            this._blinkingActivityInterval = void 0),
            this._blinkingIndicatorIsShowingActivity = !1,
            document.title = this._basePageTitle
        }
        _getActivityTitle() {
            return a.getString("PageTitleService.ActivityTitle", {
                activityItemCount: this._currentBlinkingActivityItemCount
            })
        }
        _getPageTitleForNavigationContext() {
            return [c.pageTitle].reverse().join(" | ")
        }
    }
}
, function(e, t, i) {
    "use strict";
    const n = i(7)
      , o = i(10)
      , s = i(2)
      , r = i(22)
      , a = i(64)
      , l = i(21)
      , c = i(583);
    e.exports = new class {
        constructor() {
            this._handlingPopState = !1,
            this._navigatingToNewPlace = !1,
            l.RegisterStartupable(this, "PageUrlService", [a.default])
        }
        startup() {
            return n.Resolved()
        }
        _onNavigationStateStoreChange() {
            if (!this._handlingPopState) {
                let e;
                if (r.default.isUsingStackNavigationContext()) {
                    const t = a.default.getCurrentNavigationStack();
                    e = c.getUrlForNavigationContextStack(t)
                } else {
                    const t = a.default.getActiveConversationContext(o.MainRootViewId);
                    e = c.getUrlForCompositeConversationNavigationContext(t)
                }
                this._navigatingToNewPlace = !0,
                window.history.pushState(null, "", e),
                this._navigatingToNewPlace = !1
            }
        }
        _onUrlChange(e) {
            if (this._navigatingToNewPlace)
                return;
            this._handlingPopState = !0,
            c.getNavigationActionForDeepLink(window.location.href, s.NavigationConversationOrigin.OnUrlChange).then(e=>{
                e && e.action()
            }
            ).always(()=>{
                this._handlingPopState = !1
            }
            )
        }
    }
}
, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(39);
    var s;
    !function(e) {
        e[e.PrefetchQueueTrimmed = 0] = "PrefetchQueueTrimmed"
    }(s = t.PicturePrefetchAction || (t.PicturePrefetchAction = {}));
    class r extends o.TelemetryEventBase {
        constructor(e) {
            super(),
            this._action = e
        }
        getEventName() {
            return "all_picture_prefetch"
        }
        getAttributes() {
            return n.assign(super.getAttributes(), {
                Action: s[this._action]
            })
        }
    }
    t.PicturePrefetchEvent = r
}
, , , , , , function(e, t, i) {
    "use strict";
    const n = i(1)
      , o = i(70)
      , s = i(7)
      , r = i(6)
      , a = i(31)
      , l = i(99)
      , c = i(88)
      , d = i(126)
      , u = i(61)
      , g = i(2)
      , h = i(3)
      , p = i(124)
      , m = i(32)
      , S = i(22)
      , C = i(75)
      , y = i(105)
      , f = i(21)
      , _ = i(25)
      , b = i(9);
    e.exports = new class {
        constructor() {
            this._onEcsConfigurationRefreshed = ()=>{
                const e = r.default.getS4LNativePlatformsEcsConfig().enableSystemHotKey && u.UICapabilities.systemHotKeysSupported();
                h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onEcsConfigurationRefreshed: systemHotkeySupported: " + e),
                !this._stateStoreSubToken && e ? this._initializeSystemHotKeyService() : e || (this._stateStoreSubToken && (y.default.unsubscribe(this._stateStoreSubToken),
                this._stateStoreSubToken = void 0),
                this._localPrefStoreSubKey && (m.default.unsubscribe(this._localPrefStoreSubKey),
                this._localPrefStoreSubKey = void 0))
            }
            ,
            this._onAcceptCallHotKey = ()=>{
                c.default.trackSystemHotKey(l.SystemHotKeyCallAction.Accept);
                const e = b.newCauseId()
                  , t = a.default.CallingStore.getIncomingCallIds()
                  , i = n.head(t);
                if (n.isEmpty(t) || !i)
                    return h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onAcceptCallHotKey: No incoming calls found to answer causeId:" + e),
                    !1;
                if (1 !== t.length)
                    return h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onAcceptCallHotKey: Have " + a.default.CallingStore.getIncomingCallIds().length + " incoming calls, only 1 supported. Doing nothing"),
                    !1;
                {
                    const t = a.default.CallingStore.getCallConversationMri(i);
                    if (!t)
                        return h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onAcceptCallHotKey: No Mri found callId:" + i + " causeId:" + e),
                        !1;
                    {
                        h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onAcceptCallHotKey: Answering call callId:" + i + " causeId:" + e);
                        const n = !0;
                        a.default.CallNavigationHelper.answerOrJoinCall({
                            conversationMri: t,
                            callId: i,
                            skipNavigation: !1,
                            autoAnswer: !1,
                            knownToBeAnswer: n,
                            origin: g.NavigationCallOrigin.CallControls
                        }, e)
                    }
                }
                return !0
            }
            ,
            this._onRejectCallHotKey = ()=>{
                c.default.trackSystemHotKey(l.SystemHotKeyCallAction.Reject);
                const e = b.newCauseId();
                let t = !1;
                if (n.each(a.default.CallingStore.getIncomingCallIds(), i=>{
                    h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onRejectCallHotKey: Rejecting call callId:" + i + " causeId:" + e),
                    a.default.CallingStore.rejectCall(i, e),
                    t = !0
                }
                ),
                !t) {
                    const i = a.default.CallingStore.getConnectedAndNotOnHoldCallId();
                    i && (h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onRejectCallHotKey: Ending active call callId:" + i + " causeId:" + e),
                    a.default.CallingStore.endCall(i, e),
                    t = !0)
                }
                return t
            }
            ,
            this._onToggleMute = ()=>{
                if (!S.default.isUsingSplitViewNoSubscription() && p.default.hasRegisteredMultipleHandlers(g.KeyboardShortcut.ToggleMicrophone))
                    return !1;
                c.default.trackSystemHotKey(l.SystemHotKeyCallAction.Mute);
                const e = b.newCauseId();
                if (C.default.permissionStatus(_.PermissionType.Microphone) !== o.PermissionStatus.Granted)
                    return h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onToggleMute: Toggle mute failed causeId:" + e),
                    !1;
                {
                    h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onToggleMute: Toggle mute causeId:" + e);
                    const t = a.default.CallingStore.getConnectedAndNotOnHoldCallId();
                    if (!t)
                        return h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService._onToggleMute: No active calls found causeId:" + e),
                        !1;
                    c.default.updateCallTelemetry(t, e, e=>e.muteSystemHotKeyPress()),
                    a.default.CallingStore.isMuted(t) ? (a.default.CallingStore.unmute(t, e),
                    d.default.announceMicrophoneState(!1)) : (a.default.CallingStore.mute(t, e),
                    d.default.announceMicrophoneState(!0))
                }
                return !0
            }
            ,
            f.RegisterStartupable(this, "SystemHotKeyService"),
            this._stateStoreSubToken = void 0,
            this._localPrefStoreSubKey = void 0
        }
        startup() {
            return r.default.getS4LNativePlatformsEcsConfig().enableSystemHotKey && u.UICapabilities.systemHotKeysSupported() && (this._initializeSystemHotKeyService(),
            h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService.startup: System hotkey enabled. Has subscribed to service state store changes")),
            r.default.subscribe(this._onEcsConfigurationRefreshed),
            s.Resolved()
        }
        _initializeSystemHotKeyService() {
            this._stateStoreSubToken = y.default.subscribe(()=>{
                y.default.isInCallEstablishment() || y.default.isInCall() ? this._registerSystemHotKeys() : this._unRegisterSystemHotKeys()
            }
            , y.TriggerKeys.CallingStatusKey),
            this._localPrefStoreSubKey = m.default.subscribe(()=>{
                if (this._stateStoreSubToken) {
                    m.default.getUserPreferencesLocal().enableSystemHotKeys ? (h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService: System hotkey enabled from settings"),
                    this._registerSystemHotKeys()) : (h.log(g.LogTraceArea.CallingUI, "SystemHotKeyService: System hotkey disabled from settings"),
                    this._unRegisterSystemHotKeys())
                }
            }
            )
        }
        _registerSystemHotKeys() {
            m.default.getUserPreferencesLocal().enableSystemHotKeys && (this._unRegisterSystemHotKeys(),
            (a.default.CallingStore.hasConnectedCalls() || y.default.isInCall() && !y.default.isInCallEstablishment()) && (p.default.addSystemHandler(g.KeyboardShortcut.ToggleMicrophone, this._onToggleMute),
            p.default.addSystemHandler(g.KeyboardShortcut.HangupOrRejectCall, this._onRejectCallHotKey)),
            y.default.isInCallEstablishment() && (r.default.getS4LCMCFeaturesNoSubscription().enableRequestNewAppInitiatedCallAPI && p.default.addSystemHandler(g.KeyboardShortcut.AcceptIncomingCall, this._onAcceptCallHotKey),
            p.default.addSystemHandler(g.KeyboardShortcut.HangupOrRejectCall, this._onRejectCallHotKey)))
        }
        _unRegisterSystemHotKeys() {
            p.default.removeSystemHandler(g.KeyboardShortcut.ToggleMicrophone, this._onToggleMute),
            p.default.removeSystemHandler(g.KeyboardShortcut.AcceptIncomingCall, this._onAcceptCallHotKey),
            p.default.removeSystemHandler(g.KeyboardShortcut.HangupOrRejectCall, this._onRejectCallHotKey)
        }
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(33)
      , o = i(1)
      , s = i(7)
      , r = i(398)
      , a = i(31)
      , l = i(441)
      , c = i(2)
      , d = i(3)
      , u = i(32)
      , g = i(62)
      , h = i(770)
      , p = i(21)
      , m = i(19)
      , S = i(9);
    function C(e) {
        if (e) {
            const t = e.split("#");
            if (t.length >= 3)
                return t[2]
        }
    }
    t.migratePreferredDevices = function(e) {
        const t = C(e.camera)
          , i = C(e.microphone)
          , n = C(e.speaker);
        C(e.secondarySpeaker),
        r.default.loadCallingBundle().then(()=>{
            const e = S.newCauseId()
              , s = o.find(a.default.DeviceStore.getSpeakers(), e=>e.id === n)
              , r = o.find(a.default.DeviceStore.getMicrophones(), e=>e.id === i)
              , l = o.find(a.default.DeviceStore.getCameras(), e=>e.id === t);
            d.log(c.LogTraceArea.SISU, "migrateUwpSettings Migrating A/V Setting mic " + r + " cam " + l + " speaker " + s),
            a.default.DeviceStore.choosePreferredDevices({
                microphone: r ? r.id : void 0,
                camera: l ? l.id : void 0,
                speaker: s ? s.id : void 0
            }, e)
        }
        )
    }
    ,
    t.migrateDeviceSettings = function(e) {
        p.EnsureStarted(l.default).then(()=>{
            l.default.migrateSettings(e)
        }
        )
    }
    ,
    t.migrateLocalPreferences = function(e) {
        u.default.setUserPreferencesLocal(e)
    }
    ,
    t.fetchUWPSettings = function(e) {
        d.log(c.LogTraceArea.SISU, "Checking if UWP settings migration is needed for current MSIX instance...");
        const t = "s4l-" + h.strictForInternalFile(e) + ".db";
        d.log(c.LogTraceArea.SISU, "migrateUwpSettings - Preparing to fetch settings from db " + n.pii.Mri(t) + "!"),
        g.default.requestUWPToMSIXMigration();
        const i = window.electronApi.ipcProvider.uwpMigration.fetchSettings.invoke(t).then(e=>{
            let t = {};
            if (e.localPrefs) {
                const i = m.parseJsonErrorable(e.localPrefs);
                o.isError(i) ? d.log(c.LogTraceArea.SISU, "migrateUwpSettings - failed to parse local preferences") : (d.log(c.LogTraceArea.SISU, "migrateUwpSettings - migrating local preferences"),
                t.localPrefs = i.value)
            } else
                d.log(c.LogTraceArea.SISU, "migrateUwpSettings - nothing to migrate for local user preferences");
            if (e.preferredDevices) {
                const i = m.parseJsonErrorable(e.preferredDevices);
                o.isError(i) ? d.log(c.LogTraceArea.SISU, "migrateUwpSettings - failed to parse prefferred devices") : (d.log(c.LogTraceArea.SISU, "migrateUwpSettings - migrating user preferred devices"),
                t.preferredDevices = i.value)
            } else
                d.log(c.LogTraceArea.SISU, "migrateUwpSettings - nothing to migrate for user preferred devices");
            if (e.deviceStore) {
                const i = m.parseJsonErrorable(e.deviceStore);
                if (o.isError(i))
                    d.log(c.LogTraceArea.SISU, "migrateUwpSettings - failed to parse device store");
                else {
                    d.log(c.LogTraceArea.SISU, "migrateUwpSettings - migrating device store");
                    const e = {
                        agc: i.value.agc,
                        blurBackgroundForAllCalls: i.value.blurBackgroundForAllCalls,
                        microphoneVolumes: {},
                        speakerVolumes: {},
                        backgroundReplacementForAllCalls: i.value.backgroundReplacementForAllCalls
                    };
                    o.each(i.value.microphoneVolumes, (t,i)=>{
                        const n = C(i);
                        n && (e.microphoneVolumes[n] = t)
                    }
                    ),
                    o.each(i.value.speakerVolumes, (t,i)=>{
                        const n = C(i);
                        n && (e.speakerVolumes[n] = t)
                    }
                    ),
                    t.deviceSettings = e
                }
            }
            return t
        }
        ).catch(e=>{
            let t = e;
            return e.statusCode && (t = m.errorAsString(e)),
            d.log(c.LogTraceArea.SISU, "[UWPMigration] Failed to migrate UWP settings, reason: " + t),
            {}
        }
        );
        return s.fromThenable(i)
    }
}
, , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(1)
      , o = i(70)
      , s = i(39);
    class r extends s.TelemetryEventBase {
        constructor(e, t, i, n, o, s, r, a) {
            super(),
            this._isAvatarSet = e,
            this._AvatarPolicy = t,
            this._setupWizardCompletionTimestamp = i,
            this._isNewUser = n,
            this._notificationsPermission = o,
            this._cameraPermission = s,
            this._microphonePermission = r,
            this._contactsPermission = a
        }
        getEventName() {
            return "onboarding_user_status"
        }
        getAttributes() {
            const e = super.getAttributes();
            return e.AvatarPolicy = n.upperFirst(n.camelCase(this._AvatarPolicy)),
            e.AvatarState = this._isAvatarSet ? "Set" : "Unset",
            e.SetupWizardCompletionTimestamp = this._setupWizardCompletionTimestamp || "NotCompleted",
            e.UserIsNew = this._isNewUser,
            e.NotificationsPermission = o.PermissionStatus[this._notificationsPermission],
            e.CameraPermission = o.PermissionStatus[this._cameraPermission],
            e.MicrophonePermission = o.PermissionStatus[this._microphonePermission],
            e.ContactsPermission = o.PermissionStatus[this._contactsPermission],
            e
        }
    }
    t.UserStatusTelemetry = r
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const n = i(3407)
      , o = i(2)
      , s = i(3)
      , r = i(485);
    t.tryMigrateUWPCredentials = function() {
        return n.CredentialsMigration.tryMigrateCredentials()
    }
    ,
    t.tryMigrateM3Credentials = function(e, t) {
        return n.CredentialsMigration.tryMigrateCredentials().then(t=>r.default.getAccessTokenFromRefreshToken(t.msaRefreshToken, !0).then(i=>{
            e(t, i)
        }
        ).done(()=>{
            n.CredentialsMigration.onMigrationComplete(),
            s.log(o.LogTraceArea.SISU, "M3 migration successfully marked as completed")
        }
        )).catch(()=>{
            s.log(o.LogTraceArea.SISU, "Failed to migrate credentials from M3, falling back to normal login flow"),
            t()
        }
        )
    }
}
]]);
